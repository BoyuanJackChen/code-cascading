[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #return list(set(test_tup1) & set(test_tup2))\n    return list(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 47
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n",
        "num_ids": 22
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n",
        "num_ids": 50
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    print \"Shared elements: \", shared_elements\n",
        "num_ids": 56
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    sorted1 = sorted(test_tup1)\n    sorted2 = sorted(test_tup2)\n    return [x for x in sorted1 if x in sorted2]\n",
        "num_ids": 46
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return len(set(test_tup1).intersection(set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    if len(set1) == len(set2):\n        return True\n    else:\n        return False\n    ",
        "num_ids": 55
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for elt in test_tup1:\n        if elt in test_tup2:\n            result.append(elt)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    ans = list(set(test_tup1) & set(test_tup2))\n    return ans\n",
        "num_ids": 29
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    count = 0\n    # If both lists are empty\n    if test_tup1 == [] and test_tup2 == []:\n        return count\n",
        "num_ids": 38
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        max_divisor = int(math.floor(math.sqrt(n)))\n        for i in range(3, 1 + max_divisor, 2):\n            if n % i == 0:\n                return True\n    return False\n",
        "num_ids": 100
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n > 2 and n % 2 == 0:\n        return False\n    max = math.ceil(math.sqrt(n))\n    for j in range(3, max+1, 2):\n        if n % j == 0:\n            return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    n = abs(n)\n    if n==1: return False\n    if n==2: return True\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    elif n == 3:\n        return False\n    else:\n        for i in range(2,n//2+1):\n            if n%i == 0:\n                return True\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return False\n    elif n%2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n%i == 0:\n                return True\n    return False\ndef sum_of_primes(n):\n    '''\n    Write a python function to sum all the primes below n\n    '''\n    if n < 2:\n        return 0\n    prime_sum = 0\n    for i in range(2, n+1):\n        if not is_not_prime(i):\n            prime_sum += i\n    return prime_sum\ndef count_of_primes(n):\n    '''\n    Write a python function to count the number of primes less than n\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n+1):\n        if not is_not_prime(i):\n            count += 1\n    return count\ndef sum_of_primes_below_n(n):\n    '''\n    Write a python function to sum all the primes below n\n    '''\n    if n < 2:\n        return 0\n    return sum_of_primes(n)\ndef count_of_primes_below_n(n):\n    '''\n    Write a python function to count the number of primes below n\n    '''\n    if n < 2:\n        return 0\n    return count_of_primes(n)\ndef find_max_product_of_two_numbers(a, b):\n    '''\n    Write a python function to find the maximum product of two numbers\n    '''\n    if a > b:\n        return b*a\n    else:\n        return a*b\ndef find_max_product_of_three_numbers(a, b, c):\n    '''\n    Write a python function to find the maximum product of three numbers\n    '''\n    if a > b and a > c:\n        return a*b*c\n    elif b > a and b > c:\n        return b*a*c\n    else:\n        return c*a*b\ndef find_max_product_of_four_numbers(a, b, c, d):\n    '''\n    Write a python function to find the maximum product of four numbers\n    '''\n    if a > b and a > c and a > d:\n        return a*b*c*d\n    elif b > a and b > c and b > d:\n        return b*a*c*d\n    elif c > a and c > b and c > d:\n        return c*a*b*d\n    else:\n        return d*a*b*c\ndef find_max_product_of_five_numbers(a, b, c, d, e):\n    '''\n    Write a python function to find the maximum product of five numbers\n    '''\n    if a > b and a > c and a > d and a > e:\n        return a*b*c*d*e\n    elif b > a and b > c and b > d and b > e:\n        return b*a*c*d*e\n    elif c > a and c > b and c > d and c > e:\n        return c*a*b*d*e\n    elif d > a and d > b and d > c and d > e:\n        return d*a*b*c*e\n    else:\n        return e*a*b*c*d\ndef sum_of_digits(n):\n    '''\n    Write a python function to sum the digits of a number\n    '''\n    if n < 0:\n        return 0\n    sum = 0\n    while n:\n        sum += n%10\n        n //= 10\n    return sum\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome\n    '''\n    if n < 0:\n        return False\n    n = str(n)\n    i = 0\n    j = len(n) - 1\n    while i < j:\n        if n[i]!= n[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef count_digits(n):\n    '''\n    Write a python function to count the digits of a number\n    '''\n    if n < 0:\n        return 0\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\ndef is_perfect_number(n):\n    '''\n    Write a python function to check if a number is perfect number\n    '''\n    if n < 0:\n        return False\n    sum_of_digits = 0\n    if count_digits(n) == 1:\n        return True\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum_of_digits += i\n            sum_of_digits += n//i\n    return sum_of_digits == n\ndef sum_of_perfect_squares(n):\n    '''\n    Write a python function to sum the digits of a number\n    '''\n    if n < 0:\n        return 0\n    sum = 0\n    while n:\n        sum += n%10\n        n //= 10\n    for i in range(1, int(math.sqrt(sum))+1):\n        if sum%i == 0:\n            return sum\n    return 0\ndef is_harshad_number(n):\n    '''\n    Write a python function to check if a number is harshad number\n    '''\n    if n < 0:\n        return False\n    sum_of_digits = 0\n    if count_digits(n) == 1:\n        return True\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum_of_digits += i\n            sum_of_digits += n//i\n    return sum_of_digits == n\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of all divisors of a number\n    '''\n    sum = 0\n    if n < 0:\n        return 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum += i\n            sum += n//i\n    return sum\ndef is_abundant_number(n):\n    '''\n    Write a python function to check if a number is abundant number\n    '''\n    if n < 0:\n        return False\n    return sum_of_divisors(n) > n\ndef is_abundant_number(n):\n    '''\n    Write a python function to check if a number is abundant number\n    '''\n    if n < 0:\n        return False\n    return sum_of_divisors(n) > n\ndef is_sundaram_number(n):\n    '''\n    Write a python function to check if a number is sundaram number\n    '''\n    if n < 0:\n        return False\n    return sum_of_divisors(n) == n\ndef sum_of_squares_of_divisors(n):\n    '''\n    Write a python function to find the sum of squares of divisors of a number\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum += i**2\n            sum += n//i**2\n    return sum\ndef is_abundant_number(n):\n    '''\n    Write a python function to check if a number is abundant number\n    '''\n    return sum_of_squares_of_divisors(n) > n\ndef is_abundant_number(n):\n    '''\n    Write a python function to check if a number is abundant number\n    '''\n    return sum_of_squares_of_divisors(n) > n\ndef is_abundant_number(n):\n    '''\n    Write a python function to check if a number is abundant number\n    '''\n    return sum_of_squares_of_divisors(n",
        "num_ids": 18
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n==1:\n    #     return True\n    # elif n==2:\n    #     return False\n    # else:\n    #     for x in range(2,int(math.sqrt(n))+1):\n    #         if n%x==0:\n    #             return True\n    #     return False\n    return n > 1 and all(n % i for i in range(2, int(math.sqrt(n)) + 1))\n",
        "num_ids": 113
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in xrange(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef prime_num():\n    '''\n    Write a python function to return the number of prime numbers until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_not_prime(i):\n                count += 1\n        return count\ndef is_palindrome(n):\n    '''\n    Write a python function to check if the number is palindrome.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return True\n    else:\n        n = str(n)\n        length = len(n)\n        for i in xrange(0, length/2):\n            if n[i]!= n[length-i-1]:\n                return False\n        return True\ndef palindrome_num():\n    '''\n    Write a python function to return the number of palindromes until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_palindrome(i):\n                count += 1\n        return count\ndef is_pandigital(n):\n    '''\n    Write a python function to check if the number is pandigital.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return False\n    else:\n        n = str(n)\n        length = len(n)\n        for i in xrange(1, length):\n            if i not in n:\n                return False\n        return True\ndef pandigital_num():\n    '''\n    Write a python function to return the number of pandigitals until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_pandigital(i):\n                count += 1\n        return count\ndef is_armstrong(n):\n    '''\n    Write a python function to check if the number is armstrong.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return False\n    else:\n        n = str(n)\n        length = len(n)\n        if length % 2!= 0:\n            length -= 1\n        sum = 0\n        for i in xrange(0, length/2):\n            sum += int(n[i]) ** length\n        return sum == int(n)\ndef armstrong_num():\n    '''\n    Write a python function to return the number of armstrong numbers until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_armstrong(i):\n                count += 1\n        return count\ndef is_prime_factor(n, b):\n    '''\n    Write a python function to check if the number is a factor of a prime number.\n    '''\n    if n <= 0 or b <= 0:\n        print \"Number is not valid\"\n        return\n    elif b == 1:\n        return True\n    elif n % b == 0:\n        return True\n    else:\n        return False\ndef is_factor(n, b):\n    '''\n    Write a python function to check if the number is a factor of a number.\n    '''\n    if n <= 0 or b <= 0:\n        print \"Number is not valid\"\n        return\n    elif b == 1:\n        return True\n    elif n % b == 0:\n        return True\n    else:\n        return False\ndef prime_factor():\n    '''\n    Write a python function to return the number of prime factors of the number until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_prime_factor(i, n):\n                count += 1\n        return count\ndef factor():\n    '''\n    Write a python function to return the number of factors of the number until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_factor(i, n):\n                count += 1\n        return count\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if the number is a perfect square.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef perfect_square_num():\n    '''\n    Write a python function to return the number of perfect squares until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_perfect_square(i):\n                count += 1\n        return count\ndef is_factor_of_square(n, b):\n    '''\n    Write a python function to check if the number is a factor of a square number.\n    '''\n    if n <= 0 or b <= 0:\n        print \"Number is not valid\"\n        return\n    elif b == 1:\n        return True\n    elif is_perfect_square(n):\n        return True\n    else:\n        return False\ndef is_factor_of_factor(n, b):\n    '''\n    Write a python function to check if the number is a factor of a number.\n    '''\n    if n <= 0 or b <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == b:\n        return True\n    elif is_factor(n, b):\n        return True\n    else:\n        return False\ndef square_factor():\n    '''\n    Write a python function to return the number of square factors of the number until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_factor_of_square(i, n):\n                count += 1\n        return count\ndef square_factor_factor():\n    '''\n    Write a python function to return the number of factors of a square number until specified input.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return 0\n    else:\n        n = int(n)\n        count = 0\n        for i in xrange(1, n):\n            if is_factor_of_factor(i, n):\n                count += 1\n        return count\ndef is_prime_number(n):\n    '''\n    Write a python function to check if the number is a prime number.\n    '''\n    if n <= 0:\n        print \"Number is not valid\"\n        return\n    elif n == 1:\n        return False\n    else:",
        "num_ids": 36
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    for x in range(2,int(math.sqrt(n))+1):\n        if n%x==0:\n            return True\n    return False\ndef  prime_fraction(n):\n    '''\n    Write a python function to identify all the prime fraction numbers in a given number.\n    '''\n    fraction=[]\n    for x in range(1,n):\n        if n%x==0:\n            fraction.append(x)\n    return fraction\ndef check_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n%x==0:\n            return False\n    return True\ndef is_perfect_square(n):\n    '''\n    Write a python function to identify the perfect square numbers in a given number.\n    '''\n    root=int(math.sqrt(n))\n    return (n==root*root)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    sum=0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\ndef is_pandigital(n,start):\n    '''\n    Write a python function to check whether a given number is a pandigital number or not.\n    '''\n    pandigital=False\n    for x in range(start,n+1):\n        if is_not_prime(x):\n            if len(prime_fraction(x))==9:\n                if x>start:\n                    if sum_of_digits(x)==start:\n                        pandigital=True\n                        return pandigital\n    return pandigital\ndef check_pandigital(n):\n    '''\n    Write a python function to check whether a given number is pandigital or not.\n    '''\n    if is_pandigital(n,10):\n        return True\n    else:\n        return False\ndef find_all_pandigitals(n):\n    '''\n    Write a python function to find all the pandigital numbers in a given number.\n    '''\n    pandigital_numbers=[]\n    for x in range(1,n):\n        if is_pandigital(x,10):\n            pandigital_numbers.append(x)\n    return pandigital_numbers\ndef is_pandigital_permutation(n,n1):\n    '''\n    Write a python function to check whether a given permutation of the digits of a number is pandigital or not.\n    '''\n    if is_not_prime(n):\n        return False\n    if len(prime_fraction(n))!=len(prime_fraction(n1)):\n        return False\n    for x in range(0,len(prime_fraction(n))):\n        if prime_fraction(n)[x]!=prime_fraction(n1)[x]:\n            return False\n    return True\ndef check_pandigital_permutation(n):\n    '''\n    Write a python function to check whether a given permutation of the digits of a number is pandigital or not.\n    '''\n    pandigital_numbers=find_all_pandigitals(n)\n    for x in pandigital_numbers:\n        if is_pandigital_permutation(n,x):\n            return True\n    return False\ndef find_pandigital_permutation(n):\n    '''\n    Write a python function to find all the permutations of the digits of a pandigital number.\n    '''\n    pandigital_numbers=find_all_pandigitals(n)\n    permutations=[]\n    for x in pandigital_numbers:\n        permutations.append(permute(x))\n    return permutations\ndef permute(n):\n    '''\n    Write a python function to find all the permutations of a given number.\n    '''\n    if len(n)==1:\n        return [n]\n    else:\n        permutations=[]\n        for x in range(0,len(n)):\n            m=n[x]\n            r=n[:x]+n[x+1:]\n            for y in permute(r):\n                permutations.append([m]+y)\n        return permutations\ndef find_all_permutations(n):\n    '''\n    Write a python function to find all the permutations of a given number.\n    '''\n    if len(n)==1:\n        return [n]\n    else:\n        permutations=[]\n        for x in n:\n            r=n[:]\n            r.remove(x)\n            for y in find_all_permutations(r):\n                permutations.append([x]+y)\n        return permutations\ndef find_permutations(n):\n    '''\n    Write a python function to find all the permutations of a given number.\n    '''\n    if len(n)==1:\n        return [n]\n    else:\n        permutations=[]\n        for x in n:\n            r=n[:]\n            r.remove(x)\n            permutations.append([x]+r)\n        return permutations\ndef find_all_combinations(n):\n    '''\n    Write a python function to find all the permutations of a given number.\n    '''\n    if len(n)==1:\n        return [n]\n    else:\n        combinations=[]\n        for x in n:\n            r=n[:]\n            r.remove(x)\n            for y in find_all_combinations(r):\n                combinations.append([x]+y)\n        return combinations\ndef find_combination(n):\n    '''\n    Write a python function to find all the permutations of a given number.\n    '''\n    if len(n)==1:\n        return [n]\n    else:\n        combinations=[]\n        for x in n:\n            r=n[:]\n            r.remove(x)\n            combinations.append([x]+r)\n        return combinations\ndef main():\n    while True:\n        n=int(input(\"Enter a number: \"))\n        if n<0:\n            break\n        print(\"Is\",n,\"a perfect square:\",is_perfect_square(n))\n        print(\"Is\",n,\"a perfect pandigital:\",is_pandigital(n,10))\n        print(\"Is\",n,\"a permutation of a pandigital:\",is_pandigital_permutation(n,n))\n        print(\"Is\",n,\"a permutation of a pandigital permutation:\",check_pandigital_permutation(n))\n        print(\"All the permutations of\",n,\"are:\",find_pandigital_permutation(n))\n        print(\"All the permutations of\",n,\"are:\",find_all_permutations(n))\n        print(\"All the combinations of\",n,\"are:\",find_all_combinations(n))\n        print(\"All the combinations of\",n,\"are:\",find_combination(n))\n    print(\"Thanks for playing!\")\nmain()\n'''\nCODE CHALLENGE:\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n%2 == 0:\n        return True\n    for i in range(3,int(math.sqrt(n)+1),2):\n        if n%i == 0:\n            return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    max_div = math.floor(math.sqrt(n))\n    for d in range(3, 1 + max_div, 2):\n        if n % d == 0:\n            return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    for i in range(n-1):\n        hq.heappop(h)\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,-i)\n    for i in range(n-1):\n        hq.heappop(h)\n    return h\ndef remove_item_from_list(nums,n):\n    '''\n    Write a function to remove the first n elements from the list and return a new list\n    '''\n    for i in range(n):\n        nums.pop(0)\n    return nums\ndef remove_item_from_list_2(nums,n):\n    '''\n    Write a function to remove the first n elements from the list and return a new list.\n    '''\n    nums = nums[n:]\n    return nums\ndef merge_sort(arr):\n    '''\n    Write a function that takes an array as input and sorts it using merge sort.\n    '''\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i+=1\n            else:\n                arr[k] = right[j]\n                j+=1\n            k+=1\n        while i < len(left):\n            arr[k] = left[i]\n            i+=1\n            k+=1\n        while j < len(right):\n            arr[k] = right[j]\n            j+=1\n            k+=1\n    return arr\ndef remove_nth_from_end(head,n):\n    '''\n    Write a function that removes nth node from the end of the linked list and returns the head node of the modified linked list\n    '''\n    dummy = ListNode(0)\n    dummy.next = head\n    first = dummy\n    second = dummy\n    for i in range(n):\n        first = first.next\n    while first:\n        first = first.next\n        second = second.next\n    second.next = second.next.next\n    return dummy.next\ndef remove_nth_from_end_2(head,n):\n    '''\n    Write a function that removes nth node from the end of the linked list and returns the head node of the modified linked list\n    '''\n    second = head\n    first = head\n    for i in range(n):\n        first = first.next\n    if not first:\n        return head.next\n    while first.next:\n        first = first.next\n        second = second.next\n    second.next = second.next.next\n    return head\ndef find_mid_node(head):\n    '''\n    Write a function that takes in the head of a linked list and returns a reference to the mid point of the linked list.\n    '''\n    fast = slow = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\ndef find_mid_node_2(head):\n    '''\n    Write a function that takes in the head of a linked list and returns a reference to the mid point of the linked list.\n    '''\n    first = head\n    second = head\n    while second and second.next:\n        first = first.next\n        second = second.next.next\n    return first\ndef find_mid_node_3(head):\n    '''\n    Write a function that takes in the head of a linked list and returns a reference to the mid point of the linked list.\n    '''\n    if not head:\n        return None\n    fast = slow = head\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\ndef rotate_list(head,k):\n    '''\n    Write a function that takes in the head of a linked list and an integer k, and returns the head of the modified linked list.\n    '''\n    if not head or k == 0:\n        return head\n    first = head\n    second = head\n    for i in range(k):\n        first = first.next\n    while first.next:\n        first = first.next\n        second = second.next\n    first.next = head\n    head = second.next\n    second.next = None\n    return head\ndef rotate_list_2(head,k):\n    '''\n    Write a function that takes in the head of a linked list and an integer k, and returns the head of the modified linked list.\n    '''\n    if not head or k == 0:\n        return head\n    first = head\n    second = head\n    for i in range(k):\n        first = first.next\n    while first.next:\n        first = first.next\n        second = second.next\n    first.next = head\n    head = second.next\n    second.next = None\n    return head\ndef reverse_linked_list(head):\n    '''\n    Write a function that takes in the head of a linked list and returns the head of the modified linked list.\n    '''\n    if not head or not head.next:\n        return head\n    prev = None\n    curr = head\n    while curr:\n        nxt = curr.next\n        curr.next = prev\n        prev = curr\n        curr = nxt\n    return prev\ndef reverse_linked_list_2(head):\n    '''\n    Write a function that takes in the head of a linked list and returns the head of the modified linked list.\n    '''\n    if not head or not head.next:\n        return head\n    curr = head\n    prev = None\n    while curr:\n        nxt = curr.next\n        curr.next = prev\n        prev = curr\n        curr = nxt\n    return prev\ndef reverse_linked_list_3(head):\n    '''\n    Write a function that takes in the head of a linked list and returns the head of the modified linked list.\n    '''\n    if not head or not head.next:\n        return head\n    last = None\n    curr = head\n    while curr:\n        nxt = curr.next\n        curr.next = last\n        last = curr\n        curr = nxt\n    return last\ndef is_palindrome(head):\n    '''\n    Write a function that takes in the head of a linked list and returns a boolean indicating whether the list is a palindrome.\n    '''\n    if not head or not head.next:\n        return True\n    first = head\n    second = head\n    stack = []\n    while second:\n        stack.append(second)\n        second = second.next\n    while stack:\n        if first.val!= stack.pop().val:\n            return False\n        first = first.next\n    return True\ndef is_palindrome_2(head):\n    '''\n    Write a function that takes in the head of a linked list and returns a boolean indicating whether the list is a palindrome.\n    '''\n    if not head or not head.next:\n        return True\n    second = head\n    first = head\n    stack = []\n    while second:\n        stack.append(second)\n        second = second.next\n    while stack:\n        if first.val!= stack.pop().val:\n            return False\n        first = first.next\n    return True\ndef is_palindrome_3(head):\n    '''\n    Write a function that takes in the head of a linked list and returns a boolean indicating whether the list is a palindrome.\n    '''\n    if not head or not head.next:\n        return True\n    first = head\n    second = head\n    while second.next:\n        first = first.next\n        second = second.next.next\n    second = head\n    while second:\n        if first",
        "num_ids": 63
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # for i in range(len(nums)):\n    #     hq.heappush(nums, -1*nums[i])\n    # return [hq.heappop(nums) for i in range(n)]\n",
        "num_ids": 60
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums == None or len(nums) == 0 or n == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if nums == None or len(nums) == 0 or n == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heap_sorted(nums,n):\n    '''\n    Write a function to sort a given list of numbers using heapsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef bubble_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using bubblesort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef insertion_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using insertion sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    for i in range(1,len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j],nums[j-1] = nums[j-1],nums[j]\n            j -= 1\n    return nums\ndef shell_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using shellsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    gap = int(len(nums)/2)\n    while gap > 0:\n        for i in range(gap,len(nums)):\n            j = i\n            while j > 0 and nums[j] < nums[j-gap]:\n                nums[j],nums[j-gap] = nums[j-gap],nums[j]\n                j -= gap\n        gap = int(gap/2)\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using mergesort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)//2\n    left,right = merge_sort(nums[:mid]),merge_sort(nums[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    '''\n    Merge two given lists in ascending order.\n    '''\n    if left == None or len(left) == 0:\n        return right\n    if right == None or len(right) == 0:\n        return left\n    i,j = 0,0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\ndef radix_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using radixsort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_length = 1\n    for i in range(len(str(max(nums)))):\n        max_length = max_length*10\n    buckets = [[] for i in range(max_length)]\n    for i in range(len(nums)):\n        buckets[nums[i]//(max_length//10**i)%10].append(nums[i])\n    i = 0\n    for bucket in buckets:\n        for num in bucket:\n            nums[i] = num\n            i += 1\n    return nums\ndef quick_sort(nums,start,end):\n    '''\n    Write a function to sort a given list of numbers using quicksort.\n    '''\n    if start >= end:\n        return\n    pivot = nums[start]\n    left = start+1\n    right = end\n    while left <= right:\n        while left <= end and nums[left] < pivot:\n            left += 1\n        while right > start and nums[right] > pivot:\n            right -= 1\n        if left <= right:\n            nums[left],nums[right] = nums[right],nums[left]\n            left += 1\n            right -= 1\n    quick_sort(nums,start,right-1)\n    quick_sort(nums,right+1,end)\n    return nums\ndef bucket_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using bucket sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    length = len(nums)\n    size = max(nums)-min(nums)+1\n    buckets = [[] for i in range(size)]\n    for i in range(length):\n        buckets[nums[i]-min(nums)//size].append(nums[i])\n    for i in range(size):\n        buckets[i].sort()\n    i = 0\n    for bucket in buckets:\n        for num in bucket:\n            nums[i] = num\n            i += 1\n    return nums\ndef count_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using counting sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_num = max(nums)\n    counts = [0 for i in range(max_num+1)]\n    for i in range(len(nums)):\n        counts[nums[i]] += 1\n    index = 0\n    for i in range(max_num+1):\n        while counts[i] > 0:\n            nums[index] = i\n            counts[i] -= 1\n            index += 1\n    return nums\ndef radix_count_sort(nums):\n    '''\n    Write a function to sort a given list of numbers using radix counting sort.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n    max_length = 1\n    for i in range(len(str(max(nums)))):\n        max_length = max_length*10\n    buckets = [[] for i in range(max_length)]\n    for i in range(len(nums)):\n        buckets[nums[i]//(max_length//10**i)%10]",
        "num_ids": 108
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heap\n    # time - O(n lgn)\n    # space - O(n)\n    if nums == []:\n        return []\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    #using heap\n    # time - O(n lgn)\n    # space - O(n)\n    if nums == []:\n        return []\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef heap_list_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using list\n    # time - O(n)\n    # space - O(n)\n    return sorted(nums,reverse=True)[:n]\ndef heap_list_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    #using list\n    # time - O(n)\n    # space - O(n)\n    return sorted(nums)\ndef heap_list_largest_efficient(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using list\n    # time - O(n)\n    # space - O(1)\n    if nums == []:\n        return []\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef heap_list_smallest_efficient(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    #using list\n    # time - O(n)\n    # space - O(1)\n    if nums == []:\n        return []\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef heap_queue_largest_efficient(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heap\n    # time - O(n lgn)\n    # space - O(n)\n    if nums == []:\n        return []\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef heap_queue_smallest_efficient(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    #using heap\n    # time - O(n lgn)\n    # space - O(n)\n    if nums == []:\n        return []\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n",
        "num_ids": 72
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(len(nums)):\n        hq.heappush(heap,(nums[i],nums[i]))\n    for i in range(n-1):\n        hq.heappop(heap)\n    return sorted(heap,reverse=True)\n",
        "num_ids": 80
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\ndef sort_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort(reverse=True)\n    return nums[0:n]\ndef sort_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    nums.sort()\n    return nums[0:n]\ndef sort_integers_negative_positive(nums,n):\n    '''\n    Write a function to sort the given list of integers in ascending order and return the middle element, \n    if there are an odd number of elements, otherwise return the average of the middle two elements.\n    '''\n    if n%2==1:\n        return nums[n//2]\n    else:\n        return (nums[n//2]+nums[n//2-1])/2.0\ndef sort_integers_negative_positive_optimized(nums,n):\n    '''\n    Write a function to sort the given list of integers in ascending order and return the middle element, \n    if there are an odd number of elements, otherwise return the average of the middle two elements.\n    '''\n    nums.sort()\n    return (nums[n-1]+nums[n-2])/2.0\ndef sort_integers_pairs(nums,n):\n    '''\n    Write a function to sort the given list of integers in ascending order and return the middle element, \n    if there are an odd number of elements, otherwise return the average of the middle two elements.\n    '''\n    nums.sort()\n    if n%2==1:\n        return nums[n//2]\n    else:\n        return (nums[n//2]+nums[n//2-1])/2.0\ndef sort_integers_pairs_optimized(nums,n):\n    '''\n    Write a function to sort the given list of integers in ascending order and return the middle element, \n    if there are an odd number of elements, otherwise return the average of the middle two elements.\n    '''\n    nums.sort()\n    if n%2==1:\n        return nums[n//2]\n    else:\n        return (nums[n//2]+nums[n//2-1])/2.0\ndef sort_integers_floats(nums,n):\n    '''\n    Write a function to sort the given list of integers in ascending order and return the middle element, \n    if there are an odd number of elements, otherwise return the average of the middle two elements.\n    '''\n    nums.sort()\n    if n%2==1:\n        return nums[n//2]\n    else:\n        return (nums[n//2]+nums[n//2-1])/2.0\ndef sort_integers_floats_optimized(nums,n):\n    '''\n    Write a function to sort the given list of integers in ascending order and return the middle element, \n    if there are an odd number of elements, otherwise return the average of the middle two elements.\n    '''\n    nums.sort()\n    if n%2==1:\n        return nums[n//2]\n    else:\n        return (nums[n//2]+nums[n//2-1])/2.0\ndef sort_integers_floats_optimized2(nums,n):\n    '''\n    Write a function to sort the given list of integers in ascending order and return the middle element, \n    if there are an odd number of elements, otherwise return the average of the middle two elements.\n    '''\n    nums.sort()\n    if n%2==1:\n        return nums[n//2]\n    else:\n        return (nums[n//2]+nums[n//2-1])/2.0\ndef sum_lists(list1,list2):\n    '''\n    Write a function to sum two lists.\n    '''\n    return [list1[i]+list2[i] for i in range(len(list1))]\ndef sum_lists_optimized(list1,list2):\n    '''\n    Write a function to sum two lists.\n    '''\n    return [list1[i]+list2[i] for i in range(min(len(list1),len(list2)))]\ndef sum_lists_optimized2(list1,list2):\n    '''\n    Write a function to sum two lists.\n    '''\n    return sum(list1[i]+list2[i] for i in range(min(len(list1),len(list2))))\ndef fib_optimized(n):\n    '''\n    Write a function to compute the nth Fibonacci number, \n    where n is a non-negative integer and the function has been optimized.\n    '''\n    fib1=1\n    fib2=1\n    for i in range(n-2):\n        fib2,fib1=fib1+fib2,fib2\n    return fib2\ndef fib_optimized2(n):\n    '''\n    Write a function to compute the nth Fibonacci number, \n    where n is a non-negative integer and the function has been optimized.\n    '''\n    fib1=1\n    fib2=1\n    for i in range(n-2):\n        fib2,fib1=fib1+fib2,fib1\n    return fib2\ndef kth_largest_optimized(nums,k):\n    '''\n    Write a function to find the kth largest element in a given list of numbers, \n    returning the index of the kth largest element. \n    '''\n    hq.heapify(nums)\n    for i in range(len(nums)-1,k-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums,i)\n    return nums[0]\ndef kth_largest_optimized2(nums,k):\n    '''\n    Write a function to find the kth largest element in a given list of numbers, \n    returning the index of the kth largest element. \n    '''\n    return hq.nlargest(k,nums)[-1]\ndef kth_smallest_optimized(nums,k):\n    '''\n    Write a function to find the kth smallest element in a given list of numbers, \n    returning the index of the kth smallest element. \n    '''\n    hq.heapify(nums)\n    for i in range(len(nums)-1,k-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums,i)\n    return nums[0]\ndef kth_smallest_optimized2(nums,k):\n    '''\n    Write a function to find the kth smallest element in a given list of numbers, \n    returning the index of the kth smallest element. \n    '''\n    return hq.nsmallest(k,nums)[-1]\ndef sort_k_largest_optimized(nums,k):\n    '''\n    Write a function to find the kth largest element in a given list of numbers, \n    returning the index of the kth largest element. \n    '''\n    nums.sort()\n    return nums[len(nums)-k]\ndef sort_k_largest_optimized2(nums,k):\n    '''\n    Write a function to find the kth largest element in a given list of numbers, \n    returning the index of the kth largest elemen",
        "num_ids": 34
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heapq._heapify_max(nums)\n    l=[]\n    while(n>0):\n        l.append(heapq._heappop_max(nums))\n        n-=1\n    return l\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heapq._heapify_max(nums)\n    l=[]\n    while(n>0):\n        l.append(heapq._heappop_max(nums))\n        n-=1\n    return l\ndef string_rotation(s1,s2):\n    '''\n    Given two strings, write a function to check if they are rotations of each other.\n    '''\n    if(len(s1)!=len(s2)):\n        return False\n    s1=s1+s1\n    if(s1.count(s2)>0):\n        return True\n    return False\ndef min_window(arr, t):\n    '''\n    Find the minimum size window in arr of size t, such that every element of t appears in the window at least once.\n    '''\n    #dict{key:value}, key:element, value:count\n    dic_t={}\n    for i in t:\n        dic_t[i]=0\n    count=0\n    ans=[0,0]\n    start=0\n    end=0\n    while(end<len(arr)):\n        if arr[end] in dic_t:\n            dic_t[arr[end]]+=1\n            if dic_t[arr[end]]==1:\n                count+=1\n        end+=1\n        while(count==len(t)):\n            if(end-start<ans[1]-ans[0]):\n                ans=[start,end]\n            if arr[start] in dic_t:\n                dic_t[arr[start]]-=1\n                if dic_t[arr[start]]==0:\n                    count-=1\n            start+=1\n    if ans[1]-ans[0]==len(arr):\n        return arr[ans[0]:ans[1]]\n    return []\ndef find_permutation(s1,s2):\n    '''\n    Given two strings, write a function to check if one is a permutation of the other.\n    '''\n    if(len(s1)!=len(s2)):\n        return False\n    dic_s1={}\n    dic_s2={}\n    for i in s1:\n        if i in dic_s1:\n            dic_s1[i]+=1\n        else:\n            dic_s1[i]=1\n    for i in s2:\n        if i in dic_s2:\n            dic_s2[i]+=1\n        else:\n            dic_s2[i]=1\n    if dic_s1==dic_s2:\n        return True\n    return False\ndef permute_string(s):\n    '''\n    Given a string, write a function to check if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n    '''\n    if(len(s)==0):\n        return False\n    #dict{key:value}, key:element, value:count\n    dic_s={}\n    for i in s:\n        if i in dic_s:\n            dic_s[i]+=1\n        else:\n            dic_s[i]=1\n    count=0\n    for i in dic_s:\n        if(dic_s[i]%2!=0):\n            count+=1\n    if(count>1):\n        return False\n    return True\ndef find_permutation_2(s1,s2):\n    '''\n    Given two strings, write a function to check if one is a permutation of the other.\n    '''\n    if(len(s1)!=len(s2)):\n        return False\n    s1=sorted(s1)\n    s2=sorted(s2)\n    if(s1==s2):\n        return True\n    return False\ndef find_substring(s,t):\n    '''\n    Write a function to find the longest substring in s that is a permutation of t.\n    '''\n    if(len(s)!=len(t)):\n        return 0\n    dic_s={}\n    dic_t={}\n    for i in s:\n        if i in dic_s:\n            dic_s[i]+=1\n        else:\n            dic_s[i]=1\n    for i in t:\n        if i in dic_t:\n            dic_t[i]+=1\n        else:\n            dic_t[i]=1\n    count=0\n    start=0\n    end=0\n    while(end<len(s)):\n        if s[end] in dic_s:\n            dic_s[s[end]]-=1\n            if dic_s[s[end]]==0:\n                count-=1\n        end+=1\n        while(count==len(t)):\n            if(end-start>count):\n                count=end-start\n            if s[start] in dic_s:\n                dic_s[s[start]]+=1\n                if dic_s[s[start]]==1:\n                    count+=1\n            start+=1\n    return count\ndef find_substring_2(s,t):\n    '''\n    Write a function to find the longest substring in s that is a permutation of t.\n    '''\n    if(len(s)!=len(t)):\n        return 0\n    s=s+s\n    dic_s={}\n    dic_t={}\n    for i in s:\n        if i in dic_s:\n            dic_s[i]+=1\n        else:\n            dic_s[i]=1\n    for i in t:\n        if i in dic_t:\n            dic_t[i]+=1\n        else:\n            dic_t[i]=1\n    count=0\n    start=0\n    end=0\n    while(end<len(s)):\n        if s[end] in dic_s:\n            dic_s[s[end]]-=1\n            if dic_s[s[end]]==0:\n                count-=1\n        end+=1\n        while(count==len(t)):\n            if(end-start>count):\n                count=end-start\n            if s[start] in dic_s:\n                dic_s[s[start]]+=1\n                if dic_s[s[start]]==1:\n                    count+=1\n            start+=1\n    return count\ndef find_substring_3(s,t):\n    '''\n    Write a function to find the longest substring in s that is a permutation of t.\n    '''\n    if(len(s)!=len(t)):\n        return 0\n    dic_s={}\n    dic_t={}\n    for i in s:\n        if i in dic_s:\n            dic_s[i]+=1\n        else:\n            dic_s[i]=1\n    for i in t:\n        if i in dic_t:\n            dic_t[i]+=1\n        else:\n            dic_t[i]=1\n    start=0\n    end=0\n    count=0\n    while(end<len(s)):\n        if s[end] in dic_s:\n            dic_s[s[end]]-=1\n            if dic_s[s[end]]==0:\n                count-=1\n        end+=1\n        while(count==len(t)):\n            if(end-start>count):\n                count=end-start\n            if s[start] in dic_s:\n                dic",
        "num_ids": 243
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    s = []\n    for x in nums:\n        hq.heappush(s,-1*x)\n    if n==0:\n        return\n    for i in range(n):\n        hq.heappop(s)\n    for i in range(len(s)):\n        hq.heappop(s)\n        print(-1*s[0],end=' ')\n",
        "num_ids": 97
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, -i)\n    res = []\n    for i in range(n):\n        res.append(-hq.heappop(h))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\ndef heap_min(nums):\n    '''\n    Write a function that returns the min element of a heap.\n    '''\n    return hq.heappop(nums)\ndef heap_max(nums):\n    '''\n    Write a function that returns the max element of a heap.\n    '''\n    return hq.heappop(nums)\ndef heap_push(nums,val):\n    '''\n    Write a function that inserts a new value into a heap.\n    '''\n    hq.heappush(nums, val)\ndef heap_pop(nums):\n    '''\n    Write a function that deletes and returns the smallest (or largest) value in a heap.\n    '''\n    return hq.heappop(nums)\ndef heap_index(nums,val):\n    '''\n    Write a function that returns the index of a given value in a heap.\n    '''\n    return hq.heap.index(val)\ndef heap_contains(nums,val):\n    '''\n    Write a function that returns True if a given value is in the heap, and False otherwise.\n    '''\n    return hq.heap.contains(val)\ndef heap_heappushpop(nums,val):\n    '''\n    Write a function that inserts a new value into a heap, then removes the smallest (or largest) value from the heap.\n    '''\n    hq.heappush(nums, val)\n    return hq.heappop(nums)\ndef heap_heappushpop(nums,val):\n    '''\n    Write a function that inserts a new value into a heap, then removes the smallest (or largest) value from the heap.\n    '''\n    hq.heappush(nums, val)\n    return hq.heappop(nums)\ndef heap_heappushpop(nums,val):\n    '''\n    Write a function that inserts a new value into a heap, then removes the smallest (or largest) value from the heap.\n    '''\n    hq.heappush(nums, val)\n    return hq.heappop(nums)\ndef heap_heappushpop(nums,val):\n    '''\n    Write a function that inserts a new value into a heap, then removes the smallest (or largest) value from the heap.\n    '''\n    hq.heappush(nums, val)\n    return hq.heappop(nums)\ndef heap_extract_min(nums):\n    '''\n    Write a function that returns the minimum element of a heap.\n    '''\n    return hq.heappop(nums)\ndef heap_extract_max(nums):\n    '''\n    Write a function that returns the maximum element of a heap.\n    '''\n    return hq.heappop(nums)\ndef heap_nlargest(nums,n):\n    '''\n    Write a function that returns the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, -i)\n    res = []\n    for i in range(n):\n        res.append(-hq.heappop(h))\n    return res\ndef heap_nsmallest(nums,n):\n    '''\n    Write a function that returns the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\ndef heap_combine(nums1,nums2):\n    '''\n    Write a function that combines two sorted lists of integers into a single sorted list.\n    '''\n    h = []\n    for i in nums1:\n        hq.heappush(h, i)\n    for i in nums2:\n        hq.heappush(h, i)\n    return h\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a given list of integers using the heap sort algorithm.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    for i in range(len(nums)):\n        nums[i] = hq.heappop(h)\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function that sorts a given list of integers using the heap sort algorithm.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    for i in range(len(nums)):\n        nums[i] = hq.heappop(h)\n    return nums\ndef min_heap(nums):\n    '''\n    Write a function that finds the n smallest integers from a given list of integers, in ascending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = []\n    for i in range(len(nums)):\n        res.append(hq.heappop(h))\n    return res\ndef max_heap(nums):\n    '''\n    Write a function that finds the n largest integers from a given list of integers, in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, -i)\n    res = []\n    for i in range(len(nums)):\n        res.append(-hq.heappop(h))\n    return res\ndef counting_sort(nums):\n    '''\n    Write a function that sorts a given list of integers using the counting sort algorithm.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = []\n    for i in range(len(nums)):\n        res.append(hq.heappop(h))\n    return res\ndef counting_sort(nums):\n    '''\n    Write a function that sorts a given list of integers using the counting sort algorithm.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    res = []\n    for i in range(len(nums)):\n        res.append(hq.heappop(h))\n    return res\ndef radix_sort(nums):\n    '''\n    Write a function that sorts a given list of integers using the radix sort algorithm.\n    '''\n    n = max(nums)\n    t = 1\n    while n > 0:\n        buckets = [[] for i in range(10)]\n        for i in nums:\n            buckets[(i / t) % 10].append(i)\n        nums = []\n        for i in buckets:\n            nums.extend(i)\n        t *= 10\n    return nums\ndef radix_sort(nums):\n    '''\n    Write a function that sorts a given list of integers using the radix sort algorithm.\n    '''\n    n = max(nums)\n    t = 1\n    while n > 0:\n        buckets = [[] for i in range(10)]\n        for i in nums:\n            buckets[(i / t) % 10].append(i)\n        nums = []\n        for i in buckets:\n            nums.extend(i",
        "num_ids": 83
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in nums:\n        hq.append([i,nums.index(i)])\n    for i in range(n):\n        hq[i][1]=hq[i][1]-i\n    hq.sort(reverse=True)\n    return [x[0] for x in hq]\n",
        "num_ids": 84
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1) == 0) and x!= 0\n",
        "num_ids": 21
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return (x & (x - 1)) == 0\n",
        "num_ids": 42
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # A simple logic is that if we and the number given to us differ at one bit position, the number will be power of two, else it will not be power of two\n    return (x&(x-1) == 0) \n",
        "num_ids": 55
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_1 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x==2**(x-1)\n    \n    \ndef is_Power_Of_Two_2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_3 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_4 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_5 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_6 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_7 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_8 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_9 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_10 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_11 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_12 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_13 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_14 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_15 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_16 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_17 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_18 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_19 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_20 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_21 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_22 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_23 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_24 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_25 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_26 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_27 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_28 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_29 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_30 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_31 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_Of_Two_32 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0 \n    \n    \ndef is_Power_O",
        "num_ids": 26
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n    num = x & num\n    if x & num == 0: \n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2: \n        return True\n    elif x == 1: \n        return False\n    else:\n        while (x % 2 == 0):\n            x /= 2\n",
        "num_ids": 47
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1) == 0) and x > 0\n",
        "num_ids": 20
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = 1\n    while (num < x):\n        num = 2 * num\n    return num == x\n",
        "num_ids": 28
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = int(math.log(x, 2))\n    if (n*2 == x): \n        return 1\n    else: \n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = []\n    for match in re.finditer(r'\\w+', text):\n        word = match.group()\n        if len(word) > 4:\n            words.append(word)\n    return words\n",
        "num_ids": 55
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b',text)\n",
        "num_ids": 24
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('[A-Za-z]+', text)\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #Words that have at least 4 characters\n    new_text = re.findall(r'\\w+',text)\n    \n    #Dictionary of words\n    dict_words = {}\n    for i in new_text:\n        if len(i) >= 4:\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef all_char_word(text):\n    '''\n    Write a function which takes a sentence as input, and returns the number of words which have all the same letters in it.\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the word with the same letters in it\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if len(i) == length:\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef word_order(text):\n    '''\n    Write a function which takes a sentence as input, and returns the number of words which are in alphabetical order\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the words in alphabetical order\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if new_text.index(i) == new_text.index(i[::-1]):\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef sentence_endings(text):\n    '''\n    Write a function which returns the number of words which have the same ending as the word before it in a sentence.\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the word with the same letters in it\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if new_text.index(i) == new_text.index(i[::-1]):\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef first_last_name(text):\n    '''\n    Write a function which takes a sentence as input, and returns the number of words which have a first letter in a string.\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the word with the same letters in it\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if new_text.index(i) == new_text.index(i[::-1]):\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef middle_letter(text):\n    '''\n    Write a function which takes a sentence as input, and returns the number of words which have a middle letter in it.\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the word with the same letters in it\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if new_text.index(i) == new_text.index(i[::-1]):\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef first_char_word(text):\n    '''\n    Write a function which takes a sentence as input, and returns the number of words which have a first letter in a string.\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the word with the same letters in it\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if new_text.index(i) == new_text.index(i[::-1]):\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef all_char_word_count(text):\n    '''\n    Write a function which takes a sentence as input, and returns the number of words which have all the same letters in it.\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the word with the same letters in it\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if new_text.index(i) == new_text.index(i[::-1]):\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef first_char_word_count(text):\n    '''\n    Write a function which takes a sentence as input, and returns the number of words which have a first letter in a string.\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the word with the same letters in it\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if new_text.index(i) == new_text.index(i[::-1]):\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)\n    print(sorted_dict)\n    \ndef last_char_word(text):\n    '''\n    Write a function which takes a sentence as input, and returns the number of words which have a last letter in a string.\n    '''\n    #Find the length of the sentence\n    new_text = re.findall(r'\\w+',text)\n    length = len(new_text)\n    \n    #Find the word with the same letters in it\n    new_text = list(set(new_text))\n    dict_words = {}\n    for i in new_text:\n        if new_text.index(i) == new_text.index(i[::-1]):\n            dict_words[i] = new_text.count(i)\n    \n    #Sort the dictionary\n    sorted_dict = sorted(dict_words,key=dict_words.get,reverse=True)",
        "num_ids": 158
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if type(text)!= str:\n        return 'Input must be a string'\n    \n    #find all words that are at least 4 characters long\n    words = re.findall('\\w+', text)\n    print(words)\n    return words\n",
        "num_ids": 62
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n",
        "num_ids": 21
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('[a-z]+',text)\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    ans = []\n    if len(text) == 0:\n        return ans\n    if len(text) == 1:\n        if len(text[0]) > 4:\n            ans.append(text[0])\n        return ans\n    if len(text[0]) > 4:\n        ans.append(text[0])\n    for i in range(1,len(text)):\n        if len(text[i]) > 4:\n            ans.append(text[i])\n    return ans\n",
        "num_ids": 119
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # your code goes here\n    return re.findall('\\S{4,}',text)\ndef find_char_at_least(text):\n    '''\n    Write a function to find all words which have at least 4 characters in them in a string.\n    '''\n    # your code goes here\n    return re.findall('\\S{4,}',text)\ndef find_char_at_most(text):\n    '''\n    Write a function to find all words which have at most 4 characters in them in a string.\n    '''\n    # your code goes here\n    return re.findall('\\S{2,4}',text)\ndef find_char_exactly(text):\n    '''\n    Write a function to find all words which have exactly 4 characters in them in a string.\n    '''\n    # your code goes here\n    return re.findall('\\S{4}',text)\ndef find_all_tags(text):\n    '''\n    Write a function to find all HTML tags in the string text.\n    '''\n    # your code goes here\n    return re.findall('<[^>]*>',text)\ndef find_all_tags_with_attributes(text):\n    '''\n    Write a function to find all HTML tags in the string text, and also their attributes and values.\n    '''\n    # your code goes here\n    return re.findall('<([^\\s>]*)>(.*)<\\/\\1>',text)\ndef find_all_attributes(text):\n    '''\n    Write a function to find all attributes in the string text.\n    '''\n    # your code goes here\n    return re.findall('\\s*\\w*\\s*=\\s*\"|\\s*\\w*\\s*=\\s*\\'|\\s*\\w*\\s*=\\s*[^\"\\'>]*|\\s*\\w*\\s*=\\s*[^\"\\'>]*\\s*',text)\ndef find_all_attributes_with_values(text):\n    '''\n    Write a function to find all attributes in the string text, and their values.\n    '''\n    # your code goes here\n    return re.findall('\\s*\\w*\\s*=\\s*([^\"\\'>]*)',text)\ndef find_all_urls(text):\n    '''\n    Write a function to find all the URLs in the string text.\n    '''\n    # your code goes here\n    return re.findall('(http|https|ftp)://[^\\s]+',text)\ndef find_all_urls_with_protocol(text):\n    '''\n    Write a function to find all the URLs in the string text, including their protocol.\n    '''\n    # your code goes here\n    return re.findall('((http|https|ftp)://[^\\s]+)',text)\ndef find_all_urls_with_protocol_and_query_string(text):\n    '''\n    Write a function to find all the URLs in the string text, including their protocol, query string, and fragment identifier.\n    '''\n    # your code goes here\n    return re.findall('((http|https|ftp)://[^\\s]*)(?P<query_string>\\?(.*))?#(?P<fragment>.*)',text)\ndef find_all_urls_with_protocol_and_query_string_and_fragment(text):\n    '''\n    Write a function to find all the URLs in the string text, including their protocol, query string, and fragment identifier.\n    '''\n    # your code goes here\n    return re.findall('((http|https|ftp)://[^\\s]*)(?P<query_string>\\?(.*))?#(?P<fragment>.*)',text)\ndef find_all_email_addresses(text):\n    '''\n    Write a function to find all the email addresses in the string text.\n    '''\n    # your code goes here\n    return re.findall('[\\w\\.-]+@[\\w\\.-]+(?:\\.[\\w]+)+',text)\ndef find_all_email_addresses_with_protocol(text):\n    '''\n    Write a function to find all the email addresses in the string text, including their protocol.\n    '''\n    # your code goes here\n    return re.findall('(([\\w\\.-]+@[\\w\\.-]+(?:\\.[\\w]+)+)(?P<protocol>://)?)',text)\ndef find_all_email_addresses_with_protocol_and_query_string(text):\n    '''\n    Write a function to find all the email addresses in the string text, including their protocol, query string, and fragment identifier.\n    '''\n    # your code goes here\n    return re.findall('(([\\w\\.-]+@[\\w\\.-]+(?:\\.[\\w]+)+)(?P<protocol>://)(?P<query_string>\\?(.*))?#(?P<fragment>.*)',text)\ndef find_all_email_addresses_with_protocol_and_query_string_and_fragment(text):\n    '''\n    Write a function to find all the email addresses in the string text, including their protocol, query string, and fragment identifier.\n    '''\n    # your code goes here\n    return re.findall('(([\\w\\.-]+@[\\w\\.-]+(?:\\.[\\w]+)+)(?P<protocol>://)(?P<query_string>\\?(.*))?#(?P<fragment>.*)',text)\ndef find_all_ip_addresses(text):\n    '''\n    Write a function to find all the IP addresses in the string text.\n    '''\n    # your code goes here\n    return re.findall('[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}',text)\ndef find_all_ip_addresses_with_protocol(text):\n    '''\n    Write a function to find all the IP addresses in the string text, including their protocol.\n    '''\n    # your code goes here\n    return re.findall('(?P<protocol>(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))',text)\ndef find_all_ip_addresses_with_protocol_and_query_string(text):\n    '''\n    Write a function to find all the IP addresses in the string text, including their protocol, query string, and fragment identifier.\n    '''\n    # your code goes here\n    return re.findall('(?P<protocol>(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))(?P<query_string>\\?(.*))',text)\ndef find_all_ip_addresses_with_protocol_and_query_string_and_fragment(text):\n    '''\n    Write a function to find all the IP addresses in the string text, including their protocol, query string, and fragment identifier.\n    '''\n    # your code goes here\n    return re.findall('(?P<protocol>(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))(?P<query_string>\\?(.*))(?P<fragment>#(.*))',text)\ndef find_all_ip_addresses_with_protocol_and_query_string_an",
        "num_ids": 151
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\w+', text)\n    return [x for x in words if len(x)>=4]\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        yield num**2\n",
        "num_ids": 17
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print num**2\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    temp = str + str\n    for i in range(0, n):\n        if str[i:] == temp[i:n]:\n            return i\n    return -1\n",
        "num_ids": 51
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #print(str)\n    str = str.lower()\n    l = len(str)\n    if l == 0:\n        return -1\n    elif l == 1:\n        return 0\n    minlen = l\n    for i in range(l//2):\n        #print(i,str[i:l-i])\n        if str[i:l-i] == str[l-i:l-i*2:-1]:\n            minlen = l - i -1\n            break\n    return minlen\n",
        "num_ids": 125
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotation_count=0\n    length = len(str)\n    \n    for i in range(1,length):\n        if str[0:i] == str[length-i:]:\n            rotation_count += 1\n            \n    if rotation_count == 0:\n        print(\"No Rotations\")\n    elif rotation_count == 1:\n        print(\"Only one rotation\")\n    else:\n        print(\"{0} rotations are required\".format(rotation_count))\n",
        "num_ids": 116
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_rotations(str):\n        counter = 0\n        for i in range(len(str)):\n            if str[i:] + str[:i] == str:\n                counter += 1\n        return counter\n    return find_rotations(str)\n",
        "num_ids": 64
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 0\n    \n    str1 = str[:]\n    str2 = str1[::-1]\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in xrange(1,len(str)):\n        if str1[i:] == str2[:-i]:\n            count += 1\n    return count\n",
        "num_ids": 109
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    rotations = 0\n    if len(str) == 1:\n        return 0\n    for i in range(1,l):\n        if str[:i] == str[i:i*2]:\n            rotations = rotations + 1\n    return rotations\n",
        "num_ids": 72
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    length = len(str)\n    temp_str = str\n    rotations = 0\n    \n    while length!= len(temp_str):\n        temp_str = temp_str[1:] + temp_str[:1]\n        rotations += 1\n    \n    if rotations == 0:\n        return rotations\n    else:\n        return rotations - 1\n",
        "num_ids": 91
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    \n    for i in range(n):\n        if str[i:] == str[i:][::-1]:\n            return i\n    return 0\n",
        "num_ids": 46
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        return 1\n    if len(str) == 3:\n        if str[1] == str[2]:\n            return 1\n        else:\n            return 2\n    if len(str) > 3:\n        count = 0\n        for i in range(len(str)):\n            if str[0] == str[i]:\n                break\n        if i == 0:\n            return 0\n        for j in range(len(str) - i):\n            if str[i + j] == str[i]:\n                continue\n            else:\n                count += 1\n        return count\n",
        "num_ids": 171
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    rotations = []\n    for i in range(length):\n        rotations.append(str[i:]+str[:i])\n    #for each rotation, find the shortest rotation\n    min_rotations = 1000\n    for each in rotations:\n        if len(each) < min_rotations:\n            min_rotations = len(each)\n    return min_rotations\n",
        "num_ids": 100
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    s = s.replace(ch.lower(), \"\")\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] == ch and i == j:\n            s = s[:i]+s[j+1:]\n            j = j - 1\n        elif s[i] == ch:\n            s = s[:i]+s[j+1:]\n            j = j - 1\n        else:\n            i = i + 1\n    return s\n",
        "num_ids": 108
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (s.count(ch)>1):\n        s=s[:s.rfind(ch)]+s[s.rfind(ch)+1:]\n    return s\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=s.split(ch)\n    return \"\".join(l[1:-1])\n",
        "num_ids": 25
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'',1)\n        s = s.replace(ch,'',1)\n    return s\n",
        "num_ids": 39
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    if ch in s:\n        if s.count(ch) == 1:\n            return s.replace(ch,\"\")\n        else:\n            return s[l-s.rfind(ch):l].replace(ch,\"\")\n    else:\n        return s\n",
        "num_ids": 72
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s[s.index(ch)+1:len(s)-s[::-1].index(ch)]\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\")\n",
        "num_ids": 19
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, \"\")\n    else:\n        return s\n",
        "num_ids": 28
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string = ''\n    while s.count(ch):\n        s = s[:-1]\n    while s.count(' '):\n        s = s[1:]\n    while s.count(ch):\n        s = s[1:]\n    return s\n",
        "num_ids": 63
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, cols = len(M), len(M[0])\n    print(rows, cols)\n    for i in range(rows - 1):\n        idx_min, idx_max = i, i\n        for j in range(i, rows):\n            if sum(M[idx_max]) < sum(M[idx_min]):\n                idx_max = j\n            if sum(M[idx_max]) > sum(M[idx_min]):\n                idx_min = j\n        if idx_max!= i:\n            M[i], M[idx_max] = M[idx_max], M[i]\n        print(idx_max)\n    return M\n",
        "num_ids": 176
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    for i in range(len(M)):\n        rowsum = sum(M[i])\n        sorted_matrix.append([rowsum, i])\n    sorted_matrix.sort()\n    sorted_matrix.reverse()\n    return sorted_matrix\n",
        "num_ids": 76
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][n-i-1] < M[j+1][n-i-1]:\n                temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n    return M\n",
        "num_ids": 93
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # M is a list of list\n    # return a new list, which is sorted according to the sum of rows\n    n = len(M)\n    for i in range(n):\n        s = 0\n        for j in range(n):\n            s += M[i][j]\n        M[i] = sorted(M[i], key=lambda x: x[i])\n",
        "num_ids": 91
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M[0])\n    # M[i][j] is the sum of the elements of M[i,:j+1]\n    for i in range(N):\n        for j in range(i, N):\n            M[i][j], M[j][i] = M[j][i], M[i][j]\n        M[i] = [M[i][k] for k in range(N)]\n    return M\n",
        "num_ids": 109
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    '''\n    sort the rows in an ascending order\n    '''\n    new_M = sorted(M)\n    '''\n    get the sum of each row\n    '''\n    row_sums = []\n    for row in new_M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    '''\n    get the sorted indices of the row_sums list\n    '''\n    sort_idx = sorted(range(len(row_sums)), key=lambda k:row_sums[k])\n    '''\n    return the new sorted matrix according to row_sums list\n    '''\n    return [new_M[i] for i in sort_idx]\n",
        "num_ids": 20
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    #print(row_sums)\n    print(M)\n    m = len(M)\n    n = len(M[0])\n    print(m,n)\n    for i in range(m):\n        min_row_index = i\n        for j in range(i+1,m):\n            if row_sums[min_row_index] > row_sums[j]:\n                min_row_index = j\n        row_sums[i], row_sums[min_row_index] = row_sums[min_row_index], row_sums[i]\n        for j in range(i,m):\n            row_sums[j], row_sums[i] = row_sums[i], row_sums[j]\n    print(row_sums)\n    for i in range(m):\n        for j in range(n):\n            M[i][j], M[row_sums[i] - 1][j] = M[row_sums[i] - 1][j], M[i][j]\n    return M\n",
        "num_ids": 278
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    L = [[0 for j in xrange(n)] for i in xrange(m)]\n    S = [[0 for j in xrange(n)] for i in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            L[i][j] = M[i][j]\n    for i in xrange(m):\n        S[i] = sum(L[i])\n    for i in xrange(m):\n        L[i].sort()\n    S.sort()\n    S.reverse()\n    for i in xrange(m):\n        for j in xrange(n):\n            M[i][j] = L[i][j]\n    for i in xrange(m):\n        M[i].sort()\n    return M,S\n",
        "num_ids": 211
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        # for each row, sort the elements in increasing order\n        M[i].sort()\n        # now, sum up the elements in the row to get the sum of the row\n        M[i] = sum(M[i])\n    # once sorted, return the matrix\n    return M\n",
        "num_ids": 80
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = len(M)\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if M[i][j] < M[i][k] + M[k][j]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n    return M\n",
        "num_ids": 91
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = eval(l)\n    b = eval(b)\n    h = eval(h)\n    return (1/6)*b*h*(l**2 + b**2 + h**2)\n",
        "num_ids": 51
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = float(l)\n    b = float(b)\n    h = float(h)\n",
        "num_ids": 26
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return b*h/2\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 1/6.0 * b * h\n    return volume\n    \n    ",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = ((b**2)*(h/3)) - ((l**2)*(h/2))\n    return V\n    \n    \nl = int(input(\"Enter length of the first side: \"))\nb = int(input(\"Enter length of the second side: \"))\nh = int(input(\"Enter length of the third side: \"))\nprint(\"The volume of a triangular prism is\",find_Volume(l,b,h))",
        "num_ids": 103
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/6\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5*l*b*h\n",
        "num_ids": 14
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower() == text\n",
        "num_ids": 11
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if len(re.findall(r'[a-z]+_[a-z]+',text)) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'[a-z]+_[a-z]+', text) is not None\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    return re.search('[a-z]+_[a-z]+', text)\n    \ndef text_lowercase_ljust(text):\n    '''\n    Write a function that returns a string with all lowercase letters ljust to the same length as the input string.\n    '''\n    \n    return text.lower().ljust(len(text))\n    \ndef text_lstrip(text):\n    '''\n    Write a function that returns a copy of the string with leading characters removed.\n    '''\n    \n    return text.lstrip()\n    \ndef text_rstrip(text):\n    '''\n    Write a function that returns a copy of the string with trailing characters removed.\n    '''\n    \n    return text.rstrip()\n    \ndef text_concat(text1, text2):\n    '''\n    Write a function that returns a copy of the string with all its characters concatenated to the end of the string.\n    '''\n    \n    return text1 + text2\n    \ndef text_center(text, width):\n    '''\n    Write a function that returns a copy of the string with the first character of each line to the left of the string.\n    '''\n    \n    return text.center(width)\n    \ndef text_title(text):\n    '''\n    Write a function that returns a copy of the string with all words in title case.\n    '''\n    \n    return text.title()\n    \ndef text_count(text, sub, start=None, end=None):\n    '''\n    Write a function that returns the number of occurrences of a specified substring.\n    '''\n    \n    return text.count(sub, start, end)\n    \ndef text_find(text, sub, start=None, end=None):\n    '''\n    Write a function that returns the lowest index in the string where substring sub is found.\n    '''\n    \n    return text.find(sub, start, end)\n    \ndef text_index(text, sub, start=None, end=None):\n    '''\n    Write a function that returns the first index in the string where substring sub is found.\n    '''\n    \n    return text.index(sub, start, end)\n    \ndef text_isalpha(text):\n    '''\n    Write a function that returns True if the string only consists of letters and False otherwise.\n    '''\n    \n    return text.isalpha()\n    \ndef text_isdigit(text):\n    '''\n    Write a function that returns True if the string only consists of digits and False otherwise.\n    '''\n    \n    return text.isdigit()\n    \ndef text_isdecimal(text):\n    '''\n    Write a function that returns True if the string only consists of decimal digits and False otherwise.\n    '''\n    \n    return text.isdecimal()\n    \ndef text_isnumeric(text):\n    '''\n    Write a function that returns True if the string only consists of numeric digits and False otherwise.\n    '''\n    \n    return text.isnumeric()\n    \ndef text_islower(text):\n    '''\n    Write a function that returns True if the string contains only lowercase letters and False otherwise.\n    '''\n    \n    return text.islower()\n    \ndef text_isupper(text):\n    '''\n    Write a function that returns True if the string contains only uppercase letters and False otherwise.\n    '''\n    \n    return text.isupper()\n    \ndef text_isspace(text):\n    '''\n    Write a function that returns True if the string contains only whitespace characters and False otherwise.\n    '''\n    \n    return text.isspace()\n    \ndef text_istitle(text):\n    '''\n    Write a function that returns True if the string contains words that start with an upper case letter followed by lower case letters and False otherwise.\n    '''\n    \n    return text.istitle()\n    \ndef text_iskeyword(text):\n    '''\n    Write a function that returns True if the string contains only alphanumeric characters and False otherwise.\n    '''\n    \n    return text.iskeyword()\n    \ndef text_isdigit(text):\n    '''\n    Write a function that returns True if the string contains only digits and False otherwise.\n    '''\n    \n    return text.isdigit()\n    \ndef text_isascii(text):\n    '''\n    Write a function that returns True if the string contains only 7-bit ASCII characters and False otherwise.\n    '''\n    \n    return text.isascii()\n    \ndef text_upper(text):\n    '''\n    Write a function that returns a copy of the string with all characters converted to uppercase.\n    '''\n    \n    return text.upper()\n    \ndef text_lower(text):\n    '''\n    Write a function that returns a copy of the string with all characters converted to lowercase.\n    '''\n    \n    return text.lower()\n    \ndef text_isalpha_numeric(text):\n    '''\n    Write a function that returns True if the string contains only alphanumeric characters and False otherwise.\n    '''\n    \n    return text.isalpha() or text.isdigit()\n    \ndef text_isalpha_numeric_space(text):\n    '''\n    Write a function that returns True if the string contains only alphanumeric characters and space characters and False otherwise.\n    '''\n    \n    return text.isalpha() or text.isdigit() or text.isspace()\n    \ndef text_replace(text, old, new):\n    '''\n    Write a function that returns a copy of the string with all occurrences of old substring replaced with new substring.\n    '''\n    \n    return text.replace(old, new)\n    \ndef text_removespace(text):\n    '''\n    Write a function that returns a copy of the string with all leading and trailing whitespace removed.\n    '''\n    \n    return text.strip()\n    \ndef text_lstrip(text):\n    '''\n    Write a function that returns a copy of the string with leading whitespace removed.\n    '''\n    \n    return text.lstrip()\n    \ndef text_rstrip(text):\n    '''\n    Write a function that returns a copy of the string with trailing whitespace removed.\n    '''\n    \n    return text.rstrip()\n    \ndef text_split(text, sep=None):\n    '''\n    Write a function that returns a list of substrings that were generated from splitting the string at the specified separator string.\n    '''\n    \n    return text.split(sep)\n    \ndef text_splitspace(text):\n    '''\n    Write a function that returns a list of substrings with each substring consisting of a single space character.\n    '''\n    \n    return text.split()\n    \ndef text_splitlines(text):\n    '''\n    Write a function that returns a list of substrings with each substring consisting of a single line of text.\n    '''\n    \n    return text.splitlines()\n    \ndef text_rsplit(text, sep=None):\n    '''\n    Write a function that returns a list of substrings with each substring being the last word of each line in the string.\n    '''\n    \n    return text.rsplit(sep)\n    \ndef text_rstrip_lstrip(text):\n    '''\n    Write a function that returns a copy of the string with trailing and leading whitespace removed.\n    '''\n    \n    return text.strip()\n    \ndef text_strip_lstrip(text):\n    '''\n    Write a function that returns a copy of the string with leading and trailing whitespace removed.\n    '''\n    \n    return text.lstrip()\n    \ndef text_strip_rstrip(text):\n    '''\n    Write a function that returns a copy of the string with leading and trailing whitespace removed.\n    '''\n    \n    return text.rstrip()\n    \ndef text_strip_lstrip_rstrip(text):\n    '''\n    Write a function that returns a copy of the string with leading and trailing whitespace removed.\n    '''\n    \n    return text.strip()\n    \ndef text_center_lstrip(text):\n    '''\n    Write a function that returns a copy of the string with leading whitespace removed and the remaining characters centered.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'\\b(?=[a-z]{1}[a-z]+)\\w+', text.lower())\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.islower()\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase_letters = re.compile('[a-z]+_[a-z]+')\n    return lowercase_letters.match(text)!= None\n",
        "num_ids": 40
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #print(text)\n    result=re.search(r\"\\b([a-z]+_[a-z]+)\\b\",text)\n    #print(result.group())\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase_underscore_pattern = r'[a-z]+_[a-z]+'\n    return True if re.match(text_lowercase_underscore_pattern, text) else False\n",
        "num_ids": 51
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text, re.IGNORECASE) is not None\ndef text_lowercase_underscore_len(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text, re.IGNORECASE)) > 0\ndef text_lowercase_underscore_len_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check_one_line_no_check(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+', text)) > 0\ndef text_lowercase_underscore_len_no_check_on",
        "num_ids": 46
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that returns the perimeter of a triangle given the side lengths as input as input.\n    '''\n    return a + b + c\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        string_list = [string[0]]\n        for i in range(1, len(string)):\n            if string[i] not in string_list:\n                string_list.append(string[i])\n        return string_list\n",
        "num_ids": 76
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i in string:\n            list.append(i)\n    return list\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        list.append(i)\n    return list\ndef str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        list.append(i)\n    return list\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\ndef str_to_dict(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dictionary = {}\n    for i in string:\n        if i not in dictionary:\n        ",
        "num_ids": 24
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = [0] * NO_OF_CHARS \n    l2 = [0] * NO_OF_CHARS \n    for i in string: \n        l1[ord(i)] += 1\n    for j in string: \n        l2[ord(j)] += 1\n    for i in string: \n        if l2[ord(i)] > l1[ord(i)]: \n            return False\n    return True\nif __name__ == '__main__':\n    string1 = raw_input(\"Enter the first string: \")\n    string2 = raw_input(\"Enter the second string: \")\n    if(str_to_list(string1) and str_to_list(string2)):\n        print \"Both strings are anagrams\"\n    else:\n        print \"Both strings are not anagrams\"\n",
        "num_ids": 202
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    input_string = string.lower()\n    rem_string = \"\"\n    for i in input_string:\n        if i not in input_string:\n            rem_string += i\n    return rem_string\ndef create_list(str1, str2):\n    '''\n    Write a function that checks if two strings are anagrams or not.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    else:\n        count_str1 = [0] * NO_OF_CHARS\n        count_str2 = [0] * NO_OF_CHARS\n        for i in str1:\n            count_str1[ord(i)] += 1\n        for i in str2:\n            count_str2[ord(i)] += 1\n        for i in range(NO_OF_CHARS):\n            if count_str1[i]!= count_str2[i]:\n                return False\n        return True\ndef create_dict(str1, str2):\n    '''\n    Write a function that checks if two strings are anagrams or not.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    else:\n        dict_str1 = {}\n        dict_str2 = {}\n        for i in str1:\n            if i in dict_str1:\n                dict_str1[i] += 1\n            else:\n                dict_str1[i] = 1\n        for i in str2:\n            if i in dict_str2:\n                dict_str2[i] += 1\n            else:\n                dict_str2[i] = 1\n        if dict_str1 == dict_str2:\n            return True\n        return False\ndef remove_char(str1, str2):\n    '''\n    Write a function to check if one string is permutation of other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    else:\n        rem_str1 = str_to_list(str1)\n        rem_str2 = str_to_list(str2)\n        if rem_str1 == rem_str2:\n            return True\n        else:\n            return False\ndef remove_char_2(str1, str2):\n    '''\n    Write a function to check if one string is permutation of other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    else:\n        count_str1 = [0] * NO_OF_CHARS\n        count_str2 = [0] * NO_OF_CHARS\n        for i in str1:\n            count_str1[ord(i)] += 1\n        for i in str2:\n            count_str2[ord(i)] += 1\n        for i in range(NO_OF_CHARS):\n            if count_str1[i]!= count_str2[i]:\n                return False\n        return True\ndef rotate_string(string, n):\n    '''\n    Write a function to rotate a string by n places.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        result = \"\"\n        for i in range(n):\n            result += string[len(string) - 1]\n        return result\ndef rotate_string_2(string, n):\n    '''\n    Write a function to rotate a string by n places.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        return string[n%len(string):] + string[:n%len(string)]\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    string = string.lower()\n    if len(string) == 0:\n        return True\n    else:\n        return string[0] == string[len(string) - 1] and is_palindrome(string[1:len(string)-1])\ndef is_palindrome_2(string):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    string = string.lower()\n    if len(string) == 0:\n        return True\n    else:\n        return string[0] == string[len(string) - 1] and is_palindrome(string[1:len(string)-1])\ndef is_palindrome_3(string):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) % 2 == 0:\n        return string[:len(string)//2] == string[:len(string)//2 - 1:-1]\n    else:\n        return string[:len(string)//2] == string[:len(string)//2 - 1:-1]\ndef is_palindrome_4(string):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) % 2 == 0:\n        return string[:len(string)//2] == string[:len(string)//2 - 1:-1]\n    else:\n        return string[:len(string)//2] == string[:len(string)//2 - 1:-1]\ndef is_rotated_string(str1, str2):\n    '''\n    Write a function to check if a string is rotated by a given string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == 0:\n        return True\n    else:\n        if str_to_list(str1) == str_to_list(str2):\n            return True\n        else:\n            return False\ndef is_rotated_string_2(str1, str2):\n    '''\n    Write a function to check if a string is rotated by a given string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == 0:\n        return True\n    else:\n        if rotate_string_2(str1, len(str1)) == str2:\n            return True\n        else:\n            return False\ndef is_rotated_string_3(str1, str2):\n    '''\n    Write a function to check if a string is rotated by a given string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == 0:\n        return True\n    else:\n        if rotate_string_3(str1, len(str1)) == str2:\n            return True\n        else:\n            return False\ndef is_rotated_string_4(str1, str2):\n    '''\n    Write a function to check if a string is rotated by a given string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == 0:\n        return True\n    else:\n        if rotate_string_4(str1, len(str1)) == str2:\n            return True\n        else:\n            return False\ndef is_rotated_string_5(str1, str2):\n    '''\n    Write a function to check if a string is rotated by a given string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == 0:\n        return True\n    else:\n        if rotate_string_5(str1, len(str1)) == str2:\n            return True\n        else:\n            return False\ndef is_rotated_string_6(str1, str2):\n    '''\n    Write a function to check if a string is rotated by a given string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    elif len(st",
        "num_ids": 26
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return [], 0\n    else:\n        list = []\n        for i in range(0, len(string)):\n            if string[i] not in list:\n                list.append(string[i])\n        return list, len(string) - len(list)\ndef str_to_list_no_space(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return [], 0\n    else:\n        list = []\n        for i in range(0, len(string)):\n            if string[i] not in list:\n                list.append(string[i])\n        return list\ndef str_to_list_2(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return [], 0\n    else:\n        list = []\n        for i in range(0, len(string)):\n            if string[i] not in list:\n                list.append(string[i])\n        return list\ndef sort_string(string):\n    '''\n    Write a function that returns a sorted list from a string. The function is to remove duplicate characters from the string and then sort the string alphabetically.\n    '''\n    if len(string) == 0:\n        return []\n    else:\n        string = list(string)\n        string = sorted(set(string))\n        return string\ndef sort_string_2(string):\n    '''\n    Write a function that returns a sorted list from a string. The function is to remove duplicate characters from the string and then sort the string alphabetically.\n    '''\n    if len(string) == 0:\n        return []\n    else:\n        string = sorted(set(string))\n        return string\ndef list_to_str(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_2(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_3(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_4(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_5(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_6(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_7(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_8(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_9(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_10(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_11(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_12(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_13(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_14(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_15(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_16(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_17(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_18(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_19(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_20(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_21(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_22(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_23(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_24(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(list)\ndef list_to_str_25(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if len(list) == 0:\n        return \"\"\n    else:\n        return \"\".join(lis",
        "num_ids": 27
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    string_list = list(string)\n    for i in string_list:\n        if i in string2:\n            string_list.remove(i)\n    return string_list\n",
        "num_ids": 52
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lis = [0]*NO_OF_CHARS\n    for i in range(len(string)):\n        lis[ord(string[i])] += 1\n    for i in range(len(string)):\n        lis[ord(string[i])] -= 1\n    return lis\n",
        "num_ids": 71
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str2 = string[:]\n    for i in str2:\n        if i in string:\n            string.remove(i)\n    return string\n    \ndef list_to_str(list):\n    '''\n    Write a function to replace a list of strings with the word \"EOS\".\n    '''\n    string = ''\n    for i in list:\n        string += i\n    string += 'EOS'\n    return string\n    \ndef list_to_dict(list):\n    '''\n    Write a function to replace a list of strings with the word \"EOS\".\n    '''\n    dictionary = {}\n    for i in list:\n        dictionary[i] = list.count(i)\n    return dictionary\n",
        "num_ids": 33
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for j in list1:\n        if j not in list2:\n            list2.append(j)\n    for k in list1:\n        if k in list2:\n            list1.remove(k)\n    return list1\ndef caesar_encrypt(plaintext,shift):\n    '''\n    Write a function to perform a Caesar Cipher encryption on plaintext using the shift provided.\n    '''\n    string = \"\"\n    for i in plaintext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr((ord(i)+shift-65)%NO_OF_CHARS+65)\n    return string\ndef caesar_decrypt(ciphertext,shift):\n    '''\n    Write a function to perform a Caesar Cipher decryption on plaintext using the shift provided.\n    '''\n    string = \"\"\n    for i in ciphertext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr((ord(i)-shift-65)%NO_OF_CHARS+65)\n    return string\ndef vigenere_encrypt(plaintext,key):\n    '''\n    Write a function to perform a Vigenere Cipher encryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in plaintext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(((ord(i) + ord(key[index]) - 97) % NO_OF_CHARS + 97))\n            index = (index+1)%len(key)\n    return string\ndef vigenere_decrypt(ciphertext,key):\n    '''\n    Write a function to perform a Vigenere Cipher decryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in ciphertext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(((ord(i) - ord(key[index]) - 97) % NO_OF_CHARS + 97))\n            index = (index+1)%len(key)\n    return string\ndef affine_encrypt(plaintext,key1,key2):\n    '''\n    Write a function to perform an affine Cipher encryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in plaintext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(((key1*(ord(i) - 97) + key2)%NO_OF_CHARS + 97))\n    return string\ndef affine_decrypt(ciphertext,key1,key2):\n    '''\n    Write a function to perform an affine Cipher decryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in ciphertext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(((key2*(ord(i) - 97 - key1*(ord(i) - 97))) % NO_OF_CHARS + 97))\n    return string\ndef caesar_encrypt_set1(plaintext,shift):\n    '''\n    Write a function to perform a Caesar Cipher encryption on plaintext using the shift provided.\n    '''\n    string = \"\"\n    for i in plaintext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(ord(i)+shift)\n    return string\ndef caesar_decrypt_set1(ciphertext,shift):\n    '''\n    Write a function to perform a Caesar Cipher decryption on plaintext using the shift provided.\n    '''\n    string = \"\"\n    for i in ciphertext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(ord(i)-shift)\n    return string\ndef vigenere_encrypt_set1(plaintext,key):\n    '''\n    Write a function to perform a Vigenere Cipher encryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in plaintext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(ord(((ord(i) + ord(key[index]) - 97) % NO_OF_CHARS + 97)))\n            index = (index+1)%len(key)\n    return string\ndef vigenere_decrypt_set1(ciphertext,key):\n    '''\n    Write a function to perform a Vigenere Cipher decryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in ciphertext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(ord(((ord(i) - ord(key[index]) - 97) % NO_OF_CHARS + 97)))\n            index = (index+1)%len(key)\n    return string\ndef affine_encrypt_set1(plaintext,key1,key2):\n    '''\n    Write a function to perform an affine Cipher encryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in plaintext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(ord(((key1*(ord(i) - 97) + key2)%NO_OF_CHARS + 97)))\n    return string\ndef affine_decrypt_set1(ciphertext,key1,key2):\n    '''\n    Write a function to perform an affine Cipher decryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in ciphertext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(ord(((key2*(ord(i) - 97 - key1*(ord(i) - 97))) % NO_OF_CHARS + 97)))\n    return string\ndef affine_encrypt_set2(plaintext,key1,key2):\n    '''\n    Write a function to perform an affine Cipher encryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in plaintext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(((key1*(ord(i) - 97) + key2)%NO_OF_CHARS + 97))\n    return string\ndef affine_decrypt_set2(ciphertext,key1,key2):\n    '''\n    Write a function to perform an affine Cipher decryption on plaintext using the key provided.\n    '''\n    string = \"\"\n    index = 0\n    for i in ciphertext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(((key2*(ord(i) - 97 - key1*(ord(i) - 97))) % NO_OF_CHARS + 97))\n    return string\ndef caesar_encrypt_set2(plaintext,shift):\n    '''\n    Write a function to perform a Caesar Cipher encryption on plaintext using the shift provided.\n    '''\n    string = \"\"\n    for i in plaintext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(ord(i)+shift)\n    return string\ndef caesar_decrypt_set2(ciphertext,shift):\n    '''\n    Write a function to perform a Caesar Cipher decryption on plaintext using the shift provided.\n    '''\n    string = \"\"\n    for i in ciphertext:\n        if i==\" \":\n            string = string + \" \"\n        else:\n            string = string + chr(ord(i)-shift)\n    return string\nde",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        if i not in list2:\n            list1.append(i)\n            list2.append(i)\n    return list1\ndef nCr(n, r):\n    r = min(r, n-r)\n    if r == 0: return 1\n    numerator = reduce(operator.mul, xrange(n, n-r, -1))\n    denominator = reduce(operator.mul, xrange(1, r+1))\n    return numerator // denominator\ndef gen_permutation(string, n):\n    if n == 1:\n        return [string]\n    else:\n        res = []\n        for i in xrange(len(string)):\n            m = string[i]\n            for p in gen_permutation(string[:i]+string[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef gen_permutation_with_dup(string, n):\n    if n == 1:\n        return [string]\n    else:\n        res = []\n        for i in xrange(len(string)):\n            m = string[i]\n            for p in gen_permutation(string[:i]+string[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef find_permutation(list_of_char, str):\n    permutations = gen_permutation(str, len(list_of_char))\n    for i in xrange(len(permutations)):\n        permutation = permutations[i]\n        char_index = 0\n        for j in xrange(len(permutation)):\n            if permutation[j] == list_of_char[char_index]:\n                char_index += 1\n            if char_index == len(list_of_char):\n                return permutation\n    return \"\"\ndef find_permutation_with_dup(list_of_char, str):\n    permutations = gen_permutation_with_dup(str, len(list_of_char))\n    for i in xrange(len(permutations)):\n        permutation = permutations[i]\n        char_index = 0\n        for j in xrange(len(permutation)):\n            if permutation[j] == list_of_char[char_index]:\n                char_index += 1\n            if char_index == len(list_of_char):\n                return permutation\n    return \"\"\ndef permute(str):\n    char_list = str_to_list(str)\n    permutation = find_permutation(char_list, \"\")\n    if permutation:\n        return permutation\n    return \"\"\ndef permute_with_dup(str):\n    char_list = str_to_list(str)\n    permutation = find_permutation_with_dup(char_list, \"\")\n    if permutation:\n        return permutation\n    return \"\"\ndef n_permute(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+str[i+1:],n-1):\n                res.append(m+p)\n        return res\ndef n_permute_with_dup(str, n):\n    if n == 1:\n        return [str]\n    else:\n        res = []\n        for i in xrange(len(str)):\n            m = str[i]\n            for p in n_permute_with_dup(str[:i]+st",
        "num_ids": 2002
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any([nums[i] == nums[i-1] for i in range(len(nums))])\n",
        "num_ids": 31
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n    return False\n",
        "num_ids": 95
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if arraynums == None:\n        return False\n    result = {}\n    for num in arraynums:\n        if num in result:\n            return True\n        else:\n            result[num] = True\n    return False\n    \nprint test_duplicate([1,2,3,4,5])\nprint test_duplicate([])\nprint test_duplicate([1,2,3])",
        "num_ids": 98
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dup = False\n    for x in arraynums:\n        if arraynums.count(x) > 1:\n            dup = True\n            break\n    return dup\n",
        "num_ids": 44
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = [False] * len(arraynums)\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                result[i] = True\n                break\n    print(result)\n",
        "num_ids": 81
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    count = {}\n    for i in arraynums:\n        if i in count:\n            return True\n        else:\n            count[i] = 1\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) <= 1:\n        return False\n    arraynums.sort()\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x)) == 6 and str(x)[0] == '1' and (str(x)[1] == '0' or str(x)[1] == '1'): \n        return True\n    return False\n    \ndef test_is_woodall(): \n    assert is_woodall(2112) == True\n    assert is_woodall(12) == False\n    assert is_woodall(1) == True\n    assert is_woodall(0) == True\n    assert is_woodall(1000000) == False\n    assert is_woodall(22) == False\n    assert is_woodall(111) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(632) == True\n    assert is_woodall(50) == False\n    assert is_woodall(0) == True\n    assert is_woodall(1) == True\n    assert is_woodall(10) == False\n    assert is_woodall(12) == False\n    assert is_woodall(2) == False\n    assert is_woodall(23) == False\n    assert is_woodall(4) == False\n    assert is_woodall(10) == False\n    assert is_woodall(20) == False\n    assert is_woodall(0) == True\n    assert is_woodall(42) == False\n    assert is_woodall(10) == False\n    assert is_woodall(41) == False\n    assert is_woodall(100001) == False\n    assert is_woodall(12) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(2) == False\n    assert is_woodall(3) == False\n    assert is_woodall(4) == False\n    assert is_woodall(5) == False\n    assert is_woodall(6) == False\n    assert is_woodall(7) == False\n    assert is_woodall(8) == False\n    assert is_woodall(9) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) == False\n    assert is_woodall(1234) =",
        "num_ids": 2015
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x == '3':\n        return True\n    elif x == '6':\n        return True\n    elif x == '9':\n        return True\n    elif x == '8':\n        return True\n    elif x == '7':\n        return True\n    elif x == '6':\n        return True\n    elif x == '4':\n        return True\n    elif x == '5':\n        return True\n    elif x == '2':\n        return True\n    else:\n        return False\n",
        "num_ids": 128
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    d = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1}\n    v = list(str(x))\n    for i in v:\n        if i not in d:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0:\n        return False\n    d = x%100\n    if d >= 11 and d <= 19:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if isinstance(x, int) and x > 0:\n        digit = [1,2,3,4,5,6,7,8,9]\n        temp = list(str(x))\n        if temp[0] in digit and temp[1] in digit and temp[2] in digit and temp[3] in digit:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 101
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    # uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    # num = 0\n    # for i in x:\n    #     if i in lowercase:\n    #         num += 3\n    #     elif i in uppercase:\n    #         num += 4\n    #     elif i in '0123456789':\n    #         num += 5\n    #     elif i =='':\n    #         num += 6\n    #     else:\n    #         return False\n    # if num < 10:\n    #     return False\n    # else:\n    #     return True\n    return num < 10\n",
        "num_ids": 180
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in (1,2,3,4,5,6)\n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 2 or x > 50:\n        return False\n    else:\n        num = str(x)\n        n1 = 0\n        n2 = 0\n        for i in num:\n            n1 = n1 + int(i)\n            n2 = n2 + int(i)**2\n        if n1 == n2:\n            return True\n        else:\n            return False\n",
        "num_ids": 95
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import re\n    def is_pangram(s):\n        return set(s.lower()) >= set(string.ascii_lowercase)\n    def is_palindrome(s):\n        return s == s[::-1]\n    def is_digit(s):\n        return bool(re.search(r'\\d', s))\n    def is_punct(s):\n        return bool(re.search(r'\\W', s))\n    def is_leap(y):\n        return bool(re.search(r'4|6|7|8|9|0', str(y)))\n    def is_armstrong(n):\n        s = str(n)\n        l = len(s)\n        s = int(s)\n        sum = 0\n        for x in s:\n            sum += pow(int(x),l)\n        if sum == n:\n            return True\n        else:\n            return False\n    def is_armstrong_set(s):\n        s = str(s)\n        l = len(s)\n        sum = 0\n        for x in s:\n            sum += pow(int(x),l)\n        if sum == int(s):\n            return True\n        else:\n            return False\n    def is_power_digit(a):\n        return a**(1/2) == int(a**(1/2))\n    def is_power_digit_set(s):\n        s = str(s)\n        l = len(s)\n        for x in s:\n            if pow(int(x),l)!= int(x):\n                return False\n        return True\n    def is_straight(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l-4):\n            if int(s[x]) == int(s[x+1])-1 == int(s[x+2])-2 == int(s[x+3])-3 == int(s[x+4])-4:\n                return True\n        return False\n    def is_straight_set(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l-4):\n            if int(s[x]) == int(s[x+1])-1 == int(s[x+2])-2 == int(s[x+3])-3 == int(s[x+4])-4:\n                return True\n        return False\n    def is_reverse(s):\n        return s[::-1] == s\n    def is_reverse_set(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l/2):\n            if s[x]!= s[l-x-1]:\n                return False\n        return True\n    def is_near_num(n):\n        n = str(n)\n        l = len(n)\n        if l == 1:\n            return True\n        elif l > 1:\n            for x in range(l-1):\n                if int(n[x])!= int(n[x+1])-1:\n                    return False\n            return True\n    def is_near_num_set(s):\n        s = str(s)\n        l = len(s)\n        if l == 1:\n            return True\n        elif l > 1:\n            for x in range(l-1):\n                if int(s[x])!= int(s[x+1])-1:\n                    return False\n            return True\n    def is_pronic_num(n):\n        n = str(n)\n        l = len(n)\n        for x in range(l-2):\n            if int(n[x]) == int(n[x+1])-2 == int(n[x+2])-3:\n                return True\n        return False\n    def is_pronic_num_set(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l-2):\n            if int(s[x]) == int(s[x+1])-2 == int(s[x+2])-3:\n                return True\n        return False\n    def is_pandigital(n):\n        n = str(n)\n        l = len(n)\n        for x in range(l):\n            if n[x] == '0' or not int(n[x]) > 0:\n                return False\n        return True\n    def is_pandigital_set(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l):\n            if s[x] == '0' or not int(s[x]) > 0:\n                return False\n        return True\n    def is_super_num(n):\n        n = str(n)\n        l = len(n)\n        for x in range(l):\n            if int(n[x]) > 9:\n                return False\n        return True\n    def is_super_num_set(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l):\n            if int(s[x]) > 9:\n                return False\n        return True\n    def is_perm_num(n):\n        n = str(n)\n        l = len(n)\n        for x in range(l):\n            if not int(n[x]) == int(n[l-1])-x:\n                return False\n        return True\n    def is_perm_num_set(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l):\n            if not int(s[x]) == int(s[l-1])-x:\n                return False\n        return True\n    def is_prime(n):\n        n = str(n)\n        l = len(n)\n        for x in range(l-1):\n            if int(n[x]) == 0:\n                return False\n        return True\n    def is_prime_set(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l-1):\n            if int(s[x]) == 0:\n                return False\n        return True\n    def is_perfect(n):\n        n = str(n)\n        l = len(n)\n        s = 0\n        for x in range(l):\n            s += int(n[x])\n        return s == int(n)\n    def is_perfect_set(s):\n        s = str(s)\n        l = len(s)\n        s = 0\n        for x in range(l):\n            s += int(s[x])\n        return s == int(s)\n    def is_abundant(n):\n        n = str(n)\n        l = len(n)\n        s = 0\n        for x in range(l):\n            s += int(n[x])\n        if s > int(n):\n            return True\n        else:\n            return False\n    def is_abundant_set(s):\n        s = str(s)\n        l = len(s)\n        s = 0\n        for x in range(l):\n            s += int(s[x])\n        if s > int(s):\n            return True\n        else:\n            return False\n    def is_triangle(n):\n        n = str(n)\n        l = len(n)\n        for x in range(l-2):\n            if int(n[x]) == int(n[x+1])+int(n[x+2]):\n                return True\n        return False\n    def is_triangle_set(s):\n        s = str(s)\n        l = len(s)\n        for x in range(l-2):\n            if int(s[x]) == int(s[x+1])+int(s[x+2]):\n                return True\n        return False\n    def is_square(n):\n        n = str(n)\n        l = len(n)\n        for x in range(l-2):\n            if int(n[x]) == int(n[x+1]) == int(n[x+2]) == int(n[x+3]):\n                return True\n        return False\n    def is_square_set(s):\n        s = str(s)\n        ",
        "num_ids": 2017
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x)!= int or x < 0: \n        return False\n    elif x < 5: \n        return False\n    else: \n        x = str(x)\n        y = len(x)\n        if y % 2 == 0: \n            for i in x: \n                if int(x[y-1]) % 2 == 0: \n                    return False\n                else: \n                    y = y-1\n        else: \n            for i in x: \n                if int(x[y-1]) % 2 == 0: \n                    y = y-1\n                else: \n                    return False\n    return True\n",
        "num_ids": 156
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == num[::-1]:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    if rev_num == 2 * rev_num:\n        return True\n    return False\n    \n",
        "num_ids": 61
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num%10 == 0:\n        return False\n    else:\n        rev = 0\n        while num > 0:\n            rev = rev*10 + num%10\n            num = num//10\n        return (rev == num-1)\n",
        "num_ids": 71
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        rem = num % 10\n        reverse = reverse * 10 + rem\n        num = num / 10\n    if reverse == (2 * num):\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    revn = 0\n    while n:\n        revn = (revn * 10) + (n % 10)\n        n /= 10\n    return (n == 1) and (revn == num)\n",
        "num_ids": 56
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num-int(num/2))*2==int(num):\n        return True\n    else:\n        return False\ndef isPalindrome(num):\n    '''\n    Write a python function to check if a given number is palindrome\n    '''\n    return num == int(str(num)[::-1])\ndef rint(num):\n    '''\n    Write a python function to return a rounded integer value of a number\n    '''\n    return int(round(num))\ndef f_to_c(num):\n    '''\n    Write a python function to convert fahrenheit to celsius\n    '''\n    return int(round((num-32)*5/9))\ndef c_to_f(num):\n    '''\n    Write a python function to convert celsius to fahrenheit\n    '''\n    return int(round((num*9/5)+32))\ndef isPrime(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime2(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime3(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime4(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime5(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime6(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime7(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime8(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime9(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime10(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime11(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime12(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime13(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime14(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime15(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime16(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(num)/2)):\n            if num%i==0:\n                return False\n        return True\ndef isPrime17(num):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    if num==1:\n        return False\n    elif num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,rint(rint(nu",
        "num_ids": 56
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num % 10 == 0:\n        return False\n    else:\n        return rev(num / 10)\n",
        "num_ids": 40
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    l = len(num)\n    if l%2 == 0:\n        return int(num[::-1]) == (int(num)*2-1)\n    else:\n        return int(num[:l/2]) == (int(num)*2-1)\n",
        "num_ids": 74
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num == (num - 1) * 2\n",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    result = ''\n    count = 0\n    for i in range(n) : \n        if arr[i] < '9' : \n            result += arr[i]\n    while (result!= '') : \n        count += 1\n        result = result[1:]\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n    \n",
        "num_ids": 18
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for num in arr :\n        if num > max_num :\n            max_num = num\n",
        "num_ids": 35
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in arr :\n        if i > max :\n            max = i\n    return max\n",
        "num_ids": 33
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    arr.sort()\n    return arr[-1]\n",
        "num_ids": 31
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr : \n        if num > max_num : \n            max_num = num\n    return max_num\n",
        "num_ids": 40
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = max(arr)\n    return max_num\n",
        "num_ids": 18
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    length = len(arr)\n    largest = 0\n    for i in range(length) :\n        for j in range(i,length) :\n            if arr[i] < arr[j] :\n                arr[i],arr[j] = arr[j],arr[i]\n    return arr[-1]\n",
        "num_ids": 77
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = 0\n    for i in arr : \n        if i > Max : \n            Max = i \n    return Max\n",
        "num_ids": 33
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n",
        "num_ids": 46
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    elif x>0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return False\n    elif x==0 and y!=0:\n        return True\n    else:\n        return False\n",
        "num_ids": 90
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #x = -2\n    #y = -4\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    elif x==0 and y==0:\n        return True\n    else:\n        return False\ndef is_Prime(x): \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    #x = 17\n    if x>1:\n        for y in range(2,x):\n            if (x%y) == 0:\n                return False\n        return True\n    else:\n        return False\ndef print_Nth_Prime_number(x):\n    '''\n    Write a python function to print the Nth prime number.\n    '''\n    #x = 4\n    temp = 2\n    count = 0\n    while count < x:\n        if is_Prime(temp):\n            count += 1\n            if count == x:\n                return temp\n        temp += 1\ndef print_1st_N_Prime_numbers(x):\n    '''\n    Write a python function to print the 1st N prime numbers.\n    '''\n    #x = 2\n    count = 0\n    temp = 2\n    while count < x:\n        if is_Prime(temp):\n            print temp\n            count += 1\n        temp += 1\ndef print_Nth_Prime_factor(x):\n    '''\n    Write a python function to print the Nth prime factor of a number.\n    '''\n    #x = 13\n    temp = 2\n    while x!=1:\n        if x%temp == 0:\n            print temp\n            x = x/temp\n        else:\n            temp += 1\ndef print_Sum_of_Prime_Factors(x):\n    '''\n    Write a python function to print the sum of prime factors of a number.\n    '''\n    #x = 19\n    #prime_factor = [2,3]\n    temp = 2\n    while x!=1:\n        if x%temp == 0:\n            print temp\n            x = x/temp\n        else:\n            temp += 1\ndef find_Perfect_number(x):\n    '''\n    Write a python function to find the perfect number.\n    '''\n    #x = 6\n    sum = 0\n    for i in range(1,x):\n        if (x%i == 0):\n            sum = sum + i\n    if sum == x:\n        return True\n    else:\n        return False\ndef print_Sum_of_Divisors(x):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    #x = 20\n    sum = 1\n    temp = 2\n    while temp<x:\n        if x%temp == 0:\n            sum = sum + temp\n            temp += 1\n        else:\n            temp += 1\n    print sum\ndef print_Factors(x):\n    '''\n    Write a python function to print the factors of a number.\n    '''\n    #x = 25\n    temp = 2\n    while temp<x:\n        if x%temp == 0:\n            print temp\n        temp += 1\ndef print_Factors_of_sum(x):\n    '''\n    Write a python function to find the factors of sum of two numbers.\n    '''\n    #x = 18\n    #y = 10\n    sum = x + y\n    temp = 2\n    while temp<sum:\n        if sum%temp == 0:\n            print temp\n        temp += 1\ndef print_GCD(x,y):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    #x = 18\n    #y = 10\n    while y!=0:\n        x,y = y,x%y\n    print x\ndef print_LCM(x,y):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    #x = 17\n    #y = 19\n    while True:\n        if (x%y == 0):\n            print x\n            return\n        temp = y\n        y = x%y\n        x = temp\ndef print_All_Prime_Numbers_Between_Two_Numbers(x,y):\n    '''\n    Write a python function to print all prime numbers between two numbers.\n    '''\n    #x = 0\n    #y = 100\n    if x > y:\n        temp = x\n        x = y\n        y = temp\n    temp = 2\n    while temp<=y:\n        if temp>x:\n            print temp\n        if is_Prime(temp):\n            if temp == y:\n                return\n            if temp < y:\n                print temp\n        temp += 1\ndef print_Armstrong_Number(x):\n    '''\n    Write a python function to check whether the given number is an Armstrong number or not.\n    '''\n    #x = 153\n    temp = x\n    sum = 0\n    while temp!=0:\n        digit = temp%10\n        sum = sum + (digit**3)\n        temp /= 10\n    if sum == x:\n        return True\n    else:\n        return False\ndef print_Armstrong_Number_Between_Two_Numbers(x,y):\n    '''\n    Write a python function to print all Armstrong numbers between two numbers.\n    '''\n    #x = 1\n    #y = 100\n    if x > y:\n        temp = x\n        x = y\n        y = temp\n    temp = 2\n    while temp<=y:\n        if print_Armstrong_Number(temp):\n            print temp\n        temp += 1\ndef print_Prime_Number_Pairs(x,y):\n    '''\n    Write a python function to print all prime numbers between two numbers.\n    '''\n    #x = 1\n    #y = 100\n    if x > y:\n        temp = x\n        x = y\n        y = temp\n    temp = 2\n    while temp<=y:\n        if is_Prime(temp):\n            print temp,\n        temp += 1\ndef print_Pairs_of_Prime_Number(x,y):\n    '''\n    Write a python function to print all pairs of prime numbers between two numbers.\n    '''\n    #x = 1\n    #y = 100\n    if x > y:\n        temp = x\n        x = y\n        y = temp\n    temp = 2\n    while temp<=y:\n        if is_Prime(temp):\n            print temp,\n        temp += 1\ndef print_Pairs_of_Prime_Number_Between_Two_Numbers(x,y):\n    '''\n    Write a python function to print all pairs of prime numbers between two numbers.\n    '''\n    #x = 1\n    #y = 100\n    if x > y:\n        temp = x\n        x = y\n        y = temp\n    temp = 2\n    while temp<=y:\n        if is_Prime(temp):\n            print temp,\n        temp += 1\ndef print_Pairs_of_Prime_Number_Between_Three_Numbers(x,y,z):\n    '''\n    Write a python function to print all pairs of prime numbers between two numbers.\n    '''\n    #x = 1\n    #y = 100\n    if x > y:\n        temp = x\n        x = y\n        y = temp\n    if x > z:\n        temp = x\n        x = z\n        z = temp\n    temp = 2\n    while temp<=y:\n        if is_Prime(temp):\n            print temp,\n        temp += 1\ndef print_Pairs_of_Prime_Number_Between_Four_Numbers(x,y,z,t):\n    '''\n    Write a python function to print all pairs of prime numbers between two numbers.\n    '''\n    #x = 1\n    #y = 100\n    if x > y:\n        temp = x\n        x = y\n        y = temp\n    if x > z:\n        temp = x\n        x = z\n        z = temp\n    if x > t:\n        temp = x\n        x = t\n        t = temp\n    temp = 2\n    while temp<=y:\n        if is_Prime(temp):\n            print temp,\n        temp += 1\ndef print_Pairs_of_Prime_Number_Between_Five_Numbers(x,",
        "num_ids": 132
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # your code goes here\n    if x == 0 and y == 0:\n        return True\n    elif x == 0 and y!= 0:\n        return False\n    elif x!= 0 and y == 0:\n        return False\n    else:\n        return (x/abs(x)) == (y/abs(y))\ndef Is_Even(x): \n    '''\n    Write a python function to check whether the given integer is even or not.\n    '''\n    # your code goes here\n    if x%2 == 0:\n        return True\n    else:\n        return False\ndef Is_Odd(x): \n    '''\n    Write a python function to check whether the given integer is odd or not.\n    '''\n    # your code goes here\n    if x%2!= 0:\n        return True\n    else:\n        return False\ndef is_Prime(x):\n    '''\n    Write a python function to check whether the given integer is a prime number or not.\n    '''\n    # your code goes here\n    for i in range(2,x):\n        if x%i == 0:\n            return False\n    return True\ndef is_Power(x,y):\n    '''\n    Write a python function to check whether the given integer is a power of the given integer or not.\n    '''\n    # your code goes here\n    if x == 1:\n        return True\n    elif x!= 1:\n        return (x%y == 0 and y%x == 0)\n",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n    \ndef int_as_Roman(x): \n    '''\n    Write a python function to convert an integer to Roman Numeral.\n    '''\n    numeral_map = {1:'I', 4:'IV', 5:'V', 9:'IX', 10:'X', 40:'XL', 50:'L', 90:'XC', 100:'C', 400:'CD', 500:'D', 900:'CM', 1000:'M'}\n    if x not in numeral_map: \n        return ''\n    return numeral_map[x]\n    \ndef roman_to_int(x): \n    '''\n    Write a python function to convert a Roman Numeral to an integer.\n    '''\n    numeral_map = {'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n    if x not in numeral_map: \n        return 0\n    return numeral_map[x]\n    \ndef convert_to_string(n): \n    '''\n    Write a python function to convert a number to a string in any base.\n    '''\n    convert_string = '0123456789ABCDEF'\n    if n < 0: \n        n = n*-1\n    result = ''\n    while n > 0:\n        result = convert_string[n%10] + result\n        n = n/10\n    return result\n    \ndef is_perfect_Square(n): \n    '''\n    Write a python function to check whether a number is perfect Square or not\n    '''\n    sqrt_of_n = n**0.5\n    if sqrt_of_n==int(sqrt_of_n): \n        return True\n    return False\n    \ndef is_perfect_Square(n): \n    '''\n    Write a python function to check whether a number is perfect Square or not\n    '''\n    sqrt_of_n = n**0.5\n    return (sqrt_of_n-int(sqrt_of_n))==0\n    \ndef is_Square(n): \n    '''\n    Write a python function to check whether a number is square or not\n    '''\n    sqrt_of_n = n**0.5\n    return int(sqrt_of_n)==sqrt_of_n\n    \ndef is_Square(n): \n    '''\n    Write a python function to check whether a number is square or not\n    '''\n    sqrt_of_n = n**0.5\n    return (sqrt_of_n-int(sqrt_of_n))==0\n    \ndef is_Square_or_Int(n): \n    '''\n    Write a python function to check whether a number is square or not\n    '''\n    if is_Square(n): \n        return True\n    if n==int(n): \n        return True\n    return False\n    \ndef is_Square_or_Int(n): \n    '''\n    Write a python function to check whether a number is square or not\n    '''\n    if is_Square(n): \n        return True\n    if n==int(n): \n        return True\n    return False\n    \ndef is_Square_or_Int(n): \n    '''\n    Write a python function to check whether a number is square or not\n    '''\n    if is_Square(n): \n        return True\n    if n==int(n): \n        return True\n    return False\n    \ndef find_factors(n): \n    '''\n    Write a python function to find the factors of a number\n    '''\n    factors = []\n    for i in xrange(1,n+1): \n        if n%i == 0: \n            factors.append(i)\n    return factors\n    \ndef find_Factors(n): \n    '''\n    Write a python function to find the factors of a number\n    '''\n    factors = []\n    for i in xrange(1,n+1): \n        if n%i == 0: \n            factors.append(i)\n    return factors\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '''\n    Write a python function to check whether a number is a factor of another number.\n    '''\n    return n%m == 0\n    \ndef is_factor(n,m): \n    '",
        "num_ids": 25
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x == 0 and y!= 0:\n        return True\n    elif x == 0 and y == 0:\n        return False\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    elif x == 0 and y == 0:\n        return False\n    else:\n        return False\n",
        "num_ids": 122
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y < 0\n",
        "num_ids": 10
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y<0 or x>0 and y>0\n",
        "num_ids": 20
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y < 0\n",
        "num_ids": 10
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (((n+1)*((n*2)+1)) / 2)\n",
        "num_ids": 21
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    number = 1\n    index = 0\n    while (number < n):\n        number += 8 * index\n        index += 1\n",
        "num_ids": 32
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 0\n    while True:\n        i += 1\n        if (i ** 2 + i) == 2 * i * (i + 1):\n            if i == n:\n                return True\n",
        "num_ids": 48
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2*(2*n+1)**2 == (2*n+1)**2*(n**2+n+1)**2\n    \ndef test_is_octagonal():\n    assert is_octagonal(1) == True\n    assert is_octagonal(2) == True\n    assert is_octagonal(3) == True\n    assert is_octagonal(4) == False\n    assert is_octagonal(5) == False\n    assert is_octagonal(6) == False\n    assert is_octagonal(7) == False\n    assert is_octagonal(8) == True\n    assert is_octagonal(9) == False\n    assert is_octagonal(10) == True\n    assert is_octagonal(11) == True\n    assert is_octagonal(12) == False\n    assert is_octagonal(13) == False\n    assert is_octagonal(14) == False\n    assert is_octagonal(15) == True\n    assert is_octagonal(16) == True\n    assert is_octagonal(17) == True\n    assert is_octagonal(18) == False\n    assert is_octagonal(19) == False\n    assert is_octagonal(20) == False\n    assert is_octagonal(21) == True\n    assert is_octagonal(22) == False\n    assert is_octagonal(23) == True\n    assert is_octagonal(24) == False\n    assert is_octagonal(25) == True\n    assert is_octagonal(26) == False\n    assert is_octagonal(27) == False\n    assert is_octagonal(28) == False\n    assert is_octagonal(29) == False\n    assert is_octagonal(30) == True\n    assert is_octagonal(31) == False\n    assert is_octagonal(32) == True\n    assert is_octagonal(33) == False\n    assert is_octagonal(34) == False\n    assert is_octagonal(35) == False\n    assert is_octagonal(36) == False\n    assert is_octagonal(37) == False\n    assert is_octagonal(38) == False\n    assert is_octagonal(39) == False\n    assert is_octagonal(40) == False\n    assert is_octagonal(41) == True\n    assert is_octagonal(42) == False\n    assert is_octagonal(43) == False\n    assert is_octagonal(44) == False\n    assert is_octagonal(45) == False\n    assert is_octagonal(46) == False\n    assert is_octagonal(47) == False\n    assert is_octagonal(48) == False\n    assert is_octagonal(49) == False\n    assert is_octagonal(50) == False\n    assert is_octagonal(51) == False\n    assert is_octagonal(52) == False\n    assert is_octagonal(53) == True\n    assert is_octagonal(54) == False\n    assert is_octagonal(55) == False\n    assert is_octagonal(56) == False\n    assert is_octagonal(57) == False\n    assert is_octagonal(58) == False\n    assert is_octagonal(59) == False\n    assert is_octagonal(60) == False\n    assert is_octagonal(61) == False\n    assert is_octagonal(62) == False\n    assert is_octagonal(63) == False\n    assert is_octagonal(64) == False\n    assert is_octagonal(65) == False\n    assert is_octagonal(66) == False\n    assert is_octagonal(67) == False\n    assert is_octagonal(68) == False\n    assert is_octagonal(69) == False\n    assert is_octagonal(70) == False\n    assert is_octagonal(71) == False\n    assert is_octagonal(72) == False\n    assert is_octagonal(73) == False\n    assert is_octagonal(74) == False\n    assert is_octagonal(75) == False\n    assert is_octagonal(76) == False\n    assert is_octagonal(77) == False\n    assert is_octagonal(78) == False\n    assert is_octagonal(79) == False\n    assert is_octagonal(80) == False\n    assert is_octagonal(81) == False\n    assert is_octagonal(82) == False\n    assert is_octagonal(83) == False\n    assert is_octagonal(84) == False\n    assert is_octagonal(85) == False\n    assert is_octagonal(86) == False\n    assert is_octagonal(87) == False\n    assert is_octagonal(88) == False\n    assert is_octagonal(89) == False\n    assert is_octagonal(90) == False\n    assert is_octagonal(91) == False\n    assert is_octagonal(92) == False\n    assert is_octagonal(93) == False\n    assert is_octagonal(94) == False\n    assert is_octagonal(95) == False\n    assert is_octagonal(96) == False\n    assert is_octagonal(97) == False\n    assert is_octagonal(98) == False\n    assert is_octagonal(99) == False\n    assert is_octagonal(100) == False\n    assert is_octagonal(101) == False\n    assert is_octagonal(102) == False\n    assert is_octagonal(103) == False\n    assert is_octagonal(104) == False\n    assert is_octagonal(105) == False\n    assert is_octagonal(106) == False\n    assert is_octagonal(107) == False\n    assert is_octagonal(108) == False\n    assert is_octagonal(109) == False\n    assert is_octagonal(110) == False\n    assert is_octagonal(111) == False\n    assert is_octagonal(112) == False\n    assert is_octagonal(113) == False\n    assert is_octagonal(114) == False\n    assert is_octagonal(115) == False\n    assert is_octagonal(116) == False\n    assert is_octagonal(117) == False\n    assert is_octagonal(118) == False\n    assert is_octagonal(119) == False\n    assert is_octagonal(120) == False\n    assert is_octagonal(121) == False\n    assert is_octagonal(122) == False\n    assert is_octagonal(123) == False\n    assert is_octagonal(124) == False\n    assert is_octagonal(125) == False\n    assert is_octagonal(126) == False\n    assert is_octagonal(127) == False\n    assert is_octagonal(128) == False\n    assert is_octagonal(129) == False\n    assert is_octagonal(130) == False\n    assert is_octagonal(131) == False\n    assert is_octagonal(132) == False\n    assert is_octagonal(133) == False\n    assert is_octagonal(134) == False\n    assert is_octagonal(135) == False\n    assert is_octagonal(136) == False\n    assert is_octagonal(137) == False\n    assert is_octagonal(138) == False\n    assert is_octagonal(139) == False\n    assert is_octagonal(140) == False\n    assert is_octagonal(141) == False\n    assert is_octagonal(142) == False\n    assert is_octagonal(143) == False\n    assert is_octagonal(144) == False\n    assert is_octagonal(145) == False\n    assert is_octagonal(146) == False\n    assert is_octagonal(147) == False\n    assert is_octagonal(148) == False\n    assert is_octagonal(149) == False\n    assert is_octagonal(150) == False\n    assert is_octagonal(151) == False\n    assert is_octagonal(152) == False\n    assert is_octagonal(153) == False\n    assert is_octagonal(154) == False\n    assert is_octagonal(155) == False\n    assert is_octagonal(156) == False\n    assert is_octagonal(157) == False\n    assert is_octagonal(158) == False\n    assert is_octagonal(159) == False\n    assert is_octagonal(160) == False\n    assert is_octagonal(161) == False\n    assert is_octagonal(162) == False\n    assert is_octagonal(163) == False\n    assert is_octagonal(164) == Fals",
        "num_ids": 2019
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def gen_octagonal(n):\n        res = 1\n        for i in range(n):\n            res *= (3 * i + 1)\n        return res\n",
        "num_ids": 42
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    l = []\n    i = 1\n    while len(l) < n:\n        l.append(i**3)\n        i += 1\n    return l[n-1]\n",
        "num_ids": 46
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 + n) % 2 == 1 \n    \ndef octagon_number(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 + n\n",
        "num_ids": 10
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2**(n-1) + 3**(n-1)\n",
        "num_ids": 35
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # It is the number that is nth multiple of 1, 3, 5, 7, 9, 11\n    return n*(3*n - 1)/2\n",
        "num_ids": 39
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + 8*n + 28*(n**2) + 56*(n**3))\n",
        "num_ids": 27
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counter = defaultdict(int)\n    for i in xrange(len(s)):\n        for j in xrange(i+1,len(s)+1):\n            substring = s[i:j]\n            if len(substring)!= len(set(substring)):\n                continue\n            counter[substring] += 1\n    return sum(counter.values())\n",
        "num_ids": 91
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        sums = 0\n        for j in range(i,len(s)):\n            sums = sums + int(s[j])\n            if sums == len(s):\n                count = count + 1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Solution 1\n    def count_substr(s, n):\n        count = 0\n        for i in range(0, len(s)):\n            j = i\n            while j < len(s) and (int(s[j]) == n or n == 0):\n                j += 1\n            count += (j - i)\n        return count\n    \n    count = 0\n    for i in range(1, 10):\n        count += count_substr(s, i)\n    return count\n    \n    #Solution 2\n    '''\n    dp = [defaultdict(int) for _ in xrange(len(s))]\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i+1):\n            if s[i] == s[j]:\n                dp[i][s[j]] += 1\n                count += dp[j][s[j]]\n    return count\n    '''\n    \ndef count_Substrings_3(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Solution 1\n    def count_substr(s, n):\n        count = 0\n        for i in range(0, len(s)):\n            j = i\n            while j < len(s) and (int(s[j]) == n or n == 0):\n                j += 1\n            count += (j - i)\n        return count\n    \n    count = 0\n    for i in range(10):\n        count += count_substr(s, i)\n    return count\n    \n    #Solution 2\n    '''\n    dp = [defaultdict(int) for _ in xrange(len(s))]\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i+1):\n            if s[i] == s[j]:\n                dp[i][s[j]] += 1\n                count += dp[j][s[j]]\n    return count\n    '''\n    \ndef count_Substrings_2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Solution 1\n    def count_substr(s, n):\n        count = 0\n        for i in range(0, len(s)):\n            j = i\n            while j < len(s) and (int(s[j]) == n or n == 0):\n                j += 1\n            count += (j - i)\n        return count\n    \n    count = 0\n    for i in range(10):\n        count += count_substr(s, i)\n    return count\n    \n    #Solution 2\n    '''\n    dp = [defaultdict(int) for _ in xrange(len(s))]\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i+1):\n            if s[i] == s[j]:\n                dp[i][s[j]] += 1\n                count += dp[j][s[j]]\n    return count\n    '''\n    \ndef count_Substrings_1(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Solution 1\n    def count_substr(s, n):\n        count = 0\n        for i in range(0, len(s)):\n            j = i\n            while j < len(s) and (int(s[j]) == n or n == 0):\n                j += 1\n            count += (j - i)\n        return count\n    \n    count = 0\n    for i in range(1, 10):\n        count += count_substr(s, i)\n    return count\n    \n    #Solution 2\n    '''\n    dp = [defaultdict(int) for _ in xrange(len(s))]\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i+1):\n            if s[i] == s[j]:\n                dp[i][s[j]] += 1\n                count += dp[j][s[j]]\n    return count\n    '''\n    \ndef count_Substrings_0(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Solution 1\n    def count_substr(s, n):\n        count = 0\n        for i in range(0, len(s)):\n            j = i\n            while j < len(s) and (int(s[j]) == n or n == 0):\n                j += 1\n            count += (j - i)\n        return count\n    \n    count = 0\n    for i in range(10):\n        count += count_substr(s, i)\n    return count\n    \n    #Solution 2\n    '''\n    dp = [defaultdict(int) for _ in xrange(len(s))]\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i+1):\n            if s[i] == s[j]:\n                dp[i][s[j]] += 1\n                count += dp[j][s[j]]\n    return count\n    '''\n    \ndef count_Substrings_4(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Solution 1\n    def count_substr(s, n):\n        count = 0\n        for i in range(0, len(s)):\n            j = i\n            while j < len(s) and (int(s[j]) == n or n == 0):\n                j += 1\n            count += (j - i)\n        return count\n    \n    count = 0\n    for i in range(10):\n        count += count_substr(s, i)\n    return count\n    \n    #Solution 2\n    '''\n    dp = [defaultdict(int) for _ in xrange(len(s))]\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i+1):\n            if s[i] == s[j]:\n                dp[i][s[j]] += 1\n                count += dp[j][s[j]]\n    return count\n    '''\n    \ndef count_Substrings_5(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Solution 1\n    def count_substr(s, n):\n        count = 0\n        for i in range(0, len(s)):\n            j = i\n            while j < len(s) and (int(s[j]) == n or n == 0):\n                j += 1\n            count += (j - i)\n        return count\n    \n    count = 0\n    for i in range(10):\n        count += count_substr(s, i)\n    return count\n    \n    #Solution 2\n    '''\n    dp = [defaultdict(int) for _ in xrange(len(s))]\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i+1):\n            if s[i] == s[j]:\n                dp[i][s[j]] += 1\n                count += dp[j][s[j]]\n    return count\n    '''\n    \ndef count_Substrings_6(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Solution 1\n    def count_substr(s, n):\n        count = 0\n        for i in range(0, len(s)):\n            j = i\n            while j < len(s) and (int(s[j]) == n or n == 0):\n                j += 1\n            count += (j - i)\n        return count\n    \n    count = 0\n    for i in range(10):\n        count += count_substr(s, i)\n    return count\n    \n    #Solution 2\n    '''\n    d",
        "num_ids": 4
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i <= j:\n                temp = s[i:j+1]\n                if sum([int(temp[x]) for x in range(len(temp))]) == len(temp):\n                    result += 1\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    d = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            summ = sum([int(x) for x in s[i:j]])\n            d[summ] += 1\n    return d\n",
        "num_ids": 77
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    if s==\"\":\n        return 0\n    n = len(s)\n    hashmap = defaultdict(int)\n    hashmap[0] = 1\n    substring_length = 0\n    for i in range(n):\n        hashmap[i] = hashmap[i-1]\n        hashmap[i] += (int(s[i]))\n    # print(hashmap)\n    for i in range(n):\n        for j in range(i,n):\n            if hashmap[j] - hashmap[i] == substring_length:\n                res += 1\n            if hashmap[j] - hashmap[i] < substring_length:\n                break\n            else:\n                substring_length = hashmap[j] - hashmap[i]\n    return res\n",
        "num_ids": 195
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    counter = 0\n    for i in range(2**n):\n        substr = get_Substring(s,i)\n        if sum_Digits(substr) == len(substr):\n            counter += 1\n    return counter\n",
        "num_ids": 66
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring_count = 0\n    length_map = defaultdict(lambda:0)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if j-i == len(s):\n                substring_count +=1\n            elif len(s[i:j]) == len(set([int(c) for c in s[i:j]])):\n                substring_count +=1\n            length_map[len(s[i:j])] +=1\n    print(substring_count)\n    print(length_map)\n    return substring_count\n",
        "num_ids": 152
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    f = defaultdict(int)\n    f[0] = 1\n    sum = 0\n    for i in range(n):\n        sum += int(s[i])\n        f[sum] += 1\n    \n    count = 0\n    for i in range(n):\n        count += f[i]\n    \n    return count\n",
        "num_ids": 89
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, list(s[i:j+1]))) == len(s[i:j+1]):\n                count += 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # xs = [1,2,3,4,5]\n    # return the value of the smallest number\n    # in the list xs\n    return min(xs)\n",
        "num_ids": 44
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n    \n",
        "num_ids": 39
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # TODO: Your code here\n    #return min(xs)\n    return reduce(lambda x, y: x if x < y else y, xs)\n",
        "num_ids": 40
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = len(xs)\n    min_num = 1000000\n    for i in range(n):\n        if xs[i] < min_num:\n            min_num = xs[i]\n    return min_num\n",
        "num_ids": 57
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in xs:\n        if i < min:\n            min = i\n    return min\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #code here\n    x = min(xs)\n    return x\n",
        "num_ids": 19
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return 0\n    else:\n        # sort the list\n        sorted_list = sorted(test_list)\n        # find the maximum difference\n        diff = abs(sorted_list[n - 1] - sorted_list[0])\n        # compare with the pair from right\n        for i in range(1, n - 1):\n            diff = max(diff, abs(sorted_list[i] - sorted_list[i + 1]))\n        # compare with the pair from left\n        for i in range(1, n - 1):\n            diff = max(diff, abs(sorted_list[i - 1] - sorted_list[i]))\n        return diff\n",
        "num_ids": 177
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    m_index = 0\n    m_v = test_list[0]\n    for i in range(len(test_list)):\n        v = test_list[i]\n        if v > m_v:\n            m_v = v\n            m_index = i\n    return m_v - test_list[m_index]\n",
        "num_ids": 83
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return None\n    test_list = sorted(test_list)\n    for i in range(n):\n        for j in range(i+1,n):\n            if test_list[j] - test_list[i] > test_list[-1] - test_list[0]:\n                return test_list[j] - test_list[i]\n",
        "num_ids": 104
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_len = len(test_list)\n    diff_list = []\n    for i in range(list_len):\n        for j in range(i+1, list_len):\n            diff_list.append(test_list[i] - test_list[j])\n    return max(diff_list)\n",
        "num_ids": 77
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    import itertools\n    return max([abs(b-a) for a, b in itertools.combinations(test_list, 2)])\n",
        "num_ids": 38
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sorting the list to ensure same pairs will be removed\n    test_list.sort()\n    n = len(test_list)\n    # Initializing the result\n    result = 0\n    # Loop to iterate through the list\n    for i in range(1, n):\n        # If the elements are same, we can ignore the pair\n        if test_list[i] == test_list[i - 1]:\n            continue\n        # If there are more than one pairs available, we can store the pair in a temp\n        # and check later\n        temp = test_list[i] - test_list[i - 1]\n        # If the temp is more than result, update the result\n        if temp > result:\n            result = temp\n    # If the result is 0, then the list is already sorted, hence there's no pairs\n    if result == 0:\n        return None\n    else:\n        return result\n",
        "num_ids": 213
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            max_val = max(max_val, abs(test_list[i] - test_list[j]))\n    return max_val\n",
        "num_ids": 75
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    num_list = []\n    for i in test_list:\n        num_list.append(i)\n    num_list.sort()\n    num_list.append(num_list[-1] + num_list[-2])\n    if num_list[-1] - num_list[0] == num_list[-2] - num_list[1]:\n        return num_list[-2] - num_list[1]\n    else:\n        return num_list[-1] - num_list[0]\n",
        "num_ids": 129
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    import collections\n    counter = collections.Counter()\n    for i in test_list:\n        counter[i] += 1\n    cnt = 0\n    for i in counter.values():\n        if i == 2:\n            cnt += 1\n    return cnt\n",
        "num_ids": 64
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # This should be better done using python functions\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n",
        "num_ids": 104
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = sorted(subjectmarks, key=operator.itemgetter(1))\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    a = sorted(subjectmarks, key=lambda x: x[1])\n    return a\n    \n    ",
        "num_ids": 27
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = operator.itemgetter(1))\n    return subjectmarks\n",
        "num_ids": 24
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # print(subject_marks)\n    subject_marks.sort(key=lambda x:x[1])\n    return subject_marks\n",
        "num_ids": 34
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #sorting the tuples\n    sorted_subjectmarks = sorted(subjectmarks,key=itemgetter(1),reverse=True)\n    #returning the sorted list\n    return sorted_subjectmarks\n",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    sorted_list = sorted(subjectmarks, key=itemgetter(1))\n    return sorted_list\n",
        "num_ids": 30
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subdict = {}\n    for (k,v) in subjectmarks:\n        if v in subdict:\n            subdict[v].append(k)\n        else:\n            subdict[v] = [k]\n    return subdict\n",
        "num_ids": 59
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(0,len(subjectmarks)):\n        for j in range(i+1,len(subjectmarks)):\n            if subjectmarks[i][1] > subjectmarks[j][1]:\n                subjectmarks[i],subjectmarks[j] = subjectmarks[j],subjectmarks[i]\n    return subjectmarks\n",
        "num_ids": 80
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        data = data_list[0]\n        \n        if isinstance(data, list):\n            return recursive_list_sum(data) + recursive_list_sum(data_list[1:])\n        else:\n            return data + recursive_list_sum(data_list[1:])\n",
        "num_ids": 93
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 46
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    if data_list == []:\n        return result\n    else:\n        result += data_list[0]\n        return result + recursive_list_sum(data_list[1:])\n",
        "num_ids": 52
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_list = 0\n    for item in data_list:\n        if isinstance(item, int):\n            sum_of_list += item\n        elif isinstance(item, list):\n            sum_of_list += recursive_list_sum(item)\n    return sum_of_list\n",
        "num_ids": 74
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \ndef flatten_and_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + flatten_and_sum(data_list[1:])\n    \ndef flatten_and_sum2(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += flatten_and_sum2(element)\n        else:\n            total += element\n    return total\n    \ndef flatten_and_sum3(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += flatten_and_sum3(element)\n        else:\n            total += element\n    return total\n    \ndef reverse_and_concat(data_list):\n    '''\n    Write a function to reverse a list and concatenate all of its elements to return a string.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return reverse_and_concat(data_list[1:]) + data_list[0]\n    \ndef reverse_and_concat2(data_list):\n    '''\n    Write a function to reverse a list and concatenate all of its elements to return a string.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[-1] + reverse_and_concat2(data_list[:-1])\n    \ndef factorial(num):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1)\n    \ndef factorial_recursive(num):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial_recursive(num - 1)\n    \ndef flatten_nested_lists(data_list):\n    '''\n    Write a function to flatten a nested list,\n    such as data_list = [[1,2,3],[4,5,6]]\n    return data_list = [1,2,3,4,5,6]\n    '''\n    flatten_list = []\n    for inner_list in data_list:\n        for element in inner_list:\n            flatten_list.append(element)\n    return flatten_list\n    \ndef reverse_nested_list(data_list):\n    '''\n    Write a function to reverse a nested list,\n    such as data_list = [[1,2,3],[4,5,6]]\n    return data_list = [[6,5,4],[3,2,1]]\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return [data_list[-1]] + reverse_nested_list(data_list[:-1])\n    \ndef check_palindrome(data_str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if data_str == data_str[::-1]:\n        return True\n    else:\n        return False\n    \ndef check_palindrome2(data_str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(data_str) < 2:\n        return True\n    if data_str[0]!= data_str[-1]:\n        return False\n    else:\n        return check_palindrome2(data_str[1:-1])\n    \ndef is_perfect_square(num):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if num == 1:\n        return True\n    else:\n        return num ** 0.5 == int(num ** 0.5)\n    \ndef is_perfect_square2(num):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if num == 1:\n        return True\n    else:\n        return num ** 0.5 == int(num ** 0.5)\n    \ndef get_primes(start, stop):\n    '''\n    Write a function to return the prime numbers between start and stop.\n    '''\n    if start == 2:\n        return [2]\n    else:\n        return [2] + get_primes(start, stop)\n    \ndef get_primes2(start, stop):\n    '''\n    Write a function to return the prime numbers between start and stop.\n    '''\n    if start == 2:\n        return [2]\n    else:\n        if start % 2 == 0:\n            start += 1\n        return [2] + [x for x in range(start, stop, 2) if is_prime(x)]\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a number is a prime.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        if num % 2 == 0:\n            return False\n        else:\n            return is_prime(num - 1)\n    \ndef is_prime2(num):\n    '''\n    Write a function to check if a number is a prime.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        if num % 2 == 0:\n            return False\n        else:\n            return is_prime2(num - 1)\n    \ndef get_primes3(start, stop):\n    '''\n    Write a function to return the prime numbers between start and stop.\n    '''\n    if start == 2:\n        return [2]\n    else:\n        if start % 2 == 0:\n            start += 1\n        return [2] + [x for x in range(start, stop, 2) if is_prime(x)]\n    \ndef get_primes4(start, stop):\n    '''\n    Write a function to return the prime numbers between start and stop.\n    '''\n    if start == 2:\n        return [2]\n    else:\n        if start % 2 == 0:\n            start += 1\n        return [2] + [x for x in range(start, stop, 2) if is_prime2(x)]\n    \ndef is_factorial(num):\n    '''\n    Write a function to check if a number is a factorial.\n    '''\n    if num == 1:\n        return True\n    else:\n        if num % 2 == 0:\n            return is_factorial(num / 2)\n        else:\n            return False\n    \ndef is_factorial2(num):\n    '''\n    Write a function to check if a number is a factorial.\n    '''\n    if num == 1:\n        return True\n    else:\n        if num % 2 == 0:\n            return is_factorial2(num / 2)\n        else:\n            return False\n    \ndef get_factorial(num):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * get_factorial(num - 1)\n    \ndef get_factorial2(num):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        if num % 2 == 0:\n            return get_factorial2(num / 2)\n        else:\n            return num ",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Return the base case\n    if not data_list:\n        return 0\n    \n    # Recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 56
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return sum(data_list)\n",
        "num_ids": 71
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n",
        "num_ids": 17
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #a = []\n    #for i in list:\n    #    if i > 0:\n    #        a.append(i)\n    #print a\n    return len([i for i in list if i > 0])\n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    #a = []\n    #for i in list:\n    #    if i < 0:\n    #        a.append(i)\n    #print a\n    return len([i for i in list if i < 0])\n    \ndef pos_neg_count(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    #a = []\n    #for i in list:\n    #    if i > 0:\n    #        a.append(i)\n    #    elif i < 0:\n    #        a.append(i)\n    #print a\n    return len(a)\n",
        "num_ids": 67
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i > 0])\n",
        "num_ids": 17
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n    \n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_count = 0\n    for item in list:\n        if item > 0:\n            positive_count += 1\n    print positive_count\n    return positive_count\n",
        "num_ids": 42
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for item in list:\n        if item >= 0:\n            pos += 1\n    return pos\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_number = [0]*(n+1)\n    bell_number[1] = 1\n    for i in range(2, n+1):\n        bell_number[i] = bell_number[i-1] + bell_number[i-2]\n    return bell_number[n]\n",
        "num_ids": 75
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    a = [1]\n    b = [1,1]\n    if n <= 2:\n        return a[n]\n    else:\n        for i in range(3,n+1):\n            a.append(a[i-1] + a[i-2])\n            b.append(b[i-1] + b[i-2])\n        return b[n]\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    table = [1]*(n+1)\n    for i in xrange(2, n+1):\n        for j in xrange(1, i):\n            table[i] += table[j-1]*table[i-j]\n    return table[n]\n",
        "num_ids": 68
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    table = [1, 1, 1, 2, 5]\n    for i in range(5, n+1):\n        table.append(sum(table[i-j] for j in range(1, i//2+1)))\n    return table[n]\n",
        "num_ids": 64
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = []\n    bells.append([1])\n    bells.append([2])\n    for i in range(2,n+1):\n        bells.append([1]+[bells[i-1][j]+bells[i-1][j+1] for j in range(len(bells[i-1])-1)])\n    print(bells)\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #intialize the dict\n    d = {}\n    d[0] = 1\n    d[1] = 1\n    for i in range(2, n+1):\n        #use the formula below to get the sum of i to n, n-1 to 0, n-1 to i\n        d[i] = d[i-1] + d[i-2]\n",
        "num_ids": 91
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    k = 0\n    while True:\n        k += 1\n        if bell_number_recursion(k, n) == n:\n            return k\n",
        "num_ids": 38
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bell = [0 for i in range(n + 1)] \n    bell[0] = 1\n    bell[1] = 1\n    bell[2] = 2\n    \n    for i in range(3, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 2]\n        \n    return bell[n]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2013
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Result\n    res = 1\n    # Partition (0)\n    for i in range(1, n+1):\n        res *= (n+i) / i\n    # Partition (1)\n    for i in range(1, n+1):\n        res /= (n-i)\n    return res\n",
        "num_ids": 79
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    elif len(A) == 1:\n        return True\n    else:\n        return A[0] < A[1] and A[-1] > A[-2]\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = True\n    for i in range(len(A)-1):\n        if A[i] <= A[i+1]:\n            pass\n        else:\n            flag = False\n            break\n    return flag\ndef Max_and_min(A): \n    '''\n    Write a python function to find max and min of the given array.\n    '''\n    max_val, min_val = A[0], A[0]\n    for i in range(len(A)):\n        if max_val < A[i]:\n            max_val = A[i]\n        elif min_val > A[i]:\n            min_val = A[i]\n    return max_val, min_val\ndef Get_Mode(A): \n    '''\n    Write a python function to find the mode of the given array.\n    '''\n    mode_val = A[0]\n    count = 1\n    for i in range(len(A)):\n        if A[i] == mode_val:\n            count += 1\n        else:\n            pass\n    return mode_val, count\ndef merge_list(A, B): \n    '''\n    Write a python function to merge two sorted lists into one sorted list.\n    '''\n    i, j = 0, 0\n    A_len, B_len = len(A), len(B)\n    C = [0]*(A_len+B_len)\n    while i<A_len and j<B_len:\n        if A[i] < B[j]:\n            C[i+j] = A[i]\n            i += 1\n        else:\n            C[i+j] = B[j]\n            j += 1\n    if i == A_len:\n        while j<B_len:\n            C[i+j] = B[j]\n            j += 1\n    if j == B_len:\n        while i<A_len:\n            C[i+j] = A[i]\n            i += 1\n    return C\ndef find_max_pair(A): \n    '''\n    Write a python function to find the maximum value in the array.\n    '''\n    max_val, index = A[0], 0\n    for i in range(len(A)):\n        if A[i]>max_val:\n            max_val, index = A[i], i\n    return max_val, index\ndef find_max_pair_brute(A): \n    '''\n    Write a python function to find the maximum value in the array.\n    '''\n    max_val, index = A[0], 0\n    for i in range(len(A)):\n        if A[i]>max_val:\n            max_val, index = A[i], i\n    return max_val, index\ndef insertion_sort(A): \n    '''\n    Write a python function to implement insertion sort.\n    '''\n    for i in range(1, len(A)):\n        j = i-1\n        key = A[i]\n        while j >= 0 and A[j]>key:\n            A[j+1] = A[j]\n            j -= 1\n        A[j+1] = key\n    return A\ndef insertion_sort_brute(A): \n    '''\n    Write a python function to implement insertion sort.\n    '''\n    for i in range(1, len(A)):\n        j = i-1\n        key = A[i]\n        while j >= 0 and A[j]>key:\n            A[j+1] = A[j]\n            j -= 1\n        A[j+1] = key\n    return A\ndef bubblesort(A): \n    '''\n    Write a python function to implement bubblesort.\n    '''\n    for i in range(len(A)-1, 0, -1):\n        for j in range(i):\n            if A[j] > A[j+1]:\n                A[j], A[j+1] = A[j+1], A[j]\n    return A\ndef bubblesort_brute(A): \n    '''\n    Write a python function to implement bubblesort.\n    '''\n    for i in range(len(A)-1, 0, -1):\n        for j in range(i):\n            if A[j] > A[j+1]:\n                A[j], A[j+1] = A[j+1], A[j]\n    return A\ndef selection_sort(A): \n    '''\n    Write a python function to implement selection sort.\n    '''\n    for i in range(len(A)):\n        min_val = A[i]\n        min_index = i\n        for j in range(i, len(A)):\n            if A[j]<min_val:\n                min_val = A[j]\n                min_index = j\n        A[i], A[min_index] = A[min_index], A[i]\n    return A\ndef selection_sort_brute(A): \n    '''\n    Write a python function to implement selection sort.\n    '''\n    for i in range(len(A)):\n        min_val = A[i]\n        min_index = i\n        for j in range(i, len(A)):\n            if A[j]<min_val:\n                min_val = A[j]\n                min_index = j\n        A[i], A[min_index] = A[min_index], A[i]\n    return A\ndef heap_sort(A): \n    '''\n    Write a python function to implement heap sort.\n    '''\n    def heapify(A, n, i):\n        largest = i\n        left = 2*i+1\n        right = 2*i+2\n        if left<n and A[left]>A[largest]:\n            largest = left\n        if right<n and A[right]>A[largest]:\n            largest = right\n        if largest!= i:\n            A[i], A[largest] = A[largest], A[i]\n            heapify(A, n, largest)\n    n = len(A)\n    for i in range(n/2-1, -1, -1):\n        heapify(A, n, i)\n    for i in range(n-1, 0, -1):\n        A[0], A[i] = A[i], A[0]\n        heapify(A, i, 0)\n    return A\ndef heap_sort_brute(A): \n    '''\n    Write a python function to implement heap sort.\n    '''\n    def heapify(A, n, i):\n        largest = i\n        left = 2*i+1\n        right = 2*i+2\n        if left<n and A[left]>A[largest]:\n            largest = left\n        if right<n and A[right]>A[largest]:\n            largest = right\n        if largest!= i:\n            A[i], A[largest] = A[largest], A[i]\n            heapify(A, n, largest)\n    n = len(A)\n    for i in range(n/2-1, -1, -1):\n        heapify(A, n, i)\n    for i in range(n-1, 0, -1):\n        A[0], A[i] = A[i], A[0]\n        heapify(A, i, 0)\n    return A\ndef shell_sort(A): \n    '''\n    Write a python function to implement shell sort.\n    '''\n    h = 1\n    while h < len(A)/3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h, len(A)):\n            j = i-h\n            key = A[i]\n            while j >= 0 and A[j]>key:\n                A[j+h] = A[j]\n                j -= h\n            A[j+h] = key\n        h = h/3\n    return A\ndef shell_sort_brute(A): \n    '''\n    Write a python function to implement shell sort.\n    '''\n    h = 1\n    while h < len(A)/3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h",
        "num_ids": 41
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    a = len(A)\n    for i in range(1,a):\n        if A[i]>= A[i-1]:\n            continue\n        else:\n            return 0\n    return 1\ndef is_Monotonic_1(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)))\n    \n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    elif len(A) == 1:\n        return True\n",
        "num_ids": 31
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    ascending = 1\n    decreasing = -1\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            return increasing\n        elif A[i] < A[i-1]:\n            return decreasing\n    return 0\n",
        "num_ids": 71
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    d = A[1] - A[0]\n    for i in range(1, len(A)):\n        if A[i]!= A[i - 1] + d:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A)<=2):\n        return True\n    else:\n        return (A[1]-A[0]) == (A[2]-A[1])\n",
        "num_ids": 44
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0:\n        return True\n    else:\n        return A[0]<=A[-1] and A[0]<=A[1]\n",
        "num_ids": 45
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    if A[0] < A[-1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n",
        "num_ids": 105
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n",
        "num_ids": 8
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i: i + len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif len(s) == 1:\n        return s[0] in l\n    else:\n        return any([s[0] in l, is_sublist(l[1:], s[1:])])\n    \ndef longest_common_sublist(a, b):\n    '''\n    Write a function to find the longest common sublist in two given lists.\n    '''\n    n = len(a)\n    m = len(b)\n    if n == 0 or m == 0:\n        return []\n    elif a[0] == b[0]:\n        return a[0] + longest_common_sublist(a[1:], b[1:])\n    else:\n        return longest_common_sublist(a[1:], b[1:])\n",
        "num_ids": 95
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    temp = []\n    for i in s:\n        temp.append(i)\n    for j in l:\n        if j == temp:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    subl = len(l)\n    subs = len(s)\n    if subl < subs:\n        return False\n    \n    for i in range(subl - subs + 1):\n        if l[i:i+subs] == s:\n            return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if len(l[i]) == len(s):\n            if l[i] == s:\n                return True\n            if l[i]!= s:\n                return False\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) <= len(s):\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[:len(s)] == s\n",
        "num_ids": 14
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if l == s:\n        return True\n    for i in xrange(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    size = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= size:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        Input = tuple(Input)\n        if len(Input) == 0:\n            return False\n        elif len(Input) == 1:\n            return True\n        else:\n            x = Input[0]\n            for i in Input[1:]:\n                if len(i)!= len(x):\n                    return False\n            return True\n    except:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = set(Input)\n    return len(Tuple) == len(Input)\n    \ndef find_all_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return False\n    else:\n        return all(find_equal_tuple(tup) for tup in Input)\n",
        "num_ids": 37
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # your code here\n    return all(len(x) == len(Input[0]) for x in Input)\n",
        "num_ids": 29
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Result = True\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                Result = False\n                break\n    return Result\n",
        "num_ids": 65
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count=0\n    for i in Input:\n        if len(i)==count:\n            count+=1\n        else:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #print Input\n    for i in range(len(Input)):\n        t = Input[i][0]\n        if len(t)!= len(Input[0][0]):\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = {}\n    for i in Input:\n        if len(i) not in result:\n            result[len(i)] = 1\n        else:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_num = len(Input)\n    for i in range(tuple_num):\n        for j in range(i+1,tuple_num):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(len(x) for x in Input))<2\n",
        "num_ids": 20
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n",
        "num_ids": 83
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    while gap > 1:\n        gap = gap // 2\n        gap = max(gap, 1)\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums\n",
        "num_ids": 98
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # TODO: Implement this function.\n    # nums = nums.copy()\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n",
        "num_ids": 113
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def helper(nums, start, end):\n        if start == end:\n            return\n        i, j = start, start + 1\n        while j <= end:\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j += 1\n            else:\n                j += 1\n        helper(nums, start, i - 1)\n        helper(nums, i, end)\n    helper(nums, 0, len(nums) - 1)\n",
        "num_ids": 142
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap!= 1 or swapped:\n        swapped = False\n        gap = max(1, int(gap / 1.25))\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n",
        "num_ids": 115
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap/1.25)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    else:\n        # Find the minimum and maximum values\n        min_val = min(nums)\n        max_val = max(nums)\n        # Find the number of digits in the max and min values\n        digits_in_min = len(str(min_val))\n        digits_in_max = len(str(max_val))\n        # If the number of digits is the same, sort normally\n        if digits_in_min == digits_in_max:\n            return sorted(nums)\n        # Create a variable to store the number of swaps required\n        swaps = 0\n        # Create an empty array to store the sorted numbers\n        sorted_nums = []\n        # Loop over the numbers\n        for num in nums:\n            # Create a variable to store the number of digits in the current number\n            digits = len(str(num))\n            # Use the fact that the current number is greater than or equal to the min value\n            if num >= min_val:\n                # Find the index of the current number\n                index = nums.index(num)\n                # Add the current number to the sorted list\n                sorted_nums.append(num)\n                # Store the current number as the new min value\n                min_val = num\n                # Store the index of the current number as the new min value index\n                min_index = index\n            # If the current number is less than the min value\n            else:\n                # Add the current number to the sorted list\n                sorted_nums.append(num)\n                # Update the min value\n                min_val = num\n                # Store the index of the current number as the new min value index\n                min_index = index\n            # Update the swaps variable\n            swaps += index - min_index\n        # Create a new array with the same length as the sorted list\n        sorted_nums = [0] * len(sorted_nums)\n        # Loop over the sorted list\n        for i in range(len(sorted_nums)):\n            # Find the index of the number\n            index = nums.index(sorted_nums[i])\n            # Add the number to the sorted list\n            sorted_nums[i] = nums[index]\n            # Update the swaps variable\n            swaps -= index - min_index\n        # Return the sorted list\n        return sorted_nums\n",
        "num_ids": 570
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    if nums is None:\n        return None\n    \n    if len(nums) == 0:\n        return nums\n    \n    if len(nums) == 1:\n        return nums\n    \n    if len(nums) == 2:\n        if nums[0] > nums[1]:\n            nums[0], nums[1] = nums[1], nums[0]\n        return nums\n    \n    mid = int(math.floor(len(nums)/2))\n    \n    if len(nums) > 2:\n        #for i in range(0,mid):\n        #    for j in range(i+1,len(nums)):\n        #        if nums[j] < nums[i]:\n        #            nums[j], nums[i] = nums[i], nums[j]\n        #            \n        #    print''.join(map(str,nums))\n        \n        nums.sort()\n        \n        comb_sort(nums[0:mid])\n        comb_sort(nums[mid:])\n        \n        for i in range(0,len(nums)):\n            for j in range(0,len(nums)):\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n        \n        print''.join(map(str,nums))\n    \n    return nums\n    \nif __name__ == '__main__':\n    n = int(raw_input())\n    l = map(int, raw_input().strip().split(' '))\n    comb_sort(l)\n    \n    \n",
        "num_ids": 410
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # base case: if the list is only one element long\n    if len(nums) <= 1:\n        return nums\n",
        "num_ids": 32
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def pick_max(nums):\n        '''\n        Return the index of the maximum value.\n        '''\n        max_idx = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        return max_idx\n    \n    def insertion_sort(nums):\n        '''\n        Insertion sort the list of elements.\n        '''\n        if len(nums) == 1:\n            return\n        for i in range(1, len(nums)):\n            j = pick_max(nums[:i])\n            nums[i], nums[j] = nums[j], nums[i]\n        return\n    \n    def merge_sort(nums):\n        '''\n        Merge sort the list of elements.\n        '''\n        if len(nums) <= 1:\n            return\n        mid = len(nums) / 2\n        left_list = nums[:mid]\n        right_list = nums[mid:]\n        merge_sort(left_list)\n        merge_sort(right_list)\n        left_idx, right_idx, merge_idx = 0, 0, 0\n        while left_idx < len(left_list) and right_idx < len(right_list):\n            if left_list[left_idx] <= right_list[right_idx]:\n                nums[merge_idx] = left_list[left_idx]\n                left_idx += 1\n            else:\n                nums[merge_idx] = right_list[right_idx]\n                right_idx += 1\n            merge_idx += 1\n        while left_idx < len(left_list):\n            nums[merge_idx] = left_list[left_idx]\n            left_idx += 1\n            merge_idx += 1\n        while right_idx < len(right_list):\n            nums[merge_idx] = right_list[right_idx]\n            right_idx += 1\n            merge_idx += 1\n        return\n    \n    def quick_sort(nums):\n        '''\n        Quick sort the list of elements.\n        '''\n        if len(nums) <= 1:\n            return\n        left, right = [], []\n        pivot = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < pivot:\n                left.append(nums[i])\n            else:\n                right.append(nums[i])\n        left = quick_sort(left)\n        right = quick_sort(right)\n        return left + [pivot] + right\n    \n    def bubble_sort(nums):\n        '''\n        Bubble sort the list of elements.\n        '''\n        if len(nums) == 1:\n            return\n        for i in range(len(nums)):\n            for j in range(len(nums)-i-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return\n    \n    def selection_sort(nums):\n        '''\n        Selection sort the list of elements.\n        '''\n        if len(nums) == 1:\n            return\n        for i in range(len(nums)):\n            min_idx = i\n            for j in range(i, len(nums)):\n                if nums[j] < nums[min_idx]:\n                    min_idx = j\n            nums[i], nums[min_idx] = nums[min_idx], nums[i]\n        return\n    \n    def insertion_sort_asc(nums):\n        '''\n        Insertion sort the list of elements.\n        '''\n        if len(nums) == 1:\n            return\n        for i in range(1, len(nums)):\n            j = i\n            while j > 0 and nums[j] < nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n                j -= 1\n        return\n    \n    def insertion_sort_desc(nums):\n        '''\n        Insertion sort the list of elements.\n        '''\n        if len(nums) == 1:\n            return\n        for i in range(1, len(nums)):\n            j = i\n            while j > 0 and nums[j] > nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n                j -= 1\n        return\n    \n    def shell_sort(nums):\n        '''\n        Shell sort the list of elements.\n        '''\n        if len(nums) == 1:\n            return\n        size = len(nums) / 2\n        while size >= 1:\n            for i in range(size, len(nums)):\n                j = i\n                while j >= size and nums[j] < nums[j-size]:\n                    nums[j], nums[j-size] = nums[j-size], nums[j]\n                    j -= size\n            size /= 2\n        return\n    \n    def heap_sort(nums):\n        '''\n        Heap sort the list of elements.\n        '''\n        def sift_down(nums, start, end):\n            root = start\n            while True:\n                child = root * 2 + 1\n                if child > end:\n                    break\n                if child + 1 <= end and nums[child] < nums[child + 1]:\n                    child += 1\n                if nums[root] >= nums[child]:\n                    break\n                nums[root], nums[child] = nums[child], nums[root]\n                root = child\n            return\n        def build_heap(nums, end):\n            for i in range(end/2, -1, -1):\n                sift_down(nums, i, end)\n            return\n        def heap_sort_desc(nums):\n            end = len(nums)\n            build_heap(nums, end)\n            for i in range(end-1, 0, -1):\n                nums[i], nums[0] = nums[0], nums[i]\n                end -= 1\n                sift_down(nums, 0, end)\n            return\n        def heap_sort_asc(nums):\n            end = len(nums)\n            build_heap(nums, end)\n            for i in range(end-1, 0, -1):\n                nums[i], nums[0] = nums[0], nums[i]\n                end -= 1\n                sift_down(nums, 0, end)\n            return\n        if len(nums) == 1:\n            return\n        build_heap(nums, len(nums))\n        heap_sort_desc(nums)\n        return\n    \n    def merge_sort(nums):\n        '''\n        Merge sort the list of elements.\n        '''\n        if len(nums) == 1:\n            return\n        mid = len(nums) / 2\n        left_list = nums[:mid]\n        right_list = nums[mid:]\n        merge_sort(left_list)\n        merge_sort(right_list)\n        left_idx, right_idx, merge_idx = 0, 0, 0\n        while left_idx < len(left_list) and right_idx < len(right_list):\n            if left_list[left_idx] <= right_list[right_idx]:\n                nums[merge_idx] = left_list[left_idx]\n                left_idx += 1\n            else:\n                nums[merge_idx] = right_list[right_idx]\n                right_idx += 1\n            merge_idx += 1\n        while left_idx < len(left_list):\n            nums[merge_idx] = left_list[left_idx",
        "num_ids": 246
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a=list(set(range(1,n+1))-set([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,924,1001]))\n    b=list(set(range(1,n+1))-set([1,2,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,924,1001]))\n    dif=set(a)^set(b)\n    return(list(dif))\ndef Prime_Factors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Prime_Factors_2(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef factors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef factors_2(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_3(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_4(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_5(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_6(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_7(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef factors_8(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef factors_9(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_10(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_11(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_12(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_13(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_14(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_15(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_16(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_17(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_18(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_19(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_20(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_21(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list1.append(i)\n    return(list1)\ndef Factors_22(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    list1=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            list",
        "num_ids": 32
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Function to check if a number can be represented as a difference of two squares or not.\n    if n>=0:\n        for i in range(1,n+1):\n            if i**2 - i**2 == n:\n                print('Yes, n =',n)\n                break\n            if i**2 - i**2!= n:\n                print('No, n =',n)\n                break\n    elif n<0:\n        n = n * -1\n        for i in range(1,n+1):\n            if i**2 - i**2 == n:\n                print('Yes, n =',n)\n                break\n            if i**2 - i**2!= n:\n                print('No, n =',n)\n                break\n    else:\n        print('No, n =',n)\n",
        "num_ids": 198
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(1,n):\n        a=i*i\n        b=n-a\n        if a+b==n:\n            print(\"Yes\")\n            break\n    else:\n        print(\"No\")\n    \ndef sum_n_Squares(n):\n    '''\n    Write a python function to calculate the sum of the first n numbers, where n can be a variable.\n    '''\n    \n    s=0\n    for i in range(1,n+1):\n        s+=i*i\n    print(s)\n    \ndef sum_of_Squares(n):\n    '''\n    Write a python function to calculate the sum of the first n numbers, where n can be a variable.\n    '''\n    \n    s=0\n    for i in range(1,n+1):\n        s+=i\n    print(s)\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of the given number n.\n    '''\n    \n    s=1\n    for i in range(1,n+1):\n        s*=i\n    print(s)\n    \ndef factorial_Recursive(n):\n    '''\n    Write a python function to calculate the factorial of the given number n using recursion\n    '''\n    \n    if n==1:\n        return 1\n    else:\n        return n*factorial_Recursive(n-1)\n        \ndef count_words(s,d):\n    '''\n    Write a python function to count the occurrences of each word in a sentence s.\n    '''\n    \n    s_dict={}\n    \n    for word in d.split():\n        if word in s_dict:\n            s_dict[word]+=1\n        else:\n            s_dict[word]=1\n    \n    print(s_dict)\n    \ndef char_hist(s):\n    '''\n    Write a python function to count the occurrences of each character in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(s_dict)\n    \ndef unique_chars(s):\n    '''\n    Write a python function to calculate the number of unique characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict))\n    \ndef unique_words(s):\n    '''\n    Write a python function to calculate the number of unique words in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if word in s_dict:\n            s_dict[word]+=1\n        else:\n            s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef anagrams(s):\n    '''\n    Write a python function to calculate the number of anagrams in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if word==''.join(sorted(word)):\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef palindromes(s):\n    '''\n    Write a python function to calculate the number of palindromes in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if word==''.join(sorted(word)):\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef palindromes_List(s):\n    '''\n    Write a python function to calculate the number of palindromes in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if word==''.join(sorted(word)):\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef count_occurrences(s,d):\n    '''\n    Write a python function to count the occurrences of each letter in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    for c in d:\n        if c in s_dict:\n            print(c,s_dict[c])\n        else:\n            print(\"0\")\n            \ndef single_char(s):\n    '''\n    Write a python function to calculate the number of words with single characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if len(word)==1:\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef single_char_List(s):\n    '''\n    Write a python function to calculate the number of words with single characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for word in s.split():\n        if len(word)==1:\n            if word in s_dict:\n                s_dict[word]+=1\n            else:\n                s_dict[word]=1\n    \n    print(len(s_dict))\n    \ndef non_repeated_characters(s):\n    '''\n    Write a python function to calculate the number of non-repeated characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict))\n    \ndef non_repeated_characters_List(s):\n    '''\n    Write a python function to calculate the number of non-repeated characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict))\n    \ndef repeated_characters(s):\n    '''\n    Write a python function to calculate the number of repeated characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict)-len(s_dict))\n    \ndef repeated_characters_List(s):\n    '''\n    Write a python function to calculate the number of repeated characters in a given string s.\n    '''\n    \n    s_dict={}\n    \n    for c in s:\n        if c in s_dict:\n            s_dict[c]+=1\n        else:\n            s_dict[c]=1\n    \n    print(len(s_dict)-len(s_dict))\n    \ndef all_capital(s):\n    '''\n    Write a python function to check whether a given string s has all characters in upper case or not.\n    '''\n    \n    for c in s:\n        if c.isupper()==False:\n            return False\n    \n    return True\n    \ndef all_capital_List(s):\n    '''\n    Write a python function to check whether a given string s has all characters in upper case or not.\n    '''\n    \n    for c in s:\n        i",
        "num_ids": 13
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return ((n/4)**2) == n\n",
        "num_ids": 15
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    import math\n    from itertools import permutations\n    \n    def all_subsets(s): \n        return [set(s) for i in xrange(len(s)+1)]\n    \n    s = set()\n    \n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            s.add(i**2 - j**2)\n    \n    #print s\n    \n    l = all_subsets(s)\n    #print l\n    \n    for i in range(1,len(l)):\n        if abs(l[i-1]-l[i]) == abs(n):\n            print abs(l[i-1]-l[i]),abs(l[i-1]+l[i])\n            break\n    \n    #print abs(l[i-1]-l[i]),abs(l[i-1]+l[i])\n    \ndif_Square(27)",
        "num_ids": 230
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 2:\n        return True\n    if n % 2 == 0:\n        return False\n    k = int(sqrt(n))\n    for i in range(k, 1, -1):\n        if n - i**2 == i**2:\n            return True\n        elif n - i**2 > i**2:\n            return False\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    l=list(str(n))\n    l.sort()\n    if(l[0]=='0'):\n        return False\n    if(l[1]=='1'):\n        a=n-int(l[0])**2\n        b=int(l[0])**2\n        return a==b\n    for i in range(2,len(l)):\n        if(l[i]=='0'):\n            break\n        if(l[i-1]==l[i]):\n            a=n-int(l[i-1])**2\n            b=int(l[i-1])**2\n            return a==b\n    return False\n",
        "num_ids": 166
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def diff(n):\n        for i in xrange(1, n+1):\n            if i*i > n:\n                break\n            for j in xrange(1, n+1):\n                if (i*i) - j*j == n:\n                    return True\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    squares = []\n    \n    for i in range(1,n+1):\n        squares.append(i*i)\n    \n    for s1 in squares:\n        for s2 in squares:\n            if (s1 - s2) == n:\n                return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 2:\n        return True\n    else:\n        sqrt = n ** 0.5\n        sqrt2 = sqrt + 1\n        if sqrt2 ** 2 == n:\n            return True\n        else:\n            return False\n",
        "num_ids": 60
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns == None or len(patterns) == 0:\n        return True\n    \n    for i in range(len(colors)):\n        if len(patterns[i])!= len(colors[i]):\n            return False\n        \n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n        \n    return True\n    \ndef check_sequence(colors, pattern):\n    '''\n    Check whether the sequence of colors is in accordance with the sequence given in the pattern array.\n    '''\n    if colors == None:\n        return True\n        \n    if len(colors)!= len(pattern):\n        return False\n        \n    for i in range(len(colors)):\n        if len(pattern[i])!= len(colors[i]):\n            return False\n            \n    for i in range(len(pattern)):\n        if pattern[i]!= colors[i]:\n            return False\n            \n    return True\n",
        "num_ids": 107
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if patterns[i]==1 and patterns[i+1]==2 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==1 and patterns[i+1]==3 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==2 and patterns[i+1]==1 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==2 and patterns[i+1]==3 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==3 and patterns[i+1]==1 and colors[i]==colors[i+1]:\n            return False\n        elif patterns[i]==3 and patterns[i+1]==2 and colors[i]==colors[i+1]:\n            return False\n    return True\n",
        "num_ids": 235
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        pattern = ''\n        for i in patterns:\n            pattern += i\n        if pattern not in colors:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    hash_table = {}\n    result = []\n",
        "num_ids": 14
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color, pattern in zip(colors, patterns):\n        if pattern == 'r':\n            if color!= 'r':\n                return False\n        elif pattern == 'b':\n            if color!= 'b':\n                return False\n        elif pattern == 'g':\n            if color!= 'g':\n                return False\n    return True\n",
        "num_ids": 85
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    stack = []\n    for color in colors:\n        if len(stack) == 0:\n            stack.append(color)\n        else:\n            if stack[len(stack)-1] == pattern[0]:\n                stack.append(color)\n            else:\n                return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not patterns or not colors or len(colors)!= len(patterns):\n        return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    length = len(colors)\n    i = 0\n    while i < length-1:\n        if colors[i] == patterns[0] and colors[i+1] == patterns[1]:\n            if i+2 < length:\n                if colors[i+2] == patterns[2] and i+3 < length:\n                    if colors[i+3] == patterns[3] and i+4 < length:\n                        if colors[i+4] == patterns[4] and i+5 < length:\n                            if colors[i+5] == patterns[5]:\n                                return True\n        i+=1\n    return False\n",
        "num_ids": 150
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_lookup = {}\n    for i in range(len(patterns)):\n        color = patterns[i]\n        if color in patterns_lookup:\n            if patterns_lookup[color]!= patterns[i + 1]:\n                return False\n        else:\n            patterns_lookup[color] = patterns[i + 1]\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all(x[i]%K==0 for i in range(len(x))), test_list))\n",
        "num_ids": 36
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [ t for t in test_list if all(e % K == 0 for e in t)]\n",
        "num_ids": 26
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        for i in range(len(t)):\n            if t[i] % K!= 0:\n                break\n        else:\n            result.append(t)\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) == 0:\n        return []\n    if len(test_list) == 1:\n        return [test_list[0]] if test_list[0][1] % K == 0 else []\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def find_divisible(test_list, K):\n        result = []\n        for tuple_item in test_list:\n            if tuple_item[0] % K == 0 and tuple_item[1] % K == 0:\n                result.append(tuple_item)\n        return result\n",
        "num_ids": 72
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_tuple_list = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            div_tuple_list.append(i)\n    return div_tuple_list\n",
        "num_ids": 64
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible = lambda x: reduce(lambda s, i: s and x[i] % i == 0, x, True)\n    return filter(lambda x: divisible(x), test_list)\n",
        "num_ids": 49
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) <= 1:\n        return test_list\n    if len(test_list) == K:\n        return test_list\n    a = 0\n    b = K-1\n    while a == b:\n        if test_list[a][b]%K == 0:\n            a += 1\n        else:\n            b -= 1\n    return test_list[:a] + test_list[a+1:] + [test_list[a]] + [test_list[b]]\n",
        "num_ids": 122
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a,b) for a,b in test_list if b%K == 0]\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11) == 0\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    return l%2 == 1\n",
        "num_ids": 18
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return True\n    else:\n        return False\n    ",
        "num_ids": 28
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 0\n    \ndef get_even_char(s): \n    '''\n    Write a python function to get the characters at even index in the word passed as argument.\n    '''\n    char_list = []\n    for i in range(len(s)):\n        if i%2 == 0:\n            char_list.append(s[i])\n    return char_list\n    \ndef get_odd_char(s): \n    '''\n    Write a python function to get the characters at odd index in the word passed as argument.\n    '''\n    char_list = []\n    for i in range(len(s)):\n        if i%2!= 0:\n            char_list.append(s[i])\n    return char_list\n    \ndef string_reverser(s): \n    '''\n    Write a python function to reverse the characters of the passed string.\n    '''\n    rev = ''\n    for i in range(len(s)):\n        rev += s[len(s)-i-1]\n    return rev\n    \ndef super_reverse(s): \n    '''\n    Write a python function to reverse the characters of the passed string and print it to the screen.\n    '''\n    rev = ''\n    for i in range(len(s)):\n        rev += s[len(s)-i-1]\n    print(rev)\n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check whether the word passed is a palindrome or not.\n    '''\n    rev = ''\n    for i in range(len(s)):\n        rev += s[len(s)-i-1]\n    if s == rev:\n        return True\n    else:\n        return False\n    \ndef palindrome_permutation(s): \n    '''\n    Write a python function to check whether the word passed is a palindrome or not. \n    In case of a palindrome, it also checks whether the letters in the word is permutated or not.\n    '''\n    perm = 0\n    dic = {}\n    for i in range(len(s)):\n        if s[i] in dic:\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n    for i in dic:\n        if dic[i]%2!= 0:\n            perm += 1\n    if perm > 1:\n        return False\n    else:\n        return True\n    \ndef is_permutation(s1,s2):\n    '''\n    Write a python function to check whether the two strings are permutations of each other or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    dic = {}\n    for i in s1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in s2:\n        if i in dic:\n            dic[i] -= 1\n        else:\n            dic[i] = 1\n    for i in dic:\n        if dic[i]!= 0:\n            return False\n    return True\n    \ndef is_anagram(s1,s2): \n    '''\n    Write a python function to check whether the two strings are anagrams of each other or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    dic = {}\n    for i in s1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in s2:\n        if i in dic:\n            dic[i] -= 1\n        else:\n            dic[i] = 1\n    for i in dic:\n        if dic[i]!= 0:\n            return False\n    return True\n    \ndef is_anagram_2(s1,s2): \n    '''\n    Write a python function to check whether the two strings are anagrams of each other or not. \n    This function does not use additional data structures.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            return False\n    return True\n    \ndef is_anagram_3(s1,s2): \n    '''\n    Write a python function to check whether the two strings are anagrams of each other or not. \n    This function does not use additional data structures.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in range(len(s1)):\n        s1_count = 0\n        s2_count = 0\n        for j in range(len(s1)):\n            if s1[i] == s1[j]:\n                s1_count += 1\n            if s2[i] == s2[j]:\n                s2_count += 1\n        if s1_count!= s2_count:\n            return False\n    return True\n    \ndef is_anagram_4(s1,s2): \n    '''\n    Write a python function to check whether the two strings are anagrams of each other or not. \n    This function does not use additional data structures.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for i in s1:\n        if i in s1_dict:\n            s1_dict[i] += 1\n        else:\n            s1_dict[i] = 1\n    for i in s2:\n        if i in s2_dict:\n            s2_dict[i] += 1\n        else:\n            s2_dict[i] = 1\n    for i in s1_dict:\n        if s1_dict[i]!= s2_dict[i]:\n            return False\n    return True\n    \ndef is_anagram_5(s1,s2): \n    '''\n    Write a python function to check whether the two strings are anagrams of each other or not. \n    This function does not use additional data structures.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for i in s1:\n        if i in s1_dict:\n            s1_dict[i] += 1\n        else:\n            s1_dict[i] = 1\n    for i in s2:\n        if i in s2_dict:\n            s2_dict[i] += 1\n        else:\n            s2_dict[i] = 1\n    if s1_dict == s2_dict:\n        return True\n    else:\n        return False\n    \ndef is_anagram_6(s1,s2): \n    '''\n    Write a python function to check whether the two strings are anagrams of each other or not. \n    This function does not use additional data structures.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for i in s1:\n        if i in s1_dict:\n            s1_dict[i] += 1\n        else:\n            s1_dict[i] = 1\n    for i in s2:\n        if i in s2_dict:\n            s2_dict[i] += 1\n        else:\n            s2_dict[i] = 1\n    if s1_dict == s2_dict:\n        return True\n    else:\n        return False\n    \ndef is_anagram_7(s1,s2): \n    '''\n    Write a python function to check whether the two strings are anagrams of each other or not. \n    This function does not use additional data structures.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for i in s1:\n        if i in s1_dict:\n            s1_dict[i] += 1\n        else:\n            s1_dict[i] = 1\n    fo",
        "num_ids": 82
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return 'Yes'\n    else: \n        return 'No'\n    ",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 30
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0: \n        print(\"Even\")\n    else: \n        print(\"Odd\")\n        \ndef sort_char(s): \n    '''\n    Write a python function to sort the characters of the word in alphabetical order. \n    '''\n    s = sorted(s)\n    return ''.join(s)\n",
        "num_ids": 19
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    T = [[0 for j in range(n+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        T[i][0] = 1\n        T[i][i] = 1\n",
        "num_ids": 59
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**3\n",
        "num_ids": 8
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 24)\n",
        "num_ids": 33
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3)\n",
        "num_ids": 22
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 12\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 20\n    elif n == 9:\n        return 21\n    elif n == 10:\n        return 22\n    elif n == 11:\n        return 35\n    elif n == 12:\n        return 35\n    elif n == 13:\n        return 40\n    elif n == 14:\n        return 42\n    elif n == 15:\n        return 45\n    elif n == 16:\n        return 60\n    elif n == 17:\n        return 65\n    elif n == 18:\n        return 70\n    elif n == 19:\n        return 77\n    elif n == 20:\n        return 80\n    elif n == 21:\n        return 84\n    elif n == 22:\n        return 90\n    elif n == 23:\n        return 100\n    elif n == 24:\n        return 120\n    elif n == 25:\n        return 125\n    elif n == 26:\n        return 130\n    elif n == 27:\n        return 143\n    elif n == 28:\n        return 155\n    elif n == 29:\n        return 160\n    elif n == 30:\n        return 168\n    elif n == 31:\n        return 175\n    elif n == 32:\n        return 182\n    elif n == 33:\n        return 195\n    elif n == 34:\n        return 210\n    elif n == 35:\n        return 224\n    elif n == 36:\n        return 225\n    elif n == 37:\n        return 230\n    elif n == 38:\n        return 240\n    elif n == 39:\n        return 243\n    elif n == 40:\n        return 256\n    elif n == 41:\n        return 258\n    elif n == 42:\n        return 270\n    elif n == 43:\n        return 273\n    elif n == 44:\n        return 276\n    elif n == 45:\n        return 280\n    elif n == 46:\n        return 284\n    elif n == 47:\n        return 288\n    elif n == 48:\n        return 289\n    elif n == 49:\n        return 294\n    elif n == 50:\n        return 295\n    elif n == 51:\n        return 297\n    elif n == 52:\n        return 300\n    elif n == 53:\n        return 304\n    elif n == 54:\n        return 305\n    elif n == 55:\n        return 306\n    elif n == 56:\n        return 309\n    elif n == 57:\n        return 315\n    elif n == 58:\n        return 320\n    elif n == 59:\n        return 324\n    elif n == 60:\n        return 325\n    elif n == 61:\n        return 326\n    elif n == 62:\n        return 327\n    elif n == 63:\n        return 330\n    elif n == 64:\n        return 339\n    elif n == 65:\n        return 354\n    elif n == 66:\n        return 361\n    elif n == 67:\n        return 367\n    elif n == 68:\n        return 372\n    elif n == 69:\n        return 378\n    elif n == 70:\n        return 385\n    elif n == 71:\n        return 390\n    elif n == 72:\n        return 396\n    elif n == 73:\n        return 399\n    elif n == 74:\n        return 404\n    elif n == 75:\n        return 405\n    elif n == 76:\n        return 408\n    elif n == 77:\n        return 421\n    elif n == 78:\n        return 428\n    elif n == 79:\n        return 433\n    elif n == 80:\n        return 435\n    elif n == 81:\n        return 439\n    elif n == 82:\n        return 444\n    elif n == 83:\n        return 451\n    elif n == 84:\n        return 456\n    elif n == 85:\n        return 459\n    elif n == 86:\n        return 464\n    elif n == 87:\n        return 467\n    elif n == 88:\n        return 472\n    elif n == 89:\n        return 476\n    elif n == 90:\n        return 481\n    elif n == 91:\n        return 486\n    elif n == 92:\n        return 492\n    elif n == 93:\n        return 497\n    elif n == 94:\n        return 504\n    elif n == 95:\n        return 511\n    elif n == 96:\n        return 518\n    elif n == 97:\n        return 525\n    elif n == 98:\n        return 531\n    elif n == 99:\n        return 537\n    elif n == 100:\n        return 543\n    elif n == 101:\n        return 550\n    elif n == 102:\n        return 557\n    elif n == 103:\n        return 563\n    elif n == 104:\n        return 570\n    elif n == 105:\n        return 578\n    elif n == 106:\n        return 585\n    elif n == 107:\n        return 592\n    elif n == 108:\n        return 599\n    elif n == 109:\n        return 605\n    elif n == 110:\n        return 610\n    elif n == 111:\n        return 614\n    elif n == 112:\n        return 621\n    elif n == 113:\n        return 627\n    elif n == 114:\n        return 633\n    elif n == 115:\n        return 639\n    elif n == 116:\n        return 644\n    elif n == 117:\n        return 651\n    elif n == 118:\n        return 658\n    elif n == 119:\n        return 666\n    elif n == 120:\n        return 673\n    elif n == 121:\n        return 679\n    elif n == 122:\n        return 684\n    elif n == 123:\n        return 691\n    elif n == 124:\n        return 697\n    elif n == 125:\n        return 703\n    elif n == 126:\n        return 710\n    elif n == 127:\n        return 715\n    elif n == 128:\n        return 720\n    elif n == 129:\n        return 727\n    elif n == 130:\n        return 733\n    elif n == 131:\n        return 739\n    elif n == 132:\n        return 745\n    elif n == 133:\n        return 752\n    elif n == 134:\n        return 759\n    elif n == 135:\n        return 765\n    elif n == 136:\n        return 772\n    elif n == 137:\n        return 779\n    elif n == 138:\n        return 786\n    elif n == 139:\n        return 793\n    elif n == 140:\n        return 800\n    elif n == 141:\n        return 807\n    elif n == 142:\n        return 814\n    elif n == 143:\n        return 821\n    elif n == 144:\n        return 828\n    elif n == 145:\n        return 835\n    elif n == 146:\n        return 840\n    elif n == 147:\n        return 847\n    elif n == 148:\n        return 853\n    elif n == 149:\n        return 860\n    elif n == 150:\n        return 867\n    elif n == 151:\n        return 874\n    elif n == 152:\n        return 881\n    elif n == 153:\n        return 888\n    elif n == 154:\n        return 895\n    elif n == 155:\n        return 902\n    elif n == 156:\n        return 909\n    elif n == 157:\n        return 916\n    elif n == 158:\n        return 923\n    elif n == 159:\n        return 930\n    elif n == 160:\n        return 937\n    elif n == 161:\n        return 94",
        "num_ids": 2015
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    \n    for i in range(1, n+1):\n        result = result + i**3\n",
        "num_ids": 31
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n + 1) * (n + 3) * (n + 1) / 6\n",
        "num_ids": 24
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n    # store the initial number of tetrahedral numbers\n    num = 0\n    # the nth tetrahedral number is the nth number of tetrahedral numbers\n    # the nth tetrahedral number is the sum of the nth numbers of tetrahedral\n    # numbers and the nth power of 2\n    for i in xrange(1,n+1):\n        num += i\n        num += (i**2)\n    return num\n",
        "num_ids": 112
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    \n    nums = [0,1,4,7]\n    result = nums[n-1]\n    for i in range(4,n+1):\n        result += sum(nums)\n        nums.append(result)\n",
        "num_ids": 104
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1))*(n+2) / 6)\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4*math.pi)/3*(r*r*r)\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n",
        "num_ids": 17
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*(r**3.0)\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=float(r)\n    return (4*math.pi*(r**3)/3.0)\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    r=float(r)\n    return (r**3)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r=float(r)\n    h=float(h)\n    return (math.pi*(r**2)*h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    return (math.pi*(r**2)*h/3.0)\ndef volume_sphere_from_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a sphere from the volume of a triangle.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2.0\n    return (4*(s*(s-a)*(s-b)*(s-c))**(1/2))\ndef volume_sphere_from_cube(a):\n    '''\n    Write a function to find the volume of a sphere from the volume of a cube.\n    '''\n    a=float(a)\n    return (4*(a**3)/3.0)\ndef volume_sphere_from_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere from the volume of a cylinder.\n    '''\n    r=float(r)\n    h=float(h)\n    return (math.pi*(r**2)*h)\ndef volume_sphere_from_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere from the volume of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    return (math.pi*(r**2)*h/3.0)\ndef volume_sphere_from_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a sphere from the volume of a pyramid.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    p=(a+b+c)/2.0\n    return (4*p*(p-a)*(p-b)*(p-c))**(1/2)\ndef volume_sphere_from_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a sphere from the volume of a triangle.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2.0\n    return (4*(s*(s-a)*(s-b)*(s-c))**(1/2))\ndef volume_sphere_from_hexagon(a):\n    '''\n    Write a function to find the volume of a sphere from the volume of a hexagon.\n    '''\n    a=float(a)\n    return (math.sqrt(3)*a**2)/2.0\ndef volume_sphere_from_octagon(a):\n    '''\n    Write a function to find the volume of a sphere from the volume of an octagon.\n    '''\n    a=float(a)\n    return (2*a**2)/2.0\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r=float(r)\n    return (4*math.pi*(r**2))\ndef area_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    r=float(r)\n    return (6*(r**2))\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r=float(r)\n    h=float(h)\n    return (2*math.pi*(r**2)+2*(r*h))\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    return (math.pi*(r**2)*h)\ndef area_sphere_from_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a sphere from the surface area of a triangle.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2.0\n    return (2*(s*(s-a)*(s-b)*(s-c)))**(1/2)\ndef area_sphere_from_hexagon(a):\n    '''\n    Write a function to find the surface area of a sphere from the surface area of a hexagon.\n    '''\n    a=float(a)\n    return (2*math.sqrt(3)*a**2)/2.0\ndef area_sphere_from_octagon(a):\n    '''\n    Write a function to find the surface area of a sphere from the surface area of an octagon.\n    '''\n    a=float(a)\n    return (2*a**2)/2.0\ndef area_sphere_from_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a sphere from the surface area of a pyramid.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    p=(a+b+c)/2.0\n    return (2*(p*(p-a)*(p-b)*(p-c))**(1/2))\ndef area_sphere_from_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a sphere from the surface area of a triangle.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2.0\n    return (2*(s*(s-a)*(s-b)*(s-c)))**(1/2)\ndef area_sphere_from_hexagon(a):\n    '''\n    Write a function to find the surface area of a sphere from the surface area of a hexagon.\n    '''\n    a=float(a)\n    return (math.sqrt(3)*a**2)/2.0\ndef area_sphere_from_octagon(a):\n    '''\n    Write a function to find the surface area of a sphere from the surface area of an octagon.\n    '''\n    a=float(a)\n    return (2*a**2)/2.0\ndef area_cube_from_sphere(r):\n    '''\n    Write a function to find the surface area of a cube from the surface area of a sphere.\n    '''\n    r=float(r)\n    return (6*(r**2))\ndef area_cube_from_cube(r):\n    '''\n    Write a function to find the surface area of a cube from the surface area of a cube.\n    '''\n    r=float(r)\n    return (12*(r**2))\ndef area_cube_from_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cube from the surface area of a cylinder.\n    '''\n    r=float(r)\n    h=float(h)\n    return (2*math.pi*(r**2)+2*h*(r))\ndef area_cube_from_cone(r,h):\n    '''\n    Write a function to find the surface area of a cube from the surface area of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    return (math.pi*(r**2)*h)\ndef area_cube_fro",
        "num_ids": 40
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0) * math.pi * (r**3)\n    return v\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a = 4 * math.pi * (r**2)\n    return a\ndef speed_of_sound(m, r):\n    '''\n    Write a function to calculate the speed of sound in a medium.\n    '''\n    v = math.sqrt(m/r)\n    return v\ndef speed_of_sound_two(m, r, t):\n    '''\n    Write a function to calculate the speed of sound in a medium.\n    '''\n    v = math.sqrt(m/r)\n    return v\ndef speed_of_sound_three(m, r, t):\n    '''\n    Write a function to calculate the speed of sound in a medium.\n    '''\n    v = math.sqrt(m/r)\n    return v\ndef speed_of_sound_four(m, r, t):\n    '''\n    Write a function to calculate the speed of sound in a medium.\n    '''\n    v = math.sqrt(m/r)\n    return v\ndef speed_of_sound_five(m, r, t):\n    '''\n    Write a function to calculate the speed of sound in a medium.\n    '''\n    v = math.sqrt(m/r)\n    return v\ndef temperature_Kelvin(c):\n    '''\n    Write a function to calculate the temperature of a gas in Kelvin.\n    '''\n    t = (c + 273.15)\n    return t\ndef temperature_Kelvin_two(c):\n    '''\n    Write a function to calculate the temperature of a gas in Kelvin.\n    '''\n    t = (c + 273.15)\n    return t\ndef temperature_Kelvin_three(c):\n    '''\n    Write a function to calculate the temperature of a gas in Kelvin.\n    '''\n    t = (c + 273.15)\n    return t\ndef temperature_Kelvin_four(c):\n    '''\n    Write a function to calculate the temperature of a gas in Kelvin.\n    '''\n    t = (c + 273.15)\n    return t\ndef temperature_Kelvin_five(c):\n    '''\n    Write a function to calculate the temperature of a gas in Kelvin.\n    '''\n    t = (c + 273.15)\n    return t\ndef temperature_Celsius(k):\n    '''\n    Write a function to calculate the temperature of a gas in Celsius.\n    '''\n    t = (k - 273.15)\n    return t\ndef temperature_Celsius_two(k):\n    '''\n    Write a function to calculate the temperature of a gas in Celsius.\n    '''\n    t = (k - 273.15)\n    return t\ndef temperature_Celsius_three(k):\n    '''\n    Write a function to calculate the temperature of a gas in Celsius.\n    '''\n    t = (k - 273.15)\n    return t\ndef temperature_Celsius_four(k):\n    '''\n    Write a function to calculate the temperature of a gas in Celsius.\n    '''\n    t = (k - 273.15)\n    return t\ndef temperature_Celsius_five(k):\n    '''\n    Write a function to calculate the temperature of a gas in Celsius.\n    '''\n    t = (k - 273.15)\n    return t\ndef energy_density_Joule_per_kilogram(m):\n    '''\n    Write a function to calculate the energy density of a gas in Joule per kilogram.\n    '''\n    e = m * (1.6 * (10**-19))\n    return e\ndef energy_density_Joule_per_kilogram_two(m):\n    '''\n    Write a function to calculate the energy density of a gas in Joule per kilogram.\n    '''\n    e = m * (1.6 * (10**-19))\n    return e\ndef energy_density_Joule_per_kilogram_three(m):\n    '''\n    Write a function to calculate the energy density of a gas in Joule per kilogram.\n    '''\n    e = m * (1.6 * (10**-19))\n    return e\ndef energy_density_Joule_per_kilogram_four(m):\n    '''\n    Write a function to calculate the energy density of a gas in Joule per kilogram.\n    '''\n    e = m * (1.6 * (10**-19))\n    return e\ndef energy_density_Joule_per_kilogram_five(m):\n    '''\n    Write a function to calculate the energy density of a gas in Joule per kilogram.\n    '''\n    e = m * (1.6 * (10**-19))\n    return e\ndef energy_density_kiloJoule(e):\n    '''\n    Write a function to convert energy density from kiloJoule to Joule.\n    '''\n    j = e * 1.0\n    return j\ndef energy_density_kiloJoule_two(e):\n    '''\n    Write a function to convert energy density from kiloJoule to Joule.\n    '''\n    j = e * 1.0\n    return j\ndef energy_density_kiloJoule_three(e):\n    '''\n    Write a function to convert energy density from kiloJoule to Joule.\n    '''\n    j = e * 1.0\n    return j\ndef energy_density_kiloJoule_four(e):\n    '''\n    Write a function to convert energy density from kiloJoule to Joule.\n    '''\n    j = e * 1.0\n    return j\ndef energy_density_kiloJoule_five(e):\n    '''\n    Write a function to convert energy density from kiloJoule to Joule.\n    '''\n    j = e * 1.0\n    return j\ndef energy_density_Joule_per_liter(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Joule per liter.\n    '''\n    j = e / 1000\n    return j\ndef energy_density_Joule_per_liter_two(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Joule per liter.\n    '''\n    j = e / 1000\n    return j\ndef energy_density_Joule_per_liter_three(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Joule per liter.\n    '''\n    j = e / 1000\n    return j\ndef energy_density_Joule_per_liter_four(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Joule per liter.\n    '''\n    j = e / 1000\n    return j\ndef energy_density_Joule_per_liter_five(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Joule per liter.\n    '''\n    j = e / 1000\n    return j\ndef energy_density_Joule_per_liter_six(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Joule per liter.\n    '''\n    j = e / 1000\n    return j\ndef energy_density_Btu_per_gallon(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Btu per gallon.\n    '''\n    j = e / 14.7\n    return j\ndef energy_density_Btu_per_gallon_two(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Btu per gallon.\n    '''\n    j = e / 14.7\n    return j\ndef energy_density_Btu_per_gallon_three(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Btu per gallon.\n    '''\n    j = e / 14.7\n    return j\ndef energy_density_Btu_per_gallon_four(e):\n    '''\n    Write a function to calculate the energy density of a liquid in Btu per gallon.\n    '''\n    j = e ",
        "num_ids": 7
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*(math.pi)*(r**3)\n    \ndef square_difference(x1, x2, y1, y2, z1, z2):\n    '''\n    Write a function to find the square difference between two points in a 3D space.\n    '''\n    return (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    \ndef euclid_distance(x1, x2, y1, y2, z1, z2):\n    '''\n    Write a function to find the euclidean distance between two points in a 3D space.\n    '''\n    return math.sqrt(square_difference(x1, x2, y1, y2, z1, z2))\n    \ndef modulus(x):\n    '''\n    Write a function that returns the modulus of a vector.\n    '''\n    return math.sqrt(x[0]**2 + x[1]**2 + x[2]**2)\n    \ndef minimum_modulus_rectangle(V):\n    '''\n    Write a function to find the minimum modulus rectangle that contains a set of 3D points.\n    '''\n    sorted_x = sorted(V, key=lambda x: x[0])\n    sorted_y = sorted(V, key=lambda x: x[1])\n    sorted_z = sorted(V, key=lambda x: x[2])\n    max_x = sorted_x[-1][0]\n    max_y = sorted_y[-1][1]\n    max_z = sorted_z[-1][2]\n    min_x = sorted_x[0][0]\n    min_y = sorted_y[0][1]\n    min_z = sorted_z[0][2]\n    diag = (max_x - min_x)**2 + (max_y - min_y)**2 + (max_z - min_z)**2\n    return diag\n    \ndef minimum_modulus_rectangle2(V):\n    '''\n    Write a function that returns the minimum modulus rectangle that contains a set of 3D points.\n    '''\n    sorted_x = sorted(V, key=lambda x: x[0])\n    sorted_y = sorted(V, key=lambda x: x[1])\n    sorted_z = sorted(V, key=lambda x: x[2])\n    max_x = sorted_x[-1][0]\n    max_y = sorted_y[-1][1]\n    max_z = sorted_z[-1][2]\n    min_x = sorted_x[0][0]\n    min_y = sorted_y[0][1]\n    min_z = sorted_z[0][2]\n    dx = (max_x - min_x)\n    dy = (max_y - min_y)\n    dz = (max_z - min_z)\n    return dx * dy * dz\n    \ndef is_triangle(V):\n    '''\n    Write a function that checks whether a set of 3D points is an equilateral, right-angled, or obtuse-angled triangle.\n    '''\n    if len(V) < 3:\n        return False\n    sorted_x = sorted(V, key=lambda x: x[0])\n    sorted_y = sorted(V, key=lambda x: x[1])\n    sorted_z = sorted(V, key=lambda x: x[2])\n    a = sorted_x[0]\n    b = sorted_y[0]\n    c = sorted_z[0]\n    x_y_diff = abs(b[0] - a[0])\n    x_z_diff = abs(c[0] - a[0])\n    y_z_diff = abs(b[1] - a[1])\n    if x_y_diff > x_z_diff or x_y_diff < y_z_diff:\n        return False\n    return True\n    \ndef is_triangle2(V):\n    '''\n    Write a function that checks whether a set of 3D points is an equilateral, right-angled, or obtuse-angled triangle.\n    '''\n    if len(V) < 3:\n        return False\n    sorted_x = sorted(V, key=lambda x: x[0])\n    sorted_y = sorted(V, key=lambda x: x[1])\n    sorted_z = sorted(V, key=lambda x: x[2])\n    a = sorted_x[0]\n    b = sorted_y[0]\n    c = sorted_z[0]\n    x_y_diff = abs(b[0] - a[0])\n    x_z_diff = abs(c[0] - a[0])\n    y_z_diff = abs(b[1] - a[1])\n    if x_y_diff > x_z_diff or x_y_diff < y_z_diff:\n        return False\n    return True\n    \ndef is_right_triangle(V):\n    '''\n    Write a function that checks whether a set of 3D points is a right-angled triangle.\n    '''\n    if len(V) < 3:\n        return False\n    sorted_x = sorted(V, key=lambda x: x[0])\n    sorted_y = sorted(V, key=lambda x: x[1])\n    sorted_z = sorted(V, key=lambda x: x[2])\n    a = sorted_x[0]\n    b = sorted_y[0]\n    c = sorted_z[0]\n    x_y_diff = abs(b[0] - a[0])\n    x_z_diff = abs(c[0] - a[0])\n    y_z_diff = abs(b[1] - a[1])\n    if x_y_diff**2 > x_z_diff**2 or x_y_diff**2 < y_z_diff**2:\n        return False\n    return True\n    \ndef is_right_triangle2(V):\n    '''\n    Write a function that checks whether a set of 3D points is a right-angled triangle.\n    '''\n    if len(V) < 3:\n        return False\n    sorted_x = sorted(V, key=lambda x: x[0])\n    sorted_y = sorted(V, key=lambda x: x[1])\n    sorted_z = sorted(V, key=lambda x: x[2])\n    a = sorted_x[0]\n    b = sorted_y[0]\n    c = sorted_z[0]\n    x_y_diff = abs(b[0] - a[0])\n    x_z_diff = abs(c[0] - a[0])\n    y_z_diff = abs(b[1] - a[1])\n    if x_y_diff**2 > x_z_diff**2 or x_y_diff**2 < y_z_diff**2:\n        return False\n    return True\n    \ndef is_rectangle(V):\n    '''\n    Write a function that checks whether a set of 3D points is a rectangle.\n    '''\n    if len(V) < 4:\n        return False\n    sorted_x = sorted(V, key=lambda x: x[0])\n    sorted_y = sorted(V, key=lambda x: x[1])\n    sorted_z = sorted(V, key=lambda x: x[2])\n    a = sorted_x[0]\n    b = sorted_y[0]\n    c = sorted_z[0]\n    d = sorted_x[-1]\n    e = sorted_y[-1]\n    f = sorted_z[-1]\n    x_y_diff = abs(b[0] - a[0])\n    x_z_diff = abs(c[0] - a[0])\n    y_z_diff = abs(d[1] - e[1])\n    z_z_diff = abs(f[2] - c[2])\n    if x_y_diff**2 > x_z_diff**2 or x_y_diff**2 < y_z_diff**2:\n        return False\n    return True\n    \ndef i",
        "num_ids": 262
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return 4.0/3.0 * math.pi * (r**3)\ndef find_remainder(number, multiple):\n    '''\n    Write a function that will take a number and a multiple, and return the remainder of the number when divided by the multiple.\n    '''\n    number = int(number)\n    multiple = int(multiple)\n    return number % multiple\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return math.pi * (r**2) * h\ndef perimeter_cylinder(r,h):\n    '''\n    Write a function to find the perimeter of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return 2 * (math.pi * r + math.pi * (r**2) + math.pi * (r**2) * h)\ndef perimeter_rectangle(w, l):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return 2 * (w + l)\ndef perimeter_rectangle_2(w, l):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return (w * 2) + (l * 2)\ndef area_rectangle(w, l):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return w * l\ndef area_triangle(w, l):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return (w * l) / 2.0\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    r = float(r)\n    return 4.0 * math.pi * (r**2)\ndef area_sphere_2(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    r = float(r)\n    return 4.0 * math.pi * (r**2)\ndef area_sphere_3(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    r = float(r)\n    return (4.0/3.0) * math.pi * (r**3)\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    return 4.0 * math.pi * (r**2)\ndef surface_area_sphere_2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    return 4.0 * math.pi * (r**2) * 4.0/3.0\ndef surface_area_sphere_3(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    return (4.0/3.0) * math.pi * (r**3) * 2.0\ndef surface_area_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    s = float(s)\n    return 6.0 * s**2\ndef surface_area_cube_2(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    s = float(s)\n    return 6.0 * s**2\ndef surface_area_cube_3(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    s = float(s)\n    return 6.0 * s**2\ndef surface_area_cube_4(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    s = float(s)\n    return s * 6.0\ndef surface_area_cube_5(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    s = float(s)\n    return s * 6.0\ndef surface_area_cube_6(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    s = float(s)\n    return 6.0 * s * (s + math.sqrt(s**2 + s))\ndef surface_area_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return math.pi * (r**2) * 2.0 + 2.0 * math.pi * r * h\ndef surface_area_sphere_cylinder_2(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return math.pi * (r**2) + 2.0 * math.pi * r * h\ndef surface_area_sphere_cylinder_3(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (2.0 * math.pi * r * h) + (math.pi * (r**2))\ndef surface_area_sphere_cylinder_4(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (2.0 * math.pi * r * h) + (math.pi * (r**2))\ndef surface_area_sphere_cylinder_5(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (2.0 * math.pi * r * h) + (math.pi * (r**2))\ndef surface_area_sphere_cylinder_6(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (math.pi * (r**2)) + (2.0 * math.pi * r * h)\ndef surface_area_triangle(w, l):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return w * l\ndef surface_area_triangle_2(w, l):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return (w * l) / 2.0\ndef surface_area_triangle_3(w, l):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return (w * l) / 2.0\ndef surface_area_triangle_4(w, l):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return (w * l) / 2.0\ndef surface_area_rectangle(w, l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    w = float(w)\n    l = float(l)\n    return w * l\ndef surface_area_rectangle_2(w, l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    w = float(w)\n    l = float(",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3.0) * math.pi * r**3\n    return vol\n",
        "num_ids": 25
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return (sum % 26)\n",
        "num_ids": 39
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    t=[]\n    for i in range(len(strr)):\n        t.append(ord(strr[i])%26)\n    return t\ndef check_anagram(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_1(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_2(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_3(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_4(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_5(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_6(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_7(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_8(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_9(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_10(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_11(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_12(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_13(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_14(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_15(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_16(strr1,strr2):\n    '''\n    Write a python function to check if the two given strings are anagrams of each other.\n    '''\n    t1=get_Char(strr1)\n    t2=get_Char(strr2)\n    t3=[]\n    for i in range(len(t1)):\n        t3.append(t1[i]^t2[i])\n    return t3\ndef check_anagram_17(strr1,strr2):\n    '''\n    Write a python function to chec",
        "num_ids": 10
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    if not strr:\n        return 0\n    \n    sum=0\n    for char in strr:\n        sum+=ord(char)\n    \n    return (sum%26)\n",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = list(strr)\n    char_list = [ord(x) for x in char_list]\n    char_list = [x%26 for x in char_list]\n    char_list = [chr(x) for x in char_list]\n    return ''.join(char_list)\n",
        "num_ids": 78
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # to be used for modular\n    MOD = 26\n    \n    def get_value(c):\n        return ord(c) - ord('A')\n    \n    c = list(strr)\n    # if the string is empty\n    if len(c) == 0:\n        return 0\n    \n    return sum(map(get_value, c)) % MOD\n",
        "num_ids": 90
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def add_modulo(strr):\n        if not strr:\n            return 0\n        else:\n            return (ord(strr[0]) + add_modulo(strr[1:])) % 26\n",
        "num_ids": 53
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total=0\n    for i in strr:\n        total=total+ord(i)\n    print(total%26)\n    return total%26\n    \n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result = (result+ord(i))%26\n    return result\n    \ndef decrypt(msg, key):\n    '''\n    Write a python function to decrypt the given string using the key.\n    '''\n    msg = list(msg)\n    for i in range(len(msg)):\n        msg[i] = chr((ord(msg[i])-key)%26 + 65)\n    return ''.join(msg)\n",
        "num_ids": 55
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    from string import ascii_lowercase\n    l = len(strr)\n    for i in range(0, l):\n        if strr[i] not in ascii_lowercase:\n            strr = strr[:i] + strr[i+1:]\n    return strr\n",
        "num_ids": 74
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.replace(\" \", \"\")\n    if not strr:\n        return None\n    else:\n        result = 0\n        for i in range(len(strr)):\n            result = result + (ord(strr[i]) - 96)\n        return chr(result % 26 + 96)\n",
        "num_ids": 77
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    seq = [1]\n    while i < n:\n        if seq[-1] % 2 == 0:\n            seq.append(seq[-1] * 3 + 1)\n        else:\n            seq.append(seq[-1] * 3 + 2)\n        i += 1\n    return seq[-1]\n",
        "num_ids": 83
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # First position in sequence is 1\n    start = 1\n    \n    # List of numbers in newman conway sequence\n    sequence = [1]\n    \n    # Loop until we find nth number\n    while len(sequence) < n:\n        \n        # Add the sum of the previous number in sequence to the next number in sequence\n        next_num = sequence[-1] + len(sequence)\n        \n        # Append the new number to the sequence\n        sequence.append(next_num)\n    \n    # Return the nth number in the sequence\n    return sequence[n-1]\n",
        "num_ids": 142
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum([2**i for i in range(n)])\n",
        "num_ids": 18
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 40
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    prev = 0\n    curr = 1\n    \n    for i in range(2, n+1):\n        prev, curr = curr, (prev + curr) % 15746\n        \n    return curr\n",
        "num_ids": 78
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    conway_sequence = [0]\n    for i in xrange(1,n):\n        conway_sequence.append(conway_sequence[i-1] + 4*i)\n    return conway_sequence[n-1]\n",
        "num_ids": 59
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    mylist = [0]\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            mylist.append(mylist[i-1] + 2*mylist[i-2])\n        else:\n            mylist.append(mylist[i-1] - 2*mylist[i-2])\n    return mylist[n]\n    \nprint(sequence(8))\n",
        "num_ids": 101
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum(range(1, n+1))\n    \ndef sequence2(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum(range(1, n+1)) * n\n",
        "num_ids": 17
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, \n    987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, \n    196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, \n    9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, \n    267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, \n    4807526976, 7778742049, 12586269025, 20365011074, 32951280099, \n    53316291173, 86267571272, 139583862445, 225851433717, 365435296162, \n    591286729879, 956722026041, 1548008755921, 285411311127, 4503599627370, \n    710920647439, 1204452935771, 1932643820343, 3340332049084, 5369769897221, \n    8295917476776, 13530185239028, 2233167283497, 3771633211889, 6104498141451, \n    12140935641452, 225275836202415]\n    return numbers[n]\n",
        "num_ids": 382
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0 * math.pi * math.pow(r,2)\n",
        "num_ids": 22
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    surface_area = 4 * math.pi * r ** 2\n    \n    return surface_area\n",
        "num_ids": 27
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    SA = 4*math.pi*r**2\n    return SA\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4*math.pi*r**2\n    return sa\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # r = 2.0\n    surface_area = 4.0 * math.pi * (r**2.0)\n    return surface_area\n",
        "num_ids": 37
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n + 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n, 2) / 2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n - 1)) // 2\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2*n**2 - 2*n + 1) / 2\n",
        "num_ids": 20
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1.5\n    else:\n        return 1.5 * n * (2 * n - 1) / 2\n",
        "num_ids": 48
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Our pattern starts with the following formula:\n    #    6*n*n - 6*n + 1\n    #\n    # nth_hexagonal(n) = 6n^2 - 6n + 1\n    #\n    # The difference between each number is 6.\n    #\n    # To find the nth number, we subtract 6 from the nth_hexagonal(n) number.\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,1,2) are:\n    #    6*n*n - 6*n + 1\n    #\n    # The first few numbers (n=0,",
        "num_ids": 2016
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n + 1))//2\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) * (2*n + 1)/(4*(n+1))\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(2*n+1)/2)\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    out = {}\n    for x in (dict1,dict2,dict3):\n        out.update(x)\n    return out\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    out = {}\n    out.update(dict1)\n    out.update(dict2)\n    return out\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    out = {}\n    out.update(dict1)\n    out.update(dict2)\n    return out\ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    out = {}\n    out.update(dict1)\n    out.update(dict2)\n    return out\ndef make_dict(list1):\n    '''\n    Write a function to turn a list of lists into a dictionary with the first element of each list being the key and the second element being the value.\n    '''\n    d = {}\n    for l in list1:\n        d[l[0]] = l[1]\n    return d\ndef get_keys(dictionary,start_of_key_name):\n    '''\n    Write a function to return a list of the keys from a dictionary\n    '''\n    keys = []\n    for key in dictionary:\n        if key[0:len(start_of_key_name)] == start_of_key_name:\n            keys.append(key)\n    return keys\ndef get_values(dictionary,start_of_key_name):\n    '''\n    Write a function to return a list of the values from a dictionary\n    '''\n    values = []\n    for key in dictionary:\n        if key[0:len(start_of_key_name)] == start_of_key_name:\n            values.append(dictionary[key])\n    return values\ndef get_key_values(dictionary,start_of_key_name):\n    '''\n    Write a function to return a list of tuples (key,value) from a dictionary\n    '''\n    values = []\n    for key in dictionary:\n        if key[0:len(start_of_key_name)] == start_of_key_name:\n            values.append((key,dictionary[key]))\n    return values\ndef get_key_values_dict(dictionary,start_of_key_name):\n    '''\n    Write a function to return a dictionary with keys as the names of the elements and values as the elements\n    '''\n    d = {}\n    for key in dictionary:\n        if key[0:len(start_of_key_name)] == start_of_key_name:\n            d[key] = dictionary[key]\n    return d\ndef get_key_values_dict_of_tups(dictionary,start_of_key_name):\n    '''\n    Write a function to return a dictionary with keys as the names of the elements and values as the elements\n    '''\n    d = {}\n    for key in dictionary:\n        if key[0:len(start_of_key_name)] == start_of_key_name:\n            d[key] = (key,dictionary[key])\n    return d\ndef find_largest_keys(dictionary,num_of_keys):\n    '''\n    Write a function to return a list of the largest keys in a dictionary\n    '''\n    keys = get_keys(dictionary,start_of_key_name)\n    keys.sort()\n    return keys[len(keys)-num_of_keys:len(keys)]\ndef find_smallest_keys(dictionary,num_of_keys):\n    '''\n    Write a function to return a list of the smallest keys in a dictionary\n    '''\n    keys = get_keys(dictionary,start_of_key_name)\n    keys.sort()\n    return keys[0:num_of_keys]\ndef find_largest_values(dictionary,num_of_values):\n    '''\n    Write a function to return a list of the largest values in a dictionary\n    '''\n    values = get_values(dictionary,start_of_key_name)\n    values.sort()\n    return values[len(values)-num_of_values:len(values)]\ndef find_smallest_values(dictionary,num_of_values):\n    '''\n    Write a function to return a list of the smallest values in a dictionary\n    '''\n    values = get_values(dictionary,start_of_key_name)\n    values.sort()\n    return values[0:num_of_values]\ndef get_unique_keys(dictionary):\n    '''\n    Write a function to return a list of the unique keys in a dictionary\n    '''\n    keys = get_keys(dictionary,start_of_key_name)\n    uniq_keys = []\n    for key in keys:\n        if not key in uniq_keys:\n            uniq_keys.append(key)\n    return uniq_keys\ndef get_unique_values(dictionary):\n    '''\n    Write a function to return a list of the unique values in a dictionary\n    '''\n    values = get_values(dictionary,start_of_key_name)\n    uniq_values = []\n    for value in values:\n        if not value in uniq_values:\n            uniq_values.append(value)\n    return uniq_values\ndef get_unique_values_dict(dictionary):\n    '''\n    Write a function to return a dictionary with keys as the names of the elements and values as the elements\n    '''\n    d = {}\n    uniq_keys = get_unique_keys(dictionary)\n    for key in uniq_keys:\n        d[key] = dictionary[key]\n    return d\ndef get_unique_keys_and_values_dict(dictionary):\n    '''\n    Write a function to return a dictionary with keys as the names of the elements and values as the elements\n    '''\n    d = {}\n    uniq_keys = get_unique_keys(dictionary)\n    uniq_values = get_unique_values(dictionary)\n    for i in range(len(uniq_keys)):\n        d[(uniq_keys[i],uniq_values[i])] = dictionary[(uniq_keys[i],uniq_values[i])]\n    return d\ndef get_smallest_key_names(dictionary,num_of_keys):\n    '''\n    Write a function to return a list of the names of the smallest keys in a dictionary\n    '''\n    keys = get_keys(dictionary,start_of_key_name)\n    keys.sort()\n    return keys[0:num_of_keys]\ndef get_largest_key_names(dictionary,num_of_keys):\n    '''\n    Write a function to return a list of the names of the largest keys in a dictionary\n    '''\n    keys = get_keys(dictionary,start_of_key_name)\n    keys.sort()\n    return keys[len(keys)-num_of_keys:len(keys)]\ndef get_smallest_values(dictionary,num_of_values):\n    '''\n    Write a function to return a list of the smallest values in a dictionary\n    '''\n    values = get_values(dictionary,start_of_key_name)\n    values.sort()\n    return values[0:num_of_values]\ndef get_largest_values(dictionary,num_of_values):\n    '''\n    Write a function to return a list of the largest values in a dictionary\n    '''\n    values = get_values(dictionary,start_of_key_name)\n    values.sort()\n    return values[len(values)-num_of_values:len(values)]\ndef get_unique_key_values(dictionary):\n    '''\n    Write a function to return a list of the unique key-values in a dictionary\n    '''\n    keys = get_keys(dictionary,start_of_key_name)\n    values = get_values(dictionary,start_of_key_name)\n    uniq_keys_and_values = []\n    for i i",
        "num_ids": 56
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict2\n    if not dict2:\n        return dict1\n    if not dict3:\n        return dict1\n    dic_merged = dict1.copy()\n    dic_merged.update(dict2)\n    dic_merged.update(dict3)\n    return dic_merged\n",
        "num_ids": 85
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {**dict1, **dict2, **dict3}\n    return dict4\n",
        "num_ids": 25
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.ChainMap(dict1,dict2, dict3)\n",
        "num_ids": 20
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #dictionary to be merged\n    merged_dict = {}\n    #loop through the first dictionary\n    for key in dict1:\n        #if key in the second dictionary\n        if key in dict2:\n            #add the values to the new dictionary\n            merged_dict[key] = (dict1[key] + dict2[key])\n        #if key not in the second dictionary\n        else:\n            merged_dict[key] = dict1[key]\n    #loop through the second dictionary\n    for key in dict2:\n        #if key not in the first dictionary\n        if key not in dict1:\n            #add the values to the new dictionary\n            merged_dict[key] = dict2[key]\n    #loop through the third dictionary\n    for key in dict3:\n        #if key not in the first dictionary and second dictionary\n        if key not in dict1 and key not in dict2:\n            #add the values to the new dictionary\n            merged_dict[key] = dict3[key]\n    return merged_dict\n",
        "num_ids": 247
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # return dict1.update(dict2).update(dict3)\n    for k,v in dict2.items():\n        if k in dict1:\n            dict1[k].append(v)\n        else:\n            dict1[k]=[v]\n    for k,v in dict3.items():\n        if k in dict1:\n            dict1[k].append(v)\n        else:\n            dict1[k]=[v]\n    return dict1\n",
        "num_ids": 114
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1\n    for key in dict2:\n        if key in dict1:\n            result[key].extend(dict2[key])\n        else:\n            result[key] = dict2[key]\n    for key in dict3:\n        if key in result:\n            result[key].extend(dict3[key])\n        else:\n            result[key] = dict3[key]\n    return result\n",
        "num_ids": 103
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict) or not isinstance(dict2,dict) or not isinstance(dict3,dict):\n        print('argument passed is not a dictionary')\n        return\n    else:\n        dict4 = {}\n        for key in dict1:\n            dict4[key] = dict1[key]\n        for key in dict2:\n            dict4[key] = dict2[key]\n        for key in dict3:\n            dict4[key] = dict3[key]\n        return dict4\ndef merge_dictionaries_four(dict1,dict2, dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict) or not isinstance(dict2,dict) or not isinstance(dict3,dict) or not isinstance(dict4,dict):\n        print('argument passed is not a dictionary')\n        return\n    else:\n        dict5 = {}\n        for key in dict1:\n            dict5[key] = dict1[key]\n        for key in dict2:\n            dict5[key] = dict2[key]\n        for key in dict3:\n            dict5[key] = dict3[key]\n        for key in dict4:\n            dict5[key] = dict4[key]\n        return dict5\ndef merge_dictionaries_five(dict1,dict2, dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict) or not isinstance(dict2,dict) or not isinstance(dict3,dict) or not isinstance(dict4,dict) or not isinstance(dict5,dict):\n        print('argument passed is not a dictionary')\n        return\n    else:\n        dict6 = {}\n        for key in dict1:\n            dict6[key] = dict1[key]\n        for key in dict2:\n            dict6[key] = dict2[key]\n        for key in dict3:\n            dict6[key] = dict3[key]\n        for key in dict4:\n            dict6[key] = dict4[key]\n        for key in dict5:\n            dict6[key] = dict5[key]\n        return dict6\ndef merge_dictionaries_six(dict1,dict2, dict3,dict4,dict5,dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict) or not isinstance(dict2,dict) or not isinstance(dict3,dict) or not isinstance(dict4,dict) or not isinstance(dict5,dict) or not isinstance(dict6,dict):\n        print('argument passed is not a dictionary')\n        return\n    else:\n        dict7 = {}\n        for key in dict1:\n            dict7[key] = dict1[key]\n        for key in dict2:\n            dict7[key] = dict2[key]\n        for key in dict3:\n            dict7[key] = dict3[key]\n        for key in dict4:\n            dict7[key] = dict4[key]\n        for key in dict5:\n            dict7[key] = dict5[key]\n        for key in dict6:\n            dict7[key] = dict6[key]\n        return dict7\ndef merge_dictionaries_seven(dict1,dict2, dict3,dict4,dict5,dict6,dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict) or not isinstance(dict2,dict) or not isinstance(dict3,dict) or not isinstance(dict4,dict) or not isinstance(dict5,dict) or not isinstance(dict6,dict) or not isinstance(dict7,dict):\n        print('argument passed is not a dictionary')\n        return\n    else:\n        dict8 = {}\n        for key in dict1:\n            dict8[key] = dict1[key]\n        for key in dict2:\n            dict8[key] = dict2[key]\n        for key in dict3:\n            dict8[key] = dict3[key]\n        for key in dict4:\n            dict8[key] = dict4[key]\n        for key in dict5:\n            dict8[key] = dict5[key]\n        for key in dict6:\n            dict8[key] = dict6[key]\n        for key in dict7:\n            dict8[key] = dict7[key]\n        return dict8\ndef merge_dictionaries_eight(dict1,dict2, dict3,dict4,dict5,dict6,dict7,dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict) or not isinstance(dict2,dict) or not isinstance(dict3,dict) or not isinstance(dict4,dict) or not isinstance(dict5,dict) or not isinstance(dict6,dict) or not isinstance(dict7,dict) or not isinstance(dict8,dict):\n        print('argument passed is not a dictionary')\n        return\n    else:\n        dict9 = {}\n        for key in dict1:\n            dict9[key] = dict1[key]\n        for key in dict2:\n            dict9[key] = dict2[key]\n        for key in dict3:\n            dict9[key] = dict3[key]\n        for key in dict4:\n            dict9[key] = dict4[key]\n        for key in dict5:\n            dict9[key] = dict5[key]\n        for key in dict6:\n            dict9[key] = dict6[key]\n        for key in dict7:\n            dict9[key] = dict7[key]\n        for key in dict8:\n            dict9[key] = dict8[key]\n        return dict9\ndef merge_dictionaries_nine(dict1,dict2, dict3,dict4,dict5,dict6,dict7,dict8,dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict) or not isinstance(dict2,dict) or not isinstance(dict3,dict) or not isinstance(dict4,dict) or not isinstance(dict5,dict) or not isinstance(dict6,dict) or not isinstance(dict7,dict) or not isinstance(dict8,dict) or not isinstance(dict9,dict):\n        print('argument passed is not a dictionary')\n        return\n    else:\n        dict10 = {}\n        for key in dict1:\n            dict10[key] = dict1[key]\n        for key in dict2:\n            dict10[key] = dict2[key]\n        for key in dict3:\n            dict10[key] = dict3[key]\n        for key in dict4:\n            dict10[key] = dict4[key]\n        for key in dict5:\n            dict10[key] = dict5[key]\n        for key in dict6:\n            dict10[key] = dict6[key]\n        for key in dict7:\n            dict10[key] = dict7[key]\n        for key in dict8:\n            dict10[key] = dict8[key]\n        for key in dict9:\n            dict10[key] = dict9[key]\n        return dict10\ndef merge_dictionaries_ten(dict1,dict2, dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict) or not isinstance(dict2,dict) or not isinstance(dict3,dict) or not isinstance(dict4,dict) or not isinstance(dict5,dict) or not isinstance(dict6,dict) or not isinstance(dict7,dict) or not isinstance(dict8,dict) or not isinstance(dict9,dict) or not isinstance(dict10,dict):\n    ",
        "num_ids": 105
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary = dict()\n    for key in dict1:\n        dictionary[key] = dict1[key]\n    for key in dict2:\n        dictionary[key] = dict2[key]\n    for key in dict3:\n        dictionary[key] = dict3[key]\n    return dictionary\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    dictionary = dict()\n    for key in dict1:\n        dictionary[key] = dict1[key]\n    for key in dict2:\n        dictionary[key] = dict2[key]\n    return dictionary\n",
        "num_ids": 55
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n    \ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4}\n    \ndef merge_dictionaries_five(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5}\n    \ndef merge_dictionaries_six(dict1,dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6}\n    \ndef merge_dictionaries_seven(dict1,dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7}\n    \ndef merge_dictionaries_eight(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8}\n    \ndef merge_dictionaries_nine(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9}\n    \ndef merge_dictionaries_ten(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10}\n    \ndef merge_dictionaries_eleven(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11}\n    \ndef merge_dictionaries_twelve(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12}\n    \ndef merge_dictionaries_thirteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13}\n    \ndef merge_dictionaries_fourteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14):\n    '''\n    Write a function to merge fourteen dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14}\n    \ndef merge_dictionaries_fifteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15):\n    '''\n    Write a function to merge fifteen dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15}\n    \ndef merge_dictionaries_sixteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16):\n    '''\n    Write a function to merge sixteen dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16}\n    \ndef merge_dictionaries_seventeen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16, dict17):\n    '''\n    Write a function to merge seventeen dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17}\n    \ndef merge_dictionaries_eighteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16, dict17, dict18):\n    '''\n    Write a function to merge eighteen dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18}\n    \ndef merge_dictionaries_nineteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16, dict17, dict18, dict19):\n    '''\n    Write a function to merge nineteen dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18, **dict19}\n    \ndef merge_dictionaries_twenty(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15, dict16, dict1",
        "num_ids": 144
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # list1=input('Enter the list: ')\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n",
        "num_ids": 59
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i in my_dict:\n            my_dict[i]+=1\n        else:\n            my_dict[i]=1\n    return my_dict\n",
        "num_ids": 55
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d=collections.defaultdict(int)\n    for i in list1:\n        d[i]+=1\n    return d\n",
        "num_ids": 34
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] = count[item] + 1\n        else:\n            count[item] = 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    cntr=collections.Counter(list1)\n    return cntr\n",
        "num_ids": 22
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for i in list1:\n        freq[i]+=1\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = collections.Counter(list1)\n    return list2\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for item in list1:\n        count[item] = count.get(item, 0) + 1\n    return count\ndef get_dict_item(dict1, key):\n    return dict1[key]\ndef get_dict_items(dict1):\n    return dict1.items()\ndef get_dict_keys(dict1):\n    return dict1.keys()\ndef get_dict_values(dict1):\n    return dict1.values()\ndef get_dict_items_1(dict1):\n    return dict1.items()\ndef get_dict_item_1(dict1, key):\n    return dict1[key]\ndef get_dict_items_2(dict1):\n    for key, value in dict1.items():\n        print(key, ':', value)\ndef remove_all_items(dict1, key):\n    dict1.pop(key, None)\ndef remove_item(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_2(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_3(dict1, key):\n    del dict1[key]\ndef remove_item_4(dict1, key):\n    del dict1[key]\ndef remove_item_5(dict1, key):\n    del dict1[key]\ndef remove_item_6(dict1, key):\n    del dict1[key]\ndef remove_item_7(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_8(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_9(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_10(dict1, key):\n    del dict1[key]\ndef remove_item_11(dict1, key):\n    del dict1[key]\ndef remove_item_12(dict1, key):\n    del dict1[key]\ndef remove_item_13(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_14(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_15(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_16(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_17(dict1, key):\n    del dict1[key]\ndef remove_item_18(dict1, key):\n    del dict1[key]\ndef remove_item_19(dict1, key):\n    del dict1[key]\ndef remove_item_20(dict1, key):\n    del dict1[key]\ndef remove_item_21(dict1, key):\n    del dict1[key]\ndef remove_item_22(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_23(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_24(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_25(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_26(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_27(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_28(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_29(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_30(dict1, key):\n    dict1.pop(key, None)\ndef remove_item_31(dict1, key):\n    del dict1[key]\ndef remove_item_32(dict1, key):\n    del dict1[key]\ndef remove_item_33(dict1, key):\n    del dict1[key]\ndef remove_item_34(dict1, key):\n    del dict1[key]\ndef remove_item_35(dict1, key):\n    del dict1[key]\ndef remove_item_36(dict1, key):\n    del dict1[key]\ndef remove_item_37(dict1, key):\n    del dict1[key]\ndef remove_item_38(dict1, key):\n    del dict1[key]\ndef remove_item_39(dict1, key):\n    del dict1[key]\ndef remove_item_40(dict1, key):\n    del dict1[key]\ndef remove_item_41(dict1, key):\n    del dict1[key]\ndef remove_item_42(dict1, key):\n    del dict1[key]\ndef remove_item_43(dict1, key):\n    del dict1[key]\ndef remove_item_44(dict1, key):\n    del dict1[key]\ndef remove_item_45(dict1, key):\n    del dict1[key]\ndef remove_item_46(dict1, key):\n    del dict1[key]\ndef remove_item_47(dict1, key):\n    del dict1[key]\ndef remove_item_48(dict1, key):\n    del dict1[key]\ndef remove_item_49(dict1, key):\n    del dict1[key]\ndef remove_item_50(dict1, key):\n    del dict1[key]\ndef remove_item_51(dict1, key):\n    del dict1[key]\ndef remove_item_52(dict1, key):\n    del dict1[key]\ndef remove_item_53(dict1, key):\n    del dict1[key]\ndef remove_item_54(dict1, key):\n    del dict1[key]\ndef remove_item_55(dict1, key):\n    del dict1[key]\ndef remove_item_56(dict1, key):\n    del dict1[key]\ndef remove_item_57(dict1, key):\n    del dict1[key]\ndef remove_item_58(dict1, key):\n    del dict1[key]\ndef remove_item_59(dict1, key):\n    del dict1[key]\ndef remove_item_60(dict1, key):\n    del dict1[key]\ndef remove_item_61(dict1, key):\n    del dict1[key]\ndef remove_item_62(dict1, key):\n    del dict1[key]\ndef remove_item_63(dict1, key):\n    del dict1[key]\ndef remove_item_64(dict1, key):\n    del dict1[key]\ndef remove_item_65(dict1, key):\n    del dict1[key]\ndef remove_item_66(dict1, key):\n    del dict1[key]\ndef remove_item_67(dict1, key):\n    del dict1[key]\ndef remove_item_68(dict1, key):\n    del dict1[key]\ndef remove_item_69(dict1, key):\n    del dict1[key]\ndef remove_item_70(dict1, key):\n    del dict1[key]\ndef remove_item_71(dict1, key):\n    del dict1[key]\ndef remove_item_72(dict1, key):\n    del dict1[key]\ndef remove_item_73(dict1, key):\n    del dict1[key]\ndef remove_item_74(dict1, key):\n    del dict1[key]\ndef remove_item_75(dict1, key):\n    del dict1[key]\ndef remove_item_76(dict1, key):\n    del dict1[key]\ndef remove_item_77(dict1, key):\n    del dict1[key]\ndef remove_item_78(dict1, key):\n    del dict1[key]\ndef remove_item_79(dict1, key):\n    del dict1[key]\ndef remove_item_80(dict1, key):\n    del dict1[key]",
        "num_ids": 1949
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return sorted(set(range(1,N))-{N})[0]\n",
        "num_ids": 22
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = [int(x) for x in str(N)]\n    if l == sorted(l, reverse=True):\n        return None\n    else:\n        return sorted(l, reverse=True)[0]\n",
        "num_ids": 52
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 99:\n        return None\n    elif N == 1:\n        return 2\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 1\n    elif N == 4:\n        return 2\n    else:\n        return N - 1\n",
        "num_ids": 71
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def nearest_smaller(N):\n        while N > 0:\n            if N % 10 == 1:\n                return N // 10\n            elif N % 2 == 0:\n                return N // 2\n            N //= 10\n        return 1\n    return None\n",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert len(str(N)) == 10\n    def digits(n):\n        return [int(c) for c in str(n)]\n    return min(filter(lambda x: digits(x) < digits(N), range(1, N)))\n",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = abs(N-1)\n    if diff > 3:\n        return N-1\n    elif diff == 3:\n        return 2\n    else:\n        return 1\n",
        "num_ids": 45
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Go through each digit\n    for i in xrange(len(N)):\n        # check if the next digit is larger than the current\n        if N[i] < N[i+1]:\n            # if it is, return the next digit\n            return N[i+1]\n",
        "num_ids": 69
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return float('inf')\n",
        "num_ids": 9
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_list = []\n    for word in list1:\n        if len(word)>len(new_list[0]):\n            new_list[0] = word\n        if len(word) == len(new_list[0]):\n            new_list.append(word)\n    print new_list[0]\n    print new_list\n    return len(new_list[0])\n",
        "num_ids": 97
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # find the length of longest word in the list\n    max_len = 0\n    for word in list1:\n        if(len(word) > max_len):\n            max_len = len(word)\n    \n    return max_len\n",
        "num_ids": 62
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    result = 0\n    for i in list1:\n        if len(i)>result:\n            result = len(i)\n    return result\ndef list_to_string(list1):\n    '''\n    Write a python function to print the elements of a list.\n    '''\n    result = \"\"\n    for i in list1:\n        result+=i\n    return result\ndef square(x):\n    '''\n    Write a python function to return the square of the numbers in a list.\n    '''\n    result = []\n    for i in x:\n        result.append(i**2)\n    return result\ndef sum_of_list(list1):\n    '''\n    Write a python function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in list1:\n        result+=i\n    return result\ndef get_count(list1):\n    '''\n    Write a python function to get count of a element from a list.\n    '''\n    count = 0\n    for i in list1:\n        if i == list1:\n            count+=1\n    return count\ndef sort_list(list1):\n    '''\n    Write a python function to sort a list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[j]<list1[i]:\n                list1[j], list1[i] = list1[i], list1[j]\n    return list1\ndef unique_list(list1):\n    '''\n    Write a python function to get the unique elements of a list.\n    '''\n    result = []\n    for i in list1:\n        if i not in result:\n            result.append(i)\n    return result\ndef sort_list_of_tuples(list1):\n    '''\n    Write a python function to sort a list of tuples.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[j][1]<list1[i][1]:\n                list1[j], list1[i] = list1[i], list1[j]\n    return list1\ndef update_list(list1, tuple1):\n    '''\n    Write a python function to update a list from a list of tuples.\n    '''\n    list1[:] = [i for i in tuple1]\n    return list1\ndef get_index_of_elements(list1, list2):\n    '''\n    Write a python function to get the index of elements from two lists.\n    '''\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(list1.index(i))\n    return result\ndef check_for_element(list1, list2):\n    '''\n    Write a python function to check whether the elements exist in a list.\n    '''\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\ndef check_for_all_elements(list1, list2):\n    '''\n    Write a python function to check whether the elements exist in a list.\n    '''\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\ndef filter_list(list1, list2):\n    '''\n    Write a python function to filter a list based on a list of elements.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\ndef check_for_all_elements_of_list(list1, list2):\n    '''\n    Write a python function to check whether all the elements exist in a list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\ndef get_keys(dict1):\n    '''\n    Write a python function to get the keys of a dictionary.\n    '''\n    return dict1.keys()\ndef get_values(dict1):\n    '''\n    Write a python function to get the values of a dictionary.\n    '''\n    return dict1.values()\ndef update_dict(dict1, tuple1):\n    '''\n    Write a python function to update a dictionary from a dictionary of tuples.\n    '''\n    dict1[tuple1[0]] = tuple1[1]\n    return dict1\ndef get_keys_of_dict(dict1):\n    '''\n    Write a python function to get the keys of a dictionary.\n    '''\n    return dict1.keys()\ndef get_values_of_dict(dict1):\n    '''\n    Write a python function to get the values of a dictionary.\n    '''\n    return dict1.values()\ndef update_dict_from_list(dict1, list1):\n    '''\n    Write a python function to update a dictionary from a list of tuples.\n    '''\n    for i in list1:\n        dict1[i[0]] = i[1]\n    return dict1\ndef get_items_of_dict(dict1):\n    '''\n    Write a python function to get the items of a dictionary.\n    '''\n    return dict1.items()\ndef get_key_of_dict(dict1, value):\n    '''\n    Write a python function to get the key of a dictionary for a given value.\n    '''\n    for i in dict1:\n        if dict1[i] == value:\n            return i\n    return None\ndef get_value_of_dict(dict1, key):\n    '''\n    Write a python function to get the value of a dictionary for a given key.\n    '''\n    return dict1[key]\ndef get_key_of_dict_or_default(dict1, key, default_value):\n    '''\n    Write a python function to get the key of a dictionary for a given key.\n    '''\n    if key in dict1:\n        return key\n    return default_value\ndef get_value_of_dict_or_default(dict1, key, default_value):\n    '''\n    Write a python function to get the value of a dictionary for a given key.\n    '''\n    if key in dict1:\n        return dict1[key]\n    return default_value\ndef get_all_keys(dict1):\n    '''\n    Write a python function to get all the keys of a dictionary.\n    '''\n    keys = []\n    for i in dict1:\n        keys.append(i)\n    return keys\ndef get_all_values(dict1):\n    '''\n    Write a python function to get all the values of a dictionary.\n    '''\n    values = []\n    for i in dict1:\n        values.append(dict1[i])\n    return values\ndef get_all_items(dict1):\n    '''\n    Write a python function to get all the items of a dictionary.\n    '''\n    items = []\n    for i in dict1:\n        items.append((i, dict1[i]))\n    return items\ndef get_all_keys_of_dict(dict1):\n    '''\n    Write a python function to get all the keys of a dictionary.\n    '''\n    return dict1.keys()\ndef get_all_values_of_dict(dict1):\n    '''\n    Write a python function to get all the values of a dictionary.\n    '''\n    return dict1.values()\ndef get_all_items_of_dict(dict1):\n    '''\n    Write a python function to get all the items of a dictionary.\n    '''\n    return dict1.items()\ndef get_all_keys_of_dict_or_default(dict1, default_value):\n    '''\n    Write a python function to get all the keys of a dictionary.\n    '''\n    result = []\n    for i in dict1:\n        result.append(i)\n    return result\ndef get_all_values_of_dict_or_default(dict1, default_value):\n    '''\n    Write a python function to get all the values of a dictionary.\n    '''\n    result = []\n    for i in dict1:\n        result",
        "num_ids": 17
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = [len(i) for i in list1]\n    max_len = max(l)\n    return max_len\n",
        "num_ids": 33
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a = 0\n    for i in list1:\n        if len(i) > a:\n            a = len(i)\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = max(list1, key=len)\n    return len(longest)\n",
        "num_ids": 24
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    print max(list2)\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for i in range(len(list1)):\n        if len(list1[i]) > length:\n            length=len(list1[i])\n    return length\n    \ndef is_vowel(letter):\n    '''\n    Write a python function to determine if a letter is a vowel or not\n    '''\n    if letter in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    d = {}\n    for item in list1:\n        d[item] = d.get(item,0) + 1\n    max_value = max(d.values())\n    return max_value\n",
        "num_ids": 50
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for word in list1:\n        if len(word)>max_len:\n            max_len=len(word)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1 or not sub_str:\n        return False\n    for i in xrange(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([True for i in str1 if sub_str in i])\n",
        "num_ids": 20
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n",
        "num_ids": 11
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([True for s in sub_str if s in str1])\n",
        "num_ids": 20
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) == 0:\n        return False\n    if len(str1) < len(sub_str):\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    if sub_str_len > len(str1):\n        return False\n    else:\n        for i in range(len(str1)-len(sub_str)+1):\n            if sub_str == str1[i:i+sub_str_len]:\n                return True\n        return False\n",
        "num_ids": 86
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = False\n    while n: \n        x = n%10\n        if x%2 == 1: \n            flag = True\n            break\n        n //= 10\n    return flag\n",
        "num_ids": 48
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return is_palindromic(str(n))\n    \n    ",
        "num_ids": 19
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    temp = list(str(n))\n    a = temp.pop(0)\n    temp.append(a)\n    for i in temp:\n        if int(i) < int(temp[temp.index(i) + 1]):\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num = str(n)\n    for i in range(1,len(num)):\n        if num[i] < num[i-1]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        if n % 2 == 0:\n            return is_undulating(n/2)\n        else:\n            return not is_undulating(n+1)\n    \ndef is_undulating_1(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        return (n % 2 == 0 and is_undulating_1(n/2) or not is_undulating_1(n+1))\n    \ndef is_undulating_2(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            return is_undulating(n+1)\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 10: return False\n    if n % 2 == 0: return False\n    return is_undulating(n / 2)\n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    k = 0\n    for i in range(1, n): \n        if n % i == 0: \n            k += 1\n    if k == 1: \n        return True\n    else: \n        return False\n",
        "num_ids": 55
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    c=0\n    if n==1:\n        return False\n    else:\n        for i in range(1,n):\n            if i%n==0:\n                c=c+1\n        if c>1:\n            return False\n        else:\n            return True\n",
        "num_ids": 70
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(1,len(s)):\n        if int(s[i]) < int(s[i-1]):\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if len(s) % 2!= 0:\n        return False\n    for i in range(len(s)//2):\n        if s[i]!= s[-(i+1)]:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 65
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a*a,b//2)\n    else:\n        return a*power(a*a,b//2)\n",
        "num_ids": 67
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    # catch negative numbers\n    if a<0:\n        return 1/power(a*-1,b*-1)\n    \n    # base case\n    if b<=1:\n        return a\n    \n    # recursive case\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 77
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b % 2 == 0:\n        return power(a,b//2) * power(a,b//2)\n    return a * power(a,b-1)\n",
        "num_ids": 73
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b%2==0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 52
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)\n",
        "num_ids": 42
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b/2)\n    else:\n        return power(a*a,(b-1)/2)*a\n    \ndef is_palindrome(str):\n    '''\n    Write a function to check whether the string is a palindrome.\n    '''\n    return str==str[::-1]\n    \ndef count_letters(str):\n    '''\n    Write a function to count the number of each letter in a string.\n    '''\n    from collections import Counter\n    return Counter(str)\n    \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    return n*factorial(n-1)\n    \ndef fib(n):\n    '''\n    Write a function to return the nth number in the fibonacci sequence.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n>1:\n        return fib(n-1)+fib(n-2)\n    \ndef pascals_triangle(n):\n    '''\n    Write a function to return the nth row of the pascals triangle.\n    '''\n    row=[1]\n    for i in range(n-1):\n        row.append(row[i]+row[i+1])\n    return row\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '''\n    return count_letters(str1)==count_letters(str2)\n    \ndef count_characters(str):\n    '''\n    Write a function that counts the number of each character in a string.\n    '''\n    from collections import Counter\n    return Counter(str)\n    \ndef find_permutations(str):\n    '''\n    Write a function that finds all permutations of a given string.\n    '''\n    if len(str)==1:\n        return [str]\n    if len(str)==0:\n        return []\n    prefix=str[0]\n    suffix=find_permutations(str[1:])\n    permutations=[prefix+s for s in suffix]\n    if len(suffix)>0:\n        return permutations\n    else:\n        return [str]\n    \ndef base_2_decimal(n,b):\n    '''\n    Write a function that converts a base-2 number to its decimal equivalent.\n    '''\n    if n==0:\n        return 0\n    if n%b==0:\n        return base_2_decimal(n/b,b)\n    else:\n        return base_2_decimal(n/b,b)+n%b*(b**(n/b.bit_length()-1))\n    \ndef base_10_2(n,b):\n    '''\n    Write a function that converts a base-10 number to its equivalent in base-2.\n    '''\n    if n==0:\n        return [0]\n    if n%b==0:\n        return base_10_2(n/b,b)\n    else:\n        return [n%b]+base_10_2(n/b,b)\n    \ndef base_n_decimal(n,base,number):\n    '''\n    Write a function that converts a base-n number to its decimal equivalent.\n    '''\n    if number==0:\n        return 0\n    if number%base==0:\n        return base_n_decimal(n,base,number/base)\n    else:\n        return base_n_decimal(n,base,number/base)+number%base*(base**(number/base.bit_length()-1))\n    \ndef base_n_binary(n,base,number):\n    '''\n    Write a function that converts a base-n number to its equivalent in base-2.\n    '''\n    if number==0:\n        return [0]\n    if number%base==0:\n        return base_n_binary(n,base,number/base)\n    else:\n        return [number%base]+base_n_binary(n,base,number/base)\n    \ndef base_n(n,base,number):\n    '''\n    Write a function that converts a base-n number to its equivalent in base-10.\n    '''\n    if number==0:\n        return 0\n    if number%base==0:\n        return base_n(n,base,number/base)\n    else:\n        return number%base+10*base_n(n,base,number/base)\n    \ndef is_prime(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,n,2):\n        if n%i==0:\n            return False\n    return True\n    \ndef largest_prime_factor(n):\n    '''\n    Write a function that returns the largest prime factor of a number.\n    '''\n    if n==1:\n        return 1\n    if n==0:\n        return 0\n    if n%2==0:\n        return 2\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return i\n    return n\n    \ndef get_primes_upto(n):\n    '''\n    Write a function that returns a list of prime numbers upto a given number.\n    '''\n    if n==1:\n        return []\n    if n==0:\n        return []\n    if n==2:\n        return [2]\n    if n==3:\n        return [2,3]\n    primes=[2,3]\n    for i in range(4,n+1,2):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n    \ndef is_palindrome_permutation(str):\n    '''\n    Write a function that returns True if a string is a palindrome permutation\n    of another string and False otherwise.\n    '''\n    if len(str)==0:\n        return True\n    if len(str)==1:\n        return True\n    if str[0]==str[-1]:\n        return is_palindrome_permutation(str[1:-1])\n    else:\n        return False\n    \ndef is_palindrome_permutation_brute_force(str):\n    '''\n    Write a function that returns True if a string is a palindrome permutation\n    of another string and False otherwise.\n    '''\n    if len(str)==0:\n        return True\n    if len(str)==1:\n        return True\n    for i in range(len(str)/2):\n        if str[i]!=str[-i-1]:\n            return False\n    return True\n    \ndef get_longest_palindromic_substring(str):\n    '''\n    Write a function that returns the longest palindromic substring of a string.\n    '''\n    if len(str)==0:\n        return \"\"\n    if len(str)==1:\n        return str\n    if len(str)==2:\n        if str[0]==str[1]:\n            return str\n        else:\n            return str[0]\n    substrings=[]\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if is_palindrome_permutation(str[i:j]):\n                substrings.append(str[i:j])\n    if len(substrings)==0:\n        return \"\"\n    else:\n        return max(substrings,key=len)\n    \ndef is_pythagorean_triple(a,b,c):\n    '''\n    Write a function that returns True if a pythagorean triple (a,b,c) is\n    exists and False otherwise.\n    '''\n    if a**2",
        "num_ids": 7
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        return 1/power(a,-b)\n    elif b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 61
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = None\n    min_index = None\n    for i in range(len(test_list)):\n        item = test_list[i]\n        if min_val == None or item[1] < min_val:\n            min_val = item[1]\n            min_index = i\n    return min_index\ndef find_min_iter(test_list):\n    '''\n    Write a function that takes a list of numbers and returns the smallest number.\n    Do not use the built in \"min\" function.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] if test_list[0] < find_min_iter(test_list[1:]) else find_min_iter(test_list[1:])\ndef sort_by_index(test_list, index):\n    '''\n    Write a function that takes a list of tuples and sorts the tuples by the given index number.\n    '''\n    return sorted(test_list, key = lambda x: x[index])\ndef sort_by_index2(test_list, index):\n    '''\n    Write a function that takes a list of tuples and sorts the tuples by the given index number.\n    '''\n    return sorted(test_list, key = lambda x: x[index], reverse = True)\ndef sort_by_index3(test_list, index):\n    '''\n    Write a function that takes a list of tuples and sorts the tuples by the given index number.\n    '''\n    return sorted(test_list, key = itemgetter(index))\ndef smallest_number(test_list):\n    '''\n    Write a function that takes a list of numbers and returns the smallest number.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] if test_list[0] < smallest_number(test_list[1:]) else smallest_number(test_list[1:])\ndef smallest_number2(test_list):\n    '''\n    Write a function that takes a list of numbers and returns the smallest number.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return smallest_number2(test_list[1:]) if test_list[0] > smallest_number2(test_list[1:]) else test_list[0]\ndef smallest_number3(test_list):\n    '''\n    Write a function that takes a list of numbers and returns the smallest number.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] if test_list[0] < smallest_number3(test_list[1:]) else smallest_number3(test_list[1:])\ndef append_to_end(test_list, val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list and a number appended to the end.\n    '''\n    return test_list + [val]\ndef remove_item(test_list, val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list without the number specified.\n    '''\n    return [item for item in test_list if item!= val]\ndef remove_item2(test_list, val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list without the number specified.\n    '''\n    return [item for item in test_list if item!= val]\ndef remove_item3(test_list, val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list without the number specified.\n    '''\n    return test_list[:val] + test_list[val+1:]\ndef replace_item(test_list, val, new_val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list with the number specified replaced with the new number.\n    '''\n    return [new_val if item == val else item for item in test_list]\ndef replace_item2(test_list, val, new_val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list with the number specified replaced with the new number.\n    '''\n    return [new_val if item == val else item for item in test_list]\ndef replace_item3(test_list, val, new_val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list with the number specified replaced with the new number.\n    '''\n    return [new_val if item == val else item for item in test_list]\ndef duplicate_item(test_list, index):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list with the number specified duplicated.\n    '''\n    return [test_list[index]]*2\ndef duplicate_item2(test_list, index):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list with the number specified duplicated.\n    '''\n    return [test_list[index]]*2\ndef duplicate_item3(test_list, index):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list with the number specified duplicated.\n    '''\n    return [test_list[index]]*2\ndef truncate_list(test_list, index):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list after the number specified is removed.\n    '''\n    return test_list[:index] + test_list[index+1:]\ndef insert_to_list(test_list, index, val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list after the number specified is inserted.\n    '''\n    return test_list[:index] + [val] + test_list[index:]\ndef insert_to_list2(test_list, index, val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list after the number specified is inserted.\n    '''\n    return test_list[:index] + [val] + test_list[index:]\ndef insert_to_list3(test_list, index, val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list after the number specified is inserted.\n    '''\n    return test_list[:index] + [val] + test_list[index:]\ndef count_occurances(test_list, val):\n    '''\n    Write a function that takes a list and a number and returns a new list that contains the original list with the number specified replaced with the number of occurances of the number in the original list.\n    '''\n    return [val]*test_list.count(val)\ndef remove_duplicates(test_list):\n    '''\n    Write a function that takes a list and returns a new list that contains the original list with all duplicates removed.\n    '''\n    return list(set(test_list))\ndef longest_word(test_list):\n    '''\n    Write a function that takes a list of strings and returns the longest word in the list.\n    '''\n    return max(test_list, key = len)\ndef longest_word2(test_list):\n    '''\n    Write a function that takes a list of strings and returns the longest word in the list.\n    '''\n    return max(test_list, key = len)\ndef longest_word3(test_list):\n    '''\n    Write a function that takes a list of strings and returns the longest word in the list.\n    '''\n    return max(test_list, key = len)\ndef reverse_list(test_list):\n    '''\n    Write a function that takes a list and returns a new list that contains the original list in reverse order.\n    '''\n    return test",
        "num_ids": 5
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list=sorted(test_list,key=itemgetter(1))\n    return new_list[0][0]\n",
        "num_ids": 34
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = None\n    for item in test_list:\n        if minimum is None or item[1] < minimum[1]:\n            minimum = item\n    return item\n",
        "num_ids": 41
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # test_list = [(2, 2), (0, 1), (0, 5), (4, 3), (3, 1)]\n    min_val = min(test_list, key=itemgetter(1))\n    min_index = test_list.index(min_val)\n    print \"index_min of\", test_list, \"is\", min_index\n    return min_val\n",
        "num_ids": 95
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    return min(test_list, key=itemgetter(1))[1]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second value with the largest second value.\n    '''\n    \n    return max(test_list, key=itemgetter(1))[1]\n    \ndef index_second_largest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second value that is the second largest.\n    '''\n    \n    return sorted(test_list, key=itemgetter(1))[-2][1]\n    \ndef index_second_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second value that is the second smallest.\n    '''\n    \n    return sorted(test_list, key=itemgetter(1))[1][1]\n    \ndef index_maximum_in_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second value that is the maximum of all of the second values.\n    '''\n    \n    return max(test_list, key=itemgetter(1))[1]\n    \ndef index_minimum_in_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second value that is the minimum of all of the second values.\n    '''\n    \n    return min(test_list, key=itemgetter(1))[1]\n    \ndef index_maximum_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value that is the maximum of all of the second values.\n    '''\n    \n    return test_list.index(max(test_list, key=itemgetter(1)))\n    \ndef index_minimum_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value that is the minimum of all of the second values.\n    '''\n    \n    return test_list.index(min(test_list, key=itemgetter(1)))\n    \ndef index_all_maximum_in_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the first value of the tuple with the second value that is the maximum of all of the second values.\n    '''\n    \n    max_in_list = max(test_list, key=itemgetter(1))\n    return [i for i, val in enumerate(test_list) if val == max_in_list[1]]\n    \ndef index_all_minimum_in_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the first value of the tuple with the second value that is the minimum of all of the second values.\n    '''\n    \n    min_in_list = min(test_list, key=itemgetter(1))\n    return [i for i, val in enumerate(test_list) if val == min_in_list[1]]\n    \ndef index_all_maximum_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the index of the first value that is the maximum of all of the second values.\n    '''\n    \n    max_in_list = max(test_list, key=itemgetter(1))\n    return [i for i, val in enumerate(test_list) if val == max_in_list[1]]\n    \ndef index_all_minimum_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the index of the first value that is the minimum of all of the second values.\n    '''\n    \n    min_in_list = min(test_list, key=itemgetter(1))\n    return [i for i, val in enumerate(test_list) if val == min_in_list[1]]\n    \ndef index_all_maximum_in_list_with_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the first value of the tuple that is the maximum of all of the second values.\n    '''\n    \n    max_in_list = max(test_list, key=itemgetter(1))\n    return [i for i, val in enumerate(test_list) if val == max_in_list[1]]\n    \ndef index_all_minimum_in_list_with_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the first value of the tuple that is the minimum of all of the second values.\n    '''\n    \n    min_in_list = min(test_list, key=itemgetter(1))\n    return [i for i, val in enumerate(test_list) if val == min_in_list[1]]\n    \ndef index_all_maximum_in_list_by_index_and_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the index of the first value that is the maximum of all of the second values.\n    '''\n    \n    max_in_list = max(test_list, key=itemgetter(1))\n    return [i for i, val in enumerate(test_list) if val == max_in_list[1]]\n    \ndef index_all_minimum_in_list_by_index_and_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the index of the first value that is the minimum of all of the second values.\n    '''\n    \n    min_in_list = min(test_list, key=itemgetter(1))\n    return [i for i, val in enumerate(test_list) if val == min_in_list[1]]\n    \ndef index_value_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the value of the first value of the tuple that is the minimum of all of the second values.\n    '''\n    \n    min_in_list = min(test_list, key=itemgetter(1))\n    return min_in_list[1]\n    \ndef index_value_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the value of the first value of the tuple that is the maximum of all of the second values.\n    '''\n    \n    max_in_list = max(test_list, key=itemgetter(1))\n    return max_in_list[1]\n    \ndef index_value_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the value of the first value of the tuple that is the maximum of all of the second values.\n    '''\n    \n    max_in_list = max(test_list, key=itemgetter(1))\n    return max_in_list[1]\n    \ndef index_value_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the value of the first value of the tuple that is the maximum of all of the second values.\n    '''\n    \n    max_in_list = max(test_list, key=itemgetter(1))\n    return max_in_list[1]\n    \ndef index_value_in_list_by_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the value of the first value of the tuple that is the maximum of all of the second values.\n    '''\n    \n    max_in_list = max(test_list, key=itemgetter(1))\n    return max_in_list",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = min(test_list, key=itemgetter(1))\n    return index_min\n",
        "num_ids": 28
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #return test_list[0]\n    return sorted(test_list)[0]\n",
        "num_ids": 23
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\ndef missing_char(word, index):\n    '''\n    Given a string and an index into the string, return a string that is the same length as the original string, but with the character at the given index replaced with an underscore. \n    '''\n    return word[:index]+'_'+word[index+1:]\n",
        "num_ids": 20
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min = []\n    for item in lst:\n        lst_min.append(len(item))\n    return min(lst_min)\n",
        "num_ids": 41
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=len(lst[0])\n    for l in lst:\n        if len(l)<min_len:\n            min_len=len(l)\n    return min_len\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst.sort()\n    return lst[0]\n",
        "num_ids": 17
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #listlst = [5, 4, 3, 2, 1]\n    #lst = [[5, 4, 3, 2, 1], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, -1, -2], [1, 0, -1, -2, -3]]\n    #lst = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [3, 2, 1, 0, -1], [2, 1, 0, ",
        "num_ids": 2010
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Get the length of the smallest list in lst\n    return min(list(map(len, lst)))\n",
        "num_ids": 29
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min=len(lst[0])\n    for i in lst:\n        if len(i)<Min:\n            Min=len(i)\n    return Min\n",
        "num_ids": 43
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100000000000000000000000\n    for item in lst:\n        if len(item)<min_length:\n            min_length = len(item)\n    return min_length\n",
        "num_ids": 47
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for l in lst[1:]:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len\n",
        "num_ids": 54
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 9999999\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n",
        "num_ids": 47
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = float('inf')\n    for l in lst:\n        if len(l) < smallest_length:\n            smallest_length = len(l)\n    return smallest_length\n",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 2\n    count = 0\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            count += 2\n        i += 1\n    if n % i == 0:\n        count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n",
        "num_ids": 57
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    divisors = 0\n    while i < n:\n        if n % i == 0:\n            divisors += 1\n        i += 1\n    return divisors\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    n = abs(int(n))\n    if n == 0:\n        return 0\n    else:\n        divisors = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                divisors += 2\n        return divisors\n",
        "num_ids": 75
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = set()\n    for i in range(1, int(n/2)+1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n/i)\n    return divisors\n",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(2,n):\n        if n % i == 0:\n            div += 1\n    return div\n",
        "num_ids": 36
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            cnt += 1\n    return cnt\n",
        "num_ids": 41
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = set()\n    for i in xrange(1, int(n**0.5+1)):\n        if n % i == 0:\n            div.add(i)\n            div.add(n/i)\n    return len(div)\n",
        "num_ids": 63
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    divisors = [1,n]\n    for i in range(2,n):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\n",
        "num_ids": 74
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \ndef sum_list(list1):\n    '''\n    Write a function to find sum of elements in a list, where the list is an\n    arbitrary number of nested lists.\n    '''\n    sum = 0\n    for i in list1:\n        if type(i) is list:\n            sum += sum_list(i)\n        else:\n            sum += i\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for item in list1:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts\n",
        "num_ids": 49
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for item in list1:\n        if item in dict1:\n            dict1[item] += 1\n        else:\n            dict1[item] = 1\n    return dict1\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    unique = []\n    frequency = []\n    dictionary = {}\n    for item in list1:\n        if item not in unique:\n            unique.append(item)\n            frequency.append(1)\n        else:\n            frequency[unique.index(item)] += 1\n    dictionary = dict(zip(unique,frequency))\n    return dictionary\n",
        "num_ids": 83
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for item in list1:\n        if item not in dictionary:\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\n",
        "num_ids": 50
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for value in list1:\n        frequency_dict[value] = frequency_dict.get(value,0) + 1\n    return frequency_dict\n",
        "num_ids": 44
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n",
        "num_ids": 46
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict\n",
        "num_ids": 62
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product = product * i\n    print (product / len(numbers))\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for i in numbers:\n        mul *= i\n    return mul/len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for num in numbers:\n        mul *= num\n    return mul / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total = total * i\n    return total / len(numbers)\n    \ndef return_even_numbers(numbers):\n    '''\n    Write a function to return a list of all the even numbers in a list.\n    '''\n    even_numbers = []\n    for i in numbers:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied = 1\n    for num in numbers:\n        multiplied *= num\n    return multiplied / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    answer = 1\n    for x in numbers:\n        answer *= x\n    return answer / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def times_num(number):\n        return number * numbers\n    return reduce(times_num, numbers, 1) / len(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    prod = 1\n    for i in numbers:\n        prod = prod * i\n    return prod / len(numbers)\n",
        "num_ids": 33
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n % 2 == 0:\n        return decimal_to_binary(n//2) + '0'\n    else:\n        return decimal_to_binary(n//2) + '1'\n",
        "num_ids": 75
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    s = []\n    while n > 0:\n        s.append(str(n%2))\n        n /= 2\n    return ''.join(reversed(s))\n",
        "num_ids": 58
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%2 + 10 * decimal_to_binary(n/2)\n",
        "num_ids": 36
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        n = n * -1\n    elif n == 0:\n        return \"0\"\n    return decimal_to_binary_helper(n,0)\n",
        "num_ids": 47
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1: \n        decimal_to_binary(n // 2)\n    print(n % 2, end='')\n",
        "num_ids": 35
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n:\n        binary += str(n % 2)\n        n = n // 2\n    return binary[::-1]\n",
        "num_ids": 49
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    elif n%2 == 1:\n        return 1 + decimal_to_binary(n//2)\n    else:\n        return 0 + decimal_to_binary(n//2)\n",
        "num_ids": 57
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return \"0\"\n    elif n == 1: return \"1\"\n    elif n%2 == 0: return decimal_to_binary(n//2) + \"0\"\n    else: return decimal_to_binary(n//2) + \"1\"\n",
        "num_ids": 69
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = ''\n    while n > 0:\n        s = str(n%2) + s\n        n = n//2\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return int(num + num[0])\n    else:\n        for i in range(1, len(num)):\n            if int(num[i:] + num[:i]) > int(num[i:] + num[:i][::-1]):\n                return int(num[:i] + num[i:][::-1])\n        return int(num + num[::-1])\n",
        "num_ids": 115
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def palindrome(x):\n        if str(x)[::-1] == str(x):\n            return True\n        return False\n    while True:\n        num += 1\n        if palindrome(num) == True:\n            break\n    return num\n",
        "num_ids": 64
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_as_str = str(num)\n    for i in range(len(num_as_str)-1,-1,-1):\n        if num_as_str[i] < num_as_str[i+1]:\n            return int(num_as_str[:i]+num_as_str[i]+num_as_str[i+1:])\n    return -1\n",
        "num_ids": 95
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) < 2:\n        return num\n    elif num[0] == '9':\n        return num\n    else:\n        count = 0\n        if num[0] == '0':\n            for i in range(1,len(num)):\n                if num[i]!= '0':\n                    count = i\n                    break\n        else:\n            count = 1\n        num = num[count+1:]\n        num = num[::-1]\n        if num[0] == '0':\n            num = num[1:]\n            num = num[::-1]\n        num = num + num[0]\n        return int(num)\n        \ndef is_palindrome(num):\n    '''\n    Write a function that returns True if the integer num is a palindrome, False otherwise.\n    '''\n    num = str(num)\n    if len(num) < 2:\n        return True\n    elif len(num) == 2:\n        return num[0] == num[1]\n    else:\n        if num[0] == num[-1]:\n            return is_palindrome(num[1:-1])\n        else:\n            return False\n",
        "num_ids": 87
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if num_str[0]!= '9':\n        return int(num_str[1:] + '1' + '0' * (len(num_str) - 2))\n    elif num_str[1]!= '9':\n        return int(num_str[2:] + '0' + '1' + '0' * (len(num_str) - 2))\n    elif num_str[2]!= '9':\n        return int(num_str[3:] + '0' + '0' + '1' + '0' * (len(num_str) - 3))\n    else:\n        return int(num_str[4:] + '1' + '0' + '0' * (len(num_str) - 4))\n",
        "num_ids": 196
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    return int(num) + 1\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is a palindrome (same number reads the same backwards).\n    '''\n    reverse_num = 0\n    \n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num = num // 10\n    \n    return reverse_num == num\n    \ndef is_perfect_square(num):\n    '''\n    Write a function that returns true if a number is perfect square.\n    '''\n    return num == num ** 0.5\n    \ndef count_digits(num):\n    '''\n    Write a function to count the number of digits in a number.\n    '''\n    count = 0\n    \n    while num > 0:\n        count += 1\n        num = num // 10\n    \n    return count\n    \ndef count_even_digits(num):\n    '''\n    Write a function to count the number of even digits in a number.\n    '''\n    count = 0\n    \n    while num > 0:\n        if num % 10 % 2 == 0:\n            count += 1\n        num = num // 10\n    \n    return count\n    \ndef count_odd_digits(num):\n    '''\n    Write a function to count the number of odd digits in a number.\n    '''\n    count = 0\n    \n    while num > 0:\n        if num % 10 % 2!= 0:\n            count += 1\n        num = num // 10\n    \n    return count\n    \ndef is_all_digits_same(num):\n    '''\n    Write a function to check if a number is a multiple of another number.\n    '''\n    while num > 0:\n        if num % 10!= num // 10 % 10:\n            return False\n        num = num // 10\n    \n    return True\n    \ndef is_rotated_num(num):\n    '''\n    Write a function to check if a number is a rotated version of another number.\n    '''\n    while num > 0:\n        if num % 10!= num // 10 % 10:\n            return False\n        num = num // 10\n    \n    return True\n    \ndef is_triangle(num):\n    '''\n    Write a function to check if a number is a triangular number.\n    '''\n    return num == sum(list(range(1, num + 1)))\n    \ndef count_digits_in_interval(start, end):\n    '''\n    Write a function to count the number of digits in an interval of numbers.\n    '''\n    count = 0\n    \n    while start!= 0:\n        count += 1\n        start = start // 10\n    \n    while end!= 0:\n        count += 1\n        end = end // 10\n    \n    return count\n    \ndef is_interleaving(one, two, three):\n    '''\n    Write a function to check if three numbers can be interleaved.\n    '''\n    one_index = 0\n    two_index = 0\n    three_index = 0\n    \n    while one_index < len(one) and two_index < len(two) and three_index < len(three):\n        if one[one_index] == three[three_index] and two[two_index] == three[three_index]:\n            one_index += 1\n            two_index += 1\n            three_index += 1\n        elif one[one_index] == two[two_index]:\n            one_index += 1\n            two_index += 1\n        elif two[two_index] == one[one_index]:\n            two_index += 1\n        elif three[three_index] == two[two_index]:\n            three_index += 1\n        else:\n            return False\n    \n    if one_index!= len(one) and two_index!= len(two) and three_index!= len(three):\n        return False\n    \n    return True\n    \ndef count_vowels(str):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    count = 0\n    \n    for char in str:\n        if char in 'aeiouAEIOU':\n            count += 1\n    \n    return count\n    \ndef remove_nth_index(l, n):\n    '''\n    Write a function to remove the nth index character from a string.\n    '''\n    return l[:n] + l[n + 1:]\n    \ndef remove_char(str, char):\n    '''\n    Write a function to remove all occurences of a character from a string.\n    '''\n    new_str = ''\n    \n    for char in str:\n        if char!= char:\n            new_str += char\n    \n    return new_str\n    \ndef remove_nth_occurance(str, n):\n    '''\n    Write a function to remove nth occurance of a substring from a string.\n    '''\n    count = 0\n    \n    while str.count(str[:n + 1]) > 1:\n        str = str[:n] + str[n + 1:]\n        count += 1\n    \n    return str\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate an image (in-place)\n    '''\n    matrix_length = len(matrix)\n    \n    if matrix_length == 1:\n        return\n    \n    mid_index = matrix_length // 2\n    \n    for i in range(mid_index):\n        for j in range(i, matrix_length - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[matrix_length - j - 1][i]\n            matrix[matrix_length - j - 1][i] = matrix[matrix_length - i - 1][matrix_length - j - 1]\n            matrix[matrix_length - i - 1][matrix_length - j - 1] = matrix[j][matrix_length - i - 1]\n            matrix[j][matrix_length - i - 1] = temp\n            \n    return matrix\n    \ndef is_square_matrix(matrix):\n    '''\n    Write a function to check if a matrix is a square matrix.\n    '''\n    matrix_length = len(matrix)\n    \n    if matrix_length!= len(matrix[0]):\n        return False\n    \n    return True\n    \ndef sum_matrix(matrix):\n    '''\n    Write a function to compute the sum of all numbers in a matrix.\n    '''\n    result = 0\n    \n    for row in matrix:\n        for num in row:\n            result += num\n    \n    return result\n    \ndef rotate_matrix_90_degree(matrix):\n    '''\n    Write a function to rotate an image 90 degrees.\n    '''\n    if is_square_matrix(matrix):\n        new_matrix = []\n        \n        for i in range(len(matrix)):\n            new_row = []\n            \n            for j in range(len(matrix[0])):\n                new_row.append(matrix[len(matrix) - j - 1][i])\n            \n            new_matrix.append(new_row)\n            \n        return new_matrix\n    else:\n        return False\n        \ndef reverse_string(str):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str[::-1]\n    \ndef reverse_matrix(matrix):\n    '''\n    Write a function to reverse a matrix.\n    '''\n    for i in range(len(matrix) // 2):\n        for j in range(len(matrix) - 1, len(matrix) // 2, -1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[j][i]\n            matrix[j][i] = temp\n            \n    return matrix\n    \ndef is_palindrome_permutation(str):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    str = str.lower()\n    \n    char_freq = {}\n    \n    for char in str:\n        if char in char_freq:\n        ",
        "num_ids": 40
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return num\n    elif len(num) > 1:\n        num = num[1:]\n        if num[0] < num[-1]:\n            num = num[::-1]\n        else:\n            num = num[::-1]\n            num = num[:-1]\n            num = num[::-1]\n    return int(num)\n",
        "num_ids": 106
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num[-1] == '9':\n        num = '0' + num\n    elif num[-1] == '0':\n        num = num[0:-1]\n        num = str(int(num) + 1)\n        num = '1' + num[1:]\n    else:\n        num = str(int(num) + 1)\n    return int(num)\n",
        "num_ids": 103
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    for i in range(len(s)-1,-1,-1):\n        if s[i]!= '9':\n            s = s[:i] + str((int(s[i]) + 1)) + '0'*(len(s)-i-1)\n            break\n        else:\n            s = s[:i] + '1' + '0'*(len(s)-i-1)\n    if s[0] == '1':\n        s = '1' + '0'*(len(s)-1)\n    return int(s)\n",
        "num_ids": 145
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return int(num_str + '1')\n    else:\n        next_num = ''\n        for i in range(len(num_str)-1, -1, -1):\n            if num_str[i] < num_str[i-1]:\n                next_num += '9'\n                num_str = num_str[:i-1] + '0' + num_str[i:]\n                break\n            next_num += num_str[i-1]\n            num_str = num_str[:i-1] + '0' + num_str[i:]\n        return int(num_str + next_num[::-1])\n",
        "num_ids": 184
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    if k > len(arr) or k < 1:\n        return -1\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if arr[mid] == k:\n            return mid\n        if arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "num_ids": 114
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1:\n        return 'Index value out of range'\n    if arr[0] < arr[k - 1]:\n        return arr[k - 1]\n    elif arr[k - 1] > arr[0]:\n        return arr[0]\n    elif arr[0] == arr[k - 1]:\n        return arr[0]\n",
        "num_ids": 86
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    elif k == 1:\n        return arr[k - 1]\n    else:\n        pivot = arr[k // 2]\n        if k == 2 * len(arr):\n            return pivot\n        elif arr[k // 2] < pivot:\n            return kth_element(arr[k // 2:], k - k // 2)\n        else:\n            return kth_element(arr[:k // 2], k // 2)\n",
        "num_ids": 137
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    if k < 0 or k > len(arr):\n        return -1\n",
        "num_ids": 35
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return None\n",
        "num_ids": 20
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    pivot = partition(arr, 0, len(arr)-1)\n    if pivot+1 == k:\n        return arr[pivot]\n    elif pivot+1 < k:\n        return kth_element(arr[pivot+1:], k)\n    else:\n        return kth_element(arr[:pivot], k)\n",
        "num_ids": 112
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    if len(left) == k-1:\n        return pivot\n    elif len(left) < k-1:\n        return kth_element(right, k-len(left)-1)\n    else:\n        return kth_element(left, k)\n",
        "num_ids": 126
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper() + word[1:].lower() for word in word.split('_')])\n",
        "num_ids": 33
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n",
        "num_ids": 23
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(x.title() for x in word.split(\"_\"))\n",
        "num_ids": 22
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    import re\n    \n    camel_case_string = re.sub(r'(?!^)([a-z][a-zA-Z]+)', r'\\1_', word)\n    \n    return camel_case_string\n",
        "num_ids": 59
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    camel_case = word[0]\n    for i in range(1,len(word)):\n        camel_case += word[i].title()\n    return camel_case\n",
        "num_ids": 56
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.strip().split('_')\n    word = [i.title() for i in word]\n    return \"\".join(word)\n",
        "num_ids": 37
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    temp = word.split('_')\n    return ''.join([x.capitalize() for x in temp])\n",
        "num_ids": 29
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = []\n    for i, c in enumerate(word):\n        if c == '_':\n            if i + 1 < len(word):\n                if word[i + 1].isupper():\n                    res.append('')\n                else:\n                    res.append('_')\n            else:\n                res.append('')\n        else:\n            res.append(c.upper())\n    return ''.join(res)\n",
        "num_ids": 105
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = []\n    word_list = word.split('_')\n    for word in word_list:\n        camel_word.append(word)\n    camel_word[0] = camel_word[0].lower()\n    if len(camel_word) > 1:\n        for index in range(1, len(camel_word)):\n            camel_word[index] = camel_word[index].capitalize()\n    return ''.join(camel_word)\n",
        "num_ids": 121
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    list_word = list(word)\n    list_word[0] = list_word[0].upper()\n    list_word = \"\".join(list_word)\n    return list_word\n",
        "num_ids": 49
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n_prime, m_prime = n, m\n    n_tuple = divmod(n, 2)\n    n, n_prime = n_prime, n_tuple[0]\n    m_tuple = divmod(m, 2)\n    m, m_prime = m_prime, m_tuple[0]\n",
        "num_ids": 81
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                s += 1\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    #return sum([(-1)**(i+j) * factorial(n-i-1) * factorial(m-j-1) for i in range(n) for j in range(m)])\n    \n    def is_valid(n):\n        if n<0:\n            return False\n        elif n==0:\n            return True\n        else:\n            return is_valid(n-1)\n    \n    def func(n, m):\n        if n==0:\n            return 0\n        if n<0 or m<0:\n            return 0\n        if is_valid(n) and is_valid(m):\n            return 1 + func(n-1, m)\n        else:\n            return 0 + func(n-1, m)\n    return func(n, m)\n",
        "num_ids": 199
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    E = 0\n    for i in range(0, n + 1):\n        for j in range(0, m + 1):\n            if i * j == n - i + m - j:\n                E += 1\n    return E\n",
        "num_ids": 63
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n%2 == 1:\n        if m%2 == 1:\n            return 1\n        else:\n            return 0\n    else:\n        if m%2 == 0:\n            return 2\n        else:\n            return 1\n",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n * m) - (n + m - 2)\n",
        "num_ids": 18
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [0] * (m + 1)\n    a[1] = 1\n    for k in range(2, n + 1):\n        if k % 2 == 1:\n            for j in range(1, m + 1):\n                a[j] = (a[j] + a[j - 1]) % 1000000007\n        else:\n            for j in reversed(range(1, m + 1)):\n                a[j] = (a[j] + a[j - 1]) % 1000000007\n    return a[m]\n",
        "num_ids": 131
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0: \n        return 1\n    if n == 0: \n        return 1\n    if m == 0: \n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "num_ids": 70
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return m + eulerian_num(n-1, m)\n",
        "num_ids": 46
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Your Code Here\n    return sorted(input_list, key = len)\n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for sublist in input_list:\n        return_list.append(sorted(sublist))\n    return return_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_length = len(input_list[0])\n    return sorted(input_list, key=lambda x: x[sublist_length - 1])\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for item in input_list:\n        sub_lists.append(item)\n    sorted_sub_lists = []\n    for item in sub_lists:\n        temp = sorted(item)\n        sorted_sub_lists.append(temp)\n    return sorted_sub_lists\n",
        "num_ids": 76
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for lst in input_list:\n        output_list.append(sorted(lst))\n    return output_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for i in input_list:\n        output.append(sorted(i))\n    return output\n",
        "num_ids": 31
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in input_list:\n        i.sort()\n        output_list.append(i)\n    return output_list\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n",
        "num_ids": 17
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    if not input_list:\n        return []\n    \n    # O(n^2) approach\n    # create a new list of lists to store the sorted lists\n    result_list = []\n    \n    # outer loop: for each sublist in the original input list\n    for i, each_list in enumerate(input_list):\n        \n        # inner loop: for each item in the sublist\n        for j, each_item in enumerate(each_list):\n            \n            # create a new list for the current item in the sublist\n            # i.e. [['string1'], ['string2'], ['string3']]\n            item_list = [each_item]\n            \n            # create a new list for the current item in the original sublist\n            # i.e. ['string1','string2','string3']\n            # this is the current list of items to compare\n            # this is the list of items in the current sublist\n            current_list = input_list[i][j+1:]\n            \n            # sort the items in the current list\n            current_list.sort()\n            \n            # create a new list for the sorted current item\n            # i.e. ['string1','string2','string3']\n            sorted_list = current_list\n            \n            # create a new list for the sorted item_list\n            # i.e. ['string1','string2']\n            # this is the new list of items in the result sublist\n            result_list.append(item_list + sorted_list)\n    \n    # return the new result list\n    return result_list\n    ",
        "num_ids": 379
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for i in lst:\n        if i:\n            count_true += 1\n    return count_true\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for item in lst if item == True])\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return lst.count(True)\n",
        "num_ids": 14
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n",
        "num_ids": 10
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i == True:\n            c += 1\n    return c\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #lst=[True,True,False,True,False,True,False,False,False,True,True]\n    count=0\n    for i in range(0,len(lst)):\n        if lst[i]:\n            count=count+1\n    print count\n",
        "num_ids": 69
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code here\n    x = 0\n    for i in lst:\n        if i:\n            x += 1\n    return x\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool, lst))\n",
        "num_ids": 14
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    return [test_list] + test_tup\n",
        "num_ids": 17
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list, test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print test_list\n    print test_tup\n    for i in test_tup:\n        test_list.append(i)\n    print test_list\n",
        "num_ids": 41
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for element in test_list:\n        test_tup.append(element)\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup = tuple(test_list)\n    test_tup = test_tup + (tup,)\n    return test_tup\n",
        "num_ids": 36
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_tup = test_tup\n    for i in test_list:\n        temp_tup += i,\n    return temp_tup\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        if len(test_list) == len(test_tup):\n            for tup in test_list:\n                if isinstance(tup, tuple):\n                    test_tup += tup\n                else:\n                    test_tup += (tup,)\n        else:\n            raise ValueError\n    else:\n        raise TypeError\n    return test_tup\n",
        "num_ids": 112
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    return l1\ndef merge_sorted_list_inplace(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    return l1\ndef merge_sorted_list_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    l1.reverse()\n    return l1\ndef merge_sorted_list_inplace_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    l1.reverse()\n    return l1\ndef merge_sorted_list_no_sort(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    return l1\ndef merge_sorted_list_inplace_no_sort(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    return l1\ndef merge_sorted_list_no_sort_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.reverse()\n    return l1\ndef merge_sorted_list_inplace_no_sort_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.reverse()\n    return l1\ndef merge_sorted_list_heap(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    return l1\ndef merge_sorted_list_inplace_heap(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    return l1\ndef merge_sorted_list_heap_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    l1.reverse()\n    return l1\ndef merge_sorted_list_inplace_heap_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    l1.reverse()\n    return l1\ndef merge_sorted_list_heap_no_sort(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    return l1\ndef merge_sorted_list_inplace_heap_no_sort(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    return l1\ndef merge_sorted_list_heap_no_sort_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    l1.reverse()\n    return l1\ndef merge_sorted_list_inplace_heap_no_sort_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort()\n    l1.reverse()\n    return l1\ndef merge_sorted_list_heap_smallest_first(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort(reverse=True)\n    return l1\ndef merge_sorted_list_inplace_heap_smallest_first(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=list(num1)\n    l2=list(num2)\n    l3=list(num3)\n    l1.extend(l2)\n    l1.extend(l3)\n    l1.sort(reverse=True)\n    return l1\ndef merge_sorted_list_heap_largest_first(num",
        "num_ids": 86
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_l = [num1,num2,num3]\n    n = len(num_l)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if num_l[j]>num_l[j+1]:\n                num_l[j],num_l[j+1] = num_l[j+1],num_l[j]\n    return num_l\n",
        "num_ids": 107
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=j=k=0\n    result=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            result.append(num1[i])\n            i+=1\n        elif num2[j]<num3[k]:\n            result.append(num2[j])\n            j+=1\n        else:\n            result.append(num3[k])\n            k+=1\n    while i<len(num1):\n        result.append(num1[i])\n        i+=1\n    while j<len(num2):\n        result.append(num2[j])\n        j+=1\n    while k<len(num3):\n        result.append(num3[k])\n        k+=1\n    return result\n",
        "num_ids": 217
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    newList = []\n    len1 = len(num1)\n    len2 = len(num2)\n    len3 = len(num3)\n    i1 = 0\n    i2 = 0\n    i3 = 0\n    while i1 < len1 and i2 < len2 and i3 < len3:\n        if num1[i1] < num2[i2] and num2[i2] < num3[i3]:\n            newList.append(num1[i1])\n            i1 += 1\n        elif num1[i1] > num2[i2] and num1[i1] < num3[i3]:\n            newList.append(num2[i2])\n            i2 += 1\n        elif num1[i1] > num2[i2] and num1[i1] > num3[i3]:\n            newList.append(num1[i1])\n            i1 += 1\n        else:\n            newList.append(num3[i3])\n            i3 += 1\n    if i1 < len1:\n        newList += num1[i1:]\n    if i2 < len2:\n        newList += num2[i2:]\n    if i3 < len3:\n        newList += num3[i3:]\n    return newList\n",
        "num_ids": 314
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i1,i2,i3 = 0,0,0\n    while i1 < len(num1) and i2 < len(num2) and i3 < len(num3):\n        if num1[i1] < num2[i2] and num1[i1] < num3[i3]:\n            result.append(num1[i1])\n            i1 += 1\n        elif num2[i2] < num1[i1] and num2[i2] < num3[i3]:\n            result.append(num2[i2])\n            i2 += 1\n        elif num3[i3] < num1[i1] and num3[i3] < num2[i2]:\n            result.append(num3[i3])\n            i3 += 1\n    return result\ndef min_heapify(heap,i):\n    l = i*2+1\n    r = i*2+2\n    smallest = i\n    if l < len(heap) and heap[l] < heap[smallest]:\n        smallest = l\n    if r < len(heap) and heap[r] < heap[smallest]:\n        smallest = r\n    if smallest!= i:\n        heap[i],heap[smallest] = heap[smallest],heap[i]\n        min_heapify(heap,smallest)\ndef build_max_heap(heap):\n    for i in range(len(heap)/2-1,-1,-1):\n        min_heapify(heap,i)\ndef heap_sort(A):\n    build_max_heap(A)\n    for i in range(len(A)-1,0,-1):\n        A[0],A[i] = A[i],A[0]\n        min_heapify(A,0)\ndef min_heap_pop(heap):\n    result = heap[0]\n    heap[0] = heap[-1]\n    del heap[-1]\n    min_heapify(heap,0)\n    return result\ndef min_heap_insert(heap,val):\n    heap.append(val)\n    i = len(heap)-1\n    while i!= 0:\n        parent = (i-1)//2\n        if heap[i] < heap[parent]:\n            heap[i],heap[parent] = heap[parent],heap[i]\n            i = parent\n        else:\n            break\ndef median_of_three(a,b,c):\n    if a<b:\n        if b<c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    elif a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n    else:\n        if b>c:\n            return b\n        elif c>a:\n            return c\n        else:\n            return a\ndef selection_sort(A):\n    for i in range(len(A)-1):\n        smallest = i\n        for j in range(i+1,len(A)):\n            if A[j] < A[smallest]:\n                smallest = j\n        A[i],A[smallest] = A[smallest],A[i]\ndef bubble_sort(A):\n    for i in range(len(A)-1):\n        for j in range(len(A)-1,i,-1):\n            if A[j] < A[j-1]:\n                A[j],A[j-1] = A[j-1],A[j]\ndef insertion_sort(A):\n    for i in range(1,len(A)):\n        val = A[i]\n        j = i-1\n        while j >= 0 and A[j] > val:\n            A[j+1] = A[j]\n            j -= 1\n        A[j+1] = val\ndef quick_sort(A):\n    if len(A)<=1:\n        return A\n    pivot = A[0]\n    less = [x for x in A if x < pivot]\n    greater = [x for x in A if x > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\ndef insertion_sort_optimized(A):\n    for i in range(1,len(A)):\n        val = A[i]\n        j = i-1\n        while j >= 0 and A[j] > val:\n            A[j+1] = A[j]\n            j -= 1\n        A[j+1] = val\ndef merge_sort(A):\n    if len(A) <= 1:\n        return A\n    mid = len(A)//2\n    left = merge_sort(A[:mid])\n    right = merge_sort(A[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    result = []\n    i,j = 0,0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\ndef min_heap_pop_optimized(heap):\n    result = heap[0]\n    heap[0] = heap[-1]\n    del heap[-1]\n    min_heapify(heap,0)\n    return result\ndef median_of_five(a,b,c,d,e):\n    return min_heap_pop_optimized(heap = [a,b,c,d,e])\ndef shell_sort(A):\n    interval = len(A)//2\n    while interval>0:\n        for i in range(interval,len(A)):\n            val = A[i]\n            j = i\n            while j >= interval and A[j-interval] > val:\n                A[j] = A[j-interval]\n                j -= interval\n            A[j] = val\n        interval //= 2\ndef insertion_sort_optimized_short(A):\n    for i in range(1,len(A)):\n        val = A[i]\n        j = i-1\n        while j >= 0 and A[j] > val:\n            A[j+1] = A[j]\n            j -= 1\n        A[j+1] = val\ndef heap_sort(A):\n    build_max_heap(A)\n    for i in range(len(A)-1,0,-1):\n        A[0],A[i] = A[i],A[0]\n        min_heapify(A,0)\ndef quick_sort_iterative(A,p,r):\n    if p<r:\n        q = partition(A,p,r)\n        quick_sort_iterative(A,p,q-1)\n        quick_sort_iterative(A,q+1,r)\ndef partition(A,p,r):\n    x = A[r]\n    i = p-1\n    for j in range(p,r):\n        if A[j] <= x:\n            i += 1\n            A[i],A[j] = A[j],A[i]\n    A[i+1],A[r] = A[r],A[i+1]\n    return i+1\ndef quick_sort_recursive(A,p,r):\n    if p<r:\n        q = partition(A,p,r)\n        quick_sort_recursive(A,p,q-1)\n        quick_sort_recursive(A,q+1,r)\ndef counting_sort(A):\n    k = max(A)+1\n    C = [0]*k\n    for i in range(len(A)):\n        C[A[i]] += 1\n    for i in range(1,len(C)):\n        C[i] += C[i-1]\n    B = [None]*len(A)\n    for i in range(len(A)-1,-1,-",
        "num_ids": 2006
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_merge = [num1,num2,num3]\n    num_merge.sort()\n    return num_merge\n    \ndef merge_k_sorted_list(num1,num2,num3,num4):\n    '''\n    Write a function to merge four lists into a single sorted list.\n    '''\n    num_merge = [num1,num2,num3,num4]\n    num_merge.sort()\n    return num_merge\n",
        "num_ids": 38
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = list(num1)\n    l2 = list(num2)\n    l3 = list(num3)\n    l = []\n    while l1 or l2 or l3:\n        if l1 and l2:\n            if l1[0] <= l2[0]:\n                l.append(l1.pop(0))\n            else:\n                l.append(l2.pop(0))\n        elif l1:\n            l.append(l1.pop(0))\n        elif l2:\n            l.append(l2.pop(0))\n        elif l3:\n            l.append(l3.pop(0))\n    return l\n",
        "num_ids": 166
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            list1.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            list2.append(num2[j])\n            j += 1\n        else:\n            list3.append(num3[k])\n            k += 1\n    while i < len(num1):\n        list1.append(num1[i])\n        i += 1\n    while j < len(num2):\n        list2.append(num2[j])\n        j += 1\n    while k < len(num3):\n        list3.append(num3[k])\n        k += 1\n    return list1 + list2 + list3\n",
        "num_ids": 282
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None:\n        return num2\n    if num2==None:\n        return num3\n    if num3==None:\n        return num1\n    merge_sorted_list_helper(num1,num2,num3,0)\n",
        "num_ids": 65
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # 1st solution\n    # merged = [x for x in heapq.merge(num1,num2,num3)]\n    # return merged\n    # 2nd solution\n    n1,n2,n3 = [], [], []\n    for num in num1:\n        heapq.heappush(n1, num)\n    for num in num2:\n        heapq.heappush(n2, num)\n    for num in num3:\n        heapq.heappush(n3, num)\n",
        "num_ids": 129
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    b = [s[i] for i in range(n)] \n    if n%2==1:\n        b[0] = b[0]\n    for i in range(n):\n        if b[i] == '1':\n            b[i] = '0'\n        else:\n            b[i] = '1'\n    return b\n",
        "num_ids": 89
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif len(s) == 1:\n        return 0\n    else:\n        if s[:1] == '1':\n            return odd_Equivalent(s[1:],n-1)\n        else:\n            return odd_Equivalent(s[:-1],n-1)\n",
        "num_ids": 94
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #c=['0','1']\n    #r=[]\n    #for i in range(1,n):\n    #    r.extend(c)\n    #    r=r[-1:]+r[:-1]\n    #odd=0\n    #for i in range(n):\n    #    if r[i]!=s[i]:\n    #        odd+=1\n    #return odd\n    '''\n    n=len(s)\n    x=[]\n    for i in range(n):\n        x.append(s[(i+n-1)%n])\n    return x.count('1')\n    '''\n    return sum(s[i]!=s[(i+n-1)%n] for i in range(n))\n",
        "num_ids": 32
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s)==0:\n        return 0\n    if len(s)==1:\n        if s=='1':\n            return 1\n        elif s=='0':\n            return 1\n    if n==0:\n        return 0\n    if n==1:\n        if s[0]=='0':\n            return 0\n        elif s[0]=='1':\n            return 1\n    if n==2:\n        if s[0]=='0' and s[1]=='0':\n            return 1\n        elif s[0]=='0' and s[1]=='1':\n            return 1\n        elif s[0]=='1' and s[1]=='0':\n            return 1\n        elif s[0]=='1' and s[1]=='1':\n            return 0\n    if s[0]=='0':\n        return odd_Equivalent(s[1:],n)\n    if s[0]=='1':\n        return odd_Equivalent(s[1:],n)+odd_Equivalent(s[1:],n+1)\n",
        "num_ids": 272
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == \"\":\n        return 0\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if n%2 == 1:\n        return (odd_Equivalent(s[1:],n-1) + (1 if s[0] == \"1\" else 0))\n    else:\n        return (odd_Equivalent(s[1:],n) + odd_Equivalent(s[1:],n+1))\n",
        "num_ids": 112
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return s.count('1')\n    else:\n        return odd_Equivalent(s[1:] + s[:1], n-1) + s.count('1')\n",
        "num_ids": 62
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    p = ['1' for i in range(n)]\n    for i in range(n):\n        p.insert(0,p[-1])\n        p.pop()\n    odd = 0\n    for i in range(2**n):\n        if i == int(''.join(p),2):\n            odd += 1\n    return odd\n",
        "num_ids": 83
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #Step 1 : convert the string to an integer\n    s = int(s,2)\n    #Step 2 : convert the integer to an array\n    s = [int(x) for x in bin(s)[2:]]\n    #Step 3 : Flip the array\n    s = s[::-1]\n    #Step 4 : count the number of 1s in the array\n    count = 0\n    for i in s:\n        if i == 1:\n            count += 1\n    #Step 5 : return the count\n    return count\n",
        "num_ids": 126
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n < 0: \n        return\n    s = s[-n:]+s[:-n]\n    count = 0 \n    for i in range(len(s)): \n        if (i%2 == 0):\n            continue\n        else: \n            count += int(s[i])\n    print count \n",
        "num_ids": 80
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    from math import log\n    \n    # if string is empty return 0\n    if s=='': \n        return 0\n    # if string is of length 1 return 0\n    if len(s)==1: \n        return 0\n    \n    # count number of odd length palindromes in s \n    odd_Count=0\n    for i in range(len(s)): \n        if len(s[i:])>=2: \n            if s[i:][0]==s[-1-i][-1]: \n                odd_Count+=1\n            if len(s[i:])>1: \n                if s[i:][-1]==s[-1-i][0]: \n                    odd_Count+=1\n    \n    # return the count of odd-length palindromes in s and the length of s \n    return odd_Count*2**(int(log(n,2))),len(s)\n",
        "num_ids": 228
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist) == type([]):\n        return common_in_nested_lists(nestedlist[1:]) + common_in_nested_lists(nestedlist[:-1])\n    else:\n        return []\n",
        "num_ids": 60
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Use sets to remove duplicates\n    return list(set.intersection(*(set(item) for item in nestedlist)))\n",
        "num_ids": 32
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    output = []\n    for elem in nestedlist[0]:\n        if elem in nestedlist[1]:\n            output.append(elem)\n    return output\n",
        "num_ids": 42
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))\n",
        "num_ids": 19
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result=[]\n    common_in_nested_lists_helper(nestedlist, result)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set.intersection(*(set(nestedlist) for nestedlist in nestedlist))\n",
        "num_ids": 24
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    def _help(lst):\n        if len(lst) == 1:\n            return lst[0]\n        elif len(lst) > 1:\n            lst.pop(0)\n            return _help(lst)\n    for el in nestedlist:\n        common = common.union(set(_help(el)))\n    return list(common)\n",
        "num_ids": 95
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(sum([x for x in nestedlist], [])).intersection(set(sum([x for x in nestedlist[1:]], [])))\n",
        "num_ids": 38
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    all_elements = set()\n    for item in nestedlist:\n        if type(item) is list:\n            all_elements.update(common_in_nested_lists(item))\n        else:\n            all_elements.add(item)\n    return all_elements\n",
        "num_ids": 71
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set_list = []\n    for i in nestedlist:\n        set_list.append(set(i))\n    common_items = set_list[0]\n    for j in set_list[1:]:\n        common_items &= j\n    return common_items\n",
        "num_ids": 67
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # try:\n    #     int(text)\n    #     return True\n    # except ValueError:\n    #     return False\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 62
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return int(text)\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n",
        "num_ids": 31
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # pass\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    if not text:\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if re.match(r'^[-+]?[0-9]+$',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_float_in_range(text, minimum, maximum):\n    '''\n    Write a function to check if a string represents a float within a specific range.\n    '''\n    if not check_float(text):\n        return False\n    return float(text)>= minimum and float(text) <= maximum\n    \ndef check_bool(text):\n    '''\n    Write a function to check if a string represents a bool or not.\n    '''\n    if text.lower() in ['true', 't', '1', 'yes', 'y']:\n        return True\n    if text.lower() in ['false', 'f', '0', 'no', 'n']:\n        return False\n    return False\n    \ndef check_decimal(text):\n    '''\n    Write a function to check if a string represents a decimal or not.\n    '''\n    if not check_integer(text) and not check_float(text):\n        return False\n    return True\n    \ndef check_hex(text):\n    '''\n    Write a function to check if a string represents a hexadecimal or not.\n    '''\n    if not text.startswith('0x') and not text.startswith('0X'):\n        return False\n    try:\n        int(text[2:], 16)\n        return True\n    except ValueError:\n        return False\n    \ndef check_bytearray(text):\n    '''\n    Write a function to check if a string represents a bytearray or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    try:\n        bytearray(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_tuple(text):\n    '''\n    Write a function to check if a string represents a tuple or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    try:\n        tuple(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_list(text):\n    '''\n    Write a function to check if a string represents a list or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    try:\n        list(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_set(text):\n    '''\n    Write a function to check if a string represents a set or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    try:\n        set(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_dict(text):\n    '''\n    Write a function to check if a string represents a dict or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    try:\n        dict(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_timestamp(text):\n    '''\n    Write a function to check if a string represents a timestamp or not.\n    '''\n    try:\n        ts = float(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_duration(text):\n    '''\n    Write a function to check if a string represents a duration or not.\n    '''\n    try:\n        td = timedelta(seconds = int(text))\n        return True\n    except ValueError:\n        return False\n    \ndef check_ip(text):\n    '''\n    Write a function to check if a string represents an ip address or not.\n    '''\n    try:\n        if isinstance(text, unicode):\n            text = text.encode('ascii')\n        socket.inet_aton(text)\n        return True\n    except socket.error:\n        return False\n    \ndef check_phone(text):\n    '''\n    Write a function to check if a string represents a phone number or not.\n    '''\n    if not check_integer(text):\n        return False\n    if len(text)!= 10:\n        return False\n    return True\n    \ndef check_dn(text):\n    '''\n    Write a function to check if a string represents a domain name or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if not text.endswith('.'):\n        return False\n    return True\n    \ndef check_email(text):\n    '''\n    Write a function to check if a string represents an email address or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if '@' not in text:\n        return False\n    return True\n    \ndef check_url(text):\n    '''\n    Write a function to check if a string represents a url or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if not text.startswith('http'):\n        return False\n    return True\n    \ndef check_guid(text):\n    '''\n    Write a function to check if a string represents a guid or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if not text.startswith('{'):\n        return False\n    if not text.endswith('}'):\n        return False\n    return True\n    \ndef check_uuid(text):\n    '''\n    Write a function to check if a string represents a uuid or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if not text.startswith('{'):\n        return False\n    if not text.endswith('}'):\n        return False\n    try:\n        uuid.UUID(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_file_path(text):\n    '''\n    Write a function to check if a string represents a file path or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if not text.startswith('/'):\n        return False\n    return True\n    \ndef check_sha1(text):\n    '''\n    Write a function to check if a string represents a sha1 or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if len(text)!= 40:\n        return False\n    return True\n    \ndef check_sha256(text):\n    '''\n    Write a function to check if a string represents a sha256 or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if len(text)!= 64:\n        return False\n    return True\n    \ndef check_sha512(text):\n    '''\n    Write a function to check if a string represents a sha512 or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if len(text)!= 128:\n        return False\n    return True\n    \ndef check_md5(text):\n    '''\n    Write a function to check if a string represents a md5 or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if len(text)!= 32:\n        return False\n    return True\n    \ndef check_base64(text):\n    '''\n    Write a function to check if a string represents a base64 or not.\n    '''\n    if not isinstance(text, (str, unicode)):\n        return False\n    if len(text) > 64:\n        return False\n    try:\n        base64.b64decode(text)\n        return True\n    except:\n        return False\n    \ndef check_base64url(text):\n    '''\n    Writ",
        "num_ids": 4
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\ndef check_is_empty(list1):\n    '''\n    Write a function that takes a list of dictionaries and returns True if all dictionaries are empty\n    and False if they have at least one dictionary not empty.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\ndef swap_keys_values(dictionary):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary whose keys\n    are the values of the original dictionary and whose values are the keys of the original dictionary.\n    '''\n    new_dict = {}\n    for i in dictionary.values():\n        new_dict[i] = dictionary[i]\n    return new_dict\ndef deep_reverse(L):\n    '''\n    Write a function to reverse a list of lists.\n    '''\n    if not L:\n        return []\n    else:\n        return deep_reverse(L[1:]) + [L[0]]\ndef subset_sum(L, s):\n    '''\n    Write a function that takes a list of integers and a number s and returns a list of all the subsets of\n    the list of integers whose sum is equal to s.\n    '''\n    if L == []:\n        return []\n    if L[0] == s:\n        return [[L[0]]]\n    else:\n        sub_set = subset_sum(L[1:], s - L[0])\n        for i in subset_sum(L[1:], s):\n            sub_set.append([L[0]] + i)\n        return sub_set\ndef get_permutations(string):\n    '''\n    Write a function to get all the permutations of a string.\n    '''\n    if len(string) <= 1:\n        return [string]\n    result = []\n    for i in range(len(string)):\n        for j in get_permutations(string[:i] + string[i+1:]):\n            result.append(string[i] + j)\n    return result\ndef get_permutations_set(string):\n    '''\n    Write a function to get all the permutations of a string, but this time the permutations should be\n    without duplicates.\n    '''\n    if len(string) <= 1:\n        return [string]\n    result = []\n    for i in range(len(string)):\n        for j in get_permutations(string[:i] + string[i+1:]):\n            if j not in result:\n                result.append(j)\n    return result\ndef get_rotated_matrix(matrix):\n    '''\n    Write a function to get all the permutations of a string, but this time the permutations should be\n    without duplicates.\n    '''\n    if len(matrix) <= 1:\n        return [matrix]\n    result = []\n    for i in range(len(matrix)):\n        for j in get_rotated_matrix(matrix[:i] + matrix[i+1:]):\n            result.append([matrix[i]] + j)\n    return result\ndef topological_sort_dfs(graph):\n    '''\n    Write a function to perform a depth-first search on a directed graph.\n    '''\n    def dfs(node):\n        visited[node] = True\n        for n in graph[node]:\n            if not visited[n]:\n                dfs(n)\n    visited = {}\n    for i in graph:\n        visited[i] = False\n    result = []\n    for i in graph:\n        if not visited[i]:\n            dfs(i)\n            result.append(i)\n    return result\ndef topological_sort_dfs_recursive(graph):\n    '''\n    Write a function to perform a depth-first search on a directed graph.\n    '''\n    def dfs(node, visited, result):\n        if node in visited:\n            return\n        visited[node] = True\n        for n in graph[node]:\n            dfs(n, visited, result)\n    visited = {}\n    for i in graph:\n        visited[i] = False\n    result = []\n    for i in graph:\n        if not visited[i]:\n            dfs(i, visited, result)\n            result.append(i)\n    return result\ndef topological_sort_bfs(graph):\n    '''\n    Write a function to perform a breadth-first search on a directed graph.\n    '''\n    result = []\n    visited = {}\n    for i in graph:\n        visited[i] = False\n    for i in graph:\n        if not visited[i]:\n            queue = [i]\n            while queue:\n                node = queue.pop(0)\n                visited[node] = True\n                for n in graph[node]:\n                    if not visited[n]:\n                        queue.append(n)\n            result.append(i)\n    return result\ndef topological_sort_bfs_recursive(graph):\n    '''\n    Write a function to perform a breadth-first search on a directed graph.\n    '''\n    result = []\n    visited = {}\n    for i in graph:\n        visited[i] = False\n    for i in graph:\n        if not visited[i]:\n            dfs_recursive(i, visited, result)\n    return result\ndef dfs_recursive(node, visited, result):\n    visited[node] = True\n    for n in graph[node]:\n        if not visited[n]:\n            dfs_recursive(n, visited, result)\n    result.append(node)\ndef check_valid_parenthesis(string):\n    '''\n    Write a function that returns True if the input is a valid parenthesis string, and\n    False otherwise.\n    '''\n    if len(string) == 0:\n        return True\n    stack = []\n    for c in string:\n        if c == '(' or c == '[' or c == '{':\n            stack.append(c)\n        else:\n            if c == ')' and stack[-1] == '(':\n                stack.pop()\n            elif c == ']' and stack[-1] == '[':\n                stack.pop()\n            elif c == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    return False\ndef check_valid_parenthesis_stack(string):\n    '''\n    Write a function that returns True if the input is a valid parenthesis string, and\n    False otherwise.\n    '''\n    if len(string) == 0:\n        return True\n    stack = []\n    for c in string:\n        if c == '(' or c == '[' or c == '{':\n            stack.append(c)\n        else:\n            if c == ')' and stack[-1] == '(':\n                stack.pop()\n            elif c == ']' and stack[-1] == '[':\n                stack.pop()\n            elif c == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    return False\ndef get_next_smaller_number(number):\n    '''\n    Write a function to get the next smallest number that is bigger than the input number.\n    '''\n    digits = [int(i) for i in str(number)]\n    result = []\n    i = len(digits) - 1\n    while i >= 0:\n        if digits[i] < digits[i-1]:\n            digits[i] += 1\n            for j in range(i, len(digits)):\n                digits[j] = 0\n            break\n        else:\n            result.append(digits[i])\n            i -= 1\n    return int(''.join([str(j) for j in result + digits[:i+1]]))\ndef nth_fibonacci_number(n):\n    '''\n    Write a function to get the nth fibonacci number.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)\ndef compute_lcm(x, y):",
        "num_ids": 59
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    return all(map(lambda x: x == {}, list1))\n    \ndef find_keys(x,y):\n    '''\n    Given a dictionary x and a dictionary y, find the key value pairs that are in y and not in x.\n    '''\n    \n    return {k:y[k] for k in y if k not in x}\n",
        "num_ids": 24
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #solution\n    #return all(not any(x) for x in list1)\n    #return all(len(x) == 0 for x in list1)\n    return all([len(x) == 0 for x in list1])\n    \n    \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    #solution\n    return reduce(lambda x,y: x*y, range(1, n+1))\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function that takes an integer n and returns the nth Fibonacci number\n    '''\n    #solution\n    return reduce(lambda x, y: x + y, range(1, n + 1))\n    \n    \ndef gcd(a, b):\n    '''\n    Write a function to return the greatest common divisor of two numbers.\n    '''\n    #solution\n    return reduce(lambda x, y: x if not b else gcd(b, x), range(1, min(a, b) + 1), max(a, b))\n    \n    \ndef bs_l(n, l, n1, n2):\n    '''\n    Write a function that given a number n, and a lower and upper bound l, and\n    two other numbers n1 and n2, returns True if n1 and n2 have the property that\n    n1 <= n <= n2. Otherwise it returns False.\n    '''\n    #solution\n    return n1 <= n <= n2\n    \n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams.\n    '''\n    #solution\n    return sorted(str1) == sorted(str2)\n    \n    \ndef reverse_lookup(d, v):\n    '''\n    Write a function that takes a dictionary and value and returns a list of all keys\n    that have the value v.\n    '''\n    #solution\n    return [x for x in d if d[x] == v]\n    \n    \ndef is_isogram(str1):\n    '''\n    Write a function to check if a string is an isogram. An isogram is a word that\n    has no repeating letters.\n    '''\n    #solution\n    return len(str1) == len(set(str1))\n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    #solution\n    return str1 == str1[::-1]\n    \n    \ndef is_pallindrome(str1):\n    '''\n    Write a function to check if a string is a pallindrome.\n    '''\n    #solution\n    return str1 == str1[::-1]\n    \n    \ndef split_numbers(str1):\n    '''\n    Write a function to return a list of lists of words from a string. Each list of\n    words will be of the form:\n    [<p>, <p>,..., <p>]\n    where <p> is the string consisting of only digits and the space.\n    '''\n    #solution\n    return [list(str1[i:i + 3]) for i in range(0, len(str1), 3)]\n    \n    \ndef is_ipv4(str1):\n    '''\n    Write a function to check if a string is an IPv4 address or not.\n    '''\n    #solution\n    return re.match('^([0-9]{1,3}\\.){3}[0-9]{1,3}$', str1)\n    \n    \ndef is_ipv6(str1):\n    '''\n    Write a function to check if a string is an IPv6 address or not.\n    '''\n    #solution\n    return re.match('^([0-9a-fA-F]{0,4}\\:){0,5}[0-9a-fA-F]{0,4}$', str1)\n    \n    \ndef is_ipv4_or_ipv6(str1):\n    '''\n    Write a function to check if a string is an IPv4 or IPv6 address or not.\n    '''\n    #solution\n    return re.match('^([0-9]{1,3}\\.){3}[0-9]{1,3}$|^([0-9a-fA-F]{0,4}\\:){0,5}[0-9a-fA-F]{0,4}$', str1)\n    \n    \ndef find_missing_numbers(nums):\n    '''\n    Write a function that takes a list of integers and returns a list of the missing\n    numbers (as integers) from 0 to n (where n is the max integer).\n    '''\n    #solution\n    return list(set(range(max(nums) + 1)) - set(nums))\n    \n    \ndef find_missing_letters(str1):\n    '''\n    Write a function that takes a string of letters and returns a list of the missing\n    letters in the alphabet (as letters).\n    '''\n    #solution\n    return sorted(set(string.ascii_lowercase) - set(str1))\n    \n    \ndef is_tautology(str1):\n    '''\n    Write a function to check if a sentence is a tautology. A tautology is a sentence\n    that is a logical sentence that is not a contradiction.\n    '''\n    #solution\n    return all(x and not y for x, y in zip(str1, str1[1:]))\n    \n    \ndef is_contradiction(str1):\n    '''\n    Write a function to check if a sentence is a contradiction. A contradiction is a\n    sentence that is a logical sentence that is not a tautology.\n    '''\n    #solution\n    return not is_tautology(str1)\n    \n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    #solution\n    return sorted(str1) == sorted(str2)\n    \n    \ndef find_min_substring(str1, str2):\n    '''\n    Write a function to find the minimum substring in a string that appears at least\n    twice in the second string.\n    '''\n    #solution\n    start = 0\n    while True:\n        if str2.find(str1, start) == -1:\n            break\n        start = str2.find(str1, start) + 1\n        if start >= len(str2):\n            break\n    return str2[:start]\n    \n    \ndef is_anagram_of_palindrome(str1):\n    '''\n    Write a function that returns True if a string is an anagram of a palindrome,\n    and False otherwise.\n    '''\n    #solution\n    str2 = str1[::-1]\n    return str1 == str2\n    \n    \ndef is_anagram_of_pallindrome(str1):\n    '''\n    Write a function to check if a string is an anagram of a pallindrome.\n    '''\n    #solution\n    str2 = str1[::-1]\n    return str1 == str2\n    \n    \ndef get_keys_and_values(dict1):\n    '''\n    Write a function that takes a dictionary and returns a tuple of the keys and\n    values.\n    '''\n    #solution\n    return zip(dict1.keys(), dict1.values())\n    \n    \ndef key_value_pairs(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns a list of all the key\n    value pairs that are common between the two dictionaries.\n    '''\n    #solution\n    return [x for x in dict1 if x in dict2]\n    \n    \ndef count_vowels(str1):\n    '''\n    Write a function that takes a string and returns the number of vowels (a, e, i, o,\n    u) in it.\n    '''\n    #solution\n    vowels = {'a', 'e', 'i', '",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for item in list1:\n        if len(item)!= 0:\n            empty = False\n    return empty\n",
        "num_ids": 34
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item.keys())!=0:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    n = len(nums)\n    for i in xrange(n):\n        num = num + (nums[i] * (pow(10, n - i - 1)))\n    return num\n",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i**2\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([num*(2**index) for index, num in enumerate(nums[::-1])])\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    total = 0\n    for i in nums:\n        total = total * 10 + i\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = sorted(nums, reverse=True)\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    import functools\n    def _convert_tuple(nums):\n        '''\n        Return a single integer by adding up the elements\n        of the input tuple.\n        '''\n        return functools.reduce(lambda x, y: x + y, nums)\n    return _convert_tuple(nums)\n",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    t = 0\n    for num in nums:\n        t = t * 10 + num\n    return t\n",
        "num_ids": 28
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            try:\n                new_list.append(float(item))\n            except ValueError:\n                pass\n    return new_list\n",
        "num_ids": 60
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "num_ids": 70
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = test_list[i][j]\n    return test_list\n",
        "num_ids": 88
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = [float(j) for j in test_list[i]]\n    return test_list\n",
        "num_ids": 45
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = float(test_list[i])\n    return test_list\n",
        "num_ids": 39
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for i in range(len(item)):\n            if type(item[i]) is str:\n                item[i] = float(item[i].replace(',', ''))\n    return test_list\n",
        "num_ids": 60
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "num_ids": 74
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list.\")\n    for list_el in test_list:\n        if not isinstance(list_el, list):\n            raise TypeError(\"Input must be a list.\")\n    for list_el in test_list:\n        for el in list_el:\n            if isinstance(el, str):\n                try:\n                    el = float(el)\n                except ValueError:\n                    pass\n    return test_list\n",
        "num_ids": 120
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return list(map(float, test_list))\n    except ValueError:\n        return list(map(list_to_float, test_list))\n",
        "num_ids": 42
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == float or type(test_list[i][j]) == int:\n                test_list[i][j] = float(test_list[i][j])\n            elif type(test_list[i][j]) == str:\n                test_list[i][j] = float(test_list[i][j].replace(',',''))\n            else:\n                pass\n    return test_list\n",
        "num_ids": 139
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \n    \n    \n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings back to a single string separated by space.\n    '''\n    return \" \".join(list)\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    return string.split()\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_split = string.split(' ')\n    return string_split\n",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.replace(\" \", \"\")\n    string = string.split(',')\n    return string\n",
        "num_ids": 27
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(\" \")\n    return list_of_strings\n",
        "num_ids": 24
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return None\n    if l == 1:\n        return arr[0]\n    if l == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    # we need to do a binary search\n    left = 0\n    right = l - 1\n    while left <= right:\n        mid = (left+right)/2\n        if mid == left:\n            # no duplicates on left\n            if arr[mid]!= arr[mid+1]:\n                return arr[mid]\n            # we are on the right and left is same\n            if arr[mid]!= arr[mid-1]:\n                return arr[mid]\n            # we are on the right and left is same\n            else:\n                return arr[mid+1]\n        elif mid == right:\n            # no duplicates on right\n            if arr[mid]!= arr[mid-1]:\n                return arr[mid]\n            # we are on the left and right is same\n            if arr[mid]!= arr[mid+1]:\n                return arr[mid]\n            # we are on the left and right is same\n            else:\n                return arr[mid-1]\n        else:\n            # we are on the left\n            if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1]:\n                return arr[mid]\n            # we are on the right\n            if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1]:\n                return arr[mid]\n            # we are on the left and right\n            if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1]:\n                return arr[mid-1]\n            # we are on the right and left\n            if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1]:\n                return arr[mid+1]\n",
        "num_ids": 489
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    elif len(arr)==1:\n        return arr[0]\n    else:\n        i = 0\n        while i<len(arr)-1:\n            if arr[i]==arr[i+1]:\n                i+=1\n                continue\n            else:\n                return arr[i]\n        return arr[-1]\n    ",
        "num_ids": 97
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    for i in range(0,len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n",
        "num_ids": 62
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    i = 1\n    while i < len(arr):\n        if arr[i] == arr[i-1]:\n            del arr[i]\n        else:\n            i += 1\n    return arr[0]\n",
        "num_ids": 84
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) / 2\n        if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]\n",
        "num_ids": 97
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    else:\n        mid = len(arr)/2\n        if arr[mid]==arr[mid-1] and len(arr)%2!=0:\n            return arr[mid-1]\n        elif arr[mid]==arr[mid+1] and len(arr)%2==0:\n            return arr[mid+1]\n        elif arr[mid-1]==arr[mid]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid:])\n",
        "num_ids": 139
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None or len(arr) == 0:\n        return\n",
        "num_ids": 19
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr)//2\n    if len(arr)%2 == 0:\n        if arr[mid] == arr[mid-1] == arr[mid+1]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid:])\n    else:\n        if arr[mid] == arr[mid+1]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid+1:])\n",
        "num_ids": 130
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr_len = len(arr)\n    if arr_len <= 1:\n        return None\n",
        "num_ids": 25
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = list1[0]\n    return max(map(lambda x: (max(x)*min(x)), zip(list1, list1[1:])))\n    \nmax_product_tuple([(2, 5), (4, -5), (5, 3), (-5, -2)])\n",
        "num_ids": 75
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError('list must have at least two elements')\n    # create an empty list to store max values\n    max_values = []\n    # iterate over each element and compare to the max element in the list\n    for i, (t1, t2) in enumerate(zip(list1[:-1], list1[1:])):\n        if (t1 > 0 and t2 > 0) or (t1 < 0 and t2 < 0):\n            max_values.append(abs(t1 * t2))\n        else:\n            max_values.append(abs(t1 + t2))\n    return max(max_values)\n",
        "num_ids": 164
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        return\n    if len(list1) == 0:\n        return\n    if len(list1) == 2:\n        return\n    list2 = []\n    list3 = []\n    for a,b in list1:\n        list2.append(abs(a*b))\n    return max(list2)\n",
        "num_ids": 90
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[0] * i[1])\n    return max(list2)\n",
        "num_ids": 40
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            if max_product < abs(list1[i][0]*list1[j][1]):\n                max_product = abs(list1[i][0]*list1[j][1])\n",
        "num_ids": 89
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #check that list is not empty\n    if len(list1) == 0:\n        return None\n    #initialize max product\n    max_product = list1[0][0] * list1[0][1]\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if abs(product) > abs(max_product):\n            max_product = product\n    return max_product\n",
        "num_ids": 105
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = 0\n    for each in list1:\n        for item in each:\n            max_val = max(max_val,abs(item))\n    return max_val\n",
        "num_ids": 46
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if (i!= j):\n                if (abs(list1[i][0]*list1[j][1]) > max_product):\n                    max_product = abs(list1[i][0]*list1[j][1])\n    return max_product\n    \ndef max_product_dict(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    dict1 = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if (i!= j):\n                if (list1[i][0]*list1[j][1] > max_product):\n                    max_product = list1[i][0]*list1[j][1]\n                    dict1[i] = (list1[i][0],list1[j][1])\n    return max_product, dict1\n",
        "num_ids": 127
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        raise ValueError('You must enter a list with at least two tuples')\n    else:\n        max_product = list1[0][0]*list1[0][1]\n        for tup in list1[1:]:\n            product = tup[0]*tup[1]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 105
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(reduce(lambda x,y: tuple(sorted([x[0]*y[0],x[1]*y[1]])),list1))\n",
        "num_ids": 42
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [i for i in range(1, limit)]\n    for i in range(len(amicable_numbers)):\n        amicable_numbers[i] = sum(divisors(amicable_numbers[i]))\n    amicable_sum = sum(amicable_numbers)\n    amicable_numbers = [i for i in range(1, limit) if i!= amicable_sum]\n    return sum(amicable_numbers)\n",
        "num_ids": 117
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for number in range(1, limit):\n        sum_of_amicable_numbers += find_amicable_numbers(number)\n    return sum_of_amicable_numbers\n",
        "num_ids": 60
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        s = i\n        l = []\n        for j in range(i+1, limit):\n            s += j\n            l.append(j)\n        l.remove(i)\n        if sum_of_factors(s) == i and sum_of_factors(s) in l:\n            sum += s\n    return sum\n",
        "num_ids": 98
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = set()\n    for x in range(1, limit):\n        if (x % 10000 == 0):\n            print x\n        amicables.add(sum(get_divisors(x)))\n    print sum(amicables)\n    \nif __name__ == \"__main__\":\n    amicable_numbers_sum(10000)",
        "num_ids": 83
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    nums = []\n    for x in range(1, limit+1):\n        a = 0\n        b = 0\n        a = sum([int(i) for i in str(x)])\n        b = sum([int(i) for i in str(a)])\n        if b == x and x!= a:\n            nums.append(x)\n    return sum(nums)\n",
        "num_ids": 96
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [i for i in range(1, limit+1)]\n    amicable_numbers_sum = 0\n    for i in range(0, limit):\n        sum_of_divisors = 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum_of_divisors += j\n        if i == sum_of_divisors:\n            amicable_numbers[i] = sum_of_divisors\n    for i in amicable_numbers:\n        if amicable_numbers[i]!= i and amicable_numbers[amicable_numbers[i]] == i:\n            amicable_numbers_sum += i\n    return amicable_numbers_sum\n    \n",
        "num_ids": 184
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(x for x in range(2, limit) if is_amicable(x))\n",
        "num_ids": 25
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        is_amicable = True\n        n = i\n        sum_i = 0\n        while sum_i <= n:\n            sum_i = sum_i + n\n            if sum_i == i:\n                is_amicable = False\n                break\n            if sum_i == i:\n                amicable_numbers.append(i)\n                break\n            if is_amicable:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n",
        "num_ids": 137
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # sum of all the amicable numbers, excluding numbers divisible by 8\n    amicable_sum = 0\n",
        "num_ids": 27
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            j = sum(divisors(i)) - i\n            if j == i and i!= j:\n                amicable_numbers.add(i)\n                amicable_numbers.add(j)\n",
        "num_ids": 85
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #This function is based on the angle_between function, which is based on the trigonometric sum of the complex number.\n    #I don't think we need cmath here, but I don't know how to set up a library for this.\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 71
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=cmath.phase(complex(a,b))\n    #angle=abs(cmath.phase(complex(a,b)))\n    return angle\n",
        "num_ids": 39
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef angle_polar(a):\n    '''\n    Write a function to get the angle of a polar number.\n    '''\n    return cmath.phase(a)\ndef is_perpendicular(a,b):\n    '''\n    Write a function to check if two complex numbers are perpendicular.\n    '''\n    return (a[0]*b[1]-a[1]*b[0])==0\ndef is_parallel(a,b):\n    '''\n    Write a function to check if two complex numbers are parallel.\n    '''\n    return (a[0]*b[0]+a[1]*b[1])==0\ndef product(a,b):\n    '''\n    Write a function to get the product of two complex numbers.\n    '''\n    return (a[0]*b[0])+(a[1]*b[1])\ndef scalar_prod(a,b):\n    '''\n    Write a function to get the scalar product of two complex numbers.\n    '''\n    return (a[0]*b[0])+(a[1]*b[1])\ndef dot_product(a,b):\n    '''\n    Write a function to get the dot product of two complex numbers.\n    '''\n    return (a[0]*b[0])+(a[1]*b[1])\ndef sum_vectors(a,b):\n    '''\n    Write a function to get the sum of two complex numbers.\n    '''\n    return (a[0]+b[0],a[1]+b[1])\ndef magnitude(a):\n    '''\n    Write a function to get the magnitude of a complex number.\n    '''\n    return (a[0]**2+a[1]**2)**0.5\ndef inverse(a):\n    '''\n    Write a function to get the inverse of a complex number.\n    '''\n    return (a[0]/a[1],a[1]/a[0])\ndef conjugate(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return (a[0],a[1])\ndef cartesian(a):\n    '''\n    Write a function to get the cartesian coordinates of a complex number.\n    '''\n    return (a[0]*math.cos(a[1]),a[0]*math.sin(a[1]))\ndef polar(a):\n    '''\n    Write a function to get the polar coordinates of a complex number.\n    '''\n    return (magnitude(a),angle_polar(a))\ndef inverse_polar(a):\n    '''\n    Write a function to get the inverse of a polar number.\n    '''\n    return (a[0]*math.cos(a[1]),a[0]*math.sin(a[1]))\ndef inverse_cartesian(a):\n    '''\n    Write a function to get the inverse of a cartesian number.\n    '''\n    return (a[0]/math.cos(a[1]),a[0]/math.sin(a[1]))\ndef scalar(a,b):\n    '''\n    Write a function to get the scalar product of two complex numbers.\n    '''\n    return (a[0]*b[0])+(a[1]*b[1])\ndef is_zero(a):\n    '''\n    Write a function to check if a complex number is zero.\n    '''\n    return a[0]==0 and a[1]==0\ndef rotate_matrix(m,theta):\n    '''\n    Write a function to rotate a 2x2 matrix by theta radians.\n    '''\n    cos_theta=math.cos(theta)\n    sin_theta=math.sin(theta)\n    c_1=1-cos_theta\n    s_1=sin_theta\n    c_2=cos_theta\n    s_2=sin_theta\n    return [[c_1*m[0][0]+s_1*m[0][1],c_1*m[1][0]-s_1*m[1][1]],[s_2*m[0][0]+c_2*m[0][1],s_2*m[1][0]+c_2*m[1][1]]]\ndef transform_matrix(m,a):\n    '''\n    Write a function to get the matrix corresponding to a 2D rotation.\n    '''\n    return rotate_matrix(m,a[1])\ndef rotate_vector(a,theta):\n    '''\n    Write a function to rotate a 2D vector by theta radians.\n    '''\n    cos_theta=math.cos(theta)\n    sin_theta=math.sin(theta)\n    c_1=1-cos_theta\n    s_1=sin_theta\n    c_2=cos_theta\n    s_2=sin_theta\n    return [(c_1*a[0])+(s_1*a[1]),(c_2*a[0])-(s_2*a[1])]\ndef transform_vector(a,a_1):\n    '''\n    Write a function to get the vector corresponding to a 2D rotation.\n    '''\n    return rotate_vector(a,a_1[1])\ndef rotate_point(a,theta):\n    '''\n    Write a function to rotate a 2D point by theta radians.\n    '''\n    cos_theta=math.cos(theta)\n    sin_theta=math.sin(theta)\n    c_1=1-cos_theta\n    s_1=sin_theta\n    c_2=cos_theta\n    s_2=sin_theta\n    return [(c_1*a[0])+(s_1*a[1]),(c_2*a[0])-(s_2*a[1])]\ndef transform_point(a,a_1):\n    '''\n    Write a function to get the point corresponding to a 2D rotation.\n    '''\n    return rotate_point(a,a_1[1])\ndef reflect_vector(a,b):\n    '''\n    Write a function to get the reflection of a vector (a-b) over b.\n    '''\n    return (2*(a[0]*b[0]+a[1]*b[1]),2*(a[0]*b[1]-a[1]*b[0]))\ndef reflect_point(a,b):\n    '''\n    Write a function to get the reflection of a point (a-b) over b.\n    '''\n    return (2*(a[0]*b[0]+a[1]*b[1]),2*(a[0]*b[1]-a[1]*b[0]))\ndef project_vector(a,b):\n    '''\n    Write a function to get the projection of a vector (a-b) over b.\n    '''\n    return (a[0]*b[0]+a[1]*b[1],a[0]*b[1]-a[1]*b[0])\ndef project_point(a,b):\n    '''\n    Write a function to get the projection of a point (a-b) over b.\n    '''\n    return (a[0]*b[0]+a[1]*b[1],a[0]*b[1]-a[1]*b[0])\ndef make_transformation(a,b,c,d):\n    '''\n    Write a function to get the transformation matrix.\n    '''\n    return [[a[0],b[0],c[0],d[0]],[a[1],b[1],c[1],d[1]],[a[2],b[2],c[2],d[2]],[a[3],b[3],c[3],d[3]]]\ndef transform_matrix_to_cartesian(a):\n    '''\n    Write a function to get the transformation matrix to cartesian.\n    '''\n    return [[a[0][0],a[1][0],a[2][0],a[3][0]],[a[0][1],a[",
        "num_ids": 38
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    arg=a.real*b.imag-a.imag*b.real\n    if arg>0:\n        return cmath.phase(arg)\n    elif arg<0:\n        return cmath.phase(arg)\n    else:\n        if a.real==b.real:\n            return 0\n        elif a.imag>b.imag:\n            return cmath.phase(arg)\n        else:\n            return cmath.phase(arg)+cmath.pi\ndef complex_number(c):\n    '''\n    Write a function to convert a string to a complex number.\n    '''\n    return cmath.rect(c)\ndef basic_operations(a,b,c,d):\n    '''\n    Write a function to get the answer to basic operations on two complex numbers.\n    '''\n    if c.real==0 and c.imag==0:\n        return None\n    if d==\"+\":\n        return complex_number(a+b)\n    elif d==\"-\":\n        return complex_number(a-b)\n    elif d==\"*\":\n        return complex_number(a*b)\n    elif d==\"/\":\n        return complex_number(a/b)\ndef complex_power(a,b):\n    '''\n    Write a function to get the answer to complex power.\n    '''\n    if b==1:\n        return a\n    else:\n        return a*complex_power(a,b-1)\ndef get_complex_number(a):\n    '''\n    Write a function to get a complex number from a string.\n    '''\n    a=a.split(\"+\")\n    a=a[0]+a[1]\n    a=complex(a)\n    return a\ndef sqrt_complex(a):\n    '''\n    Write a function to get the answer to root of complex number.\n    '''\n    return cmath.sqrt(a)\ndef mod_complex(a):\n    '''\n    Write a function to get the answer to modulus of complex number.\n    '''\n    return abs(a)\ndef exponent_complex(a,b):\n    '''\n    Write a function to get the answer to exponent of complex number.\n    '''\n    return complex_number(complex_power(a,b))\ndef is_prime(a):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if a==2:\n        return True\n    elif a%2==0 and a!=2:\n        return False\n    else:\n        for i in range(3,a,2):\n            if a%i==0:\n                return False\n        else:\n            return True\ndef get_factors(a):\n    '''\n    Write a function to get all the factors of a number.\n    '''\n    factors=[]\n    if a==0:\n        return None\n    elif a==1:\n        return [a]\n    else:\n        for i in range(1,a+1):\n            if a%i==0:\n                factors.append(i)\n        return factors\ndef is_perfect(a):\n    '''\n    Write a function to check whether a number is perfect or not.\n    '''\n    factors=get_factors(a)\n    sum=0\n    for i in factors:\n        sum+=i\n    if sum==a:\n        return True\n    else:\n        return False\ndef get_perfect_number(a):\n    '''\n    Write a function to get the perfect number.\n    '''\n    perfect=[]\n    for i in range(1,a):\n        if is_perfect(i):\n            perfect.append(i)\n    return perfect\ndef get_perfect_numbers_sum(a,b):\n    '''\n    Write a function to get the sum of perfect numbers.\n    '''\n    sum=0\n    for i in range(a,b+1):\n        if is_perfect(i):\n            sum+=i\n    return sum\ndef get_complex_numbers(a,b):\n    '''\n    Write a function to get the complex numbers.\n    '''\n    if a[0]==\"0\":\n        return complex_number(complex(a[1]))\n    else:\n        return complex_number(complex(a[0]+\"+\"+a[1]))\ndef get_complex_numbers_sum(a,b):\n    '''\n    Write a function to get the sum of complex numbers.\n    '''\n    sum=0\n    for i in range(min(len(a),len(b)),0,-1):\n        if len(a)>len(b):\n            sum+=complex_number(complex(a[-i]))\n        else:\n            sum+=complex_number(complex(b[-i]))\n    return sum\ndef get_complex_numbers_product(a,b):\n    '''\n    Write a function to get the product of complex numbers.\n    '''\n    product=1\n    for i in range(len(a),0,-1):\n        product*=complex_number(complex(a[-i]))\n    return product\ndef is_real(a):\n    '''\n    Write a function to check whether a number is real or not.\n    '''\n    if a.real>=0:\n        return True\n    else:\n        return False\ndef is_complex_number(a):\n    '''\n    Write a function to check whether a number is a complex number or not.\n    '''\n    if a.imag>=0:\n        return True\n    else:\n        return False\ndef get_real_number(a):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    if a.imag>=0:\n        return a.real\n    else:\n        return -a.real\ndef get_complex_number_real_part(a):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    return a.real\ndef get_complex_number_imaginary_part(a):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    return a.imag\ndef is_real_and_imaginary(a):\n    '''\n    Write a function to check whether a number is a real and imaginary part.\n    '''\n    if abs(a.real)>=abs(a.imag):\n        return True\n    elif abs(a.real)<abs(a.imag):\n        return False\ndef get_real_part_complex_number(a):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    if is_complex_number(a):\n        return a.real\n    else:\n        return None\ndef get_imaginary_part_complex_number(a):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    if is_complex_number(a):\n        return a.imag\n    else:\n        return None\ndef get_real_and_imaginary_part_complex_number(a):\n    '''\n    Write a function to get the real and imaginary part of a complex number.\n    '''\n    if is_complex_number(a):\n        return (a.real,a.imag)\n    else:\n        return (None,None)\ndef complex_power_complex(a,b):\n    '''\n    Write a function to get the answer to complex power.\n    '''\n    if is_complex_number(a):\n        return complex_number(complex_power(a,b))\n    else:\n        return None\ndef get_mod_complex(a):\n    '''\n    Write a function to get the answer to modulus of complex number.\n    '''\n    return abs(a)\ndef get_phase_complex(a):\n    '''\n    Write a function to get the answer to phase of complex number.\n    '''\n    return cmath.phase(a)\ndef get_mod_complex_number(a):\n    '''\n    Write a function to get the answer to modulus of complex number.\n    '''\n    return abs(complex_number(a))\ndef get_phase_complex_number(a):\n    '''\n    Write a function to get the answer to phase of complex number.\n    '''",
        "num_ids": 1
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(cmath.phase(complex(a,b)))\ndef angle_deg(a,b):\n    return cmath.phase(complex(a,b))*180/cmath.pi\ndef angle_rad(a,b):\n    return cmath.phase(complex(a,b))*cmath.pi/180\ndef angle_deg_complex(a,b):\n    return abs(cmath.phase(complex(a,b)))\ndef angle_rad_complex(a,b):\n    return abs(cmath.phase(complex(a,b)))\ndef print_range(n):\n    for i in range(n+1):\n        print(i)\ndef print_size(n):\n    for i in range(n):\n        print(i, end=' ')\ndef print_size_to(n):\n    for i in range(n):\n        print(i, end=' ')\n        \ndef print_size_to_range(n):\n    for i in range(n+1):\n        print(i, end=' ')\n        \ndef print_to_size(n):\n    for i in range(n):\n        print(i, end=' ')\ndef print_range_to_size(n):\n    for i in range(n):\n        print(i, end=' ')\n        \ndef print_to_size_range(n):\n    for i in range(n+1):\n        print(i, end=' ')\ndef print_to_size_range_non_continous(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\ndef print_to_size_range_continous(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_non_continous_2(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_continous_2(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\ndef print_to_size_range_non_continous_3(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_continous_3(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_non_continous_4(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_continous_4(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_non_continous_5(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_continous_5(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_non_continous_6(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_continous_6(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_non_continous_7(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\ndef print_to_size_range_continous_7(n):\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 1:\n            print(i, end=' ')\n    for i in range(n+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    for i in range(",
        "num_ids": 2013
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Get real and imaginary part of complex number\n    # Return the angle\n    \n    c = abs(complex(a,b))\n    return cmath.phase(c)\n    \na = 1.0\nb = 1.0\n",
        "num_ids": 57
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\n",
        "num_ids": 22
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef vector_add(a,b):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]+b[0],a[1]+b[1])\ndef vector_sub(a,b):\n    '''\n    Write a function to get the vector sub of two vector\n    '''\n    return (a[0]-b[0],a[1]-b[1])\ndef vector_mul(a,b):\n    '''\n    Write a function to get the vector multiply of two vector\n    '''\n    return (a[0]*b[0]-a[1]*b[1],a[0]*b[1]+a[1]*b[0])\ndef vector_div(a,b):\n    '''\n    Write a function to get the vector division of two vector\n    '''\n    return (a[0]*b[0]+a[1]*b[1],a[0]*b[1]-a[1]*b[0])\ndef vector_cross(a,b):\n    '''\n    Write a function to get the cross product of two vector\n    '''\n    return (a[0]*b[1]-a[1]*b[0],a[1]*b[0]+a[0]*b[1])\ndef vector_norm(a):\n    '''\n    Write a function to get the vector norm of a vector\n    '''\n    return cmath.sqrt(a[0]*a[0]+a[1]*a[1])\ndef vector_angle(a,b):\n    '''\n    Write a function to get the angle between two vector\n    '''\n    return cmath.phase(complex(a[0],a[1])/complex(b[0],b[1]))\ndef vector_sum(a,b):\n    '''\n    Write a function to get the vector sum of two vector\n    '''\n    return (a[0]+b[0],a[1]+b[1])\ndef vector_sub_map(a,b,m):\n    '''\n    Write a function to get the vector sub of two vector\n    '''\n    return (a[0]-m[b][0],a[1]-m[b][1])\ndef vector_div_map(a,b,m):\n    '''\n    Write a function to get the vector division of two vector\n    '''\n    return (a[0]*m[b][0]+a[1]*m[b][1],a[0]*m[b][1]-a[1]*m[b][0])\ndef vector_angle_map(a,b,m):\n    '''\n    Write a function to get the angle between two vector\n    '''\n    return cmath.phase(complex(a[0],a[1])/complex(m[b][0],m[b][1]))\ndef vector_mul_map(a,b,m):\n    '''\n    Write a function to get the vector multiplication of two vector\n    '''\n    return (a[0]*m[b][0]-a[1]*m[b][1],a[0]*m[b][1]+a[1]*m[b][0])\ndef vector_mul_inv_map(a,b,m):\n    '''\n    Write a function to get the vector multiplication of two vector\n    '''\n    return (a[0]*m[b][0]+a[1]*m[b][1],a[0]*m[b][1]-a[1]*m[b][0])\ndef vector_mul_conj_map(a,b,m):\n    '''\n    Write a function to get the vector multiplication of two vector\n    '''\n    return (a[0]*m[b][0]-a[1]*m[b][1],a[0]*m[b][1]+a[1]*m[b][0])\ndef vector_mul_conj_inv_map(a,b,m):\n    '''\n    Write a function to get the vector multiplication of two vector\n    '''\n    return (a[0]*m[b][0]+a[1]*m[b][1],a[0]*m[b][1]-a[1]*m[b][0])\ndef vector_mul_conj(a,b):\n    '''\n    Write a function to get the vector multiplication of two vector\n    '''\n    return (a[0]*b[0]-a[1]*b[1],a[0]*b[1]+a[1]*b[0])\ndef vector_mul_conj_inv(a,b):\n    '''\n    Write a function to get the vector multiplication of two vector\n    '''\n    return (a[0]*b[0]+a[1]*b[1],a[0]*b[1]-a[1]*b[0])\ndef vector_mul_conj_map(a,b,m):\n    '''\n    Write a function to get the vector multiplication of two vector\n    '''\n    return (a[0]*m[b][0]+a[1]*m[b][1],a[0]*m[b][1]-a[1]*m[b][0])\ndef vector_mul_conj_inv_map(a,b,m):\n    '''\n    Write a function to get the vector multiplication of two vector\n    '''\n    return (a[0]*m[b][0]-a[1]*m[b][1],a[0]*m[b][1]+a[1]*m[b][0])\ndef vector_add_map(a,b,m):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]+m[b][0],a[1]+m[b][1])\ndef vector_add_inv_map(a,b,m):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]-m[b][0],a[1]-m[b][1])\ndef vector_add_conj_map(a,b,m):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]+m[b][0],a[1]+m[b][1])\ndef vector_add_conj_inv_map(a,b,m):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]-m[b][0],a[1]-m[b][1])\ndef vector_add_conj(a,b):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]+b[0],a[1]+b[1])\ndef vector_add_conj_inv(a,b):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]-b[0],a[1]-b[1])\ndef vector_add_map(a,b,m):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]+m[b][0],a[1]+m[b][1])\ndef vector_add_inv_map(a,b,m):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]-m[b][0],a[1]-m[b][1])\ndef vector_add_conj_map(a,b,m):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]+m[b][0],a[1]+m[b][1])\ndef vector_add_conj_inv_map(a,b,m):\n    '''\n    Write a function to get the vector add of two vector\n    '''\n    return (a[0]-m[b][0],a[1]-m[b][1])\ndef vector_add(a,b):\n    '''\n    Write a function to get the vector add of two vector\n    '",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = (a.real ** 2 + a.imag ** 2) ** 0.5\n    y = (b.real ** 2 + b.imag ** 2) ** 0.5\n    cos_angle = (a.real * b.real + a.imag * b.imag) / x / y\n    if abs(cos_angle) < 1:\n        angle = cmath.acos(cos_angle)\n    elif cos_angle > 1:\n        angle = 0\n    elif cos_angle < -1:\n        angle = cmath.pi\n    return angle\n",
        "num_ids": 135
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n",
        "num_ids": 17
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = [0] * 2\n    ans = 0\n    for i in range(len(string)): \n        if string[i] == '0': \n            count[0] += 1\n        elif string[i] == '1': \n            count[1] += 1\n        if count[0] - count[1] > ans: \n            ans = count[0] - count[1]\n    return ans\n",
        "num_ids": 103
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    for i in range(0, length): \n        if string[i] == '0': \n            string = string[i+1:]\n            length -= 1\n        else: \n            string = string[i+1:]\n            length -= 1\n    return length\n",
        "num_ids": 73
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #O(n) time and O(n) space\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        zeros += string[i] == \"0\"\n        ones += string[i] == \"1\"\n        if zeros == ones:\n            max_diff = max(max_diff, zeros-ones)\n        elif zeros > ones:\n            max_diff = max(max_diff, zeros-ones)\n            zeros = ones\n        elif ones > zeros:\n            max_diff = max(max_diff, zeros-ones)\n            ones = zeros\n    return max_diff\n",
        "num_ids": 166
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length, curr_length = 0, 0\n    zeros, ones = 0, 0\n    for c in string:\n        if c == '0':\n            zeros += 1\n        else:\n            ones += 1\n        curr_length += 1\n        if curr_length - zeros > max_length:\n            max_length = curr_length - zeros\n    return max_length\n",
        "num_ids": 98
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    start_bit = 0\n    max_len = 0\n    max_len_count = 0\n    while start_bit < len(string):\n        if string[start_bit] == \"0\":\n            count = 0\n            for i in range(start_bit, len(string)):\n                if string[i] == \"0\":\n                    count += 1\n                else:\n                    break\n            max_len = max(max_len, count)\n            max_len_count = max(max_len_count, count)\n        else:\n            count = 0\n            for i in range(start_bit, len(string)):\n                if string[i] == \"1\":\n                    count += 1\n                else:\n                    break\n            max_len = max(max_len, count)\n            max_len_count = max(max_len_count, count)\n        start_bit += 1\n    return max_len_count - max_len\n",
        "num_ids": 224
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    curr_zeros = 0\n    curr_ones = 0\n    max_zeros = 0\n    max_ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_zeros += 1\n            curr_ones = 0\n        else:\n            curr_ones += 1\n            curr_zeros = 0\n        max_zeros = max(max_zeros, curr_zeros)\n        max_ones = max(max_ones, curr_ones)\n    return max(max_ones, max_zeros)\n",
        "num_ids": 156
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # One by one, check if all chars are 0 or 1, and update the result.\n    \n    # Edge case: single '1' in the string\n    if string == '1': return 0\n    if string == '0': return -1\n    \n    start = 0\n    result = 0\n    \n    while start < len(string):\n        if string[start] == '1':\n            start += 1\n        else:\n            end = start + 1\n            while end < len(string) and string[end] == '0':\n                end += 1\n            result = max(result, (end - start) - 1)\n            start = end\n    return result",
        "num_ids": 156
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    \n    # Keep track of the previous zero and one counts\n    prev_zero_count = 0\n    prev_one_count = 0\n    \n    # Count the current zero and one counts\n    curr_zero_count = 0\n    curr_one_count = 0\n    \n    # Find the maximum difference between the current zero and one counts and store it\n    max_diff = 0\n    \n    # Count the number of zeros and ones in the current string\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_zero_count += 1\n        else:\n            curr_one_count += 1\n        \n        # If the current zero and one counts are same as the previous zero and one counts, store the current max_diff\n        if curr_zero_count == prev_zero_count and curr_one_count == prev_one_count:\n            max_diff = max(max_diff, abs(curr_zero_count - curr_one_count))\n        \n        # Update the previous zero and one counts\n        if string[i] == '0':\n            prev_zero_count = curr_zero_count\n        else:\n            prev_one_count = curr_one_count\n    \n    return max_diff\n",
        "num_ids": 318
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    substring = []\n    for i in range(len(string)): \n        substring.append(string[i:i+3])\n        #print(substring)\n",
        "num_ids": 46
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        curr_substr = string[i:i+2]\n        if curr_substr.startswith('00'):\n            max_diff = max(max_diff, len(curr_substr) - len('00'))\n        elif curr_substr.startswith('01'):\n            max_diff = max(max_diff, len(curr_substr) - len('01'))\n        else:\n            pass\n    return max_diff\n",
        "num_ids": 135
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm = max(a,b)\n    for i in range(1, lcm):\n        if a % i == 0 and b % i == 0:\n            lcm = i\n    return lcm\n",
        "num_ids": 51
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count = 1\n    # using the math module to find the greatest common divisor \n    # which is used to divide the numbers\n    while(b%a!=0):\n        b = b%a\n        count = count + 1\n    return a*count\n",
        "num_ids": 64
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors=[]\n    if (a == 0):\n        print(\"Error: First number cannot be zero\")\n        return\n    elif (b == 0):\n        print(\"Error: Second number cannot be zero\")\n        return\n    else:\n        divisors = getDivisors(a)\n        for i in range(len(divisors)):\n            if (divisors[i] in getDivisors(b)):\n                divisors[i] = 1\n            else:\n                divisors[i] = 0\n        return sum(divisors)\n",
        "num_ids": 139
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    res = 1\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            res *= i\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    x = []\n    while (b!=0):\n        x.append(b)\n        b = a%b\n        a = b\n    \n    if len(x) == 0:\n        return 1\n    else:\n        return x[-1]\n    \n    \ndef is_prime(a):\n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    \n    if (a < 2): \n        return False\n    \n    for i in range(2,a):\n        if (a%i == 0):\n            return False\n    return True\n    \n    \ndef is_palindrome(a):\n    '''\n    Write a python function to find whether a given number is palindrome or not.\n    '''\n    \n    x = str(a)\n    n = len(x)\n    for i in range(0,n):\n        if x[i]!= x[n-i-1]:\n            return False\n    return True\n    \n    \ndef factorial(a):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    \n    if a == 0 or a == 1:\n        return 1\n    else:\n        return a * factorial(a-1)\n    \n    \ndef fibonacci(a):\n    '''\n    Write a python function to find the nth number of the fibonacci sequence.\n    '''\n    \n    if a == 0 or a == 1:\n        return a\n    else:\n        return fibonacci(a-1) + fibonacci(a-2)\n    \n    \ndef reverse(a):\n    '''\n    Write a python function to find the reverse of a given number.\n    '''\n    \n    if a == 0:\n        return 0\n    else:\n        return 10*reverse(a//10) + a%10\n    \n    \ndef is_square(a):\n    '''\n    Write a python function to find whether a given number is a perfect square or not.\n    '''\n    \n    if a < 0:\n        return False\n    else:\n        if (a**0.5)%1 == 0:\n            return True\n        else:\n            return False\n    \n    \ndef is_harshad(a):\n    '''\n    Write a python function to find whether a given number is a harshad number or not.\n    '''\n    \n    if (a%sum(a,10)) == 0:\n        return True\n    else:\n        return False\n    \n    \ndef next_harshad(a):\n    '''\n    Write a python function to find the next harshad number of a given number.\n    '''\n    \n    if is_harshad(a) == True:\n        if is_harshad(a+1) == False:\n            return a+1\n    return -1\n    \n    \ndef palindrome_number(a):\n    '''\n    Write a python function to find whether a given number is palindrome or not.\n    '''\n    \n    x = str(a)\n    n = len(x)\n    if x == x[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef prime_number(a):\n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    \n    if (a < 2):\n        return False\n    elif a == 2:\n        return True\n    else:\n        for i in range(2,a):\n            if (a%i == 0):\n                return False\n    return True\n    \n    \ndef perfect_number(a):\n    '''\n    Write a python function to find whether a given number is perfect number or not.\n    '''\n    \n    if (a%sum(a,1) == 0):\n        return True\n    else:\n        return False\n    \n    \ndef binomial(a,b):\n    '''\n    Write a python function to find the binomial coefficient of two given numbers.\n    '''\n    \n    if (a > b):\n        x = a\n        a = b\n        b = x\n    if (b == 0):\n        return 1\n    else:\n        return (a*(a-1))//b\n    \n    \ndef find_prime_factors(a):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    \n    x = []\n    while (a!= 1):\n        if (is_prime(a) == True):\n            x.append(a)\n            break\n        else:\n            for i in range(2,a):\n                if (a%i == 0):\n                    x.append(i)\n                    a /= i\n                    break\n    return x\n    \n    \ndef count_divisors(a):\n    '''\n    Write a python function to find the number of divisors of a given number.\n    '''\n    \n    x = 1\n    for i in range(2,a):\n        if (a%i == 0):\n            x += 1\n    return x\n    \n    \ndef factors(a):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    \n    x = []\n    while (a!= 1):\n        if (is_prime(a) == True):\n            x.append(a)\n            break\n        else:\n            for i in range(2,a):\n                if (a%i == 0):\n                    x.append(i)\n                    a /= i\n                    break\n    return x\n    \n    \ndef palindrome_number_2(a):\n    '''\n    Write a python function to find whether a given number is palindrome or not.\n    '''\n    \n    x = str(a)\n    n = len(x)\n    if x == x[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_permutation(a,b):\n    '''\n    Write a python function to find whether a given string is a permutation of another string or not.\n    '''\n    \n    x = sorted(a)\n    y = sorted(b)\n    if (x == y):\n        return True\n    else:\n        return False\n    \n    \ndef triangle_number(a):\n    '''\n    Write a python function to find the nth triangular number.\n    '''\n    \n    if (a == 0 or a == 1):\n        return a\n    else:\n        return triangle_number(a-1) + a\n    \n    \ndef is_right_angle(a,b,c):\n    '''\n    Write a python function to find whether a given triangle is right angled or not.\n    '''\n    \n    if (a**2 + b**2 == c**2):\n        return True\n    else:\n        return False\n    \n    \ndef base_exponent(a,b):\n    '''\n    Write a python function to find the base-n exponential of a given number.\n    '''\n    \n    if (a == 0):\n        return 1\n    else:\n        return a*base_exponent(a,b-1)\n    \n    \ndef is_permutation(a,b):\n    '''\n    Write a python function to find whether a given string is a permutation of another string or not.\n    '''\n    \n    x = sorted(a)\n    y = sorted(b)\n    if (x == y):\n        return True\n    else:\n        return False\n    \n    \ndef is_anagram(a,b):\n    '''\n    Write a python function to find whether a given string is a permutation of another string or not.\n    '''\n    \n    x = sorted(a)\n    y = sorted(b)\n    if (x == y):\n        return True\n    else:\n        return False\n    \n    \ndef sum_of_divisors(a):\n    '''\n    Write a python function to find the sum of the divisors of a given number.\n    '''\n    \n    x = []\n    for i in range(1,a):\n        if (a%i == 0):\n            x.append(i)\n    return sum(x)\n    \n    \ndef is_perfect_square(a):\n    '''\n    Writ",
        "num_ids": 4
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    from math import sqrt\n    lcm=a*b/sqrt(a**2+b**2)\n    return lcm\n",
        "num_ids": 34
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    list1 = list(str(a))\n    list2 = list(str(b))\n    \n    res = int(list1[0]) + int(list2[0])\n    \n    for i in range(1, len(list1)):\n        res += int(list1[i]) * int(list2[i])\n    \n    return res\n",
        "num_ids": 89
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Iterate over all the divisors in reverse order \n    for divisor in range(a,1,-1): \n        # If both divisors are divisible, \n        if a % divisor == 0 and b % divisor == 0:\n            # Both the numbers have common divisors and \n            # the common divisor can be used to reduce both the numbers to their factors\n            return (divisor + a // divisor + b // divisor)\n    # If no common divisor is found, return 0\n    return 0\n",
        "num_ids": 135
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0 or b==0:\n        return 0\n    else:\n        div=[]\n        for i in range(2,min(a,b)+1):\n            if a%i==0 and b%i==0:\n                div.append(i)\n        return sum(div)\ndef div(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if a==0 or b==0:\n        return 0\n    else:\n        if a>b:\n            div=a\n        else:\n            div=b\n        while div>0:\n            if a%div==0 and b%div==0:\n                return div\n            div=div-1\n",
        "num_ids": 75
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(2,int(b**0.5+1)):\n        if (a%i == 0) and (b%i == 0):\n            return i\n    return 0\n",
        "num_ids": 48
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Return the result of the multiplication of x and y.\n    return x * y\n",
        "num_ids": 22
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # print(\"multiply_int:\", x, y)\n    x = int(x)\n    y = int(y)\n    if x >= 0 and y >= 0:\n        return x * y\n    else:\n        return (x * y) * -1\n",
        "num_ids": 66
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \n    \ndef nth_fibonacci(n):\n    '''\n    Return the nth fibonacci number\n    '''\n    return fibonacci(n-1) + fibonacci(n-2)\n",
        "num_ids": 22
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    else:\n        return x + multiply_int(x, y-1)\n",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # long = list(filter(lambda x: len(x) > n, str))\n    # print(long)\n    # return long\n    return filter(lambda x: len(x) > n, str)\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    answer = []\n    for word in str:\n        if len(word) > n:\n            answer.append(word)\n    return answer\n",
        "num_ids": 36
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    return all([all(map(lambda x: x == sum(my_matrix[i][:i] + my_matrix[i][i+1:]), range(len(my_matrix)))) for i in range(len(my_matrix))])\n",
        "num_ids": 88
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def is_magic(my_matrix):\n        '''\n        Write a function to calculate whether the matrix is a magic square.\n        '''\n        \n        #check if the length of the matrix is not equal to the square\n        if len(my_matrix)!= len(my_matrix[0]):\n            return False\n        #check if the sum of the main diagonal is equal to the sum of the sum of the diagonal\n        elif sum(my_matrix[i][i] for i in range(len(my_matrix)))!= sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))):\n            return False\n        #check if the sum of the main diagonal is equal to the sum of the sum of the diagonal\n        elif sum(my_matrix[i][i] for i in range(len(my_matrix)))!= sum(my_matrix[len(my_matrix)-1-i][i] for i in range(len(my_matrix))):\n            return False\n        #check if the sum of the main diagonal is equal to the sum of the sum of the diagonal\n        elif sum(my_matrix[i][i] for i in range(len(my_matrix)))!= sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))):\n            return False\n        else:\n            return True\n",
        "num_ids": 317
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sums = []\n    col_sums = []\n    for i in range(len(my_matrix)):\n        row_sums.append(sum(my_matrix[i]))\n        col_sums.append(sum(row_sums[i]))\n    \n    diag_sum = 0\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n",
        "num_ids": 112
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (len(my_matrix) == 0) or (len(my_matrix[0]) == 0):\n        return False\n    for row in my_matrix:\n        if (len(row)!= len(my_matrix)):\n            return False\n        if (sum(row)!= sum(my_matrix[0])):\n            return False\n    \n    #If this line is reached then the matrix is a magic square\n    return True\n",
        "num_ids": 109
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # The idea is to loop through each element in each row\n    # and check that each element is equal to its row and its column\n    # plus the right diagonal element.\n    # If not, the matrix is not a magic square\n    # To implement this, we must consider each cell\n    # as a bit (to check if it is in the bit column or the bit row)\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[row])):\n            if not is_magic_square(my_matrix, row, col):\n                return False\n    return True\n",
        "num_ids": 146
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    test_matrix = [[],[],[]]\n",
        "num_ids": 13
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # convert all to integers\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            my_matrix[i][j] = int(my_matrix[i][j])\n    # row sum\n    for i in range(len(my_matrix)):\n        rowsum = 0\n        for j in range(len(my_matrix[0])):\n            rowsum += my_matrix[i][j]\n        if rowsum!= sum(my_matrix[i]):\n            return False\n    # col sum\n    for j in range(len(my_matrix[0])):\n        colsum = 0\n        for i in range(len(my_matrix)):\n            colsum += my_matrix[i][j]\n        if colsum!= sum(my_matrix[:,j]):\n            return False\n    # diag sum\n    diagsum = 0\n    for i in range(len(my_matrix)):\n        diagsum += my_matrix[i][i]\n    if diagsum!= sum(my_matrix.diagonal()):\n        return False\n    return True\n    \n",
        "num_ids": 293
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_list = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for row_index in xrange(9):\n        for col_index in xrange(9):\n            sum_list[my_matrix[row_index][col_index] - 1] += 1\n    if sum(sum_list)!= 45:\n        return False\n    for index in xrange(9):\n        sum_list[index] = 0\n        sum_list[index + 3] = 0\n    return True\n",
        "num_ids": 127
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix is square\n    if len(my_matrix) == len(my_matrix[0]):\n        # Calculate the row sums\n        row_sums = [sum(row) for row in my_matrix]\n        # Calculate the column sums\n        col_sums = [sum([row[i] for row in my_matrix]) for i in range(len(my_matrix[0]))]\n        # Calculate the diagonals\n        diag_1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n        diag_2 = sum([my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))])\n        # Calculate the sum of the rows, column and diagonals\n        total_sum = sum(row_sums) + sum(col_sums) + diag_1 + diag_2\n        # If the sum is equal to the total, return true\n        if total_sum == len(my_matrix) * (len(my_matrix) + 1) / 2:\n            return True\n        else:\n            return False\n    # If the matrix is not square, return false\n    else:\n        return False\n    \ndef rotate_matrix(my_matrix):\n    '''\n    Write a function to rotate a square matrix 90 degrees clockwise.\n    '''\n    # Base case: if the matrix is 0 or 1 elements long, do nothing\n    if len(my_matrix) <= 1:\n        return my_matrix\n    # Otherwise, we will cut off the middle element and recurse\n    else:\n        # Create a list of the first row\n        first_row = my_matrix[0]\n        # Cut the middle element off\n        mid_elem = my_matrix[len(my_matrix) / 2]\n        # Recurse on the remaining rows\n        rest_rows = my_matrix[1:]\n        # Rotate the matrix\n        rotated_matrix = [list(item) for item in zip(*rest_rows)]\n        # Create a new list that is the first row of the rotated matrix\n        new_first_row = [first_row[-1]] + first_row[:-1]\n        # Append the new first row to the rotated matrix\n        rotated_matrix.append(new_first_row)\n        # Recurse on the remaining rows\n        rotated_matrix += [list(item) for item in zip(*rest_rows[::-1])]\n        # Rotate the matrix 90 degrees\n        rotated_matrix = [list(item) for item in zip(*rotated_matrix[::-1])]\n        # Rotate the matrix back to normal\n        rotated_matrix = [list(item) for item in zip(*rotated_matrix)]\n        # Return the rotated matrix\n        return rotated_matrix\n",
        "num_ids": 354
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        raise ValueError(\"Not square\")\n    if len(my_matrix) == 1:\n        raise ValueError(\"Not square\")\n    if len(my_matrix) == 2:\n        return True\n    # Checks for mirror symmetry\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                raise ValueError(\"Not a magic square\")\n    # Checks for sum of elements in each row, each column, and both diagonals\n    for i in range(0, len(my_matrix)):\n        if sum(my_matrix[i])!= 45:\n            raise ValueError(\"Not a magic square\")\n        if sum(my_matrix[i][i] for i in range(len(my_matrix)))!= 45:\n            raise ValueError(\"Not a magic square\")\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(len(my_matrix)):\n        diag1_sum += my_matrix[i][i]\n        diag2_sum += my_matrix[i][len(my_matrix)-1-i]\n    if diag1_sum!= 45 or diag2_sum!= 45:\n        raise ValueError(\"Not a magic square\")\n    return True\n",
        "num_ids": 363
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for item in nums:\n        count[item] += 1\n    return max(count, key=count.get)\n",
        "num_ids": 40
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(lambda:0)\n    for item in nums:\n        counts[item] += 1\n    return max(counts, key=lambda k: counts[k])\n",
        "num_ids": 48
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    m = defaultdict(int)\n    for i in nums:\n        m[i] += 1\n    return max(m, key=m.get)\n    \ndef min_pairs_to_remove(nums):\n    '''\n    Write a function to find the minimum number of pairs that you have to remove to make the array \n    from any given list unique.\n    '''\n    m = defaultdict(int)\n    for i in nums:\n        m[i] += 1\n    count = 0\n    for k,v in m.items():\n        if v > 1:\n            count += v-1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_occurrences = defaultdict(int)\n    for n in nums:\n        num_occurrences[n] += 1\n    return max(num_occurrences, key = num_occurrences.get)\n",
        "num_ids": 56
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums.sort()\n    max_occurrence = 1\n    max_freq_item = nums[0]\n    for i in xrange(1,len(nums)):\n        if nums[i] == nums[i-1]:\n            max_occurrence += 1\n        elif nums[i] == nums[i-1]+1:\n            max_occurrence = 1\n        else:\n            if max_occurrence > max_freq_item:\n                max_freq_item = nums[i]\n    return max_freq_item\n    \ndef remove_all(nums,val):\n    '''\n    Given an integer array, remove all elements that is equal to val.\n    '''\n    for i in xrange(len(nums)):\n        if nums[i] == val:\n            nums[i] = 0\n",
        "num_ids": 36
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return 0\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.items(), key=lambda x: x[1])[0]\n",
        "num_ids": 59
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.items(), key=lambda x: x[1])\n",
        "num_ids": 45
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(lambda: 0)\n    for i in nums:\n        d[i] += 1\n    return max(d, key=d.get)\n",
        "num_ids": 42
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n",
        "num_ids": 27
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    result = None\n    max_val = 0\n    \n    for num in nums:\n        if nums[num] > max_val:\n            max_val = nums[num]\n            result = num\n    \n    return result\n",
        "num_ids": 61
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = ''\n    for i in str1:\n        if i not in 'AEIOUaeiou':\n            str2 = str2 + i\n        elif i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            str2 = str2 + i + i\n    return str2\n",
        "num_ids": 88
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    # step1 : input validation\n    if not isinstance(str1, str):\n        return(\"\")\n    # step2 : assign empty string\n    str2 = \"\"\n    for i in str1:\n        if i in vowels:\n            str2 = str2 + i\n    # step3 : return reversed string\n    return str2\n",
        "num_ids": 95
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = []\n    for char in str1:\n        if char in vowels:\n            new_str.append(char)\n    new_str.reverse()\n    new_str = ''.join(new_str)\n    return new_str\n",
        "num_ids": 77
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reverse_str1 = ''\n    for i in str1:\n        if i not in vowels:\n            reverse_str1 = reverse_str1 + i\n    return reverse_str1[::-1]\n",
        "num_ids": 66
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    list1 = list(str1)\n    vowels = 'aeiou'\n    length = len(list1) - 1\n    for i in range(length):\n        if list1[i] in vowels and list1[length] in vowels:\n            list1[i], list1[length] = list1[length], list1[i]\n    return ''.join(list1)\n",
        "num_ids": 97
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = 'aeiou'\n    str1 = [x for x in str1 if x not in vowel]\n    str1.reverse()\n    str1 = ''.join(str1)\n    return str1\n",
        "num_ids": 55
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    l = list(str1)\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] not in vowels:\n            i+=1\n        elif l[j] not in vowels:\n            j-=1\n        else:\n            l[i],l[j] = l[j],l[i]\n            i+=1\n            j-=1\n    return ''.join(l)\nprint(reverse_vowels('abcdefg'))\n",
        "num_ids": 140
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    list1 = list(str1)\n    list2 = []\n    for i in list1:\n        if i in vowels:\n            list2.append(i)\n    for i in list1:\n        if i not in vowels:\n            list2.append(i)\n    list2.reverse()\n    newstring = ''\n    for i in list2:\n        newstring += i\n    return newstring\n    \ndef reverse_vowels_2(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    list1 = list(str1)\n    list2 = []\n    for i in list1:\n        if i in vowels:\n            list2.append(i)\n    list2.reverse()\n    newstring = ''\n    for i in list2:\n        newstring += i\n    return newstring\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1849
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    string = [i for i in str1]\n    vowels_index = [i for i, letter in enumerate(string) if letter in vowels]\n    vowels_index.reverse()\n    for i in vowels_index:\n        string[i] = string[i].swapcase()\n    return ''.join(string)\n",
        "num_ids": 98
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in str1:\n        if i in vowels:\n            str2 = i + str2\n        else:\n            str2 = str2 + i\n    return str2\n",
        "num_ids": 67
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for item in tup1:\n        s += str(item) +''\n    return s[:-1]\n",
        "num_ids": 34
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i)\n    return string\n",
        "num_ids": 28
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Using str() is incorrect. It will not work if the tuple includes \n    # strings with different lengths.\n    s = ''\n    for elem in tup1:\n        s = s + str(elem) +''\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for item in tup1:\n        string = string + str(item) +''\n    return string\n",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = str(tup1)\n    return tup1\n",
        "num_ids": 20
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = \"\"\n    for i in tup1:\n        tup2 = tup2 + i + \" \"\n    return tup2\n",
        "num_ids": 38
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    #return ''.join(tup1)\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == None or len(nums) == 0:\n        return 0\n    s = 0\n    for num in nums:\n        if num < 0:\n            s += num\n    return s\n",
        "num_ids": 51
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-1*num for num in nums if num < 0])\n",
        "num_ids": 21
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 29
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total = total + i\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(i for i in nums if i < 0)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    for i in xrange(len(nums)):\n        if nums[i] < 0:\n            return nums[i]\n    return sum(nums)\n",
        "num_ids": 70
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    elif nums[0] < 0:\n        return nums[0] + sum_negativenum(nums[1:])\n    else:\n        return 0 + sum_negativenum(nums[1:])\n",
        "num_ids": 69
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1) \n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        return hexagonal_num(n-1) + 2*hexagonal_num(n-2) + hexagonal_num(n-3)\n",
        "num_ids": 87
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n * (2 * n + 1)) / 2)\n",
        "num_ids": 19
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Hexagonal number is n(n+1)/2\n    return (n*(n+1))/2\n",
        "num_ids": 29
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) \n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return (2 * (n-1))**2 + 1\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    return (nums.count(0) / float(n))\n",
        "num_ids": 27
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for n in nums:\n        if n == 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n=len(nums)\n    p = 0\n    q = 0\n    for i in nums:\n        if i == 0:\n            p += 1\n        else:\n            q += 1\n    return p/q\n",
        "num_ids": 56
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n    return float(zeroes)/float(len(nums))\ndef find_letter(string, letter):\n    '''\n    Write a function that returns the first index at which letter occurs in string. \n    If letter is not found, return -1.\n    '''\n    for i in range(len(string)):\n        if string[i] == letter:\n            return i\n    return -1\ndef find_frequencies(string):\n    '''\n    Write a function to return a dictionary of the frequencies of each character in a string.\n    '''\n    freq_dict = {}\n    for i in string:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\ndef find_duplicate(nums):\n    '''\n    Write a function to find the duplicate number in an array of integers\n    where all elements are between 0 and n - 1, and n > 1.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == i:\n            return i\n    return -1\ndef num_duplicates(nums):\n    '''\n    Write a function to find the total number of duplicates in a sorted array of integers.\n    '''\n    n = len(nums)\n    if n == 0 or n == 1:\n        return 0\n    count = 0\n    for i in range(n-1):\n        if nums[i] == nums[i+1]:\n            count += 1\n    return count\ndef count_consecutive_num_in_list(nums, k):\n    '''\n    Write a function to count the number of continuous numbers with consecutive digits that\n    have the same number of 1s and 0s.\n    '''\n    if len(nums) < k:\n        return 0\n    count = 0\n    start_num = nums[0]\n    for i in range(1, k):\n        if nums[i]!= nums[i-1]:\n            if nums[i] - start_num == 1:\n                count += 1\n            else:\n                start_num = nums[i]\n    if nums[-1] - start_num == 1:\n        count += 1\n    return count\ndef find_max_consecutive_ones(nums):\n    '''\n    Write a function to find the maximal consecutive 1s.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in nums:\n        if i == 1:\n            current_count += 1\n        else:\n            if max_count < current_count:\n                max_count = current_count\n            current_count = 0\n    return max_count\ndef find_max_consecutive_ones_in_list(nums):\n    '''\n    Write a function to find the maximal consecutive 1s in a list.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in nums:\n        if i == 1:\n            current_count += 1\n        else:\n            if max_count < current_count:\n                max_count = current_count\n            current_count = 0\n    return max_count\ndef find_max_consecutive_ones_in_list_recursive(nums):\n    '''\n    Write a function to find the maximum consecutive 1s in a list.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1 if nums[0] == 1 else 0\n    if nums[0] == 0:\n        return 0\n    max_ones = 0\n    if nums[0] == 1:\n        max_ones += 1\n    max_ones = max_ones + find_max_consecutive_ones_in_list_recursive(nums[1:])\n    return max_ones\ndef largest_number_in_list(nums):\n    '''\n    Write a function to find the largest number that can be formed by concatenating the given numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_num = ''\n    for i in nums:\n        max_num += str(i)\n    return int(max_num)\ndef find_max_sub_matrix(matrix):\n    '''\n    Write a function to find the entry with the maximum absolute difference between its row and column sums.\n    '''\n    m, n = len(matrix), len(matrix[0])\n    col_sum = [0]*n\n    for i in range(n):\n        col_sum[i] = sum([matrix[j][i] for j in range(m)])\n    row_sum = [0]*m\n    for i in range(m):\n        row_sum[i] = sum([matrix[i][j] for j in range(n)])\n    max_diff = 0\n    for i in range(m):\n        for j in range(n):\n            abs_diff = abs(row_sum[i] - col_sum[j])\n            if max_diff < abs_diff:\n                max_diff = abs_diff\n    return max_diff\ndef find_max_sub_matrix_2(matrix):\n    '''\n    Write a function to find the entry with the maximum absolute difference between its row and column sums.\n    '''\n    m, n = len(matrix), len(matrix[0])\n    row_sum = [0]*m\n    col_sum = [0]*n\n    for i in range(m):\n        for j in range(n):\n            row_sum[i] += matrix[i][j]\n            col_sum[j] += matrix[i][j]\n    max_diff = 0\n    for i in range(m):\n        for j in range(n):\n            abs_diff = abs(row_sum[i] - col_sum[j])\n            if max_diff < abs_diff:\n                max_diff = abs_diff\n    return max_diff\ndef count_characters(string):\n    '''\n    Write a function to return the number of unique characters in a string.\n    '''\n    char_dict = {}\n    for i in string:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return len(char_dict.keys())\ndef find_first_non_repeating_letter(string):\n    '''\n    Write a function to find the first non-repeating character in a string.\n    '''\n    n = len(string)\n    letter_dict = {}\n    for i in string:\n        if i in letter_dict:\n            letter_dict[i] += 1\n        else:\n            letter_dict[i] = 1\n    for i in range(n):\n        if letter_dict[string[i]] == 1:\n            return string[i]\n    return None\ndef find_nth_non_repeating_letter(string, n):\n    '''\n    Write a function to find the nth non-repeating character in a string.\n    '''\n    n = n - 1\n    letter_dict = {}\n    for i in string:\n        if i in letter_dict:\n            letter_dict[i] += 1\n        else:\n            letter_dict[i] = 1\n    for i in range(n):\n        if letter_dict[string[i]] == 1:\n            return string[i]\n    return None\ndef find_first_k_number(nums, k):\n    '''\n    Write a function to find the first k numbers in an array that are greater than or equal to the number k.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if nums[i] >= k:\n            return i\n    return -1\ndef find_max_distinct_subset(nums):\n    '''\n    Write a function to find the maximum possible sum of distinct numbers in a set of numbers.\n    '''\n    max_su",
        "num_ids": 6
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    count = 0\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            count = count + 1\n    \n    return float(count)/len(nums)\n    \ndef count_letter(letter, string):\n    '''\n    Write a function to count the number of times a given letter occurs in a string.\n    '''\n    \n    count = 0\n    for i in xrange(len(string)):\n        if string[i] == letter:\n            count = count + 1\n    \n    return count\n    \ndef count_odd(nums):\n    '''\n    Write a function to count the number of odd numbers in an array of integers.\n    '''\n    \n    count = 0\n    for i in xrange(len(nums)):\n        if nums[i] % 2!= 0:\n            count = count + 1\n    \n    return count\n    \ndef square_list(nums):\n    '''\n    Write a function to compute the sum of the squares of the numbers in an array.\n    '''\n    \n    total = 0\n    for i in xrange(len(nums)):\n        total = total + nums[i]**2\n    \n    return total\n    \ndef valid_parentheses(string):\n    '''\n    Write a function to check if a string is a valid parentheses.\n    '''\n    \n    stack = []\n    for i in xrange(len(string)):\n        if string[i] == '(':\n            stack.append('(')\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    \ndef str_to_int(string):\n    '''\n    Write a function that takes a string as input and returns the integer value of the string.\n    '''\n    \n    total = 0\n    for i in xrange(len(string)):\n        total = total + (ord(string[i]) - ord('0'))\n    \n    return total\n    \ndef str_to_int_two(string):\n    '''\n    Write a function that takes a string as input and returns the integer value of the string.\n    '''\n    \n    total = 0\n    for i in xrange(len(string)):\n        total = total*10 + (ord(string[i]) - ord('0'))\n    \n    return total\n    \ndef sum_of_digits(n):\n    '''\n    Write a function to compute the sum of digits of a positive integer.\n    '''\n    \n    total = 0\n    while n!= 0:\n        total = total + (n % 10)\n        n = n // 10\n    \n    return total\n    \ndef sum_of_digits_two(n):\n    '''\n    Write a function to compute the sum of digits of a positive integer.\n    '''\n    \n    total = 0\n    while n > 0:\n        total = total + n % 10\n        n = n // 10\n    \n    return total\n    \ndef sum_of_digits_three(n):\n    '''\n    Write a function to compute the sum of digits of a positive integer.\n    '''\n    \n    return sum(map(int, list(str(n))))\n    \ndef reverse_digits(n):\n    '''\n    Write a function to reverse digits of a positive integer.\n    '''\n    \n    total = 0\n    while n!= 0:\n        total = total * 10 + (n % 10)\n        n = n // 10\n    \n    return total\n    \ndef reverse_digits_two(n):\n    '''\n    Write a function to reverse digits of a positive integer.\n    '''\n    \n    return int(str(n)[::-1])\n    \ndef max_product(nums):\n    '''\n    Write a function to find the maximum product of three numbers from an array.\n    '''\n    \n    total = 1\n    for i in xrange(len(nums)):\n        for j in xrange(i+1, len(nums)):\n            for k in xrange(j+1, len(nums)):\n                if nums[i]*nums[j]*nums[k] > total:\n                    total = nums[i]*nums[j]*nums[k]\n    \n    return total\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    \n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram_two(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    \n    if len(str1)!= len(str2):\n        return False\n    \n    chars = {}\n    for i in xrange(len(str1)):\n        if str1[i] in chars:\n            chars[str1[i]] += 1\n        else:\n            chars[str1[i]] = 1\n            \n        if str2[i] in chars:\n            chars[str2[i]] -= 1\n        else:\n            chars[str2[i]] = -1\n    \n    for c in chars:\n        if chars[c]!= 0:\n            return False\n    \n    return True\n    \ndef sort_strings_by_length(strs):\n    '''\n    Write a function that takes an array of strings and returns a new array sorted by length in ascending order.\n    '''\n    \n    strs = sorted(strs, key=lambda s: len(s))\n    return strs\n    \ndef sort_strings_by_length_two(strs):\n    '''\n    Write a function that takes an array of strings and returns a new array sorted by length in ascending order.\n    '''\n    \n    strs = sorted(strs, key=lambda s: len(s))\n    return sorted(strs, key=lambda s: len(s), reverse=True)\n    \ndef non_repeated_substring(s):\n    '''\n    Write a function to find the longest substring that has no repeating characters.\n    '''\n    \n    if len(s) == 0:\n        return ''\n    \n    longest = s[0]\n    cur_len = 1\n    cur_substring = s[0]\n    \n    for i in xrange(1, len(s)):\n        if s[i] not in cur_substring:\n            cur_substring = cur_substring + s[i]\n            cur_len = cur_len + 1\n            if cur_len > len(longest):\n                longest = cur_substring\n        else:\n            if cur_len > len(longest):\n                longest = cur_substring\n            \n            j = cur_substring.index(s[i])\n            cur_substring = cur_substring[j+1:] + s[i]\n            cur_len = len(cur_substring)\n    \n    return longest\n    \ndef non_repeated_substring_two(s):\n    '''\n    Write a function to find the longest substring that has no repeating characters.\n    '''\n    \n    if len(s) == 0:\n        return ''\n    \n    longest = s[0]\n    cur_len = 1\n    cur_substring = s[0]\n    \n    for i in xrange(1, len(s)):\n        if s[i] not in cur_substring:\n            cur_substring = cur_substring + s[i]\n            cur_len = cur_len + 1\n        else:\n            if cur_len > len(longest):\n                longest = cur_substring\n            \n            j = cur_substring.index(s[i])\n            cur_substring = cur_substring[:j] + s[i] + cur_substring[j+1:]\n            cur_len = len(cur_substring)\n    \n    return longest\n    \ndef reverse_vowels(s):\n    '''\n    Write a function that takes a string as input and returns the string with all vowels reverse",
        "num_ids": 21
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / len(nums)\ndef bubblesort(nums):\n    '''\n    Bubble sort, O(n**2)\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\ndef countsort(nums):\n    '''\n    Counting sort, O(n+k)\n    '''\n    nums = [0]*(max(nums)+1)\n    for i in range(len(nums)):\n        nums[i] = nums[i]+1\n    for i in range(len(nums)):\n        nums[i] = nums[i]-1\n    for i in range(len(nums)):\n        nums[i] = nums[i] + 1\n    return nums\ndef insertionsort(nums):\n    '''\n    Insertion sort, O(n**2)\n    '''\n    for i in range(1, len(nums)):\n        j = i-1\n        while nums[j] > nums[i] and j >= 0:\n            nums[j], nums[i] = nums[i], nums[j]\n            j -= 1\n    return nums\ndef mergesort(nums, low, high):\n    '''\n    Merge sort, O(n*logn)\n    '''\n    if low < high:\n        mid = (low+high)/2\n        mergesort(nums, low, mid)\n        mergesort(nums, mid+1, high)\n        merge(nums, low, mid, high)\n    return nums\ndef merge(nums, low, mid, high):\n    '''\n    Merge two sorted arrays\n    '''\n    temp = array('i', [])\n    i = low\n    j = mid+1\n    while i <= mid and j <= high:\n        if nums[i] <= nums[j]:\n            temp.append(nums[i])\n            i += 1\n        else:\n            temp.append(nums[j])\n            j += 1\n    while i <= mid:\n        temp.append(nums[i])\n        i += 1\n    while j <= high:\n        temp.append(nums[j])\n        j += 1\n    for i in range(low, high+1):\n        nums[i] = temp[i-low]\n    return nums\ndef quicksort(nums, low, high):\n    '''\n    Quick sort, O(n*logn)\n    '''\n    if low < high:\n        p = partition(nums, low, high)\n        quicksort(nums, low, p-1)\n        quicksort(nums, p+1, high)\n    return nums\ndef partition(nums, low, high):\n    '''\n    Partition an array and return the index of the pivot\n    '''\n    pivot = nums[high]\n    i = low\n    for j in range(low, high):\n        if nums[j] <= pivot:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n    nums[i], nums[high] = nums[high], nums[i]\n    return i\ndef radixsort(nums):\n    '''\n    Radix sort, O(nk)\n    '''\n    max_digit = 1\n    while max_digit < max(nums):\n        buckets = [array('i', []) for i in range(10)]\n        for num in nums:\n            digit = (num/max_digit)%10\n            buckets[digit].append(num)\n        nums = []\n        for bucket in buckets:\n            nums.extend(bucket)\n        max_digit *= 10\n    return nums\ndef selectsort(nums):\n    '''\n    Select sort, O(n^2)\n    '''\n    for i in range(len(nums)-1):\n        min = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min]:\n                min = j\n        if min!= i:\n            nums[min], nums[i] = nums[i], nums[min]\n    return nums\ndef shellsort(nums):\n    '''\n    Shell sort, O(n**2)\n    '''\n    gap = len(nums)/2\n    while gap > 0:\n        for i in range(gap, len(nums)):\n            j = i\n            while j >= gap and nums[j-gap] > nums[j]:\n                nums[j-gap], nums[j] = nums[j], nums[j-gap]\n                j -= gap\n        gap /= 2\n    return nums\ndef countingsort(nums):\n    '''\n    Counting sort, O(n+k)\n    '''\n    nums = [0]*(max(nums)+1)\n    for i in range(len(nums)):\n        nums[i] = nums[i]+1\n    for i in range(len(nums)):\n        nums[i] = nums[i]-1\n    for i in range(len(nums)):\n        nums[i] = nums[i] + 1\n    return nums\ndef heapsort(nums):\n    '''\n    Heap sort, O(n*logn)\n    '''\n    buildmaxheap(nums)\n    for i in range(len(nums)-1, 0, -1):\n        nums[0], nums[i] = nums[i], nums[0]\n        nums[0] = nums[0] - 1\n        heapify(nums, 0, i)\n    return nums\ndef buildmaxheap(nums):\n    '''\n    Build max heap\n    '''\n    for i in range(len(nums)/2, -1, -1):\n        heapify(nums, i, len(nums))\ndef heapify(nums, root, length):\n    '''\n    Heapify a tree\n    '''\n    l = root*2 + 1\n    r = root*2 + 2\n    if l < length and nums[l] > nums[root]:\n        largest = l\n    else:\n        largest = root\n    if r < length and nums[r] > nums[largest]:\n        largest = r\n    if largest!= root:\n        nums[largest], nums[root] = nums[root], nums[largest]\n        heapify(nums, largest, length)\ndef top_k(nums, k):\n    '''\n    Find the top k numbers\n    '''\n    heaps = array('i', [])\n    for i in range(k):\n        heaps.append(nums[i])\n    for i in range(k, len(nums)):\n        if nums[i] > heaps[0]:\n            heaps[0] = nums[i]\n            heaps = heapify(heaps, 0, k)\n    for i in range(k-1, -1, -1):\n        heaps[0], heaps[i] = heaps[i], heaps[0]\n        heapify(heaps, 0, i)\n    return heaps\ndef move(nums, low, high):\n    '''\n    Move the numbers from low to high\n    '''\n    nums[low], nums[high] = nums[high], nums[low]\ndef selectionsort(nums):\n    '''\n    Select sort, O(n**2)\n    '''\n    for i in range(len(nums)-1):\n        min = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min]:\n                min = j\n        if min!= i:\n            nums",
        "num_ids": 68
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/float(len(nums))\n",
        "num_ids": 39
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/float(len(nums))\n",
        "num_ids": 39
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        if nums[0] == 0:\n            return 1\n        else:\n            return 0\n    c = 0\n    for i in range(n):\n        if nums[i] == 0:\n            c += 1\n    return float(c) / (n - c)\n",
        "num_ids": 95
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero = 0\n    zero = 0\n    for i in nums:\n        if i == 0:\n            zero += 1\n        else:\n            non_zero += 1\n    return float(zero) / non_zero\n",
        "num_ids": 56
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while n > 0:\n        if n % 2 == 1:\n            i += 1\n        n = n >> 1\n    return i\n    \ndef run():\n    print 'Testing is_Sum_Of_Powers_Of_Two'\n    print '---------------------------'\n    print 'Test 1:', is_Sum_Of_Powers_Of_Two(5)\n    print 'Test 2:', is_Sum_Of_Powers_Of_Two(0)\n    print 'Test 3:', is_Sum_Of_Powers_Of_Two(1)\n    print 'Test 4:', is_Sum_Of_Powers_Of_Two(2)\n    print 'Test 5:', is_Sum_Of_Powers_Of_Two(3)\n    print 'Test 6:', is_Sum_Of_Powers_Of_Two(4)\n    print 'Test 7:', is_Sum_Of_Powers_Of_Two(5)\n    print 'Test 8:', is_Sum_Of_Powers_Of_Two(6)\n    print 'Test 9:', is_Sum_Of_Powers_Of_Two(7)\n    print 'Test 10:', is_Sum_Of_Powers_Of_Two(8)\n    print 'Test 11:', is_Sum_Of_Powers_Of_Two(9)\n    print 'Test 12:', is_Sum_Of_Powers_Of_Two(10)\n    print 'Test 13:', is_Sum_Of_Powers_Of_Two(15)\n    print 'Test 14:', is_Sum_Of_Powers_Of_Two(16)\n    print 'Test 15:', is_Sum_Of_Powers_Of_Two(17)\n    print 'Test 16:', is_Sum_Of_Powers_Of_Two(18)\n    print 'Test 17:', is_Sum_Of_Powers_Of_Two(19)\n    print 'Test 18:', is_Sum_Of_Powers_Of_Two(20)\n    print 'Test 19:', is_Sum_Of_Powers_Of_Two(21)\n    print 'Test 20:', is_Sum_Of_Powers_Of_Two(22)\n    print 'Test 21:', is_Sum_Of_Powers_Of_Two(23)\n    print 'Test 22:', is_Sum_Of_Powers_Of_Two(24)\n    print 'Test 23:', is_Sum_Of_Powers_Of_Two(25)\n    print 'Test 24:', is_Sum_Of_Powers_Of_Two(26)\n    print 'Test 25:', is_Sum_Of_Powers_Of_Two(27)\n    print 'Test 26:', is_Sum_Of_Powers_Of_Two(28)\n    print 'Test 27:', is_Sum_Of_Powers_Of_Two(29)\n    print 'Test 28:', is_Sum_Of_Powers_Of_Two(30)\n    print 'Test 29:', is_Sum_Of_Powers_Of_Two(31)\n    print 'Test 30:', is_Sum_Of_Powers_Of_Two(32)\n    print 'Test 31:', is_Sum_Of_Powers_Of_Two(33)\n    print 'Test 32:', is_Sum_Of_Powers_Of_Two(34)\n    print 'Test 33:', is_Sum_Of_Powers_Of_Two(35)\n    print 'Test 34:', is_Sum_Of_Powers_Of_Two(36)\n    print 'Test 35:', is_Sum_Of_Powers_Of_Two(37)\n    print 'Test 36:', is_Sum_Of_Powers_Of_Two(38)\n    print 'Test 37:', is_Sum_Of_Powers_Of_Two(39)\n    print 'Test 38:', is_Sum_Of_Powers_Of_Two(40)\n    print 'Test 39:', is_Sum_Of_Powers_Of_Two(41)\n    print 'Test 40:', is_Sum_Of_Powers_Of_Two(42)\n    print 'Test 41:', is_Sum_Of_Powers_Of_Two(43)\n    print 'Test 42:', is_Sum_Of_Powers_Of_Two(44)\n    print 'Test 43:', is_Sum_Of_Powers_Of_Two(45)\n    print 'Test 44:', is_Sum_Of_Powers_Of_Two(46)\n    print 'Test 45:', is_Sum_Of_Powers_Of_Two(47)\n    print 'Test 46:', is_Sum_Of_Powers_Of_Two(48)\n    print 'Test 47:', is_Sum_Of_Powers_Of_Two(49)\n    print 'Test 48:', is_Sum_Of_Powers_Of_Two(50)\n    print 'Test 49:', is_Sum_Of_Powers_Of_Two(51)\n    print 'Test 50:', is_Sum_Of_Powers_Of_Two(52)\n    print 'Test 51:', is_Sum_Of_Powers_Of_Two(53)\n    print 'Test 52:', is_Sum_Of_Powers_Of_Two(54)\n    print 'Test 53:', is_Sum_Of_Powers_Of_Two(55)\n    print 'Test 54:', is_Sum_Of_Powers_Of_Two(56)\n    print 'Test 55:', is_Sum_Of_Powers_Of_Two(57)\n    print 'Test 56:', is_Sum_Of_Powers_Of_Two(58)\n    print 'Test 57:', is_Sum_Of_Powers_Of_Two(59)\n    print 'Test 58:', is_Sum_Of_Powers_Of_Two(60)\n    print 'Test 59:', is_Sum_Of_Powers_Of_Two(61)\n    print 'Test 60:', is_Sum_Of_Powers_Of_Two(62)\n    print 'Test 61:', is_Sum_Of_Powers_Of_Two(63)\n    print 'Test 62:', is_Sum_Of_Powers_Of_Two(64)\n    print 'Test 63:', is_Sum_Of_Powers_Of_Two(65)\n    print 'Test 64:', is_Sum_Of_Powers_Of_Two(66)\n    print 'Test 65:', is_Sum_Of_Powers_Of_Two(67)\n    print 'Test 66:', is_Sum_Of_Powers_Of_Two(68)\n    print 'Test 67:', is_Sum_Of_Powers_Of_Two(69)\n    print 'Test 68:', is_Sum_Of_Powers_Of_Two(70)\n    print 'Test 69:', is_Sum_Of_Powers_Of_Two(71)\n    print 'Test 70:', is_Sum_Of_Powers_Of_Two(72)\n    print 'Test 71:', is_Sum_Of_Powers_Of_Two(73)\n    print 'Test 72:', is_Sum_Of_Powers_Of_Two(74)\n    print 'Test 73:', is_Sum_Of_Powers_Of_Two(75)\n    print 'Test 74:', is_Sum_Of_Powers_Of_Two(76)\n    print 'Test 75:', is_Sum_Of_Powers_Of_Two(77)\n    print 'Test 76:', is_Sum_Of_Powers_Of_Two(78)\n    print 'Test 77:', is_Sum_Of_Powers_Of_Two(79)\n    print 'Test 78:', is_Sum_Of_Powers_Of_Two(80)\n    print 'Test 79:', is_Sum_Of_Powers_Of_Two(81)\n    print 'Test 80:', is_Sum_Of_Powers_Of_Two(82)\n    print 'Test 81:', is_Sum_Of_Powers_Of_Two(83)\n    print 'Test 82:', is_Sum_Of_Powers_Of_Two(84)\n    print 'Test 83:', is_Sum_Of_Powers_Of_Two(85)\n    print 'Test 84:', is_Sum_Of_Powers_Of",
        "num_ids": 1996
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while(n): \n        if(n%2==0): \n            n = n/2\n        else: \n            count+=1\n            n-=1\n    if(count>1): \n        return False\n    else: \n        return True\ndef is_Sum_Of_Powers_Of_Two2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two(): \n    assert(is_Sum_Of_Powers_Of_Two(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two(26)==False)\ndef is_Sum_Of_Powers_Of_Two_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    elif n%2==0: \n        return is_Sum_Of_Powers_Of_Two_2(n/2)\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_2(): \n    assert(is_Sum_Of_Powers_Of_Two_2(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_2(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_2(26)==False)\ndef is_Sum_Of_Powers_Of_Two_3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_3(): \n    assert(is_Sum_Of_Powers_Of_Two_3(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_3(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_3(26)==False)\ndef is_Sum_Of_Powers_Of_Two_4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_4(): \n    assert(is_Sum_Of_Powers_Of_Two_4(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(17)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(23)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(24)==False)\n    assert(is_Sum_Of_Powers_Of_Two_4(25)==True)\n    assert(is_Sum_Of_Powers_Of_Two_4(26)==False)\ndef is_Sum_Of_Powers_Of_Two_5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return True\n    else: \n        return False\ndef test_is_Sum_Of_Powers_Of_Two_5(): \n    assert(is_Sum_Of_Powers_Of_Two_5(0)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(1)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(2)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(3)==False)\n    assert(is_Sum_Of_Powers_Of_Two_5(5)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(14)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(15)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(16)==True)\n    assert(is_Sum_Of_Powers_Of_Two_5(17)==False)",
        "num_ids": 258
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    x = 0\n    while n > 0:\n        r = n % 2\n        if r == 1:\n            x += 1\n        n = n / 2\n    if x > 0:\n        return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = n\n    while s>=0:\n        if s%2==0:\n            s/=2\n        else:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Base case\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    \n    #Recursive case\n    while n % 2 == 0:\n        n = n / 2\n        \n    if n == 1:\n        return True\n    else:\n        return False\n    \n    \n    ",
        "num_ids": 79
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    binary = bin(n)[2:]\n    print \"Given Number :\",n\n    print \"Binary Representation :\",binary\n    \n    result = False\n    \n    for i in range(len(binary)):\n        if(binary[i] == '1'):\n            count = 0\n            for j in range(i,len(binary)):\n                if(binary[j] == '1'):\n                    count+=1\n                else:\n                    break\n            if(count > 1):\n                result = True\n                break\n    \n    if(result == True):\n        print \"Yes Sum of Powers of 2\"\n    else:\n        print \"No Sum of Powers of 2\"\n        \ndef is_Pentagonal_Number(n):\n    '''\n    Write a python function to check whether the given number can be expressed as a pentagonal number or not.\n    '''\n    if(n**2 == (n*(3*n-1))/2):\n        print \"Yes It is Pentagonal Number\"\n    else:\n        print \"No It is not Pentagonal Number\"\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Edge Case\n    if n == 0:\n        return True\n    #Using DP\n    dp = [0]*(n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        if 2**i > n:\n            break\n        dp[i] = dp[i-1] + 2**(i-1)\n    #Testing\n    for i in range(2, n+1):\n        if dp[i] == n:\n            return True\n    return False\n",
        "num_ids": 127
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #A clever solution\n    #return n>=0 and bin(n).count('1') == 1\n    #An elegant solution\n    return n>=0 and bin(n).count('1') == 1\n",
        "num_ids": 51
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n_bin = bin(n)[2:]\n    for i in n_bin:\n        if i == '0':\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base case: If n is 0 then return True else return False.\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * 2 * pi\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * PI2\n",
        "num_ids": 9
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n    for x in test_list:\n        if type(x) == list:\n            for y in x:\n                output_list.append(y)\n        else:\n            output_list.append(x)\n    return output_list\n",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # print test_list\n    return [item for sublist in test_list for item in sublist]\n",
        "num_ids": 27
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for element in test_list:\n        if type(element) == list:\n            for item in element:\n                flat_list.append(item)\n        else:\n            flat_list.append(element)\n    return flat_list\n",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # TODO: implement me\n    raise NotImplementedError\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for e in test_list:\n        for i in e:\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for num in test_list:\n        result.extend(num)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        result.add(item)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.extend(i)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n",
        "num_ids": 13
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    start = 0\n    for x in range(n):\n        if nums[start]!= 0:\n            start += 1\n        while nums[start] == 0 and start!= 0:\n            nums[start], nums[start - 1] = nums[start - 1], nums[start]\n            start -= 1\n    return nums\n",
        "num_ids": 95
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        j = min(i, nums[i-1])\n        if j > 1:\n            for k in range(j, 1, -1):\n                if nums[k-1] > nums[k]:\n                    nums[k], nums[k-1] = nums[k-1], nums[k]\n                else:\n                    break\n",
        "num_ids": 105
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    def flip(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    def sort_and_reverse(nums, start, end):\n        if start >= end:\n            return\n        mid = (start + end) // 2\n        sort_and_reverse(nums, start, mid)\n        sort_and_reverse(nums, mid + 1, end)\n        reverse(nums, start, end)\n    \n    n = len(nums)\n    for i in xrange(n // 2, 0, -1):\n        sort_and_reverse(nums, 0, i)\n    return nums\n",
        "num_ids": 238
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in xrange(len(nums)//2):\n        # find the largest number\n        max_index = i\n        for j in xrange(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index!= i:\n            # sort the list, reverse the smaller part and flip the bigger part\n            # use two pointers to flip the smaller part\n            left = max_index - 1\n            right = len(nums) - 1\n            while left < right:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n        else:\n            # no need to flip\n            pass\n    return nums\n",
        "num_ids": 189
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    for i in xrange(l/2):\n        temp = nums[i]\n        nums[i] = nums[l-i-1]\n        nums[l-i-1] = temp\n        nums[:i] = sorted(nums[:i])\n    return nums\n",
        "num_ids": 84
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    n = len(nums)\n    for i in range(int(n / 2)):\n        if nums[i] > nums[n - i - 1]:\n            nums = _reverse(nums, i, n - i - 1)\n            nums = _reverse(nums, 0, i)\n    return nums\n",
        "num_ids": 94
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted = False\n    while not sorted:\n        sorted = True\n        n = len(nums)\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                sorted = False\n                p = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = p\n    return nums\n",
        "num_ids": 102
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        if nums[0] > nums[1]:\n            nums[0], nums[1] = nums[1], nums[0]\n        return nums\n    if len(nums) >= 3:\n        mid = len(nums) // 2\n        left = nums[:mid]\n        right = nums[mid:]\n        pancake_sort(left)\n        pancake_sort(right)\n",
        "num_ids": 143
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(1 for item1,item2,item3 in zip(list1,list2,list3) if item1==item2==item3)\n",
        "num_ids": 39
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(e1 == e2 and e3 == e2 for (e1,e2,e3) in zip(list1, list2, list3))\n",
        "num_ids": 41
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]:\n            if list1[i]==list3[i]:\n                count+=1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2)!= len(list3):\n        return 0\n    else:\n        count = 0\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list2[i] == list3[i]:\n                count += 1\n        return count\n",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            result += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if(isinstance(i,list)):\n            count=count+1\n    return count\n    \ndef find_max(Input):\n    '''\n    Write a function to find maximum integer value in a tuple.\n    '''\n    max_number=Input[0]\n    for i in Input:\n        if(i>max_number):\n            max_number=i\n    return max_number\n",
        "num_ids": 42
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input:\n        if isinstance(item, (list,tuple)):\n            count +=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # return len([x for x in Input if type(x)==list])\n    return len(Input)\n    \ndef find_words(Input):\n    '''\n    Write a function to find number of words present in the given tuple.\n    '''\n    # return len([x for x in Input if type(x)==str])\n    return len(Input)\n",
        "num_ids": 28
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    k=len(Input)\n    n=len(Input[0])\n    l=[]\n    for i in Input:\n        l.append(len(i))\n    \n    a=max(l)\n    return a\n    \nif __name__ == '__main__':\n    Input=((('a','b'),('a','b','c'),'c'),(('a','b'),('c','d')),('c'))\n    print find_lists(Input)\n    ",
        "num_ids": 115
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    if Input == ():\n        return count\n    else:\n        for item in Input:\n            if item == ():\n                count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    cnt = 0\n    for i in range(l):\n        if type(Input[i]) == list:\n            cnt = cnt + 1\n    return cnt\n",
        "num_ids": 51
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not Input:\n        return 0\n    elif Input[0][0] == \"(\" and Input[-1][-1] == \")\":\n        return 1 + find_lists(Input[1:-1])\n    else:\n        return 0\n",
        "num_ids": 61
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == type([]):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n",
        "num_ids": 20
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return abs(arr[-1]-arr[0])\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1] - arr[0]\n    \ndef max_Diff_Pairs(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    a = 0\n    b = 1\n    c = 2\n    return max(arr[-1] - arr[a], arr[-1] - arr[b], arr[-1] - arr[c])\n    \ndef min_element(arr):\n    '''\n    Write a python function to find the minimum element in an array.\n    '''\n    return min(arr)\n    \ndef remove_duplicate(arr):\n    '''\n    Write a python function to remove duplicate elements from an array.\n    '''\n    return list(set(arr))\n    \ndef merge_two_dicts(x, y):\n    '''\n    Write a python function to merge two dictionaries\n    '''\n    return dict(x.items() + y.items())\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a python function to count number of substrings of a string.\n    '''\n    return len(string.split(sub_string)) - 1\n    \ndef count_occurences(string, sub_string):\n    '''\n    Write a python function to count number of occurences of a substring in a string.\n    '''\n    return string.count(sub_string)\n    \ndef remove_whitespace(string):\n    '''\n    Write a python function to remove whitespace from a string.\n    '''\n    return string.replace(' ','')\n    \ndef swap_case(string):\n    '''\n    Write a python function to swap the case of a string.\n    '''\n    return string.swapcase()\n    \ndef remove_vowels(string):\n    '''\n    Write a python function to remove vowels from a string.\n    '''\n    return ''.join(char for char in string if char not in 'aeiouAEIOU')\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    return 1 if n < 2 else n * factorial(n - 1)\n    \ndef digit_count(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\n    \ndef count_vowels(string):\n    '''\n    Write a python function to count number of vowels in a string.\n    '''\n    return sum(1 for char in string if char in 'aeiouAEIOU')\n    \ndef count_consonants(string):\n    '''\n    Write a python function to count number of consonants in a string.\n    '''\n    return sum(1 for char in string if char not in 'aeiouAEIOU')\n    \ndef anagram(s1, s2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef smallest_substring(string, pattern):\n    '''\n    Write a python function to find the smallest substring in a given string which has all the characters of a given string.\n    '''\n    if len(string) == 0 or len(string) < len(pattern):\n        return ''\n    \n    d = {}\n    c = 0\n    min_length = len(string) + 1\n    \n    for char in pattern:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    \n    count = len(d)\n    l = 0\n    for r in range(len(string)):\n        if string[r] in d:\n            d[string[r]] -= 1\n            if d[string[r]] >= 0:\n                count -= 1\n        while count == 0:\n            if r - l + 1 < min_length:\n                min_length = r - l + 1\n                start = l\n            if string[l] in d:\n                d[string[l]] += 1\n                if d[string[l]] > 0:\n                    count += 1\n            l += 1\n    if min_length == len(string) + 1:\n        return ''\n    return string[start:start + min_length]\n    \ndef best_word(string):\n    '''\n    Write a python function to find the longest word in a given string.\n    '''\n    return max(string.split(' '), key=len)\n    \ndef is_valid_date(date):\n    '''\n    Write a python function to check whether a given date is valid.\n    '''\n    day, month, year = date.split('/')\n    return True if len(day) == 2 and len(month) == 2 and len(year) == 4 else False\n    \ndef is_valid_url(url):\n    '''\n    Write a python function to check whether a given url is valid.\n    '''\n    return True if url.startswith('http://') or url.startswith('https://') else False\n    \ndef is_valid_email(email):\n    '''\n    Write a python function to check whether a given email is valid.\n    '''\n    if '@' in email and '.' in email:\n        return True\n    return False\n    \ndef is_number(n):\n    '''\n    Write a python function to check whether a given number is valid.\n    '''\n    try:\n        int(n)\n        return True\n    except ValueError:\n        return False\n    \ndef max_consecutive(arr):\n    '''\n    Write a python function to find the maximum consecutive elements in an array.\n    '''\n    if len(arr) < 2:\n        return arr\n    max_len = 1\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        if arr[i] == arr[i - 1] + 1:\n            max_len += 1\n        else:\n            max_len = 1\n    return max_len\n    \ndef base_converter(num, b):\n    '''\n    Write a python function to convert a number to a different base.\n    '''\n    converted = ''\n    while num > 0:\n        converted = str(num % b) + converted\n        num = num // b\n    return converted\n    \ndef rotate_string(string, shift):\n    '''\n    Write a python function to rotate a string.\n    '''\n    shift %= len(string)\n    return string[shift:] + string[:shift]\n    \ndef is_rotation(string1, string2):\n    '''\n    Write a python function to check whether two strings are rotations of each other.\n    '''\n    return rotate_string(string1, len(string1)) == string2\n    \ndef is_unique(string):\n    '''\n    Write a python function to check whether a string contains all unique characters.\n    '''\n    return len(string) == len(set(string))\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef roman_to_integer(string):\n    '''\n    Write a python function to convert a Roman numeral to an integer.\n    '''\n    romans = {'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}\n    res = 0\n    index = 0\n    while index < len(string):\n        if index < len(string) - 1 and romans[string[index]] < romans[string[index + 1]]:\n            res += romans[string[index + 1]] - romans[string[index]]\n            index += 2\n        else:\n            res += romans[string[index]]\n            index += 1\n    return res\n    \ndef pattern_converter(string, pattern):\n    '''\n    Write a python function to convert a string to a string with the same characters in a given pattern.\n    '''\n    res = ''\n    for char in pattern:\n        res += char * strin",
        "num_ids": 21
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1]-arr[0]\n    for i in range(len(arr)-1):\n        if arr[i+1]-arr[i]>max_diff:\n            max_diff=arr[i+1]-arr[i]\n    return max_diff\n",
        "num_ids": 69
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    min_arr = arr[0]\n    max_arr = arr[-1]\n    max_diff = max_arr - min_arr\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 94
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    else:\n        return max(abs(arr[0]-arr[1]),max_Abs_Diff(arr[1:]))\n",
        "num_ids": 46
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n",
        "num_ids": 21
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0]-arr[1])\n    for i in range(len(arr)-1):\n        if abs(arr[i]-arr[i+1])>max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n    return max_diff\n",
        "num_ids": 75
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[len(arr)-1] - arr[0]\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    import operator\n    n = len(arr)\n    if n<2: return False\n    max_d = 0\n    arr.sort()\n    for i in xrange(n-1):\n        d = abs(arr[i]-arr[i+1])\n        if d>max_d: max_d = d\n    return max_d\n    \nprint max_Abs_Diff([5,6,2,1,4])\n",
        "num_ids": 104
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, -b / a) if n * a >= b else None\n    if b == 0:\n        return (n / a, 0) if n * a <= a else None\n    \n    D = b * b - 4 * a * n\n    if D < 0:\n        return None\n    if D == 0:\n        return (n / (2 * a), -b / (2 * a))\n    x1 = (-b + D ** 0.5) / (2 * a)\n    x2 = (-b - D ** 0.5) / (2 * a)\n    if x1 < x2:\n        return (x1, x2)\n    return (x2, x1)\n",
        "num_ids": 174
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, -b/a)\n    else:\n        a_inv = inverse(a, n)\n        x = (a_inv * b) % n\n        y = (a_inv * n - x) % n\n        return (x, y)\n",
        "num_ids": 72
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        y = n - a * x\n        if y % b == 0:\n            return x, y // b\n",
        "num_ids": 39
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    c = n / a\n    if n % a == 0:\n        return (c, n / a)\n    else:\n        d = n / b\n        if n % b == 0:\n            return (d, n / b)\n        else:\n            return None\n",
        "num_ids": 66
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return [0, 1]\n    elif n < 0:\n        return None\n    elif n < a:\n        return find_solution(b, a, n - b)\n    elif a < b:\n        return find_solution(b, a, n - a)\n    else:\n        return [n // a, a]\n",
        "num_ids": 91
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (b, n/b)\n    else:\n        gcd, s, t = egcd(a, b)\n        if s*n % b == 1:\n            x = (s*n) / b\n            y = n/a\n            return (x, y)\n        else:\n            return None\n",
        "num_ids": 84
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in xrange(n/a):\n        for y in xrange(n/b):\n            if (a*x+b*y) == n:\n                return (x,y)\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return [0, 1]\n    if n < 0:\n        return None\n    if a == 0:\n        return None\n",
        "num_ids": 39
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    import math\n    for x in range(1, n + 1):\n        y = n - x\n        if x * a + y * b == n:\n            return x, y\n    return None\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def is_solution(x, y):\n        return a * x + b * y == n\n    def find_solution_helper(a, b, n):\n        if n == 0:\n            return (a, b)\n        if a < 0:\n            return find_solution_helper(-a, b, n - b)\n        else:\n            return find_solution_helper(a - b, b, n - a)\n    if a < 0:\n        return find_solution_helper(-a, b, n - b)\n    return find_solution_helper(a - b, b, n - a)\n",
        "num_ids": 156
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [el for el in list1 if el not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n",
        "num_ids": 27
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list2)):\n        list1.remove(list2[i])\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n    \n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n<0:\n        return -1\n    if n==0:\n        return 0\n    return n + sum_series(n-2)\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n<2:\n        return n\n    if n%2 == 0:\n        return int((n/2) * ((n+1)/2))\n    else:\n        return int((n/2) * ((n+1)/2) + (n/2) + 1)\n",
        "num_ids": 69
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return n*(n+1)/2\n    else:\n        return n*(n+1)/2 + (n-1)\n",
        "num_ids": 43
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # m = n % 2\n    # if m:\n    #     return n\n    # else:\n    #     return n - 2\n    if n == 0:\n        return 0\n    elif n < 0:\n        return None\n    else:\n        return n + sum_series(n - 2)\n",
        "num_ids": 75
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return n**2\n    else:\n        return n*(n+1)//2\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4) +... + (n-x)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return (n + sum_series(n - 2))\n    else:\n        return (n - 1 + sum_series(n - 3))\n",
        "num_ids": 45
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2)*(l**2)/(4*tan(pi/s))\n    return area\n",
        "num_ids": 29
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 3:\n        return 'Invalid length of polygon'\n    else:\n        return 0.5 * l * s**2\n",
        "num_ids": 35
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*s*l**2)/tan(pi/s)\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l) * (tan(pi / l))**2\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += tan(pi/l)*s**2/4\n    return area\n",
        "num_ids": 35
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    return (s*l/2)*(1+(math.tan(pi/s))**2)**(-1)\n",
        "num_ids": 34
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l <= 0 or s <= 0:\n        return None\n    return (s * l) / (4 * tan(pi / s))\n    \ndef solve_for_b(a, b):\n    '''\n    a^2 + b^2 = c^2\n    2a + b = c\n    a + b = c\n    2a + b = c - a\n    2a = c - b\n    a = (c - b) / 2\n    '''\n    a = (c - b) / 2\n    return a\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # use the formula\n    return 0.25*(s**2)*l*tan(pi/l)\n",
        "num_ids": 28
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    sides = s\n    length = l\n    area = (1/2) * (length * sides) * (length * sides + (length * tan(pi/sides)))\n    print('Area of polygon is:', area)\n",
        "num_ids": 57
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*s*l**2)/(tan(pi/s))\n",
        "num_ids": 23
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [1]\n    divisors_sum = 0\n    i = 1\n    while divisors_sum < n:\n        i += 1\n        divisors = list(range(1, i+1))\n        divisors_sum = sum(divisors)\n    if divisors_sum == n:\n        return True\n    else:\n        return False\ndef div_diff(n):\n    '''\n    Write a function to determine if the difference between the sum of the divisors of two integers is the same.\n    '''\n    divisors_sum = 0\n    divisors = [1]\n    i = 1\n    while divisors_sum < n:\n        i += 1\n        divisors = list(range(1, i+1))\n        divisors_sum = sum(divisors)\n    if divisors_sum == n:\n        return True\n    else:\n        return False\ndef fib(n):\n    '''\n    Write a function to return the nth value of the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\ndef fib_iter(n):\n    '''\n    Write a function to return the nth value of the Fibonacci sequence.\n    '''\n    a,b = 0,1\n    for i in range(n-1):\n        a,b = b,a+b\n    return b\ndef calc_pow(n, m):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    if m == 0:\n        return 1\n    elif m == 1:\n        return n\n    else:\n        return n*calc_pow(n, m-1)\ndef calc_factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*calc_factorial(n-1)\ndef to_bin(n):\n    '''\n    Write a function to convert a decimal integer to binary representation.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%2 + 10*to_bin(int(n/2))\ndef to_dec(n):\n    '''\n    Write a function to convert a binary integer to decimal representation.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + 2*to_dec(int(n/10))\ndef fib_dp(n):\n    '''\n    Write a function to return the nth value of the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        array = [0,1]\n        for i in range(2, n+1):\n            array.append(array[i-1] + array[i-2])\n        return array[n]\ndef is_palindrome(n):\n    '''\n    Write a function to determine if a given integer is a palindrome.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        digit_num = int(math.log10(n)) + 1\n        half_digit_num = int(digit_num/2)\n        for i in range(half_digit_num):\n            if (n%10)!= (n//10**(half_digit_num - i)%10):\n                return False\n        return True\ndef sum_div(n):\n    '''\n    Write a function to determine if the sum of the divisors of an integer is equal to the integer.\n    '''\n    divisors_sum = 0\n    i = 1\n    while divisors_sum < n:\n        i += 1\n        divisors_sum = sum(range(1, i+1))\n    if divisors_sum == n:\n        return True\n    else:\n        return False\ndef sum_div_dp(n):\n    '''\n    Write a function to determine if the sum of the divisors of an integer is equal to the integer.\n    '''\n    divisors_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors_sum += i\n            if i*i!= n:\n                divisors_sum += n/i\n    if divisors_sum == n:\n        return True\n    else:\n        return False\ndef sum_div_iter(n):\n    '''\n    Write a function to determine if the sum of the divisors of an integer is equal to the integer.\n    '''\n    divisors_sum = 0\n    i = 1\n    while divisors_sum < n:\n        i += 1\n        divisors_sum = sum(range(1, i+1))\n    if divisors_sum == n:\n        return True\n    else:\n        return False\ndef sum_div_iter_2(n):\n    '''\n    Write a function to determine if the sum of the divisors of an integer is equal to the integer.\n    '''\n    divisors_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors_sum += i\n            if i*i!= n:\n                divisors_sum += n/i\n    if divisors_sum == n:\n        return True\n    else:\n        return False\ndef sum_div_iter_3(n):\n    '''\n    Write a function to determine if the sum of the divisors of an integer is equal to the integer.\n    '''\n    divisors_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors_sum += i\n            if i*i!= n:\n                divisors_sum += n/i\n    if divisors_sum == n:\n        return True\n    else:\n        return False\ndef sum_div_iter_4(n):\n    '''\n    Write a function to determine if the sum of the divisors of an integer is equal to the integer.\n    '''\n    divisors_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors_sum += i\n            if i*i!= n:\n                divisors_sum += n/i\n    if divisors_sum == n:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_2(n):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_iter(n):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_dp(n):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2",
        "num_ids": 40
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    num = int(n)\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 58
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d = n\n    s1 = 0\n    while d > 1:\n        if n % d == 0:\n            s1 = s1 + d\n        d = d - 1\n    d = n\n    s2 = 0\n    while d > 1:\n        if n % d == 0:\n            s2 = s2 + d\n        d = d - 1\n    if s1 == s2:\n        return True\n    else:\n        return False\n",
        "num_ids": 109
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    else:\n        divs = []\n        for i in range(1,n):\n            if n%i == 0:\n                divs.append(i)\n        if sum(divs) == n:\n            return True\n        else:\n            return False\ndef prime_factors(n):\n    '''\n    Write a function to find the prime factors of an integer. \n    '''\n    divs = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divs.append(i)\n    return divs\ndef is_perm(a, b):\n    '''\n    Write a function to check if two strings are permutations of each other. \n    '''\n    a = a.lower()\n    b = b.lower()\n    if len(a)!= len(b):\n        return False\n    elif a == b:\n        return True\n    else:\n        for i in range(len(a)):\n            if a.count(a[i])!= b.count(b[i]):\n                return False\n        return True\ndef is_anagram(a, b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if len(a)!= len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a.count(a[i])!= b.count(b[i]):\n                return False\n        return True\ndef is_palin(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    n = str(n)\n    if n == n[::-1]:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function to check if a number is a prime number.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\ndef get_factors(n):\n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    if is_prime(n):\n        return [n]\n    else:\n        factors = []\n        for i in range(2,n):\n            if is_prime(i) and n%i == 0:\n                factors.append(i)\n        return factors\ndef nth_root(n, r):\n    '''\n    Write a function to find the nth root of a number.\n    '''\n    root = n**(1/r)\n    return root\ndef is_power(n):\n    '''\n    Write a function to determine if a number is a perfect power.\n    '''\n    root = nth_root(n,2)\n    if root == int(root):\n        return True\n    else:\n        return False\ndef prime_factors(n):\n    '''\n    Write a function to find the prime factors of a number.\n    '''\n    if is_prime(n):\n        return [n]\n    else:\n        factors = []\n        for i in range(2,n):\n            if is_prime(i) and n%i == 0:\n                factors.append(i)\n        return factors\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    else:\n        divs = []\n        for i in range(1,n):\n            if n%i == 0:\n                divs.append(i)\n        if sum(divs) == n:\n            return True\n        else:\n            return False\ndef get_factors(n):\n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    if is_prime(n):\n        return [n]\n    else:\n        factors = []\n        for i in range(2,n):\n            if is_prime(i) and n%i == 0:\n                factors.append(i)\n        return factors\ndef nth_root(n, r):\n    '''\n    Write a function to find the nth root of a number.\n    '''\n    root = n**(1/r)\n    return root\ndef is_power(n):\n    '''\n    Write a function to determine if a number is a perfect power.\n    '''\n    root = nth_root(n,2)\n    if root == int(root):\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    if is_prime(n):\n        return [n]\n    else:\n        factors = []\n        for i in range(2,n):\n            if is_prime(i) and n%i == 0:\n                factors.append(i)\n        return factors\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    else:\n        divs = []\n        for i in range(1,n):\n            if n%i == 0:\n                divs.append(i)\n        if sum(divs) == n:\n            return True\n        else:\n            return False\ndef get_factors(n):\n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    if is_prime(n):\n        return [n]\n    else:\n        factors = []\n        for i in range(2,n):\n            if is_prime(i) and n%i == 0:\n                factors.append(i)\n        return factors\ndef nth_root(n, r):\n    '''\n    Write a function to find the nth root of a number.\n    '''\n    root = n**(1/r)\n    return root\ndef is_power(n):\n    '''\n    Write a function to determine if a number is a perfect power.\n    '''\n    root = nth_root(n,2)\n    if root == int(root):\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    if is_prime(n):\n        return [n]\n    else:\n        factors = []\n        for i in range(2,n):\n            if is_prime(i) and n%i == 0:\n                factors.append(i)\n        return factors\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    else:\n        divs = []\n        for i in range(1,n):\n            if n%i == 0:\n                divs.append(i)\n        if sum(divs) == n:\n            return True\n        else:\n            return False\ndef get_factors(n):\n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    if is_prime(n):\n        return [n]\n    else:\n        factors = []\n        for i in range(2,n):\n            if is_prime(i) and n%i == 0:\n                factors.append(i)\n        return factors\ndef nth_root(n, r):\n    '''\n    Write a function to find the nth root of a number.\n    '''\n    root = n**(1/r)\n    return root\ndef is_power(n):\n    '''\n    Write a function to determine if a number is a perfect power.\n    '''\n    root = nth_root(n,2)\n    if root == int(root):\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a function to return the prime factors of ",
        "num_ids": 13
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 59
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, n/2+1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum\n",
        "num_ids": 52
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n == sum(divisors(n))\n",
        "num_ids": 15
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        a = math.floor(n / 2) \n        return a * (a + 1)\n    else:\n        a = math.floor((n + 1) / 2) \n        return a * (a + 1)\ndef subseq_rec(seq, start, end, s, e): \n    '''\n    Return a list of all possible sub-sequences of seq[start:end] that sum up to s.\n    '''\n    if start == end: \n        if s == seq[start]: \n            return [[s]]\n        else: \n            return []\n    else: \n        ans = []\n        if s > seq[start]: \n            ans += subseq_rec(seq, start, end, s, e)\n        if s < seq[end]: \n            ans += subseq_rec(seq, start, end - 1, s, e)\n        if s == seq[start]: \n            ans += [[seq[start]]]\n        return ans\ndef subseq_dp(seq, s, e): \n    '''\n    Return a list of all possible sub-sequences of seq[start:end] that sum up to s.\n    '''\n    if s == 0: \n        return [[]]\n    if s > 0: \n        ans = []\n        if seq[e] <= s: \n            ans += [[seq[e]]]\n        if seq[e] > s: \n            ans += subseq_dp(seq, s - seq[e], e - 1)\n        return ans\ndef transpose(seq): \n    '''\n    Return the transpose of the sequence seq. \n    '''\n    if len(seq) == 0: \n        return []\n    else: \n        return [seq[i] for i in range(len(seq) - 1, -1, -1)]\ndef next_permutation(seq): \n    '''\n    Return the next permutation in the sequence seq. \n    '''\n    if len(seq) == 0: \n        return []\n    if len(seq) == 1: \n        return seq\n    else: \n        n = len(seq) \n        for i in range(n - 1, 0, -1): \n            if seq[i] > seq[i - 1]: \n                break\n        if i == 1 and seq[i] <= seq[i - 1]: \n            return []\n        else: \n            j = i - 1\n            while j < n and seq[j] > seq[i - 1]: \n                j += 1\n            seq[i - 1], seq[j - 1] = seq[j - 1], seq[i - 1]\n            seq[i:] = sorted(seq[i:])\n            return seq\ndef list_add(l1, l2): \n    '''\n    Return l1 + l2. \n    '''\n    if len(l1) == 0: \n        return l2\n    else: \n        return [l1[0] + l2[0]] + list_add(l1[1:], l2[1:])\ndef count_change(amount, coins): \n    '''\n    Return the number of ways you can make change for amount using coins.\n    '''\n    if amount == 0: \n        return 1\n    if amount < 0 or len(coins) == 0: \n        return 0\n    if coins[0] > amount: \n        return count_change(amount, coins[1:])\n    else: \n        return count_change(amount, coins) + count_change(amount - coins[0], coins)\ndef sum_digits(n): \n    '''\n    Return the sum of the digits of n.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sum_digits(n // 10)\ndef prefix_of_subseq(subseq, seq): \n    '''\n    Return True if the prefix of subseq is in seq. \n    '''\n    if len(subseq) == 0: \n        return True\n    if subseq[0] == seq[0]: \n        return prefix_of_subseq(subseq[1:], seq[1:])\n    else: \n        return False\ndef num_cows(k, m, n): \n    '''\n    Return the minimum number of cows that m cows can be used to complete k packages.\n    '''\n    if k == 0: \n        return 0\n    if m == 0: \n        return math.ceil(k / m)\n    if m > k: \n        return 0\n    else: \n        return num_cows(k - m, m + 1, n) + 1\ndef num_trucks(k, m, n): \n    '''\n    Return the minimum number of trucks that m trucks can be used to complete k packages.\n    '''\n    if k == 0: \n        return 0\n    if k < m: \n        return 0\n    if m == 0: \n        return math.ceil(k / n)\n    if k < (n * m): \n        return num_trucks(k - m, m, n) + 1\n    else: \n        return num_trucks(k - m, m, n) + num_trucks(k - (n * m), m, n)\ndef num_rocks(k, m, n): \n    '''\n    Return the minimum number of rocks that m rocks can be used to complete k packages.\n    '''\n    if k == 0: \n        return 0\n    if k < m: \n        return 0\n    if m == 0: \n        return math.ceil(k / n)\n    if k < (n * m): \n        return num_rocks(k - m, m, n) + 1\n    else: \n        return num_rocks(k - m, m, n) + num_rocks(k - (n * m), m, n)\ndef count_by_value(seq, start, end, value): \n    '''\n    Return the number of elements of seq that are equal to value, starting from index start.\n    '''\n    if start == end: \n        if seq[start] == value: \n            return 1\n        else: \n            return 0\n    else: \n        if seq[start] == value: \n            return 1 + count_by_value(seq, start + 1, end, value)\n        elif seq[end] == value: \n            return 1 + count_by_value(seq, start, end - 1, value)\n        elif seq[start] < value < seq[end]: \n            return count_by_value(seq, start + 1, end, value) + count_by_value(seq, start, end - 1, value)\ndef count_triples(seq, start, end): \n    '''\n    Return the number of triples (i, j, k) such that i < j < k and i + j + k = seq[start:end].\n    '''\n    if start == end: \n        if seq[start] == 2: \n            return 1\n        else: \n            return 0\n    else: \n        if seq[start] == 2: \n            return 1 + count_triples(seq, start + 1, end)\n        elif seq[end] == 2: \n            return 1 + count_triples(seq, start, end - 1)\n        elif seq[start] < 2 < seq[end]: \n            return count_triples(seq, start + 1, end) + count_triples(seq, start, end - 1)\ndef no_consecutive(seq): \n    '''\n    Return True if there are no two consecutive numbers in the sequence seq.\n    '''\n    if len(seq) < 2: \n        return True\n    if seq[0] == seq[1] - 1: \n        return no_consecutive(seq[1:])\n    else: \n        return False\ndef compare_numbers(a, b): \n    '''\n    Return 1 if a > b, -1 if a < b, 0 if a = b.\n    '''\n    if a == b: \n        return 0\n    elif a > b: \n        return 1\n    else: \n        return -",
        "num_ids": 35
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    r = 1\n    sum = 0\n    # print(\"The divisors of\",n,\"are:\")\n    for i in range(1,n):\n        if n % i == 0:\n            r = i\n            sum += i\n    # print(r)\n    # print(\"The sum of divisors of\",n,\"is\",sum)\n    if sum == r*2:\n        return True\n    else:\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=sum(int(i) for i in range(1,(n**0.5)+1) if n%i==0)\n    if s==n: return True\n    else: return False\ndef is_perfect_square(x):\n    '''\n    Given a positive integer x, write a function to determine if x is a perfect square.\n    '''\n    if math.sqrt(x)%1 ==0:\n        return True\n    else:\n        return False\ndef get_list_max(l):\n    '''\n    Given a list, return the max value and the corresponding index\n    '''\n    max_val=l[0]\n    max_index=0\n    for i,j in enumerate(l):\n        if j>max_val:\n            max_val=j\n            max_index=i\n    return max_val,max_index\ndef sum_range(n,r1,r2):\n    '''\n    Write a function to compute the sum of the numbers from 1 to n, where n is a non-negative integer.\n    '''\n    return sum(range(r1,r2+1))\ndef fib(n):\n    '''\n    Write a function that computes the nth Fibonacci number.\n    '''\n    if n==0 or n==1: return n\n    a,b=0,1\n    for i in range(2,n+1):\n        a,b=b,a+b\n    return b\ndef multiply(n,m):\n    '''\n    Write a function that multiplies 2 integers.\n    '''\n    return n*m\ndef permutations(s):\n    '''\n    Write a function that returns a list of all the permutations of a string.\n    '''\n    res=[]\n    l=[]\n    for i in range(len(s)):\n        l.append(s[i])\n    res.append(''.join(l))\n    while True:\n        for i in range(len(l)):\n            if i==len(l)-1:\n                break\n            temp=l[i]\n            l[i]=l[i+1]\n            l[i+1]=temp\n            res.append(''.join(l))\n        if i==len(l)-1:\n            break\n    return res\ndef bin_to_int(n):\n    '''\n    Write a function to convert a binary string (binary number) to an integer.\n    '''\n    i=len(n)-1\n    res=0\n    for x in n:\n        res=res+int(x)*2**i\n        i-=1\n    return res\ndef int_to_bin(n):\n    '''\n    Write a function to convert an integer to a binary string.\n    '''\n    res=''\n    while n!=0:\n        res=str(n%2)+res\n        n=n//2\n    return res\ndef is_palindrome(s):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    if len(s)==1: return True\n    if len(s)%2==1: return False\n    l=len(s)//2\n    for i in range(l):\n        if s[i]!=s[-i-1]:\n            return False\n    return True\ndef count_letters(s):\n    '''\n    Write a function to count the number of each character in a string.\n    '''\n    d={}\n    for i in s:\n        if i in d.keys():\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\ndef is_permutation(s1,s2):\n    '''\n    Write a function to determine if two strings are permutations of each other.\n    '''\n    if len(s1)!=len(s2):\n        return False\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1.keys():\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2.keys():\n            d2[i]+=1\n        else:\n            d2[i]=1\n    if d1==d2:\n        return True\n    else:\n        return False\ndef is_anagram(s1,s2):\n    '''\n    Write a function to determine if two strings are anagrams.\n    '''\n    if len(s1)!=len(s2):\n        return False\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1.keys():\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2.keys():\n            d2[i]+=1\n        else:\n            d2[i]=1\n    if d1==d2:\n        return True\n    else:\n        return False\ndef is_anagram_list(l1,l2):\n    '''\n    Write a function to determine if two lists are anagrams.\n    '''\n    if len(l1)!=len(l2):\n        return False\n    d1={}\n    d2={}\n    for i in l1:\n        if i in d1.keys():\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in l2:\n        if i in d2.keys():\n            d2[i]+=1\n        else:\n            d2[i]=1\n    if d1==d2:\n        return True\n    else:\n        return False\ndef is_anagram_dict(d1,d2):\n    '''\n    Write a function to determine if two dictionaries are anagrams.\n    '''\n    if len(d1)!=len(d2):\n        return False\n    d1=sorted(d1.items())\n    d2=sorted(d2.items())\n    if d1==d2:\n        return True\n    else:\n        return False\ndef sort_by_length(l):\n    '''\n    Write a function to sort a list by its length.\n    '''\n    return sorted(l,key=lambda x:len(x))\ndef reverse_list(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    for i in range(0,len(l)//2):\n        temp=l[i]\n        l[i]=l[-i-1]\n        l[-i-1]=temp\n    return l\ndef reverse_words(s):\n    '''\n    Write a function to reverse all the words in a string.\n    '''\n    res=''\n    i=len(s)-1\n    while i>=0:\n        if s[i]!=' ':\n            res+=s[i]\n        else:\n            i-=1\n        i-=1\n    return res\ndef get_avg_list(l):\n    '''\n    Write a function to compute the average of a list.\n    '''\n    return sum(l)/len(l)\ndef remove_duplicates(l):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    d={}\n    for i in l:\n        if i in d.keys():\n            pass\n        else:\n            d[i]=1\n    return d.keys()\ndef find_max_string(l):\n    '''\n    Write a function to find the maximum string in a list.\n    '''\n    max_l=l[0]\n    for i in l:\n        if len(i)>len(max_l):\n            max_l=i\n    return max_l\ndef get_max_list(l):\n    '''\n    Write a function to return the maximum value and index of a list.\n    '''\n    max_val=l[0]\n    max_index=0\n    for i,j in enumerate(l):\n        if j>max_val:\n            max_val=j\n            max_index=i\n    return max_val,max_index\ndef get_min_list(l):\n    '''\n    Write a function to return the minimum value and inde",
        "num_ids": 14
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = [chr(i) for i in range(97, 123)]\n    total = 0\n    for index in range(len(str1)):\n        if str1[index] in alphabet:\n            total += 1\n    return total\n",
        "num_ids": 60
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for char in str1:\n        char_position[char.lower()] += 1\n",
        "num_ids": 135
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(str1.translate(str1.maketrans('','',string.ascii_lowercase)))\n",
        "num_ids": 32
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    total = 0\n    for letter in str1:\n        if letter.lower() in alphabet:\n            total += 1\n    return total\n",
        "num_ids": 55
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    counts = {}\n    for letter in str1:\n        if letter.isalpha():\n            if letter.upper() in counts:\n                counts[letter.upper()] += 1\n            else:\n                counts[letter.upper()] = 1\n",
        "num_ids": 67
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    dict1 = dict(zip(alpha, range(1, len(alpha)+1)))\n    return sum([dict1[c] for c in str1 if c in dict1])\n",
        "num_ids": 64
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    lst = [0]*26\n    for i in str1:\n        if i>='a' and i<='z':\n            lst[ord(i)-97]+=1\n    return lst\n",
        "num_ids": 52
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    c = {}\n    for i in range(len(str1)):\n        if str1[i] not in c:\n            c[str1[i]] = 1\n        else:\n            c[str1[i]] += 1\n    return c\n",
        "num_ids": 72
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # string of numbers\n    number_char = ['0','1','2','3','4','5','6','7','8','9']\n    # use a list to store the result\n    result = [0]*len(str1)\n    # process each character\n    for char in str1:\n        # count the number of the same position \n        if char in number_char:\n            result[int(char)] += 1\n    return result\n    \n    \ndef test_count_char_position():\n    assert count_char_position('a') == [0,1]\n    assert count_char_position('aa') == [0,2]\n    assert count_char_position('abc') == [0,1,1,2]\n    assert count_char_position('a0') == [0,1]\n    assert count_char_position('1a') == [0,1]\n    assert count_char_position('aa1') == [0,2]\n    assert count_char_position('abc1') == [0,1,1,2]\n    assert count_char_position('a00') == [0,1]\n    assert count_char_position('1a0') == [0,1]\n    assert count_char_position('aa10') == [0,2]\n    assert count_char_position('abc10') == [0,1,1,2]\n    assert count_char_position('a00') == [0,1]\n    assert count_char_position('1a0') == [0,1]\n    assert count_char_position('aa10') == [0,2]\n    assert count_char_position('abc10') == [0,1,1,2]\n    \ntest_count_char_position(",
        "num_ids": 415
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if ord(str1[i]) >= 97 and ord(str1[i]) <= 122:\n            if ord(str1[i]) == ord(str1[i].lower()):\n                count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                pairs += 1\n    return pairs\n    \n    \nif __name__ == '__main__':\n    A = [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0]\n    print(find_even_pair(A))",
        "num_ids": 123
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    even_pairs = 0\n    \n    for i in xrange(0, len(A)):\n        for j in xrange(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pairs += 1\n    \n    return even_pairs\n",
        "num_ids": 80
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from collections import Counter \n    import operator\n",
        "num_ids": 13
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in xrange(len(A)):\n        for j in xrange(i, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_even = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j]%2 == 0:\n                xor_even += 1\n    return xor_even\n",
        "num_ids": 71
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in xrange(len(A)-1):\n        for j in xrange(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result = 0\n    for x in A:\n        for y in A:\n            if x ^ y == 0:\n                result += 1\n",
        "num_ids": 35
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    xor = 0\n    for num in A:\n        xor ^= num\n    \n    count = 0\n    for num in A:\n        if num ^ xor == 0:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    if len(A) == 1:\n        return 1\n    \n    result = 0\n    for i in xrange(len(A)-1):\n        for j in xrange(i+1,len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                result += 1\n",
        "num_ids": 78
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(next_power_of_2(n//2))\n",
        "num_ids": 35
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    while res <= n:\n        res = res * 2\n    return res\n",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n",
        "num_ids": 53
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i << 1\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    return 1<<(n-1).bit_length()\n    \n    \ndef reverse_digit(n):\n    '''\n    Write a python function to reverse the digits of n.\n    '''\n    rev = 0\n    while(n):\n        rev = rev * 10 + n % 10\n        n = n//10\n    return rev\n",
        "num_ids": 35
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**n)\n    \ndef find_inverse(a, m):\n    '''\n    Given two integers a, m, find the inverse of a mod m.\n    '''\n    for i in range(1, m):\n        if (i*a)%m == 1:\n            return i\n            \ndef find_euclid_dist(x1, y1, x2, y2):\n    '''\n    Given two points on a 2D plane, find the Euclidean distance between the points.\n    '''\n    return ((x2-x1)**2+(y2-y1)**2)**0.5\n    \ndef find_c_inverse(a, m):\n    '''\n    Finds the inverse of a mod m, if it exists.\n    '''\n    for i in range(1, m):\n        if (i*a)%m == 1:\n            return i\n            \ndef find_mod_inverse(a, m):\n    '''\n    Finds the inverse of a mod m, if it exists.\n    '''\n    for i in range(1, m):\n        if (i*a)%m == 1:\n            return i\n            \ndef find_euler_totient(p, q):\n    '''\n    Finds the Euler Totient of p*q.\n    '''\n    return (p-1)*(q-1)\n    \ndef is_prime(n):\n    '''\n    Given an integer n, return True if n is prime and False if it is not.\n    '''\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3, next_power_of_2(n)):\n        if n%i==0:\n            return False\n    return True\n    \ndef is_truncatable(n):\n    '''\n    Given an integer n, determine if the given number is the sum of three consecutive primes.\n    '''\n    n = str(n)\n    for i in range(len(n)-3):\n        if not is_prime(int(n[i:i+3])):\n            return False\n    return True\n    \ndef is_palindrome(n):\n    '''\n    Given an integer n, determine if the given number is a palindrome.\n    '''\n    return str(n)==str(n)[::-1]\n    \ndef is_automorphic(n):\n    '''\n    Given an integer n, determine if the given number is automorphic.\n    '''\n    return str(n)==str(n)[::-1]\n    \ndef is_super_palindrome(n):\n    '''\n    Given an integer n, determine if the given number is a super palindrome.\n    '''\n    return str(n)==str(n)[::-1] and is_palindrome(int(str(n)[1:]))\n    \ndef is_anti_palindrome(n):\n    '''\n    Given an integer n, determine if the given number is a anti-palindrome.\n    '''\n    return str(n)==str(n)[::-1] and is_palindrome(int(str(n)[:-1]))\n    \ndef is_super_anti_palindrome(n):\n    '''\n    Given an integer n, determine if the given number is a super anti-palindrome.\n    '''\n    return str(n)==str(n)[::-1] and is_anti_palindrome(int(str(n)[1:]))\n    \ndef is_antisymmetric(n):\n    '''\n    Given an integer n, determine if the given number is antisymmetric.\n    '''\n    return str(n)==str(n)[::-1] and is_automorphic(int(str(n)[1:]))\n    \ndef is_symmetric(n):\n    '''\n    Given an integer n, determine if the given number is symmetric.\n    '''\n    return str(n)==str(n)[::-1]\n    \ndef is_perfect(n):\n    '''\n    Given an integer n, determine if the given number is perfect.\n    '''\n    return str(n)==str(n)[::-1] and is_palindrome(int(str(n)[:-1]))\n    \ndef is_full_house(n):\n    '''\n    Given an integer n, determine if the given number is a full house.\n    '''\n    return str(n)==str(n)[::-1] and (str(n)[0]*3==str(n)[1:])\n    \ndef is_run(n):\n    '''\n    Given an integer n, determine if the given number is a run.\n    '''\n    return str(n)==str(n)[::-1] and (str(n)[0]==str(n)[1])\n    \ndef is_quad_free(n):\n    '''\n    Given an integer n, determine if the given number is a quadratic-free.\n    '''\n    return str(n)==str(n)[::-1] and (str(n)[0]!=str(n)[1])\n    \ndef is_skew_symmetric(n):\n    '''\n    Given an integer n, determine if the given number is a skew-symmetric.\n    '''\n    return str(n)==str(n)[::-1] and (str(n)[0]!=str(n)[len(str(n))//2])\n    \ndef is_triangle(n):\n    '''\n    Given an integer n, determine if the given number is a triangle.\n    '''\n    return str(n)==str(n)[::-1] and is_truncatable(int(str(n)[:-1]))\n    \ndef is_isosceles(n):\n    '''\n    Given an integer n, determine if the given number is a isosceles triangle.\n    '''\n    return str(n)==str(n)[::-1] and is_truncatable(int(str(n)[:-1])) and (str(n)[0]==str(n)[len(str(n))//2])\n    \ndef is_right_isosceles(n):\n    '''\n    Given an integer n, determine if the given number is a right-isosceles triangle.\n    '''\n    return str(n)==str(n)[::-1] and is_truncatable(int(str(n)[:-1])) and (str(n)[0]!=str(n)[len(str(n))//2])\n    \ndef is_scalene(n):\n    '''\n    Given an integer n, determine if the given number is a scalene triangle.\n    '''\n    return str(n)==str(n)[::-1] and is_truncatable(int(str(n)[:-1])) and (str(n)[0]!=str(n)[len(str(n))//2] and str(n)[1]!=str(n)[len(str(n))//2])\n    \ndef is_octahedral(n):\n    '''\n    Given an integer n, determine if the given number is a octahedral triangle.\n    '''\n    return str(n)==str(n)[::-1] and is_truncatable(int(str(n)[:-1])) and (str(n)[0]!=str(n)[len(str(n))//2] and str(n)[1]!=str(n)[len(str(n))//2] and str(n)[2]!=str(n)[len(str(n))//2])\n    \ndef is_kite(n):\n    '''\n    Given an integer n, determine if the given number is a kite.\n    '''\n    return str(n)==str(n)[::-1] and is_truncatable(int(str(n)[:-1])) and (str(n)[0]!=str(n)[len(str(n))//2] and str(n)[1]!=str(n)[len(str(n))//2])\n    \ndef is_dodecagon(n):\n    '''\n    Given an integer n, determine if the given numbe",
        "num_ids": 14
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    logn = 0\n    while n > 1: \n        n /= 2\n        logn += 1\n    return 2 ** logn\n",
        "num_ids": 37
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n).bit_length()\n",
        "num_ids": 14
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i == x])\n    \n    ",
        "num_ids": 20
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    i = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            return i+1\n    return 0\n",
        "num_ids": 39
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if not a:\n        return 0\n    b=[]\n    for i in a:\n        if i==x:\n            b.append(a.count(i))\n    return b\n",
        "num_ids": 47
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if x == a[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a:\n        return a.count(x)\n    else:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    total = 0\n    for i in x:\n        if i == x:\n            total += 1\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in list1:\n        if x > m and x <= n:\n            sum += x\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "num_ids": 14
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) < 2:                                                                                                                                                                                                    \n        returnn",
        "num_ids": 1334
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(sum(list1[m:n+1]))\n",
        "num_ids": 18
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum([list1[i] for i in range(m, n)])\n",
        "num_ids": 22
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n    \nassert(sum_range_list([1, 2, 3, 4, 5], 1, 4) == 10)\nassert(sum_range_list([-1, -2, -3, -4, -5], 1, 4) == -10)\nassert(sum_range_list([1, 2, 3, 4, 5], 1, 5) == 15)\n",
        "num_ids": 100
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a*math.sqrt(5))/(4*math.tan(math.pi/5))\n",
        "num_ids": 30
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    b = (5*a**2 - (a**2)**2)**0.5\n    c = (5*a**2 - (a**2)**2)**0.5\n    return a+b+c\n",
        "num_ids": 56
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(3*math.sqrt(5)+1)\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Calculating the length of the pentagon\n    x = a*5/math.sqrt(5)\n    \n    return x*4\n",
        "num_ids": 37
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (3.14159 * a ** 2)/2\n    return p\n",
        "num_ids": 21
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 5*a\n    return perimeter\n",
        "num_ids": 20
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides_pentagon = a\n    perimeter_pentagon = (sides_pentagon*5)*2 + (sides_pentagon**2)/4\n    print(\"perimeter pentagon:\" + str(perimeter_pentagon))\n",
        "num_ids": 58
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import re\n    return len(re.findall('std', s))\n",
        "num_ids": 20
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(l - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n    \nif __name__ == '__main__':\n    print count_occurance('sdfdsdfsdfsdfsdfsdfsdfsdfsdfsdf')",
        "num_ids": 91
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    return len(set([type(item) for item in test_tuple])) <= 1\n",
        "num_ids": 26
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len(set(type(x) for x in test_tuple)) <= 1\n",
        "num_ids": 23
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = eval(test_tuple)\n    count = 0\n    for i in test_tuple:\n        if type(i) is type(test_tuple[0]):\n            count += 1\n    if count == len(test_tuple):\n        return True\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(item, test_tuple[0]) for item in test_tuple):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
        "num_ids": 29
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) is tuple:\n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code here\n    return True\n",
        "num_ids": 12
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 1:\n        return all(type(i) == type(test_tuple[0]) for i in test_tuple)\n    else:\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(x,test_tuple[0]) for x in test_tuple)\n",
        "num_ids": 27
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_val = None\n    if len(test_tuple) == 0:\n        return type_val\n    type_val = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= type_val:\n            return False\n    return type_val\n",
        "num_ids": 75
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    if arr[0]!= x:\n        return is_majority(arr[1:], n-1, x)\n",
        "num_ids": 56
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority_count = 0\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            majority_count += 1\n    if majority_count > n/2:\n        return True\n    else:\n        return False\n",
        "num_ids": 86
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) < n:\n        return False\n    arr = arr[0:n]\n    return arr.count(x) > n/2\n",
        "num_ids": 39
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if arr[n/2] == x:\n        return is_majority(arr, n/2, x)\n    if arr[n/2]!= x:\n        return is_majority(arr, n/2, x)\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in xrange(n):\n        if arr[i] == x:\n            count += 1\n    return count > (n / 2)\n",
        "num_ids": 42
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    first = 0\n    second = 0\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c+=1\n    if c > (n/2):\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count >= n / 2\n",
        "num_ids": 39
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if (arr[i] == x):\n            count += 1\n    if (count > n/2):\n        return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    current = arr[n//2]\n    \n    if current == x:\n        return True\n    elif current > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2:], n - n//2, x)\n",
        "num_ids": 92
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        count=count+1\n        n=n&(n-1)\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0\n    while (n): \n        n &= n - 1\n        cnt += 1\n    return cnt\n",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n&1\n        n >>= 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    i = 0\n    while n:\n        i += n & 1\n        n >>= 1\n    return i\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        n &= n - 1\n        count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_n = bin(n)\n    count = bin_n.count('1')\n    return count\n",
        "num_ids": 28
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count\ndef count_Set_Bits_2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\ndef count_Set_Bits_3(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\ndef count_Set_Bits_4(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return sum(1 for x in bin(n) if x=='1')\ndef count_Set_Bits_5(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return sum(1 for x in bin(n)[2:] if x=='1')\n",
        "num_ids": 23
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in str:\n        if (i + 1)%2 == 0:\n            new_string += i\n    return new_string\n",
        "num_ids": 42
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    for i in range(1,len(str),2):\n        str.remove(str[i])\n    return ''.join(str)\n",
        "num_ids": 44
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = ''.join(x for x in str if x.isalpha())\n    string = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            string += str[i]\n    return string\nprint(odd_values_string('hello_there'))\n",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 2:\n        return str\n    else:\n        return odd_values_string(str[1:]) + str[0]\n",
        "num_ids": 39
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            s += str[i]\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l=len(str)\n    newstr=''\n    for i in range(0,l):\n        if i%2==0:\n            newstr=newstr+str[i]\n    return newstr\n",
        "num_ids": 53
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output = \"\"\n    for i in range(len(str)):\n        if (i % 2) == 0:\n            output += str[i]\n    return output\n",
        "num_ids": 42
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s = [s for i,s in enumerate(str) if i % 2 == 0]\n    return ''.join(s)\n    ",
        "num_ids": 35
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if not isinstance(str,str):\n        return 'enter a string only'\n    else:\n        new_str = ''.join([str[i] for i in range(len(str)) if i%2==0])\n        return new_str\n",
        "num_ids": 62
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    for i in xrange(1, len(str)+1, 2):\n        res += str[i]\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 48
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,min(b,c))\n",
        "num_ids": 15
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        else:\n            return c\n    else:\n        if a < c:\n            return a\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n    elif b < c:\n        if b < a:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    else:\n        if c < a:\n            return c\n        elif a < b:\n            return a\n        else:\n            return b\n",
        "num_ids": 114
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        elif c < b:\n            return b\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 60
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        elif a > c:\n            return c\n        else:\n            return b\n    elif b < a:\n        if b < c:\n            return b\n        elif b > c:\n            return c\n        else:\n            return a\n    else:\n        if a < c:\n            return a\n        elif a > c:\n            return c\n        else:\n            return b\n",
        "num_ids": 114
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n    \n    \ndef min_of_three_v2(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n    \n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n    \n    \ndef max_of_three_v2(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n    \n    \ndef max_of_three_v3(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a == b and a == c:\n        return a\n    elif a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n    \n    \ndef is_prime(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        if n > 2:\n            return False\n        else:\n            return True\n    for i in range(3,n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_v2(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    if n % 2 == 0:\n        if n > 2:\n            return False\n        else:\n            return True\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v3(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v4(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v5(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return any(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v6(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v7(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v8(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return any(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v9(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v10(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v11(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return any(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v12(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v13(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v14(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i for i in range(3,n,2))\n    \n    \ndef is_prime_v15(n): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        elif c<b:\n            return c\n        else:\n            return b\n    elif b<c:\n        return b\n    elif c<a:\n        return c\n    else:\n        return a\n",
        "num_ids": 72
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not any(bin(n & (1<<bit))[2:].zfill(32)[bit]=='1' for bit in range(l,r+1))\n    \ndef all_Bits_Set_In_The_Given_Range_Tests():\n    '''\n    Write unit tests to test the all_Bits_Set_In_The_Given_Range() function.\n    '''\n    print(\"Testing the all_Bits_Set_In_The_Given_Range() function: \")\n    assert(all_Bits_Set_In_The_Given_Range(0,0,0)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,1)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,2)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,3)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,4)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,5)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,6)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,7)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,8)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,9)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,10)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,11)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,12)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,13)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,14)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,15)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,16)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,17)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,18)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,19)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,20)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,21)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,22)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,23)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,24)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,25)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,26)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,27)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,28)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,29)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,30)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,31)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,32)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,33)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,34)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,35)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,36)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,37)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,38)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,39)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,40)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,41)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,42)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,43)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,44)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,45)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,46)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,47)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,48)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,49)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,50)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,51)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,52)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,53)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,54)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,55)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,56)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,57)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,58)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,59)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,60)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,61)==True)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,62)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,63)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,64)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,65)==False)\n    assert(all_Bits_Set_In_The_Given_Range(0,0,66)=",
        "num_ids": 1899
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = (1 << l) - 1\n    y = (1 << r) - 1\n    res = ((n & x) == 0) and ((n & y) == 0)\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def Set_Bit(n,l,r):\n        if l == r:\n            return n & 1\n        if l > r:\n            return 0\n        if n == 0:\n            return 0\n        return (Set_Bit(n<<1, l+1, r) << 1) | Set_Bit(n<<1, l, r-1)\n    \n    return Set_Bit(n,l,r) == 0\n",
        "num_ids": 103
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all([n & (1 << i) == 0 for i in range(l, r+1)])\n",
        "num_ids": 28
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (2**n) - 1\n    return all( ( (r & (mask >> i))!= 0 ) for i in range(l,r+1))\n",
        "num_ids": 42
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n &= (1<<r)-1\n    return n == 0\n",
        "num_ids": 19
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if(n & (1 << i)):\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return 1\n    elif (n & 1) == 1:\n        return 0\n    else:\n        if l<=r:\n            return all_Bits_Set_In_The_Given_Range(n >> 1,l,r)\n        else:\n            return 0\n",
        "num_ids": 75
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    s = bin(n).replace(\"0b\", \"\")\n    s = s[::-1]\n    for i in range(l-1, r):\n        if s[i] == \"1\":\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x=bin(n)[2:]\n    y=x[l-1:r]\n    #print y\n    if y.count('0')==r-l+1:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    print arr[n:] + arr[:n]\n",
        "num_ids": 15
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n <= 0:\n        return arr\n    elif n == len(arr):\n        return arr\n    else:\n        sorted_arr = sorted(arr)\n        for i in range(len(arr)):\n            if arr[i] > 0:\n                arr[i], arr[n - 1] = arr[n - 1], arr[i]\n                n -= 1\n        return arr\n",
        "num_ids": 96
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, key=lambda x: (x < 0, x))\n    \ndef re_arrange_array2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, key=lambda x: (x < 0, x))[:n]\n",
        "num_ids": 25
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n",
        "num_ids": 15
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        elif arr[i] > 0:\n            positive.append(arr[i])\n    return negative + positive\n",
        "num_ids": 68
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    n = n % len(arr)\n    arr[:n] = sorted(arr[:n], reverse=True)\n    arr[n:] = sorted(arr[n:])\n    return arr\n",
        "num_ids": 49
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr[:n] = sorted(arr[:n])[::-1]\n    return arr\n",
        "num_ids": 26
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = [None for _ in xrange(len(arr))]\n    for idx, num in enumerate(arr):\n        if num > 0:\n            result[n+idx] = num\n        else:\n            result[n+idx] = num\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr[:n]) + sorted(arr[n:], reverse=True)\n",
        "num_ids": 24
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return None\n    negative = 0\n    for i in xrange(n):\n        if arr[i] < 0:\n            arr[negative], arr[i] = arr[i], arr[negative]\n            negative += 1\n    return arr[:n]\n",
        "num_ids": 73
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(str1.split())\n",
        "num_ids": 14
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s') % char\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n    \n    \ndef last_first(str1):\n    '''\n    Write a function that takes in a string, and returns a new string where the first character is replaced with the last character and the last character is replaced with the first character.\n    '''\n    return str1[-1] + str1[1:len(str1)-1] + str1[0]\n    \ndef name_score(name):\n    '''\n    Write a function that takes in a string, and returns a value. \n    The value should be the sum of the ASCII values of the characters in the string.\n    '''\n    return sum(ord(char) for char in name)\n    \n    \ndef sort_scores(scores):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted list of the same numbers.\n    '''\n    return sorted(scores)\n    \n    \ndef every_other(str1):\n    '''\n    Write a function that takes in a string and returns a string with every other character removed.\n    '''\n    return str1[0:len(str1):2]\n    \ndef char_substitute(str1, char):\n    '''\n    Write a function that takes in a string and a character and returns a string where the character has been replaced with the character that is the most commonly used character in the string.\n    '''\n    return str1.replace(char, max(str1.count(char),1))\n    \ndef last_char(str1):\n    '''\n    Write a function that takes in a string, and returns the last character in the string.\n    '''\n    return str1[len(str1)-1]\n    \ndef last_3(str1):\n    '''\n    Write a function that takes in a string and returns the last 3 characters in the string.\n    '''\n    return str1[len(str1)-3:len(str1)]\n    \ndef long_word(str1):\n    '''\n    Write a function that takes in a string and returns the length of the longest word in the string.\n    '''\n    return len(max(str1.split(\" \"), key = len))\n    \ndef first_two(str1):\n    '''\n    Write a function that takes in a string and returns the first two characters in the string.\n    '''\n    return str1[:2]\n    \ndef first_half(str1):\n    '''\n    Write a function that takes in a string and returns the first half of the string.\n    '''\n    return str1[0:len(str1)/2]\n    \ndef first_half_ii(str1):\n    '''\n    Write a function that takes in a string and returns the first half of the string.\n    '''\n    return str1[len(str1)/2:]\n    \ndef front_back(str1):\n    '''\n    Write a function that takes in a string and returns the first half of the string and the second half of the string in reverse order.\n    '''\n    return str1[0:len(str1)/2] + str1[len(str1)/2:][::-1]\n    \ndef first_four(str1):\n    '''\n    Write a function that takes in a string and returns the first four characters of the string.\n    '''\n    return str1[:4]\n    \ndef first_n(str1, n):\n    '''\n    Write a function that takes in a string and an integer, and returns a string that is the first n characters of the string.\n    '''\n    return str1[0:n]\n    \ndef last_n(str1, n):\n    '''\n    Write a function that takes in a string and an integer, and returns a string that is the last n characters of the string.\n    '''\n    return str1[len(str1)-n:len(str1)]\n    \ndef first_last(str1):\n    '''\n    Write a function that takes in a string and returns a string that is the first five characters of the string followed by the last five characters of the string.\n    '''\n    return str1[:5] + str1[len(str1)-5:]\n    \ndef every_other_start(str1):\n    '''\n    Write a function that takes in a string and returns a string that is every other character in the string starting from the beginning.\n    '''\n    return str1[::2]\n    \ndef every_other_end(str1):\n    '''\n    Write a function that takes in a string and returns a string that is every other character in the string starting from the end.\n    '''\n    return str1[len(str1)-2::-2]\n    \ndef first_and_last(str1):\n    '''\n    Write a function that takes in a string and returns a string that is the first three characters of the string followed by the last three characters of the string.\n    '''\n    return str1[:3] + str1[len(str1)-3:]\n    \ndef first_n_last(str1, n):\n    '''\n    Write a function that takes in a string and an integer, and returns a string that is the first n characters of the string followed by the last n characters of the string.\n    '''\n    return str1[:n] + str1[len(str1)-n:]\n    \ndef swap_first_last(str1):\n    '''\n    Write a function that takes in a string and returns a string where the first and last characters have been swapped.\n    '''\n    return str1[-1] + str1[1:len(str1)-1] + str1[0]\n    \ndef front_x(str1):\n    '''\n    Write a function that takes in a string and returns a string where the first occurrence of the string 'x' is swapped with the last occurrence of the string 'x'.\n    '''\n    return str1[str1.find('x')] + str1[:str1.find('x')] + str1[str1.rfind('x'):]\n    \ndef has_no_e(str1):\n    '''\n    Write a function that takes in a string and returns a boolean. \n    The function should return True if the string does not have the letter 'e' in it.\n    '''\n    return \"e\" not in str1\n    \ndef has_no_e_ii(str1):\n    '''\n    Write a function that takes in a string and returns a boolean. \n    The function should return True if the string does not have the letter 'e' in it.\n    '''\n    return not \"e\" in str1\n    \ndef has_no_e_iii(str1):\n    '''\n    Write a function that takes in a string and returns a boolean. \n    The function should return True if the string does not have the letter 'e' in it.\n    '''\n    return \"e\" not in str1\n    \ndef no_teen_sum(a, b, c):\n    '''\n    Write a function that takes in three integers between 0 and 12, inclusive, and returns the sum of the integers that aren't the number 10 or are the number 12.\n    '''\n    return sum(num for num in (a,b,c) if num!=10 and num!=12)\n    \ndef no_teen_sum_ii(a, b, c):\n    '''\n    Write a function that takes in three integers between 0 and 12, inclusive, and returns the sum of the integers that aren't the number 10 or are the number 12.\n    '''\n    return sum(num for num in (a,b,c) if num!=10 and num!=12)\n    \ndef no_teen_sum_iii(a, b, c):\n    '''\n    Write a function that takes in three integers between 0 and 12, inclusive, and returns the sum of the integers that aren't the number 10 or are the number 12.\n    '''\n    return sum(num for num in (a,b,c) if not(num==10 or num==12))\n    \ndef only_rolls(str1):\n    '''\n    Write a function that takes in a string and returns a boolean.\n    The function should return True if the string is a word that is a valid number that only contains letters from the set ['1', '2', '3', '4', '5', '6', '7', '8', '9'",
        "num_ids": 68
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ','')\n    str3 = str2.replace('\\n',' ')\n    str4 = str3.replace('\\t',' ')\n    return str4 + char\n",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace(char,'')\n    return str1\n",
        "num_ids": 33
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if not str1:\n        return str1\n",
        "num_ids": 14
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return str1\n    else:\n        if len(str1) == 1:\n            if str1 =='':\n                return char\n            else:\n                return str1\n        else:\n            str2 = str1[0]\n            str3 = replace_blank(str1[1:],char)\n            if str2 =='':\n                return char + str3\n            else:\n                return str2 + str3\n",
        "num_ids": 109
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str=str1.replace(' ','')\n    new_str=new_str.replace(char,'')\n    return new_str\n",
        "num_ids": 37
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 0:\n        return []\n    elif len(list1) == 1:\n        return list1[0:n]\n    else:\n        return list1[len(list1)-n:len(list1)]\n",
        "num_ids": 57
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = sorted(list1, key=lambda x: x[1], reverse=True)\n    return list1[0:n]\n    #return heapq.nlargest(n, list1)\n    \n",
        "num_ids": 52
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    '''\n    if n == 0:\n        return []\n    elif n > len(list1):\n        return list1\n    else:\n        large = []\n        for i in range(n):\n            large.append(max(list1))\n            list1.remove(max(list1))\n        return large\n    '''\n    large = heapq.nlargest(n,list1)\n    return large\ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    '''\n    if n == 0:\n        return []\n    elif n > len(list1):\n        return list1\n    else:\n        small = []\n        for i in range(n):\n            small.append(min(list1))\n            list1.remove(min(list1))\n        return small\n    '''\n    small = heapq.nsmallest(n,list1)\n    return small\ndef large_nneg(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list that are negative.\n    '''\n    '''\n    if n == 0:\n        return []\n    elif n > len(list1):\n        return list1\n    else:\n        large_neg = []\n        for i in range(n):\n            if list1[i] < 0:\n                large_neg.append(list1[i])\n                list1.remove(list1[i])\n        return large_neg\n    '''\n    large_neg = heapq.nlargest(n,list(filter(lambda x: x < 0,list1)))\n    return large_neg\ndef small_nneg(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list that are negative.\n    '''\n    '''\n    if n == 0:\n        return []\n    elif n > len(list1):\n        return list1\n    else:\n        small_neg = []\n        for i in range(n):\n            if list1[i] < 0:\n                small_neg.append(list1[i])\n                list1.remove(list1[i])\n        return small_neg\n    '''\n    small_neg = heapq.nsmallest(n,list(filter(lambda x: x < 0,list1)))\n    return small_neg\ndef large_npos(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list that are positive.\n    '''\n    '''\n    if n == 0:\n        return []\n    elif n > len(list1):\n        return list1\n    else:\n        large_pos = []\n        for i in range(n):\n            if list1[i] > 0:\n                large_pos.append(list1[i])\n                list1.remove(list1[i])\n        return large_pos\n    '''\n    large_pos = heapq.nlargest(n,list(filter(lambda x: x > 0,list1)))\n    return large_pos\ndef small_npos(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list that are positive.\n    '''\n    '''\n    if n == 0:\n        return []\n    elif n > len(list1):\n        return list1\n    else:\n        small_pos = []\n        for i in range(n):\n            if list1[i] > 0:\n                small_pos.append(list1[i])\n                list1.remove(list1[i])\n        return small_pos\n    '''\n    small_pos = heapq.nsmallest(n,list(filter(lambda x: x > 0,list1)))\n    return small_pos\ndef num_dig(num):\n    '''\n    Write a function that takes in a number and returns the number of digits in the number.\n    '''\n    '''\n    if num == 0:\n        return 0\n    elif num < 10:\n        return 1\n    else:\n        return 1 + num_dig(num//10)\n    '''\n    return 1 + len(str(num))\ndef is_palindrome(num):\n    '''\n    Write a function that takes in a number and returns True if the number is a palindrome and False if it is not.\n    '''\n    '''\n    if num < 10:\n        return True\n    elif num % 10 == num // 10 % 10:\n        return is_palindrome(num // 10)\n    else:\n        return False\n    '''\n    if num < 10:\n        return True\n    return num == int(str(num)[::-1])\ndef has_digit(num,digit):\n    '''\n    Write a function that takes in a number and returns True if the number contains the digit and False if it does not.\n    '''\n    '''\n    if num < 10:\n        if num == digit:\n            return True\n        else:\n            return False\n    else:\n        return has_digit(num//10,digit)\n    '''\n    if num < 10:\n        if num == digit:\n            return True\n        else:\n            return False\n    return has_digit(num//10,digit)\ndef has_same_digit(num1,num2):\n    '''\n    Write a function that takes in two numbers and returns True if the two numbers have the same digit or if one of them is a multiple of the other. Otherwise, it returns False.\n    '''\n    '''\n    if num1 < 10 and num2 < 10:\n        if num1 == num2:\n            return True\n        else:\n            return False\n    elif num1 % 10 == num2 % 10:\n        return True\n    else:\n        return False\n    '''\n    if num1 < 10 and num2 < 10:\n        if num1 == num2:\n            return True\n        elif num1 % 10 == num2 % 10:\n            return True\n        else:\n            return False\n    return has_same_digit(num1//10,num2//10)\ndef is_power(num1,num2):\n    '''\n    Write a function that takes in two numbers and returns True if num1 is a power of num2 and False if it is not.\n    '''\n    '''\n    if num1 < 10:\n        if num1 == num2:\n            return True\n        else:\n            return False\n    elif num1 % num2 == 0:\n        return True\n    else:\n        return False\n    '''\n    if num1 < 10:\n        if num1 == num2:\n            return True\n        elif num1 % num2 == 0:\n            return True\n        else:\n            return False\n    return is_power(num1//10,num2)\ndef has_same_num(num1,num2):\n    '''\n    Write a function that takes in two numbers and returns True if both numbers are equal and False if they are not.\n    '''\n    '''\n    if num1 < 10 and num2 < 10:\n        if num1 == num2:\n            return True\n        else:\n            return False\n    elif num1 % 10 == num2 % 10:\n        return True\n    else:\n        return False\n    '''\n    if num1 < 10 and num2 < 10:\n        if num1 == num2:\n            return True\n        elif num1 % 10 == num2 % 10:\n            return True\n        else:\n            return False\n    return has_same_num(num1//10,num2//10)\ndef is_subseq(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if str1 is a subsequence of str2 and False if it is not.\n    '''\n    '''\n    if str1 == \"\":\n        return True\n    elif str2 == \"\":\n        return False\n    elif str1[0] == str2[0]:\n        return is_subseq(str1[1:],str2[1:]",
        "num_ids": 60
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[i])\n    return heap\n",
        "num_ids": 99
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    myHeap=list1[:n]\n    heapq.heapify(myHeap)\n    return myHeap\n",
        "num_ids": 34
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    num = []\n    for i in range(n):\n        num.append(heapq.nlargest(n,list1))\n        del list1[0]\n    return num\n",
        "num_ids": 46
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    for i in range(n):\n        max_num=max(list1)\n        list1.remove(max_num)\n    return list1\ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    for i in range(n):\n        min_num=min(list1)\n        list1.remove(min_num)\n    return list1\ndef move_to_end(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list in which the nth smallest item has been moved to the end of the list.\n    '''\n    for i in range(n):\n        min_num=min(list1)\n        list1.remove(min_num)\n        list1.append(min_num)\n    return list1\ndef merge_sorted(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that is the sorted concatenation of the two input lists.\n    '''\n    if len(list1)<len(list2):\n        list1,list2=list2,list1\n    list3=[]\n    while len(list1)>0:\n        if list1[0]<list2[0]:\n            list3.append(list1[0])\n            list1.remove(list1[0])\n        else:\n            list3.append(list2[0])\n            list2.remove(list2[0])\n    return list3\ndef partition(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list where the first n elements of the list are smaller than the nth element,\n    and the last n elements of the list are larger than the nth element.\n    '''\n    list2=[]\n    for i in range(n):\n        list2.append(list1[0])\n        list1.remove(list1[0])\n    for j in range(n):\n        list2.append(list1[j])\n        list1.remove(list1[j])\n    return list2\ndef quicksort(list1):\n    '''\n    Write a function that takes in a list and returns a sorted list with the same elements as the input list.\n    '''\n    if len(list1)<2:\n        return list1\n    else:\n        pivot=list1[0]\n        list2=[]\n        list3=[]\n        for i in range(1,len(list1)):\n            if list1[i]<=pivot:\n                list2.append(list1[i])\n            else:\n                list3.append(list1[i])\n        return quicksort(list2)+[pivot]+quicksort(list3)\ndef histogram(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list in which each element is a tuple that contains two integers:\n    the first element is the number of times the corresponding integer occurs in the list and the second element is the number of times the integer occurs in the list.\n    '''\n    list2=[]\n    for i in range(0,max(list1)+1):\n        list2.append((list1.count(i),i))\n    return list2\ndef powerset(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list in which each element is a tuple that contains two integers:\n    the first element is the sum of all the elements in the subset and the second element is the subset.\n    '''\n    list3=[]\n    for i in range(1,len(list1)+1):\n        list2=[]\n        for j in range(len(list1)+1-i):\n            list2.append(list1[j:j+i])\n        list3.append((sum(list2),list2))\n    return list3\ndef find_duplicates(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list in which each element is a tuple that contains two integers:\n    the first element is the number of times the corresponding integer occurs in the list and the second element is the number of times the integer occurs in the list.\n    '''\n    list2=[]\n    for i in range(max(list1)+1):\n        list2.append((list1.count(i),i))\n    return list2\ndef find_largest(list1):\n    '''\n    Write a function that takes in a list and returns the smallest value in the list.\n    '''\n    return min(list1)\ndef find_smallest(list1):\n    '''\n    Write a function that takes in a list and returns the largest value in the list.\n    '''\n    return max(list1)\ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a list with all duplicate values removed.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            del list1[i]\n            return list1\ndef remove_smallest(list1):\n    '''\n    Write a function that takes in a list and returns a new list without the smallest value.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==min(list1):\n            del list1[i]\n            return list1\ndef count_vowels(string1):\n    '''\n    Write a function that takes in a string and returns a list in which each element is the number of vowels in the corresponding string.\n    '''\n    string2=string1\n    list3=[]\n    for i in range(len(string1)):\n        list3.append(string1.count('a'))\n        list3.append(string1.count('e'))\n        list3.append(string1.count('i'))\n        list3.append(string1.count('o'))\n        list3.append(string1.count('u'))\n    return list3\ndef count_cons(string1):\n    '''\n    Write a function that takes in a string and returns a list in which each element is the number of consonants in the corresponding string.\n    '''\n    string2=string1\n    list3=[]\n    for i in range(len(string1)):\n        list3.append(string1.count('b'))\n        list3.append(string1.count('c'))\n        list3.append(string1.count('d'))\n        list3.append(string1.count('f'))\n        list3.append(string1.count('g'))\n        list3.append(string1.count('h'))\n        list3.append(string1.count('j'))\n        list3.append(string1.count('k'))\n        list3.append(string1.count('l'))\n        list3.append(string1.count('m'))\n        list3.append(string1.count('n'))\n        list3.append(string1.count('p'))\n        list3.append(string1.count('q'))\n        list3.append(string1.count('r'))\n        list3.append(string1.count('s'))\n        list3.append(string1.count('t'))\n        list3.append(string1.count('v'))\n        list3.append(string1.count('w'))\n        list3.append(string1.count('x'))\n        list3.append(string1.count('y'))\n        list3.append(string1.count('z'))\n    return list3\ndef sort_by_sum(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a list in which the elements of the original list are rearranged so that they are in descending order according to the sum of their corresponding elements.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.append(sum(list1[i]))\n    list3=[]\n    for i in range(len(list2)-1,-1,-1):\n        list",
        "num_ids": 62
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pq = []\n    for i in range(n):\n        pq.append(list1.pop())\n    heapq.heapify(pq)\n    while len(list1)!= 0:\n        heapq.heappush(pq,list1.pop())\n    return pq\n",
        "num_ids": 76
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        return list1[:n]\n    \ndef larg_pow(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list2 = list()\n        for i in range(n):\n            list2.append(max(list1))\n            list1.remove(max(list1))\n        return list2\n",
        "num_ids": 67
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510\n    return pi * (r**2) * (h/2)\n",
        "num_ids": 45
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area_cylinder = pi*r*r + 2*pi*r*h + 2*pi*h*h\n    return area_cylinder\n",
        "num_ids": 37
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n    ",
        "num_ids": 19
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    #cylindrical case\n    if isinstance(r,(int,float)) and isinstance(h,(int,float)):\n        #print(\"cylindrical case\")\n        #r and h are constants\n        return (2*math.pi*r*h)\n    #toroidal case\n    elif isinstance(r,(int,float)) and isinstance(h,(int,float)):\n        #print(\"toroidal case\")\n        #r and h are constants\n        return (2*math.pi*r*h)\n    #ellipsoidal case\n    elif isinstance(r,(int,float)) and isinstance(h,(int,float)):\n        #print(\"ellipsoidal case\")\n        #r and h are constants\n        return (2*math.pi*r*h)\n    #spherical case\n    elif isinstance(r,(int,float)) and isinstance(h,(int,float)):\n        #print(\"spherical case\")\n        #r and h are constants\n        return (4*math.pi*r**2)\n    #cylindrical toroidal ellipsoidal case\n    elif isinstance(r,(int,float)) and isinstance(h,(int,float)) and isinstance(r,(int,float)) and isinstance(h,(int,float)):\n        #print(\"cylindrical toroidal ellipsoidal case\")\n        return (2*math.pi*r*h)\n    #cylindrical toroidal spherical case\n    elif isinstance(r,(int,float)) and isinstance(h,(int,float)) and isinstance(r,(int,float)) and isinstance(h,(int,float)):\n        #print(\"cylindrical toroidal spherical case\")\n        return (2*math.pi*r*h)\n    #spherical toroidal cylindrical case\n    elif isinstance(r,(int,float)) and isinstance(h,(int,float)) and isinstance(r,(int,float)) and isinstance(h,(int,float)):\n        #print(\"spherical toroidal cylindrical case\")\n        return (4*math.pi*r**2)\n    #spherical toroidal spherical case\n    elif isinstance(r,(int,float)) and isinstance(h,(int,float)) and isinstance(r,(int,float)) and isinstance(h,(int,float)):\n        #print(\"spherical toroidal spherical case\")\n        return (4*math.pi*r**2)\n    #other cases\n    else:\n        print(\"other cases\")\n        return None\n",
        "num_ids": 629
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi*(r**2)",
        "num_ids": 18
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (math.pi * r * r + math.pi * r * h)/2\n",
        "num_ids": 23
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    return r**2 * pi * 2 + 2*r*h*pi\n",
        "num_ids": 26
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = 2*math.pi*r*h\n    return A\n",
        "num_ids": 19
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2\n",
        "num_ids": 24
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    volume = math.pi * (r**2) * h\n    area = 2 * (math.pi * r) * h\n    print(volume)\n    print(area)\n    return (volume, area)\n",
        "num_ids": 56
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l, 3)\n",
        "num_ids": 11
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l**3\n",
        "num_ids": 12
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = bin(n).replace(\"0b\",\"\")\n    l = [x[i] for i in range(len(x)) if i % 2 == 0]\n    z = \"\".join(l)\n    return int(z, 2)\n",
        "num_ids": 60
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0x5555555555555555)\n",
        "num_ids": 19
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # convert number to binary representation\n    b = '{0:b}'.format(n)\n    \n    # find all the positions where a bit is set\n    # the bit position is the index of the string representation of the number\n    pos = [i for i,x in enumerate(b) if x == '1']\n    \n    # set all bits at the position to 0\n    for i in pos:\n        b[i] = '0'\n    \n    # convert back to decimal\n    return int(''.join(b),2)\n",
        "num_ids": 130
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x5555555555555555 # bit mask to clear all even bits\n    n = n | (0xAAAAAAAAAA) # bit mask to set all even bits\n    return n \n",
        "num_ids": 51
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n-1)\n",
        "num_ids": 12
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = \"{0:b}\".format(n)\n    result = len(b)\n    for i in range(0,len(b)):\n        if b[i] == '1':\n            result -= 1\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1) \n",
        "num_ids": 13
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1 << n.bit_length() - 1\n    return n & mask\n",
        "num_ids": 22
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    set_bit = 0\n    for i in range(0,32):\n        if n & (1 << i):\n            set_bit += 1\n    return set_bit\n",
        "num_ids": 43
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0x55555555)\n",
        "num_ids": 15
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dic = {}\n    for i in test_list:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\ndef find_duplicates(test_list):\n    '''\n    Write a function that takes in a list of integers and returns a list of all the integers that appear more than once.\n    '''\n    l = []\n    for i in test_list:\n        if test_list.count(i) > 1:\n            l.append(i)\n    return l\ndef group_by_length(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary mapping each unique string to the list of strings that have that unique string as a substring.\n    '''\n    dic = {}\n    for i in test_list:\n        if i not in dic:\n            dic[i] = [i]\n        else:\n            dic[i].append(i)\n    return dic\ndef find_average(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the average of the numbers.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total / len(test_list)\ndef word_count(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary mapping each unique string to the number of times it appears in the list.\n    '''\n    dic = {}\n    for i in test_list:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\ndef find_sum(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total\ndef find_min(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the minimum of the numbers.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i)\n    return min(l)\ndef find_max(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum of the numbers.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i)\n    return max(l)\ndef find_common(test_list1,test_list2):\n    '''\n    Write a function that takes in two lists of numbers and returns a list of numbers that appear in both lists.\n    '''\n    l = []\n    for i in test_list1:\n        if i in test_list2:\n            l.append(i)\n    return l\ndef is_palindrome(test_list):\n    '''\n    Write a function that takes in a list of strings and returns True if all the strings in the list are palindromes, and False otherwise.\n    '''\n    for i in test_list:\n        l = [i[::-1]]\n        if l == i:\n            return True\n    return False\ndef filter_by_length(test_list, length):\n    '''\n    Write a function that takes in a list of strings and returns a list of strings that are of the given length.\n    '''\n    l = []\n    for i in test_list:\n        if len(i) == length:\n            l.append(i)\n    return l\ndef filter_by_letter(test_list, letter):\n    '''\n    Write a function that takes in a list of strings and returns a list of strings that contain the given letter.\n    '''\n    l = []\n    for i in test_list:\n        if letter in i:\n            l.append(i)\n    return l\ndef generate_list(test_list, integer):\n    '''\n    Write a function that takes in a list of strings and returns a list of strings of the given length, but each element of the new list is a random string from the original list.\n    '''\n    l = []\n    for i in range(0,integer):\n        l.append(test_list[random.randrange(0,len(test_list))])\n    return l\ndef get_anagrams(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the anagrams of that list.\n    '''\n    l = []\n    for i in test_list:\n        l.append(sorted(i))\n    return l\ndef get_permutations(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the permutations of those strings.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i[::-1])\n    return l\ndef get_all_permutations(test_list):\n    '''\n    Write a function that takes in a list of strings and returns all permutations of those strings, including the original string.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i[::-1])\n    return l\ndef check_anagram(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the permutations of those strings, but only the permutations that are anagrams.\n    '''\n    l = []\n    for i in test_list:\n        l.append(i[::-1])\n    return l\ndef get_item(test_list, index):\n    '''\n    Write a function that takes in a list of strings and returns a list of the string in the given index.\n    '''\n    return test_list[index]\ndef get_index(test_list, item):\n    '''\n    Write a function that takes in a list of strings and returns a list of the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == item:\n            l.append(i)\n    return l\ndef get_occurrences(test_list, item):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == item:\n            l.append(i)\n    return l\ndef get_duplicates(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the duplicates of the string in that list.\n    '''\n    l = []\n    for i in test_list:\n        if test_list.count(i) > 1:\n            l.append(i)\n    return l\ndef get_letter_count(test_list, letter):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == letter:\n            l.append(i)\n    return l\ndef get_letter_index(test_list, letter):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == letter:\n            l.append(i)\n    return l\ndef get_item_count(test_list, item):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the indexes of all the instances of the given string.\n    '''\n    l = []\n    for i,j in enumerate(test_list):\n        if j == item:\n            l.append(i)\n    return l\ndef get_items_with_index(test_list, index):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the strings with the given index.\n    '''",
        "num_ids": 1
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = Counter(test_list)\n    return occurence\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    a = Counter(test_list)\n    return a\n",
        "num_ids": 16
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for item in test_list:\n        if item not in occurences:\n            occurences[item] = 1\n        else:\n            occurences[item] += 1\n    return occurences\n",
        "num_ids": 58
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for tup in test_list:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n",
        "num_ids": 61
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in test_list:\n        if i in occurences:\n            occurences[i] += 1\n        else:\n            occurences[i] = 1\n    return occurences\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # def count_occurances(list_of_tuples):\n    #     counts = Counter()\n    #     for tup in list_of_tuples:\n    #         counts[tup] += 1\n    #     return counts\n",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter()\n    for item in test_list:\n        occurences[item] += 1\n    return occurences\n",
        "num_ids": 35
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    length=len(str)\n    count=0\n    for i in range(length):\n        if str[i]!=' ':\n            for j in range(i,length):\n                if str[j]==' ':\n                    break\n                count+=1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= \"\":\n                result += 1\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_list = []\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring_list.append(str[i:j+1])\n    return len(substring_list)\n",
        "num_ids": 63
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == '':\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(re.findall(r'(?<!\\w\\.\\w.)\\b\\w{1,2}\\b',str))\n    \nif __name__ == '__main__': \n    str = \"This is an example of the word count program.\"\n    print(number_of_substrings(str)",
        "num_ids": 78
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    for i in range(1, len(str)):\n        if str[i-1] == '0':\n            result = result + 1\n        else:\n            break\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count = count + 1\n    return count\n    \nprint number_of_substrings('123456789')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxyz')\nprint number_of_substrings('abcdefghijklmnopqrstuvwxy')\n",
        "num_ids": 122
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str) \n    if n == 0:\n        return 0\n    count = 0\n    for i in range(n):\n        if str[i]!='':\n            for j in range(i, n):\n                if j == i:\n                    count += 1\n                elif str[j]!='':\n                    count += 1\n                    break\n    return count\n",
        "num_ids": 94
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.split('a')) - 1\n    \ndef pattern(n):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str(n).split('a')) - 1\n",
        "num_ids": 18
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    start = 0\n    while start < len(str):\n        end = start + 1\n        while end <= len(str):\n            substrings.append(str[start:end])\n            end += 1\n        start += 1\n    return len(substrings)\n",
        "num_ids": 69
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m==0:\n        return 0\n    if m==1:\n        return 1\n    if m==2:\n        return 1\n    if m==3:\n        return 2\n    if m==4:\n        return 2\n    if m==5:\n        return 3\n    if m==6:\n        return 4\n    if m==7:\n        return 5\n    if m==8:\n        return 8\n    if m==9:\n        return 9\n    if m==10:\n        return 10\n    if m==11:\n        return 11\n    if m==12:\n        return 11\n    if m==13:\n        return 13\n    if m==14:\n        return 14\n    if m==15:\n        return 15\n    if m==16:\n        return 16\n    if m==17:\n        return 17\n    if m==18:\n        return 19\n    if m==19:\n        return 19\n    if m==20:\n        return 19\n    if m==21:\n        return 22\n    if m==22:\n        return 22\n    if m==23:\n        return 22\n    if m==24:\n        return 22\n    if m==25:\n        return 22\n    if m==26:\n        return 24\n    if m==27:\n        return 25\n    if m==28:\n        return 25\n    if m==29:\n        return 25\n    if m==30:\n        return 25\n    if m==31:\n        return 26\n    if m==32:\n        return 26\n    if m==33:\n        return 26\n    if m==34:\n        return 26\n    if m==35:\n        return 26\n    if m==36:\n        return 26\n    if m==37:\n        return 26\n    if m==38:\n        return 26\n    if m==39:\n        return 26\n    if m==40:\n        return 26\n    if m==41:\n        return 26\n    if m==42:\n        return 26\n    if m==43:\n        return 26\n    if m==44:\n        return 26\n    if m==45:\n        return 26\n    if m==46:\n        return 26\n    if m==47:\n        return 26\n    if m==48:\n        return 26\n    if m==49:\n        return 26\n    if m==50:\n        return 26\n    if m==51:\n        return 26\n    if m==52:\n        return 26\n    if m==53:\n        return 26\n    if m==54:\n        return 26\n    if m==55:\n        return 26\n    if m==56:\n        return 26\n    if m==57:\n        return 26\n    if m==58:\n        return 26\n    if m==59:\n        return 26\n    if m==60:\n        return 26\n    if m==61:\n        return 26\n    if m==62:\n        return 26\n    if m==63:\n        return 26\n    if m==64:\n        return 26\n    if m==65:\n        return 26\n    if m==66:\n        return 26\n    if m==67:\n        return 26\n    if m==68:\n        return 26\n    if m==69:\n        return 26\n    if m==70:\n        return 26\n    if m==71:\n        return 26\n    if m==72:\n        return 26\n    if m==73:\n        return 26\n    if m==74:\n        return 26\n    if m==75:\n        return 26\n    if m==76:\n        return 26\n    if m==77:\n        return 26\n    if m==78:\n        return 26\n    if m==79:\n        return 26\n    if m==80:\n        return 26\n    if m==81:\n        return 26\n    if m==82:\n        return 26\n    if m==83:\n        return 26\n    if m==84:\n        return 26\n    if m==85:\n        return 26\n    if m==86:\n        return 26\n    if m==87:\n        return 26\n    if m==88:\n        return 26\n    if m==89:\n        return 26\n    if m==90:\n        return 26\n    if m==91:\n        return 26\n    if m==92:\n        return 26\n    if m==93:\n        return 26\n    if m==94:\n        return 26\n    if m==95:\n        return 26\n    if m==96:\n        return 26\n    if m==97:\n        return 26\n    if m==98:\n        return 26\n    if m==99:\n        return 26\n    if m==100:\n        return 26\n    if m==101:\n        return 26\n    if m==102:\n        return 26\n    if m==103:\n        return 26\n    if m==104:\n        return 26\n    if m==105:\n        return 26\n    if m==106:\n        return 26\n    if m==107:\n        return 26\n    if m==108:\n        return 26\n    if m==109:\n        return 26\n    if m==110:\n        return 26\n    if m==111:\n        return 26\n    if m==112:\n        return 26\n    if m==113:\n        return 26\n    if m==114:\n        return 26\n    if m==115:\n        return 26\n    if m==116:\n        return 26\n    if m==117:\n        return 26\n    if m==118:\n        return 26\n    if m==119:\n        return 26\n    if m==120:\n        return 26\n    if m==121:\n        return 26\n    if m==122:\n        return 26\n    if m==123:\n        return 26\n    if m==124:\n        return 26\n    if m==125:\n        return 26\n    if m==126:\n        return 26\n    if m==127:\n        return 26\n    if m==128:\n        return 26\n    if m==129:\n        return 26\n    if m==130:\n        return 26\n    if m==131:\n        return 26\n    if m==132:\n        return 26\n    if m==133:\n        return 26\n    if m==134:\n        return 26\n    if m==135:\n        return 26\n    if m==136:\n        return 26\n    if m==137:\n        return 26\n    if m==138:\n        return 26\n    if m==139:\n        return 26\n    if m==140:\n        return 26\n    if m==141:\n        return 26\n    if m==142:\n        return 26\n    if m==143:\n        return 26\n    if m==144:\n        return 26\n    if m==145:\n        return 26\n    if m==146:\n        return 26\n    if m==147:\n        return 26\n    if m==148:\n        return 26\n    if m==149:\n        return 26\n    if m==150:\n        return 26\n    if m==151:\n        return 26\n    if m==152:\n        return 26\n    if m==153:\n        return 26\n    if m==154:\n        return 26\n    if m==155:\n        return 26\n    if m==156:\n        return 26\n    if m==157:\n        return 26\n    if m==158:\n        return 26\n    if m==159:\n        return 26\n    if m==160:\n        return 26\n    if m==161:\n        return 26\n    if m==162:\n        return 26\n    if m==163:\n        return 26\n    if m==164:\n        return 26\n    if m==165:\n        return 26\n    if m==166:\n        return 26\n    if m==167:\n        return 26\n    if m==168:\n        return 26\n    if m==169:\n        return 26\n    if m==170:\n        return 26\n    if m==171:\n        return 26\n    if m==172:\n        return 26\n    if m==173:\n        return 26\n    if m==174:\n        return 26\n    if m==175:\n        return 26\n    if m==176:\n        return 26\n    if m==177:\n        return 26\n    if m==178:\n        return 26\n    i",
        "num_ids": 1973
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (m - 2)**n + 1\n",
        "num_ids": 14
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m - 2, n-1)\n",
        "num_ids": 67
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return math.factorial(n)//(math.factorial(n-2)*2**(n-2))\n    \n    ",
        "num_ids": 33
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if m < 2 * n:\n        return 0\n    if m == 2 * n:\n        return 1\n    if m >= 2 * n:\n        return (get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - 2, n))\n",
        "num_ids": 100
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**n - ((m-1)**(n-1))\n",
        "num_ids": 20
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    a = math.factorial(n)\n    b = m\n    c = math.factorial(n-2)\n    d = n\n    \n    return int(a/ (b * c * d))\n    \n    \nprint(get_total_number_of_sequences(4,3)",
        "num_ids": 73
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Complexity: O(m^2 * n)\n    if m <= 0 or n <= 0:\n        return 0\n    if m <= n:\n        return 1\n    return (get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m, n-1))\n",
        "num_ids": 82
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Creates a list of integers\n    num_list = list(range(1,m+1))\n    # Returns a list of all possible combinations from num_list\n    return_list = list(itertools.combinations(num_list,n))\n    # Removes duplicates from the list\n    return_list = [list(x) for x in set(tuple(x) for x in return_list)]\n    # Returns the number of possible combinations\n    return len(return_list)\n",
        "num_ids": 118
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)>len(list2):\n        return list1[:len(list1)-1] + list2\n    else:\n        return list1 + list2[:len(list2)-1]\n",
        "num_ids": 54
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = list1[:]\n    result[-1:] = list2\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1]=list2\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #indexes = len(list1)-1\n    #indexes2 = len(list2)-1\n    #list1[indexes] = list2[indexes2]\n    #return list1\n    return list1[:-1]+list2\n",
        "num_ids": 61
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1]=list2\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return list1\n    elif len(list1) > 0:\n        return [list1[0]] + replace_list(list1[1:], list2)\n    elif len(list2) > 0:\n        return replace_list(list2, [])\n    else:\n        return []\n",
        "num_ids": 93
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        return 1 + count_charac(str1[1:])\n",
        "num_ids": 37
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \n    ",
        "num_ids": 13
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str1.replace(' ', '')\n    return len(str1)\n",
        "num_ids": 23
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(\"Total number of characters in the string are {}.\".format(count))\n",
        "num_ids": 39
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n",
        "num_ids": 47
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))**2\ndef nth_perfect_square(n):\n    '''\n    Write a python function to find the nth perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(n)))**2\ndef isPerfectSquare(N):\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    if(int(math.sqrt(N))**2 == N):\n        return True\n    else:\n        return False\ndef nth_perfect_square2(n):\n    '''\n    Write a python function to find the nth perfect square greater than a given number.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return nth_perfect_square2(n - 1) + 1\ndef perfect_square_sum(N):\n    '''\n    Write a python function to find the sum of all the perfect squares less than the number.\n    '''\n    if(isPerfectSquare(N)):\n        return 1\n    else:\n        return perfect_square_sum(next_Perfect_Square(N)) + perfect_square_sum(N - next_Perfect_Square(N))\ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of all the perfect squares less than the number.\n    '''\n    return perfect_square_sum(n)\ndef nth_fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_fibonacci(n-1) + nth_fibonacci(n-2)\ndef nth_fibonacci2(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_fibonacci(n-1) + nth_fibonacci(n-2)\ndef fibonacci_sum(n):\n    '''\n    Write a python function to find the sum of all the fibonacci numbers less than the number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_fibonacci2(n-1) + nth_fibonacci2(n-2)\ndef nth_fibonacci3(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_fibonacci3(n-1) + nth_fibonacci3(n-2) + nth_fibonacci3(n-3)\ndef nth_fibonacci4(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_fibonacci4(n-1) + nth_fibonacci4(n-2) + nth_fibonacci4(n-3) + nth_fibonacci4(n-4)\ndef is_Prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if(n <= 1):\n        return False\n    elif(n <= 3):\n        return True\n    elif(n%2 == 0 or n%3 == 0):\n        return False\n    else:\n        return is_Prime(n-1)\ndef count_Primes(n):\n    '''\n    Write a python function to count the number of prime numbers less than the number.\n    '''\n    if(n == 0 or n == 1):\n        return 0\n    elif(n == 2):\n        return 1\n    else:\n        return count_Primes(n-1) + count_Primes(n-2) + count_Primes(n-3)\ndef nth_Prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_Prime(n-1) + nth_Prime(n-2) + nth_Prime(n-3)\ndef nth_Prime2(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_Prime2(n-1) + nth_Prime2(n-2) + nth_Prime2(n-3)\ndef prime_Factors(n):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    if(n == 1):\n        return n\n    elif(n == 2):\n        return n\n    else:\n        return prime_Factors(n/2) + prime_Factors(n/3) + prime_Factors(n/5) + prime_Factors(n/7) + prime_Factors(n/11) + prime_Factors(n/13) + prime_Factors(n/17) + prime_Factors(n/19) + prime_Factors(n/23) + prime_Factors(n/29) + prime_Factors(n/31)\ndef nth_Prime3(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_Prime3(n-1) + nth_Prime3(n-2) + nth_Prime3(n-3)\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if(n <= 1):\n        return False\n    elif(n <= 3):\n        return True\n    elif(n%2 == 0 or n%3 == 0):\n        return False\n    else:\n        return is_Prime(n-1)\ndef nth_Prime4(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_Prime4(n-1) + nth_Prime4(n-2) + nth_Prime4(n-3) + nth_Prime4(n-4)\ndef nth_Prime5(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_Prime5(n-1) + nth_Prime5(n-2) + nth_Prime5(n-3) + nth_Prime5(n-4) + nth_Prime5(n-5) + nth_Prime5(n-6) + nth_Prime5(n-7) + nth_Prime5(n-8) + nth_Prime5(n-9)\ndef nth_Prime6(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    if(n == 0 or n == 1):\n        return n\n    else:\n        return nth_Prime6(n-1) + nth_Prime6(n-2) + nth_Prime6(n-3) + nth_Prime6(n-4) + nth_Prime6(n-5) + nth_Prime6(n-6) + nth_Prime6(n-7) + nth_Prime6(n-8) + nth_Prime6(n-9) + nth_Prime6(n-10) + nth_Prime6(n-11) + nth_Prime6(n-12)\ndef is_Prime2(n):\n    '''\n    Write a python function to check if a number i",
        "num_ids": 13
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    temp = N\n    if (temp & 1):\n        temp += 1\n        while (temp & 1):\n            temp += 1\n    else:\n        temp += 2\n        while (temp & 1):\n            temp += 1\n    return temp\n",
        "num_ids": 59
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 0): \n        return 1\n    else: \n        return int(N**(0.5) + 1) \n    \ndef find_Factors(N): \n    '''\n    Write a python function to find all factors of a number.\n    '''\n    Factors = []\n    x = 2\n    while (x < N): \n        if (N % x == 0): \n            Factors.append(x)\n            Factors.append(int(N/x))\n        x += 1\n    Factors.append(N)\n    Factors.sort()\n    return Factors\ndef find_Factors_in_range(x, y): \n    '''\n    Write a python function to find all the factors of a number in a given range.\n    '''\n    Factors = []\n    for i in range(x, y+1): \n        if (i > 1): \n            Factors.append(i)\n    Factors.sort()\n    return Factors\ndef find_Prime_Factors(N): \n    '''\n    Write a python function to find all prime factors of a number.\n    '''\n    Factors = []\n    x = 2\n    while (x <= N): \n        if (N % x == 0): \n            Factors.append(x)\n        x += 1\n    Factors.append(N)\n    Factors.sort()\n    return Factors\n",
        "num_ids": 67
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 1:\n        return None\n    r = int(math.sqrt(N))\n    if r * r == N:\n        return (r + 1) ** 2\n    return None\n",
        "num_ids": 49
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))) \ndef odd_iter():\n    '''\n    A generator function that yields 1,3,5,7,9....\n    '''\n    n=1\n    while True:\n        n=n+2\n        yield n\n",
        "num_ids": 24
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n=N\n    while True:\n        sq=n*n\n        if sq>N:\n            break\n        if sq==N:\n            return sq\n        n=n+1\n    return sq\ndef find_Perfect_Square(n):\n    '''\n    Write a python function to find the perfect square greater than a given number.\n    '''\n    a=int(math.sqrt(n))\n    b=int(math.sqrt(n+1))\n    if a*a==n:\n        return a\n    else:\n        return b\ndef count_Digits(n):\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    return int(math.log10(n)+1)\ndef sum_Digits(n):\n    '''\n    Write a python function to sum all the digits of a given number.\n    '''\n    s=0\n    while n:\n        s=s+n%10\n        n/=10\n    return s\ndef is_Prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n<1:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef is_Palindrome(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    return str(n)==str(n)[::-1]\ndef find_Palindrome(n):\n    '''\n    Write a python function to find the palindrome greater than a given number.\n    '''\n    i=n\n    while i>0:\n        if is_Palindrome(i):\n            return i\n        i-=1\n    return n\ndef is_Integer(n):\n    '''\n    Write a python function to check whether a given number is integer or not.\n    '''\n    return isinstance(n,int)\ndef find_Integer(n):\n    '''\n    Write a python function to find the integer greater than a given number.\n    '''\n    while not is_Integer(n):\n        n=int(n)\n        if n==0:\n            return 0\n        if n>0:\n            return n\n        n=float(n)\n        n=int(n)\n    return n\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    if n<0:\n        return 0\n    a=1\n    for i in range(1,n+1):\n        a=a*i\n    return a\ndef Sum_of_Factorial(n):\n    '''\n    Write a python function to compute the sum of the factorial of a given number.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s=s+factorial(i)\n    return s\ndef count_Digits(n):\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    return int(math.log10(n)+1)\ndef find_Digits(n):\n    '''\n    Write a python function to find the number of digits of a given number.\n    '''\n    s=0\n    while n:\n        s+=1\n        n/=10\n    return s\ndef is_Armstrong(n):\n    '''\n    Write a python function to check whether a given number is armstrong or not.\n    '''\n    s=0\n    for i in range(find_Digits(n)):\n        s+=int(math.pow(n%10,find_Digits(n)))\n    if s==n:\n        return True\n    return False\ndef is_Armstrong_Integer(n):\n    '''\n    Write a python function to check whether a given number is armstrong or not.\n    '''\n    if is_Integer(n):\n        return is_Armstrong(n)\n    else:\n        return 0\ndef find_Armstrong_Integer(n):\n    '''\n    Write a python function to find the armstrong greater than a given number.\n    '''\n    n=find_Integer(n)\n    while not is_Armstrong_Integer(n):\n        n+=1\n        if n>n:\n            return n\n    return n\ndef is_Prime_Number(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n<1:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef find_Prime_Number(n):\n    '''\n    Write a python function to find the prime greater than a given number.\n    '''\n    n=find_Integer(n)\n    while not is_Prime_Number(n):\n        n+=1\n        if n>n:\n            return n\n    return n\ndef is_Binary(n):\n    '''\n    Write a python function to check whether a given number is binary or not.\n    '''\n    return n>0 and n&(n-1)==0\ndef find_Binary(n):\n    '''\n    Write a python function to find the binary greater than a given number.\n    '''\n    s=''\n    while n:\n        s+=str(n%2)\n        n/=2\n    return int(s[::-1])\ndef is_Power_Number(n):\n    '''\n    Write a python function to check whether a given number is power of two or not.\n    '''\n    if n==1:\n        return True\n    if n<1:\n        return False\n    if n&(n-1)!=0:\n        return False\n    return True\ndef find_Power_Number(n):\n    '''\n    Write a python function to find the power of two greater than a given number.\n    '''\n    s=1\n    while s<n:\n        s*=2\n    return s\ndef is_Power_of_Four(n):\n    '''\n    Write a python function to check whether a given number is power of four or not.\n    '''\n    return is_Power_Number(n) and (n&(n-1)==0) and (n&(n-2)==0)\ndef is_Power_of_Four_Integer(n):\n    '''\n    Write a python function to check whether a given number is power of four or not.\n    '''\n    if is_Integer(n):\n        return is_Power_of_Four(n)\n    else:\n        return 0\ndef find_Power_of_Four_Integer(n):\n    '''\n    Write a python function to find the power of four greater than a given number.\n    '''\n    n=find_Integer(n)\n    while not is_Power_of_Four_Integer(n):\n        n+=1\n        if n>n:\n            return n\n    return n\ndef is_Power_of_Two(n):\n    '''\n    Write a python function to check whether a given number is power of two or not.\n    '''\n    return n>0 and n&(n-1)==0\ndef is_Power_of_Two_Integer(n):\n    '''\n    Write a python function to check whether a given number is power of two or not.\n    '''\n    if is_Integer(n):\n        return is_Power_of_Two(n)\n    else:\n        return 0\ndef find_Power_of_Two_Integer(n):\n    '''\n    Write a python function to find the power of two greater than a given number.\n    '''\n    s=1\n    while s<n:\n        s*=2\n    return s\ndef is_Armstrong_Number(n):\n    '''\n    Write a python function to check whether a given number is armstrong or not.\n    '''\n    s=0\n    for i in range(find_Digits(n)):\n        s+=int(math.pow",
        "num_ids": 31
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))\n    n = n+1\n    return n*n\ndef isPrime(n):\n    '''\n    Write a python function to check if a given number is a prime or not.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i ==0:\n            return False\n    return True\ndef get_Prime_factor(N):\n    '''\n    Write a python function to find all the prime factors of a given number.\n    '''\n    #prime factors are always in the form of prime numbers and power of prime numbers\n    prime_factors = []\n    i = 2\n    while i<N:\n        while N%i == 0:\n            prime_factors.append(i)\n            N = N/i\n        i+=1\n    prime_factors.append(N)\n    return prime_factors\ndef find_GCD(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    while b!=0:\n        a,b = b, a%b\n    return a\ndef find_LCM(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    return a*b/find_GCD(a,b)\ndef get_factors(N):\n    '''\n    Write a python function to find all the factors of a given number.\n    '''\n    factors = []\n    i = 1\n    while i<N:\n        if N%i == 0:\n            factors.append(i)\n        i+=1\n    return factors\ndef nCr(n,r):\n    '''\n    Write a python function to calculate n choose r.\n    '''\n    f = math.factorial\n    return f(n) / f(r) / f(n-r)\ndef next_Prime(N):\n    '''\n    Write a python function to find the next prime number greater than a given number.\n    '''\n    while True:\n        N+=1\n        if isPrime(N) == True:\n            return N\ndef is_pandigital(N,limit):\n    '''\n    Write a python function to check if a given number is pandigital or not.\n    '''\n    if len(str(N))!= limit:\n        return False\n    N = str(N)\n    s = ''\n    for i in range(1,limit+1):\n        s += str(i)\n    if N!= s:\n        return False\n    return True\ndef is_palindrome(N):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    if str(N)[::-1] == str(N):\n        return True\n    return False\ndef is_armstrong(N):\n    '''\n    Write a python function to check if a given number is armstrong or not.\n    '''\n    s = 0\n    temp = N\n    while temp>0:\n        d = temp%10\n        s += d*d*d\n        temp /=10\n    if s == N:\n        return True\n    return False\ndef is_pandigital_Armstrong(N,limit):\n    '''\n    Write a python function to check if a given number is pandigital and armstrong or not.\n    '''\n    if is_pandigital(N,limit) == True and is_armstrong(N) == True:\n        return True\n    return False\ndef is_sorted(N):\n    '''\n    Write a python function to check if a given number is sorted or not.\n    '''\n    s = sorted(str(N))\n    return s == str(N)\ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check if two strings are anagram or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1) == len(s2):\n        for i in s1:\n            if s2.count(i) == 0:\n                return False\n    else:\n        return False\n    return True\ndef find_Largest_Anagram(s1,s2):\n    '''\n    Write a python function to find the largest anagram of two strings.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1) == len(s2):\n        for i in s1:\n            if s2.count(i) == 0:\n                return False\n    else:\n        return False\n    return True\ndef find_anagram(s1,s2):\n    '''\n    Write a python function to find all the anagrams of two strings.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1) == len(s2):\n        for i in s1:\n            if s2.count(i) == 0:\n                return False\n    else:\n        return False\n    return True\ndef find_factor(N):\n    '''\n    Write a python function to find all the factors of a given number.\n    '''\n    factors = []\n    for i in range(1,N):\n        if N%i == 0:\n            factors.append(i)\n    return factors\ndef get_Factors(N):\n    '''\n    Write a python function to find all the factors of a given number.\n    '''\n    factors = []\n    i = 1\n    while i<N:\n        if N%i == 0:\n            factors.append(i)\n        i+=1\n    return factors\ndef is_Pandigital(N):\n    '''\n    Write a python function to check if a given number is pandigital or not.\n    '''\n    s = str(N)\n    length = len(s)\n    for i in range(1,length+1):\n        if str(i) not in s:\n            return False\n    return True\ndef is_Hexa(N):\n    '''\n    Write a python function to check if a given number is hexa or not.\n    '''\n    if len(str(N)) == 1:\n        return False\n    for i in range(1,10):\n        if (str(i) not in str(N)):\n            return False\n    return True\ndef is_Hexa_Sorted(N):\n    '''\n    Write a python function to check if a given number is sorted in hexa or not.\n    '''\n    s = sorted(str(N))\n    return s == str(N)\ndef is_Hexa_Permutation(N):\n    '''\n    Write a python function to check if a given number is permuatation of hexa or not.\n    '''\n    if len(str(N)) == len(set(str(N))):\n        return True\n    return False\ndef get_Permuted_Hexa(N):\n    '''\n    Write a python function to find all the permutations of a given number in hexa.\n    '''\n    hexas = []\n    i = 1\n    while i < 16:\n        hexas.append(i*N)\n        i+=1\n    return hexas\ndef is_Perfect_Square(N):\n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    if int(math.sqrt(N))**2 == N:\n        return True\n    return False\ndef find_Next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))\n    n = n+1\n    return n*n\ndef is_Prime_Power(N):\n    '''\n    Write a python function to check if a given number is prime power or not.\n    '''\n    if isPrime(N) == True:\n        s = 0\n        temp = N\n        while temp>0",
        "num_ids": 28
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N < 0): \n        return None \n    if (N == 0 or N == 1): \n        return N \n    # N must be even at this point \n    if(N % 2 == 0): \n        return (N + 1) \n    else: \n        return (N + 2)\ndef nth_perfect_square(n):\n    '''\n    Write a python function to find the nth perfect square greater than a given number.\n    '''\n    if(n <= 0): \n        return None \n    if (n == 1 or n == 2): \n        return n \n    s = 1\n    s_prev = 1\n    while(True): \n        s = s_prev + 4*s_prev**2\n        if(s >= n):\n            break\n        s_prev = s\n    return s \ndef count_Digits(n):\n    '''\n    Write a python function to count the digits of a number.\n    '''\n    if(n < 0): \n        return None \n    if(n < 10): \n        return 1\n    if(n % 10 == 0):\n        return 1 + count_Digits(n/10)\n    else:\n        return 1 + count_Digits(n/10)\ndef sum_Digits(n):\n    '''\n    Write a python function to return the sum of digits of a number.\n    '''\n    if(n < 0): \n        return None \n    if(n < 10): \n        return n\n    if(n % 10 == 0):\n        return n/10 + sum_Digits(n/10)\n    else:\n        return n/10 + sum_Digits(n/10)\ndef rotate_Digits(n,k):\n    '''\n    Write a python function to rotate the digits of a number by k places.\n    '''\n    if(n < 0 or k < 0):\n        return None \n    if(n < 10):\n        return n \n    if(k == 0):\n        return n\n    if(n % 10 == 0):\n        return n/10 + rotate_Digits(n/10,k)\n    else:\n        return (n%10 + rotate_Digits(n/10,k))\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n < 0):\n        return None \n    if(n == 0):\n        return 1\n    if(n == 1):\n        return n \n    return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number in the fibonacci series.\n    '''\n    if(n < 1):\n        return None \n    if(n == 1):\n        return 0\n    if(n == 2):\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\ndef fibonacci_recursive(n):\n    '''\n    Write a python function to return the nth number in the fibonacci series.\n    '''\n    if(n < 1):\n        return None \n    if(n == 1):\n        return 0\n    if(n == 2):\n        return 1\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\ndef sum_of_squares(n):\n    '''\n    Write a python function to return the sum of the squares of the digits of a number.\n    '''\n    if(n < 0):\n        return None \n    if(n < 10):\n        return n*n\n    if(n % 10 == 0):\n        return n/10 + sum_of_squares(n/10)\n    else:\n        return n/10 + sum_of_squares(n/10)\ndef is_Power_of_Two(n):\n    '''\n    Write a python function to determine if a number is a power of two.\n    '''\n    if(n < 0):\n        return False \n    if(n == 0):\n        return False \n    if(n == 1):\n        return True\n    if(n % 2!= 0):\n        return False \n    return is_Power_of_Two(n/2)\ndef sum_of_digits(n):\n    '''\n    Write a python function to return the sum of the digits of a number.\n    '''\n    if(n < 0):\n        return None \n    if(n < 10):\n        return n\n    if(n % 10 == 0):\n        return n/10 + sum_of_digits(n/10)\n    else:\n        return n/10 + sum_of_digits(n/10)\ndef is_Prime(n):\n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    if(n < 2):\n        return False \n    if(n == 2):\n        return True \n    if(n % 2 == 0):\n        return False \n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n % i == 0):\n            return False \n    return True\ndef is_Perfect(n):\n    '''\n    Write a python function to determine if a number is perfect or not.\n    '''\n    if(n < 1):\n        return False \n    if(n == 1):\n        return False \n    sum_of_divisors = 1\n    for i in range(2,n):\n        if(n % i == 0):\n            sum_of_divisors += i\n    if(sum_of_divisors == n):\n        return True \n    return False\ndef is_Palindrome(n):\n    '''\n    Write a python function to determine if a number is a palindrome or not.\n    '''\n    if(n < 0):\n        return False \n    if(n < 10):\n        return True \n    if(n % 10 == 0):\n        return is_Palindrome(n/10)\n    if(n % 10!= 0):\n        return is_Palindrome((n%10)*10 + n/10)\ndef is_Harshad(n):\n    '''\n    Write a python function to determine if a number is a harshad number or not.\n    '''\n    if(n < 0):\n        return False \n    if(n < 10):\n        return True \n    if(n % 10 == 0):\n        return is_Harshad(n/10)\n    if(n % 10!= 0):\n        return is_Harshad((n%10)*10 + n/10)\ndef is_Amicable(n):\n    '''\n    Write a python function to determine if a number is amicable or not.\n    '''\n    if(n < 1):\n        return False \n    if(n == 1):\n        return False \n    sum_of_divisors = 1\n    for i in range(2,int(math.sqrt(n))+1,2):\n        if(n % i == 0):\n            sum_of_divisors += i\n    if(sum_of_divisors == n):\n        return True \n    return is_Amicable(sum_of_divisors)\ndef is_Pandigital(n):\n    '''\n    Write a python function to determine if a number is a pandigital number or not.\n    '''\n    if(n < 1):\n        return False \n    if(n < 10):\n        return True \n    for i in range(1,10):\n        if(n % 10 == i):\n            continue\n        if(n / 10 == i):\n            return False \n        return is_Pandigital(n/10)\ndef is_Pandigital_Backwards(n):\n    '''\n    Write a python function to determine if a number is a pandigital number in reverse order or not.\n    '''\n    if(n < 1):\n        return False \n    if(n < 10):\n        return True \n    for i in range(1,10):\n        if(n % 10 == i):\n            continue\n        if(n / 10 == i):\n            return False \n        return is_Pandigital_Backwards(n/10)\ndef is_Ar",
        "num_ids": 87
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))**2\n    \ndef next_power_of_2(N): \n    '''\n    Write a python function to find the next power of 2 greater than a given number.\n    '''\n    return int(math.ceil(math.log(N,2)))\n    \ndef palindrome_solution(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    for i in range(len(s)): \n        if s[i] == s[~i]:\n            return i\n    return -1\n    \ndef palindrome(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        return -1\n        \ndef palindrome_solution_2(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_3(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_4(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_5(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_6(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_7(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_8(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_9(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_10(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_11(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_12(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_13(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_14(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_15(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_16(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_17(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_18(s): \n    '''\n    Write a python function to find the index of the first palindromic character of a given string.\n    '''\n    if s == s[::-1]: \n        return 0\n    else: \n        for i in range(len(s)): \n            if s[i]!= s[~i]:\n                return i\n    return -1\n    \ndef palindrome_solution_19(s): \n    '''\n    Write a python function to find the inde",
        "num_ids": 12
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))**2)\n",
        "num_ids": 22
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    # dynamic programming, store the max subarray with i and max subarray with i-1\n    # store the maximum subarray ending with i as max_end[i]\n    # max_end[i] = max(max_end[i-1]+arr[i], arr[i])\n    # max_end[i] = max(max_end[i-1]+arr[i], arr[i], arr[i-1])\n    # max_end[i] = max(arr[i], max_end[i-1], max_end[i-1]+arr[i])\n    # \n    max_end = [0]*len(arr)\n    max_end[0] = arr[0]\n    max_end[1] = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        max_end[i] = max(max_end[i-1]+arr[i], arr[i])\n    \n    return max(max_end)\n",
        "num_ids": 299
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return max(arr[0], max_sum(arr[1:]))\n",
        "num_ids": 38
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr.insert(0, 0)\n    arr.append(0)\n    max_sum = 0\n    for i in range(1, len(arr) - 1):\n        curr_sum = 0\n        if arr[i - 1] < arr[i] > arr[i + 1]:\n            j = i - 1\n            k = i + 1\n            while j >= 0 and k < len(arr) - 1:\n                if arr[j] < arr[k]:\n                    curr_sum += arr[k] - arr[j]\n                    k += 1\n                else:\n                    j -= 1\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n",
        "num_ids": 172
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0],arr[1])\n",
        "num_ids": 55
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in xrange(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 95
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    for i in range(len(arr)):\n        if i < 2:\n            max_sum = max(max_sum,arr[i])\n        else:\n            max_sum = max(max_sum,max_sum+arr[i])\n    return max_sum\n",
        "num_ids": 77
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 93
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)): \n        if i == 0: \n            prev_max_sum = arr[i] \n        else: \n            prev_max_sum = arr[i] + prev_max_sum\n        max_sum = max(prev_max_sum, max_sum)\n    return max_sum \n",
        "num_ids": 91
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # assume arr is sorted in non-descending order\n    arr_length = len(arr)\n    left_index = 0\n    right_index = arr_length - 1\n",
        "num_ids": 43
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    # first get the increasing subsequence\n    increasing = helper(arr, len(arr))\n    \n    # then get the decreasing subsequence\n    decreasing = helper(arr[::-1], len(arr))\n    \n    # then check if the increasing or decreasing is bigger\n    return max(increasing, decreasing)\n    \n    \ndef helper(arr, length):\n    '''\n    Helper function for max_sum. Given an array and a length of array, \n    we can calculate the maximum sum for that array up to a given length.\n    '''\n    \n    # base case\n    if length == 0:\n        return 0\n    \n    # first element is always increasing\n    first = arr[0]\n    \n    # we can either look at the next element or the previous element\n    \n    # first look at the next element\n    next = max(arr[1], first + arr[1])\n    \n    # then look at the previous element\n    previous = max(arr[0], first)\n    \n    # return the maximum\n    return max(next, previous)\n    \n    \n    \nprint(max_sum([1, 3, 8, 12, 4, 10, 5, 16, 3, 4, 9, 18, 17, 19, 13, 19, 14]))\n",
        "num_ids": 171
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    if number == 0:\n        return number\n    root = 0\n    # The sqrt of a number is the square root of the number\n    # Therefore, we begin with a high value and slowly iterate to the\n    # sqrt of the number\n    root += 1\n    while number!= 0:\n        # If the number is even, we add 2 to the root to get the next\n        # root value\n        if number % 2 == 0:\n            root += 2\n            number /= 2\n        # If the number is odd, we subtract 1 from the root to get the\n        # next root value\n        else:\n            root -= 1\n            number -= 1\n    # Once the root is computed, we return the root value\n    return root\n",
        "num_ids": 183
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    x = guess\n    while abs(number - x * x) > 0.000001:\n        x = (x + number / x) / 2\n    return x\n",
        "num_ids": 49
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"negative\"\n    else:\n        limit = 0.5\n        guess = number / 2\n        while abs(guess**2 - number) > limit:\n            guess = (guess + number / guess) / 2\n        return guess\n",
        "num_ids": 68
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number ** 0.5\n",
        "num_ids": 10
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Try the regular square root method.\n    root = (1 + (number / 2)) ** (0.5)\n    # While the estimate for the square root is not within 1e-15 of the true value:\n    # While the estimate for the square root is not within 1e-15 of the true value:\n    while abs(root ** 2 - number) >= 1e-15:\n        # Update the estimate.\n        root = (root + number / root) / 2\n    # Return the estimate.\n    return root\n",
        "num_ids": 122
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    guess = x/2.0\n    while abs(x-guess**2) > 0.001:\n        x = guess\n        guess = (x + number/x) / 2.0\n    return guess\n",
        "num_ids": 59
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return False\n    if number < 1:\n        return number\n    c = number / 2\n    while c * c!= number:\n        c = (c + number / c) / 2\n    return c\n    \nassert babylonian_squareroot(0) == 0\nassert babylonian_squareroot(1) == 1\nassert babylonian_squareroot(2) == 1.4142135623730951\nassert babylonian_squareroot(4) == 2\nassert babylonian_squareroot(9) == 3\nassert babylonian_squareroot(16) == 4\nassert babylonian_squareroot(25) == 5\nassert babylonian_squareroot(36) == 6\nassert babylonian_squareroot(49) == 7\nassert babylonian_squareroot(64) == 8\nassert babylonian_squareroot(81) == 9\nassert babylonian_squareroot(100) == 10\nassert babylonian_squareroot(121) == 11\nassert babylonian_squareroot(144) == 12\nassert babylonian_squareroot(169) == 13\nassert babylonian_squareroot(196) == 14\nassert babylonian_squareroot(225) == 15\nassert babylonian_squareroot(256) == 16\nassert babylonian_squareroot(289) == 17\nassert babylonian_squareroot(324) == 18\nassert babylonian_squareroot(361) == 19\nassert babylonian_squareroot(400) == 20\nassert babylonian_squareroot(441) == 21\nassert babylonian_squareroot(464) == 22\nassert babylonian_squareroot(505) == 23\nassert babylonian_squareroot(544) == 24\nassert babylonian_squareroot(577) == 25\nassert babylonian_squareroot(616) == 26\nassert babylonian_squareroot(645) == 27\nassert babylonian_squareroot(682) == 28\nassert babylonian_squareroot(729) == 29\nassert babylonian_squareroot(764) == 30\nassert babylonian_squareroot(805) == 31\nassert babylonian_squareroot(834) == 32\nassert babylonian_squareroot(877) == 33\nassert babylonian_squareroot(912) == 34\nassert babylonian_squareroot(945) == 35\nassert babylonian_squareroot(988) == 36\nassert babylonian_squareroot(1021) == 37\nassert babylonian_squareroot(1054) == 38\nassert babylonian_squareroot(1097) == 39\nassert babylonian_squareroot(1130) == 40\nassert babylonian_squareroot(1165) == 41\nassert babylonian_squareroot(1208) == 42\nassert babylonian_squareroot(1241) == 43\nassert babylonian_squareroot(1284) == 44\nassert babylonian_squareroot(1319) == 45\nassert babylonian_squareroot(1352) == 46\nassert babylonian_squareroot(1385) == 47\nassert babylonian_squareroot(1418) == 48\nassert babylonian_squareroot(1451) == 49\nassert babylonian_squareroot(1484) == 50\nassert babylonian_squareroot(1517) == 51\nassert babylonian_squareroot(1550) == 52\nassert babylonian_squareroot(1583) == 53\nassert babylonian_squareroot(1616) == 54\nassert babylonian_squareroot(1649) == 55\nassert babylonian_squareroot(1682) == 56\nassert babylonian_squareroot(1715) == 57\nassert babylonian_squareroot(1748) == 58\nassert babylonian_squareroot(1781) == 59\nassert babylonian_squareroot(1814) == 60\nassert babylonian_squareroot(1847) == 61\nassert babylonian_squareroot(1880) == 62\nassert babylonian_squareroot(1913) == 63\nassert babylonian_squareroot(1946) == 64\nassert babylonian_squareroot(1979) == 65\nassert babylonian_squareroot(2022) == 66\nassert babylonian_squareroot(2055) == 67\nassert babylonian_squareroot(2088) == 68\nassert babylonian_squareroot(2121) == 69\nassert babylonian_squareroot(2154) == 70\nassert babylonian_squareroot(2187) == 71\nassert babylonian_squareroot(2220) == 72\nassert babylonian_squareroot(2263) == 73\nassert babylonian_squareroot(2306) == 74\nassert babylonian_squareroot(2339) == 75\nassert babylonian_squareroot(2382) == 76\nassert babylonian_squareroot(2415) == 77\nassert babylonian_squareroot(2448) == 78\nassert babylonian_squareroot(2491) == 79\nassert babylonian_squareroot(2524) == 80\nassert babylonian_squareroot(2557) == 81\nassert babylonian_squareroot(2590) == 82\nassert babylonian_squareroot(2623) == 83\nassert babylonian_squareroot(2656) == 84\nassert babylonian_squareroot(2699) == 85\nassert babylonian_squareroot(2732) == 86\nassert babylonian_squareroot(2765) == 87\nassert babylonian_squareroot(2798) == 88\nassert babylonian_squareroot(2841) == 89\nassert babylonian_squareroot(2884) == 90\nassert babylonian_squareroot(2917) == 91\nassert babylonian_squareroot(2950) == 92\nassert babylonian_squareroot(2983) == 93\nassert babylonian_squareroot(3026) == 94\nassert babylonian_squareroot(3059) == 95\nassert babylonian_squareroot(3092) == 96\nassert babylonian_squareroot(3125) == 97\nassert babylonian_squareroot(3158) == 98\nassert babylonian_squareroot(3201) == 99\nassert babylonian_squareroot(3234) == 100\nassert babylonian_squareroot(3267) == 101\nassert babylonian_squareroot(3300) == 102\nassert babylonian_squareroot(3333) == 103\nassert babylonian_squareroot(3366) == 104\nassert babylonian_squareroot(3399) == 105\nassert babylonian_squareroot(3432) == 106\nassert babylonian_squareroot(3455) == 107\nassert babylonian_squareroot(3488) == 108\nassert babylonian_squareroot(3502) == 109\nassert babylonian_squareroot(3535) == 110\nassert babylonian_squareroot(3568) == 111\nassert babylonian_squareroot(3591) == 112\nassert babylonian_squareroot(3624) == 113\nassert babylonian_squareroot(3657) == 114\nassert babylonian_squareroot(3690) == 115\nassert babylonian_squareroot(3723) == 116\nassert babylonian_squareroot(3756) == 117\nassert babylonian_squareroot(3789) == 118\nassert babylonian_squareroot(3822) == 119\nassert babylonian_squareroot(3855) == 120\nassert babylonian_squareroot(3888) == 121\nassert babylonian_squareroot(3921) == 122\nassert babylonian_squareroot(3954) == 123\nassert babylonian_squareroot(3987) == 124\nassert babylonian_squareroot(4020) == 125\nassert babylonian_squareroot(4053) == 126\nassert babylonian_squareroot(4086) == 127\nassert babylonian_squareroot(4109) == 128\nassert babylonian_squareroot(4142) == 129\nassert babylonian_squareroot(4185) == 130\nassert babylonian_squareroot(4208) == 131\nassert babylonian_squareroot(4241) == 132\nassert babylonian_squareroot(4274) == 133\nassert babylonian_squareroot(4297) == 134\nassert babylonian_squareroot(4330) == 135\nassert babylonian_squareroot(4363) == 136\nassert babylonian_squareroot(4396) == 137\nassert babylonian_squareroot(4429) == 138\nassert babylonian_squareroot(4462) == 139\nassert babylonian_squareroot",
        "num_ids": 2014
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    from math import sqrt\n    # Use the Babylonian method to calculate the square root of a number.\n    # The following formula is the square root of a number:\n    #   sqrt(x) = x / 2 - (x / 4) + (x / 8) - (x / 16) + (x / 32) -...\n    # The formula is computed iteratively, starting with the upper bound 1/2\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding iterative formula:\n    #   sqrt(x) = 1 / 2 - 1 / 4 + 1 / 8 - 1 / 16 + 1 / 32 - 1 /...\n    # The following formula is the corresponding recursive formula:\n    #   sqrt(x) = ",
        "num_ids": 2015
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    precision = 10 ** -6\n    current_guess = 1\n    while True:\n        next_guess = 0.5 * (current_guess + number / current_guess)\n        if abs(current_guess - next_guess) < precision:\n            return next_guess\n        current_guess = next_guess\n",
        "num_ids": 84
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**(1/2)\n",
        "num_ids": 12
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return len(str)\n",
        "num_ids": 20
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    N = len(str)\n    T = [[0 for i in range(N)] for j in range(N)]\n",
        "num_ids": 30
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2 or str == str[::-1]: \n        return len(str)\n    else:\n        return lps(str[1:]) + 1\n",
        "num_ids": 45
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        return max(lps(str[1:]), lps(str[:-1]),\n                   longest_palindromic_subsequence(str))\n",
        "num_ids": 71
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # table[i][j] will be False if substring str[i..j] \n    # is not palindrome. Else table[i][j] will be \n    # True\n    table = [[False for x in range(n)] for x in range(n)] \n    \n",
        "num_ids": 78
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0: return 0\n    str = '#' + '#'.join(str) + '#'\n    n = len(str)\n    P = [0] * n \n    table = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        P[i] = 1\n        for j in range(1, i + 1):\n            if str[i - j + 1] == str[i - j] and (j == 1 or P[i - j] + 1):\n                P[i] = j + P[i - j]\n                table[i][i - j] = 1\n    return P[n - 1] \n",
        "num_ids": 171
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0]*n for i in xrange(n)]\n    for i in xrange(n):\n        l[i][i] = 1\n    for i in xrange(n-1):\n        if str[i]==str[i+1]:\n            l[i][i+1] = 2\n    for i in xrange(2,n):\n        for j in xrange(n-i):\n            if str[j] == str[j+i] and l[j+1][j+i-1]>=l[j][j+1]:\n                l[j][j+i] = l[j+1][j+i-1]+2\n            else:\n                l[j][j+i] = max(l[j][j+1],l[j+1][j+i])\n    return l[0][n-1]\n",
        "num_ids": 216
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    T = [[0 for i in range(n)] for j in range(n)]\n",
        "num_ids": 30
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in xrange(n)]\n    result = \"\"\n    for i in xrange(n):\n        dp[i][i] = 1\n        result = str[i]\n    for i in xrange(n-1, -1, -1):\n        for j in xrange(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n                if dp[i][j] > len(result):\n                    result = str[i:j+1]\n    return result\n",
        "num_ids": 157
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    max_len = 1\n    \n    # Every substring of length 1 is a palindrome \n    for i in range(n): \n        L[i][i] = 1\n        max_len = max(max_len, 1)\n        \n    # Now check for lengths 2 to n \n    for start in range(n-1): \n        end = start + 1\n        \n        # first substring\n        if str[start] == str[end]: \n            L[start][end] = 2\n            max_len = max(max_len, 2)\n        else: \n            L[start][end] = 0\n            \n    # Now calculate for lengths 3 to n+1 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            \n            if str[i] == str[j] and k == 3: \n                L[i][j] = 3\n                max_len = max(max_len, 3)\n            elif str[i] == str[j]: \n                L[i][j] = 2 + L[i+1][j-1]\n                max_len = max(max_len, 2 + L[i+1][j-1])\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j])\n                max_len = max(max_len, L[i][j])\n                \n    return max_len\n",
        "num_ids": 397
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # The sum of the harmonic sequence is a repeating sum, so the total is n/(1+1/(1+1/n))\n    # The harmonic sum is the sum of 1/n(1+1/n)\n    # The harmonic sum is the sum of 1/(1+1/(1+1/n))\n    return n/(1+1/n)\n",
        "num_ids": 85
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n\n    \ndef harmonic_sum_2(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1/i\n    return sum\n    \ndef prime_factors(n):\n    '''\n    Write a function that takes in an integer n and returns a list of the prime factors of n.\n    If there are no prime factors, return an empty list.\n    '''\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n / i\n        else:\n            i += 1\n    return factors\n    \ndef prime_factors_2(n):\n    '''\n    Write a function that takes in an integer n and returns a list of the prime factors of n.\n    If there are no prime factors, return an empty list.\n    '''\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n /= i\n        else:\n            i += 1\n    return factors\n    \ndef print_bits(n):\n    '''\n    Write a function that takes in an integer n and returns a string consisting of *'s and -'s that represent the binary representation of n.\n    You may assume that the input is nonnegative and fits within 32 bits.\n    '''\n    string = []\n    for i in range(32):\n        if n & 1 == 1:\n            string.append('-')\n        else:\n            string.append('*')\n        n = n >> 1\n    return ''.join(string[::-1])\n    \ndef print_bits_2(n):\n    '''\n    Write a function that takes in an integer n and returns a string consisting of *'s and -'s that represent the binary representation of n.\n    You may assume that the input is nonnegative and fits within 32 bits.\n    '''\n    string = []\n    for i in range(32):\n        if n & 1 == 1:\n            string.append('-')\n        else:\n            string.append('*')\n        n = n >> 1\n    return ''.join(string[::-1])\n    \ndef is_power_of_2(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is a power of 2.\n    '''\n    if n == 0 or n == 1:\n        return True\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            return False\n    return True\n    \ndef is_power_of_2_2(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is a power of 2.\n    '''\n    return n!= 0 and (n & (n - 1)) == 0\n    \ndef binary_to_decimal(n):\n    '''\n    Write a function that takes in a binary representation of an integer and returns the decimal representation of the integer.\n    '''\n    return int(n, 2)\n    \ndef decimal_to_binary(n):\n    '''\n    Write a function that takes in a decimal representation of an integer and returns the binary representation of the integer.\n    '''\n    return bin(n)[2:]\n    \ndef add_binary(a, b):\n    '''\n    Write a function that takes in two binary representations of integers and returns their sum in binary representation.\n    '''\n    return bin(int(a, 2) + int(b, 2))[2:]\n    \ndef add_binary_2(a, b):\n    '''\n    Write a function that takes in two binary representations of integers and returns their sum in binary representation.\n    '''\n    n = max(len(a), len(b))\n    a = a.zfill(n)\n    b = b.zfill(n)\n    carry = 0\n    res = []\n    for i in range(n):\n        s = carry\n        s += 1 if a[n - 1 - i] == '1' else 0\n        s += 1 if b[n - 1 - i] == '1' else 0\n        res.append(str(s % 2))\n        carry = 1 if s >= 2 else 0\n    if carry:\n        res.append('1')\n    return ''.join(res[::-1])\n    \ndef fib(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    return 1 if n == 0 or n == 1 else fib(n - 1) + fib(n - 2)\n    \ndef fib_2(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fib_2(n - 1) + fib_2(n - 2)\n    \ndef fib_rec(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fib_rec(n - 1) + fib_rec(n - 2)\n    \ndef fib_dp(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    first, second = 0, 1\n    for i in range(2, n + 1):\n        first, second = second, first + second\n    return second\n    \ndef palindrome(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is a palindrome (read the same backwards as forwards) and False otherwise.\n    '''\n    return str(n)[::-1] == str(n)\n    \ndef palindrome_2(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is a palindrome (read the same backwards as forwards) and False otherwise.\n    '''\n    return str(n)[::-1] == str(n)\n    \ndef is_leap_year(year):\n    '''\n    Write a function that takes in an integer year and returns True if year is a leap year and False otherwise.\n    '''\n    return year % 400 == 0 or (year % 4 == 0 and year % 100!= 0)\n    \ndef is_leap_year_2(year):\n    '''\n    Write a function that takes in an integer year and returns True if year is a leap year and False otherwise.\n    '''\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n    \ndef number_to_words(n):\n    '''\n    Write a function that takes in an integer and returns a string that is a word spelled out of the digits of the integer.\n    '''\n    ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n    return thousands[n // 1000] + \" \" + tens[n % 1000 // 100] + \" \" + ones[n % 100]\n    \ndef number_to_words_2(n):\n    '''\n    Write a function that takes in an integer and returns a string that is a word spelled out of the digits of the integer.\n    '''\n    if n == 0:\n        return \"Zero\"\n    words = []\n    if n >= 1000000000:\n        words.append(\"Billion\")\n        n %= 1000000000\n    if n >= 1000000:\n        words.append(\"Million\")\n        n %= 1000000\n    if n >= 1000:\n    ",
        "num_ids": 76
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1 + harmonic_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 1 else 1/n + harmonic_sum(n-1)\n",
        "num_ids": 25
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n",
        "num_ids": 8
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 1 else 1/n + harmonic_sum(n-1)\n",
        "num_ids": 25
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1:\n        return []\n    result = []\n    # result = array_nums2.copy()\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result\n    \n",
        "num_ids": 70
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection=[]\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                intersection.append(array_nums1[i])\n    return intersection\n",
        "num_ids": 79
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [val for val in array_nums1 if val in array_nums2]\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    \n    p1 = 0\n    p2 = 0\n    \n    intersection_array = []\n    \n    while p1 < len(array_nums1) and p2 < len(array_nums2):\n        if array_nums1[p1] == array_nums2[p2]:\n            intersection_array.append(array_nums1[p1])\n            p1 += 1\n            p2 += 1\n        elif array_nums1[p1] < array_nums2[p2]:\n            p1 += 1\n        elif array_nums1[p1] > array_nums2[p2]:\n            p2 += 1\n    \n    return intersection_array\n",
        "num_ids": 204
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        return intersection_array(array_nums2, array_nums1)\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a = sorted(array_nums1)\n    b = sorted(array_nums2)\n    i = j = 0\n    n = len(a)\n    m = len(b)\n    while i < n and j < m:\n        if a[i] == b[j]:\n            return a[i]\n        if a[i] < b[j]:\n            i += 1\n        else:\n            j += 1\n    return None\n",
        "num_ids": 109
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1_dict = defaultdict(int)\n    nums2_dict = defaultdict(int)\n    for num in array_nums1:\n        nums1_dict[num] += 1\n    for num in array_nums2:\n        nums2_dict[num] += 1\n    intersect_nums = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersect_nums.append(num)\n    return intersect_nums\n",
        "num_ids": 124
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for item1 in array_nums1:\n        for item2 in array_nums2:\n            if item1 == item2:\n                intersection_array.append(item1)\n    return intersection_array\n",
        "num_ids": 61
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    \n    intersection_array = []\n    i,j = 0,0\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            if array_nums1[i] not in intersection_array:\n                intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return intersection_array\n",
        "num_ids": 213
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for e in tup:\n        if x == e:\n            cnt+=1\n    return cnt\n",
        "num_ids": 34
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \nprint(count_X((1, 2, 3, 4, 5, 1, 1, 1), 1)",
        "num_ids": 38
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    n = 0\n    for item in tup: \n        if item == x: \n            n += 1\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == x:\n            c = c + 1\n    return c\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Convert tuple to a list\n    a = list(tup)\n    # Append x to list\n    a.append(x)\n    # Count the occurences\n    count = a.count(x)\n    # Convert list back to a tuple\n    return tuple(a), count\n",
        "num_ids": 70
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your Code Here\n    return [element] + list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in list:\n        result.append(i)\n        result.append(element)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for x in list:\n        new_list.append(x)\n        new_list.insert(0,element)\n    return new_list\n",
        "num_ids": 44
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == None:\n        return\n    if type(list)!= list:\n        return\n    for i in range(0,len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 53
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_len = len(list)\n    list_l = []\n    for i in range(list_len):\n        list_l.append(element)\n        list_l.append(list[i])\n    return list_l\n",
        "num_ids": 58
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    x = []\n    for i in list:\n        x.append(i)\n    x.insert(0,element)\n    for i in list:\n        x.append(i)\n    return x\n",
        "num_ids": 51
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:],element)\n",
        "num_ids": 39
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element_count = list.count(element)\n    #for i in range(element_count):\n    list.insert(0,element)\n    return list\n",
        "num_ids": 40
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers) is not complex:\n        raise TypeError(\"The input must be a complex number.\")\n",
        "num_ids": 28
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    numbers=eval(numbers)\n    r=cmath.polar(numbers)\n    print r\n",
        "num_ids": 31
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    converted = []\n    for item in numbers:\n        converted.append(cmath.polar(item))\n    return converted\n",
        "num_ids": 34
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complexList=[]\n    for i in numbers:\n        complexList.append(complex(i))\n    return complexList\n    \ndef sumList(numbers):\n    '''\n    Write a python function to sum the numbers of a list.\n    '''\n    total=0\n    for i in numbers:\n        total=total+i\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar=[]\n    for i in numbers:\n        polar.append(cmath.polar(i))\n    return polar\n",
        "num_ids": 34
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers_polar = []\n    for n in numbers:\n        a = n.real\n        b = n.imag\n        r = (a**2 + b**2)**0.5\n        t = cmath.phase(n)\n        r_polar = r, t\n        numbers_polar.append(r_polar)\n    return numbers_polar\n",
        "num_ids": 92
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        newlist.append(complex(r,i))\n    return newlist\n    \n    \ndef conjugate(numbers):\n    '''\n    Write a python function to return the conjugate of complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = i.conjugate()\n        newlist.append(i)\n    return newlist\n    \n    \ndef is_polar(numbers):\n    '''\n    Write a python function to return if complex numbers are polar or not.\n    '''\n    if numbers[0].real == 0.0 and numbers[0].imag == 0.0:\n        return True\n    else:\n        return False\n        \n    \ndef modulus(numbers):\n    '''\n    Write a python function to return the modulus of complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = abs(i)\n        newlist.append(i)\n    return newlist\n    \n    \ndef phase(numbers):\n    '''\n    Write a python function to return the phase of complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = cmath.phase(i)\n        newlist.append(i)\n    return newlist\n    \n    \ndef polar_coordinates(numbers):\n    '''\n    Write a python function to return the polar coordinates of complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        r = abs(i)\n        theta = cmath.phase(i)\n        newlist.append((r, theta))\n    return newlist\n    \n    \ndef convert_to_polar(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        newlist.append(complex(r,i))\n    return newlist\n    \ndef convert_to_polar_coords(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        theta = cmath.phase(i)\n        newlist.append((r, theta))\n    return newlist\n    \ndef convert_to_cartesian(numbers):\n    '''\n    Write a python function to convert complex numbers to cartesian coordinates.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        newlist.append(complex(r,i))\n    return newlist\n    \n    \ndef conjugate_transpose(numbers):\n    '''\n    Write a python function to return the conjugate transpose of complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = i.conjugate()\n        i = i.transpose()\n        newlist.append(i)\n    return newlist\n    \n    \ndef polar_to_cartesian(numbers):\n    '''\n    Write a python function to return the polar to cartesian coordinates.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i[0]\n        theta = i[1]\n        newlist.append(complex(r*math.cos(theta), r*math.sin(theta)))\n    return newlist\n    \ndef cartesian_to_polar(numbers):\n    '''\n    Write a python function to return the cartesian to polar coordinates.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        theta = cmath.phase(i)\n        newlist.append((r, theta))\n    return newlist\n    \n    \ndef rotate_2D(numbers, theta):\n    '''\n    Write a python function to return the rotated 2D list.\n    '''\n    newlist = []\n    for i in numbers:\n        i = cmath.rect(i, theta)\n        newlist.append(i)\n    return newlist\n    \ndef rotate_3D(numbers, theta):\n    '''\n    Write a python function to return the rotated 3D list.\n    '''\n    newlist = []\n    for i in numbers:\n        i = cmath.rect(i, theta)\n        newlist.append(i)\n    return newlist\n    \n    \ndef dot_product(numbers1, numbers2):\n    '''\n    Write a python function to return the dot product of two lists.\n    '''\n    sum = 0.0\n    for i in numbers1:\n        for j in numbers2:\n            i = i.conjugate()\n            j = j.conjugate()\n            sum = sum + (i*j)\n    return sum\n    \ndef scale_complex(numbers, scalar):\n    '''\n    Write a python function to return the scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = i * scalar\n        newlist.append(i)\n    return newlist\n    \n    \ndef scale_polar(numbers, scalar):\n    '''\n    Write a python function to return the scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i[0]\n        theta = i[1]\n        newlist.append(complex(r*scalar, theta))\n    return newlist\n    \n    \ndef scale_cartesian(numbers, scalar):\n    '''\n    Write a python function to return the scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        newlist.append(complex(r*scalar, i))\n    return newlist\n    \n    \ndef conjugate_scalar(numbers, scalar):\n    '''\n    Write a python function to return the conjugate of scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = i.conjugate()\n        i = i * scalar\n        newlist.append(i)\n    return newlist\n    \n    \ndef conjugate_scalar_transpose(numbers, scalar):\n    '''\n    Write a python function to return the conjugate of scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = i.transpose()\n        i = i * scalar\n        newlist.append(i)\n    return newlist\n    \n    \ndef conjugate_polar(numbers):\n    '''\n    Write a python function to return the conjugate of scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = i.conjugate()\n        newlist.append(i)\n    return newlist\n    \n    \ndef conjugate_transpose_scalar(numbers, scalar):\n    '''\n    Write a python function to return the conjugate of scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = i.transpose()\n        i = i * scalar\n        newlist.append(i)\n    return newlist\n    \n    \ndef conjugate_transpose_scalar_polar(numbers, scalar):\n    '''\n    Write a python function to return the conjugate of scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        i = i.transpose()\n        i = i * scalar\n        newlist.append(i)\n    return newlist\n    \n    \ndef conjugate_scalar_polar(numbers, scalar):\n    '''\n    Write a python function to return the conjugate of scaled complex numbers.\n    '''\n    newlist = []\n    for i in numbers:\n        r = i.real\n        theta = i.imag\n        newlist.append(complex(r, theta))\n    for i in newlist:\n    ",
        "num_ids": 53
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers)<1:\n        return []\n    if len(numbers)==1:\n        return [(numbers[0].real,numbers[0].imag)]\n    z = convert(numbers[1:])\n    return [(numbers[0].real,numbers[0].imag)]+z\n",
        "num_ids": 78
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    convert_1 = list()\n    for i in range(len(numbers)):\n        a = cmath.polar(numbers[i])\n        convert_1.append(a)\n    return convert_1\n",
        "num_ids": 56
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if (numbers[0] >=0 and numbers[1] >=0):\n        r = abs(numbers[0])\n        t = math.atan(numbers[1]/numbers[0])\n    elif (numbers[0] < 0 and numbers[1] >=0):\n        r = abs(numbers[0])\n        t = math.atan(numbers[1]/numbers[0]) + 2*math.pi\n    elif (numbers[0] < 0 and numbers[1] < 0):\n        r = abs(numbers[0])\n        t = math.atan(numbers[1]/numbers[0]) + math.pi\n    elif (numbers[0] >=0 and numbers[1] < 0):\n        r = abs(numbers[0])\n        t = math.atan(numbers[1]/numbers[0]) + math.pi\n    return (r,t)\ndef add_complex(c1,c2):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    return(c1[0] + c2[0],c1[1] + c2[1])\ndef multiply_complex(c1,c2):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    return(c1[0]*c2[0] - c1[1]*c2[1],c1[0]*c2[1] + c1[1]*c2[0])\ndef magnitude(c1):\n    '''\n    Write a python function to return the magnitude of a complex number.\n    '''\n    return math.sqrt(c1[0]**2 + c1[1]**2)\ndef phase(c1):\n    '''\n    Write a python function to return the phase of a complex number.\n    '''\n    return cmath.phase(c1[0]+c1[1]*1j)\ndef convert_list(num_list):\n    '''\n    Write a python function to convert a list of complex numbers to polar coordinates.\n    '''\n    return list(map(convert,num_list))\ndef add_list(num_list):\n    '''\n    Write a python function to add two lists of complex numbers.\n    '''\n    return list(map(add_complex,num_list))\ndef multiply_list(num_list):\n    '''\n    Write a python function to multiply two lists of complex numbers.\n    '''\n    return list(map(multiply_complex,num_list))\ndef magnitude_list(num_list):\n    '''\n    Write a python function to return the magnitudes of a list of complex numbers.\n    '''\n    return list(map(magnitude,num_list))\ndef phase_list(num_list):\n    '''\n    Write a python function to return the phase of a list of complex numbers.\n    '''\n    return list(map(phase,num_list))\ndef add_vector(vec1,vec2):\n    '''\n    Write a python function to add two complex vectors.\n    '''\n    return(vec1[0]+vec2[0],vec1[1]+vec2[1])\ndef add_matrix(mat1,mat2):\n    '''\n    Write a python function to add two complex matrices.\n    '''\n    if(len(mat1[0]) == len(mat2[0])):\n        return list(map(add_vector,mat1,mat2))\n    else:\n        return \"Matrices are not of same size\"\ndef matrix_transpose(matrix):\n    '''\n    Write a python function to return the transpose of a complex matrix.\n    '''\n    return list(zip(*matrix))\ndef matrix_matrix_product(matrix1,matrix2):\n    '''\n    Write a python function to return the product of a complex matrix and another complex matrix.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(add_vector,matrix_transpose(matrix1),matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef add_matrix_matrix(matrix1,matrix2):\n    '''\n    Write a python function to add two complex matrices.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(add_list,matrix1,matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef matrix_vector_product(matrix,vector):\n    '''\n    Write a python function to return the product of a complex matrix and a vector.\n    '''\n    if(len(matrix[0]) == len(vector)):\n        return list(map(add_vector,matrix,vector))\n    else:\n        return \"Matrix and vector are of different lengths\"\ndef matrix_matrix_product(matrix1,matrix2):\n    '''\n    Write a python function to return the product of a complex matrix and another complex matrix.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(add_matrix,matrix1,matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef inverse(matrix):\n    '''\n    Write a python function to return the inverse of a complex matrix.\n    '''\n    return list(map(lambda x: x/matrix[0][0],matrix))\ndef matrix_inverse(matrix):\n    '''\n    Write a python function to return the inverse of a complex matrix.\n    '''\n    return list(map(lambda x: x/matrix[0][0],matrix))\ndef matrix_power(matrix,n):\n    '''\n    Write a python function to return the nth power of a complex matrix.\n    '''\n    if(n==1):\n        return matrix\n    elif(n%2 == 0):\n        return matrix_matrix_product(matrix_power(matrix,int(n/2)),matrix)\n    else:\n        return matrix_matrix_product(matrix_power(matrix,(n-1)/2),matrix)\ndef matrix_power_vector(matrix,vector):\n    '''\n    Write a python function to return the nth power of a complex matrix and a complex vector.\n    '''\n    return matrix_matrix_product(matrix_power(matrix,len(vector)-1),vector)\ndef multiply_matrix(matrix1,matrix2):\n    '''\n    Write a python function to multiply two complex matrices.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(add_matrix_matrix,matrix_transpose(matrix1),matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef matrix_element_product(matrix1,matrix2):\n    '''\n    Write a python function to return the element product of two complex matrices.\n    '''\n    if(len(matrix1[0]) == len(matrix2)):\n        return list(map(multiply_list,matrix1,matrix2))\n    else:\n        return \"Matrices are not of same size\"\ndef vector_vector_product(vector1,vector2):\n    '''\n    Write a python function to return the product of a vector and another vector.\n    '''\n    if(len(vector1) == len(vector2)):\n        return list(map(multiply_list,vector1,vector2))\n    else:\n        return \"Vectors are not of same size\"\ndef complex_to_int(complex_number):\n    '''\n    Write a python function to convert a complex number to an integer number.\n    '''\n    return (int(complex_number[0]),int(complex_number[1]))\ndef int_to_complex(integer):\n    '''\n    Write a python function to convert an integer number to a complex number.\n    '''\n    return (complex(integer[0]),complex(integer[1]))\ndef matrix_to_int(matrix):\n    '''\n    Write a python function to convert a complex matrix to an integer matrix.\n    '''\n    retur",
        "num_ids": 5
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for x in list1 if isinstance(x, int))\n",
        "num_ids": 21
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    n=0\n    for i in list1:\n        if type(i)==int:\n            n=n+1\n    return n\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1_length = len(list1)\n    int_count = 0\n    for i in range(list1_length):\n        if type(list1[i]) is int:\n            int_count += 1\n    return int_count\n",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    return sum([1 for el in list1 if type(el) == int])\n",
        "num_ids": 23
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for ele in list1:\n        if type(ele)==int:\n            count=count+1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]%1==0:\n            count+=1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_count = 0\n    for num in list1:\n        if num % 1 == 0:\n            integer_count += 1\n    return integer_count\n",
        "num_ids": 39
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]\n    ",
        "num_ids": 26
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_of_tuples = []\n    for i in range(0, len(l)):\n        list_of_tuples.extend(combinations_with_replacement(l, i))\n    return list_of_tuples\n",
        "num_ids": 59
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n==0:\n        return [[]]\n    if l==[]:\n        return []\n    first = l[0]\n    rest_l = l[1:]\n    with_first = combinations_colors(rest_l, n-1)\n    without_first = combinations_colors(rest_l, n)\n    return with_first + [ [first] + a for a in with_first ] + without_first\n",
        "num_ids": 103
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            combos.append(l[i:j+1])\n    return combos\n",
        "num_ids": 53
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, i):\n            combinations.append(j)\n    return combinations\n",
        "num_ids": 49
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # return [\n    #     (x, y, z)\n    #     for x in l\n    #     for y in l\n    #     for z in l\n    # ]\n    return list(\n        set(\n            [\n                tuple(sorted(c))\n                for c in combinations_with_replacement(l, n)\n            ]\n        )\n    )\n",
        "num_ids": 93
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(a, b, c) for a in l for b in l for c in l]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = [True for i in range(n+1)]\n    for i in range(2,int(n**0.5)+1):\n        if num[i]:\n            num[i*i:n+1:i] = [False]*len(num[i*i:n+1:i])\n    return sum(num)\n",
        "num_ids": 83
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = [True for _ in xrange(n)]\n        for i in xrange(2, n):\n            if a[i]:\n                j = 2\n                while i * j < n:\n                    a[i * j] = False\n                    j += 1\n        return sum(a)\n",
        "num_ids": 98
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #primes = [2]\n    #for i in range(3, n, 2):\n    #    is_prime = True\n    #    for j in primes:\n    #        if i%j == 0:\n    #            is_prime = False\n    #            break\n    #    if is_prime:\n    #        primes.append(i)\n",
        "num_ids": 89
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        count=1\n        i=2\n        while (i<=n):\n            if n%i==0:\n                count=count+1\n                i=i+1\n            else:\n                i=i+1\n        return count\n",
        "num_ids": 78
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return -1\n    elif n < 2:\n        return 0\n    else:\n        return 1 + count_Primes_nums(n-1)\n",
        "num_ids": 47
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        isPrime = True\n        for divisor in range(2, num):\n            if (num % divisor == 0):\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 0\n    if n == 3:\n        return 1\n    if n % 2 == 0:\n        return 0\n    if n % 3 == 0:\n        return 1\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2) + count_Primes_nums(n-3)\n",
        "num_ids": 95
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    list_of_primes = [1] * n\n    list_of_primes[0] = 0\n    list_of_primes[1] = 0\n    for i in range(2, n):\n        if list_of_primes[i] == 1:\n            for j in range(i * 2, n, i):\n                list_of_primes[j] = 0\n    return list_of_primes.count(1)\n",
        "num_ids": 110
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n<2:\n            return False\n        elif n==2:\n            return True\n        else:\n            for i in range(2,int(n/2)+1):\n                if n%i==0:\n                    return False\n            return True\n",
        "num_ids": 72
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # return len([num for num in range(2,n) if num > 1 and all(num % i!= 0 for i in range(2, int(num**0.5) + 1))])\n    return len([num for num in range(2,n) if all(num % i!= 0 for i in range(2, int(num**0.5) + 1))])\n",
        "num_ids": 93
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tuple_out = (b, a)\n    return tuple_out\n",
        "num_ids": 20
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (b, a)\n    return t\n",
        "num_ids": 15
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a>b:\n        return b,a\n    elif a<b:\n        return a,b\n    else:\n        return a,b\n",
        "num_ids": 39
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 37
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return maximize_elements(test_tup2, test_tup1)\n    \n    max_elem = max(test_tup1)\n    max_elem_pos = test_tup1.index(max_elem)\n    \n    for i in range(len(test_tup1)):\n        if i!= max_elem_pos:\n            test_tup1[i] = -1\n            test_tup2[i] = -1\n    \n    return test_tup1, test_tup2\n",
        "num_ids": 154
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(sorted(test_tup1 + test_tup2, reverse=True)[:2])\n",
        "num_ids": 29
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(sorted(test_tup1 + test_tup2, reverse = True)[:2])\n",
        "num_ids": 29
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    list1 = [x for x in test_tup1]\n    list2 = [x for x in test_tup2]\n    max_list = []\n    for index, i in enumerate(list1):\n        if i > list2[index]:\n            max_list.append(i)\n        else:\n            max_list.append(list2[index])\n    return tuple(max_list)\n",
        "num_ids": 100
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # if the first tuple has more elements than the second one, return the first one.\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    # if the first tuple has less elements than the second one, return the second one.\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    # if the first tuple and the second tuple has the same number of elements, return the larger tuple.\n    else:\n        if max(test_tup1) > max(test_tup2):\n            return test_tup1\n        else:\n            return test_tup2\n",
        "num_ids": 166
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == 1:\n        return max(test_tup1)\n    elif len(test_tup1) == 2:\n        return max(test_tup1[0], test_tup1[1])\n    else:\n        return max(test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1])\n",
        "num_ids": 104
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # As per the hint, if the first tuple has more elements, we will take first from first, second from second\n    if len(test_tup1) > len(test_tup2):\n        return test_tup2\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) == len(test_tup2):\n        if test_tup1 > test_tup2:\n            return test_tup1\n        else:\n            return test_tup2\n",
        "num_ids": 141
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    max_len = 0\n    for i in range(len(test_tup1)):\n        if len(test_tup1[i]) > max_len:\n            max_len = len(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if len(test_tup2[i]) > max_len:\n            max_len = len(test_tup2[i])\n    \n    return (max_len, test_tup1[len(test_tup1)-1], test_tup2[len(test_tup2)-1])\n",
        "num_ids": 153
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print max(test_tup1, test_tup2)\n    return max(test_tup1, test_tup2)\n",
        "num_ids": 36
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams_primes(n)[-1]\n",
        "num_ids": 20
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(n): \n        if n in (2, 3):\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        w = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += w\n            w = 6 - w\n        return True\n    def issquare(n):\n        if n == 1:\n            return True\n        i = 1\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n    def newman_williams(n):\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if isprime(n):\n            return n\n        i = 1\n        a = 0\n        b = 1\n        c = 0\n        if isprime(n):\n            return n\n        while True:\n            c = b + 2 * a * a * i\n            if c >= n:\n                break\n            i += 1\n            a = b\n            b = c\n        p = i - 1\n        q = n // p\n        if q == 1:\n            return n\n        if isprime(q):\n            return q\n        else:\n            return newman_williams(q)\n    return newman_williams(n)\n",
        "num_ids": 334
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    primes = [2]\n    i = 3\n    while i < n:\n        isPrime = True\n        for p in primes:\n            if i % p == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n        i = i + 1\n    \n    return primes[-1]\n",
        "num_ids": 89
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    \n    y = 3\n    x = 2\n    i = 1\n    while i < n:\n        x = ((x ** 2) + (1/y)) % n\n        y = ((y ** 2) - 2) % n\n        i += 1\n    return (x, n)\n",
        "num_ids": 129
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Note that this algorithm works only when p is a prime number.\n    # In the case that p is not prime, the algorithm will return\n    # the correct value when it is completed.\n",
        "num_ids": 45
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        return False\n    else:\n        g = newman_williams(n)\n        for i in range(1, n):\n            g = newman_williams(g)\n            if g == False:\n                return g\n        return g\n",
        "num_ids": 69
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    s = set()\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        for i in range(2, int(n ** (1 / 2)) + 1):\n            if n % i == 0:\n                s.add(i)\n                s.add(n // i)\n        for i in range(int(n ** (1 / 2)) + 1, n + 1):\n            if i in s:\n                continue\n            else:\n                s.add(i)\n        return s.pop()\n",
        "num_ids": 143
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Special cases:\n    # If n is even, 2 is the only positive odd newman\u2013shanks\u2013williams prime.\n    # If n is even and greater than 2, 3 is the only positive odd newman\u2013shanks\u2013williams prime.\n    if n % 2 == 0:\n        return 2\n    elif n >= 3:\n        return 3\n",
        "num_ids": 87
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    \n    # define variables\n    i = 1\n    c = 0\n    d = 0\n    a = 0\n    b = 0\n    t = 0\n    \n    while c!= n:\n        # get d\n        d = (a + b) * i + 1\n        \n        # find t\n        t = 0\n        while d % 2 == 0:\n            d /= 2\n            t += 1\n        \n        # find c\n        c = 0\n        while (d!= 1) and (c == 0):\n            c = d\n            d = (d * i) + 1\n            d = d / t\n            \n        # find a and b\n        a = b\n        b = i\n        i += 1\n        \n    return c\n    \nprint newman_prime(10001)\n",
        "num_ids": 202
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(test_tup1, \"=\", test_tup2)\n    temp = ()\n    for i in range(len(test_tup1)):\n        temp = temp + (test_tup1[i]/test_tup2[i],)\n    return temp\n",
        "num_ids": 71
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    list1 = []\n    list2 = []\n",
        "num_ids": 14
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    def division(a, b):\n        return a/b\n    \n    return (division(test_tup1[0], test_tup2[0]), division(test_tup1[1], test_tup2[1]))\n    \n",
        "num_ids": 64
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n    \nassert division_elements((10,10), (2,2)) == (5, 5)\n",
        "num_ids": 64
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(list(i / j for i, j in zip(test_tup1, test_tup2)))\n",
        "num_ids": 31
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return ((test_tup1[0]/test_tup2[0]), (test_tup1[1]/test_tup2[1]), (test_tup1[2]/test_tup2[2]))\n",
        "num_ids": 60
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #your code here\n    return tuple([int(element1 / element2) for element1, element2 in zip(test_tup1, test_tup2)])\n",
        "num_ids": 43
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        element_count = len(test_tup1)\n        temp_sum = 0\n        for i in range(element_count):\n            temp_sum += (test_tup1[i]/test_tup2[i])\n        return temp_sum\n    except TypeError:\n        return 'TypeError'\n",
        "num_ids": 81
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    elements = []\n    for tup in zip(test_tup1, test_tup2):\n        try:\n            element = tup[0] / tup[1]\n            elements.append(element)\n        except ZeroDivisionError:\n            elements.append(0)\n    return tuple(elements)\n",
        "num_ids": 81
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write your function here\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('Both the tuples must be tuples')\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError('Both the tuples must have the same size')\n",
        "num_ids": 88
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = list1[:L]\n    b = list1[L:]\n    return a,b\n",
        "num_ids": 27
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # return (list1[:L], list1[L:])\n    return (list1[:L], list1[L:])\n    \n    \ndef split_by_5(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list of tuples in which each tuple contains an integer from the original list and its index. Here is an example:\n    split_by_5([1,2,3,4,5]) returns [(1,0),(2,1),(3,2),(4,3),(5,4)]\n    '''\n    return [(list1[i],i) for i in range(len(list1))]\n    \n    \ndef partition_list(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and returns a list where the first L elements are from the original list and the rest of the elements are the same as the original list.\n    '''\n    return list1[:L] + list1[L:]\n    \n    \ndef get_dict_of_dicts(dict1):\n    '''\n    Write a function that takes in a dictionary of dictionaries and returns a new dictionary where each key is a tuple in which the first item is a key in the original dictionary and the second item is a key in the dictionary containing that key. The new dictionary should have the same structure as the original dictionary.\n    '''\n    new_dict = {}\n    for key1 in dict1:\n        for key2 in dict1[key1]:\n            new_dict[(key1,key2)] = dict1[key1][key2]\n    return new_dict\n    \n",
        "num_ids": 61
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n",
        "num_ids": 19
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    if len(list1)%L == 0:\n        mid = len(list1)/2\n        return (list1[:mid], list1[mid:])\n    else:\n        mid = len(list1)/2 + 1\n        return (list1[:mid], list1[mid:])\n    \n",
        "num_ids": 77
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = L // 2\n    return list1[:half], list1[half:]\n",
        "num_ids": 23
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # if L is greater than the length of the list, then return empty list\n    if L > len(list1):\n        return [], list1\n    # if L is less than the length of the list, then return list with length of L\n    elif L < len(list1):\n        return list1[:L], list1[L:]\n    # if L == length of the list, return list with length of L\n    elif L == len(list1):\n        return list1, []\n",
        "num_ids": 118
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0:\n        return [], []\n    if L > len(list1):\n        return [], []\n    return list1[:L], list1[L:]\n",
        "num_ids": 45
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # h_age = input(\"Enter your dog's age in human years: \")\n    h_age = float(h_age)\n    return h_age * 7.0\n",
        "num_ids": 44
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n    \ndef dog_years(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return dog_age / 7\n    \ndef dog_months(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's months.\n    '''\n    return dog_age * 12\n    \ndef dog_weeks(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's weeks.\n    '''\n    return dog_age * 52\n    \ndef dog_days(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's days.\n    '''\n    return dog_age * 365\n    \ndef dog_hours(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's hours.\n    '''\n    return dog_age * 24\n    \ndef dog_minutes(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's minutes.\n    '''\n    return dog_age * 720\n    \ndef dog_seconds(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's seconds.\n    '''\n    return dog_age * 86400\n    \ndef dog_years_months(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's years and months.\n    '''\n    return str(dog_years(dog_age)) +'years,'+ str(dog_months(dog_age)) +'months'\n    \ndef dog_weeks_days(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's weeks and days.\n    '''\n    return str(dog_weeks(dog_age)) +'weeks,'+ str(dog_days(dog_age)) +'days'\n    \ndef dog_hours_minutes(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's hours and minutes.\n    '''\n    return str(dog_hours(dog_age)) +'hours,'+ str(dog_minutes(dog_age)) +'minutes'\n    \ndef dog_hours_seconds(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's hours and seconds.\n    '''\n    return str(dog_hours(dog_age)) +'hours,'+ str(dog_seconds(dog_age)) +'seconds'\n    \ndef dog_days_hours(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's days and hours.\n    '''\n    return str(dog_days(dog_age)) +'days,'+ str(dog_hours(dog_age)) +'hours'\n    \ndef dog_days_minutes(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's days and minutes.\n    '''\n    return str(dog_days(dog_age)) +'days,'+ str(dog_minutes(dog_age)) +'minutes'\n    \ndef dog_days_seconds(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's days and seconds.\n    '''\n    return str(dog_days(dog_age)) +'days,'+ str(dog_seconds(dog_age)) +'seconds'\n    \ndef dog_weeks_hours(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's weeks and hours.\n    '''\n    return str(dog_weeks(dog_age)) +'weeks,'+ str(dog_hours(dog_age)) +'hours'\n    \ndef dog_weeks_minutes(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's weeks and minutes.\n    '''\n    return str(dog_weeks(dog_age)) +'weeks,'+ str(dog_minutes(dog_age)) +'minutes'\n    \ndef dog_weeks_seconds(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's weeks and seconds.\n    '''\n    return str(dog_weeks(dog_age)) +'weeks,'+ str(dog_seconds(dog_age)) +'seconds'\n    \ndef dog_minutes_seconds(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's minutes and seconds.\n    '''\n    return str(dog_minutes(dog_age)) +'minutes,'+ str(dog_seconds(dog_age)) +'seconds'\n    \ndef dog_years_minutes_seconds(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's years, months, days, hours, minutes, and seconds.\n    '''\n    return dog_years_months_days_hours_minutes_seconds(dog_age)\n    \ndef dog_years_months_days_hours_minutes_seconds(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's years, months, days, hours, minutes, and seconds.\n    '''\n    return dog_years(dog_age) +'years,'+ dog_years_months(dog_age) +'months,'+ dog_years_days(dog_age) +'days,'+ dog_years_hours(dog_age) +'hours,'+ dog_years_minutes(dog_age) +'minutes,'+ dog_years_seconds(dog_age) +'seconds'\n    \ndef is_number(s):\n    '''\n    Write a function to determine if the given string is a number.\n    '''\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n    \ndef number_days_in_month(month):\n    '''\n    Write a function to determine the number of days in a given month.\n    '''\n    month_number = int(month)\n    if month_number == 1:\n        return 31\n    if month_number == 2:\n        return 28\n    if month_number == 3:\n        return 31\n    if month_number == 4:\n        return 30\n    if month_number == 5:\n        return 31\n    if month_number == 6:\n        return 30\n    if month_number == 7:\n        return 31\n    if month_number == 8:\n        return 31\n    if month_number == 9:\n        return 30\n    if month_number == 10:\n        return 31\n    if month_number == 11:\n        return 30\n    if month_number == 12:\n        return 31\n    \ndef number_weeks_in_month(month):\n    '''\n    Write a function to determine the number of weeks in a given month.\n    '''\n    month_number = int(month)\n    if month_number == 1:\n        return 4\n    if month_number == 2:\n        return 4\n    if month_number == 3:\n        return 4\n    if month_number == 4:\n        return 4\n    if month_number == 5:\n        return 4\n    if month_number == 6:\n        return 4\n    if month_number == 7:\n        return 4\n    if month_number == 8:\n        return 4\n    if month_number == 9:\n        return 4\n    if month_number == 10:\n        return 4\n    if month_number == 11:\n        return 4\n    if month_number == 12:\n        return 4\n    \ndef number_weeks_in_year(year):\n    '''\n    Write a function to determine the number of weeks in a given year.\n    '''\n    year_number = int(year)\n    if year_number % 4 == 0:\n        return 52\n    if year_number % 4 == 1:\n        return 52\n    if year_number % 4 == 2:\n        return 52\n    if year_number % 4 == 3:\n        return 52\n    \ndef number_days_in_year(year):\n    '''\n    Write a function to determine the number of days in a given year.\n    '''\n    year_number = int(year)\n    if year_number % 4 == 0:\n        return 365\n    if year_number % 4 == ",
        "num_ids": 36
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = round(h_age * 7.0, 1)\n    return dog_years\n",
        "num_ids": 26
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # Define the variables\n    h_age_min = 0\n    h_age_max = 11\n    d_age = 9\n    \n    # Calculate the age\n    h_age_b = h_age - h_age_min\n    d_age_b = d_age - h_age_b\n    \n    # Display the result\n    print 'Dog age in dog\\'s years:', d_age_b\n    \n    return\n",
        "num_ids": 110
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n",
        "num_ids": 39
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    return ((h_age * 7) - 2)\n",
        "num_ids": 17
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return \"ERROR\"\n    elif h_age == 0:\n        return \"Infinite\"\n    elif h_age < 6:\n        return h_age * 2.5\n    elif h_age <= 11:\n        return 21 + (h_age - 6) * 4\n    elif h_age <= 17:\n        return 21 + (h_age - 12) * 4.5\n    elif h_age <= 22:\n        return 21 + (h_age - 18) * 6\n    else:\n        return 21 + (h_age - 22) * 6.5\n",
        "num_ids": 148
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    i = 0\n    while i < len(S):\n        res.append(S[i:i+step])\n        i += step\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # If the list is a list of lists, we want to flatten it to a list of the elements\n    if isinstance(S[0], list):\n        return [sublist for S_sublist in S for sublist in list_split(S_sublist, step)]\n",
        "num_ids": 66
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #splits list based on step parameter\n    #S is the list\n    #step is the step size\n    #returns a list of the resulting lists\n",
        "num_ids": 38
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 1:\n        return S\n    if len(S) < step:\n        return []\n    return [S[i:i + step] for i in range(0, len(S), step)]\n",
        "num_ids": 52
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # your code here\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 33
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and height.\n    '''\n    return 2*pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius.\n    '''\n    return 4*pi*r**2\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius and height.\n    '''\n    return pi*r**2 + pi*r**2*h\n    \ndef lateralsurface_rightangled(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a right-angled triangle given its side lengths.\n    '''\n    return 0.5*a*b + 0.5*a*c + 0.5*b*c\n    \ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given its side lengths and height.\n    '''\n    return 0.5*(a+b)*h\n    \ndef lateralsurface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given its side lengths.\n    '''\n    return 0.5*a*b\n    \ndef lateralsurface_quad(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a quadrilateral given its four side lengths.\n    '''\n    return 0.5*a*b + 0.5*b*c + 0.5*c*d + 0.5*d*a\n    \ndef lateralsurface_romannumeral(a,b):\n    '''\n    Write a function to find the lateral surface area of a romannumeral given its side lengths.\n    '''\n    return a*b + 0.5*b*a\n    \ndef lateralsurface_parallelogram(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given its side lengths and height.\n    '''\n    return 0.5*a*b + 0.5*a*h + 0.5*b*h\n    \ndef lateralsurface_pentagon(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a pentagon given its side lengths.\n    '''\n    return 0.5*a*b + 0.5*b*c + 0.5*c*a\n    \ndef lateralsurface_heptagon(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a heptagon given its side lengths and height.\n    '''\n    return 0.5*a*b + 0.5*a*c + 0.5*a*d + 0.5*b*c + 0.5*b*d + 0.5*c*d\n    \ndef lateralsurface_octagon(a,b,c,d,e):\n    '''\n    Write a function to find the lateral surface area of an octagon given its side lengths and height.\n    '''\n    return 0.5*a*b + 0.5*a*c + 0.5*a*d + 0.5*b*c + 0.5*b*d + 0.5*c*d + 0.5*d*e\n    \ndef lateralsurface_nonagon(a,b,c,d,e):\n    '''\n    Write a function to find the lateral surface area of a nonagon given its side lengths and height.\n    '''\n    return 0.5*a*b + 0.5*a*c + 0.5*a*d + 0.5*b*c + 0.5*b*e + 0.5*c*e + 0.5*d*e\n    \ndef lateralsurface_decagon(a,b,c,d,e,f):\n    '''\n    Write a function to find the lateral surface area of a decagon given its side lengths and height.\n    '''\n    return 0.5*a*b + 0.5*a*c + 0.5*a*d + 0.5*b*c + 0.5*b*e + 0.5*b*f + 0.5*c*d + 0.5*c*f + 0.5*d*e + 0.5*d*f + 0.5*e*f\n    \ndef lateralsurface_hexagon(a,b,c,d,e,f,g):\n    '''\n    Write a function to find the lateral surface area of a hexagon given its side lengths and height.\n    '''\n    return 0.5*a*b + 0.5*a*c + 0.5*a*d + 0.5*b*c + 0.5*b*d + 0.5*b*e + 0.5*c*d + 0.5*c*e + 0.5*c*f + 0.5*d*e + 0.5*d*f + 0.5*e*f + 0.5*f*g\n    \ndef lateralsurface_heptagon(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the lateral surface area of a heptagon given its side lengths and height.\n    '''\n    return 0.5*a*b + 0.5*a*c + 0.5*a*d + 0.5*b*c + 0.5*b*e + 0.5*b*f + 0.5*c*d + 0.5*c*e + 0.5*c*f + 0.5*d*e + 0.5*d*f + 0.5*e*f + 0.5*f*g + 0.5*h*g\n    \ndef lateralsurface_octagon(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the lateral surface area of an octagon given its side lengths and height.\n    '''\n    return 0.5*a*b + 0.5*a*c + 0.5*a*d + 0.5*b*c + 0.5*b*e + 0.5*b*f + 0.5*c*d + 0.5*c*e + 0.5*c*f + 0.5*d*e + 0.5*d*f + 0.5*e*f + 0.5*f*g + 0.5*h*g + 0.5*g*h\n    \ndef lateralsurface_icosahedron(a):\n    '''\n    Write a function to find the lateral surface area of an icosahedron given its side length.\n    '''\n    return 0.5*a*(5*a**2 - 3*a)\n    \ndef lateralsurface_tetrahedron(a):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given its side length.\n    '''\n    return 0.5*a*(2*a**2 - a)\n    \ndef lateralsurface_cube(a):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*a**2\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and height.\n    '''\n    return 2*pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius.\n    '''\n    return 4*pi*r**2\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius and height.\n    '''\n    return pi*r**2 + pi*r**2*h\n    \ndef lateralsurface_rightangled(a",
        "num_ids": 30
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    a = pow(l,2)\n    b = 6*l\n    c = pow(l,2)*math.sqrt(3)\n    d = math.sqrt(pow(l,2)+pow(l,2)+pow(l,2))\n    e = pow(l,2)*math.sqrt(3)\n    f = 3*l\n    g = pow(l,2)*math.sqrt(3)\n    h = pow(l,2)*(math.sqrt(3)/2)\n    i = pow(l,2)*math.sqrt(3)\n    j = pow(l,2)*math.sqrt(3)\n    k = pow(l,2)*math.sqrt(3)\n    l = pow(l,2)*(math.sqrt(3)/2)\n    m = pow(l,2)*math.sqrt(3)\n    n = pow(l,2)*math.sqrt(3)\n    o = pow(l,2)*math.sqrt(3)\n    p = pow(l,2)*math.sqrt(3)\n    q = pow(l,2)*math.sqrt(3)\n    r = pow(l,2)*math.sqrt(3)\n    s = pow(l,2)*math.sqrt(3)\n    t = pow(l,2)*math.sqrt(3)\n    u = pow(l,2)*math.sqrt(3)\n    v = pow(l,2)*math.sqrt(3)\n    w = pow(l,2)*math.sqrt(3)\n    x = pow(l,2)*math.sqrt(3)\n    y = pow(l,2)*math.sqrt(3)\n    z = pow(l,2)*math.sqrt(3)\n    return a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z\n",
        "num_ids": 494
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    A = pow(l,2)\n    A2 = 6 * l\n    print 'The area of a cube is ', A\n    print 'The area of a square is ', A2\n    \n    \n",
        "num_ids": 51
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    a=l**2\n    return a\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    from math import pi\n    a=4*pi*r**2\n    return a\ndef latersurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    from math import pi\n    a=2*pi*r**2+2*pi*r*h\n    return a\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    from math import pi\n    a=pi*r**2+(pi/3)*r**2*h\n    return a\ndef lateralsurface_ring(r,h):\n    '''\n    Write a function to find the lateral surface area of a ring given its radius and height.\n    '''\n    from math import pi\n    a=pi*r**2+(pi/2)*r**2*h\n    return a\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given its radius and height.\n    '''\n    from math import pi\n    a=2*pi*r**2+2*pi*r*h\n    return a\ndef lateralsurface_cube(a,l):\n    '''\n    Write a function to find the lateral surface area of a cube given the side length and the cube's face's length.\n    '''\n    from math import sqrt\n    b=sqrt(3)*a\n    return b\ndef lateralsurface_sphere(a,r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius and the sphere's face's length.\n    '''\n    from math import pi\n    b=4*pi*a\n    return b\ndef lateralsurface_cylinder(a,r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius, length, and height.\n    '''\n    from math import pi\n    b=2*pi*a+2*pi*r*h\n    return b\ndef lateralsurface_cone(a,r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius, height, and the cone's face's length.\n    '''\n    from math import pi\n    b=pi*a+(pi/3)*a*h\n    return b\ndef lateralsurface_ring(a,r,h):\n    '''\n    Write a function to find the lateral surface area of a ring given the radius, height, and the ring's face's length.\n    '''\n    from math import pi\n    b=pi*a+(pi/2)*a*h\n    return b\ndef lateralsurface_torus(a,r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given the radius, height, and the torus's face's length.\n    '''\n    from math import pi\n    b=2*pi*a+2*pi*r*h\n    return b\ndef lateralsurface_rectangle(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the length and width.\n    '''\n    a=2*l*b\n    return a\ndef lateralsurface_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base length and height.\n    '''\n    from math import sqrt\n    a=sqrt(3)*b*h\n    return a\ndef lateralsurface_trapezium(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium given the base length and height.\n    '''\n    from math import sqrt\n    a=sqrt(3)*(a+b)*h/2\n    return a\ndef lateralsurface_kite(b,h):\n    '''\n    Write a function to find the lateral surface area of a kite given the base length and height.\n    '''\n    from math import sqrt\n    a=sqrt(3)*b*h/2\n    return a\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base length, height, and the base's length.\n    '''\n    from math import sqrt\n    a=sqrt(3)*(a+b)*h/2\n    return a\ndef lateralsurface_pentagon(a,h):\n    '''\n    Write a function to find the lateral surface area of a pentagon given the side length and the pentagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(5)*a*h/2\n    return a\ndef lateralsurface_hexagon(a,h):\n    '''\n    Write a function to find the lateral surface area of a hexagon given the side length and the hexagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(6)*a*h/2\n    return a\ndef lateralsurface_heptagon(a,h):\n    '''\n    Write a function to find the lateral surface area of a heptagon given the side length and the heptagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(7)*a*h/2\n    return a\ndef lateralsurface_octagon(a,h):\n    '''\n    Write a function to find the lateral surface area of an octagon given the side length and the octagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(8)*a*h/2\n    return a\ndef lateralsurface_nonagon(a,h):\n    '''\n    Write a function to find the lateral surface area of a nonagon given the side length and the nonagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(10)*a*h/2\n    return a\ndef lateralsurface_decagon(a,h):\n    '''\n    Write a function to find the lateral surface area of a decagon given the side length and the decagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(12)*a*h/2\n    return a\ndef lateralsurface_decagon2(a,h):\n    '''\n    Write a function to find the lateral surface area of a decagon given the side length and the decagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(20)*a*h/2\n    return a\ndef lateralsurface_dodecagon(a,h):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given the side length and the dodecagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(30)*a*h/2\n    return a\ndef lateralsurface_tetragon(a,h):\n    '''\n    Write a function to find the lateral surface area of a tetragon given the side length and the tetragon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(4)*a*h/2\n    return a\ndef lateralsurface_pentagon2(a,h):\n    '''\n    Write a function to find the lateral surface area of a pentagon given the side length and the pentagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(5)*a*h/2\n    return a\ndef lateralsurface_hexagon2(a,h):\n    '''\n    Write a function to find the lateral surface area of a hexagon given the side length and the hexagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(6)*a*h/2\n    return a\ndef lateralsurface_heptagon2(a,h):\n    '''\n    Write a function to find the lateral surface area of a heptagon given the side length and the heptagon's face's length.\n    '''\n    from math import sqrt\n    a=sqrt(7)",
        "num_ids": 17
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    if l < 0:\n        return False\n    else:\n        return 6 * l**2\n",
        "num_ids": 27
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 0\n    # lateral surface area of a cube\n    # given side length l,\n    # s = l**2*6\n    s = l**2*6\n    return s\n",
        "num_ids": 47
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_sum(n):\n        if n == 1:\n            return n\n        else:\n            return n + square_sum(n-1)\n    return square_sum(n)\n",
        "num_ids": 48
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    while n > 0:\n        sum = sum + (n*n)\n        n = n - 2\n    return sum\n    \ndef is_prime(num):\n    '''\n    Write a python function that takes in a integer n and returns True if n is prime and False otherwise.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True\n    \ndef get_summations(num):\n    '''\n    Write a python function that takes in a positive integer n and returns a list containing the first n odd sums of the first n prime numbers.\n    '''\n    prime_sums = []\n    for i in range(num):\n        prime_sums.append(square_Sum(i))\n    return prime_sums\n    \ndef get_factors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a sorted list of all the prime numbers less than n that divide n evenly.\n    '''\n    prime_factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            prime_factors.append(i)\n    return sorted(prime_factors)\n    \ndef smallest_multiple(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the smallest positive number that is evenly divisible by all of the integers from 1 to n.\n    '''\n    m = 1\n    for i in range(2, n+1):\n        while True:\n            if m % i == 0:\n                m = m * i\n                break\n    return m\n    \ndef get_factorial(num):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of n.\n    '''\n    factorial = 1\n    if num <= 0:\n        return 1\n    for i in range(1, num+1):\n        factorial = factorial * i\n    return factorial\n    \ndef factorial_of_power(n, m):\n    '''\n    Write a python function that takes in a positive integer n and a non-negative integer m and returns the factorial of m raised to the nth power.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return m * factorial_of_power(n-1, m)\n    \ndef digit_permutations(num):\n    '''\n    Write a python function that takes in a positive integer n and returns all the permutations of the digits of n.\n    '''\n    permutations = []\n    for i in range(0, 10):\n        permutations.append(i)\n    for i in range(1, num):\n        for j in range(len(permutations)):\n            permutations[j] = permutations[j] * 10 + permutations[j]\n    return permutations\n    \ndef get_n_choose_k(n, k):\n    '''\n    Write a python function that takes in two integers n and k and returns the number of ways in which k items can be chosen from n items, with replacement.\n    '''\n    if k == 0:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return get_n_choose_k(n-1, k) + get_n_choose_k(n-1, k-1)\n    \ndef get_n_choose_k_with_replacement(n, k):\n    '''\n    Write a python function that takes in two integers n and k and returns the number of ways in which k items can be chosen from n items with replacement.\n    '''\n    return get_n_choose_k(n, k) / get_n_choose_k(n, k-1)\n    \ndef get_digits_sum(num):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the digits of n.\n    '''\n    return sum(int(i) for i in str(num))\n    \ndef get_number_of_digits(num):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of digits in n.\n    '''\n    return len(str(num))\n    \ndef add_two_numbers(num1, num2):\n    '''\n    Write a python function that takes in two integers and returns their sum.\n    '''\n    return num1 + num2\n    \ndef multiply_two_numbers(num1, num2):\n    '''\n    Write a python function that takes in two integers and returns their product.\n    '''\n    return num1 * num2\n    \ndef find_perfect_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a sorted list of all the perfect squares less than n.\n    '''\n    perfect_squares = []\n    for i in range(1, n):\n        perfect_squares.append(i*i)\n    return sorted(perfect_squares)\n    \ndef get_permutations(n):\n    '''\n    Write a python function that takes in a string and returns a sorted list of all the permutations of the characters in the string.\n    '''\n    permutations = []\n    for i in range(0, len(n)):\n        permutations.append(n[i])\n    for i in range(1, len(n)):\n        for j in range(0, len(n)):\n            permutations[j] = permutations[j] + permutations[j+1]\n            permutations[j+1] = permutations[j]\n    return permutations\n    \ndef get_pallindrome(num):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth palindrome.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return int(num)\n    for i in range(1, len(num)):\n        if num[i:] == num[i:][::-1]:\n            return int(num[:i] + num[:i][::-1])\n        elif num[:len(num)-i] == num[:len(num)-i][::-1]:\n            return int(num[i:] + num[i:][::-1])\n        \ndef get_string_of_digit_factorials(num):\n    '''\n    Write a python function that takes in a positive integer n and returns the string of the digits of n factorials, in order.\n    '''\n    factorials = []\n    factorial = 1\n    while len(factorials) < num:\n        factorials.append(str(factorial))\n        factorial = factorial * factorial\n    return ''.join(factorials)\n    \ndef get_number_of_divisors(num):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of divisors of n.\n    '''\n    divisors = 1\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            divisors = divisors + 2\n    if num % int(num**0.5) == 0:\n        divisors = divisors - 1\n    return divisors\n    \ndef get_number_of_divisors_of_string(num):\n    '''\n    Write a python function that takes in a string of digits and returns the number of divisors of the string.\n    '''\n    divisors = 1\n    for i in range(2, len(num)):\n        if int(num[i]) == 0:\n            divisors = divisors * 10 + 1\n        else:\n            divisors = divisors * 10\n    return divisors\n    \ndef get_palindromic_digits(num):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of palindromic integers less than n.\n    '''\n    palindromic_nums = []\n    for i in range(0, len(str(num))):\n        palindromic_nums.append(int(str(num)[i:",
        "num_ids": 48
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if not isinstance(n,int) or n < 1:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 2\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # return sum([i**2 for i in range(1, n, 2)])\n    # return sum([i for i in range(1, n, 2)])\n    return sum(x**2 for x in range(1, n, 2))\n",
        "num_ids": 61
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i * i\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(n+1) if x%2==1])\n",
        "num_ids": 26
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n, 2)])\n",
        "num_ids": 22
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # start with 1 because we need to add 0 in order to get the first n terms\n    square_sum = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            square_sum += i**2\n    return square_sum\n",
        "num_ids": 67
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    for i in range(1, n):\n        num = 0\n        for j in range(1, i):\n            num += j\n        count += num\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 5*find_star_num(n-2)\n",
        "num_ids": 46
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n + 1) / 2\n",
        "num_ids": 14
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return ((n-1) * find_star_num(n-1)) + 1\n",
        "num_ids": 54
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    c = 0\n    s = 1\n    while c < n:\n        s += c\n        c += 1\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return (n * find_star_num(n-1))\n",
        "num_ids": 35
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    n -= 1\n    for i in range(n):\n        num = (num * (i + 1)) + 1\n    return num\n",
        "num_ids": 39
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int((1 + (4 * (1 + 8 * (2 + 8 * n))) ** 0.5) / 4)\n",
        "num_ids": 32
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n*(n+1)/2)\n",
        "num_ids": 16
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * find_star_num(n - 1)) + 1\n",
        "num_ids": 35
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord('a') <= ord(k) <= ord('z'):\n        return ord(k) - ord('a')\n    elif ord('A') <= ord(k) <= ord('Z'):\n        return ord(k) - ord('A')\n    else:\n        return ord(k)\n",
        "num_ids": 74
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef count_ascii_value(n):\n    '''\n    Write a function to count the number of ascii value of each character of a string.\n    '''\n    char_count = {}\n    for c in n:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    return char_count\n    \ndef unique_ascii_value(n):\n    '''\n    Write a function to find the unique ascii value of each character of a string.\n    '''\n    return len(set(n))\n    \ndef longest_sequence(n):\n    '''\n    Write a function to find the longest string of same characters.\n    '''\n    m = ''\n    for i in xrange(len(n)):\n        j = i\n        if j == len(n)-1:\n            break\n        while j+1 < len(n) and n[i] == n[j+1]:\n            j += 1\n        if len(m) < len(n[i:j+1]):\n            m = n[i:j+1]\n    return m\n    \ndef character_frequency(n):\n    '''\n    Write a function to find the frequency of each character of a string.\n    '''\n    char_freq = {}\n    for c in n:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    return char_freq\n    \ndef k_largest_element(n, k):\n    '''\n    Write a function to find the k largest elements of a list.\n    '''\n    n.sort(reverse=True)\n    return n[:k]\n    \ndef k_smallest_element(n, k):\n    '''\n    Write a function to find the k smallest elements of a list.\n    '''\n    n.sort()\n    return n[:k]\n    \ndef sort_by_frequency(n):\n    '''\n    Write a function to sort the list of character in ascending order according to their frequency.\n    '''\n    return sorted(n, key=lambda x:n.count(x))\n    \ndef top_ten_numbers(n):\n    '''\n    Write a function to find the top k numbers of a list.\n    '''\n    n.sort(reverse=True)\n    return n[:10]\n    \ndef top_ten_freq_numbers(n):\n    '''\n    Write a function to find the top k numbers of a list according to their frequency.\n    '''\n    char_freq = {}\n    for c in n:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    n.sort(key=lambda x:char_freq[x], reverse=True)\n    return n[:10]\n    \ndef find_duplicate_number(n):\n    '''\n    Write a function to find the duplicate number of a list.\n    '''\n    char_freq = {}\n    for c in n:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    for k,v in char_freq.iteritems():\n        if v > 1:\n            return k\n    return None\n    \ndef find_sum(n):\n    '''\n    Write a function to find the sum of the digits of a positive integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n%10\n        n /= 10\n    return total\n    \ndef is_number_an_ip_address(n):\n    '''\n    Write a function to check whether a string is a valid ip address.\n    '''\n    parts = n.split('.')\n    if len(parts)!= 4:\n        return False\n    for part in parts:\n        if len(part) == 0:\n            return False\n        if part[0] == '0' and len(part) > 1:\n            return False\n        if not part.isdigit():\n            return False\n        if int(part) < 0 or int(part) > 255:\n            return False\n    return True\n    \ndef palindrome(n):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return n == n[::-1]\n    \ndef palindrome_permutation(n):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    char_freq = {}\n    for c in n:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    \n    odd_count = 0\n    for k,v in char_freq.iteritems():\n        if v % 2!= 0:\n            odd_count += 1\n        \n    return odd_count <= 1\n    \ndef palindrome_permutation_reverse(n):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    char_freq = {}\n    for c in n:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    \n    odd_count = 0\n    for k,v in char_freq.iteritems():\n        if v % 2!= 0:\n            odd_count += 1\n            \n    return odd_count <= 1\n    \ndef get_random_int(n):\n    '''\n    Write a function to get a random integer within the range [0, n).\n    '''\n    return random.randint(0, n)\n    \ndef get_random_int_in_range(n):\n    '''\n    Write a function to get a random integer within the range [a, b].\n    '''\n    return random.randint(n, 2*n)\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_with_list(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    a1 = list(s1)\n    a2 = list(s2)\n    a1.sort()\n    a2.sort()\n    return a1 == a2\n    \ndef is_anagram_with_counter(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    a1 = {}\n    a2 = {}\n    for c in s1:\n        if c in a1:\n            a1[c] += 1\n        else:\n            a1[c] = 1\n    for c in s2:\n        if c in a2:\n            a2[c] += 1\n        else:\n            a2[c] = 1\n    return a1 == a2\n    \ndef is_anagram_with_hashmap(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    a1 = {}\n    a2 = {}\n    for c in s1:\n        if c in a1:\n            a1[c] += 1\n        else:\n            a1[c] = 1\n    for c in s2:\n        if c in a2:\n            a2[c] += 1\n        else:\n            a2[c] = 1\n    return a1 == a2\n    \ndef find_anagram(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '",
        "num_ids": 19
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if(i%2 == 0):\n            sum += arr[i]\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(len(arr)) if i % 2 == 0])\n",
        "num_ids": 27
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index\n",
        "num_ids": 61
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[i] for i in range(len(arr)) if i%2 == 0)\n",
        "num_ids": 27
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even=0\n    for num in range(0, len(arr), 2):\n        sum_even += arr[num]\n    return sum_even\n",
        "num_ids": 40
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n",
        "num_ids": 12
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    index = 0\n    sum = 0\n    while index < len(arr):\n        if arr[index] % 2 == 0 and index % 2 == 0:\n            sum = sum + arr[index]\n        index = index + 1\n    return sum\n",
        "num_ids": 60
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0,len(arr),2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 52
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0 and value % 2 == 0:\n            result = result + value\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0,len(arr),2):\n        result+=arr[i]\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    n = int(n)\n    for i in range(2, n+1, 2):\n        total = total + i**5\n    return total\n    \nprint even_Power_Sum(100)\n",
        "num_ids": 55
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2 == 0:\n            total += i**5\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        print(\"Enter a positive integer\")\n    else:\n        total = 0\n        for i in range(n):\n            if i % 2 == 0:\n                total = total + i**5\n        return total\n",
        "num_ids": 58
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return (2 + even_Power_Sum(n-1))**5\n",
        "num_ids": 35
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return \"Only positive integers are allowed\"\n    elif n == 0:\n        return 0\n    else:\n        return (2 + even_Power_Sum(n-1))**5\n",
        "num_ids": 53
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n + 1, 2):\n        sum += i ** 5\n    return sum\n    \ndef perfect_Cube_sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n perfect cubes.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 8\n    return 2 + 8 + 16 + 32 + 48 + 64 + 80 + 96 + 128\n",
        "num_ids": 66
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n, 2):\n        total += i ** 5\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 2\n    if n == 2: \n        return 4\n    if n == 3: \n        return 9\n    if n == 4: \n        return 16\n    return even_Power_Sum(n - 1) + even_Power_Sum(n - 2) + even_Power_Sum(n - 3) + even_Power_Sum(n - 4)\n",
        "num_ids": 108
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(n**5 for n in range(2, n+1, 2))\n",
        "num_ids": 23
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [val[-1] for val in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[-1])\n    return new_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    return [tup[0] for tup in test_list]\n    \ndef front_back_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing both the front and back element of each tuple.\n    '''\n    return [(tup[0], tup[-1]) for tup in test_list]\n",
        "num_ids": 25
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[-1])\n    return new_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(x[1]) for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [test_tup1[x] - test_tup2[x] for x in range(len(test_tup1))]\n",
        "num_ids": 37
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print \"Length mismatch\"\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1\n    \n",
        "num_ids": 82
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    index = 0\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[index]\n        index += 1\n    return test_tup1\n",
        "num_ids": 55
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x-y for x,y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_list = []\n    for tup1_index, element1 in enumerate(test_tup1):\n        new_list.append(element1 - test_tup2[tup1_index])\n    return new_list\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(i-j for i,j in zip(test_tup1,test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    new_tup = ()\n    for i in range(len(tuple1)):\n        new_tup += (tuple1[i] - tuple2[i],)\n    return new_tup\n",
        "num_ids": 74
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n+1): \n        binomial_coefficient = math.factorial(n) / (math.factorial(k) * math.factorial(n-k))\n        if binomial_coefficient%2==0:\n            sum+= binomial_coefficient\n    return sum\n",
        "num_ids": 81
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n % 2 == 0:\n        return int(n / 2) * (int(n / 2) + 1)\n    else:\n        return int(n / 2) * (int(n / 2) + 1) + 1\n",
        "num_ids": 81
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n%2!=0):\n        return 0\n    else:\n        return (math.factorial(2*n) / (2*math.factorial(n) * math.factorial(n)))\n",
        "num_ids": 53
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomCoeffSum = 1\n    for i in range(1, n+1):\n        binomCoeffSum += int(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)))\n    return binomCoeffSum\n",
        "num_ids": 71
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your Code Here\n    s = 0\n    for i in range(n + 1):\n        s += (math.factorial(n) / (math.factorial(i) * math.factorial(n - i)))\n    return s\n",
        "num_ids": 59
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert( n >=0 ), \"n must be positive\"\n    if ( n == 0):\n        return 1\n    else:\n        return ( (n-1) * even_binomial_Coeff_Sum(n-1) ) + ( (n-1) * (n-1) )\n",
        "num_ids": 72
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_ = 0\n    for i in range( n + 1):\n        sum_ +=  ( math.factorial(n) / ( math.factorial(i) * math.factorial(n - i) ) )\n    return sum_\n",
        "num_ids": 59
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_sum = 0 \n    if n == 0:\n        binomial_sum = 0\n    elif n == 1:\n        binomial_sum = 1\n    elif n == 2:\n        binomial_sum = 2\n    elif n > 2:\n        binomial_sum = 2 + (2 * (n - 1)) * even_binomial_Coeff_Sum(n - 2)\n    return binomial_sum\n",
        "num_ids": 106
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0 \n    for i in range(2, n+1): \n        s += binomialCoeff(n, i)\n    return s \n",
        "num_ids": 41
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        return None\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n>2:\n        c = 2\n        for i in xrange(2,n+1):\n            c=c+i\n        return c\n",
        "num_ids": 83
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return (a+b>c) and (b+c>a) and (a+c>b)\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    if (a+b>c) and (b+c>a) and (a+c>b):\n        return True\n    else:\n        return False\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c>b\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 integer values a,b,c and returns True if they can be sides of a triangle and False if they cannot.\n    '''\n    return a+b>c and b+c>a and a+c",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = r**2*math.pi*h\n    return v\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    v = 4/3*math.pi*r**3\n    return v\n",
        "num_ids": 21
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = math.pi * (r**2)*h\n    return V\n    ",
        "num_ids": 21
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.1416*r*r*h/3.0\n    return v\n",
        "num_ids": 24
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r**2)*h\n    \nprint(volume_cylinder(2,2))\n",
        "num_ids": 29
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*(r**2)*h\n",
        "num_ids": 13
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    v = pi*(r**2)*h\n    return v\n    \nprint(volume_cylinder(10,4))\n",
        "num_ids": 38
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159265359*r**2*h\n    ",
        "num_ids": 18
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*r*r*h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**2*pi*h\n",
        "num_ids": 12
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if dict[key] < n:\n            del dict[key]\n    return dict\n",
        "num_ids": 30
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    #a new dictionary with only keys that are greater than or equal to n\n    new_dict = {key:value for key,value in dict.items() if value >= n}\n    return new_dict\n",
        "num_ids": 51
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {x:y for x,y in dict.items() if y >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            filtered_dict[k] = v\n    return filtered_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k,v in dict.items():\n        if v < n:\n            dict.pop(k)\n    return dict\n",
        "num_ids": 32
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = { key:value for key,value in dict.items() if value >= n }\n    return new_dict\n",
        "num_ids": 32
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if dict[key] < n:\n            del dict[key]\n    return dict\n",
        "num_ids": 30
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key,val in dict.items():\n        if val < n:\n            del dict[key]\n    return dict\n",
        "num_ids": 31
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_list = list(test_tup)\n    for i in range(1, len(test_list)):\n        if test_list[i] == test_list[0]:\n            return i\n",
        "num_ids": 51
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    list_ = list(test_tup)\n    num_count = 0\n    for i in list_:\n        if i == list_[0]:\n            num_count += 1\n    return num_count\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(tuple(int(el) for el in str(test_tup)))\n",
        "num_ids": 24
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            return count\n        count += 1\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([x for x in test_tup if x == 0])\n    \nprint count_first_elements((1,2,3,4,5,6,7,8,9))\n",
        "num_ids": 49
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = test_tup.split(',')\n    out = []\n    for word in test_tup:\n        out.append(word[0])\n    return len(out)\n    \ndef is_ascending(tup):\n    '''\n    Write a function to find whether a tuple is in ascending order.\n    '''\n    tup = tup.split(',')\n    for i in range(len(tup)-1):\n        if int(tup[i]) > int(tup[i+1]):\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup = tuple(test_tup)\n    count = 0\n    for i in tup:\n        if i == 0:\n            count += 1\n        else:\n            return count\n    return count\n    \ndef find_second_last(test_tup):\n    '''\n    Write a function to find the second last element of a tuple.\n    '''\n    tup = tuple(test_tup)\n    return tup[-2]\n",
        "num_ids": 23
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for elem in test_tup:\n        print(elem)\n        break\n",
        "num_ids": 23
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    assert len(test_tup) == 8\n    count = 0\n    for i in xrange(8):\n        if i == 0:\n            continue\n        if test_tup[i] < test_tup[i - 1]:\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([x for x in test_tup if x == 1])\n",
        "num_ids": 20
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # d = 1 + 2 * sum(i for i in range(1, n))\n    # if n < d:\n    #     return d - n\n    # else:\n    #     return d\n    \n    # d = n * (n - 1) / 2\n    # if n < d:\n    #     return d - n\n    # else:\n    #     return d\n    \n    # n * (n + 1) / 2\n    # d = n * (3 * n - 1) / 2\n    # if n < d:\n    #     return d - n\n    # else:\n    #     return d\n",
        "num_ids": 150
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    import math\n    return math.floor(n/10) + math.floor(n**0.5) + 1 == n \n    \ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    import math\n    return math.floor(n/5) + 1 == n \n    \ndef is_num_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    import math\n    return math.floor(n/6) + 1 == n \n    \ndef is_num_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    import math\n    return math.floor(n/7) + 1 == n \n    \ndef is_num_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    import math\n    return math.floor(n/8) + 1 == n \n    \ndef is_num_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + n**0.5 + 1 == n \n    \ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_hexagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_heptagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_octagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_hexagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_heptagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_octagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_hexagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_heptagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_octagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_hexagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_heptagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_octagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_hexagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_heptagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_octagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_hexagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_heptagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_octagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is_num_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.floor(n**0.5) + 1 == n \n    \ndef is",
        "num_ids": 28
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    nth_num = n - n % 10\n    nth_num = nth_num // 10\n    return nth_num\n",
        "num_ids": 46
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 9*(9 - count)\n        count += 1\n    return num\n    \n    \n    \ndef is_fibonacci(n):\n    '''\n    Write a function that returns True if the integer n is a fibonacci number,\n    and False otherwise.\n    '''\n    if n < 2:\n        return True\n    else:\n        return is_fibonacci(n - 1) and is_fibonacci(n - 2)\n    \ndef is_palindrome(n):\n    '''\n    Write a function that returns True if the integer n is a palindrome, \n    and False otherwise.\n    '''\n    return str(n) == str(n)[::-1]\n    \n    \ndef is_smooth(n):\n    '''\n    Write a function that returns True if the integer n is a smooth number, \n    and False otherwise.\n    '''\n    if n < 3:\n        return True\n    else:\n        return is_smooth(n - 1) and is_smooth(n - 2) and is_smooth(n - 3)\n    \ndef is_factor(n, f):\n    '''\n    Write a function that returns True if the integer n is a factor of f, \n    and False otherwise.\n    '''\n    return (n % f == 0)\n    \ndef is_square(n):\n    '''\n    Write a function that returns True if the integer n is a perfect square, \n    and False otherwise.\n    '''\n    # Base case\n    if n == 1:\n        return True\n    # Try a few factors to see if it's a perfect square\n    for i in range(2, n):\n        if is_factor(n, i) and is_factor(n, i + 1):\n            return True\n    return False\n    \ndef is_square_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a square pyramid, \n    and False otherwise.\n    '''\n    return is_square(n) and is_factor(n, 1) and is_factor(n, n + 1)\n    \ndef is_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a pyramid, \n    and False otherwise.\n    '''\n    return is_factor(n, 1) and is_factor(n, n + 1) and is_factor(n, n + 2)\n    \ndef is_full_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a full pyramid, \n    and False otherwise.\n    '''\n    return is_factor(n, 1) and is_factor(n, n + 1) and is_factor(n, n + 2) and is_factor(n, n + 3)\n    \ndef is_narcissistic(n):\n    '''\n    Write a function that returns True if the integer n is a Narcissistic number,\n    and False otherwise.\n    '''\n    # Base case\n    if n == 1:\n        return True\n    else:\n        return (is_narcissistic(n - 1) and is_narcissistic(n // 10)) or (is_narcissistic(n // 10) and is_narcissistic(n % 10))\n    \ndef is_leap_year(n):\n    '''\n    Write a function that returns True if the integer n is a leap year, \n    and False otherwise.\n    '''\n    # Base case\n    if n < 1:\n        return False\n    # A year is a leap year if it is evenly divisible by 4\n    # and is evenly divisible by 100 (but not evenly divisible by 400)\n    return (is_divisible(n, 4) and not is_divisible(n, 100)) or (is_divisible(n, 400))\n    \ndef is_divisible(n, f):\n    '''\n    Write a function that returns True if the integer n is evenly divisible by f,\n    and False otherwise.\n    '''\n    return (n % f == 0)\n    \ndef is_permutation(n, m):\n    '''\n    Write a function that returns True if the integer n is a permutation of integer m,\n    and False otherwise.\n    '''\n    return sorted(str(n)) == sorted(str(m))\n    \ndef is_anagram(n, m):\n    '''\n    Write a function that returns True if the integer n is an anagram of integer m,\n    and False otherwise.\n    '''\n    return sorted(str(n)) == sorted(str(m)) and len(str(n)) == len(str(m))\n    \ndef is_binary(n):\n    '''\n    Write a function that returns True if the integer n is a binary number,\n    and False otherwise.\n    '''\n    return is_factor(n, 2)\n    \ndef is_binary_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a binary pyramid,\n    and False otherwise.\n    '''\n    return is_factor(n, 2) and is_factor(n, 2 * n)\n    \ndef is_pentagonal(n):\n    '''\n    Write a function that returns True if the integer n is a pentagonal number,\n    and False otherwise.\n    '''\n    return is_factor(n, 3) and is_factor(n, 5)\n    \ndef is_pentagonal_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a pentagonal pyramid,\n    and False otherwise.\n    '''\n    return is_factor(n, 3) and is_factor(n, 5) and is_factor(n, n + 5)\n    \ndef is_hexagonal(n):\n    '''\n    Write a function that returns True if the integer n is a hexagonal number,\n    and False otherwise.\n    '''\n    return is_factor(n, 4) and is_factor(n, 6)\n    \ndef is_hexagonal_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a hexagonal pyramid,\n    and False otherwise.\n    '''\n    return is_factor(n, 4) and is_factor(n, 6) and is_factor(n, n + 6)\n    \ndef is_heptagonal(n):\n    '''\n    Write a function that returns True if the integer n is a heptagonal number,\n    and False otherwise.\n    '''\n    return is_factor(n, 5) and is_factor(n, 7)\n    \ndef is_heptagonal_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a heptagonal pyramid,\n    and False otherwise.\n    '''\n    return is_factor(n, 5) and is_factor(n, 7) and is_factor(n, n + 7)\n    \ndef is_octagonal(n):\n    '''\n    Write a function that returns True if the integer n is a octagonal number,\n    and False otherwise.\n    '''\n    return is_factor(n, 6) and is_factor(n, 8)\n    \ndef is_octagonal_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a octagonal pyramid,\n    and False otherwise.\n    '''\n    return is_factor(n, 6) and is_factor(n, 8) and is_factor(n, n + 8)\n    \ndef is_nonagonal(n):\n    '''\n    Write a function that returns True if the integer n is a nonagonal number,\n    and False otherwise.\n    '''\n    return is_factor(n, 3) and is_factor(n, 5) and not is_factor(n, 7)\n    \ndef is_nonagonal_pyramid(n):\n    '''\n    Write a function that returns True if the integer n is a nonagonal pyramid,\n    and False otherwise.\n    '''\n    return is_factor(n, 3) and is_factor(n, 5) and not is_factor(n, 7) and is_factor(n, n + 5)\n    \ndef is_decagonal(n):\n    '''\n    Write a function that returns True if the integer n is a decagonal number,\n    and False otherwise",
        "num_ids": 24
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    while num < n:\n        num += 12\n        num += 1\n    if num == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagon = []\n    for num in range(0,n):\n        decagon.append(num*(num+1)*(2*num+1))\n    return decagon[n-1]\n",
        "num_ids": 50
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return 1\n    num = 0\n    for i in range(1,n+1):\n        num += i*(i-1)\n    return num\n",
        "num_ids": 57
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n*n + 1)/2\n",
        "num_ids": 15
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n*(n-1) - 1)/2 == n*(n-1)*(2*n-1) / 2\n",
        "num_ids": 36
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if i % 10 == 0:\n            count += 1\n    return i\n",
        "num_ids": 42
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = -1\n    for i, val in enumerate(dlist):\n        if val == item:\n            idx = i\n            break\n",
        "num_ids": 38
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    if len(dlist) == 0:\n        return (False, -1)\n    else:\n        return (True if item == dlist[0] else False, 0)\n",
        "num_ids": 50
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = 0\n    for elem in dlist:\n        if elem == item:\n            found = True\n            break\n        index += 1\n    if found:\n        return (found, index)\n    else:\n        return (found, -1)\n",
        "num_ids": 68
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            position = i\n            break\n    return (True, position)\n",
        "num_ids": 48
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if item not in dlist:\n        return False, -1\n    else:\n        return True, dlist.index(item)\n",
        "num_ids": 34
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            pos = i\n            break\n    return (True, pos)\n",
        "num_ids": 47
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n    return pos\n",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # initialize a list to store the data\n    unique_list = []\n    for elem in test_list:\n        if elem not in unique_list:\n            unique_list.append(elem)\n    # if all the data are unique then return True\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    all_unique = True\n    for i in range(len(test_list)):\n        if test_list[i] in test_list[i+1:]:\n            all_unique = False\n    return all_unique\n",
        "num_ids": 55
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(0,len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i]==test_list[j]):\n                return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    a = set(test_list)\n    b = len(a)\n    if b == len(test_list):\n        return True\n    else:\n        return False\n    \n    ",
        "num_ids": 46
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    length1 = len(nums1)\n    length2 = len(nums2)\n    \n    if length1 > length2:\n        nums1,nums2 = nums2,nums1\n    \n    carry = 0\n    new_nums = []\n    for i in range(length1):\n        new_nums.append(nums1[i] - nums2[i] - carry)\n        carry = new_nums[i] / 10\n        new_nums[i] = new_nums[i] % 10\n    \n    if carry!= 0:\n        new_nums.append(carry)\n    \n    return new_nums\n    \ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    length1 = len(nums1)\n    length2 = len(nums2)\n    \n    if length1 > length2:\n        nums1,nums2 = nums2,nums1\n    \n    carry = 0\n    new_nums = []\n    for i in range(length1):\n        new_nums.append(nums1[i] + nums2[i] + carry)\n        carry = new_nums[i] / 10\n        new_nums[i] = new_nums[i] % 10\n    \n    if carry!= 0:\n        new_nums.append(carry)\n    \n    return new_nums\n",
        "num_ids": 164
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return []\n    elif len(nums2) == 0:\n        return nums1\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print('Lengths must be equal')\n        return\n    else:\n        return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 63
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        return sub_list(nums2,nums1)\n    if len(nums2) == 0:\n        return nums1\n    if len(nums1) == 0:\n        return []\n    l = []\n    for i in range(len(nums1)):\n        l.append(nums1[i]-nums2[i])\n    return l\n",
        "num_ids": 108
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        res.append(nums1[i]+nums2[i])\n    return res\ndef sort_list(l):\n    '''\n    Write a function to sort the elements of a list in non-decreasing order\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[j]<l[i]:\n                temp=l[j]\n                l[j]=l[i]\n                l[i]=temp\n    return l\ndef sort_list_2(l):\n    '''\n    Write a function to sort the elements of a list in non-decreasing order\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[j]<l[i]:\n                l[i],l[j]=l[j],l[i]\n    return l\ndef nth_list_element(l,n):\n    '''\n    Write a function to find the nth element of a list\n    '''\n    return l[n]\ndef first_list_element(l):\n    '''\n    Write a function to find the first element of a list\n    '''\n    return l[0]\ndef last_list_element(l):\n    '''\n    Write a function to find the last element of a list\n    '''\n    return l[-1]\ndef middle_list_element(l):\n    '''\n    Write a function to find the middle element of a list\n    '''\n    return l[len(l)/2]\ndef reverse_list(l):\n    '''\n    Write a function to reverse a list\n    '''\n    return l[::-1]\ndef sort_list_by_last_element(l):\n    '''\n    Write a function to sort the elements of a list in non-decreasing order by the last element\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[j][-1]<l[i][-1]:\n                temp=l[j]\n                l[j]=l[i]\n                l[i]=temp\n    return l\ndef first_and_last_list_element(l):\n    '''\n    Write a function to find the first and last element of a list\n    '''\n    return [first_list_element(l),last_list_element(l)]\ndef nth_element_of_list(l,n):\n    '''\n    Write a function to find the nth element of a list\n    '''\n    return l[n]\ndef in_list(l,target):\n    '''\n    Write a function to find if a list contains a target element\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            return True\n    return False\ndef get_length(l):\n    '''\n    Write a function to get the length of a list\n    '''\n    return len(l)\ndef get_elements(l,start,end):\n    '''\n    Write a function to get the elements of a list between two indices\n    '''\n    return l[start:end+1]\ndef get_index_of_element(l,target):\n    '''\n    Write a function to get the index of an element in a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            return i\n    return -1\ndef get_index_of_first_element(l,target):\n    '''\n    Write a function to get the index of the first element of a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            return i\n    return -1\ndef get_index_of_last_element(l,target):\n    '''\n    Write a function to get the index of the last element of a list\n    '''\n    for i in range(len(l)-1,-1,-1):\n        if l[i]==target:\n            return i\n    return -1\ndef get_index_of_middle_element(l,target):\n    '''\n    Write a function to get the index of the middle element of a list\n    '''\n    mid=len(l)/2\n    for i in range(mid):\n        if l[i]==target:\n            return i\n    for i in range(mid+1,len(l)):\n        if l[i]==target:\n            return i\n    return -1\ndef remove_list_element(l,target):\n    '''\n    Write a function to remove an element from a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            l[i]='_'\n    return l\ndef remove_list_element_2(l,target):\n    '''\n    Write a function to remove an element from a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            l[i]='_'\n    return l[1:]\ndef remove_list_element_3(l,target):\n    '''\n    Write a function to remove an element from a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            l[i]='_'\n    return l[0:len(l)-1]\ndef remove_list_element_4(l,target):\n    '''\n    Write a function to remove an element from a list\n    '''\n    for i in range(len(l)):\n        if l[i]==target:\n            l[i]='_'\n    return l[0:i]+l[i+1:]\ndef count_list_element(l,target):\n    '''\n    Write a function to count the number of elements of a list\n    '''\n    cnt=0\n    for i in range(len(l)):\n        if l[i]==target:\n            cnt+=1\n    return cnt\ndef count_list_element_2(l,target):\n    '''\n    Write a function to count the number of elements of a list\n    '''\n    cnt=0\n    for i in range(len(l)):\n        if l[i]==target:\n            cnt+=1\n    return cnt\ndef sum_list(l):\n    '''\n    Write a function to sum the elements of a list\n    '''\n    s=0\n    for i in range(len(l)):\n        s+=l[i]\n    return s\ndef get_max_element(l):\n    '''\n    Write a function to get the max element of a list\n    '''\n    m=l[0]\n    for i in range(1,len(l)):\n        if l[i]>m:\n            m=l[i]\n    return m\ndef get_min_element(l):\n    '''\n    Write a function to get the max element of a list\n    '''\n    m=l[0]\n    for i in range(1,len(l)):\n        if l[i]<m:\n            m=l[i]\n    return m\ndef largest_sublist(l):\n    '''\n    Write a function to find the largest sublist in a list\n    '''\n    max_sublist=[]\n    for i in range(len(l)):\n        max_sublist.append(l[i])\n        for j in range(i+1,len(l)):\n            if l[j]>l[i]:\n                max_sublist.append(l[j])\n    return max_sublist\ndef min_list(l):\n    '''\n    Write a function to find the smallest element of a list\n    '''\n    min_element=l[0]\n    for i in rang",
        "num_ids": 17
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        return nums1[len(nums1)-len(nums2):]+nums2\n    else:\n        return nums1[len(nums1)-len(nums2):]+nums1\n        \n    \ndef and_list(nums1,nums2):\n    '''\n    Write a function to return the intersection of two lists.\n    '''\n    intersection = []\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            intersection.append(nums1[i])\n    return intersection\n",
        "num_ids": 53
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1, num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    if len(nums1)!= len(nums2):\n        return \"Error\"\n    \n    subs = []\n    for i in range(len(nums1)):\n        subs.append(nums1[i] - nums2[i])\n    \n    return subs\n    \n",
        "num_ids": 76
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    subtraction = []\n    for i in range(len(nums1)):\n        subtraction.append(nums1[i] - nums2[i])\n    return subtraction\n",
        "num_ids": 49
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dic = {}\n    for i in n:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in dic:\n        if dic[i] > int(i):\n            return False\n    return True\n    \nprint validate('22')",
        "num_ids": 81
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not n:\n        return True\n    if n == 1:\n        return False\n    digits = [int(i) for i in str(n)]\n    for i in digits:\n        if i > 1:\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def dig(n): \n        n=str(n)\n        return [int(i) for i in n]\n    def digit_freq(n): \n        dic={}\n        for i in dig(n): \n            if i not in dic: \n                dic[i]=1\n            else: \n                dic[i]+=1\n        return dic\n    def digit_freq_check(dic): \n        for k,v in dic.items(): \n            if v>k: \n                return False\n        return True\n    n=str(n)\n    dic=digit_freq(n)\n    return digit_freq_check(dic)\n",
        "num_ids": 171
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dic = {}\n    n = str(n)\n    for i in n:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    for i in dic:\n        if dic[i]>int(i):\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = []\n    for i in range(10):\n        d.append(n%10)\n        n = n // 10\n    d.sort()\n    s = set(d)\n    for i in s:\n        if d.count(i) > i:\n            return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    i = 0\n    str_n = str(n)\n    while i<len(str_n):\n        if str_n.count(str_n[i]) > int(str_n[i]):\n            return False\n        i+=1\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return True\n    digit = n % 10\n    freq = 0\n    while n > 0:\n        freq += 1\n        n = n // 10\n    if freq > digit:\n        return False\n    return validate(n)\n",
        "num_ids": 65
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def freqCheck(n):\n        freq = [0 for i in range(10)]\n        while n!= 0:\n            freq[n % 10] += 1\n            n = n // 10\n        return freq\n    def is_pandigital(n, nums):\n        for i in range(1, len(nums)):\n            if (i >= len(n) or n[i]!= nums[i]):\n                return False\n        return True\n    nums = []\n    nums.extend(str(n))\n    for i in range(10):\n        nums.append(str(i))\n    return is_pandigital(freqCheck(n), nums)\n",
        "num_ids": 174
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = str(n)\n    for i in num:\n        if (num.count(i) > num.count(i)):\n            return False\n    return True\n    \ndef main():\n    print(validate(19238))\n    print(validate(11111111))\n    print(validate(1785))\n    print(validate(999))\n    print(validate(1889))\n    print(validate(1122))\n    print(validate(1191))\n    print(validate(1234))\n    \nif __name__ == '__main__':\n    main()\n    ",
        "num_ids": 146
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    return all(len(s) - s.count(i) <= i for i in s)\n",
        "num_ids": 33
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    flag=False\n    for x in list:\n        if x!= element:\n            flag=False\n            break\n        else:\n            flag=True\n    return flag\n",
        "num_ids": 43
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n    \n    \ndef check_element_bool(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return element in list\n    \n    \ndef check_element_bool_2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n    \n",
        "num_ids": 17
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return element in list\n",
        "num_ids": 8
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check = 1\n    for i in list:\n        if i!= element:\n            check = 0\n    return check\n",
        "num_ids": 31
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for each in list:\n        if each!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)>0:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False\n    else:\n        return True\n",
        "num_ids": 52
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'(.)b{2,3}(.)',text))\n",
        "num_ids": 26
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        print('Match Found!')\n        print(result.group())\n    else:\n        print('Match not found!')\n    \ndef text_match_four_or_more(text):\n    '''\n    Write a function that checks whether a string contains a word that is at least 4 letters long.\n    '''\n    pattern = r'\\w{4,}'\n    result = re.search(pattern, text)\n    if result:\n        print('Match Found!')\n        print(result.group())\n    else:\n        print('Match not found!')\n    \ndef text_match_digits(text):\n    '''\n    Write a function that checks whether a string contains a number in it.\n    '''\n    pattern = r'\\d+'\n    result = re.search(pattern, text)\n    if result:\n        print('Match Found!')\n        print(result.group())\n    else:\n        print('Match not found!')\n",
        "num_ids": 58
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #The below is the right way to do this\n    match = re.search(r\"([ab]{2,3}[ab])\", text)\n    if match:\n        print match.group()\n    else:\n        print \"No match found\"\n",
        "num_ids": 62
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab(?=ab|bab|b)*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # pattern = re.compile(r'(\\w*(ab)+\\w*)')\n    # print(re.match(pattern, 'abaaabbb'))\n    # print(re.match(pattern, 'ab'))\n    # print(re.match(pattern, 'aaabbb'))\n    # print(re.match(pattern, 'abc'))\n    # print(re.match(pattern, 'aba'))\n",
        "num_ids": 104
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'\\ba{2,3}\\b', text))\n",
        "num_ids": 24
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'ab{2,3}', text)\n    return match\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_split = re.findall(r'([a]+[b]{2,3})', text)\n    if text_split:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'[ab]{2}',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(re.findall('ab{2,3}', text)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        max_sum += max(a)\n        a = a[1:] + [a[0]]\n    return max_sum\n",
        "num_ids": 48
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n",
        "num_ids": 22
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = max_sum = k*a[0]\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum+a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "num_ids": 75
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    m = k + 1\n    max_sum = a[0]\n    for i in xrange(1, n):\n        a[i] = max(a[i], a[i] + a[i-1])\n        if (a[i] > max_sum):\n            max_sum = a[i]\n            if max_sum == k:\n                return max_sum\n    return max_sum\n",
        "num_ids": 99
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in xrange(k, n): \n        a[i] += a[i - k]\n    return max(a) \n",
        "num_ids": 36
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def max_sub_array_sum(a, k): \n        sum = 0\n        for i in xrange(k): \n            sum += a[i]\n        max_sum = sum\n        for i in xrange(k, n): \n            sum += a[i] - a[i - k]\n            max_sum = max(sum, max_sum)\n        return max_sum\n    return max(max_sub_array_sum(a, k), max_sub_array_sum_repeated(a, n, k))\n",
        "num_ids": 131
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= k - 1:\n            current_sum -= a[i - k]\n    return max_sum\n",
        "num_ids": 79
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = 0 # Sum of the whole array\n    f = 0 # Sum of the repeated array\n    for i in range(0, k):\n        for j in range(n):\n            s += a[j]\n            f += a[j]\n    return s\n",
        "num_ids": 64
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # initialize the array with 0\n    max_array = [0]*n\n",
        "num_ids": 23
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return 0\n    max_so_far = a[0]\n    current_max = a[0]\n    for i in range(1,n):\n        current_max = max(current_max + a[i],a[i])\n        max_so_far = max(max_so_far,current_max)\n    print max_so_far\n    return max_so_far\n",
        "num_ids": 102
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            total += i**2\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #squares = [1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]\n    squares = []\n    #n = int(input('Enter a number: '))\n    n = n-1\n    #print('i = 1')\n    #print('i = 2')\n    #print('i = 3')\n    #print('i = 4')\n    #print('i = 5')\n    #print('i = 6')\n    #print('i = 7')\n    #print('i = 8')\n    #print('i = 9')\n    #print('i = 10')\n    #print('i = 11')\n    #print('i = 12')\n    #print('i = 13')\n    #print('i = 14')\n    #print('i = 15')\n    #print('i = 16')\n    #print('i = 17')\n    #print('i = 18')\n    #print('i = 19')\n    #print('i = 20')\n    #print('i = 21')\n    #print('i = 22')\n    #print('i = 23')\n    #print('i = 24')\n    #print('i = 25')\n    #print('i = 26')\n    #print('i = 27')\n    #print('i = 28')\n    #print('i = 29')\n    #print('i = 30')\n    #print('i = 31')\n    #print('i = 32')\n    #print('i = 33')\n    #print('i = 34')\n    #print('i = 35')\n    #print('i = 36')\n    #print('i = 37')\n    #print('i = 38')\n    #print('i = 39')\n    #print('i = 40')\n    #print('i = 41')\n    #print('i = 42')\n    #print('i = 43')\n    #print('i = 44')\n    #print('i = 45')\n    #print('i = 46')\n    #print('i = 47')\n    #print('i = 48')\n    #print('i = 49')\n    #print('i = 50')\n    #print('i = 51')\n    #print('i = 52')\n    #print('i = 53')\n    #print('i = 54')\n    #print('i = 55')\n    #print('i = 56')\n    #print('i = 57')\n    #print('i = 58')\n    #print('i = 59')\n    #print('i = 60')\n    #print('i = 61')\n    #print('i = 62')\n    #print('i = 63')\n    #print('i = 64')\n    #print('i = 65')\n    #print('i = 66')\n    #print('i = 67')\n    #print('i = 68')\n    #print('i = 69')\n    #print('i = 70')\n    #print('i = 71')\n    #print('i = 72')\n    #print('i = 73')\n    #print('i = 74')\n    #print('i = 75')\n    #print('i = 76')\n    #print('i = 77')\n    #print('i = 78')\n    #print('i = 79')\n    #print('i = 80')\n    #print('i = 81')\n    #print('i = 82')\n    #print('i = 83')\n    #print('i = 84')\n    #print('i = 85')\n    #print('i = 86')\n    #print('i = 87')\n    #print('i = 88')\n    #print('i = 89')\n    #print('i = 90')\n    #print('i = 91')\n    #print('i = 92')\n    #print('i = 93')\n    #print('i = 94')\n    #print('i = 95')\n    #print('i = 96')\n    #print('i = 97')\n    #print('i = 98')\n    #print('i = 99')\n    #print('i = 100')\n    #print('i = 101')\n    #print('i = 102')\n    #print('i = 103')\n    #print('i = 104')\n    #print('i = 105')\n    #print('i = 106')\n    #print('i = 107')\n    #print('i = 108')\n    #print('i = 109')\n    #print('i = 110')\n    #print('i = 111')\n    #print('i = 112')\n    #print('i = 113')\n    #print('i = 114')\n    #print('i = 115')\n    #print('i = 116')\n    #print('i = 117')\n    #print('i = 118')\n    #print('i = 119')\n    #print('i = 120')\n    #print('i = 121')\n    #print('i = 122')\n    #print('i = 123')\n    #print('i = 124')\n    #print('i = 125')\n    #print('i = 126')\n    #print('i = 127')\n    #print('i = 128')\n    #print('i = 129')\n    #print('i = 130')\n    #print('i = 131')\n    #print('i = 132')\n    #print('i = 133')\n    #print('i = 134')\n    #print('i = 135')\n    #print('i = 136')\n    #print('i = 137')\n    #print('i = 138')\n    #print('i = 139')\n    #print('i = 140')\n    #print('i = 141')\n    #print('i = 142')\n    #print('i = 143')\n    #print('i = 144')\n    #print('i = 145')\n    #print('i = 146')\n    #print('i = 147')\n    #print('i = 148')\n    #print('i = 149')\n    #print('i = 150')\n    #print('i = 151')\n    #print('i = 152')\n    #print('i = 153')\n    #print('i = 154')\n    #print('i = 155')\n    #print('i = 156')\n    #print('i = 157')\n    #print('i = 158')\n    #print('i = 159')\n    #print('i = 160')\n    #print('i = 161')\n    #print('i = 162')\n    #print('i = 163')\n    #print('i = 164')\n    #print('i = 165')\n    #print('i = 166')\n    #print('i = 167')\n    #print('i = 168')\n    #print('i = 169')\n    #print('i = 170')\n    #print('i = 171')\n    #print('i = 172')\n    #print('i = 173')\n    #print('i = 174')\n    #print('i = 175')\n    #print('i = 176')\n    #print('i = 177')\n    #print('i = 178')\n    #print('i = 179')\n    #print('i = 180')\n    #print('i = 181')\n    #print('i = 182')\n    #print('i = 183')\n    #print('i = 184')\n    #print('i = 185')\n    #print('i = 186')\n    #print('i = 187')\n    #print('i = 188')\n    #print('i = 189')\n    #print('i = 190')\n    #print('i = 191')\n    #print('i = 192')\n    #print('i = 193')\n    #print('i = 194')\n    #print('i = 195')\n    #print('i = 196')\n    #print('i = 197')\n    #print('i = 198')\n    #print('i = 199')\n    #print('i = 200')\n    #print('i = 201')\n    #print('i = 202')\n    #print('i = 203')\n    #print('i = 204')\n    #print('i = 205')\n    #print('i = 206')\n    #print('i = 207')\n    #print('i = 20",
        "num_ids": 2009
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        return\n    \n    if n==0:\n        return 0\n    else:\n        return square_Sum(n-1)+n*n\n    \n    \ndef consecutive_product(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of consecutive product of first n natural numbers.\n    '''\n    if n<0:\n        return\n    \n    if n==0:\n        return 1\n    else:\n        return consecutive_product(n-1)*n\n",
        "num_ids": 41
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total = total + (i*i)\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n ** 2 + square_Sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n**2 + square_Sum(n-1)\n",
        "num_ids": 44
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(range(0, n+1, 2))**2\n",
        "num_ids": 19
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize the accumulator variable\n    total = 0 \n    # loop through every number from 2 to n, inclusive\n    for i in range(2, n + 1):\n        # if i is even, add to total\n        if i % 2 == 0:\n            total = total + (i * i)\n    return total\n",
        "num_ids": 77
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_n = 0\n    i = 2\n    while i <= n:\n        sum_n = sum_n + i*i\n        i = i + 1\n    return sum_n\n    \n",
        "num_ids": 49
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return n**2 + square_Sum(n-2)\n",
        "num_ids": 39
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = []\n    for list_ in list1:\n        if len(list_) > len(max_length):\n            max_length = list_\n",
        "num_ids": 41
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    for sublist in list1:\n        if len(sublist) > max:\n            max = len(sublist)\n    return max\n",
        "num_ids": 46
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_max_length = []\n    for i in list1:\n        list_max_length.append(len(i))\n    return list_max_length\n",
        "num_ids": 41
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = -1\n    max_list = []\n    for i in list1:\n        if max_len < len(i):\n            max_len = len(i)\n            max_list = i\n    return max_list\n",
        "num_ids": 59
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    length = 0\n    for l in list1:\n        if len(l) > length:\n            length = len(l)\n            max_length_list = [l]\n        elif len(l) == length:\n            max_length_list.append(l)\n    return max_length_list\n",
        "num_ids": 84
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    dic={}\n    for sub in list1:\n        length=len(sub)\n        if length in dic:\n            dic[length].append(sub)\n        else:\n            dic[length]=[]\n            dic[length].append(sub)\n    res=[]\n    max_val=max(dic.keys())\n    for ele in dic[max_val]:\n        res.append(ele)\n    return res\n",
        "num_ids": 110
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen=0\n    maxl=[]\n    for i in range(len(list1)):\n        if len(list1[i])>maxlen:\n            maxlen=len(list1[i])\n            maxl=list1[i]\n    return maxl\n",
        "num_ids": 68
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    max_length = 0\n    for each in list1:\n        if len(each) > max_length:\n            max_length_list = each\n            max_length = len(each)\n",
        "num_ids": 57
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_list = [i]\n            max_len = len(i)\n        elif len(i) == max_len:\n            max_list.append(i)\n    return max_list\n",
        "num_ids": 90
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # recursion base case\n    if n == 1:\n        return k\n    if n == 2:\n        if k == 1:\n            return k\n        elif k == 2:\n            return k*(k-1)\n        else:\n            return (k*(k-1)*(k-2))/6\n    # matrix of n x k\n    # n = number of cols and k = number of colors\n    matrix = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        matrix[i][1] = 1\n    for i in range(1, k+1):\n        matrix[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]\n    return matrix[n][k]\n",
        "num_ids": 236
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return k\n    else:\n        return count_no_of_ways(n-1, k) + k*count_no_of_ways(n-2, k)\n",
        "num_ids": 75
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if k == n:\n        return 1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n",
        "num_ids": 80
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_of_ways(n, k, i): \n        if i > n: \n            return 0 \n        elif i == n: \n            return k \n        else: \n            return count_of_ways(n, k, i + 1) + count_of_ways(n, k, i + 2) \n",
        "num_ids": 83
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1 or k==1:\n        return 1\n    elif n==2:\n        return k\n    else:\n        return count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k-1)\n",
        "num_ids": 67
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # We have to draw the first and last post.\n    # We have to draw all the posts except the last.\n    # We have to paint all the posts except the last post\n    # We have to paint all the posts except the last two post\n    # We have to paint all the posts except the last three post\n    # We have to paint all the posts except the last four post\n    # We have to paint all the posts except the last five post\n    # We have to paint all the posts except the last six post\n    # We have to paint all the posts except the last seven post\n    # We have to paint all the posts except the last eight post\n    # We have to paint all the posts except the last nine post\n",
        "num_ids": 163
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n    elif k == 1:\n        return 1\n    elif k == 2:\n        return n\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n",
        "num_ids": 75
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1: \n        return k \n    elif n==2: \n        return 2*k \n    else: \n        return (2*k*count_no_of_ways(n-2, k) + (k-1)*count_no_of_ways(n-1, k-1))\n",
        "num_ids": 80
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n",
        "num_ids": 58
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n%m == 0:\n        return n/m\n    else:\n        return int(n/m) + 1\n        \nprint find(1,1)\nprint find(0,1)\nprint find(1,0)\nprint find(2,2)\nprint find(2,1)\nprint find(0,0)\nprint find(2,0)",
        "num_ids": 91
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return m\n    else:\n        return find(n, m - 1)\n",
        "num_ids": 30
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n    \n    \n    \n    \ndef average(a):\n    '''\n    Write a python function to find the average of a list.\n    '''\n    sum = 0\n    for i in a:\n        sum += i\n    return sum/len(a)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n    \n    \n    \ndef average(a):\n    '''\n    Write a python function to find the average of a list.\n    '''\n    sum = 0\n    for i in a:\n        sum += i\n    return sum/len(a)\n    \n    \ndef fib(n):  \n    '''\n    Write a python function to calculate nth Fibonacci number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to find nth factorial.\n    '''\n    product = 1\n    for i in range(1,n+1):\n        product *= i\n    return product\n    \n    \ndef fib(n):  \n    '''\n    Write a python function to calculate nth Fibonacci number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \n    \ndef fib(n):  \n    '''\n    Write a python function to calculate nth Fibonacci number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        print i\n    \n    \n    \ndef printList(a):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in a:\n        prin",
        "num_ids": 12
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x= n/m\n    print(x)\n",
        "num_ids": 15
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        return -1\n    else:\n        return n//m\n",
        "num_ids": 24
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return int(m/n)\n    else:\n        return int(n/m)\n",
        "num_ids": 31
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x = n / m\n    print x\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if n > 0:\n        if n/m < 0:\n            return -1\n        else:\n            return int(n/m)\n",
        "num_ids": 59
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2 == (w+h)*(w-h)*(w+h)*(w-h):\n        return (w+h)*2\n    return False\ndef rightangledtriangle(a,b,c):\n    '''\n    Write a function that returns true if a triangle can be formed with the given side lengths, and false otherwise.\n    '''\n    if a**2+b**2 == c**2:\n        return True\n    return False\ndef kangaroo(x1, v1, x2, v2):\n    '''\n    Write a function to find the first time when two kangaroos meet.\n    '''\n    if x1 == x2 and v1 == v2:\n        return True\n    if x1 < x2:\n        return x2 < x1+v2\n    return x1+v1 < x2\ndef reverse_str(s):\n    '''\n    Write a function that takes a string and returns a new string with the letters in reverse order.\n    '''\n    s = s[::-1]\n    return s\ndef reverse_str_2(s):\n    '''\n    Write a function that takes a string and returns a new string with the letters in reverse order.\n    '''\n    s = list(s)\n    return s[::-1]\ndef prime_summation(n):\n    '''\n    Write a function that returns the sum of all the primes below n.\n    '''\n    primes = []\n    if n < 2:\n        return 0\n    for i in range(2, n):\n        is_prime = True\n        for j in primes:\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return sum(primes)\ndef rotate_string(s,k):\n    '''\n    Write a function that takes in a string and a number of characters to rotate and returns the rotated string.\n    '''\n    if len(s) < 2:\n        return s\n    k = k%len(s)\n    s = list(s)\n    for i in range(k):\n        s.append(s.pop(0))\n    return ''.join(s)\ndef rotate_string_2(s,k):\n    '''\n    Write a function that takes in a string and a number of characters to rotate and returns the rotated string.\n    '''\n    if len(s) < 2:\n        return s\n    k = k%len(s)\n    s = list(s)\n    for i in range(k):\n        s.insert(0, s.pop())\n    return ''.join(s)\ndef sherlock_and_anagrams(s):\n    '''\n    Write a function that takes in a string and returns the number of anagrams of substrings of that string.\n    '''\n    anagrams = 0\n    if len(s) <= 2:\n        return 0\n    for i in range(len(s)):\n        s1 = list(s)\n        s1.pop(i)\n        s2 = ''.join(s1)\n        if s2 not in s:\n            continue\n        for j in range(len(s) - i):\n            s1 = list(s)\n            s1.pop(i)\n            s1.pop(i)\n            s1 = ''.join(s1)\n            if s1 not in s:\n                continue\n            else:\n                anagrams += 1\n    return anagrams\ndef sherlock_and_anagrams_2(s):\n    '''\n    Write a function that takes in a string and returns the number of anagrams of substrings of that string.\n    '''\n    if len(s) < 2:\n        return 0\n    anagrams = 0\n    s1 = list(s)\n    s1.sort()\n    for i in range(len(s)):\n        s1 = list(s)\n        s1.pop(i)\n        s2 = ''.join(s1)\n        if s2 not in s:\n            continue\n        for j in range(len(s) - i):\n            s1 = list(s)\n            s1.pop(i)\n            s1.pop(i)\n            s1 = ''.join(s1)\n            if s1 not in s:\n                continue\n            else:\n                anagrams += 1\n    return anagrams\ndef adjacent_pairs(s):\n    '''\n    Write a function that takes in a string and returns a new string with all adjacent pairs removed.\n    '''\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            s.pop(i)\n            s.pop(i)\n    return ''.join(s)\ndef shift_alphabet(s,n):\n    '''\n    Write a function that takes in a string and a number of letters to shift the alphabet by, and returns the new string.\n    '''\n    if len(s) < 2:\n        return s\n    n = n%len(s)\n    s = list(s)\n    for i in range(n):\n        s.append(s.pop(0))\n    return ''.join(s)\ndef super_reduced_string(s):\n    '''\n    Write a function that takes in a string and returns the super reduced string.\n    '''\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == s[-1]:\n            s.pop()\n            s.pop()\n    return ''.join(s)\ndef string_permutations(s):\n    '''\n    Write a function that takes in a string and returns all the permutations of that string.\n    '''\n    s = list(s)\n    if len(s) <= 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for j in string_permutations(s[:i] + s[i+1:]):\n            perms.append(s[i] + j)\n    return perms\ndef string_permutations_2(s):\n    '''\n    Write a function that takes in a string and returns all the permutations of that string.\n    '''\n    s = list(s)\n    if len(s) <= 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for j in string_permutations_2(s[:i] + s[i+1:]):\n            perms.append(s[i] + j)\n    return perms\ndef find_two_smallest(L):\n    '''\n    Write a function that takes in a list of integers and returns the indices of the two smallest integers in the list.\n    '''\n    s = sorted(L)\n    return [L.index(s[0]), L.index(s[1])]\ndef find_two_smallest_2(L):\n    '''\n    Write a function that takes in a list of integers and returns the indices of the two smallest integers in the list.\n    '''\n    s = sorted(L)\n    return [L.index(s[0]), L.index(s[1])]\ndef find_pair_of_rotated_digits(n):\n    '''\n    Write a function that takes in a number and returns the pair of integers that rotate the number to form the maximum possible.\n    '''\n    if len(str(n)) < 2:\n        return False\n    n = str(n)\n    n = list(n)\n    n.sort()\n    return [int(''.join(n[::-1])), int(''.join(n[::-2]))]\ndef find_pair_of_rotated_digits_2(n):\n    '''\n    Write a function that takes in a number and returns the pair of integers that rotate the number to form the maximum possible.\n    '''\n    if len(str(n)) < 2:\n        return False\n    n = str(n)\n    n = list(n)\n    n.sort()\n    for i in range(len(n) - 1):\n        if int(''.join(n[i:] + n[:i])) > n[0] + n[-1]:\n            return ",
        "num_ids": 87
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**(0.5)\ndef otherside_rightangle_solution(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**(0.5)\ndef main():\n    print '\\n(a) Checking that the other side of a right angled triangle is the correct answer'\n    for i in range(10):\n        w = int(random.random()*1000)\n        h = int(random.random()*1000)\n        print w,h,'\\t', otherside_rightangle(w,h), '\\t', otherside_rightangle_solution(w,h)\n    print '\\n'\n    print '\\n(b) Checking that the length of the hypotenuse is the correct answer'\n    for i in range(10):\n        a = int(random.random()*1000)\n        b = int(random.random()*1000)\n        print a,b,'\\t', math.hypot(a,b), '\\t', math.hypot_solution(a,b)\n    print '\\n'\n    print '\\n(c) Checking that the length of the hypotenuse is the correct answer'\n    for i in range(10):\n        a = int(random.random()*1000)\n        b = int(random.random()*1000)\n        print a,b,'\\t', otherside_rightangle(a,b), '\\t', otherside_rightangle_solution(a,b)\n",
        "num_ids": 322
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c=math.sqrt(w**2+h**2)\n    return c\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c=math.sqrt(w**2+h**2)\n    return c\n",
        "num_ids": 23
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hypo = math.sqrt(w**2+h**2)\n    return hypo\n",
        "num_ids": 25
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return int(math.sqrt(w**2 + h**2) * 0.5)\n",
        "num_ids": 25
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = (w**2 + h**2)**(1/2)\n    b = (a**2 - w**2)/2\n    c = math.sqrt(a**2 - b**2)\n    return a + b + c\n",
        "num_ids": 60
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s1 = math.sqrt(w**2+h**2)\n    return s1\n    \ndef otherside_acuteangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s1 = math.sqrt(w**2+h**2)\n    return s1\n    \ndef otherside_obtuseangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s1 = math.sqrt(w**2+h**2)\n    return s1\n",
        "num_ids": 25
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = 1/2*(w+h)\n    b = math.sqrt(c*c-w*w)\n    s = (b+w)/2\n    return s\n",
        "num_ids": 46
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return(h*h)\n    else:\n        return(w*w)\n",
        "num_ids": 29
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    maximum = listval[0]\n    for item in listval:\n        if item > maximum:\n            maximum = item\n    return maximum\n",
        "num_ids": 46
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for val in listval:\n        if isinstance(val,list):\n            return max_val(val)\n        else:\n            return val\n",
        "num_ids": 37
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval=val\n    return maxval\n    \ndef max_val_dic(dictval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous dictionary.\n    '''\n    maxval=dictval[list(dictval.keys())[0]]\n    for val in dictval:\n        if dictval[val] > maxval:\n            maxval=dictval[val]\n    return maxval\n",
        "num_ids": 55
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return False\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval,key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            divisors = divisors + divisor\n    return divisors\n",
        "num_ids": 52
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 0:\n        number = number * -1\n    \n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    \n    divisors = set(divisors)\n    return sum(divisors)\n",
        "num_ids": 79
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([x for x in range(1, number) if number % x == 0])\n",
        "num_ids": 24
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 1\n    for i in range(2, int(number/2)+1):\n        if number % i == 0:\n            divisors = divisors + i\n    return divisors\n",
        "num_ids": 52
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    div = 2\n    while div <= number:\n        if number % div == 0:\n            divisors.append(div)\n            divisors.append(number // div)\n        div += 1\n    return sum(divisors)\n",
        "num_ids": 66
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(divisors(number))\n",
        "num_ids": 13
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(2, number):\n        if number % i == 0:\n            total += i\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return len(arr) - count_inversion_util(arr, 0, len(arr))\n    \ndef count_inversion_util(arr, start, end):\n    if end == start:\n        return 0\n    \n    mid = (start+end)/2\n    inv_left = count_inversion_util(arr, start, mid)\n    inv_right = count_inversion_util(arr, mid+1, end)\n    \n    i, j = start, mid+1\n    temp_arr = []\n    \n    while i <= mid and j <= end:\n        if arr[i] < arr[j]:\n            temp_arr.append(arr[i])\n            i += 1\n        else:\n            temp_arr.append(arr[j])\n            j += 1\n            inv_left += (mid-i+1)\n    \n    while i <= mid:\n        temp_arr.append(arr[i])\n        i += 1\n    \n    while j <= end:\n        temp_arr.append(arr[j])\n        j += 1\n    \n    arr[start:end+1] = temp_arr[:]\n    return inv_left + inv_right\n    \ndef print_inv_count(arr):\n    print get_Inv_Count(arr)\n    \n    \narr = [3, 2, 1, 4, 5]\nprint_inv_count(arr)\n",
        "num_ids": 331
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return len(arr)-inv_count_helper(arr, 0, len(arr)-1)\n",
        "num_ids": 26
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count = Inv_Count + 1\n    return Inv_Count\n",
        "num_ids": 66
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n==1:\n        return 0, arr\n    else:\n        arr = sorted(arr)\n        i = 0\n        j = 0\n        k = 0\n        inv_count = 0\n        while i<n:\n            if arr[i]==i+1:\n                i = i+1\n            else:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count = inv_count + n - j\n                j = j + 1\n                i = i + 1\n        return inv_count, arr\n",
        "num_ids": 141
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n",
        "num_ids": 9
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Base Case\n    if len(arr) == 1:\n        return 0\n    else:\n        #Finding mid of the array\n        mid = len(arr)//2\n        #Splitting the array\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n        #Merging the array\n        sorted_arr = mergeSort(left_arr) + mergeSort(right_arr)\n        #Converting array into an array of tuples\n        return mergeCount(sorted_arr)\n",
        "num_ids": 123
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count \n",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if not arr:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return sum(x > y for x, y in zip(arr, arr[1:])) \n    \ndef is_sorted(arr): \n    '''\n    Write a python function to check if an array is sorted or not.\n    '''\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) \n",
        "num_ids": 31
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Recursive approach\n    if len(arr) <= 1:\n        return 0, arr\n    else:\n        m = len(arr)//2\n        m1, arr1 = get_Inv_Count(arr[:m])\n        m2, arr2 = get_Inv_Count(arr[m:])\n        result, merge = merge_Inv(arr1, arr2)\n        return (m1 + m2 + result, merge)\n",
        "num_ids": 106
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [a for item in list1 for a in item]\n",
        "num_ids": 17
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list1\n",
        "num_ids": 7
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return flatten_list_recur([], list1)\n",
        "num_ids": 17
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_ = []\n    for i in list1:\n        if type(i) == list:\n            list_ += flatten_list(i)\n        else:\n            list_.append(i)\n    return list_\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return reduce(lambda x, y: x + y, list1)\n",
        "num_ids": 19
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # base case\n    if not list1:\n        return list1\n    \n    # recursive case\n    else:\n        return list1 + flatten_list(list1[0])\n",
        "num_ids": 48
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in flatten_list(item):\n                yield subitem\n        else:\n            yield item\n",
        "num_ids": 48
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(list1, [])\n",
        "num_ids": 12
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for elem in list1:\n        if isinstance(elem, list):\n            flat_list.extend(flatten_list(elem))\n        else:\n            flat_list.append(elem)\n    return flat_list\n",
        "num_ids": 67
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for s, e, val in stdata:\n        d[s] += val\n        d[e] -= val\n    return max(d.values())\n",
        "num_ids": 48
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    for line in stdata:\n        if line[0]=='*':\n            if line[2] in aggregate_dict:\n                aggregate_dict[line[2]] += int(line[3])\n            else:\n                aggregate_dict[line[2]] = int(line[3])\n        else:\n            if line[2] in aggregate_dict:\n                aggregate_dict[line[2]] += int(line[3])\n            else:\n                aggregate_dict[line[2]] = int(line[3])\n    return aggregate_dict\n",
        "num_ids": 147
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(float)\n    for t in stdata:\n        for k,v in t:\n            aggregate[k] = aggregate.get(k,0) + v\n    return aggregate\n",
        "num_ids": 51
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d={}\n    for item in stdata:\n        for x in item:\n            if d.has_key(x):\n                d[x]+=1\n            else:\n                d[x]=1\n    return d\n",
        "num_ids": 56
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for tup in stdata:\n        val = sum(tup)\n        if val > max_agg:\n            max_agg = val\n    return max_agg\n",
        "num_ids": 49
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = [d[0] for d in stdata]\n    return max(data)\n",
        "num_ids": 24
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = []\n    for i in stdata:\n        data.append(i[1])\n    print(data)\n    return max(data)\n",
        "num_ids": 38
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    x = list(stdata)\n    y = sorted(x, key = lambda t: t[2], reverse = True)\n    aggregate = sum(i[2] for i in y)\n    return aggregate\n",
        "num_ids": 52
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    f = defaultdict(int)\n    for i in stdata:\n        f[i[0]] += int(i[1])\n    print f\n    return max(f.values())\n",
        "num_ids": 47
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    ret = defaultdict(lambda : 0)\n    for s in stdata:\n        ret[s[0]] += s[1]\n    return max(ret.values())\n",
        "num_ids": 43
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    count = 0\n    if n > 1:\n        count += count_binary_seq(n-1)\n    if n > 2:\n        count += count_binary_seq(n-2)\n    if n > 3:\n        count += count_binary_seq(n-3)\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    total = 0\n    for i in xrange(2**(n+1)):\n        if i & (i+1) == i+1:\n            total += 1\n    return total\n",
        "num_ids": 58
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2 ** n\n",
        "num_ids": 8
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    n = n/2\n    if n%2 == 1:\n        count = count + 1\n    for i in range(2,n+1):\n        if n%i == 0:\n            count = count + 2*(n/i)\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        j = 1\n        while j <= n:\n            if (i+j) == (n+i):\n                count += 1\n            j += 1\n        i += 1\n",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    count = 0\n    for i in xrange(2, n+1):\n        count += count_binary_seq(i-1) * (2*i-1)\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 1\n    if n < 0:\n        return 0\n    else:\n        res += count_binary_seq(n-1)\n        if n == 0:\n            res += 1\n        else:\n            res += count_binary_seq(n-2)\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if bin(i).count('1') == 2*n:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_bits_sequences(n, bit): \n        '''\n        Returns the number of 2n bit sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        if bit == 1:\n            return 1\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        return count_bits_sequences(n-1, bit) + count_bits_sequences(n-2, bit)\n    return count_bits_sequences(n, 1)\n    \n",
        "num_ids": 81
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        else:\n            depth = max(depth, 1)\n    return depth\n",
        "num_ids": 62
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([dict_depth(val) + 1 if isinstance(val, dict) else 1 for val in d.values()])\n",
        "num_ids": 33
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if type(d[key]) is dict:\n            depth = max(depth,1 + dict_depth(d[key]))\n    return depth\n",
        "num_ids": 49
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(map(dict_depth, d.values())) if d else 0\n",
        "num_ids": 24
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.values()) if d else 0)\n    return 0\n",
        "num_ids": 42
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max([dict_depth(v) for v in d.values()] + [0]) + 1\n",
        "num_ids": 42
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if ranges[i] == index :\n            if rotations[i] == 0 :\n                return arr[i]\n            else :\n                return find_Element(arr,ranges,rotations,index-rotations[i])\n",
        "num_ids": 70
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (arr == []) :\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ranges[index] = (ranges[index]+rotations)%len(arr)\n    return arr[ranges[index]]\n",
        "num_ids": 34
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(arr) :\n        return None\n    \n    return arr[rotations[index]-1]\n",
        "num_ids": 30
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    result = arr[index]\n    rotation = ranges[index]\n    # print(rotation)\n    \n    for i in range(rotation) :\n        result = result + rotations[i]\n        # print(result)\n    \n    return result\n",
        "num_ids": 64
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left,right = ranges[index]\n    pivot = arr[left]\n    while left <= right :\n        while arr[left] <= pivot and left <= right :\n            left = left+1\n        while arr[right] >= pivot and left <= right :\n            right = right-1\n        if left <= right :\n            arr[left],arr[right] = arr[right],arr[left]\n    arr[left],arr[index] = arr[index],arr[left]\n    if left < index :\n        return find_Element(arr,ranges,rotations,left)\n    elif left > index :\n        return find_Element(arr,ranges,rotations,right)\n    else :\n        return arr[index]\ndef main() :\n    rotations = int(input(\"Enter no of rotations:\"))\n    arr = list(map(int,input(\"Enter the elements:\").split()))\n    ranges = [i for i in range(len(arr))]\n    print(\"Elements after rotations:\",*find_Element(arr,ranges,rotations,0))\nmain()",
        "num_ids": 261
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #rotate the given array by rotations times\n    for i in range(rotations) :\n        arr = rotate(arr)\n",
        "num_ids": 33
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        if i%rotations == ranges[index]:\n            return arr[i]\n",
        "num_ids": 35
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if index == len(rotations) :\n        return arr[rotations[0]-1]\n    \n    else :\n        temp = rotations[index+1] - rotations[index]\n        if temp < 0 :\n            temp += len(ranges)\n        return arr[temp-1]\n",
        "num_ids": 75
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations % len(arr)\n    for i in range(rotations) :\n        index += 1\n    return arr[index % len(arr)]\n    \ndef find_Element_binary(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations % len(arr)\n    for i in range(rotations) :\n        index = (index + 1) % len(arr)\n    return arr[index]\n",
        "num_ids": 46
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not words:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for word in words:\n            if word[0] == 'p' and word[1] == 'p':\n                #append it to the output list\n                output.append(word)\n        return output\n    except:\n        raise\ndef start_withp_without_return(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not words:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for word in words:\n            if word[0] == 'p' and word[1] == 'p':\n                #append it to the output list\n                output.append(word)\n        return output\n    except:\n        raise\ndef start_with(words,letter):\n    '''\n    Write a function to return a list of words that start with a particular letter.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not words:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for word in words:\n            if word[0] == letter:\n                #append it to the output list\n                output.append(word)\n        return output\n    except:\n        raise\ndef start_with_without_return(words,letter):\n    '''\n    Write a function to return a list of words that start with a particular letter.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not words:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for word in words:\n            if word[0] == letter:\n                #append it to the output list\n                output.append(word)\n        return output\n    except:\n        raise\ndef vowel_count(string):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef vowel_count_without_return(string):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef consonant_count(string):\n    '''\n    Write a function to count the number of consonants.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter not in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef consonant_count_without_return(string):\n    '''\n    Write a function to count the number of consonants.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter not in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef vowel_count_end(string):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef vowel_count_end_without_return(string):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef consonant_count_end(string):\n    '''\n    Write a function to count the number of consonants.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter not in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef consonant_count_end_without_return(string):\n    '''\n    Write a function to count the number of consonants.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter not in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef count_vowel_vowel_pair(string):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef count_vowel_vowel_pair_without_return(string):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef count_vowel_consonant_pair(string):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            if letter not in 'aeiou':\n                output.append(letter)\n        return len(output)\n    except:\n        raise\ndef count_vowel_consonant_pair_without_return(string):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    try:\n        #2. if list is empty return empty list\n        if not string:\n            return []\n        #3. create a list for the output\n        output = []\n        #4. iterate through the list\n        for letter in string:\n            i",
        "num_ids": 63
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    r = []\n    for word in words:\n        if word[0]=='p':\n            r.append(word)\n    return r\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern=r'^p.+'\n    res=re.findall(pattern,words)\n    return res\n",
        "num_ids": 30
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match('^p', word):\n            p_words.append(word)\n    return p_words\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word[0] == 'p']\n",
        "num_ids": 20
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return list(filter(lambda word: word[0]=='p',words))\n",
        "num_ids": 22
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [x for x in words if x.startswith('p')]\n",
        "num_ids": 21
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith('p'):\n            return i\n            break\n",
        "num_ids": 28
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = '^p.*'\n    return [match for match in words if re.match(pattern, match)]\n",
        "num_ids": 29
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    # use k as pointer and modify kth index element\n    # and recurse for remaining array elements\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1))\n    \n",
        "num_ids": 90
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    res = a[index]\n    if index + k < n:\n        res = max(res, max_sum_increasing_subseq(a, n, index + 1, k) + a[index + k])\n    res = max(res, max_sum_increasing_subseq(a, n, index + 1, k))\n    return res\n",
        "num_ids": 95
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n - 1:\n        return 0\n    elif k == n - 1:\n        return a[k]\n    elif k == 0:\n        return 0\n",
        "num_ids": 44
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    if a[index] > k:\n        return k\n    curr_k = k + a[index]\n    if curr_k > a[index]:\n        return max_sum_increasing_subseq(a, n, index+1, curr_k)\n    return max(curr_k, max_sum_increasing_subseq(a, n, index+1, curr_k), max_sum_increasing_subseq(a, n, index+1, k))\n    \ndef max_sum_increasing_subseq_with_limit(a, n, index, k, limit):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return k\n    if a[index] > k:\n        return k\n    curr_k = k + a[index]\n    if curr_k > a[index]:\n        return max_sum_increasing_subseq_with_limit(a, n, index+1, curr_k, limit)\n    elif limit <= curr_k:\n        return max_sum_increasing_subseq_with_limit(a, n, index+1, limit, curr_k)\n    return max(curr_k, max_sum_increasing_subseq_with_limit(a, n, index+1, curr_k, limit), max_sum_increasing_subseq_with_limit(a, n, index+1, k, limit))\n    \ndef max_sum_increasing_subseq_with_limit_and_prices(a, n, index, k, limit, prices):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return k\n    if a[index] > k:\n        return k\n    curr_k = k + a[index]\n    if curr_k > a[index]:\n        return max_sum_increasing_subseq_with_limit_and_prices(a, n, index+1, curr_k, limit, prices)\n    elif limit <= curr_k:\n        return max_sum_increasing_subseq_with_limit_and_prices(a, n, index+1, limit, curr_k, prices)\n    return max(curr_k, max_sum_increasing_subseq_with_limit_and_prices(a, n, index+1, curr_k, limit, prices), max_sum_increasing_subseq_with_limit_and_prices(a, n, index+1, k, limit, prices))\n    \ndef max_sum_increasing_subseq_with_prices(a, n, index, k, limit, prices):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return k\n    if a[index] > k:\n        return k\n    curr_k = k + a[index]\n    if curr_k > a[index]:\n        return max_sum_increasing_subseq_with_prices(a, n, index+1, curr_k, limit, prices)\n    elif limit <= curr_k:\n        return max_sum_increasing_subseq_with_prices(a, n, index+1, limit, curr_k, prices)\n    return max(curr_k, max_sum_increasing_subseq_with_prices(a, n, index+1, curr_k, limit, prices), max_sum_increasing_subseq_with_prices(a, n, index+1, k, limit, prices))\n    \ndef max_sum_increasing_subseq_with_prices_and_limit(a, n, index, k, limit, prices):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return k\n    if a[index] > k:\n        return k\n    curr_k = k + a[index]\n    if curr_k > a[index]:\n        return max_sum_increasing_subseq_with_prices_and_limit(a, n, index+1, curr_k, limit, prices)\n    elif limit <= curr_k:\n        return max_sum_increasing_subseq_with_prices_and_limit(a, n, index+1, limit, curr_k, prices)\n    return max(curr_k, max_sum_increasing_subseq_with_prices_and_limit(a, n, index+1, curr_k, limit, prices), max_sum_increasing_subseq_with_prices_and_limit(a, n, index+1, k, limit, prices))\n    \ndef max_sum_increasing_subseq_with_prices_and_limit_and_index(a, n, index, k, limit, prices, index_of_prices):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return k\n    if a[index] > k:\n        return k\n    curr_k = k + a[index]\n    if curr_k > a[index]:\n        return max_sum_increasing_subseq_with_prices_and_limit_and_index(a, n, index+1, curr_k, limit, prices, index_of_prices)\n    elif limit <= curr_k:\n        return max_sum_increasing_subseq_with_prices_and_limit_and_index(a, n, index+1, limit, curr_k, prices, index_of_prices)\n    return max(curr_k, max_sum_increasing_subseq_with_prices_and_limit_and_index(a, n, index+1, curr_k, limit, prices, index_of_prices), max_sum_increasing_subseq_with_prices_and_limit_and_index(a, n, index+1, k, limit, prices, index_of_prices))\n    \ndef max_sum_increasing_subseq_with_prices_and_limit_and_index_and_limit(a, n, index, k, limit, prices, index_of_prices, limit_of_prices):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return k\n    if a[index] > k:\n        return k\n    curr_k = k + a[index]\n    if curr_k > a[index]:\n        return max_sum_increasing_subseq_with_prices_and_limit_and_index_and_limit(a, n, index+1, curr_k, limit, prices, index_of_prices, limit_of_prices)\n    elif limit <= curr_k:\n        return max_sum_increasing_subseq_with_prices_and_limit_and_index_and_limit(a, n, index+1, limit, curr_k, prices, index_of_prices, limit_of_prices)\n    return max(curr_k, max_sum_increasing_subseq_with_prices_and_limit_and_index_and_limit(a, n, index+1, curr_k, limit, prices, index_of_prices, limit_of_prices), max_sum_increasing_subseq_with_prices_and_limi",
        "num_ids": 267
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # If k = 0, then we are looking for a sum of increasing subsequence which starts from 0th index and includes ith element, i.e., k = 0\n",
        "num_ids": 40
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if (k < n - index):\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1))\n",
        "num_ids": 95
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # we need to make a copy of a, since we will update a\n    copy_of_a = [0] * n\n",
        "num_ids": 32
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if index == 0:\n        return a[index]\n    else:\n        result = a[index]\n        for i in range(1, index):\n            if a[i] > a[index] and a[i] + max_sum_increasing_subseq(a, n, i, k) > result:\n                result = a[i] + max_sum_increasing_subseq(a, n, i, k)\n        if k > index:\n            return result\n        else:\n            return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index, k+1))\n",
        "num_ids": 172
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == index:\n        return a[k]\n    if (n[index] == -1):\n        return 0\n    a[index] = max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n    return a[index]\n",
        "num_ids": 98
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return tuplex[0]\n    return tuplex[m-1:n]\ndef check_list_in_list(a,b):\n    '''\n    Write a function to check if a list is contained in another list.\n    '''\n    for i in a:\n        if i in b:\n            return True\n    return False\ndef double_e(n):\n    '''\n    Write a function to check if an integer is even or odd.\n    '''\n    if n%2 == 0:\n        return True\n    return False\ndef has_duplicates(seq):\n    '''\n    Write a function to check if a sequence has duplicate elements.\n    '''\n    seen = set()\n    seen_add = seen.add\n    for element in seq:\n        if element in seen:\n            return True\n        seen_add(element)\n    return False\ndef duplicate_count(seq):\n    '''\n    Write a function to count the number of duplicate elements in a sequence.\n    '''\n    counts = {}\n    for i in seq:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\ndef duplicate_count(seq):\n    '''\n    Write a function to count the number of duplicate elements in a sequence.\n    '''\n    counts = {}\n    for i in seq:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\ndef find_duplicates(seq):\n    '''\n    Write a function to return all the duplicated elements in a sequence.\n    '''\n    seen = set()\n    duplicate = []\n    for i in seq:\n        if i in seen:\n            duplicate.append(i)\n        else:\n            seen.add(i)\n    return duplicate\ndef histogram(s):\n    '''\n    Write a function to return a histogram of a string\n    '''\n    d = dict()\n    for c in s:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    return d\ndef histogram(s):\n    '''\n    Write a function to return a histogram of a string\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    return d\ndef is_anagram(s1,s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    d = dict()\n    for c in s1:\n        d[c] = d.get(c,0) + 1\n    for c in s2:\n        d[c] = d.get(c,0) - 1\n    for k in d.keys():\n        if d[k]!= 0:\n            return False\n    return True\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function to get all the anagrams of a string.\n    '''\n    d = dict()\n    for c in s:\n        d[c] = d.get(c,0) + 1\n    ret = []\n    for k in d.keys():\n        if d[k] > 1:\n            ret.append(k)\n    return ret\ndef anagrams(s):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==1:\n        return tuplex[n-1]\n    else:\n        return tuplex[n-1:]\n",
        "num_ids": 35
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=(tuplex[i][j] for i in range(m) for j in range(n) if i!=j)\n    return tuplex\n",
        "num_ids": 42
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<1 or n<1:\n        return None\n    return tuplex[m-1][n-1]\n",
        "num_ids": 32
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    print \":\".join(tuplex[m:n])\n",
        "num_ids": 18
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n",
        "num_ids": 13
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>=0 and n>=0:\n        return tuplex[m:n+1]\n    elif m>=0:\n        return tuplex[m:]\n    else:\n        return tuplex[:n+1]\n",
        "num_ids": 62
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    assert type(tuplex)==tuple\n    assert len(tuplex)==2\n    assert type(m)==int\n    assert type(n)==int\n    assert m>=0\n    assert n>=0\n    if m==n:\n        return tuplex\n    elif m>n:\n        tuplex=tuplex[:n]+tuplex[n-1:]+tuplex[:m-1]+tuplex[m:]\n        return tuplex\n    else:\n        tuplex=tuplex[:m]+tuplex[m+1:]+tuplex[m-1:n]+tuplex[n-1:]\n        return tuplex\ndef del_all_k(lst,k):\n    '''\n    Write a function to delete all instances of k from a list.\n    '''\n    assert type(lst)==list\n    assert type(k)==int\n    i=0\n    while i<len(lst):\n        if lst[i]==k:\n            lst.remove(lst[i])\n        else:\n            i+=1\n    return lst\ndef min_dup(lst):\n    '''\n    Write a function to find the minimal value that occurs more than once in a list.\n    '''\n    assert type(lst)==list\n    assert len(lst)>=1\n    m=lst[0]\n    for i in lst:\n        if lst.count(i)>lst.count(m):\n            m=i\n    return m\ndef min_dup_by_second_occurence(lst):\n    '''\n    Write a function to find the minimal value that occurs more than once in a list and by its second occurrence.\n    '''\n    assert type(lst)==list\n    assert len(lst)>=1\n    m=lst[0]\n    for i in lst:\n        if lst.count(i)>lst.count(m) and lst.index(i)!=lst.index(m):\n            m=i\n    return m\ndef is_lst_palindromic(lst):\n    '''\n    Write a function to check whether a list is palindromic or not.\n    '''\n    assert type(lst)==list\n    assert len(lst)>=1\n    if len(lst)==1:\n        return True\n    if lst[0]==lst[-1]:\n        return is_lst_palindromic(lst[1:-1])\n    else:\n        return False\ndef substring(s,m):\n    '''\n    Write a function to find a substring.\n    '''\n    assert type(s)==str\n    assert type(m)==str\n    assert len(m)>0\n    if s.find(m)==-1:\n        return s\n    else:\n        return substring(s[s.find(m)+len(m):],m)\ndef substring_by_second_occurence(s,m):\n    '''\n    Write a function to find a substring.\n    '''\n    assert type(s)==str\n    assert type(m)==str\n    assert len(m)>0\n    i=s.find(m)\n    if i==-1:\n        return s\n    else:\n        return substring_by_second_occurence(s[i+len(m):],m)\ndef sort_tuplex(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    assert type(tuplex)==tuple\n    assert len(tuplex)>=1\n    return tuple(sorted(tuplex))\ndef sort_tuplex_by_second_occurence(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    assert type(tuplex)==tuple\n    assert len(tuplex)>=1\n    return tuple(sorted(tuplex,key=lambda x:x[1]))\ndef jtuplex_dict(tuplex,dict,m,n):\n    '''\n    Write a function to get a dictionary value of a tuple.\n    '''\n    assert type(tuplex)==tuple\n    assert len(tuplex)==2\n    assert type(dict)==dict\n    assert type(m)==int\n    assert type(n)==int\n    assert m>=0\n    assert n>=0\n    if m==n:\n        return dict[tuplex]\n    elif m>n:\n        return jtuplex_dict(tuplex[:n]+tuplex[n-1:],dict,m,n)\n    else:\n        return jtuplex_dict(tuplex[:m]+tuplex[m+1:],dict,m,n)\ndef get_tuplex_values(tuplex,dict,m,n):\n    '''\n    Write a function to get a tuple value of a dictionary.\n    '''\n    assert type(tuplex)==tuple\n    assert len(tuplex)==2\n    assert type(dict)==dict\n    assert type(m)==int\n    assert type(n)==int\n    assert m>=0\n    assert n>=0\n    if m==n:\n        return dict[tuplex]\n    elif m>n:\n        return get_tuplex_values(tuplex[:n]+tuplex[n-1:],dict,m,n)\n    else:\n        return get_tuplex_values(tuplex[:m]+tuplex[m+1:],dict,m,n)\ndef get_tuplex_keys(tuplex,dict,m,n):\n    '''\n    Write a function to get a tuple key of a dictionary.\n    '''\n    assert type(tuplex)==tuple\n    assert len(tuplex)==2\n    assert type(dict)==dict\n    assert type(m)==int\n    assert type(n)==int\n    assert m>=0\n    assert n>=0\n    if m==n:\n        return dict.keys()[tuplex]\n    elif m>n:\n        return get_tuplex_keys(tuplex[:n]+tuplex[n-1:],dict,m,n)\n    else:\n        return get_tuplex_keys(tuplex[:m]+tuplex[m+1:],dict,m,n)\ndef list_of_lists(lst):\n    '''\n    Write a function to get a list of lists from a list of values.\n    '''\n    assert type(lst)==list\n    assert len(lst)>=1\n    list_of_lists=[]\n    while lst:\n        list_of_lists.append(lst[:len(lst)//2])\n        lst=lst[len(lst)//2:]\n    return list_of_lists\ndef list_of_lists_with_second_occurence(lst):\n    '''\n    Write a function to get a list of lists from a list of values.\n    '''\n    assert type(lst)==list\n    assert len(lst)>=1\n    list_of_lists=[]\n    while lst:\n        list_of_lists.append(lst[:len(lst)//2])\n        i=len(lst)//2\n        while i>0:\n            if lst[i]==lst[i-1]:\n                del lst[i-1]\n            else:\n                i-=1\n        lst=lst[len(lst)//2:]\n    return list_of_lists\ndef sort_list_of_lists(lst):\n    '''\n    Write a function to sort a list of lists.\n    '''\n    assert type(lst)==list\n    assert len(lst)>=1\n    for i in range(len(lst)):\n        for j in range(len(lst)-1-i):\n            if lst[j][0]>lst[j+1][0]:\n                lst[j],lst[j+1]",
        "num_ids": 85
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst=[]\n    for i in range(m,n+1):\n        lst.append(tuplex[i])\n    return tuple(lst)\n",
        "num_ids": 42
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    \n    if m==1:\n        return tuplex[n-1]\n    else:\n        return tuplex[n-1][m-1]\n",
        "num_ids": 43
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not isinstance(nums1, list) or not isinstance(nums2, list):\n        return False\n    if not isinstance(N, int) or N < 1:\n        return False\n    if N > len(nums1) or N > len(nums2):\n        return False\n    # for each of the N largest products, find the product of the two factors\n    products = []\n    for i in range(0, N):\n        product = None\n        factor1 = None\n        factor2 = None\n        for factor1 in nums1:\n            for factor2 in nums2:\n                if factor1 > factor2:\n                    product = factor1 * factor2\n                    products.append(product)\n    # return the largest product\n    return max(products)\n",
        "num_ids": 185
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return None\n    if N > len(nums1) * len(nums2):\n        return None\n    \n    products = []\n    for i in range(N):\n        products.append(max(nums1[i] * nums2[i], nums2[i] * nums1[i]))\n    return products\n",
        "num_ids": 96
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for n in xrange(N):\n        products.append(nums1[n] * nums2[n])\n    return max(products)\n",
        "num_ids": 43
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def multiply(a, b):\n        return a*b\n    max_product = 0\n    for i in range(N):\n        for j in range(N):\n            product = multiply(nums1[i], nums2[j])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 82
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in range(N):\n        tmp = 0\n        for j in range(len(nums1)):\n            tmp = tmp * nums1[j]\n        for k in range(len(nums2)):\n            tmp = tmp * nums2[k]\n        res.append(tmp)\n    return res\n",
        "num_ids": 85
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    first_list = sorted(nums1)\n    second_list = sorted(nums2)\n",
        "num_ids": 26
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import operator\n    def find_largest_product(a, b):\n        for i in range(len(b)):\n            for j in range(len(a)):\n                if b[i] <= a[j]:\n                    break\n            if j == len(a) - 1:\n                return b[i] * a[j]\n        return 1\n    product = 1\n    for num in nums1:\n        product = max(product, num * nums2[0])\n    product = max(product, nums1[0] * nums2[0])\n    for i in range(1, N):\n        product = max(product, find_largest_product(nums1, nums2[i:]))\n    return product\n",
        "num_ids": 177
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return -1\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if l1 == 0 or l2 == 0:\n        return -1\n    if l1 < N or l2 < N:\n        N = max(l1, l2)\n    res = [0] * N\n    for i in range(N):\n        x = nums1[i % l1]\n        y = nums2[i % l2]\n        if x > y:\n            res[i] = x\n        else:\n            res[i] = y\n    return res\n",
        "num_ids": 160
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import numpy as np\n    products = np.zeros(N)\n    for i in range(N):\n        for j in range(N):\n            products[i] = max(products[i], np.product(nums1[i:i+j+1]))\n            products[i] = max(products[i], np.product(nums2[i:i+j+1]))\n",
        "num_ids": 98
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N:\n        return large_product(nums2, nums1, N)\n    elif len(nums2) < N:\n        return large_product(nums1, nums2, N)\n    else:\n        return max(large_product(nums1, nums2[1:], N), large_product(nums1[1:], nums2, N), large_product(nums1[1:], nums2[1:], N))\n",
        "num_ids": 124
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a==b:\n        return a\n    else:\n        return b\n",
        "num_ids": 33
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    elif a == b:\n        return 'a'\n    else:\n        return 'Unable to calculate'\n        \nprint maximum(5,6)\nprint maximum(5,3)\nprint maximum(5,5)\nprint maximum(5,2)\nprint maximum(5,1)\nprint maximum(5,0)\nprint maximum(5,-2)\nprint maximum(5,-5)\nprint maximum(5,-6)\nprint maximum(5,-3)\nprint maximum(5,5.0)",
        "num_ids": 143
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = []\n    for i in str1:\n        l.append(i)\n    return tuple(l)\n",
        "num_ids": 30
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = list(str1)\n    l.sort()\n    t = tuple(l)\n    return t\n",
        "num_ids": 29
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list = []\n    for c in str1:\n        str_list.append(c)\n    return tuple(str_list)\n",
        "num_ids": 36
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tpl = ()\n    for c in str1:\n        tpl += (c, )\n    return tpl\n",
        "num_ids": 30
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a tuple of characters to a given string.\n    '''\n    return ''.join(tuple1)\n",
        "num_ids": 13
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = ()\n    for i in range(len(str1)):\n        tuple1 += (str1[i],)\n    return tuple1\n",
        "num_ids": 40
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code goes here\n    return list(str1)\n",
        "num_ids": 17
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = ()\n    for i in range(len(str1)):\n        tuple1 = tuple1 + (str1[i],)\n    return tuple1\n",
        "num_ids": 43
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (n - 1) \n    n = n ^ (n - 1) \n    return n \n",
        "num_ids": 31
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        n = n & 0xffffffff\n    return n\n",
        "num_ids": 23
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    m = n\n    if(m&1 == 1):\n        m = m-1\n        m = m|1\n    return m\n",
        "num_ids": 35
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n > 0:\n        n &= (n-1)\n        count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize result \n    n = n & (~n + 1) \n",
        "num_ids": 21
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (n-1)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        n = -n\n    set = 0\n    i = 0\n    while (2**i <= n):\n        if (n & (2**i)) == 0:\n            set = set + 2**i\n        i += 1\n    n = n + 1 - set\n    return n\n",
        "num_ids": 76
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # number of leading zeros = number of set bits\n    n |= (1 << (size - 1))\n    return n\n",
        "num_ids": 32
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n & 1 == 0:\n        n >>= 1\n        count += 1\n    n |= 1 << count\n    return n\n",
        "num_ids": 39
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= (n & (n - 1)) << 1\n    n |= (n & (n - 1)) >> 1\n    n |= (n & (n - 1)) >> 2\n    n |= (n & (n - 1)) >> 4\n    n |= (n & (n - 1)) >> 8\n    n |= (n & (n - 1)) >> 16\n    n |= (n & (n - 1)) >> 32\n    return n\n",
        "num_ids": 111
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    v=pi*r**2*h/3\n    return v\n",
        "num_ids": 26
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3)\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * (r**2) * h\n    return V\n",
        "num_ids": 27
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return ((math.pi*r**2)*(h/3))\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.1415926*r*r*h/3\ndef volume_cone_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 3.1415926*r*r*h/3\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 3.1415926*r*r+math.pi*math.pow(r,2)*2+math.pi*r*h\ndef surface_cone_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 3.1415926*r*r+math.pi*math.pow(r,2)*2+math.pi*r*h\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*math.pow(r,2)\ndef surface_sphere_py(r):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4*math.pi*math.pow(r,2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)\ndef volume_sphere_py(r):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 3.1415926*r*r*h\ndef volume_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 3.1415926*r*r*h\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.1415926*r*r+2*3.1415926*r*h+2*math.pi*r*r\ndef surface_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*3.1415926*r*r+2*3.1415926*r*h+2*math.pi*r*r\ndef volume_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder inside a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef volume_sphere_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef volume_cylinder_in_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cylinder.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef volume_cylinder_in_sphere_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef volume_cone_in_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cone.\n    '''\n    return math.pi*math.pow(r,2)*h\ndef volume_cone_in_sphere_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return math.pi*math.pow(r,2)*h\ndef volume_sphere_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef surface_cone_in_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder inside a cone.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h+2*math.pi*math.pow(r,2)*h\ndef surface_cone_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h+2*math.pi*math.pow(r,2)*h\ndef volume_cone_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef surface_cylinder_in_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone inside a cylinder.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h+2*math.pi*math.pow(r,2)*h\ndef surface_cylinder_in_cone_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*math.pi*r*r+2*math.pi*r*h+2*math.pi*math.pow(r,2)*h\ndef volume_cone_in_sphere_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef volume_cone_in_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cone.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef volume_cylinder_in_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder inside a cone.\n    '''\n    return 4/3*math.pi*math.pow(r,2)*h\ndef surface_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder inside a sphere.\n    '''\n    return 2*3.1415926*r*r+2*3.1415926*r*h+2*math.pi*r*r\ndef surface_sphere_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*3.1415926*r*r+2*3.1415926*r*h+2*math.pi*r*r\ndef surface_sphere_in_cone(r):\n    '''\n    Write a function to find the surface area of a cone inside a sphere.\n    '''\n    return 2*math.pi*math.pow(r,2)\ndef surface_sphere_in_cone_py(r):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 2*math.pi*math.pow(r,2)\ndef volume_sphere_in_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere inside a cylinder.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef volume_sphere_in_cylinder_py(r,h):\n    '''\n    Implement this function using the python built-in function.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*h\ndef surface_cylinder_in_sphere(r,h):\n",
        "num_ids": 39
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(math.pi*r*r*h/3)\n    return math.pi*r*r*h/3\n",
        "num_ids": 32
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r**2) / 3 * h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 / 3) * math.pi * r**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r * h\ndef volume_tetrahedron(s):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (4 / 3) * math.sqrt(3) * s**3\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parellelpeiped.\n    '''\n    return a * b * c\ndef volume_conical_frustum(r,h,a):\n    '''\n    Write a function to find the volume of a conical frustum.\n    '''\n    return (math.pi * r**2) / 3 * h - (math.pi * r**2) / 3 * a\ndef volume_conical_cylinder(r,h,a):\n    '''\n    Write a function to find the volume of a conical cylinder.\n    '''\n    return r * h - (r * h) / 2 * a\ndef volume_conical_sphere(r,h,a):\n    '''\n    Write a function to find the volume of a conical sphere.\n    '''\n    return (4 / 3) * math.pi * r**2 - (4 / 3) * math.pi * r**2 / 3 * h + (4 / 3) * math.pi * r**2 / 3 * a\ndef volume_conical_ellipsoid(r,h,a):\n    '''\n    Write a function to find the volume of a conical ellipsoid.\n    '''\n    return (4 / 3) * math.pi * r**2 - (4 / 3) * math.pi * r**2 / 3 * h - (4 / 3) * math.pi * r**2 / 3 * a\ndef volume_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return a * b\ndef volume_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a * b * c\ndef volume_annulus(a,b):\n    '''\n    Write a function to find the volume of an annulus.\n    '''\n    return math.pi * (a**2 - b**2)\ndef volume_prism(a,b,c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a * b * c\ndef volume_icosahedron(s):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return (5 * math.sqrt(5) - 5) / 12 * s**3\ndef volume_octahedron(s):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return (2 * math.sqrt(2) - 2) / 12 * s**3\ndef volume_dodecahedron(s):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (3 * math.sqrt(6) - 3) / 12 * s**3\ndef volume_icosidodecahedron(s):\n    '''\n    Write a function to find the volume of a icosidodecahedron.\n    '''\n    return (5 * math.sqrt(5) - 5) / 12 * s**3\ndef volume_tetrahedron(s):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (4 / 3) * math.sqrt(3) * s**3\ndef volume_icosatetrahedron(s):\n    '''\n    Write a function to find the volume of a icosatetrahedron.\n    '''\n    return (5 * math.sqrt(5) - 5) / 12 * s**3\ndef volume_tetrahedral_pyramid(s,h):\n    '''\n    Write a function to find the volume of a tetrahedral pyramid.\n    '''\n    return (s / 2) * h\ndef volume_icosatetrahedral_pyramid(s,h):\n    '''\n    Write a function to find the volume of a icosatetrahedral pyramid.\n    '''\n    return (s / 2) * h\ndef volume_rhombicuboctahedron(a,b,c):\n    '''\n    Write a function to find the volume of a rhombicuboctahedron.\n    '''\n    return (a * b * c) / 2\ndef volume_octahedral_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a octahedral pyramid.\n    '''\n    return (a * b * c) / 2\ndef volume_icosatetrahedral_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a icosatetrahedral pyramid.\n    '''\n    return (a * b * c) / 2\ndef volume_dodecagonal_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a dodecagonal pyramid.\n    '''\n    return (a * b * c) / math.sqrt(2)\ndef volume_icosidodecagonal_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a icosidodecagonal pyramid.\n    '''\n    return (a * b * c) / math.sqrt(2)\ndef volume_truncated_octahedral_pyramid(a,b,c,d):\n    '''\n    Write a function to find the volume of a truncated octahedral pyramid.\n    '''\n    return (a * b * c) / 2 - (a * b * d) / 2\ndef volume_truncated_icosidodecagonal_pyramid(a,b,c,d):\n    '''\n    Write a function to find the volume of a truncated icosidodecagonal pyramid.\n    '''\n    return (a * b * c) / 2 - (a * b * d) / 2\ndef volume_truncated_icosatetrahedral_pyramid(a,b,c,d):\n    '''\n    Write a function to find the volume of a truncated icosatetrahedral pyramid.\n    '''\n    return (a * b * c) / 2 - (a * b * d) / 2\ndef volume_triangular_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a triangular pyramid.\n    '''\n    return (a * b * c) / 2\ndef volume_tetrahedral_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a tetrahedral pyramid.\n    '''\n    return (a * b * c) / 2\ndef volume_truncated_octahedral_pyramid(a,b,c,d):\n    '''\n    Write a function to find the volume of a truncated octahedral pyramid.\n    '''\n    return (a * b * c) / 2 - (a * b * d) / 2\ndef volume_icosatetrahedral_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a icosatetrahedral pyramid.\n    '''\n    return (a * b * c) / 2\ndef volume_icosidodecagonal_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a icosidodecagonal pyramid.\n    '''\n    return (a * b * c) / 2\ndef volume_octahedral_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a octahedral pyramid.\n    '''\n    return ",
        "num_ids": 5
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (3.14*(r**2)*h)/3\n    return v\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef lucy_printer():\n    '''\n    Write a program to print the first and last 4 items of a list.\n    '''\n    movies = ['Black Panther', 'Spiderman', 'Spiderman 2', 'Django']\n    print(movies[0])\n    print(movies[3])\n    return\ndef print_a_list(my_list):\n    '''\n    Write a function that takes a list and prints out each item on its own line.\n    '''\n    for item in my_list:\n        print(item)\n    return\ndef print_the_mean(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the mean.\n    '''\n    total = 0\n    for item in my_list:\n        total += item\n    total = total/len(my_list)\n    return total\ndef print_the_median(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the median.\n    '''\n    my_list.sort()\n    mid = len(my_list)//2\n    if len(my_list)%2 == 1:\n        return my_list[mid]\n    else:\n        return (my_list[mid-1]+my_list[mid])/2.0\ndef print_the_mode(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the mode.\n    '''\n    counts = {}\n    for item in my_list:\n        counts[item] = counts.get(item,0) + 1\n    maxcount = max(counts.values())\n    for item in counts:\n        if counts[item] == maxcount:\n            return item\n    return None\ndef print_the_variance(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the variance.\n    '''\n    mean = print_the_mean(my_list)\n    total = 0\n    for item in my_list:\n        total += (item-mean)**2\n    return total/len(my_list)\ndef print_the_std(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the standard deviation.\n    '''\n    return print_the_variance(my_list)**0.5\ndef print_the_quartiles(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the median, mean, and standard deviation.\n    '''\n    my_list.sort()\n    mid = len(my_list)//2\n    if len(my_list)%2 == 1:\n        return (my_list[mid],print_the_mean(my_list),print_the_std(my_list))\n    else:\n        return (my_list[mid-1]+my_list[mid],print_the_mean(my_list),print_the_std(my_list))\ndef print_the_quartiles2(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the median, mean, and standard deviation.\n    '''\n    my_list.sort()\n    mid = len(my_list)//2\n    if len(my_list)%2 == 1:\n        return (my_list[mid],print_the_mean(my_list),print_the_std(my_list))\n    else:\n        return (my_list[mid-1]+my_list[mid],print_the_mean(my_list),print_the_std(my_list))\ndef print_the_quartiles3(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the median, mean, and standard deviation.\n    '''\n    my_list.sort()\n    mid = len(my_list)//2\n    if len(my_list)%2 == 1:\n        return (my_list[mid],print_the_mean(my_list),print_the_std(my_list))\n    else:\n        return (my_list[mid-1]+my_list[mid],print_the_mean(my_list),print_the_std(my_list))\ndef print_the_quartiles4(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the median, mean, and standard deviation.\n    '''\n    my_list.sort()\n    mid = len(my_list)//2\n    if len(my_list)%2 == 1:\n        return (my_list[mid],print_the_mean(my_list),print_the_std(my_list))\n    else:\n        return (my_list[mid-1]+my_list[mid],print_the_mean(my_list),print_the_std(my_list))\ndef print_the_quartiles5(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the median, mean, and standard deviation.\n    '''\n    my_list.sort()\n    mid = len(my_list)//2\n    if len(my_list)%2 == 1:\n        return (my_list[mid],print_the_mean(my_list),print_the_std(my_list))\n    else:\n        return (my_list[mid-1]+my_list[mid],print_the_mean(my_list),print_the_std(my_list))\ndef get_a_fraction(l,n):\n    '''\n    Write a function to return the nth fraction from a list of fractions.\n    '''\n    l.sort()\n    total = 0\n    for i in l:\n        total += i\n    return total/n\ndef add_fraction(l,n,d):\n    '''\n    Write a function to add a fraction to a list of fractions.\n    '''\n    l.sort()\n    total = 0\n    for i in l:\n        total += i\n    total += n/d\n    return total\ndef average_3_decimals(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the mean.\n    '''\n    total = 0\n    for item in my_list:\n        total += item\n    total = total/len(my_list)\n    return round(total,3)\ndef combine_and_sort(my_list,target):\n    '''\n    Write a function to combine two lists and sort them.\n    '''\n    # Your code here\n    return\ndef smallest_difference(my_list):\n    '''\n    Write a function that takes a list of numbers and returns the difference between the largest and smallest numbers.\n    '''\n    my_list.sort()\n    return my_list[-1]-my_list[0]\ndef pythagorean_triples(max_a):\n    '''\n    Write a function that returns a list of Pythagorean triples that are <= max_a.\n    '''\n    # Your code here\n    return\ndef replace_spaces(my_string):\n    '''\n    Write a function that replaces any spaces in a string with '%20'.\n    '''\n    return my_string.replace(' ','%20')\ndef newton_sqrt(n):\n    '''\n    Write a function that takes a number and returns its square root.\n    '''\n    return n**0.5\ndef get_a_tuple():\n    '''\n    Write a function that takes a list of numbers and returns a tuple with the sum, mean, and standard deviation.\n    '''\n    # Your code here\n    return\ndef make_a_list(my_list):\n    '''\n    Write a function that takes a string and returns a list of the words in the string.\n    '''\n    return my_list.split()\ndef make_a_tuple(my_list):\n    '''\n    Write a function that takes a list of strings and returns a tuple with each string as an element.\n    '''\n    return tuple(my_list)\ndef make_a_set(my_list):\n    '''\n    Write a function that takes a list of strings and returns a set with each string as an element.\n    '''\n    return set(my_list)\ndef reverse_a_list(my_list):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h\n",
        "num_ids": 22
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(math.log(n) / math.log(2))\n",
        "num_ids": 20
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n,2)))\n",
        "num_ids": 22
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_pow = 0\n    while n >= 2:\n        if n%2!= 0:\n            max_pow = max(max_pow,n)\n        n = n/2\n    return max_pow\n",
        "num_ids": 57
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    ans = 0 \n    while (1 << ans) <= n: \n        ans += 1\n    return ans - 1\n",
        "num_ids": 31
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while (p<=n):\n        p*=2\n    return p/2\n",
        "num_ids": 28
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num_of_bits = int(math.log(n)/math.log(2)) + 1\n",
        "num_ids": 26
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n -= 1\n    power = 1\n    while n > 0:\n        if n & 1 == 1:\n            power += 1\n        n = n >> 1\n    return power\n",
        "num_ids": 44
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return highest_Power_of_2(n/2) * 2\n",
        "num_ids": 34
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # return 2 ** int(math.log(n, 2))\n    # print(int(math.log(n, 2)))\n    return int(2 ** math.floor(math.log(n, 2)))\n",
        "num_ids": 52
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while (p <= n): \n        p = p * 2\n    return p // 2\n",
        "num_ids": 29
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "num_ids": 54
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==1:\n        return 2\n    elif n==2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n    \nfor i in range(1,11):\n    print find_lucas(i",
        "num_ids": 74
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas_num(n):\n        a = 0\n        b = 1\n        for i in range(n):\n            a, b = b, (a + b)\n        return a\n    return lucas_num(n)\n",
        "num_ids": 58
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return find_nth_lucas(n)\n",
        "num_ids": 16
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2,1]\n    for i in range(n-1):\n        lucas.append(lucas[-1] + lucas[-2])\n",
        "num_ids": 46
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))%1000000007\n",
        "num_ids": 58
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert n >= 0 and n <= 10**10\n    lucas = [2, 1]\n    i = 2\n    while i < n:\n        lucas.append(lucas[i-1] + lucas[i-2])\n        i += 1\n",
        "num_ids": 66
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_number = [2, 1]\n    for i in range(2, n):\n        lucas_number.append((lucas_number[-1] + lucas_number[-2]) % 10**9)\n    return lucas_number[-1]\n",
        "num_ids": 92
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % item for item in list_]\n",
        "num_ids": 15
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return string.join(list_)\n",
        "num_ids": 12
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[0] = list_[0].replace(\"'\", \"\")\n    list_[0] = list_[0].replace('\"', '')\n    list_[0] = list_[0].replace('[', '')\n    list_[0] = list_[0].replace(']', '')\n    list_[0] = list_[0].replace(' ', '')\n    list_[0] = list_[0].split(',')\n    for i in range(1, len(list_)):\n        list_[i] = list_[i].replace(\"'\", \"\")\n        list_[i] = list_[i].replace('\"', '')\n        list_[i] = list_[i].replace('[', '')\n        list_[i] = list_[i].replace(']', '')\n        list_[i] = list_[i].replace(' ', '')\n        list_[i] = list_[i].split(',')\n    if string == \"th\":\n        for i in range(0, len(list_)):\n            list_[i] = str(i+1) + 'th'\n    elif string == \"st\":\n        for i in range(0, len(list_)):\n            list_[i] = str(i+1) +'st'\n    elif string == \"nd\":\n        for i in range(0, len(list_)):\n            list_[i] = str(i+1) + 'nd'\n    elif string == \"rd\":\n        for i in range(0, len(list_)):\n            list_[i] = str(i+1) + 'rd'\n    return list_\n",
        "num_ids": 411
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n",
        "num_ids": 32
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % x for x in list_]\n    return list_\n",
        "num_ids": 22
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % i for i in list_]\n    return list_\n",
        "num_ids": 22
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return''.join(string % i for i in list_)\n",
        "num_ids": 17
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(0, len(l1))}\n",
        "num_ids": 35
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for (key1, key2, key3) in zip(l1, l2, l3):\n        dict[key1] = {key2:key3}\n    return dict\n",
        "num_ids": 51
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list_of_list = [l1, l2, l3]\n    dictionary = {}\n    for item in list_of_list:\n        for key, value in enumerate(item):\n            if key not in dictionary:\n                dictionary[key] = [value]\n            else:\n                dictionary[key].append(value)\n    return dictionary\n",
        "num_ids": 87
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = [l1, l2, l3]\n    dic = {lst[i]: {} for i in range(len(lst))}\n",
        "num_ids": 40
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # covert list of list of strings to list of dicts\n    l1 = [{'a': i[0], 'b': i[1], 'c': i[2], 'd': i[3], 'e': i[4], 'f': i[5]} for i in l1]\n    l2 = [{'a': i[0], 'b': i[1], 'c': i[2], 'd': i[3], 'e': i[4], 'f': i[5]} for i in l2]\n    l3 = [{'a': i[0], 'b': i[1], 'c': i[2], 'd': i[3], 'e': i[4], 'f': i[5]} for i in l3]\n",
        "num_ids": 181
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for l in l1, l2, l3:\n        dictionary[l[0]] = {l[1]: l[2]}\n    return dictionary\n",
        "num_ids": 45
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l4 = []\n    for i, j, k in zip(l1, l2, l3):\n        d = {i: {j: k}}\n        l4.append(d)\n    return l4\n",
        "num_ids": 54
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n",
        "num_ids": 33
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return_dict = {}\n    for i in range(len(l1)):\n        return_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            return_dict[l1[i]][l2[j]] = l3[i][j]\n    return return_dict\n",
        "num_ids": 79
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n",
        "num_ids": 72
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 13\n    elif n%2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%3 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%4 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n",
        "num_ids": 279
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        # max_sum = 0\n        # if n % 2 == 0:\n        #     max_sum = get_max_sum (n / 2)\n        # if n % 3 == 0:\n        #     max_sum = max (max_sum, get_max_sum (n / 3))\n        # if n % 4 == 0:\n        #     max_sum = max (max_sum, get_max_sum (n / 4))\n        # if n % 5 == 0:\n        #     max_sum = max (max_sum, get_max_sum (n / 5))\n        # return max_sum + n\n        return max (get_max_sum (n / 2) + get_max_sum (n / 3) + get_max_sum (n / 4) + get_max_sum (n / 5), n)\n    \n",
        "num_ids": 216
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)\n    else:\n        return max(get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5), n)\n",
        "num_ids": 123
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return max(n+get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n",
        "num_ids": 60
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f(n) = max( f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    return f(n)\n",
        "num_ids": 47
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 88
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 63
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Caching this value to save on computation time.\n    max_sum = {i: i for i in range(1, n + 1)}\n    for i in range(1, n):\n        max_sum[i+1] = max(max_sum[i] + i, max_sum[i // 2] + (i % 2) + i)\n    return max_sum[n]\n",
        "num_ids": 95
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n_sum = 1\n    for i in range(2, n):\n        n_sum = max(n_sum + i, i)\n    return n_sum\n",
        "num_ids": 42
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_length_list = [item]\n        elif len(item) == max_length:\n            max_length_list.append(item)\n    return max_length_list\n",
        "num_ids": 93
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_len = -1\n    for word_list in input_list:\n        if len(word_list) > max_len:\n            max_len = len(word_list)\n    return max_len\n",
        "num_ids": 55
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_length_list = element\n    print(\"the maximum length is\", max_length)\n    return max_length_list\n",
        "num_ids": 70
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    temp = []\n    for i in input_list:\n        temp.append(len(i))\n    return input_list[temp.index(max(temp))]\n",
        "num_ids": 42
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = i\n    return max_len_list\n",
        "num_ids": 66
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_length_list = []\n    for item in input_list:\n        if len(item) == max_length:\n            max_length_list.append(item)\n    return max_length_list\n",
        "num_ids": 66
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n",
        "num_ids": 53
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    return max_len\n",
        "num_ids": 22
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    for x in input_list:\n        if len(x) > max_len:\n            max_len = len(x)\n    return max_len\n",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    t = set(test_tup)\n    return len(t) == len(test_tup)\n",
        "num_ids": 28
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    result = True\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            result = False\n    return result\n    \nprint check_distinct((1, 2, 3, 4, 5))\nprint check_distinct((1, 2, 3, 4, 5, 2))\nprint check_distinct((1, 2, 3, 4, 5, 6))\nprint check_distinct((1, 2, 3, 4, 5, 6, 6, 5))\nprint check_distinct((1, 2, 3, 4, 5, 6, 6, 5, 4, 3)",
        "num_ids": 147
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = list(test_tup)\n    test_tup.sort()\n    flag = True\n    i = 0\n    while i < len(test_tup)-1:\n        if test_tup[i] == test_tup[i+1]:\n            flag = False\n            break\n        i += 1\n    return flag\n",
        "num_ids": 86
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    list1 = []\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n        else:\n            continue\n    return list1[0]\n",
        "num_ids": 49
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not str1:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_frequency = {}\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n",
        "num_ids": 50
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    for c in str1:\n        if c not in chars:\n            chars[c] = 1\n        else:\n            chars[c] += 1\n    for c in str1:\n        if chars[c] == 1:\n            return c\n    return None\n",
        "num_ids": 72
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for char in str1:\n        if char not in dict1:\n            dict1[char] = 1\n        else:\n            dict1[char] += 1\n    for char in str1:\n        if dict1[char] == 1:\n            return char\n    return None\n",
        "num_ids": 74
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == '':\n        return None\n    else:\n        for i in range(len(str1)):\n            if str1[i] not in str1[:i] + str1[i+1:]:\n                return str1[i]\n        return None\n",
        "num_ids": 68
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for s in str1:\n        if s in d:\n            d[s] += 1\n        else:\n            d[s] = 1\n    for s in str1:\n        if d[s] == 1:\n            return s\n",
        "num_ids": 64
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return 'None'\n",
        "num_ids": 33
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # a = str1[0]\n    # count = 1\n    # for i in range(1,len(str1)):\n    #     if str1[i] == a:\n    #         count = count + 1\n    #     else:\n    #         break\n    # return a,count\n    # Using dictonary\n    count = {}\n    for i in str1:\n        count[i] = count.get(i,0) + 1\n    for i in str1:\n        if count[i] == 1:\n            return i\n    return -1\n",
        "num_ids": 138
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for c in str1:\n        if c not in dict1:\n            dict1[c] = 1\n        else:\n            dict1[c] += 1\n    for c in str1:\n        if dict1[c] == 1:\n            return c\n    return None\n",
        "num_ids": 74
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return \"The string is palindrome\"\n    else:\n        return \"The string is not a palindrome\"\n",
        "num_ids": 43
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    \n    return (string[0] == string[-1])\n    \ndef check_valid_char(string):\n    '''\n    Write a function to check whether the given string has only one or more letters and one or more numbers.\n    '''\n    count = 0\n    if re.match(regex, string):\n        for char in string:\n            if char.isalpha():\n                count += 1\n            elif char.isdigit():\n                count += 1\n            else:\n                pass\n        if count > 1:\n            return False\n        else:\n            return True\n    else:\n        return False\n    \ndef check_starts_with_consonant(string):\n    '''\n    Write a function to check whether the given string starts with a consonant\n    '''\n    return (re.match(regex, string[0]) and re.match(regex, string[-1]))\n    \ndef check_ends_with_consonant(string):\n    '''\n    Write a function to check whether the given string ends with a consonant\n    '''\n    return (re.match(regex, string[0]) and re.match(regex, string[-1]))\n    \ndef check_contains_double_consonant(string):\n    '''\n    Write a function to check whether the given string contains at least one occurence of two or more consecutive consonants\n    '''\n    count = 0\n    for i in range(1, len(string)):\n        if (re.match(regex, string[i-1]) and re.match(regex, string[i])):\n            count += 1\n    \n    if count >= 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex,string) else False\n",
        "num_ids": 18
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex, string) else False\nprint(check_char(\"a\"))\nprint(check_char(\"ab\"))\nprint(check_char(\"aba\"))\nprint(check_char(\"abaab\"))\n",
        "num_ids": 55
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]!= string[-1]:\n        return False\n    elif not re.match(regex, string):\n        return False\n    else:\n        return True\n",
        "num_ids": 46
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_word(string):\n    '''\n    Write a function to check whether the given string is a word or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_word(string):\n    '''\n    Write a function to check whether the given string is a word or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \n    \n    \n    \ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_word(string):\n    '''\n    Write a function to check whether the given string is a word or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_word(string):\n    '''\n    Write a function to check whether the given string is a word or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \n    \n    \n    \n    \ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_word(string):\n    '''\n    Write a function to check whether the given string is a word or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \ndef check_word(string):\n    '''\n    Write a function to check whether the given string is a word or not.\n    '''\n    global regex\n    return bool(re.match(regex, string))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1360
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    match = re.findall(regex, string)\n    \n    if len(match) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n",
        "num_ids": 17
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\nprint(check_char('abc'))\nprint(check_char('abcabc'))\nprint(check_char('abcabcdef'))\nprint(check_char('xyz'))\nprint(check_char('xyzxyz'))\n",
        "num_ids": 71
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        median = a\n    elif b>a and b>c:\n        median = b\n    else:\n        median = c\n    return median\n",
        "num_ids": 51
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l = [a,b,c]\n    l.sort()\n    if len(l)%2:\n        return l[len(l)/2]\n    else:\n        return (l[len(l)/2-1]+l[len(l)/2])/2.0\n",
        "num_ids": 70
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # https://docs.python.org/2/library/statistics.html\n    # https://docs.python.org/2/library/math.html\n    # https://docs.python.org/2/library/collections.html\n    return sorted([a,b,c])[1]\n",
        "num_ids": 72
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<=b and a<=c:\n        median=a\n    elif b<=a and b<=c:\n        median=b\n    elif c<=a and c<=b:\n        median=c\n    return median\n",
        "num_ids": 65
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a <= b:\n        if b <= c:\n            return b\n        else:\n            if a <= c:\n                return a\n            else:\n                return c\n    else:\n        if a <= c:\n            return a\n        else:\n            if b <= c:\n                return b\n            else:\n                return c\n    return None\n",
        "num_ids": 101
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a + b > c:\n        return (a + b + c) / 2\n    else:\n        return c\n",
        "num_ids": 47
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    if a==b and a<c:\n        return a\n    if a==c and a<b:\n        return a\n    if b==c and b<a:\n        return b\n    if a==b and a>c:\n        return a\n    if a==c and a>b:\n        return a\n    if b==c and b>a:\n        return b\n",
        "num_ids": 137
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr = sorted([a,b,c])\n    if a == arr[1] and b == arr[2]:\n        return a\n    elif b == arr[1] and a == arr[2]:\n        return b\n    else:\n        return c\n",
        "num_ids": 63
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #copy\n    a = sorted([a,b,c])\n    if len(a) % 2 == 0:\n        return (a[(len(a) - 1) // 2] + a[len(a) // 2]) / 2\n    else:\n        return a[len(a) // 2]\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n",
        "num_ids": 75
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(i) for i in str(num)])\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        num_digits = len(str(num))\n        sum += num_digits\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in str(nums))\n",
        "num_ids": 19
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    assert isinstance(nums, list)\n    return sum(map(int, str(nums)))\n",
        "num_ids": 27
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, nums))\n",
        "num_ids": 14
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for i in nums:\n        s = 0\n        while i > 0:\n            last_digit = i % 10\n            s = s + last_digit\n            i = i // 10\n        result.append(s)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for i in nums:\n        sum = 0\n        while i > 0:\n            sum += i % 10\n            i = i // 10\n        result.append(sum)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(list(map(int, str(num)))))\n    return sum_of_digits_list\n",
        "num_ids": 59
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1],\n            test_tup1[2] ^ test_tup2[2])\n",
        "num_ids": 57
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor = tuple((test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1]))\n    return bitwise_xor\n",
        "num_ids": 55
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([test_tup1[x] ^ test_tup2[x] for x in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    def bitwise_xor_helper(x, y):\n        result = x ^ y\n        if result == 0:\n            return (0, 0)\n        else:\n            return (1, result)\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        return tuple(map(bitwise_xor_helper, test_tup1, test_tup2))\n",
        "num_ids": 108
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be same length\")\n    return tuple([a ^ b for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 63
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    ret_list = []\n    for i,j in zip(test_tup1, test_tup2):\n        ret_list.append(int(i)^int(j))\n    return tuple(ret_list)\n",
        "num_ids": 56
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    xor_list = []\n    for x in test_tup1:\n        if x in test_tup2:\n            xor_list.append(x)\n    print(xor_list)\n",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    new_tup = ()\n    for x, y in zip(test_tup1, test_tup2):\n        new_tup += (x ^ y,)\n    return new_tup\n",
        "num_ids": 50
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Use the set data structure to identify unique tuples\n    return len(set(tuple(sorted(test_list)) for test_list in test_list))\n",
        "num_ids": 41
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # check if the list is empty\n    if not test_list:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    seen = set()\n    for i in test_list:\n        if i not in seen:\n            seen.add(i)\n    return len(seen)\n",
        "num_ids": 40
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for item in test_list:\n        if not (item in unique_list):\n            unique_list.append(item)\n    return len(unique_list)\n",
        "num_ids": 48
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict = {}\n    for tup in test_list:\n        if tup in dict:\n            dict[tup] += 1\n        else:\n            dict[tup] = 1\n    return dict\n",
        "num_ids": 51
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict\n",
        "num_ids": 63
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list)\n",
        "num_ids": 47
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    test_list = list(set(test_list))\n    for i in test_list:\n        count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict = {}\n    for i in test_list:\n        key = i[0]+','+i[1]\n        dict[key] = 0\n    for i in test_list:\n        key = i[0]+','+i[1]\n        dict[key] += 1\n    return dict\n",
        "num_ids": 73
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # test_tup1 = (1, (2, 3), (4, (5, 6)))\n    # test_tup2 = (2, (3, 4), (5, 6))\n",
        "num_ids": 49
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    \n",
        "num_ids": 42
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # test_tup1 = (0,1,2)\n    # test_tup2 = (2,3,4)\n    \n    new_tup = (test_tup1[0]+test_tup2[0],test_tup1[1]+test_tup2[1],test_tup1[2]+test_tup2[2])\n    \n    return new_tup\n    \ndef print_test_tuple(tup1):\n    '''\n    Write a function to print the contents of a tuple in a more human readable manner.\n    '''\n    \n    # tup1 = (0,1,2)\n    \n    print('Tuple 1 = ')\n    print(tup1[0], tup1[1], tup1[2])\n    \n    print('Tuple 2 = ')\n    print(tup1[0], tup1[1], tup1[2])\n    \ndef print_new_tuple(tup1):\n    '''\n    Write a function to print the contents of a tuple in a more human readable manner.\n    '''\n    \n    # tup1 = (0,1,2)\n    \n    print('Tuple 1 = ')\n    print(tup1[0], tup1[1], tup1[2])\n    \n    print('Tuple 2 = ')\n    print(tup1[0], tup1[1], tup1[2])\n    \ndef get_element_in_tuple(tup1, index):\n    '''\n    Write a function to get the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # index = 2\n    \n    return tup1[index]\n    \ndef get_element_in_tuple_2(tup1, index):\n    '''\n    Write a function to get the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # index = 2\n    \n    return tup1[index]\n    \ndef get_element_in_tuple_3(tup1, index):\n    '''\n    Write a function to get the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # index = 2\n    \n    if index >= len(tup1):\n        return tup1[0]\n    else:\n        return tup1[index]\n    \ndef modify_element_in_tuple(tup1, index, new_val):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # index = 2\n    # new_val = 4\n    \n    return tup1[:index] + (new_val,) + tup1[index + 1:]\n    \ndef modify_element_in_tuple_2(tup1, index, new_val):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # index = 2\n    # new_val = 4\n    \n    tup1 = tup1[:index] + (new_val,) + tup1[index + 1:]\n    \n    return tup1\n    \ndef modify_element_in_tuple_3(tup1, index, new_val):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # index = 2\n    # new_val = 4\n    \n    if index >= len(tup1):\n        return tup1 + (new_val,)\n    else:\n        return tup1[:index] + (new_val,) + tup1[index + 1:]\n    \ndef modify_element_in_tuple_4(tup1, index, new_val):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # index = 2\n    # new_val = 4\n    \n    return tup1[:index] + (new_val,) + tup1[index:]\n    \ndef modify_element_in_tuple_5(tup1, index, new_val):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # index = 2\n    # new_val = 4\n    \n    tup1 = tup1[:index] + (new_val,) + tup1[index + 1:]\n    \n    return tup1\n    \ndef change_first_element_in_tuple(tup1, new_val):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # new_val = 4\n    \n    return (new_val,) + tup1[1:]\n    \ndef modify_tuple_with_tuple(tup1, tup2):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # tup2 = (3,4,5)\n    \n    return tup1 + tup2\n    \ndef modify_tuple_with_tuple_2(tup1, tup2):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # tup2 = (3,4,5)\n    \n    return tup1 + tup2[1:]\n    \ndef modify_tuple_with_tuple_3(tup1, tup2):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # tup2 = (3,4,5)\n    \n    return tup1 + tup2[1:]\n    \ndef modify_tuple_with_tuple_4(tup1, tup2):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # tup2 = (3,4,5)\n    \n    return tup1 + tup2\n    \ndef modify_tuple_with_tuple_5(tup1, tup2):\n    '''\n    Write a function to modify the value at a particular index in the given tuple.\n    '''\n    \n    # tup1 = (0,1,2)\n    # tup2 = (3,4,5)\n    \n    return tup1 + tup2\n    \ndef get_length_of_tuple(tup1):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    \n    return len(tup1)\n    \ndef get_min_element_in_tuple(tup1):\n    '''\n    Write a function to get the minimum element in a tuple.\n    '''\n    \n    return min(tup1)\n    \ndef get_max_element_in_tuple(tup1):\n    '''\n    Write a function to get the maximum element in a tuple.\n    '''\n    \n    return max(tup1)\n    \ndef get_sum_of_elements_in_tuple(tup1):\n    '''\n    Write a function to get the sum of elements in a tuple.\n    '''\n    \n    return sum(tup1)\n    \ndef get_average_of_elements_in_tuple(tup1):\n    '''\n    Write a function to get the averag",
        "num_ids": 11
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n    return result_tup\n",
        "num_ids": 64
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n",
        "num_ids": 28
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = tuple([t1 + t2 for t1, t2 in zip(test_tup1, test_tup2)])\n    return result_tup\n",
        "num_ids": 45
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1])\n",
        "num_ids": 38
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    i = 0\n    j = 0\n    ret_tup = ()\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            ret_tup += (test_tup1[i],)\n            i += 1\n        elif test_tup1[i] > test_tup2[j]:\n            ret_tup += (test_tup2[j],)\n            j += 1\n        else:\n            ret_tup += (test_tup1[i] + test_tup2[j],)\n            i += 1\n            j += 1\n    if i == len(test_tup1):\n        ret_tup += test_tup2[j:]\n    elif j == len(test_tup2):\n        ret_tup += test_tup1[i:]\n    return ret_tup\n",
        "num_ids": 233
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] + test_tup2[i],)\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        print a\n    else:\n        print b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a < b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n        \n        \n",
        "num_ids": 26
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex,tuple1) in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #\n    # Write your code here.\n    #\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n    ",
        "num_ids": 42
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = (1,2,3,4,5,6,7,8,9,10)\n    return tuple1 in tuplex\n    \n",
        "num_ids": 40
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex: \n        if elem == tuple1: \n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item == tuple1:\n            return True\n    return False\n    \ndef count_tuplex(tuplex,tuple1):\n    '''\n    Write a function to count the number of occurences of an element in a tuple.\n    '''\n    count = 0\n    for item in tuplex:\n        if item == tuple1:\n            count += 1\n    return count\n    \ndef find_tuplex(tuplex,tuple1):\n    '''\n    Write a function to find the index of a tuple in a tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            return i\n            \ndef unique_tuplex(tuplex):\n    '''\n    Write a function to find the unique items in a tuple.\n    '''\n    for i in range(len(tuplex)):\n        count = 0\n        for j in range(len(tuplex)):\n            if tuplex[i] == tuplex[j]:\n                count += 1\n        if count == 1:\n            return tuplex[i]\n            \ndef replace_tuplex(tuplex,tuple1,tuple2):\n    '''\n    Write a function to replace an item in a tuple with another tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            tuplex[i] = tuple2\n            return\n            \ndef remove_tuplex(tuplex,tuple1):\n    '''\n    Write a function to remove an item in a tuple from a tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            del tuplex[i]\n            return\n            \ndef get_tuplex(tuplex,tuple1):\n    '''\n    Write a function to retrieve an item in a tuple from a tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            return tuplex[i]\n            \ndef get_tuplex(tuplex,tuple1):\n    '''\n    Write a function to retrieve an item in a tuple from a tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            return item\n            \ndef print_tuplex(tuplex):\n    '''\n    Write a function to print all the items in a tuple.\n    '''\n    for item in tuplex:\n        print item\n    \ndef tuple_add(tuple1,tuple2):\n    '''\n    Write a function to add two tuples.\n    '''\n    return tuple1 + tuple2\n    \ndef tuple_concat(tuple1,tuple2):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    return tuple1 + tuple2\n    \ndef tuple_eq(tuple1,tuple2):\n    '''\n    Write a function to check whether two tuples are equal.\n    '''\n    return tuple1 == tuple2\n    \ndef tuple_get(tuplex,tuple1):\n    '''\n    Write a function to retrieve an item in a tuple from a tuple.\n    '''\n    return tuplex[tuplex.index(tuple1)]\n    \ndef tuple_gets(tuplex,tuple1):\n    '''\n    Write a function to retrieve an item in a tuple from a tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            return tuplex[i]\n            \ndef tuple_set(tuple1,tuple2):\n    '''\n    Write a function to set an item in a tuple to a tuple.\n    '''\n    tuplex[tuplex.index(tuple1)] = tuple2\n    return tuplex\n    \ndef tuple_subtract(tuple1,tuple2):\n    '''\n    Write a function to subtract two tuples.\n    '''\n    return tuple1 - tuple2\n    \ndef tuple_zip(tuple1,tuple2):\n    '''\n    Write a function to zip two tuples.\n    '''\n    return zip(tuple1,tuple2)\n    \ndef tuple_remove(tuplex,tuple1):\n    '''\n    Write a function to remove an item in a tuple from a tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            del tuplex[i]\n            return\n            \ndef tuple_pop(tuplex,tuple1):\n    '''\n    Write a function to pop an item in a tuple from a tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            return tuplex.pop(i)\n            \ndef tuple_reverse(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuplex.reverse()\n    return tuplex\n    \ndef tuple_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuplex.sort()\n    return tuplex\n    \ndef tuple_length(tuplex):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    return len(tuplex)\n    \ndef tuple_count(tuplex,tuple1):\n    '''\n    Write a function to count the number of occurences of an item in a tuple.\n    '''\n    count = 0\n    for item in tuplex:\n        if item == tuple1:\n            count += 1\n    return count\n    \ndef tuple_index(tuplex,tuple1):\n    '''\n    Write a function to return the index of an item in a tuple.\n    '''\n    for i,item in enumerate(tuplex):\n        if item == tuple1:\n            return i\n            \ndef tuple_min(tuplex):\n    '''\n    Write a function to return the minimum value in a tuple.\n    '''\n    return min(tuplex)\n    \ndef tuple_max(tuplex):\n    '''\n    Write a function to return the maximum value in a tuple.\n    '''\n    return max(tuplex)\n    \ndef tuple_mean(tuplex):\n    '''\n    Write a function to return the mean value in a tuple.\n    '''\n    return sum(tuplex)/float(len(tuplex))\n    \ndef tuple_median(tuplex):\n    '''\n    Write a function to return the median value in a tuple.\n    '''\n    tuplex.sort()\n    if len(tuplex) % 2 == 0:\n        return (tuplex[(len(tuplex) / 2) - 1] + tuplex[(len(tuplex) / 2)])/2.0\n    else:\n        return tuplex[len(tuplex) / 2]\n    \ndef tuple_mode(tuplex):\n    '''\n    Write a function to return the mode value in a tuple.\n    '''\n    count = {}\n    for item in tuplex:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    max_count = 0\n    mode = None\n    for item,count in count.items():\n        if count > max_count:\n            max_count = count\n            mode = item\n    return mode\n    \ndef tuple_slice(tuplex,start,stop):\n    '''\n    Write a function to slice a tuple.\n    '''\n    return tuplex[start:stop]\n    \ndef tuple_map(tuplex,func):\n    '''\n    Write a function to map a function to all the items in a tuple.\n    '''\n    return tuple(map(func,tuplex))\n    \ndef tuple_reduce(tuplex,func,start=0):\n    '''\n    Write a function to apply a function of two arguments cumulatively to the items of a tuple from start.\n    '''\n    return reduce(func,tuplex[start:],tuplex[start]",
        "num_ids": 21
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[tuple1] == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item==tuple1:\n            return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x%2 == 1: \n        return 1\n    else: \n        return 0\n    \ndef find_PerfectNumber(x): \n    '''\n    Write a python function to find whether the sum of the divisors of a given number is equal to the number.\n    '''\n    \n    divisor = 1\n    \n    while divisor<x:\n        if (x%divisor) == 0:\n            x = x/divisor\n        else:\n            divisor = divisor + 1\n    \n    if x == 1:\n        return 0\n    else:\n        return 1\n    \ndef find_Palindrom(x): \n    '''\n    Write a python function to find whether the given number is a palindromic number.\n    '''\n    \n    if x>0:\n        x = str(x)\n        \n        for i in range(len(x)):\n            if x[i]!= x[len(x)-i-1]:\n                return 0\n            \n        return 1\n        \ndef find_Prime(x): \n    '''\n    Write a python function to find whether the given number is a prime number.\n    '''\n    \n    if x > 1:\n        for i in range(2,x):\n            if (x%i) == 0:\n                return 0\n                \n    return 1\n    \ndef find_Armstrong(x): \n    '''\n    Write a python function to find whether the given number is an Armstrong number.\n    '''\n    \n    n = x\n    \n    sum = 0\n    \n    while n!=0:\n        sum = sum + (n%10)**3\n        n = n/10\n        \n    if x == sum:\n        return 1\n    else:\n        return 0\n        \ndef find_factorial(x): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    \n    factorial = 1\n    \n    if x == 0 or x == 1:\n        return 1\n    else:\n        while x!= 1:\n            factorial = factorial*x\n            x = x-1\n        \n        return factorial\n    \ndef find_Fibonacci(x): \n    '''\n    Write a python function to find whether the given number is a Fibonacci number.\n    '''\n    \n    a = 1\n    b = 1\n    \n    if x==1 or x==2:\n        return 1\n    else:\n        while x>a:\n            a = b\n            b = a + b\n            \n        if a==b:\n            return 1\n        else:\n            return 0\n            \ndef find_Carmichael(x): \n    '''\n    Write a python function to find whether the given number is a Carmichael number.\n    '''\n    \n    if x==1:\n        return 0\n    \n    if find_factorial(x) % x == 1:\n        return 1\n    else:\n        return 0\n    \ndef find_Euler(x): \n    '''\n    Write a python function to find whether the given number is a Euler number.\n    '''\n    \n    if x>1:\n        if find_factorial(x) == x:\n            return 1\n        else:\n            return 0\n            \n    else:\n        return 0\n    \ndef find_Josephus(x,y): \n    '''\n    Write a python function to find whether the person at position x is killed by person at position y.\n    '''\n    \n    if x>y:\n        return 1\n    else:\n        return 0\n    \ndef find_Adjacency(x,y): \n    '''\n    Write a python function to find whether the person at position x is adjacent to person at position y.\n    '''\n    \n    if abs(x-y) == 1 or x==y:\n        return 1\n    else:\n        return 0\n    \ndef find_AbundantNumber(x): \n    '''\n    Write a python function to find whether the given number is an abundant number.\n    '''\n    \n    if find_factorial(x) > x:\n        return 1\n    else:\n        return 0\n    \ndef find_AbundantSum(x): \n    '''\n    Write a python function to find whether the sum of the divisors of a given number is greater than the given number.\n    '''\n    \n    divisor = 1\n    \n    while divisor<x:\n        if (x%divisor) == 0:\n            x = x/divisor\n            divisor = divisor + 1\n        else:\n            divisor = divisor + 1\n            \n    if x>1:\n        return 1\n    else:\n        return 0\n    \ndef find_SmallestDivisor(x): \n    '''\n    Write a python function to find the smallest divisor of a given number.\n    '''\n    \n    divisor = x\n    \n    while divisor > 1:\n        if (x%divisor) == 0:\n            return divisor\n        else:\n            divisor = divisor - 1\n            \ndef find_SmallestDivisor2(x): \n    '''\n    Write a python function to find the smallest divisor of a given number using Euclidean algorithm.\n    '''\n    \n    a = x\n    b = 1\n    \n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n            \n    return b\n    \ndef find_Factorial(x): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    \n    factorial = 1\n    \n    if x == 1 or x == 0:\n        return 1\n    else:\n        while x>1:\n            factorial = factorial*x\n            x = x-1\n        \n        return factorial\n    \ndef find_Factorial2(x): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    \n    factorial = 1\n    \n    if x == 0 or x == 1:\n        return 1\n    else:\n        while x>1:\n            factorial = factorial*x\n            x = x-1\n        \n        return factorial\n    \ndef find_Factorial3(x): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    \n    factorial = 1\n    \n    if x == 1 or x == 0:\n        return 1\n    else:\n        while x>1:\n            factorial = factorial*x\n            x = x-1\n        \n        return factorial\n    \ndef find_Primality(x): \n    '''\n    Write a python function to find whether the given number is prime or not.\n    '''\n    \n    if x == 1:\n        return 0\n    \n    for i in range(2,x):\n        if (x%i) == 0:\n            return 0\n            \n    return 1\n    \ndef find_Composite(x): \n    '''\n    Write a python function to find whether the given number is composite or not.\n    '''\n    \n    if x > 1:\n        if find_Factorial(x) % x == 0:\n            return 1\n        else:\n            return 0\n            \n    else:\n        return 0\n    \ndef find_Composite2(x): \n    '''\n    Write a python function to find whether the given number is composite or not.\n    '''\n    \n    if x > 1:\n        if find_Factorial(x) % x == 0:\n            return 0\n        else:\n            return 1\n            \n    else:\n        return 0\n    \ndef find_Composite3(x): \n    '''\n    Write a python function to find whether the given number is composite or not.\n    '''\n    \n    if x > 1:\n        if find_Factorial(x) % x == 0:\n            return 0\n        else:\n            return 1\n            \n    else:\n        return 0\n    \ndef find_IntegerDivisor(x): \n    '''\n    Write a python function to find whether the given number is divisible by any integer.\n    '''\n    \n    for i in range",
        "num_ids": 9
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    i = 0\n    while x & 1 == 0:\n        i = i + 1\n        x = x >> 1\n    return i & 1\n",
        "num_ids": 36
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return bin(x).count('1') % 2\nprint find_Parity(3)\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (len(bin(x))-2)%2\n",
        "num_ids": 17
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0: \n        return True\n    return x & 1 == 1\n",
        "num_ids": 22
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x&1)==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "num_ids": 30
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x_bin = str(bin(x))[2:]\n    if x_bin.count('1') % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n",
        "num_ids": 50
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return 1\n    else:\n        return 0\ndef find_Parity_rec(x,l,r): \n    if l>=r:\n        return None\n    mid = (l+r)//2\n    if x[mid] & 1:\n        return 1\n    elif x[mid]==None:\n        return find_Parity_rec(x,l,mid-1) or find_Parity_rec(x,mid+1,r)\n    else:\n        return 0\ndef find_Parity_iter(x): \n    l=0\n    r=len(x)-1\n    while l<=r:\n        mid=(l+r)//2\n        if x[mid] & 1:\n            return 1\n        elif x[mid]==None:\n            return find_Parity_iter(x,l,mid-1) or find_Parity_iter(x,mid+1,r)\n        else:\n            return 0\n",
        "num_ids": 238
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    while x > 1: \n        x = x & (x - 1)\n    return x == 1\n",
        "num_ids": 27
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    i = len(s)\n    while i > 0 and int(s[:i]) >= int(s[i:]):\n        i -= 1\n    if i == 0:\n        return None\n    j = len(s) - i\n    j -= 1\n    s = s[:i] + s[j] + s[i:j] + s[j + 1:]\n    return int(s)\n",
        "num_ids": 106
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # if n is negative, return -1\n    if n < 0:\n        return -1\n    # base case\n    if n == 0:\n        return 0\n    # traverse the array to find the first non zero number\n    for i in range(len(n)):\n        if n[i]!= 0:\n            break\n    # when the first non-zero number is found\n    # swap the number with the first non-zero number\n    # and return the result\n    n[i], n[0] = n[0], n[i]\n    return int(''.join(n))\n",
        "num_ids": 141
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = list(str(n))\n    if nums[0] <= nums[-1]:\n        return int(''.join(sorted(nums, reverse=True)))\n    return int(''.join(sorted(nums)))\n",
        "num_ids": 60
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digit_list = list(str(n))\n    length = len(digit_list)\n    temp_list = []\n    for i in range(length):\n        temp_list.append(int(digit_list[i]))\n    temp_list.sort()\n    temp_str = ''.join(str(i) for i in temp_list)\n    if len(temp_str) == length:\n        return n\n    else:\n        return int(temp_str)\n",
        "num_ids": 115
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # algorithm\n    # if n is a negative number, return 0\n    # sort the digits of n\n    # take the first and last digit\n    # swap these to create the bigger number\n    # reverse the bigger number\n    # return the bigger number\n    n = abs(n)\n    # if n is a single digit, return n\n    if n < 10:\n        return n\n    else:\n        s = list(str(n))\n        s.sort()\n        return int(''.join(s[1:][::-1]) + s[0])\n",
        "num_ids": 132
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    len_digits = len(digits)\n    if len_digits <= 1:\n        return n\n",
        "num_ids": 39
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digit_list = [int(x) for x in str(n)]\n    l = len(digit_list)\n    i = l - 1\n    while i > 0:\n        if digit_list[i] > digit_list[i-1]:\n            break\n        i -= 1\n    if i == 0:\n        return -1\n    j = i + 1\n    while j < l:\n        if digit_list[i] < digit_list[j]:\n            digit_list[i], digit_list[j] = digit_list[j], digit_list[i]\n            break\n        j += 1\n    res = 0\n    for i in range(l):\n        res = res * 10 + digit_list[i]\n    return res\n",
        "num_ids": 179
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return ''.join(sorted(str(n), reverse=True))\n",
        "num_ids": 20
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    if n < 10:\n        return n\n    \n    \n    digits = [0]*10\n    for i in range(0, len(str(n))):\n        digits[int(str(n)[i])] += 1\n    \n    new_n = 0\n    for i in range(1, 10):\n        while digits[i] > 0:\n            new_n = new_n*10 + i\n            digits[i] -= 1\n            \n    return new_n\n    \n    \n    \n    \n    \n    \ndef nearest_smaller_element(n):\n    '''\n    Given a sorted array A and a target value t,\n    find the index at which t occurs in A,\n    if t is larger than any element of A, then return the length of A.\n    '''\n    \n    \n    if n < 10:\n        return n\n    \n    \n    digits = [0]*10\n    for i in range(0, len(str(n))):\n        digits[int(str(n)[i])] += 1\n    \n    smaller_index = None\n    \n    for i in range(1, 10):\n        if digits[i] > 0:\n            if smaller_index == None or int(str(n)[:i]) <= int(str(n)[:smaller_index]):\n                smaller_index = i\n    \n    if smaller_index == None:\n        return len(str(n))\n    \n    return len(str(n)) - smaller_index\n    \n    \n    \n    \n    \n    \ndef next_smallest_element(n):\n    '''\n    Given a sorted array A and a target value t,\n    find the index at which t occurs in A,\n    if t is larger than any element of A, then return the length of A.\n    '''\n    \n    if n < 10:\n        return n\n    \n    \n    digits = [0]*10\n    for i in range(0, len(str(n))):\n        digits[int(str(n)[i])] += 1\n    \n    smaller_index = None\n    \n    for i in range(1, 10):\n        if digits[i] > 0:\n            if smaller_index == None or int(str(n)[:i]) > int(str(n)[:smaller_index]):\n                smaller_index = i\n    \n    if smaller_index == None:\n        return len(str(n))\n    \n    return len(str(n)) - smaller_index\n    \n    \n    \n    \n    \n    \n    \ndef divide_and_conquer(start, end, array):\n    '''\n    Given an array A of n integers, and an integer K,\n    find two numbers from the array A that sum up to K.\n    '''\n    \n    if start == end:\n        return [None, None]\n    \n    mid = (start + end)//2\n    \n    left = divide_and_conquer(start, mid, array)\n    right = divide_and_conquer(mid+1, end, array)\n    \n    if left[0]!= None and right[0]!= None:\n        return [left[0], right[0]]\n    \n    elif left[0]!= None and right[0] == None:\n        return left\n    \n    elif left[0] == None and right[0]!= None:\n        return right\n    \n    else:\n        return None\n    \n    \n    \n    \n    \n    \n    \ndef max_product(array):\n    '''\n    Given an array A of n numbers,\n    find the maximum product of two of its adjacent elements.\n    '''\n    \n    if len(array) < 2:\n        return None\n    \n    if len(array) == 2:\n        return array[0]*array[1]\n    \n    \n    left_product = array[0]*array[1]\n    right_product = array[-1]*array[-2]\n    \n    left_max = array[0]\n    right_max = array[-1]\n    \n    for i in range(2, len(array)):\n        left_max = max(left_max, array[i-1])\n        right_max = max(right_max, array[-i])\n        left_product = min(left_product, left_max*array[i])\n        right_product = min(right_product, right_max*array[-i])\n    \n    return max(left_product, right_product)\n    \n    \n    \n    \n    \n    \n    \n    \ndef search_rotated_sorted_array(array, value):\n    '''\n    Given a sorted array, and a target value t,\n    find the index of the target value in the array,\n    if not present then return the index of the smallest element greater than target.\n    '''\n    \n    start = 0\n    end = len(array) - 1\n    \n    while start <= end:\n        mid = (start + end)//2\n        \n        if array[mid] == value:\n            return mid\n        \n        elif array[mid] > value:\n            end = mid - 1\n        \n        else:\n            start = mid + 1\n    \n    return end + 1\n    \n    \n    \n    \n    \n    \n    \ndef remove_duplicates(nums):\n    '''\n    Given a sorted array, remove the duplicates in place and\n    return the length of the new array.\n    '''\n    \n    count = 1\n    \n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i-1]:\n            nums[count] = nums[i]\n            count += 1\n    \n    return count\n    \n    \n    \n    \n    \n    \n    \ndef find_largest_and_smallest(nums):\n    '''\n    Given a list of n numbers,\n    return the largest and smallest numbers in the array.\n    '''\n    \n    if len(nums) < 2:\n        return [None, None]\n    \n    if len(nums) == 2:\n        return [nums[0], nums[1]]\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        \n        if nums[i] < smallest:\n            smallest = nums[i]\n    \n    return [largest, smallest]\n    \n    \n    \n    \n    \n    \n    \n    \ndef duplicate_number(nums):\n    '''\n    Given a list of n numbers,\n    return the index of the number which is duplicate.\n    '''\n    \n    if len(nums) < 2:\n        return None\n    \n    nums_map = {}\n    \n    for i in range(len(nums)):\n        if nums[i] in nums_map:\n            return nums[i]\n        \n        nums_map[nums[i]] = 1\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \n    \ndef first_and_last_same(nums):\n    '''\n    Given a list of n numbers,\n    find the smallest number and the largest number,\n    that both appear in the array.\n    '''\n    \n    if len(nums) < 2:\n        return None\n    \n    first_and_last = [None, None]\n    \n    for i in range(len(nums)):\n        if nums[i] == first_and_last[0]:\n            first_and_last[0] = nums[i]\n        \n        if nums[i] == first_and_last[1]:\n            first_and_last[1] = nums[i]\n    \n    return first_and_last\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef array_diff(a, b):\n    '''\n    Given two arrays,\n    return the array of all elements in array A that are not in array B.\n    '''\n    \n    result = []\n    \n    for i in range(len(a)):\n        if a[i] not in b:\n            resul",
        "num_ids": 37
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = ''\n    sorted_list = sorted(str(n))\n    for i in range(len(str(n))):\n        if i < len(str(n))-1 and str(n)[i] == str(n)[i+1]:\n            continue\n        elif i == len(str(n))-1 and str(n)[i] > str(n)[i-1]:\n            result += str(n)[i]\n        elif str(n)[i] > str(n)[i-1]:\n            result += str(n)[i]\n    return int(result)\n",
        "num_ids": 142
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1) * len(nums2):\n        return []\n    # heap queue\n    hq = []\n    # store all the tuples\n    res = []\n    i, j = 0, 0\n    # loop thru the array and sort the tuples\n    while i < len(nums1) and j < len(nums2):\n        heapq.heappush(hq, (nums1[i] + nums2[j], i, j))\n        i += 1\n        j += 1\n    # loop thru the k elemnts and pop\n    for _ in range(k):\n        res.append(heapq.heappop(hq))\n    return res\n",
        "num_ids": 190
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    return heapq.nsmallest(k, ((nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))))\n",
        "num_ids": 49
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) * len(nums2) < k:\n        return []\n    \n    first = [(nums1[0], nums2[0])]\n    second = []\n    visited = set()\n    while True:\n        while first and (first[0][0], first[0][1]) not in visited:\n            visited.add((first[0][0], first[0][1]))\n            second.append(first.pop(0))\n        if len(second) == k:\n            break\n        if len(first) == 0:\n            break\n        visited.add((second[-1][0], second[-1][1]))\n        second.pop()\n        for i in range(1, len(first)):\n            if (first[i-1][0], first[i-1][1]) not in visited and (first[i][0], first[i][1]) not in visited:\n                visited.add((first[i-1][0], first[i-1][1]))\n                second.append(first.pop(i-1))\n                second.append(first.pop(i-1))\n                second.append(first.pop(i-1))\n                break\n        if len(second) == k:\n            break\n    return second\n",
        "num_ids": 311
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == [] or nums2 == []:\n        return []\n    heap = []\n    for i in range(min(k,len(nums1))):\n        for j in range(min(k,len(nums2))):\n            if i < len(nums1) and j < len(nums2):\n                heapq.heappush(heap,(nums1[i]+nums2[j],i,j))\n            elif i < len(nums1) and j >= len(nums2):\n                heapq.heappush(heap,(nums1[i]+nums2[j-len(nums2)],i,j-len(nums2)))\n            elif i >= len(nums1) and j < len(nums2):\n                heapq.heappush(heap,(nums1[i-len(nums1)]+nums2[j],i-len(nums1),j))\n            elif i >= len(nums1) and j >= len(nums2):\n                heapq.heappush(heap,(nums1[i-len(nums1)]+nums2[j-len(nums2)],i-len(nums1),j-len(nums2)))\n    return [[nums1[i]+nums2[j],i,j] for (nums,i,j) in heap]\n",
        "num_ids": 350
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    i = 0\n    j = 0\n    res = []\n    heap = []\n    n1 = len(nums1)\n    n2 = len(nums2)\n    while i < n1 and j < n2:\n        heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n        i += 1\n        j += 1\n    while i < n1:\n        heapq.heappush(heap, (nums1[i], i, -1))\n        i += 1\n    while j < n2:\n        heapq.heappush(heap, (nums2[j], -1, j))\n        j += 1\n    while k > 0 and heap:\n        tmp = heapq.heappop(heap)\n        if tmp[2] == -1:\n            k -= 1\n        else:\n            res.append((nums1[tmp[1]], nums2[tmp[2]]))\n    return res\n",
        "num_ids": 246
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the top k pairs in\n    heap = []\n    pairs = []\n    # iterate over nums1\n    for i in range(len(nums1)):\n        # iterate over nums2\n        for j in range(len(nums2)):\n            # if the current element of nums1 and nums2 are the same, skip the rest\n            if nums1[i] == nums2[j]:\n                continue\n            # push the current pair onto the heap\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            # if the heap has reached k pairs, break out of the loop\n            if len(heap) == k:\n                break\n        # if the heap has reached k pairs, break out of the loop\n        if len(heap) == k:\n            break\n    # iterate over the heap and store the pairs in the pairs array\n    while heap:\n        pairs.append(heapq.heappop(heap)[1])\n    # return the array of pairs\n    return pairs\n",
        "num_ids": 279
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    result = []\n    if len(nums1)==0 or len(nums2)==0:\n        return result\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(h,(i+j,i,j))\n            if len(h)>k:\n                heapq.heappop(h)\n    while h and len(result)<k:\n        result.append(heapq.heappop(h))\n    return result\n",
        "num_ids": 130
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr = []\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            arr.append((nums1[i], nums2[j]))\n    arr.sort()\n    return arr[:k]\n",
        "num_ids": 109
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def median(i, j, k):\n        l = len(nums1)\n        m = len(nums2)\n        if l<m:\n            if k==0:\n                return -1\n            else:\n                return nums2[j]\n        elif m<l:\n            if k==0:\n                return -1\n            else:\n                return nums1[i]\n        else:\n            p = l+m-k\n            return nums1[i]+nums2[j]-nums1[p%l]+nums2[p%m]\n",
        "num_ids": 142
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k>len(nums1):\n        return [ [nums1[0], nums2[0]] ]\n    res = []\n    for i in range(k):\n        res.append([min(nums1[i], nums2[i]), max(nums1[i], nums2[i])])\n    return res\n    \n    \nprint(k_smallest_pairs([1, 3, 5, 7, 9], [2, 4, 6, 8], 3))",
        "num_ids": 119
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    prod_list = []\n    for i in range(length):\n        prod_list.append(list1[i][0]*list1[i][1])\n    return min(prod_list)\n",
        "num_ids": 62
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([x*y for (x,y) in list1])\n    \n",
        "num_ids": 22
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return(0)\n    else:\n        min_prod = list1[0][0] * list1[0][1]\n        for item in list1:\n            if item[0] * item[1] < min_prod:\n                min_prod = item[0] * item[1]\n        return(min_prod)\n        \ndef min_product_dict(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return(0)\n    else:\n        min_prod = list1[0][0] * list1[0][1]\n        for item in list1:\n            if item[0] * item[1] < min_prod:\n                min_prod = item[0] * item[1]\n        return(min_prod)\n        \ndef min_product_list(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return(0)\n    else:\n        min_prod = list1[0][0] * list1[0][1]\n        for i in range(1, len(list1)):\n            if list1[i][0] * list1[i][1] < min_prod:\n                min_prod = list1[i][0] * list1[i][1]\n        return(min_prod)\n",
        "num_ids": 115
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = None\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            if result == None or result > list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]:\n                result = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n    return result\n",
        "num_ids": 118
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    if len(list1) < 2:\n        return None\n    for i in range(0, len(list1), 2):\n        list2.append((list1[i], list1[i + 1]))\n    return min(list2)\n    \n",
        "num_ids": 69
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0]\n    for i in range(1,len(list1)):\n        temp = list1[i][0]*list1[i][1]\n        if temp < min_prod:\n            min_prod = temp\n    return min_prod\n",
        "num_ids": 73
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = [float('inf'), None]\n    for i in list1:\n        for j in list1:\n            if i[0] * j[1] < min_prod[0]:\n                min_prod[0] = i[0] * j[1]\n                min_prod[1] = [i, j]\n    return min_prod\n",
        "num_ids": 93
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    if len(list1) == 2:\n        return (list1[0][0] * list1[1][0], list1[0][0] * list1[1][1])\n    elif len(list1) == 1:\n        return (list1[0][0], list1[0][1])\n    else:\n        min1 = min_product_tuple(list1[:len(list1) // 2])\n        min2 = min_product_tuple(list1[len(list1) // 2:])\n        if min1 == None:\n            return min2\n        elif min2 == None:\n            return min1\n        else:\n            min1_x, min1_y = min1\n            min2_x, min2_y = min2\n            return (min(min1_x, min2_x), min(min1_y, min2_y))\n",
        "num_ids": 231
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x: x[1])\n    list1.sort(key = lambda x: x[0], reverse=True)\n    #print(list1)\n    list2 = [(list1[i], list1[i+1]) for i in range(len(list1)-1)]\n    #print(list2)\n    return max([x[0]*x[1] for x in list2])\n",
        "num_ids": 104
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    res = None\n    for a,b in list1:\n        if res is None:\n            res = (a,b)\n        else:\n            if a*b < res[0]*res[1]:\n                res = (a,b)\n    return res\n",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if(len(listval)==0):\n        return None\n    \n    min=listval[0]\n    for i in listval:\n        if(i<min):\n            min=i\n    return min\n",
        "num_ids": 54
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # base case, if empty list\n    if not listval:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    listval.sort()\n    return listval[0]\n",
        "num_ids": 19
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Your code here\n    \n    \n    # print(listval)\n    return min(listval)\n",
        "num_ids": 28
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval = sorted(listval)\n    return listval[0]\n",
        "num_ids": 20
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #if the list is empty, return None\n    if len(listval) == 0:\n        return None\n    #set the first value as the minimum value\n    minval = listval[0]\n    #find the next min value\n    for i in range(1,len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    #return the minimum value\n    return minval\n",
        "num_ids": 106
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = len(listval)\n    min_val = listval[0]\n    for i in range(1,l):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n",
        "num_ids": 63
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    print(min(listval))\n",
        "num_ids": 11
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.sub('(?!^)([A-Z]+)([a-z0-9]+)', r'\\1_\\2', word).split(\"_\")\n    words[0] = words[0].upper()\n    return \"\".join(words)\n",
        "num_ids": 66
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) <= 1:\n        return word\n    else:\n        return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\n",
        "num_ids": 49
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    list1 = []\n    list1 = word.split('_')\n    string = ''\n    string = string.join(list1)\n    new = re.sub(r'(.)([A-Z][a-z]+)', r'\\1 \\2', string)\n    return new\n",
        "num_ids": 71
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    list_of_words = word.split('_')\n    print list_of_words\n    if len(list_of_words) == 1:\n        return list_of_words[0]\n    else:\n        list_of_words.remove(list_of_words[0])\n        list_of_words.insert(0, list_of_words[0].title())\n    return ''.join(list_of_words)\n",
        "num_ids": 106
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    if word == None or word == \"\":\n        return None\n    elif word == \"\":\n        return \"\"\n    else:\n        words = word.split(\"_\")\n        for i, word in enumerate(words):\n            if i == 0:\n                result += word\n            else:\n                result += word.capitalize()\n        return result\n",
        "num_ids": 89
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # word = word.split(\"_\")\n    # word = [w.capitalize() for w in word]\n    # word = \"_\".join(word)\n    # return word\n    return re.sub(r'(?!^)_([a-zA-Z]+)', lambda m: m.group(1).upper(), word)\n",
        "num_ids": 82
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    def camelize(word):\n        first, *others = word\n        return first + ''.join(word.title() for word in others)\n",
        "num_ids": 37
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n",
        "num_ids": 73
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    head = word[0]\n    if head.isupper():\n        return word\n    else:\n        return word[0] + word[1:].lower()\n",
        "num_ids": 41
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    word[0] = word[0].capitalize()\n    return \"\".join(word)\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n    \n",
        "num_ids": 20
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) > 0:\n        l.sort()\n        l[0] = l[0] + 1\n        l[-1] = l[-1] - 1\n        return l\n    return l\n",
        "num_ids": 54
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [e for e in l if e % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i=0\n    while i < len(l):\n        if l[i]%2!=0:\n            l.pop(i)\n        else:\n            i+=1\n    return l\n",
        "num_ids": 50
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(1)\n    return l\n",
        "num_ids": 14
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i%2 == 1:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = [n for n in l if n % 2 == 0]\n    return new_l\n",
        "num_ids": 27
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [elem[n] for elem in list1]\n",
        "num_ids": 18
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [list1[n]]\n",
        "num_ids": 11
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [row[n] for row in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"Given index is out of bounds\")\n        return\n    if n == 0:\n        print(list1[0])\n        return\n    else:\n        new_list = []\n        for i in range(0,n):\n            new_list.append(list1[i])\n        for i in range(n, len(list1)):\n            new_list.append(list1[i])\n    print(new_list)\n",
        "num_ids": 116
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [n[n] for n in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    dict1 = {}\n    for tup in list1:\n        dict1[tup[n]] = tup\n    return dict1[sorted(dict1)[n-1]]\n",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be > 0\")\n    return [x[n - 1] for x in list1]\n    \nprint extract_nth_element([('John', 3, 1), ('Emma', 3, 2), ('Jemima', 1, 2), ('Jess', 2, 1)], 3)\nprint extract_nth_element([('John', 3, 1), ('Emma', 3, 2), ('Jemima', 1, 2), ('Jess', 2, 1)], -1)\nprint extract_nth_element([('John', 3, 1), ('Emma', 3, 2), ('Jemima', 1, 2), ('Jess', 2, 1)], 4",
        "num_ids": 167
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    res = [x[n] for x in list1]\n    return res\n",
        "num_ids": 21
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print \"Yes, value is present\"\n            break\n        else:\n            print \"No, value is not present\"\n            break\n        \ndef list_creation():\n    '''\n    Write a python function to create a list of five numbers between 1 and 10 with step 3\n    '''\n    list = []\n    for i in range(1,10,3):\n        list.append(i)\n    print \"List created: \",list\n",
        "num_ids": 37
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return 1\n    return 0\n",
        "num_ids": 28
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)<len(list2):\n        smaller=list1\n        larger=list2\n    else:\n        smaller=list2\n        larger=list1\n    for item in smaller:\n        if item in larger:\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n    \ndef permutations(l):\n    '''\n    Write a python function to generate all permutations of a list.\n    '''\n    from itertools import permutations\n    l = list(permutations(l))\n    return l\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlap = set(list1) & set(list2)\n    return len(overlap)\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(set(list1) & set(list2)) > 0\n",
        "num_ids": 20
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    a1=set(list1)\n    b1=set(list2)\n    if (len(a1 & b1)>0):\n        return 1\n    else:\n        return 0\n    ",
        "num_ids": 50
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    if len(list1)==0 or len(list2)==0:\n        return False\n    if list1[0]<=list2[0] and list1[-1]>=list2[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 2:\n        return 0\n    elif len(arr) == 3:\n        return arr[0] * arr[1] * arr[2]\n",
        "num_ids": 44
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    max_product = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    return max_pair\n",
        "num_ids": 102
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = [-1,-1]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > result[0]*result[1]:\n                result = [arr[i]*arr[j],i,j]\n    print result\n    \narr = [3,4,5,6,7,8,9]\nmax_Product(arr)",
        "num_ids": 109
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return (arr[-1] * arr[-2])\n",
        "num_ids": 23
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[len(arr)-1]*arr[len(arr)-2]\n    \ndef min_Product(arr): \n    '''\n    Write a python function to find a pair with lowest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[0]*arr[1]\n",
        "num_ids": 20
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > result:\n                result = arr[i] * arr[j]\n    return result\n    \ndef rotate_list(arr, n):\n    '''\n    Given a list of numbers, rotate the list by n places. Do not use extra space.\n    '''\n    for i in range(0, n):\n        temp = arr[0]\n        for j in range(0, len(arr) - 1):\n            arr[j] = arr[j + 1]\n        arr[len(arr) - 1] = temp\n    return arr\n    \ndef reverse_list(arr, start, end):\n    '''\n    Given a list of numbers, reverse the list from start to end. Do not use extra space.\n    '''\n    for i in range(0, (end - start) / 2):\n        temp = arr[start + i]\n        arr[start + i] = arr[end - i - 1]\n        arr[end - i - 1] = temp\n    return arr\n    \ndef move_zeros(arr):\n    '''\n    Given an array of numbers with both positive and negative elements, move all the negative elements to one side of the array.\n    '''\n    temp = 0\n    for i in range(0, len(arr)):\n        if arr[i] < 0:\n            arr[temp] = arr[i]\n            temp += 1\n    for i in range(temp, len(arr)):\n        arr[i] = 0\n    return arr\n    \ndef power_set(arr):\n    '''\n    Given an array of distinct integers, find the power set of the array.\n    '''\n    n = len(arr)\n    result = []\n    for i in range(0, 2 ** n):\n        subset = []\n        for j in range(0, n):\n            if (i >> j) % 2 == 1:\n                subset.append(arr[j])\n        result.append(subset)\n    return result\n    \ndef pair_with_targetsum(arr, target_sum):\n    '''\n    Given an array of numbers and a target number, find two numbers whose sum is equal to the target number.\n    '''\n    n = len(arr)\n    result = []\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target_sum:\n                result.append([arr[i], arr[j]])\n    return result\n    \ndef closest_number(arr, x):\n    '''\n    Given a sorted array of distinct integers and a number, find the closest number to the given number in the array.\n    '''\n    return arr[min(range(len(arr)), key = lambda i: abs(arr[i] - x))]\n    \ndef closest_pair(arr, n):\n    '''\n    Given a sorted array of numbers and a number, find a pair in the array whose sum is closest to the given number.\n    '''\n    if n <= 2:\n        return arr[0], arr[1]\n    mid = n / 2\n    a = closest_pair(arr, mid)\n    b = closest_pair(arr, n - mid)\n    return closest_pair_helper(arr, a[0], b[0], a[1], b[1])\n    \ndef closest_pair_helper(arr, a1, b1, a2, b2):\n    if arr[a1] + arr[a2] > arr[b1] + arr[b2]:\n        return b1, b2\n    else:\n        return a1, a2\n    \ndef find_median(arr):\n    '''\n    Given an array of numbers, find the median of the numbers.\n    '''\n    n = len(arr)\n    if n % 2 == 1:\n        return arr[n / 2]\n    else:\n        return (arr[n / 2] + arr[n / 2 - 1]) / 2.0\n    \ndef find_difference(arr, k):\n    '''\n    Given an array of numbers and a number k, find the maximum value of |arr[i] - k| for each element of the array.\n    '''\n    temp = []\n    for i in range(0, len(arr)):\n        temp.append(abs(arr[i] - k))\n    return max(temp)\n    \ndef find_median_two_sorted(arr1, arr2):\n    '''\n    Given two sorted arrays of numbers, find their median.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 > n2:\n        return find_median_two_sorted(arr2, arr1)\n    max_n = max(n1, n2)\n    min_n = min(n1, n2)\n    if min_n % 2 == 0:\n        return (arr1[min_n / 2] + arr1[min_n / 2 - 1]) / 2.0\n    else:\n        return arr1[min_n / 2]\n    \ndef find_missing_number(arr):\n    '''\n    Given an array of size n which contains integers from 1 to n, find the missing number.\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        total += arr[i]\n    return (total + len(arr)) / 2\n    \ndef find_missing_number_bitwise(arr):\n    '''\n    Given an array of size n which contains integers from 1 to n, find the missing number.\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        total ^= arr[i]\n    return total ^ len(arr)\n    \ndef find_sorted_rotation(arr1, arr2):\n    '''\n    Given two arrays of numbers, find if there is a sorted rotation of array2 in array1.\n    '''\n    if len(arr1)!= len(arr2):\n        return False\n    if len(arr1) == 0 or len(arr2) == 0:\n        return False\n    return arr1[0] < arr2[0] and arr1[len(arr1) - 1] > arr2[len(arr2) - 1]\n    \ndef find_rotation(arr1, arr2):\n    '''\n    Given two arrays of numbers, find if there is any rotation of array2 in array1.\n    '''\n    if len(arr1)!= len(arr2):\n        return False\n    if len(arr1) == 0 or len(arr2) == 0:\n        return False\n    return arr2[0] in arr1 and arr2[len(arr2) - 1] in arr1\n    \ndef find_rotation_2(arr1, arr2):\n    '''\n    Given two arrays of numbers, find if there is any rotation of array2 in array1.\n    '''\n    if len(arr1)!= len(arr2):\n        return False\n    if len(arr1) == 0 or len(arr2) == 0:\n        return False\n    temp1 = arr1[0]\n    temp2 = arr2[len(arr2) - 1]\n    for i in range(0, len(arr1)):\n        if arr1[i] == temp1:\n            if arr2[i] == temp2:\n                return True\n            else:\n                return False\n    return False\n    \ndef find_rotation_naive(arr1, arr2):\n    '''\n    Given two arrays of numbers, find if there is any rotation of array2 in array1.\n    '''\n    if len(arr1)!= len(arr2):\n        return False\n    if len(arr1) == 0 or len(arr2) == 0:\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0, len(arr1)):\n        if arr1[i] == arr2[i]:\n            return True\n    return False\n    \ndef is_number_balanced(num):\n    '''\n    Given a number, find if it is balanced or not.\n    '''\n    num_str = str(num)\n    if len(nu",
        "num_ids": 17
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    from functools import reduce\n    def max_Product(arr):\n        temp = []\n        for i in arr:\n            for j in arr:\n                temp.append(i*j)\n        return reduce(lambda x,y:max(x,y),temp)\n    return max_Product(arr)\n",
        "num_ids": 75
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max = 1\n    for i in range(len(arr)-1):\n        max *= arr[i]\n    return max\n",
        "num_ids": 39
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # base case\n    if len(arr) == 0:\n        return None\n    \n    # initilaize max product and second max product\n    max_product, second_max_product = arr[0], arr[1]\n",
        "num_ids": 55
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m=1\n    n=1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j]>m*n:\n                m=arr[i]\n                n=arr[j]\n            elif arr[i]*arr[j]>n*m and arr[j]!=0:\n                n=arr[j]\n    return m*n\n",
        "num_ids": 113
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = {}\n    for a,b in Input:\n        d[a] = 1\n        \n    for a,b in Input:\n        for key in d.keys():\n            if key in a:\n                if key == a:\n                    print a,b\n                else:\n                    print a,key\n                \n                \ndef min_sum(Input): \n    '''\n    Write a function to find the smallest sum of numbers in a list of tuples.\n    '''\n    sum = 0\n    for a,b in Input:\n        sum += b\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = set()\n    for tup in Input:\n        Output.add(tup[0])\n    return Output\n",
        "num_ids": 31
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) > 1:\n        CommonFirst = Input[0][0]\n        for i in Input:\n            if i[0]!= CommonFirst:\n                return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # dictionary of lists\n    dict1 = {} \n    for i in Input:\n        for j in i:\n            if j in dict1:\n                dict1[j].append(i)\n            else:\n                dict1[j]=[i]\n    # print(dict1)\n    # common first element in given list of tuple\n    for i in Input:\n        print(dict1[i[0]][0],end=' ')\n    print()\n",
        "num_ids": 110
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_tuples = {}\n    for index, val in enumerate(Input):\n        if val in grouped_tuples:\n            grouped_tuples[val].append(index)\n        else:\n            grouped_tuples[val] = [index]\n    return grouped_tuples\n",
        "num_ids": 72
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #checking for empty list\n    if Input == []:\n        print \"Empty list\"\n        return None\n    #creating a tuple with first element as the key\n    Input = [(s[0],s) for s in Input]\n    #creating a dict with first element as key\n    Input = {s[0]:s for s in Input}\n    #appending remaining elements to dict\n    for s in Input:\n        Input[s].extend(s[1:])\n    #returning the dict\n    return Input\n",
        "num_ids": 124
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_dict = {}\n    for each_tuple in Input:\n        if each_tuple[0] in new_dict:\n            new_dict[each_tuple[0]] += 1\n        else:\n            new_dict[each_tuple[0]] = 1\n    return new_dict\n",
        "num_ids": 74
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def group_tuples(Input): \n        '''\n        Write a function to find common first element in given list of tuple.\n        '''\n        for _ in Input:\n            print _[0]\n    \n    group_tuples(Input)\n",
        "num_ids": 27
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    N = len(Input)\n    if N < 2:\n        return None\n    \n    else:\n        Output = list()\n        for i in range(N):\n            for j in range(i + 1, N):\n                if Input[i][0] == Input[j][0]:\n                    Output.append(Input[i][0])\n        return Output\n",
        "num_ids": 87
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # if len(Input) > 0:\n    #     if len(Input[0]) > 0:\n    #         List_of_First_Elements = [t[0] for t in Input]\n    #         print List_of_First_Elements\n    #         print 'First element is ',max(set(List_of_First_Elements), key=List_of_First_Elements.count)\n    #     else:\n    #         print 'The input list is empty'\n    # else:\n    #     print 'The input list is empty'\n    if len(Input) > 0:\n        List_of_First_Elements = [t[0] for t in Input]\n        print List_of_First_Elements\n        print 'First element is ',max(set(List_of_First_Elements), key=List_of_First_Elements.count)\n    else:\n        print 'The input list is empty'\n",
        "num_ids": 224
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for each in lst:\n        if len(each) > max_len:\n            max_len = len(each)\n            max_num = each\n    return max_num\n    \ndef Find_Max_with_key(lst, key): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0][key])\n    for each in lst:\n        if len(each[key]) > max_len:\n            max_len = len(each[key])\n            max_num = each[key]\n    return max_num\n",
        "num_ids": 67
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for item in lst: \n        if len(item) == max(len(item) for item in lst):\n            return item\n",
        "num_ids": 35
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp = [lst[0]] \n    for i in lst: \n        if len(i) == len(temp[0]): \n            temp.append(i) \n    return temp[-1] \n",
        "num_ids": 56
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = 0\n    for i in lst:\n        if len(i)>Max:\n            Max=len(i)\n            word=i\n    return word\n",
        "num_ids": 42
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = 0\n    for i in range(0, len(lst)): \n        if len(lst[i]) > maximum: \n            maximum = len(lst[i])\n            maxi = i\n    return lst[maxi]\n",
        "num_ids": 63
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = lst[0]\n    for i in lst:\n        if len(i) > len(maximum):\n            maximum = i\n    return maximum\n",
        "num_ids": 40
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst)\n    max_len = lst[0]\n    for i in lst:\n        if len(i) > len(max_len):\n            max_len = i\n    print max_len\nFind_Max(['','a','b','c','d','e'])",
        "num_ids": 74
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_index = i\n            max_len = len(lst[i])\n    return max_index\n",
        "num_ids": 76
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlength = 0\n    maxpos = 0\n    for i in range(len(lst)):\n        if lst[i]> maxlength:\n            maxlength = lst[i]\n            maxpos = i\n    return maxpos, maxlength\n",
        "num_ids": 63
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i])>len(max_len):\n            max_len = lst[i]\n    return max_len\n",
        "num_ids": 60
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    for item in list1:\n        new_list.append(round(item))\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    # ***** TASK 3 START *****\n    # Use round() to round the numbers in a list and then compute the total sum\n    # and multiply this sum by the number of elements in the list.\n",
        "num_ids": 51
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = [round(x) for x in list1]\n    total = 0\n    for i in list2:\n        total += i\n    return total * len(list1)\n",
        "num_ids": 46
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = 0\n    for item in list1:\n        r = round(item)\n        s = s + r\n    print('Total sum is:'+ str(s) +'*'+ str(len(list1)))\n",
        "num_ids": 55
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(round, list1)) * len(list1)\n",
        "num_ids": 20
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for item in list1:\n        round_and_sum = round(item)\n        total_sum += round_and_sum\n    print('Sum of all items in the list is: ',total_sum,'* Length of the list: ', len(list1))\n    return total_sum\n",
        "num_ids": 76
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for n in list1:\n        total += n\n        rounded = round(n)\n        total *= len(list1)\n    return total\n",
        "num_ids": 42
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Your Code Here\n    tot = 0\n    for n in list1:\n        tot += n\n    tot *= len(list1)\n    return tot\n",
        "num_ids": 43
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    return total * len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    summ = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        summ += list1[i]\n",
        "num_ids": 46
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    assert type(n)==int,\"The input n must be an integer\"\n    assert n>0,\"The input n must be positive\"\n",
        "num_ids": 34
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            cube_sum = cube_sum + i**3\n    return cube_sum\n",
        "num_ids": 48
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            result += i ** 3\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(n) if i%2 == 0])\n",
        "num_ids": 24
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    x = 0\n    for i in range(n):\n        if i%2 == 0:\n            x += i**3\n    return x\n",
        "num_ids": 36
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(2,n+1,2))\n",
        "num_ids": 23
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum=sum+i**3\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    x = 0\n    for i in range(2, n): \n        if (i%2) == 0: \n            x += i**3\n    return x\nprint(cube_Sum(100))",
        "num_ids": 50
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n<0:\n        return None\n    return cube_Sum(n-2)+2*n*n\n",
        "num_ids": 51
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubecsum = 0\n    if n <= 0:\n        return cubecsum\n    else:\n        for i in range(1,n+1):\n            if i%2 == 0:\n                cubecsum = cubecsum + i**3\n        return cubecsum\n",
        "num_ids": 69
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_string = ''\n    for i in test_tup:\n        new_string = new_string +'' + i\n    return new_string\n",
        "num_ids": 38
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    i = 0\n    while i < len(test_tup):\n        result = ''.join(test_tup[i])\n        i += 1\n        print result\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    str_list = []\n    for i in test_tup:\n        str_list.append(str(i))\n    str_list = delimiter.join(str_list)\n    return str_list\n",
        "num_ids": 60
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = \"\"\n    for elem in test_tup:\n        res += elem + \",\"\n    return res[:-1]\n",
        "num_ids": 35
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] = str(test_tup[i])\n    return''.join(test_tup)\n",
        "num_ids": 47
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_list = []\n    for i in test_tup:\n        new_list.append(i)\n    new_str = new_list[0]\n    for i in range(1, len(new_list)):\n        new_str = new_str + delimiter + new_list[i]\n    return new_str\n",
        "num_ids": 82
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    list_of_string = []\n    for string in test_tup:\n        list_of_string.append(string)\n    print(list_of_string)\n    result = ''\n    for string in list_of_string:\n        result += string + ','\n    result = result[:-1]\n    print(result)\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0.0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    average = cube_sum / n\n    return average\n",
        "num_ids": 46
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i*i*i)\n    average = sum/n\n    return average\n",
        "num_ids": 44
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total = total + i * i * i\n    avg = total / n\n    return avg\n",
        "num_ids": 43
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    temp = [i**3 for i in range(1,n+1)]\n    total = sum(temp)\n    return float(total)/n\n",
        "num_ids": 37
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #print(\"Entering the function...\")\n    ans = 0\n    for i in range(1,n+1):\n        ans = ans + (i**3)\n    return ans/n\n",
        "num_ids": 48
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(n):\n        cubes.append(i*i*i)\n    return sum(cubes)/n\n",
        "num_ids": 39
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    L = [1]\n    for i in range(1,n+1):\n        L.append(L[i-1]*L[i-1]*L[i-1])\n    return sum(L)/n\n",
        "num_ids": 56
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0\n    for i in range(1, n+1):\n        average += i*i*i\n    average = average/n\n    return average\n",
        "num_ids": 40
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def compute_average(n):\n        total = 0\n        for i in range(1, n + 1):\n            total = total + i ** 3\n        average = total / n\n        return average\n",
        "num_ids": 49
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return find_Average_Of_Cube(n-1)*n\n",
        "num_ids": 33
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]\n    \ndef extract_rear_of_tuple(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return map(lambda x: x[-1], test_tuple)\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # unpack the tuple\n    for item in test_tuple:\n        print(item[-1])\n        \n    # return the list of tuple items\n    return test_tuple\n",
        "num_ids": 48
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(re.findall('(?<=\\()[^)]*', x)[0] for x in test_tuple)\n",
        "num_ids": 35
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for index in test_tuple:\n        print(index[-1])\n",
        "num_ids": 21
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # we can also use the zip() function\n    return tuple(elem[-1] for elem in test_tuple)\n",
        "num_ids": 35
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([t[-1] for t in test_tuple])\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output = []\n    for item in test_tuple:\n        output.append(item[-1])\n    return output\n",
        "num_ids": 32
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for l in list1:\n        if x in l:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for ele in list1: \n        if x in ele: \n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if x in list1[i]:\n            list2.append(list1[i])\n    return len(list2)\n",
        "num_ids": 51
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if x in list1[i:j+1]:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    l = 0\n    for item in list1:\n        if item == x:\n            l += 1\n    return l\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([1 for sublist in list1 if x in sublist])\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2==1]\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            nums[i] = None\n    return nums\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = list(filter(lambda x: x % 2, nums))\n    return odds\n",
        "num_ids": 25
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            nums.remove(i)\n    return nums\n",
        "num_ids": 34
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2]\n",
        "num_ids": 17
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            print(i)\n            #nums.remove(i)\n            \n    return nums\n    \n    \ndef map_fibonacci(num):\n    '''\n    Write a function to map a number to a fibonacci number.\n    '''\n    \n    if num == 1 or num == 2:\n        return 1\n    else:\n        return map_fibonacci(num-1) + map_fibonacci(num-2)\n    \n    \ndef filter_less_fib(num):\n    '''\n    Write a function to filter even fibonacci numbers.\n    '''\n    \n    fib = map_fibonacci(num-1) + map_fibonacci(num-2)\n    if fib % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef filter_fib(num):\n    '''\n    Write a function to filter fibonacci numbers.\n    '''\n    if filter_less_fib(num):\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 28
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # for num in nums:\n    #     if num % 2!= 0:\n    #         nums.remove(num)\n    return filter(lambda x: x % 2!= 0, nums)\n",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.compile('\\d{2}-\\d{2}-\\d{4}')\n    return date_format.sub('\\g<2>/\\g<1>/\\g<3>', dt)\n",
        "num_ids": 61
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = dt.split('-')\n    # print (date_list)\n    return (date_list[2] + '-' + date_list[1] + '-' + date_list[0])\n",
        "num_ids": 54
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_lst = dt.split('-')\n    date_lst[2] = str(int(date_lst[2]) + 2000)\n    new_date = '-'.join(date_lst)\n    return new_date\n",
        "num_ids": 62
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match('^\\d{4}-\\d{2}-\\d{2}$', dt):\n        dt = dt[6:10] + '/' + dt[4:6] + '/' + dt[0:4]\n        return dt\n    elif re.match('^\\d{2}-\\d{2}-\\d{4}$', dt):\n        dt = dt[6:10] + '/' + dt[4:6] + '/' + dt[2:4]\n        return dt\n    else:\n        return None\n",
        "num_ids": 147
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    t = dt.split('-')\n    return '{}-{}-{}'.format(t[2], t[1], t[0])\n",
        "num_ids": 40
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Your code here\n    #print(type(dt))\n    d,m,y = dt.split('-')\n    return '{}-{}-{}'.format(d[2:], m, y)\n",
        "num_ids": 56
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    new_date = date[2]+'-'+date[1]+'-'+date[0]\n    return new_date\n",
        "num_ids": 43
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert to dd-mm-yyyy format\n    d = {'01':'1','02':'2','03':'3','04':'4','05':'5','06':'6','07':'7','08':'8','09':'9','10':'10','11':'11','12':'12'}\n    month = dt[4:6]\n    day = d[dt[6:8]]\n    year = dt[0:4]\n    date = year+'-'+month+'-'+day\n    return date\n",
        "num_ids": 134
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # def get_date_format(dt):\n    #     year = dt[:4]\n    #     month = dt[5:7]\n    #     day = dt[8:10]\n    #     return year + '-' + month + '-' + day\n    # dt = '2018-05-01'\n    # print(get_date_format(dt))\n    # Output: 05-01-2018\n    \n    # method 1\n    # dt_list = list(map(int, dt.split('-')))\n    # day, month, year = dt_list[2], dt_list[1], dt_list[0]\n    # return str(day) + '-' + str(month) + '-' + str(year)\n    \n    # method 2\n    # month_dict = {'01': 'January', '02': 'Feburary', '03': 'March', '04': 'April', '05': 'May', '06': 'June', '07': 'July', '08': 'Augest', '09': 'September', '10': 'October', '11': 'November', '12': 'December'}\n    # month = dt[5:7]\n    # day = dt[8:10]\n    # year = dt[:4]\n    # return day + '-' + month_dict[month] + '-' + year\n    \n    # method 3\n    dt_list = dt.split('-')\n    day, month, year = dt_list[0], dt_list[1], dt_list[2]\n    return day + '-' + month + '-' + year\n    \ndef set_object_attributes(self, name, attributes):\n    '''\n    Write a function to set a set of attributes on an object.\n    '''\n    # methods 1\n    # setattr(self, name, attributes)\n    \n    # methods 2\n    # if not hasattr(self, name):\n    #     self.__dict__[name] = attributes\n    # else:\n    #     raise AttributeError\n    \n    # methods 3\n    if hasattr(self, name):\n        raise AttributeError\n    else:\n        self.__dict__[name] = attributes\n",
        "num_ids": 104
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt == '0000-00-00':\n        return None\n    pattern = re.compile('([0-9]{4})-([0-9]{2})-([0-9]{2})')\n    result = pattern.search(dt).groups()\n    return '-'.join(result)\n",
        "num_ids": 77
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h+1\n    while h >= 1:\n        for i in range(h,n):\n            val = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > val:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = val\n        h = int(h/3)\n    return my_list\n",
        "num_ids": 134
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    interval = n/2\n    while interval > 0:\n        for i in range(interval, n):\n            temp = my_list[i]\n            j = i\n            while j >= interval and my_list[j - interval] > temp:\n                my_list[j] = my_list[j - interval]\n                j = j - interval\n            my_list[j] = temp\n        interval = interval / 2\n    return my_list\n",
        "num_ids": 120
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #TODO: finish this function.\n    pass\n    \n    \nif __name__ == \"__main__\":\n    sorted_list = shell_sort([9, 8, 7, 6, 5, 4, 3, 2, 1])\n    print(sorted_list)",
        "num_ids": 68
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size//2\n    while gap > 0:\n        for i in range(gap, size):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n",
        "num_ids": 115
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n/2\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    \n    \n    '''\n    SHELL SORT:\n    \n    GIVEN A GIVEN ARRAY A\n    1. Find the maximum number in the array A\n    2. Find the maximum number as a gap for the shell sort\n    3. Use the maximum number as the gap for the next pass of the shell sort\n    4. Divide the array A into sub arrays, one sub array for each gap\n    5. Run the shell sort on each sub array\n    6. Re-arrange the array to its final state\n    \n    \n    '''\n    \n    #Find the maximum number in the array\n    max_num = max(my_list)\n    #Find the maximum number as a gap for the shell sort\n    gap = int(len(my_list)/2)\n    #Run the shell sort on each sub array\n    while gap > 0:\n        for i in range(gap,len(my_list)):\n            #Use the maximum number as the gap for the next pass of the shell sort\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        #Re-arrange the array to its final state\n        gap = int(gap/2)\n    return my_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1887
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert type(my_list) == list\n    assert len(my_list) > 1\n",
        "num_ids": 24
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_val = my_list[i]\n            j = i\n            while j >= gap and current_val < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_val\n        gap //= 2\n    return my_list\n",
        "num_ids": 119
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(a and b for a, b in zip(test_tup1, test_tup2)),\n            tuple(a or b for a, b in zip(test_tup1, test_tup2)),\n            tuple(a == b for a, b in zip(test_tup1, test_tup2)),\n            tuple(a!= b for a, b in zip(test_tup1, test_tup2)),\n            tuple(a == None for a in test_tup1),\n            tuple(a!= None for a in test_tup1),\n            tuple(a is None for a in test_tup1),\n            tuple(a is not None for a in test_tup1),\n            tuple(a is False for a in test_tup1),\n            tuple(a is True for a in test_tup1),\n            tuple(a is not False for a in test_tup1),\n            tuple(a is not True for a in test_tup1))\n",
        "num_ids": 253
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(map(lambda x: x[0] and x[1], zip(test_tup1, test_tup2)))\n",
        "num_ids": 35
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (list(zip(test_tup1, test_tup2))[0][0], list(zip(test_tup1, test_tup2))[1][0])\n    \n",
        "num_ids": 50
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return ((a, b) for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    and_tup = tuple(a&b for a,b in zip(test_tup1, test_tup2))\n    return and_tup\n",
        "num_ids": 48
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n",
        "num_ids": 34
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([x and y for x,y in zip(test_tup1,test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #f(x) = ax^2 + bx + c\n    #x = -b / (2 * a)\n    return -b / (2 * a)\n",
        "num_ids": 42
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b / (2 * a)\n    ",
        "num_ids": 14
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n    ",
        "num_ids": 6
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((b**2)-(4*a*c))**0.5\n",
        "num_ids": 21
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n",
        "num_ids": 30
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # the equation of the parabola is given by ax^2 + bx + c = 0\n    # using the quadratic formula we can get the values of x and y for a given x, b and c\n    # the equation of the parabola has the form y = ax^2 + bx + c\n    # we will be using the quadratic formula to get the values of x and y for a given x, b and c\n    # the quadratic formula is given by a*x^2 + b*x + c = 0\n    # a*x^2 = b*x + c\n    # a*x^2 - b*x + c = 0\n    # a*x^2 - 2b*x + c = 0\n    # a*x^2 - 2b*x + c = 0\n    # a*x^2 - 2b*x + c = -2b*x + c\n    # a*x^2 + b*x + c = -2b*x + c\n    # a*x^2 + b*x + c = -b*x + c\n    # a*x^2 + b*x + c = b^2*x + 2b*x + c\n    # a*x^2 + b*x + c = b^2*x + b*x + c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^2*x - b*x - c\n    # a*x^2 + b*x + c = b^2*x + b*x + c - b^",
        "num_ids": 2009
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0 and b!= 0:\n        raise ValueError(\"Directrix cannot be calculated\")\n    x = -(b / 2 / a) \n    return x\n",
        "num_ids": 43
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b / (2 * a)\n",
        "num_ids": 13
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4 * a * c \n    if delta < 0: \n        return None\n    else:\n        x1 = (-b + math.sqrt(delta)) / (2 * a)\n        x2 = (-b - math.sqrt(delta)) / (2 * a)\n        return (x1, x2)\n",
        "num_ids": 87
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # https://en.wikipedia.org/wiki/Directrix#The_formular_for_finding_the_directrix\n    # f(x) = ax^2 + bx + c\n    # a = 1, b = -2, c = 5\n    # d = b^2 - 4ac\n    # x = (-b + sqrt(d)) / 2a\n    # x = 1/2 * (-2 + sqrt(5))\n    # x = -1/2\n    return -(b/2)\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    # https://en.wikipedia.org/wiki/Vertex\n    # f(x) = ax^2 + bx + c\n    # a = 1, b = -2, c = 5\n    # x = (c - b) / a\n    # x = 3\n    return c/a\n",
        "num_ids": 72
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) <= len(list2):\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                return True\n    else:\n        for i in range(len(list2)):\n            if list2[i] in list1:\n                return True\n    return False\n",
        "num_ids": 82
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))\n",
        "num_ids": 18
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(set(list2))) > 0\n",
        "num_ids": 22
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1+base2) * height\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2) * height\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = ((base1 + base2)/2) * height\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)*height)/2\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2.0\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height/2.0*(base1+base2)\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2.0)*height\n    \ndef median_rectangle(base1,base2,height):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return base1*base2\n    \ndef median_rhombus(diagonal1,diagonal2,height):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return (diagonal1*diagonal2)/2.0\n    \ndef median_square(side):\n    '''\n    Write a function to find the median length of a square.\n    '''\n    return side*side\n",
        "num_ids": 8
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * base1 + 1/2 * base2\n",
        "num_ids": 18
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number >= arr[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if number > arr[-1] else False\n",
        "num_ids": 16
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if arr[-1] < number else False\n",
        "num_ids": 16
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] < number:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for item in arr:\n        if item > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError('arr must be a list')\n    if not isinstance(number, int):\n        raise TypeError('number must be a int')\n    for i in arr:\n        if i < number:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n        else:\n            return False\n",
        "num_ids": 35
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall('a[ab]+', text)\n",
        "num_ids": 17
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = re.compile(r'ab+')\n    m = pat.search(text)\n    if m:\n        print(m.group())\n    else:\n        print('Nothing found')\n",
        "num_ids": 50
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r'ab+', text))\n",
        "num_ids": 18
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"ab+\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"ab*\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"ab?\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b)*\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b)+\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b)*\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){2}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){3}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){4}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){5}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){6}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){7}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){8}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){9}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){10}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){11}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){12}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){13}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){14}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){15}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){16}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){17}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){18}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){19}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){20}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){21}\",text):\n        print \"Match Found\"\n    else:\n        print \"Match Not Found\"\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a(b){22}\",text)",
        "num_ids": 19
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r\"a.*?b\", text)\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's. \n    This time, the result should not match if it has other than a or b.\n    '''\n    return re.search(r\"a[^b]*b\", text)\n",
        "num_ids": 21
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    p = re.compile(r'ab+')\n    return p.match(text)\n",
        "num_ids": 25
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_pattern = re.compile(r'.*a.*b')\n    match = a_pattern.match(text)\n    if match:\n        print(match.group())\n    else:\n        print(\"NO MATCH\")\n",
        "num_ids": 57
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+', text)\n",
        "num_ids": 16
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return n % 10\n    elif n == 0 :\n        return 0\n    else :\n        return -1 * (n % -10)\n",
        "num_ids": 43
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    if len(n) == 1 :\n        return n\n    return n[-1]\n",
        "num_ids": 32
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    d = n % 10\n    if (n // 10 == 0) :\n        return d\n    else :\n        return last_Digit(n // 10)\n",
        "num_ids": 40
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # print n%10\n    return n%10\n",
        "num_ids": 15
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n    \ndef isPalindrome(n) :\n    '''\n    Write a python function to check whether a number is a palindrome.\n    '''\n    return last_Digit(n) == last_Digit(n//10)\n    \ndef find_palindromes(n) :\n    '''\n    Write a python function to find all the palindromes in a given range.\n    '''\n    palindromes = []\n    for i in range(n, 0, -1) :\n        if isPalindrome(i) :\n            palindromes.append(i)\n    return palindromes\n    \ndef find_all_palindromes(n) :\n    '''\n    Write a python function to find all the palindromes in a given range.\n    '''\n    return [i for i in range(n, 0, -1) if isPalindrome(i)]\n    \ndef count_even_digits(n) :\n    '''\n    Write a python function to count the number of even digits in a number.\n    '''\n    count = 0\n    while n > 0 :\n        n = n // 10\n        if n % 2 == 0 :\n            count += 1\n    return count\n    \ndef count_digits(n) :\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\n    \ndef count_even_digits_in_a_number(n) :\n    '''\n    Write a python function to count the number of even digits in a number.\n    '''\n    return count_even_digits(n)\n    \ndef count_digits_in_a_number(n) :\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return count_digits(n)\n    \ndef reverse(n) :\n    '''\n    Write a python function to reverse a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef is_prime(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2 :\n        return False\n    for i in range(2, n) :\n        if n % i == 0 :\n            return False\n    return True\n    \ndef generate_primes(n) :\n    '''\n    Write a python function to generate all primes numbers in a given range.\n    '''\n    return [i for i in range(2, n) if is_prime(i)]\n    \ndef count_primes(n) :\n    '''\n    Write a python function to count the number of primes numbers in a given range.\n    '''\n    return len(generate_primes(n))\n    \ndef count_primes_in_a_number(n) :\n    '''\n    Write a python function to count the number of primes numbers in a given range.\n    '''\n    return count_primes(n)\n    \ndef is_perfect(n) :\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    return sum(i for i in range(1, n//2) if n % i == 0) == n\n    \ndef is_perfect_in_a_number(n) :\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    return n == sum(range(1, n//2 + 1))\n    \ndef is_abundant(n) :\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    return sum(i for i in range(1, n//2 + 1) if n % i == 0) > n\n    \ndef is_abundant_in_a_number(n) :\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    return n > sum(range(1, n//2 + 1))\n    \ndef sum_of_divisors(n) :\n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    return sum([i for i in range(1, n//2 + 1) if n % i == 0])\n    \ndef sum_of_divisors_in_a_number(n) :\n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    return n * (n + 1) // 2\n    \ndef sum_of_factors(n) :\n    '''\n    Write a python function to find the sum of all the factors of a given number.\n    '''\n    return sum([i for i in range(1, n//2 + 1) if n % i == 0])\n    \ndef sum_of_factors_in_a_number(n) :\n    '''\n    Write a python function to find the sum of all the factors of a given number.\n    '''\n    return n * (n - 1) // 2\n    \ndef is_perfect_square(n) :\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    return n in generate_perfect_squares(n // 2)\n    \ndef is_perfect_square_in_a_number(n) :\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    return n in generate_perfect_squares(n // 2)\n    \ndef generate_perfect_squares(n) :\n    '''\n    Write a python function to find all the perfect square numbers in a given range.\n    '''\n    return [i**2 for i in range(n, 0, -1) if i**2 == i]\n    \ndef is_abundant(n) :\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    return sum(i for i in range(1, n//2 + 1) if n % i == 0) > n\n    \ndef is_abundant_in_a_number(n) :\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    return n > sum(range(1, n//2 + 1))\n    \ndef sum_of_abundant_numbers(n) :\n    '''\n    Write a python function to find the sum of all the abundant numbers in a given range.\n    '''\n    return sum(generate_abundant_numbers(n))\n    \ndef generate_abundant_numbers(n) :\n    '''\n    Write a python function to find the sum of all the abundant numbers in a given range.\n    '''\n    return [i for i in range(n, 0, -1) if is_abundant(i)]\n    \ndef sum_of_abundant_numbers_in_a_number(n) :\n    '''\n    Write a python function to find the sum of all the abundant numbers in a given range.\n    '''\n    return n * (n + 1) // 2\n    \ndef is_deficient(n) :\n    '''\n    Write a python function to check whether a number is deficient or not.\n    '''\n    return sum(i for i in range(1, n//2 + 1) if n % i == 0) < n\n    \ndef is_deficient_in_a_number(n) :\n    '''\n    Write a python function to check whether a number is deficient or not.\n    '''\n    return n < sum(range(1, n//2 + 1))\n    \ndef sum_of_deficient_numbers(n) :\n    '''\n    Write a python function to find the sum of all the deficient numbers in a given range.\n    '''\n    return sum(generate_deficient_numbers(n))\n    \ndef generate_deficient_numbers(n) :\n    '''\n    Write a python function to find the sum of all the deficient numbers in a given range.\n    '''\n    return [i for i in range(n, 0, -1) if is_deficient(i)]\n    \ndef sum_of_deficient_numbers_in_a_number(n) ",
        "num_ids": 49
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \ndef neg_nos2(list2):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list2 if x < 0]\n    \ndef neg_nos3(list3):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list3 if x < 0]\n    \ndef neg_nos4(list4):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list4 if x < 0]\n    \ndef neg_nos5(list5):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list5 if x < 0]\n    \ndef neg_nos6(list6):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list6 if x < 0]\n    \ndef neg_nos7(list7):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list7 if x < 0]\n    \ndef neg_nos8(list8):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list8 if x < 0]\n    \ndef neg_nos9(list9):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list9 if x < 0]\n    \ndef neg_nos10(list10):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list10 if x < 0]\n    \ndef neg_nos11(list11):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list11 if x < 0]\n    \ndef neg_nos12(list12):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list12 if x < 0]\n    \ndef neg_nos13(list13):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list13 if x < 0]\n    \ndef neg_nos14(list14):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list14 if x < 0]\n    \ndef neg_nos15(list15):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list15 if x < 0]\n    \ndef neg_nos16(list16):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list16 if x < 0]\n    \ndef neg_nos17(list17):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list17 if x < 0]\n    \ndef neg_nos18(list18):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list18 if x < 0]\n    \ndef neg_nos19(list19):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list19 if x < 0]\n    \ndef neg_nos20(list20):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list20 if x < 0]\n    \ndef neg_nos21(list21):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list21 if x < 0]\n    \ndef neg_nos22(list22):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list22 if x < 0]\n    \ndef neg_nos23(list23):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list23 if x < 0]\n    \ndef neg_nos24(list24):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list24 if x < 0]\n    \ndef neg_nos25(list25):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list25 if x < 0]\n    \ndef neg_nos26(list26):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list26 if x < 0]\n    \ndef neg_nos27(list27):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list27 if x < 0]\n    \ndef neg_nos28(list28):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list28 if x < 0]\n    \ndef neg_nos29(list29):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list29 if x < 0]\n    \ndef neg_nos30(list30):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list30 if x < 0]\n    \ndef neg_nos31(list31):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list31 if x < 0]\n    \ndef neg_nos32(list32):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list32 if x < 0]\n    \ndef neg_nos33(list33):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list33 if x < 0]\n    \ndef neg_nos34(list34):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list34 if x < 0]\n    \ndef neg_nos35(list35):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list35 if x < 0]\n    \ndef neg_nos36(list36):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list36 if x < 0]\n    \ndef neg_nos37(list37):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list37 if x < 0]\n    \ndef neg_nos38(list38):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list38 if x < 0]\n    \ndef neg_nos39(list39):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list39 if x < 0]\n    \ndef neg_nos40(list40):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list40 if x < 0]\n    \ndef neg_nos41(list41):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list41 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 33
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for x in list1:\n        if x < 0:\n            print(x)\n",
        "num_ids": 23
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i<0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1]\n",
        "num_ids": 13
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            return i\n            \ndef pos_nos(list2):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    for i in list2:\n        if i > 0:\n            return i\n            \ndef list_avg(list1):\n    '''\n    Write a python function to return the average of a list.\n    '''\n    x = 0\n    for i in list1:\n        x += i\n    return x/len(list1)\n    \ndef list_sum(list1):\n    '''\n    Write a python function to return the sum of a list.\n    '''\n    x = 0\n    for i in list1:\n        x += i\n    return x\n    \ndef list_max(list1):\n    '''\n    Write a python function to return the maximum value in a list.\n    '''\n    x = list1[0]\n    for i in list1:\n        if i > x:\n            x = i\n    return x\n    \ndef list_min(list1):\n    '''\n    Write a python function to return the minimum value in a list.\n    '''\n    x = list1[0]\n    for i in list1:\n        if i < x:\n            x = i\n    return x\n    \ndef list_dup(list1):\n    '''\n    Write a python function to return the duplicate values in a list.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n    \ndef list_sort(list1):\n    '''\n    Write a python function to return the sorted list.\n    '''\n    list1.sort()\n    return list1\n    \ndef list_map(list1, func):\n    '''\n    Write a python function to return the mapped list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(func(i))\n    return list2\n    \ndef list_filter(list1, func):\n    '''\n    Write a python function to return the filtered list.\n    '''\n    list2 = []\n    for i in list1:\n        if func(i):\n            list2.append(i)\n    return list2\n    \ndef list_zip(*args):\n    '''\n    Write a python function to return the zipped list.\n    '''\n    zipped = zip(*args)\n    return zipped\n    \ndef list_unzip(zipped):\n    '''\n    Write a python function to unzip a list.\n    '''\n    list2 = []\n    for i in zipped:\n        list2.append(list(i))\n    return list2\n    \ndef list_chunk(list1, n):\n    '''\n    Write a python function to return the chunked list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i%n == 0:\n            list2.append(list1[i:i+n])\n    return list2\n    \ndef list_cycle(list1):\n    '''\n    Write a python function to return the cycled list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef list_rev(list1):\n    '''\n    Write a python function to return the reversed list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[-1-i])\n    return list2\n    \ndef list_sub(list1, list2):\n    '''\n    Write a python function to return the substracted list.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        list3.append(list1[i] - list2[i])\n    return list3\n    \ndef list_add(list1, list2):\n    '''\n    Write a python function to return the added list.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        list3.append(list1[i] + list2[i])\n    return list3\n    \ndef list_product(list1, list2):\n    '''\n    Write a python function to return the multiplied list.\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        list3.append(list1[i] * list2[i])\n    return list3\n    \ndef list_reduce(list1, func, start=0):\n    '''\n    Write a python function to return the reduced list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(start)\n        else:\n            list2.append(func(list2[i-1], list1[i]))\n    return list2\n    \ndef list_sort_def(list1):\n    '''\n    Write a python function to return the sorted list.\n    '''\n    list1.sort()\n    return list1\n    \ndef list_sort_def2(list1):\n    '''\n    Write a python function to return the sorted list.\n    '''\n    return sorted(list1)\n    \ndef list_sort_def3(list1):\n    '''\n    Write a python function to return the sorted list.\n    '''\n    return sorted(list1, reverse=True)\n    \ndef list_length(list1):\n    '''\n    Write a python function to return the length of a list.\n    '''\n    return len(list1)\n    \ndef list_append(list1, list2):\n    '''\n    Write a python function to return the appended list.\n    '''\n    list1.append(list2)\n    return list1\n    \ndef list_insert(list1, pos, list2):\n    '''\n    Write a python function to return the inserted list.\n    '''\n    list1.insert(pos, list2)\n    return list1\n    \ndef list_pop(list1, pos):\n    '''\n    Write a python function to return the poped list.\n    '''\n    list1.pop(pos)\n    return list1\n    \ndef list_remove(list1, val):\n    '''\n    Write a python function to return the removed list.\n    '''\n    list1.remove(val)\n    return list1\n    \ndef list_reverse(list1):\n    '''\n    Write a python function to return the reversed list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef list_range(list1):\n    '''\n    Write a python function to return the range of a list.\n    '''\n    for i in range(len(list1)):\n        if i == 0:\n            list2 = [list1[i]]\n        else:\n            list2.append(list1[i])\n    return list2\n    \ndef list_zip_def(list1, list2):\n    '''\n    Write a python function to return the zipped list.\n    '''\n    zipped = zip(list1, list2)\n    return zipped\n    \ndef list_zip_def2(list1, list2, list3):\n    '''\n    Write a python function to return the zipped list.\n    '''\n    zipped = zip(list1, list2, list3)\n    return zipped\n    \ndef list_zip_def3(list1, list2, list3, list4):\n    '''\n    Write a python function to return the zipped list.\n    '''\n    zipped = zip(list1, list2, list3, list4)\n    return zipped\n    \ndef list_unzip(zipped):\n    '''\n    Write a python function to return the unzipped list.\n    '''\n    list2 = []\n    for i in zipped:\n        list2.append(list(i))\n    return list2\n    \ndef list_first(list1):\n    '''\n    Write a python function to return the firs",
        "num_ids": 12
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n    \ndef neg_nos_2(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print i\n            \ndef neg_nos_3(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print i,\n",
        "num_ids": 22
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\nprint(neg_nos([1,2,3,4,-5,-6]))\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: int(x) % 2 == 0, str1))\n",
        "num_ids": 26
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda ch: ch % 2 == 0, str1))\n",
        "num_ids": 23
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "num_ids": 48
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # # method 1\n    # str1 = str1.replace(\" \", \"\")\n    # if len(str1) % 2!= 0:\n    #     return str1[0:len(str1)-1:2]\n    # return str1\n",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    output = \"\"\n    for i in range(len(str1)):\n        if(i % 2 == 0):\n            output += str1[i]\n    return output\n",
        "num_ids": 43
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for letter in str1:\n        if not letter.isalpha():\n            continue\n        elif (ord(letter) + 1) % 2 == 0:\n            new_str += letter\n    return new_str\n    \ndef remove_duplicate(str1):\n    '''\n    Write a function to remove duplicate characters in a string.\n    '''\n    return \"\".join(dict.fromkeys(str1))\n",
        "num_ids": 17
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1[::2]:\n        str1 = str1.replace(i,\"\")\n    return str1\n",
        "num_ids": 31
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for c in str1:\n        if ord(c) % 2 == 0:\n            new_str += c\n    return new_str\n",
        "num_ids": 42
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if(i % 2 == 0):\n            result += str1[i]\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1[i] for i in range(len(str1)) if i%2 == 0)\n",
        "num_ids": 31
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    list_len = len(test_list)\n    count = 0\n    for i in range(0, list_len):\n        for j in range(i+1, list_len):\n            if (test_list[i], test_list[j]) == (test_list[j], test_list[i]):\n                count += 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0] < i[1]:\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pair_count = 0\n",
        "num_ids": 9
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i > j:\n                if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                    bidirectional_pairs += 1\n    return bidirectional_pairs\n",
        "num_ids": 107
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in test_list:\n        if i[0] in d1:\n            d1[i[0]] += 1\n        else:\n            d1[i[0]] = 1\n",
        "num_ids": 60
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_list = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            tuple_list.append((test_list[i], test_list[j]))\n    return tuple_list\n",
        "num_ids": 72
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #from collections import Counter\n    #\n    #count = Counter(test_list)\n    #\n    #count = [(k, v) for k, v in count.iteritems() if v > 1]\n    #\n    #return count\n    #\n    #for k, v in count:\n    #    print k, v\n    \n    #print [k for k, v in count.iteritems() if v > 1]\n    #print [k for k, v in count.iteritems() if v > 1]\n    #print [k for k, v in count.iteritems() if v > 1]\n",
        "num_ids": 145
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # if the length of the list is less than 2, return 0\n    if len(test_list) < 2:\n        return 0\n",
        "num_ids": 34
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward = 0\n    reverse = 0\n    for t in test_list:\n        if t[0] < t[1]:\n            forward += 1\n        elif t[0] > t[1]:\n            reverse += 1\n    print \"forward: \" + str(forward)\n    print \"reverse: \" + str(reverse)\n",
        "num_ids": 80
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward = {}\n    backward = {}\n    for item in test_list:\n        if item[1] == 'F':\n            if item[0] in forward:\n                forward[item[0]] += 1\n            else:\n                forward[item[0]] = 1\n        else:\n            if item[0] in backward:\n                backward[item[0]] += 1\n            else:\n                backward[item[0]] = 1\n    return forward, backward\n",
        "num_ids": 113
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # for i in xrange(0, len(L), 2):\n    #     L[i] = L[i] * 10 + L[i + 1]\n    #     print(L[i])\n    return int(''.join(str(L[i]) for i in xrange(0, len(L), 2)))\n",
        "num_ids": 79
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ret = 0\n    for x in L:\n        ret = ret * 10 + x\n    return ret\n",
        "num_ids": 27
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    answer = 0\n    for item in L:\n        answer = answer * 10 + item\n    return answer\n",
        "num_ids": 27
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    temp = \"\"\n    for i in L:\n        temp += str(i)\n    return int(temp)\n",
        "num_ids": 29
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join([str(i) for i in L]))\n",
        "num_ids": 20
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    try:\n        return int(''.join(map(str, L)))\n    except:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join_num_list(L):\n        return int(''.join(str(num) for num in L))\n    return join_num_list(L)\n",
        "num_ids": 41
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result += L[i] * (10**(len(L)-i-1))\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    elif L == [1]:\n        return L[0]\n    else:\n        return reduce(lambda x, y: x * 10 + y, L)\n",
        "num_ids": 51
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p = re.compile(r'(?<=\\s)\\w+')\n    matches = p.findall(text)\n    # print(matches)\n    # print(len(matches))\n    return matches\n",
        "num_ids": 57
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(?<=\\s)\\b(?:(?:never|no(?:(?:r|s)?|ve|ll)?|dont|can\\'t|wont|cannot|couldnt|won\\'t|wouldnt|dont)(?:(?:r|s)?|ve|ll)?|(?:no(?:(?:r|s)?|ve|ll)?|dont|can\\'t|wont|cannot|couldnt|won\\'t|wouldnt|dont)(?:(?:r|s)?|ve|ll)?|\\bnot\\b|n\\'t)\\b[^\\s]+\\b')\n    print(re.findall(pattern,text))\nfind_adverb_position('Never ever has been a better year than 1980')\n",
        "num_ids": 187
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    pattern = re.compile(r'\\w*adverb')\n    matches = re.finditer(pattern, text)\n    return [(match.start(), match.end(), match.group()) for match in matches]\n",
        "num_ids": 56
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    r = re.compile('adverb', re.IGNORECASE)\n    matches = r.finditer(text)\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n    print(positions)\n",
        "num_ids": 64
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(.*[a-zA-Z])(.*\\b)(in)(.*)')\n    words = re.findall(pattern,text)\n    print words\n",
        "num_ids": 50
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    i=0\n    regex = r'\\b\\w+\\b'\n    r = re.findall(regex, text)\n    while(i<len(r)):\n        if (r[i]=='adverb'):\n            return i+1\n        i+=1\n    return -1\n",
        "num_ids": 77
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #pattern = re.compile('ADVERB', re.IGNORECASE)\n    pattern = re.compile('ADVERB', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        print \"Position:\", match.start(), match.end()\n        print \"Content:\", match.group(), match.groups()\n    else:\n        print \"Not found.\"\n",
        "num_ids": 99
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_regex = re.compile(r'[\\w\\s]+\\s+[A-Za-z]{2,3}[\\s\\.]+[A-Za-z]{2,3}')\n    found_match = adverb_regex.search(text)\n    if found_match:\n        print('Position:', found_match.start(), 'String:', found_match.group())\n    else:\n        print('Match not found')\n",
        "num_ids": 117
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # regular expression to find adverb\n    # \\w+? means any number of letters or digits or underscore\n    # + means one or more\n    # \\w+ = \\w+?\n    # \\d = one or more digit\n    # + = one or more +\n    #. = any char\n    pattern = re.compile(r'\\w+? +\\w+')\n    matches = pattern.findall(text)\n    return [match for match in matches]\n",
        "num_ids": 114
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adv_pattern = re.compile(r'adverb',re.IGNORECASE)\n    \n    #pattern = re.compile('adverb', re.IGNORECASE)\n    #pattern.findall(text)\n    \n    #adv_pattern = re.compile(r'adverb',re.IGNORECASE)\n    #pattern = r'\\b\\w{1,2}\\b'\n    #print text\n    \n    #pattern = re.compile(r'\\b\\w{1,2}\\b',re.IGNORECASE)\n    \n    #pattern = re.compile(r'\\b\\w{1,2}\\b', re.IGNORECASE)\n    #pattern = re.compile(r'\\b\\w{1,2}\\b',re.IGNORECASE)\n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #pattern = re.compile(r'\\b\\w{1,2}\\b', re.IGNORECASE)\n    \n    #pattern = re.compile(r'\\b\\w{1,2}\\b',re.IGNORECASE)\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n    #text = re.sub(r'\\b\\w{1,2}\\b', 'ADVERB', text)\n    \n    #print text\n    \n",
        "num_ids": 2008
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import numpy as np\n    surfacearea = 6*l**2\n    return surfacearea\n",
        "num_ids": 24
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # surface area is 6 * (2 l cuboid)\n    surface_area = 6 * (2 * l ** 2)\n    return surface_area\n",
        "num_ids": 37
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l ** 6\n",
        "num_ids": 8
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6\n    return s**3\n",
        "num_ids": 13
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    #assert isinstance(l, int)\n    if l < 0:\n        raise ValueError\n    return l ** 2 * 6\n",
        "num_ids": 35
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "num_ids": 10
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return (count/len(nums))*100\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(sum(1 for i in nums if i > 0)) / float(len(nums))\ndef test_positive_count():\n    assert(positive_count([1, 2, 3, 4, 5, 6, 7, 8]) == 0.25)\n    assert(positive_count([-1, -2, -3, -4, -5, -6, -7, -8]) == 0.25)\n    assert(positive_count([9, 8, 7, 6, -5, -4, -3, -2, -1]) == 0.5)\n    assert(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.5)\n    assert(positive_count([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 0.5)\n    assert(positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 0.5)\n    print \"test_positive_count: PASSED\"\ndef is_prime(n):\n    '''\n    Write a function that takes a number n and returns True if n is prime and False if not.\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    for x in range(3, n, 2):\n        if n % x == 0:\n            return False\n    return True\ndef test_is_prime():\n    assert(is_prime(1) == False)\n    assert(is_prime(2) == True)\n    assert(is_prime(3) == True)\n    assert(is_prime(4) == False)\n    assert(is_prime(5) == True)\n    assert(is_prime(6) == False)\n    assert(is_prime(7) == True)\n    assert(is_prime(8) == False)\n    assert(is_prime(9) == False)\n    assert(is_prime(10) == False)\n    assert(is_prime(11) == True)\n    print \"test_is_prime: PASSED\"\ndef has_duplicates(nums):\n    '''\n    Write a function that takes a list of integers and returns True if there is a duplicate \n    and False if not. \n    '''\n    for i in range(len(nums)):\n        if i == 0:\n            nums[i] = 1\n        else:\n            if nums[i] == nums[i - 1]:\n                return True\n    return False\ndef test_has_duplicates():\n    assert(has_duplicates([1, 2, 3, 4]) == False)\n    assert(has_duplicates([1, 1, 2, 3, 4]) == True)\n    assert(has_duplicates([1, 1, 2, 3, 3]) == False)\n    assert(has_duplicates([1, 1, 2, 3, 4, 5]) == False)\n    print \"test_has_duplicates: PASSED\"\ndef is_sorted(nums):\n    '''\n    Write a function that takes a list of integers and returns True if the list is sorted \n    and False if not.\n    '''\n    for i in range(len(nums)):\n        if i == 0:\n            nums[i] = 1\n        else:\n            if nums[i] > nums[i - 1]:\n                return False\n    return True\ndef test_is_sorted():\n    assert(is_sorted([1, 2, 3, 4]) == False)\n    assert(is_sorted([1, 2, 3, 4, 5]) == True)\n    assert(is_sorted([1, 1, 2, 3, 4]) == True)\n    assert(is_sorted([1, 1, 2, 3, 3]) == False)\n    assert(is_sorted([1, 1, 2, 3, 4, 5]) == True)\n    print \"test_is_sorted: PASSED\"\ndef digit_count(n):\n    '''\n    Write a function that takes a number n and returns the number of digits in n.\n    '''\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\ndef test_digit_count():\n    assert(digit_count(0) == 1)\n    assert(digit_count(123) == 3)\n    assert(digit_count(12345) == 5)\n    assert(digit_count(123456789) == 9)\n    assert(digit_count(987654321) == 12)\n    assert(digit_count(123456789012345678901234567890123456789012345678901234567890) == 19)\n    print \"test_digit_count: PASSED\"\ndef reverse(nums):\n    '''\n    Write a function that takes a list of integers and returns the reverse of the list.\n    '''\n    for i in range(len(nums) / 2):\n        temp = nums[i]\n        nums[i] = nums[len(nums) - 1 - i]\n        nums[len(nums) - 1 - i] = temp\n    return nums\ndef test_reverse():\n    assert(reverse([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1])\n    assert(reverse([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1])\n    print \"test_reverse: PASSED\"\ndef has_cycle(nums):\n    '''\n    Write a function that takes a list of numbers and returns True if the list contains a \n    cycle and False if it does not.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] == nums[len(nums) - 1 - i]:\n            return True\n        if i + 1 == len(nums):\n            i += 1\n            continue\n        i += 1\n        if i == len(nums):\n            i = 0\n    return False\ndef test_has_cycle():\n    assert(has_cycle([1, 2, 3, 4]) == False)\n    assert(has_cycle([1, 2, 3, 4, 5]) == True)\n    assert(has_cycle([1, 2, 3, 4, 5, 6]) == True)\n    assert(has_cycle([1, 2, 3, 4, 5, 6, 7]) == True)\n    assert(has_cycle([1, 2, 3, 4, 5, 6, 7, 8]) == False)\n    assert(has_cycle([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True)\n    assert(has_cycle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True)\n    assert(has_cycle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False)\n    assert(has_cycle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False)\n    assert(has_cycle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False)\n    assert(has_cycle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == True)\n    print \"test_has_cycle: PASSED\"\ndef is_palindrome(nums):\n    '''\n    Write a function that takes a list of numbers and returns True if the list is a palindrome \n    and False if not.\n    '''\n    for i in range(len(nums) / 2):\n        if nums[i]!= nums[len(nums) - 1 - i]:\n            return False\n    return True\ndef test_is_palindrome():\n    assert(is_palindrome([1, 2, 3, 4]) == False)\n    assert(is_palindrome([1, 2, 3, 4, 5]) == False)\n    assert(is_palindrome([1, 2, 3, 4, 5, 6]) == True)\n    assert(is_palindrome([1, 2, 3, 4, 5, 6, 7]) == True)\n    assert(is",
        "num_ids": 158
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for num in nums:\n        if num >= 0:\n            count += 1\n    return count/float(n)\n",
        "num_ids": 45
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len(filter(lambda x: x > 0, nums)) / float(len(nums))\n",
        "num_ids": 27
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    total = 0\n    for num in nums:\n        if num >= 0:\n            pos += 1\n            total += 1\n    return float(pos)/float(total)\n",
        "num_ids": 48
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n    return float(positive) / len(nums)\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for i in nums:\n        if i < 0:\n            negative += 1\n        if i > 0:\n            positive += 1\n    print positive/negative\n",
        "num_ids": 50
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        else:\n            negative += 1\n    return float(positive)/negative\n",
        "num_ids": 49
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return (sum(i > 0 for i in nums) / len(nums)) * 100\n",
        "num_ids": 25
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg\n",
        "num_ids": 44
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1=sorted(list1, reverse = True)\n    maxi=-1\n    for each in list1:\n        if each<0:\n            maxi=each\n    return maxi\n",
        "num_ids": 49
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i]<max:\n            max = list1[i]\n    return max\n",
        "num_ids": 50
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # max = None\n    # if len(list1) == 0:\n    #     max = None\n    # else:\n    #     max = list1[0]\n    # for x in list1:\n    #     if x < 0 and x > max:\n    #         max = x\n    # return max\n    # return max(list1)\n    return max(filter(lambda x: x<0,list1))\n",
        "num_ids": 103
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n",
        "num_ids": 10
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n",
        "num_ids": 10
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -float('inf')\n    for i in list1:\n        if i < max and i > -float('inf'):\n            max = i\n    return max\n",
        "num_ids": 43
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return -1\n    else:\n        largest = -1\n        for i in range(len(list1)):\n            if list1[i] < 0 and list1[i] > largest:\n                largest = list1[i]\n        return largest\n",
        "num_ids": 89
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -99999999999.9\n    for n in list1:\n        if n < max_neg and n < 0:\n            max_neg = n\n    return max_neg\n",
        "num_ids": 48
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1 == []:\n        return []\n    # initialize variables\n    max_neg = min(list1)\n    # loop over list to find max negative number\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg\n",
        "num_ids": 75
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K > 0:\n        return [(t,w) for t,w in test_list if len(t)==K]\n    elif K < 0:\n        return [(t[-K:],w) for t,w in test_list if len(t)==K]\n    else:\n        return [(t,w) for t,w in test_list]\n",
        "num_ids": 90
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            return tup[:K]\n    return test_list\n",
        "num_ids": 38
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    ret_list = []\n    for i in test_list:\n        ret_list.append(i[:K])\n    return ret_list\n",
        "num_ids": 37
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) <= K:\n            result.append(tup)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a, b) for a, b in test_list if len(b) >= K]\n",
        "num_ids": 26
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = list(map(lambda x: x[K:], test_list))\n    return new_list\n    pass\n",
        "num_ids": 33
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) == K:\n            result.append(tup)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        if len(i) == K:\n            trimmed_list.append(i)\n    return trimmed_list\n",
        "num_ids": 48
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if test_list == None:\n        return None\n    if len(test_list) == 0:\n        return None\n    result = []\n    for elem in test_list:\n        if len(elem) >= K:\n            result.append(elem[0:K])\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print 'Length of two tuples are not equal'\n        return\n",
        "num_ids": 38
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [ (test_tup1[i] * test_tup2[i]) for i in xrange(len(test_tup1)) ]\n",
        "num_ids": 39
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    assert len(test_tup1) == len(test_tup2)\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 86
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mul_tup = ()\n    for tup1 in range(len(test_tup1)):\n        mul_tup = mul_tup + (test_tup1[tup1] * test_tup2[tup1],)\n    return mul_tup\n",
        "num_ids": 72
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(i * j for i, j in zip(test_tup1, test_tup2))\n    else:\n        return 'Error: Length of the given tuples should be same.'\n",
        "num_ids": 69
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple((test_tup1[i]*test_tup2[i] for i in range(0, len(test_tup1))))\n",
        "num_ids": 39
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(zip(*[test_tup1, test_tup2]))\n    #return reduce(lambda a, b: (a[0]*b[0], a[1]*b[1]), zip(test_tup1, test_tup2))\n",
        "num_ids": 67
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    new_list = list(zip(list1, list2))\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(0, len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1\n",
        "num_ids": 48
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = Counter(tup)\n    d = sorted(d.items(), key=lambda x: x[0])\n    for i in lst:\n        print (i,d[i])\n",
        "num_ids": 48
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict1 = {} \n    for i in lst: \n        if i in dict1: \n            dict1[i] += 1\n        else: \n            dict1[i] = 1\n    for key in dict1: \n        if key in tup: \n            print key, dict1[key]\n        else: \n            continue\n",
        "num_ids": 86
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    return [tup + (c, ) for c in cnt]\n",
        "num_ids": 29
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) - Counter(lst)\n",
        "num_ids": 16
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for ele in lst:\n        if ele in tup:\n            cnt += 1\n    return cnt\ndef search_in_tuple(tup, item):\n    '''\n    Write a python function to search for a tuple element in the tuple.\n    '''\n    if item in tup:\n        return tup.index(item)\n    else:\n        return -1\ndef count_values(tup):\n    '''\n    Write a python function to count the occurence of all elements of tuple\n    '''\n    return Counter(tup)\ndef remove_from_tuple(tup, item):\n    '''\n    Write a python function to remove an item from tuple.\n    '''\n    return tuple(x for x in tup if x!= item)\ndef replace_item(tup, item, new_item):\n    '''\n    Write a python function to replace an item in a tuple with another item\n    '''\n    return tuple(x if x!= item else new_item for x in tup)\ndef split_string(str):\n    '''\n    Write a python function to split a string into two.\n    '''\n    return str.split(' ')\ndef convert_int(lst):\n    '''\n    Write a python function to convert a list of strings into a list of ints.\n    '''\n    return [int(x) for x in lst]\ndef merge_list(lst1, lst2):\n    '''\n    Write a python function to merge two lists.\n    '''\n    return lst1 + lst2\ndef remove_list_item(lst, item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    return lst.remove(item)\ndef list_items_below_n(lst, n):\n    '''\n    Write a python function to return a list of items in a list, whose values are below a certain number.\n    '''\n    return [x for x in lst if x < n]\ndef find_missing_number(lst):\n    '''\n    Write a python function to find the missing number in a list of numbers.\n    '''\n    return len(lst) + sum(range(min(lst), max(lst) + 2)) - sum(lst)\ndef find_pairs(lst, k):\n    '''\n    Write a python function to find the pairs in a list of numbers with sum equal to a number.\n    '''\n    return [x for x in lst if x + k in lst]\ndef find_triplets(lst, k):\n    '''\n    Write a python function to find the triplets in a list of numbers with sum equal to a number.\n    '''\n    return [x for x in lst if k - x in lst]\ndef print_triplets(lst):\n    '''\n    Write a python function to print the triplets in a list.\n    '''\n    for ele in lst:\n        print(ele, end ='')\n    print()\ndef find_maximum_number(lst):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    return max(lst)\ndef find_minimum_number(lst):\n    '''\n    Write a python function to find the minimum number in a list.\n    '''\n    return min(lst)\ndef print_sorted_list(lst):\n    '''\n    Write a python function to print a list in a sorted order.\n    '''\n    lst.sort()\n    for ele in lst:\n        print(ele, end ='')\n    print()\ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return lst[::-1]\ndef find_duplicates(lst):\n    '''\n    Write a python function to find the duplicates in a list.\n    '''\n    return [x for x,y in Counter(lst).items() if y > 1]\ndef find_triplets_in_list(lst):\n    '''\n    Write a python function to find all the triplets in a list.\n    '''\n    return [x for x in lst for i in lst if x + i in lst]\ndef find_distinct_numbers(lst):\n    '''\n    Write a python function to find the distinct numbers in a list.\n    '''\n    return [x for x in lst if lst.count(x) == 1]\ndef get_digit_numbers(lst):\n    '''\n    Write a python function to return the number of digits in a list of numbers.\n    '''\n    return sum(len(str(x)) for x in lst)\ndef get_factors(num):\n    '''\n    Write a python function to return the prime factors of a number.\n    '''\n    return [x for x in range(1, num + 1) if num % x == 0]\ndef remove_duplicate_list(lst):\n    '''\n    Write a python function to remove the duplicates in a list.\n    '''\n    return list(set(lst))\ndef get_max_and_min_number(lst):\n    '''\n    Write a python function to return the max and min number in a list.\n    '''\n    return max(lst), min(lst)\ndef find_missing_number_in_list(lst):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    return len(lst) + sum(range(min(lst), max(lst) + 2)) - sum(lst)\ndef find_max_of_two_numbers(a, b):\n    '''\n    Write a python function to find the max of two numbers.\n    '''\n    return a if a > b else b\ndef find_max_of_three_numbers(a, b, c):\n    '''\n    Write a python function to find the max of three numbers.\n    '''\n    return a if a > b and a > c else b if b > c else c\ndef find_max_of_numbers(lst):\n    '''\n    Write a python function to find the max of a list of numbers.\n    '''\n    return max(lst)\ndef find_max_of_two_numbers_2(a, b):\n    '''\n    Write a python function to find the max of two numbers.\n    '''\n    return max(a, b)\ndef find_max_of_three_numbers_2(a, b, c):\n    '''\n    Write a python function to find the max of three numbers.\n    '''\n    return max(a, b, c)\ndef sum_of_digits_numbers(num):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum([int(x) for x in str(num)])\ndef find_sum_of_digits_numbers(lst):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum(sum_of_digits_numbers(x) for x in lst)\ndef find_difference_of_digits(num):\n    '''\n    Write a python function to find the difference of digits of a number.\n    '''\n    return sum(map(lambda x: int(x) ** 2, str(num)))\ndef find_difference_of_digits_2(num):\n    '''\n    Write a python function to find the difference of digits of a number.\n    '''\n    return sum([int(x) ** 2 for x in str(num)])\ndef sum_of_digits(num):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum([int(x) for x in str(num)])\ndef find_sum_of_digits(lst):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    return sum(sum_of_digits(x) for x in lst)\ndef check_valid_string(str):\n    '''\n    Write a python function to check if a string is valid o",
        "num_ids": 15
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    return len([x for x in lst if x in tup]) \n",
        "num_ids": 22
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum((tup.count(x) for x in lst)) \n",
        "num_ids": 21
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tup.count(lst)\n",
        "num_ids": 13
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = {}\n    for l in lst:\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    for key,value in tup:\n        if key in d:\n            d[key] -= value\n        else:\n            return -1\n    for key,value in tup:\n        if key in d:\n            if d[key]<0:\n                return -1\n            else:\n                d[key] = 0\n    return d\n",
        "num_ids": 125
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    return (count[tup]) \n",
        "num_ids": 22
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # for x in nums:\n    #     print('x = ', x,'cubed = ', x**3)\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x ** 3 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # cube_nums([1, 2, 3]) # [1, 8, 27]\n    # cube_nums([-5, -4, -3, -2, -1, 0, 1, 2, 3]) # [0, -1, -2, -3, -4, -5, 1, 8, 27]\n    return [x**3 for x in nums]\n",
        "num_ids": 93
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**3)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**3)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for n in nums:\n        print(n**3)\n    print('\\n')\n",
        "num_ids": 25
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print 'cube of', i, 'is', i**3\n",
        "num_ids": 25
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i ** 3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = [1, 2, 5, 25]\n    sum = 0\n    for i in range(len(perrin_list)):\n        for j in range(len(perrin_list)):\n            if j == i:\n                continue\n            if perrin_list[i] + perrin_list[j] == n:\n                sum += 1\n    return sum\n",
        "num_ids": 93
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0 \n    for i in range(n):\n        result += i + 1\n    return result \n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<0:\n        return 0\n    s = 0\n    a = 1\n    while a <= n:\n        s += a\n        a += 2\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 1\n    for i in range(1,n+1):\n        total += (4*i*(i+1)*(2*i+1))/(3*(i+2))\n    return total\n    \ndef find_sum_of_perrin(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    while n > 0:\n        if n%2 == 1:\n            total += n\n        n = n/2\n    return total\n",
        "num_ids": 39
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num_sum = 0 \n    for i in range(n):\n        num_sum = num_sum + ((i + 1) * (i + 2) / 2)\n    return num_sum\n    \nif __name__ == '__main__':\n    n = int(input('Input the size of the set: '))\n    print(cal_sum(n)",
        "num_ids": 88
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s=1\n    for i in range(1,n+1):\n        s*=(1+i)\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i ** 2\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 1\n    for i in xrange(1,n):\n        s += i * (4 * i - 1)\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    sum = 0\n    while(n!=0):\n        sum += n%10\n        n = n/10\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(0, len(str)):\n        if len(str[i]) >= l:\n            res.append(str[i][0:l])\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "num_ids": 27
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    strs = []\n    for i in l:\n        strs.append(i[l[0]:l[1]])\n    return strs\n",
        "num_ids": 38
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import re\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re.compile('[a-zA-Z]{7,}')\n    # l = re",
        "num_ids": 2012
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "num_ids": 27
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l.reverse()\n    l = [len(x) for x in l]\n    s = [str[i:i + l[i]] for i in range(0, len(str))]\n    return s[::-1]\n",
        "num_ids": 58
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) <= l:\n        return str\n    else:\n        return str[0:l]\n",
        "num_ids": 29
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        s = l[i]\n        if len(s) == l:\n            print s\n",
        "num_ids": 36
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[l:] for s in str]\n",
        "num_ids": 15
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import copy\n    str_list = copy.deepcopy(str)\n    str_list.reverse()\n    str_list_new = []\n    for i in range(0, l):\n        str_list_new.append(str_list.pop())\n    str_list_new.reverse()\n    return ''.join(str_list_new)\n",
        "num_ids": 86
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "num_ids": 27
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('[\\s+]', '', text1)\n    return text1\n    \ndef remove_digits(text1):\n    '''\n    Write a function to remove all the digits from the given string.\n    '''\n    text1 = re.sub('[0-9]', '', text1)\n    return text1\n",
        "num_ids": 27
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r\"\\s+\",\"\",text1)\n    return text1\ndef lower_case(text1):\n    '''\n    Write a function to convert a string to lowercase.\n    '''\n    text1 = text1.lower()\n    return text1\ndef remove_hyphen(text1):\n    '''\n    Write a function to remove hyphens from the given string.\n    '''\n    text1 = text1.replace(\"-\",\"\")\n    return text1\ndef remove_special_characters(text1):\n    '''\n    Write a function to remove special characters from the given string.\n    '''\n    text1 = re.sub('[^A-Za-z0-9]+','',text1)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove punctuation from the given string.\n    '''\n    text1 = re.sub('[^A-Za-z0-9 ]+', '', text1)\n    return text1\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    text1 = re.sub(r'[0-9]+', '', text1)\n    return text1\ndef remove_line_breaks(text1):\n    '''\n    Write a function to remove line breaks from the given string.\n    '''\n    text1 = re.sub(\"\\n\",\"\",text1)\n    return text1\ndef count_characters(text1):\n    '''\n    Write a function to count the number of characters in the given string.\n    '''\n    text1 = len(text1)\n    return text1\ndef remove_trailing_whitespaces(text1):\n    '''\n    Write a function to remove trailing whitespaces from the given string.\n    '''\n    text1 = re.sub(r\"\\s+$\",\"\",text1)\n    return text1\ndef capitalize_first_letter(text1):\n    '''\n    Write a function to capitalize the first letter of the given string.\n    '''\n    text1 = text1.capitalize()\n    return text1\ndef count_vowels(text1):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(text1)):\n        if text1[i] in vowels:\n            count += 1\n    return count\ndef word_count(text1):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    text1 = text1.split()\n    return len(text1)\ndef count_non_alphanumeric(text1):\n    '''\n    Write a function to count the number of non-alphanumeric characters in the given string.\n    '''\n    count = 0\n    alphanumeric = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    for i in range(len(text1)):\n        if text1[i] not in alphanumeric:\n            count += 1\n    return count\ndef is_palindrome(text1):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    text1 = text1.lower()\n    if text1 == text1[::-1]:\n        return True\n    return False\ndef is_anagram(text1,text2):\n    '''\n    Write a function to check whether the two given strings are anagram of each other or not.\n    '''\n    text1 = remove_whitespaces(text1)\n    text2 = remove_whitespaces(text2)\n    text1 = lower_case(text1)\n    text2 = lower_case(text2)\n    text1 = remove_hyphen(text1)\n    text2 = remove_hyphen(text2)\n    text1 = remove_punctuation(text1)\n    text2 = remove_punctuation(text2)\n    text1 = remove_numbers(text1)\n    text2 = remove_numbers(text2)\n    text1 = remove_special_characters(text1)\n    text2 = remove_special_characters(text2)\n    text1 = remove_line_breaks(text1)\n    text2 = remove_line_breaks(text2)\n    text1 = remove_trailing_whitespaces(text1)\n    text2 = remove_trailing_whitespaces(text2)\n    text1 = capitalize_first_letter(text1)\n    text2 = capitalize_first_letter(text2)\n    if sorted(text1) == sorted(text2):\n        return True\n    return False\ndef reverse_string(text1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    text1 = text1[::-1]\n    return text1\ndef is_pangram(text1):\n    '''\n    Write a function to check whether the given string is pangram or not.\n    '''\n    text1 = remove_whitespaces(text1)\n    text1 = remove_special_characters(text1)\n    text1 = remove_line_breaks(text1)\n    if len(set(text1)) == 26:\n        return True\n    return False\ndef count_punctuation(text1):\n    '''\n    Write a function to count the number of punctuation characters in the given string.\n    '''\n    text1 = re.sub('[^A-Za-z0-9]+','',text1)\n    return len(text1)\ndef count_uppercase(text1):\n    '''\n    Write a function to count the number of uppercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            count += 1\n    return count\ndef count_lowercase(text1):\n    '''\n    Write a function to count the number of lowercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\ndef count_digits(text1):\n    '''\n    Write a function to count the number of digits in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in '0123456789':\n            count += 1\n    return count\ndef count_uppercase_lowercase(text1):\n    '''\n    Write a function to count the number of uppercase and lowercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\ndef count_punctuation_lowercase(text1):\n    '''\n    Write a function to count the number of punctuation and lowercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(text1)):\n        if text1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\ndef count_words(text1):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    text1 = text1.split()\n    return len(text1)\ndef is_word(text1):\n    '''\n    Write a function to check whether the given string is word or not.\n    '''\n    text1 = text1.split()\n    if len(text1) == 1:\n        return True\n    return False\ndef count_vowels(text1):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for i in range",
        "num_ids": 26
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' ', '', text1)\n",
        "num_ids": 15
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','',text1)\ndef remove_punctuations(text1):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    return re.sub('[^\\w\\s]','',text1)\ndef remove_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    return re.sub('\\d+','',text1)\ndef remove_single_characters(text1):\n    '''\n    Write a function to remove all single characters from the given string.\n    '''\n    return re.sub('\\s*[a-zA-Z]+\\s*','',text1)\ndef remove_stop_words(text1):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english')])\ndef remove_punctuations_lowercase(text1):\n    '''\n    Write a function to remove all punctuations from the given string and \n    return the result in lowercase.\n    '''\n    return re.sub('[^a-zA-Z]+','',text1)\ndef remove_punctuations_uppercase(text1):\n    '''\n    Write a function to remove all punctuations from the given string and \n    return the result in uppercase.\n    '''\n    return re.sub('[^a-zA-Z]+','',text1)\ndef remove_punctuations_with_space(text1):\n    '''\n    Write a function to remove all punctuations from the given string and \n    return the result with space as delimiter.\n    '''\n    return re.sub('[^a-zA-Z\\s]+',' ',text1)\ndef remove_stop_words_lowercase(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in lowercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english')])\ndef remove_stop_words_uppercase(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in uppercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english')])\ndef remove_stop_words_with_space(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result with space as delimiter.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english')])\ndef remove_stop_words_lowercase_and_punctuations(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in lowercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations])\ndef remove_stop_words_uppercase_and_punctuations(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in uppercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations])\ndef remove_stop_words_with_space_and_punctuations(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result with space as delimiter.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations])\ndef remove_stop_words_lowercase_and_digits(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in lowercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in digits])\ndef remove_stop_words_uppercase_and_digits(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in uppercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in digits])\ndef remove_stop_words_with_space_and_digits(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result with space as delimiter.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in digits])\ndef remove_stop_words_lowercase_and_punctuations_and_digits(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in lowercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations and word not in digits])\ndef remove_stop_words_uppercase_and_punctuations_and_digits(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in uppercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations and word not in digits])\ndef remove_stop_words_with_space_and_punctuations_and_digits(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result with space as delimiter.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations and word not in digits])\ndef remove_stop_words_lowercase_and_punctuations_and_digits_and_whitespaces(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in lowercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations and word not in digits and word not in whitespaces])\ndef remove_stop_words_uppercase_and_punctuations_and_digits_and_whitespaces(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in uppercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations and word not in digits and word not in whitespaces])\ndef remove_stop_words_with_space_and_punctuations_and_digits_and_whitespaces(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result with space as delimiter.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations and word not in digits and word not in whitespaces])\ndef remove_stop_words_lowercase_and_punctuations_and_digits_and_whitespaces_and_newline(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n    return the result in lowercase.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords.words('english') and word not in punctuations and word not in digits and word not in whitespaces and word not in newline])\ndef remove_stop_words_uppercase_and_punctuations_and_digits_and_whitespaces_and_newline(text1):\n    '''\n    Write a function to remove all stop words from the given string and \n",
        "num_ids": 18
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' +','',text1)\n    return text1\n",
        "num_ids": 22
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = \"\"\n    for i in text1:\n        if(i!=''):\n            new_text += i\n    return new_text\n",
        "num_ids": 39
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+', '', text1)\n    return text2\n",
        "num_ids": 25
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s','',text1)\n",
        "num_ids": 16
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\",\"\",text1)\n",
        "num_ids": 17
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    return 0\n",
        "num_ids": 27
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_cost = abs(actual_cost)\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount < 0 else 0\n",
        "num_ids": 24
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (actual_cost-sale_amount) if actual_cost-sale_amount < 0 else 0\n",
        "num_ids": 26
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (actual_cost-sale_amount)*100/actual_cost\n",
        "num_ids": 19
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    return 0\n",
        "num_ids": 27
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    fact = []\n    for i in range(1, n//2+1): \n        if n%i == 0: \n            fact.append(i)\n    fact = sum(fact)\n    return fact\n",
        "num_ids": 53
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #Take integer input from the user \n    n = int(raw_input('Enter a number: '))\n    #print sum of even factors\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if (i % 2 == 0):\n                sum += i \n    return sum",
        "num_ids": 82
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 1): \n        return 0\n    if (n == 2): \n        return 2\n    if (n%2 == 0): \n        return 2 + sumofFactors(n/2) \n    else: \n        return sumofFactors((n * 3) + 1) + 1\ndef isPrime(n): \n    if (n > 1): \n        if (n == 2): \n            return True\n        if (n%2 == 0): \n            return False\n        for i in range(3,int(math.sqrt(n))+1,2): \n            if (n % i == 0): \n                return False\n        return True\n    return False\ndef greatestCommonDivisor(x, y): \n    if (x > y): \n        small = y \n    else: \n        small = x \n    for i in range(1, small+1): \n        if((x % i == 0) and (y % i == 0)): \n            gcd = i \n    return gcd \ndef getLcm(x, y): \n    return (x * y) // greatestCommonDivisor(x, y) \ndef countDigits(n):\n    '''\n    Write a python function to find the count of digits in a number.\n    '''\n    if n == 0: \n        return 1\n    return countDigits(n // 10) + 1\ndef isPalindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if (n < 0): \n        return False\n    temp = n\n    rev = 0\n    while (temp > 0): \n        dig = temp % 10\n        rev = rev * 10 + dig\n        temp = temp // 10\n    if (n == rev): \n        return True\n    return False\ndef smallestPalindrome(n): \n    '''\n    Write a python function to find the smallest palindrome greater than a number.\n    '''\n    if (n < 10): \n        return n\n    smallest = n\n    while (True): \n        smallest = smallest - 1\n        if (isPalindrome(smallest)): \n            break\n    return smallest\ndef isArmstrong(n): \n    '''\n    Write a python function to check whether a number is armstrong number or not.\n    '''\n    sum = 0\n    temp = n\n    while (temp > 0): \n        dig = temp % 10\n        sum += dig ** 3\n        temp //= 10\n    if (n == sum): \n        return True\n    return False\ndef getDigits(n): \n    '''\n    Write a python function to find the number of digits in a number.\n    '''\n    if (n == 0): \n        return 1\n    return getDigits(n // 10) + 1\ndef findGCD(x, y): \n    while (y): \n        x, y = y, x % y \n    return x\ndef getLcm(x, y): \n    return (x * y) // findGCD(x, y) \ndef isPandigital(n, k): \n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    temp = n\n    strng = \"0123456789\"\n    while (temp > 0): \n        if ((temp % 10) not in strng[0:(k)]): \n            return False\n        temp //= 10\n    return True\ndef isCoprime(x, y): \n    '''\n    Write a python function to check whether two numbers are coprime or not.\n    '''\n    if (gcd(x, y) == 1): \n        return True\n    return False\ndef gcd(x, y): \n    if (x == 0): \n        return y \n    return gcd(y % x, x) \ndef isSemiPrime(x): \n    '''\n    Write a python function to check whether a number is semiprime or not.\n    '''\n    if (isPrime(x)): \n        return False\n    if (x < 10): \n        return False\n    for i in range(2, int(math.sqrt(x))+1, 1): \n        if (x % i == 0): \n            return False\n    return True\ndef getPermutation(n, k): \n    '''\n    Write a python function to find the k-th permutation of a string.\n    '''\n    strng = \"0123456789\"\n    perm = \"\" \n    k -= 1\n    while (n > 0): \n        dig = n % 10\n        perm += strng[dig]\n        n //= 10\n        k -= 1\n    return perm\ndef isPerfectSquare(n): \n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    if (n < 0): \n        return False\n    if (n == 0 or n == 1): \n        return True\n    low = 0\n    high = n\n    while (low <= high): \n        mid = low + (high - low) // 2\n        mid_squared = mid * mid\n        if (mid_squared == n): \n            return True\n        elif (mid_squared > n): \n            high = mid - 1\n        else: \n            low = mid + 1\n    return False\ndef isPowerOfTwo(n): \n    '''\n    Write a python function to check whether a number is a power of two or not.\n    '''\n    if (n <= 0): \n        return False\n    return (n & (n - 1)) == 0\ndef isPower(x, y): \n    '''\n    Write a python function to check whether a number is a power of a number or not.\n    '''\n    if (x == 1): \n        return True\n    if (x == y): \n        return True\n    if (x > y): \n        return False\n    while (x!= y): \n        if (x % 2!= 0): \n            return False\n        x = x // 2\n    return True\ndef isPerfectCube(n): \n    '''\n    Write a python function to check whether a number is a perfect cube or not.\n    '''\n    if (n < 0): \n        return False\n    temp = n\n    sum = 0\n    while (temp > 0): \n        dig = temp % 10\n        sum += dig ** 3\n        temp //= 10\n    if (n == sum): \n        return True\n    return False\ndef isPrimeFraction(x, y): \n    '''\n    Write a python function to check whether two numbers are prime fraction or not.\n    '''\n    if (x == y): \n        return False\n    if (isPrime(x) == False): \n        return False\n    if (isPrime(y) == False): \n        return False\n    if (getLcm(x, y)!= x * y): \n        return False\n    return True\ndef getFactors(n): \n    '''\n    Write a python function to find all factors of a number.\n    '''\n    if (n == 1): \n        return [1]\n    factors = []\n    for i in range(2, n+1): \n        if (n % i == 0): \n            factors.append(i)\n    return factors\ndef primeFactors(n): \n    '''\n    Write a python function to find all prime factors of a number.\n    '''\n    if (n == 1): \n        return [1]\n    factors = []\n    for i in range(2, n+1): \n        if (n % i == 0 and isPrime(i)): \n            factors.append(i)\n    return factors\ndef getPrimes(n): \n    '''\n    Write a python function to find all primes less than a number.\n    '''\n    if (n == 1): \n        return [1]\n    primes = []\n    for i in range(2, n+1): \n        if (isPrime(i)): \n            primes.append(i)\n    return primes\ndef isConvex(n): \n    '''\n    Write a python function to check whether a numbe",
        "num_ids": 13
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    listFactors = []\n    for i in range(1,n+1) :\n        if n % i == 0 and i%2==0 :\n            listFactors.append(i)\n    return sum(listFactors)\n",
        "num_ids": 57
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n    return result\ndef sumofSquare(n):\n    '''\n    Write a python function to find the sum of square of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i * i\n    return result\ndef sumofSquareFactors(n) : \n    '''\n    Write a python function to find the sum of square of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i * i\n    return result\ndef amicable(n):\n    '''\n    Write a python function to find the amicable number of a number.\n    '''\n    result = sumofSquare(sumofFactors(n))\n    if (result!= n): \n        return n\n    else: \n        return result\ndef amicableNumbers(n):\n    '''\n    Write a python function to find the amicable numbers of a number.\n    '''\n    result = []\n    for i in range(1, n + 1) : \n        if (amicable(i) < n):\n            result.append(amicable(i))\n    return result\ndef pFactors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    result = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (i!= 1) : \n                result.append(i)\n                while (n % i == 0) :\n                    n /= i\n    if (n > 1) :\n        result.append(n)\n    return result\ndef sumofPrimeFactors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += n\n    return result\ndef amicable_sum(n):\n    '''\n    Write a python function to find the amicable number of a number.\n    '''\n    result = 0\n    for i in range(1, n + 1) : \n        if (sumofFactors(amicable(i)) == i) :\n            result += i\n    return result\ndef amicable_sums(n):\n    '''\n    Write a python function to find the amicable number of a number.\n    '''\n    result = []\n    for i in range(1, n + 1) : \n        if (sumofFactors(amicable(i)) == i) :\n            result.append(i)\n    return result\ndef pFactors_sum(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += n\n    return result\ndef is_fibonacci(n):\n    '''\n    Write a python function to check if the number is fibonacci or not.\n    '''\n    if (n == 0) or (n == 1):\n        return True\n    elif (n == 2):\n        return True\n    else:\n        return (is_fibonacci(n - 1) and is_fibonacci(n - 2))\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if (n == 0):\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef pFactors_count(n):\n    '''\n    Write a python function to find the count of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += 1\n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += 1\n    return result\ndef isPerfectNumber(n):\n    '''\n    Write a python function to check if the number is perfect number or not.\n    '''\n    if (n == sumofFactors(n)):\n        return True\n    else:\n        return False\ndef sumofSquareofFactors(n):\n    '''\n    Write a python function to find the sum of square of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i * i\n    return result\ndef sumofSquareFactors_count(n):\n    '''\n    Write a python function to find the count of square of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i * i\n    return result\ndef pFactors_count(n):\n    '''\n    Write a python function to find the count of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += 1\n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += 1\n    return result\ndef pFactors_count_sum(n):\n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += n\n    return result\ndef sumofPrimeFactors_count(n):\n    '''\n    Write a python function to find the count of sum of prime factors of a number.\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if ((n / i) % 2 == 0) : \n                result += i \n            while (n % i == 0) :\n                n /= i\n    if (n > 1) :\n        result += n\n    return result\nde",
        "num_ids": 99
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 1:\n        return 0\n    sum = 1\n    while n % 2 == 0:\n        sum = sum * 2\n        n = n // 2\n    return sum + sumofFactors(n - 1)\n    \ndef isPrime(n):\n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    if n < 2 :\n        return 0\n    if n == 2 :\n        return 2\n    if n % 2 == 0 :\n        total += n/2\n        return total + sumofFactors(n/2)\n    else :\n        for i in range(1,math.ceil(math.sqrt(n)) + 1) :\n            if n % i == 0 :\n                total += i\n                if (n/i)!= i :\n                    total += n/i\n        return total\n",
        "num_ids": 124
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # if n is even \n    if n % 2 == 0 : \n        return (n//2)*(n//2 + 1) \n    else : \n        return n*(n+1)//2\n",
        "num_ids": 53
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0 \n    for i in range(1, n) : \n        if n % i == 0 and n / i == i : \n            total += i\n    return total\ndef commonFactors(x, y) : \n    '''\n    Write a python function to find the common factors between two numbers.\n    '''\n    i = 2\n    while(i <= min(x, y)) : \n        if x % i == 0 and y % i == 0 : \n            print i\n            x = x / i\n            y = y / i\n        i = i + 1\ndef factors(n) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    i = 2\n    while(i <= n) : \n        if n % i == 0 : \n            print i\n        i = i + 1\ndef divisors(n) : \n    '''\n    Write a python function to find the divisors of a number.\n    '''\n    i = 2\n    while(i <= n) : \n        if n % i == 0 : \n            print i\n        i = i + 1\ndef isPerfectNumber(n) : \n    '''\n    Write a python function to check if a number is a perfect number or not.\n    '''\n    total = 1\n    for i in range(2, n) : \n        if n % i == 0 : \n            total += i\n    if total == n : \n        print n,\" is a perfect number.\"\n    else : \n        print n,\" is not a perfect number.\"\ndef perfectNumber(n) : \n    '''\n    Write a python function to find all the perfect numbers below a number.\n    '''\n    i = 2\n    while(i <= n) : \n        if n % i == 0 : \n            j = 2\n            while(j <= i) : \n                if i % j == 0 : \n                    break\n                j = j + 1\n            if j == i : \n                print i\n        i = i + 1\ndef eulerPhi(n) : \n    '''\n    Write a python function to find the Euler's Phi function of a number.\n    '''\n    total = 1\n    for i in range(2, n) : \n        if n % i == 0 : \n            total += 1\n    return total\ndef divisors(n) : \n    '''\n    Write a python function to find the divisors of a number.\n    '''\n    i = 2\n    while(i <= n) : \n        if n % i == 0 : \n            print i\n        i = i + 1\ndef isPalindrome(n) : \n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    i = 0\n    while(i < n) : \n        rem = n % 10\n        n = n / 10\n        temp = rem\n        n = n + temp\n        i = i + 1\n    if n == n : \n        print n,\" is a palindrome.\"\n    else : \n        print n,\" is not a palindrome.\"\ndef print_triangular_numbers(n) : \n    '''\n    Write a python function to print all the triangular numbers between 1 and n.\n    '''\n    i = 1\n    while(i <= n) : \n        print i*(i + 1)/2\n        i = i + 1\ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    i = 2\n    while(i < n) : \n        if n % i == 0 : \n            return False\n        i = i + 1\n    return True\ndef primeFactors(n) : \n    '''\n    Write a python function to find all the prime factors of a number.\n    '''\n    i = 2\n    while(i <= n) : \n        if n % i == 0 : \n            if isPrime(i) : \n                print i\n        i = i + 1\ndef fibonacci(n) : \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    n1 = 0\n    n2 = 1\n    count = 1\n    while(count <= n) : \n        print n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        count = count + 1\ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    total = 1\n    for i in range(1, n + 1) : \n        total = total * i\n    return total\ndef checkPerfectNumber(n) : \n    '''\n    Write a python function to check if a number is a perfect number.\n    '''\n    total = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            total += i\n    if total == n : \n        print n,\" is a perfect number.\"\n    else : \n        print n,\" is not a perfect number.\"\ndef checkPerfectNumber2(n) : \n    '''\n    Write a python function to check if a number is a perfect number.\n    '''\n    total = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            total += i\n    if total == n : \n        print n,\" is a perfect number.\"\n    else : \n        print n,\" is not a perfect number.\"\ndef countDigits(n) : \n    '''\n    Write a python function to count the digits of a number.\n    '''\n    total = 0\n    while(n!= 0) : \n        total = total + 1\n        n = n // 10\n    return total\ndef isFactor(n, m) : \n    '''\n    Write a python function to check if a number is a factor of another number.\n    '''\n    if m % n == 0 : \n        return True\n    else : \n        return False\ndef sumDigits(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    total = 0\n    while(n!= 0) : \n        total = total + n % 10\n        n = n / 10\n    return total\ndef sumDigitsRecursive(n, total = 0) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    if n == 0 : \n        return total\n    else : \n        return sumDigitsRecursive(n / 10, total + n % 10)\ndef sumFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0 \n    for i in range(1, n) : \n        if n % i == 0 and n / i == i : \n            total += i\n    return total\ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    i = 2\n    while(i <= n) : \n        if n % i == 0 : \n            return False\n        i = i + 1\n    return True\ndef primeFactors(n) : \n    '''\n    Write a python function to find all the prime factors of a number.\n    '''\n    i = 2\n    while(i <= n) : \n        if n % i == 0 : \n            if isPrime(i) : \n                print i\n        i = i + 1\ndef nthFibonacci(n) : \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    n1 = 0\n    n2 = 1\n    count = 1\n    while(count <= n) : \n        print n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        count = count + 1\ndef fibonacci(n) : \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    n1 = 0\n    n2 = 1\n    count = 1\n    while(count <= n) : \n    ",
        "num_ids": 30
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            if i%2 == 0 : \n                sum = sum + i\n            if i%2 == 1 : \n                sum = sum + n/i\n    return sum\n",
        "num_ids": 80
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # your code here\n    return re.search(r'\\b[zZ][a-zA-z]+\\b', text)\n",
        "num_ids": 35
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.compile('[a-zA-Z]+\\w*z')\n    match = r.search(text)\n    return match\n",
        "num_ids": 38
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    print re.search(r\"\\bz\\w+\\b\", text)\n    return re.search(r\"\\bz\\w+\\b\", text)\n",
        "num_ids": 50
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(r'\\b([a-zA-Z]+)\\s*z\\b', text)\n",
        "num_ids": 30
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\w+z\\w*', text)\n",
        "num_ids": 21
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'z+', text)\n    if match:\n        print(\"Match found: {0}\".format(match.group()))\n    else:\n        print(\"No match.\")\n",
        "num_ids": 51
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('\\w*z\\w*',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall('[a-z]+z', text, re.IGNORECASE)\n",
        "num_ids": 26
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile(r'\\b(.*z.*)\\b', re.IGNORECASE)\n    result = re.search(reg, text)\n    if result:\n        return result.group(1)\n    else:\n        return None\n",
        "num_ids": 63
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = re.findall('\\w*z\\w*', text)\n    if matches:\n        print(matches)\n    else:\n        print('no matches')\n",
        "num_ids": 45
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\ndef check_yearnumb_number(yearnumb):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (yearnumb % 4) == 0:\n        if (yearnumb % 100) == 0:\n            if (yearnumb % 400) == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_monthnumb_number_leapyear(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    '''\n    if check_monthnumb_number(monthnum) == True:\n        if monthnum == 2:\n            return check_yearnumb_number(yearnumb)\n        else:\n            return True\n    else:\n        return False\ndef check_daynumb_number(daynumb):\n    '''\n    Write a function to check whether the given day number is a valid number or not.\n    '''\n    if daynumb < 1 or daynumb > 31:\n        return False\n    else:\n        return True\ndef is_valid_date(year,month,day):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if check_monthnumb_number(month) == True:\n        if check_daynumb_number(day) == True:\n            if check_monthnumb_number_leapyear(month) == True:\n                if check_yearnumb_number(year) == True:\n                    return True\n                else:\n                    return False\n            else:\n                if check_daynumb_number(day) == True:\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 130
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 == 1) or (monthnum2 == 3) or (monthnum2 == 5) or (monthnum2 == 7) or (monthnum2 == 8) or (monthnum2 == 10) or (monthnum2 == 12):\n        return 31\n    elif (monthnum2 == 2):\n        return 28\n    elif ((monthnum2 % 2) == 0) and (monthnum2 > 2000):\n        return 30\n    else:\n        return 29\ndef check_year(year):\n    if (year % 4) == 0:\n        return True\n    else:\n        return False\ndef leap_year(year2):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if (year2 % 4) == 0:\n        if (year2 % 100) == 0:\n            if (year2 % 400) == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef days_in_month(year,month):\n    '''\n    Write a function to determine the number of days in a month.\n    '''\n    if month in (1,3,5,7,8,10,12):\n        return 31\n    elif month in (4,6,9,11):\n        return 30\n    elif (month == 2):\n        if leap_year(year):\n            return 29\n        else:\n            return 28\n    else:\n        return -1\ndef check_day(day,month,year):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (1 <= day <= 31) and (1 <= month <= 12) and (0 <= year <= 3000):\n        return True\n    else:\n        return False\ndef days_in_month_leap_year(year,month):\n    '''\n    Write a function to determine the number of days in a leap year.\n    '''\n    if (1 <= month <= 12):\n        if (month == 2):\n            if (leap_year(year)):\n                return 29\n            else:\n                return 28\n        else:\n            return 31\n    else:\n        return -1\ndef check_day_leap_year(day,month,year):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (1 <= day <= days_in_month_leap_year(year,month)) and (1 <= month <= 12) and (0 <= year <= 3000):\n        return True\n    else:\n        return False\ndef days_in_month_nonleap_year(year,month):\n    '''\n    Write a function to determine the number of days in a non-leap year.\n    '''\n    if (1 <= month <= 12):\n        if (month == 2):\n            if (check_year(year)):\n                return 29\n            else:\n                return 28\n        else:\n            return 31\n    else:\n        return -1\ndef check_day_nonleap_year(day,month,year):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (1 <= day <= days_in_month_nonleap_year(year,month)) and (1 <= month <= 12) and (0 <= year <= 3000):\n        return True\n    else:\n        return False\ndef add_months(month, year):\n    '''\n    Write a function to determine the next month in the year.\n    '''\n    if month == 12:\n        return 1\n    else:\n        return month + 1\ndef check_month(month, year):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (1 <= month <= 12) and (0 <= year <= 3000):\n        return True\n    else:\n        return False\ndef check_day_month_year(day,month,year):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (1 <= day <= days_in_month(year,month)) and (1 <= month <= 12) and (0 <= year <= 3000):\n        return True\n    else:\n        return False\ndef date_difference(day1,month1,year1,day2,month2,year2):\n    '''\n    Write a function to find the difference between two dates.\n    '''\n    if check_day(day1,month1,year1) and check_day(day2,month2,year2):\n        return abs(year2 - year1) * 365 + abs(month2 - month1) * 30 + abs(day2 - day1)\n    else:\n        return -1\ndef diff_day(day1,day2):\n    '''\n    Write a function to find the difference between two days.\n    '''\n    return abs(day2 - day1)\ndef diff_month(month1,month2):\n    '''\n    Write a function to find the difference between two months.\n    '''\n    return abs(month2 - month1)\ndef diff_year(year1,year2):\n    '''\n    Write a function to find the difference between two years.\n    '''\n    return abs(year2 - year1)\ndef check_date_valid(day1,month1,year1,day2,month2,year2):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if (1 <= day1 <= days_in_month(year1,month1)) and (1 <= day2 <= days_in_month(year2,month2)):\n        if (1 <= month1 <= 12) and (1 <= month2 <= 12):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef leap_year_nonleap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if (year % 4) == 0:\n        if (year % 100) == 0:\n            if (year % 400) == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef days_in_month_nonleap_year(year,month):\n    '''\n    Write a function to determine the number of days in a non-leap year.\n    '''\n    if (1 <= month <= 12):\n        if (month == 2):\n            if (leap_year_nonleap_year(year)):\n                return 29\n            else:\n                return 28\n        else:\n            return 31\n    else:\n        return -1\ndef days_in_month_leap_year(year,month):\n    '''\n    Write a function to determine the number of days in a leap year.\n    '''\n    if (1 <= month <= 12):\n        if (month == 2):\n            if (leap_year(year)):\n                return 29\n            else:\n                return 28\n        else:\n            return 31\n    else:\n        return -1\ndef days_in_month_nonleap_year(year,month):\n    '''\n    Write a function to determine the number of days in a non-leap year.\n    '''\n    if (1 <= month <= 12):\n        if (month == 2):\n            if (check_year(year)):\n                return 29\n            else:\n                return 28\n        else:\n            return 31\n    else:\n        return -1\ndef diff_day_month(day1,month1,year1,day2,month2,year2):\n    '''\n    Write a function to find the difference between two days.\n    '''\n    if check_date_valid(day1,month1,year1,day2,month2,year2):\n        return abs(year2 - year1) * 365 + abs(month2 - month1) * 30 + abs(day2 - day1)\n    else:\n        return -1\ndef diff_day_month_year(day1,month1,year1,day2,month2,year2):\n    '''\n    Write a function to find the difference between two days.\n    '''\n    if check_date_valid(day1,month1,year1,day2,month2,yea",
        "num_ids": 27
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return (monthnum2 in {1,3,5,7,8,10,12})\n",
        "num_ids": 25
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    if (monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11):\n        return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        print '31 days'\n    elif monthnum2 in [4,6,9,11]:\n        print '30 days'\n    else:\n        print '30 days'\n",
        "num_ids": 66
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 > 0 and monthnum2 < 13\n",
        "num_ids": 16
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if check_year_leap(check_year(year)) == True:\n            return 31\n        else:\n            return 28\n    else:\n        return 31\n",
        "num_ids": 50
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1,3,5,7,8,10,12):\n        return 31\n    else:\n        return 30\n",
        "num_ids": 36
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = [str(x) for x in stringlist]\n    stringlist = stringlist[::-1]\n    return stringlist\n",
        "num_ids": 35
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    resultlist = []\n    for item in stringlist:\n        resultlist.append(item[::-1])\n    return resultlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = [str[::-1] for str in stringlist]\n    return stringlist\n",
        "num_ids": 25
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for string in stringlist:\n        string = string[::-1]\n    return stringlist\n",
        "num_ids": 25
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    #Convert to string and reverse each string\n    list_of_strings = [str(string) for string in stringlist]\n    list_of_strings_reversed = [string[::-1] for string in list_of_strings]\n    \n    #Convert to list of strings\n    list_of_strings_reversed = [string.strip('\\'') for string in list_of_strings_reversed]\n    \n    #Return list of strings\n    return list_of_strings_reversed\n    ",
        "num_ids": 128
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for string in stringlist:\n        reverse_list.append(string[::-1])\n    return reverse_list\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_strlist = []\n    for string in stringlist:\n        rev_strlist.append(string[::-1])\n",
        "num_ids": 33
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse = stringlist[::-1]\n    return reverse\n",
        "num_ids": 17
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_list = []\n    for item in lst:\n        if len(item) < len(min):\n            min = item\n            min_list = [item]\n        elif len(item) == len(min):\n            min_list.append(item)\n    print 'Minimum length sublist: ', min_list\n    return min_list\n",
        "num_ids": 94
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #Base Case: If the list is empty, return None\n    if lst == []: \n        return None\n    #Find the minimum element in the list\n    min = lst[0]\n    for element in lst:\n        if element < min:\n            min = element\n    #Return the minimum element\n    return min\n",
        "num_ids": 79
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_index = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return min_index\n",
        "num_ids": 78
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = 0\n    i = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < len(lst[Min]):\n            Min = i\n    return Min\n",
        "num_ids": 53
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    minIndex = 0\n    for i in range(1,len(lst)):\n        if len(min) > len(lst[i]):\n            min = lst[i]\n            minIndex = i\n    return minIndex\n",
        "num_ids": 68
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(min_lst):\n            min_lst = lst[i]\n    return min_lst\n",
        "num_ids": 66
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if(len(lst[i]) < min_len):\n            min = lst[i]\n            min_len = len(lst[i])\n    return min\n    \n    \nif __name__ == '__main__': \n    lst = [('a',1),('b',2),('c',3),('d',4),('e',5),('f',6),('g',7),('h',8)]\n    res = Find_Min(lst)\n    print res\n",
        "num_ids": 158
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0]\n    minimum_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n            minimum_index = i\n    return minimum_index\n",
        "num_ids": 66
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    res = lst[0]\n    for x in lst:\n        if len(x) < min_len:\n            min_len = len(x)\n            res = x\n    return res\n",
        "num_ids": 63
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = lst[0]\n    Min_index = 0\n    for i in range(1,len(lst)):\n        if len(lst[i]) < len(Min):\n            Min = lst[i]\n            Min_index = i\n    return Min, Min_index\n",
        "num_ids": 72
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    import math\n    return math.pi * r * r\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n    \ndef rectangle_area_and_perimeter(l,b):\n    '''\n    Write a function to find the area of a rectangle and perimeter.\n    '''\n    area = rectangle_area(l,b)\n    perimeter = rectangle_perimeter(l,b)\n    return area,perimeter\n    \ndef circle_area_and_perimeter(r):\n    '''\n    Write a function to find the area of a circle and perimeter.\n    '''\n    area = circle_area(r)\n    perimeter = circle_perimeter(r)\n    return area,perimeter\n    \ndef rectangle_interior_and_edge_areas(l,b):\n    '''\n    Write a function to find the interior area and edge area of a rectangle.\n    '''\n    l1,b1 = rectangle_area_and_perimeter(l,b)\n    l2,b2 = rectangle_area_and_perimeter(l,b)\n    return l1,b1,l2,b2\n    \ndef circle_interior_and_edge_areas(r):\n    '''\n    Write a function to find the interior area and edge area of a circle.\n    '''\n    r1 = circle_area_and_perimeter(r)\n    r2 = circle_area_and_perimeter(r)\n    return r1,r2\n    \ndef rectangle_interior_and_edge_areas(l,b):\n    '''\n    Write a function to find the interior area and edge area of a rectangle.\n    '''\n    l1,b1,l2,b2 = rectangle_area_and_perimeter(l,b)\n    return l1,b1,l2,b2\n    \ndef circle_interior_and_edge_areas(r):\n    '''\n    Write a function to find the interior area and edge area of a circle.\n    '''\n    r1,r2 = circle_area_and_perimeter(r)\n    return r1,r2\n    \ndef rectangle_volume(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return l * b\n    \ndef circle_volume(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    import math\n    return math.pi * r * r * r\n    \ndef rectangle_volume_and_circumference(l,b):\n    '''\n    Write a function to find the volume and circumference of a rectangle.\n    '''\n    l1,b1 = rectangle_volume_and_circumference(l,b)\n    l2,b2 = rectangle_volume_and_circumference(l,b)\n    return l1,b1,l2,b2\n    \ndef circle_volume_and_circumference(r):\n    '''\n    Write a function to find the volume and circumference of a circle.\n    '''\n    r1,r2 = circle_volume_and_circumference(r)\n    return r1,r2\n    \ndef rectangle_volume_and_circumference(l,b):\n    '''\n    Write a function to find the volume and circumference of a rectangle.\n    '''\n    l1,b1,l2,b2 = rectangle_volume_and_circumference(l,b)\n    return l1,b1,l2,b2\n    \ndef circle_volume_and_circumference(r):\n    '''\n    Write a function to find the volume and circumference of a circle.\n    '''\n    r1,r2 = circle_volume_and_circumference(r)\n    return r1,r2\n    \ndef rectangle_tooth(l,b):\n    '''\n    Write a function to find the number of rectangle teeth that would be used to \n    cut a rectangle with a given length and breadth.\n    '''\n    perimeter = rectangle_perimeter(l,b)\n    return perimeter / (l+b)\n    \ndef circle_tooth(r):\n    '''\n    Write a function to find the number of rectangle teeth that would be used to \n    cut a circle with a given radius.\n    '''\n    perimeter = circle_perimeter(r)\n    return perimeter / (2 * r)\n    \ndef rectangle_tooth_and_circular_tooth(l,b):\n    '''\n    Write a function to find the number of rectangular teeth that would be used to \n    cut a rectangle with a given length and breadth and the number of circular \n    teeth that would be used to cut a circle with a given radius.\n    '''\n    perimeter = rectangle_perimeter(l,b)\n    return perimeter / (l+b),circle_tooth(l)\n    \ndef circle_tooth_and_rectangular_tooth(r):\n    '''\n    Write a function to find the number of circular teeth that would be used to \n    cut a circle with a given radius and the number of rectangular teeth that \n    would be used to cut a rectangle with a given length and breadth.\n    '''\n    perimeter = circle_perimeter(r)\n    return perimeter / (2 * r),rectangle_tooth(r,r)\n    \ndef rectangle_tooth_and_circular_tooth_and_rectangular_tooth(l,b):\n    '''\n    Write a function to find the number of rectangular teeth that would be used to \n    cut a rectangle with a given length and breadth and the number of circular \n    teeth that would be used to cut a circle with a given radius and the number \n    of rectangular teeth that would be used to cut a rectangle with a given length \n    and breadth.\n    '''\n    perimeter = rectangle_perimeter(l,b)\n    return perimeter / (l+b),circle_tooth(l),rectangle_tooth(l,b)\n    \ndef circle_tooth_and_circular_tooth_and_rectangular_tooth(r):\n    '''\n    Write a function to find the number of circular teeth that would be used to \n    cut a circle with a given radius and the number of rectangular teeth that \n    would be used to cut a rectangle with a given length and breadth and the \n    number of circular teeth that would be used to cut a circle with a given radius.\n    '''\n    perimeter = circle_perimeter(r)\n    return perimeter / (2 * r),rectangle_tooth(r,r),circle_tooth(r)\n    \ndef rectangle_tooth_and_circular_tooth_and_rectangular_tooth_and_circular_tooth(l,b):\n    '''\n    Write a function to find the number of rectangular teeth that would be used to \n    cut a rectangle with a given length and breadth, the number of circular \n    teeth that would be used to cut a circle with a given radius, the number of \n    circular teeth that would be used to cut a rectangle with a given length and \n    breadth and the number of rectangular teeth that would be used to cut a circle \n    with a given radius.\n    '''\n    perimeter = rectangle_perimeter(l,b)\n    return perimeter / (l+b),circle_tooth(l),rectangle_tooth(l,b),circle_tooth(l)\n    \ndef circle_tooth_and_circular_tooth_and_rectangular_tooth_and_circular_tooth_and_rectangular_tooth(r):\n    '''\n    Write a function to find the number of rectangular teeth that would be used to \n    cut a circle with a given radius, the number of circular teeth that would be \n    used to cut a rectangle with a given length and breadth, the number of circular \n    teeth that would be used to cut a circle with a given radius, the number of \n    circular teeth that would be use",
        "num_ids": 87
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l == b:\n        return l**2\n    else:\n        return l*b\n",
        "num_ids": 25
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str=\"\"\n    for c in str1:\n        if c<=\"Z\" and c>=\"A\":\n            new_str=new_str+c\n    return new_str\ndef substring(str1):\n    '''\n    Write a function to check if a string contains all letters of the alphabet.\n    '''\n    new_str=remove_uppercase(str1)\n    for c in new_str:\n        if c<=\"Z\" and c>=\"A\":\n            return True\n    return False\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    return str1==remove_uppercase(str1)[::-1]\ndef is_palindrome_permutation(str1):\n    '''\n    Write a function to check if a string is a permutation of a palindrome or not.\n    '''\n    l=[]\n    for c in str1:\n        if c<=\"Z\" and c>=\"A\":\n            l.append(c)\n    l=remove_uppercase(l)\n    l1=[]\n    for c in l:\n        if c not in l1:\n            l1.append(c)\n        else:\n            return False\n    return True\ndef to_power(x,y):\n    '''\n    Write a function to calculate a number raised to the power of another number.\n    '''\n    if y==0:\n        return 1\n    if y>0:\n        return x*to_power(x,y-1)\n    if y<0:\n        return 1/to_power(x,-y)\n    else:\n        return 0\ndef is_power_of_two(n):\n    '''\n    Write a function to check if a number is a power of 2 or not.\n    '''\n    return n&(n-1)==0\ndef is_power_of_four(n):\n    '''\n    Write a function to check if a number is a power of four or not.\n    '''\n    return n&(n-1)==0 and n&0xAAAAAAAA==0\ndef is_power_of_three(n):\n    '''\n    Write a function to check if a number is a power of three or not.\n    '''\n    return n&(n-1)==0 and n&0x33333333333333333333==0\ndef rot_13(str1):\n    '''\n    Write a function to encode a given string using ROT13 cipher.\n    '''\n    new_str=\"\"\n    for c in str1:\n        if c<=\"Z\" and c>=\"A\":\n            if ord(c)+13>122:\n                new_str=new_str+chr(ord(c)-13+65)\n            else:\n                new_str=new_str+chr(ord(c)+13)\n        else:\n            new_str=new_str+c\n    return new_str\ndef add_space(str1):\n    '''\n    Write a function to add a space before every lowercase vowel.\n    '''\n    new_str=\"\"\n    for c in str1:\n        if c<=\"Z\" and c>=\"A\":\n            new_str=new_str+c+\" \"\n        else:\n            new_str=new_str+c\n    return new_str\ndef every_other_letter(str1):\n    '''\n    Write a function to every other letter in a given string.\n    '''\n    new_str=\"\"\n    for i in range(0,len(str1)):\n        if i%2==0:\n            new_str=new_str+str1[i]\n    return new_str\ndef get_next_char(str1,pos):\n    '''\n    Write a function to get the next character in the string after a given position.\n    '''\n    return str1[pos+1]\ndef is_there_stair_numbers(str1):\n    '''\n    Write a function to check if a string contains any digits.\n    '''\n    return \"0\" in str1\ndef is_there_an_integer(str1):\n    '''\n    Write a function to check if a string contains any integers.\n    '''\n    return re.search(\"[0-9]+\",str1)\ndef word_to_number(str1):\n    '''\n    Write a function to convert a word to a number.\n    '''\n    return sum([ord(c)-64 for c in str1])\ndef find_common_elements(list1,list2):\n    '''\n    Write a function to find common elements in two sorted arrays.\n    '''\n    new_list=[]\n    for c in list1:\n        if c in list2:\n            new_list.append(c)\n    return new_list\ndef to_lower(str1):\n    '''\n    Write a function to change a given string to lowercase.\n    '''\n    return str1.lower()\ndef to_lower_words(str1):\n    '''\n    Write a function to change all the words of a given string to lowercase.\n    '''\n    return re.sub(\"[^a-zA-Z0-9]+\",\" \",str1)\ndef to_words(str1):\n    '''\n    Write a function to change all the words of a given string to lowercase.\n    '''\n    return re.sub(\"[^a-zA-Z0-9]+\",\" \",str1).split()\ndef to_upper_words(str1):\n    '''\n    Write a function to change all the words of a given string to lowercase.\n    '''\n    return re.sub(\"[^a-zA-Z0-9]+\",\" \",str1).split()\ndef is_there_duplicates(str1):\n    '''\n    Write a function to check if a string has duplicate characters.\n    '''\n    for c in str1:\n        if str1.count(c)>1:\n            return True\n    return False\ndef is_there_duplicates_2(str1):\n    '''\n    Write a function to check if a string has duplicate characters.\n    '''\n    for c in str1:\n        if str1.count(c)>1:\n            return True\n    return False\ndef find_first_duplicate(str1):\n    '''\n    Write a function to find the first duplicate character in a string.\n    '''\n    for c in str1:\n        if str1.count(c)>1:\n            return c\n    return None\ndef find_first_duplicate_2(str1):\n    '''\n    Write a function to find the first duplicate character in a string.\n    '''\n    for c in str1:\n        if str1.count(c)>1:\n            return c\n    return None\ndef is_permutation(str1,str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return sorted(str1)==sorted(str2)\ndef is_permutation_2(str1,str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    for c in str1:\n        if str1.count(c)<str2.count(c):\n            return False\n    return True\ndef is_permutation_3(str1,str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    l1=[0]*26\n    l2=[0]*26\n    for c in str1:\n        l1[ord(c)-ord(\"A\")]=l1[ord(c)-ord(\"A\")]+1\n    for c in str2:\n        l2[ord(c)-ord(\"A\")]=l2[ord(c)-ord(\"A\")]+1\n    for i in range(0,26):\n        if l1[i]!=l2[i]:\n            return False\n    return True\ndef remove_duplicate_letters(str1):\n    '''\n    Write a function to remove duplicate letters from a given string.\n    '",
        "num_ids": 18
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"\"\n    str3 = re.findall(\"[A-Z][^A-Z]+\", str1)\n    for i in range(0,len(str3)):\n        str2 = str2 + str3[i][1:]\n    return str2\ndef longest_common_substring(str1, str2):\n    m = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    longest, x_longest = 0, 0\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                m[x][y] = m[x-1][y-1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return (str1[x_longest - longest: x_longest])\ndef longest_common_substring_v2(str1, str2):\n    m = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                m[x][y] = m[x-1][y-1] + 1\n            else:\n                m[x][y] = max(m[x-1][y], m[x][y-1])\n    return m[len(str1)][len(str2)]\ndef longest_common_substring_v3(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lcs_table[x][y] = lcs_table[x-1][y-1] + 1\n            else:\n                lcs_table[x][y] = max(lcs_table[x][y-1], lcs_table[x-1][y])\n    return lcs_table[len(str1)][len(str2)]\ndef longest_common_substring_v4(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lcs_table[x][y] = lcs_table[x-1][y-1] + 1\n            else:\n                lcs_table[x][y] = max(lcs_table[x-1][y], lcs_table[x][y-1])\n    return lcs_table[len(str1)][len(str2)]\ndef longest_common_substring_v5(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lcs_table[x][y] = lcs_table[x-1][y-1] + 1\n            else:\n                lcs_table[x][y] = max(lcs_table[x-1][y], lcs_table[x][y-1])\n    return lcs_table[len(str1)][len(str2)]\ndef longest_common_substring_v6(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lcs_table[x][y] = lcs_table[x-1][y-1] + 1\n            else:\n                lcs_table[x][y] = max(lcs_table[x-1][y], lcs_table[x][y-1])\n    return lcs_table[len(str1)][len(str2)]\ndef longest_common_substring_v7(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lcs_table[x][y] = lcs_table[x-1][y-1] + 1\n            else:\n                lcs_table[x][y] = max(lcs_table[x-1][y], lcs_table[x][y-1])\n    return lcs_table[len(str1)][len(str2)]\ndef longest_common_substring_v8(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lcs_table[x][y] = lcs_table[x-1][y-1] + 1\n            else:\n                lcs_table[x][y] = max(lcs_table[x-1][y], lcs_table[x][y-1])\n    return lcs_table[len(str1)][len(str2)]\ndef longest_common_substring_v9(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lcs_table[x][y] = lcs_table[x-1][y-1] + 1\n            else:\n                lcs_table[x][y] = max(lcs_table[x-1][y], lcs_table[x][y-1])\n    return lcs_table[len(str1)][len(str2)]\ndef longest_common_substring_v10(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lcs_table[x][y] = lcs_table[x-1][y-1] + 1\n            else:\n                lcs_table[x][y] = max(lcs_table[x-1][y], lcs_table[x][y-1])\n    return lcs_table[len(str1)][len(str2)]\ndef longest_common_substring_v11(str1, str2):\n    lcs_table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[",
        "num_ids": 2010
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in '!@#$%^&*()_+-=,;:.{}|/?':\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1[:i] + str1[i+1:]\n            break\n    return str1\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove non-ASCII characters from a given string.\n    '''\n    return ''.join([i for i in str1 if ord(i) <= 127])\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given string.\n    '''\n    return ''.join([i for i in str1 if ord(i) > 31 and ord(i) < 127])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return ''.join([i for i in str1 if ord(i) < 127])\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return ''.join([i for i in str1 if not i.isdigit()])\ndef remove_words_1(str1):\n    '''\n    Write a function to remove words from a given string which are less than 3 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) > 2])\ndef remove_words_2(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) < 5])\ndef remove_words_3(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    less than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) >= 5 and len(i) <= 7])\ndef remove_words_4(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 5])\ndef remove_words_5(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_6(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_7(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_8(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_9(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_10(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_11(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_12(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_13(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_14(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_15(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_16(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_17(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_18(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ') if len(i) <= 7])\ndef remove_words_19(str1):\n    '''\n    Write a function to remove words from a given string which are more than 4 characters long and\n    more than 5 characters long.\n    '''\n    return''.join([i for i in str1.split(' ",
        "num_ids": 17
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #return re.sub(r'[A-Z]', '', str1)\n    res = ''\n    for letter in str1:\n        if letter.isupper():\n            pass\n        else:\n            res += letter\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str=''\n    for char in str1:\n        if char.isalpha()==True:\n            new_str=new_str+char\n    return new_str\n",
        "num_ids": 45
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r\"[A-Z]+\", \"\", str1)\n",
        "num_ids": 21
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new = ''\n    for i in str1:\n        if not i.isupper():\n            new += i\n    return new\n",
        "num_ids": 33
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]','',str1)\n",
        "num_ids": 19
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # your code goes here\n    \n    \n    \n    return re.sub(r'[A-Z]+', '', str1)\n",
        "num_ids": 35
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        return i[0]\n",
        "num_ids": 18
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for x in lst:\n        res.append(x[0])\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # lst=[[1,2,3],[4,5,6],[7,8,9]]\n    res=map(lambda x:x[0],lst)\n    print res\n    return res\n    ",
        "num_ids": 52
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    l = len(lst)\n    for i in range(0,l):\n        print lst[i][0]\n",
        "num_ids": 32
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for x in lst:\n        yield x[0]\n        \nlst = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n",
        "num_ids": 45
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = [item[0] for item in lst]\n    return new_list\n",
        "num_ids": 25
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # return [sublist[0] for sublist in lst]\n    return map(lambda x:x[0],lst)\n",
        "num_ids": 34
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [li[0] for li in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    newList = []\n    for i in lst:\n        newList.append(i[0])\n    return newList\n    \n",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(count)\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n",
        "num_ids": 18
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if type(str)!= str:\n        return False\n    elif len(str) == 0:\n        return 0\n    else:\n        return len([x for x in str if x.isupper()])\n",
        "num_ids": 52
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr+=1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if(str[i].isupper()):\n            count = count + 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n",
        "num_ids": 37
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 for c in str if c.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if ord(i)>=65 and ord(i)<=90:\n            count +=1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([ch for ch in str if ch.isupper()])\n    \n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return len([ch for ch in str if ch.islower()])\n    \n    \ndef space_ctr(str):\n    '''\n    Write a python function to count the spaces in a given string.\n    '''\n    return len([ch for ch in str if ch.isspace()])\n    \n    \ndef digit_ctr(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    return len([ch for ch in str if ch.isdigit()])\n    \n    \ndef other_ctr(str):\n    '''\n    Write a python function to count the other characters in a given string.\n    '''\n    return len([ch for ch in str if not ch.isdigit() and not ch.isspace() and not ch.isalpha()])\n    \n    \ndef unique_word(str):\n    '''\n    Write a python function to count the number of unique words in a given string.\n    '''\n    return len(set(str.split()))\n    \n    \ndef unique_word_ctr(str):\n    '''\n    Write a python function to count the number of unique words in a given string.\n    '''\n    return len(set(str.split()))\n    \n    \ndef is_pangram(str):\n    '''\n    Write a python function to check whether a given string is a pangram or not.\n    '''\n    return len(set(str)) == 26\n    \n    \ndef is_pangram_ctr(str):\n    '''\n    Write a python function to check whether a given string is a pangram or not.\n    '''\n    return len(set(str)) == 26\n    \n    \ndef super_reduced_string(str):\n    '''\n    Write a python function to reduce a string by removing all consecutive duplicate characters.\n    '''\n    return ''.join(list(set(str)))\n    \n    \ndef super_reduced_string_ctr(str):\n    '''\n    Write a python function to reduce a string by removing all consecutive duplicate characters.\n    '''\n    return ''.join(list(set(str)))\n    \n    \ndef frequency_map(str):\n    '''\n    Write a python function to count the frequency of each character in a string.\n    '''\n    res = {}\n    for ch in str:\n        if ch in res:\n            res[ch] += 1\n        else:\n            res[ch] = 1\n    return res\n    \n    \ndef frequency_map_ctr(str):\n    '''\n    Write a python function to count the frequency of each character in a string.\n    '''\n    res = {}\n    for ch in str:\n        res[ch] = res.get(ch, 0) + 1\n    return res\n    \n    \ndef print_list(list):\n    '''\n    Write a python function to print a list.\n    '''\n    for i in list:\n        print(i)\n    print('\\n')\n    \n    \ndef print_list_ctr(list):\n    '''\n    Write a python function to print a list.\n    '''\n    for i in list:\n        print(i)\n    print('\\n')\n    \n    \ndef reverse_list(list):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return list[::-1]\n    \n    \ndef reverse_list_ctr(list):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return list[::-1]\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return str == str[::-1]\n    \n    \ndef is_palindrome_ctr(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return str == str[::-1]\n    \n    \ndef palindrome_permutation(str):\n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome or not.\n    '''\n    res = {}\n    for ch in str:\n        if ch in res:\n            res[ch] += 1\n        else:\n            res[ch] = 1\n    if res.get(' ', 0) > 1:\n        return False\n    elif res.get(' ', 0) == 1:\n        return True\n    else:\n        return False\n    \n    \ndef palindrome_permutation_ctr(str):\n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome or not.\n    '''\n    res = {}\n    for ch in str:\n        res[ch] = res.get(ch, 0) + 1\n    if res.get(' ', 0) > 1:\n        return False\n    elif res.get(' ', 0) == 1:\n        return True\n    else:\n        return False\n    \n    \ndef binary_string(str):\n    '''\n    Write a python function to convert a string to a binary string.\n    '''\n    return ''.join([str[i] if i < len(str) else '0' for i in range(0, len(str))])\n    \n    \ndef binary_string_ctr(str):\n    '''\n    Write a python function to convert a string to a binary string.\n    '''\n    return ''.join([str[i] if i < len(str) else '0' for i in range(0, len(str))])\n    \n    \ndef check_permutation(str1, str2):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    return sorted(str1) == sorted(str2)\n    \n    \ndef check_permutation_ctr(str1, str2):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    return sorted(str1) == sorted(str2)\n    \n    \ndef palindrome_partition(str):\n    '''\n    Write a python function to check whether a given string is a palindrome partition or not.\n    '''\n    res = {}\n    for i in range(1, len(str) + 1):\n        for j in range(0, len(str) - i + 1):\n            substr = str[j:j + i]\n            if substr == substr[::-1]:\n                res[substr] = res.get(substr, 0) + 1\n    return res\n    \n    \ndef palindrome_partition_ctr(str):\n    '''\n    Write a python function to check whether a given string is a palindrome partition or not.\n    '''\n    res = {}\n    for i in range(1, len(str) + 1):\n        for j in range(0, len(str) - i + 1):\n            substr = str[j:j + i]\n            if substr == substr[::-1]:\n                res[substr] = res.get(substr, 0) + 1\n    return res\n    \n    \ndef is_pangram_sentence(str):\n    '''\n    Write a python function to check whether a given string is a pangram sentence or not.\n    '''\n    for ch in 'abcdefghijklmnopqrstuvwxyz':\n        if ch not in str.lower():\n            return False\n    return True\n    \n    \ndef is_pangram_sentence_ctr(str):\n    '''\n    Write a python function to check whether a given string is a pangram sentence or not.\n    '''\n    for ch in 'abcdefghijklmnopqrstuvwxyz':\n        if ch not in str.lower():\n            return False\n    return True\n    \n    \ndef rotate(str):\n    '''\n    Write a python function to check whether a given string is a rotation of another string or not.\n    '''\n    return str == str[len(str):] + str\n    \n    \ndef rotate_ctr",
        "num_ids": 24
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combination_helper(list1, tmp_list, n, k):\n        if k == 0:\n            return\n        if len(tmp_list) == n:\n            result_list.append(tmp_list)\n            return\n        for i in range(len(list1)):\n            combination_helper(list1[i+1:], tmp_list+[list1[i]], n, k-1)\n    result_list = []\n    combination_helper(list1, [], len(list1), 2)\n    return result_list\n",
        "num_ids": 137
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            combinations.append((list1[i], list1[j]))\n    return combinations\n",
        "num_ids": 60
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    else:\n        return combinations_list(list1[1:]) + combinations_list(list1[1:])\n",
        "num_ids": 63
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    list1.sort()\n    for i in range(len(list1)):\n        if i == 0:\n            result.append([list1[i]])\n        else:\n            result.append([list1[i]] + [r for r in result if list1[i] > r[-1]])\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        return map(lambda x: [list1[0]] + x, combinations_list(list1[1:])) + combinations_list(list1[1:])\n",
        "num_ids": 81
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            list2.append([list1[i],list1[j]])\n    return list2\n",
        "num_ids": 88
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        last = list1[-1]\n        rest = list1[:-1]\n        return [item + [last] for item in combinations_list(rest)] + combinations_list(rest)\n    return []\n",
        "num_ids": 89
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    return [list1[0]] + list(combinations_list(list1[1:]))\n",
        "num_ids": 58
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return list1\n    first = list1[0]\n    remainingList = list1[1:]\n    return [first] + combinations_list(remainingList)\n    \n    \n    \ndef to_octal(n):\n    '''\n    Write a function to convert a given decimal number into octal\n    '''\n    if n == 0:\n        return 0\n    return oct(n).replace('0o','')\n    \ndef search(list, target):\n    '''\n    Write a function to find the index of the target element in the list.\n    '''\n    if list == []:\n        return None\n    else:\n        mid = len(list) / 2\n        if list[mid] == target:\n            return mid\n        elif list[mid] < target:\n            return search(list[mid+1:], target)\n        else:\n            return search(list[:mid], target)\n            \n    \n    \ndef binary_search(list, target):\n    '''\n    Write a function that performs a binary search on a sorted list of numbers\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        mid = len(list) / 2\n        if list[mid] == target:\n            return mid\n        elif list[mid] < target:\n            return binary_search(list[mid+1:], target)\n        else:\n            return binary_search(list[:mid], target)\n            \n            \n            \ndef remove_duplicates(list):\n    '''\n    Write a function to remove duplicates from the given list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        first = list[0]\n        remainingList = list[1:]\n        if first in remainingList:\n            return remainingList\n        else:\n            return [first] + remove_duplicates(remainingList)\n    \n    \ndef rotate_list(list, num):\n    '''\n    Write a function to rotate the given list by the given number of steps.\n    '''\n    if num == 0:\n        return list\n    else:\n        if num < 0:\n            return rotate_list(list[-num:], num)\n        else:\n            return rotate_list(list[:-num], num)\n    \n    \ndef rotate_list_reverse(list, num):\n    '''\n    Write a function to rotate the given list by the given number of steps.\n    '''\n    if num == 0:\n        return list\n    elif num < 0:\n        return rotate_list(list[-num:], num)\n    else:\n        return rotate_list(list[:-num], num)\n    \n    \ndef max_list(list):\n    '''\n    Write a function to return the maximum element of the given list.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        maximum = list[0]\n        for i in range(1, len(list)):\n            if list[i] > maximum:\n                maximum = list[i]\n        return maximum\n    \n    \n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    return ''.join(list)\n    \n    \ndef list_to_string2(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if list == []:\n        return ''\n    else:\n        first = list[0]\n        remainingList = list[1:]\n        return first + list_to_string2(remainingList)\n    \n    \ndef list_to_string3(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    if list == []:\n        return ''\n    else:\n        return list[0] + list_to_string3(list[1:])\n    \n    \ndef contains(str1, str2):\n    '''\n    Write a function to check if the string str1 contains the string str2.\n    '''\n    if str1 == str2:\n        return True\n    elif len(str1) < len(str2):\n        return contains(str1, str2[len(str1):])\n    else:\n        return contains(str1[len(str2):], str2)\n    \n    \ndef merge_list(list1, list2):\n    '''\n    Write a function to merge two lists into a new list.\n    '''\n    if list1 == []:\n        return list2\n    elif list2 == []:\n        return list1\n    else:\n        first = list1[0]\n        remainingList1 = list1[1:]\n        first2 = list2[0]\n        remainingList2 = list2[1:]\n        if first < first2:\n            return [first] + merge_list(remainingList1, remainingList2)\n        else:\n            return [first2] + merge_list(remainingList1, remainingList2)\n    \n    \ndef move_zeroes(list):\n    '''\n    Write a function to move zeroes to the end of a list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        first = list[0]\n        remainingList = list[1:]\n        if first == 0:\n            return [0] + move_zeroes(remainingList)\n        else:\n            return [first] + move_zeroes(remainingList)\n    \n    \n    \ndef sum_all(list):\n    '''\n    Write a function to return the sum of all elements in the given list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        return list[0] + sum_all(list[1:])\n    \n    \n    \ndef reverse_list(list):\n    '''\n    Write a function to reverse the given list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        first = list[0]\n        remainingList = list[1:]\n        return [first] + reverse_list(remainingList)\n    \n    \ndef largest_sum(list):\n    '''\n    Write a function to return the maximum sum of contiguous sublists in the given list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        first = list[0]\n        remainingList = list[1:]\n        if sum(remainingList) > sum(first):\n            return sum(remainingList)\n        else:\n            return sum(first)\n    \n    \n    \ndef sum_digits(num):\n    '''\n    Write a function to return the sum of the digits of the given number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + sum_digits(num / 10)\n    \n    \ndef count_consecutive(list):\n    '''\n    Write a function to count consecutive numbers in a list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        first = list[0]\n        remainingList = list[1:]\n        if first - 1 == remainingList[0]:\n            return 1 + count_consecutive(remainingList)\n        else:\n            return count_consecutive(remainingList)\n    \n    \ndef max_consecutive(list):\n    '''\n    Write a function to return the maximum consecutive number of the given list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        first = list[0]\n        remainingList = list[1:]\n        if first - 1 == remainingList[0]:\n            return first + max_consecutive(remainingList)\n        else:\n            return max_consecutive(remainingList)\n    \n    \ndef min_consecutive(list):\n    '''\n    Write a function to return the minimum consecutive number of the given list.\n    '''\n    if len(list) == 0:\n        return 0\n    else:\n        first = list[0]\n        remainingList = list[1:]\n        if first - 1 == remainingList[0]:\n            return first + min_consecutive(remainingLis",
        "num_ids": 64
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = list(list1)\n    n = len(list1)\n    res = []\n    for i in range(1, n):\n        for j in itertools.combinations(list1, i):\n            res.append(list(j))\n    return res\n",
        "num_ids": 68
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        # if previous number is negative, multiply it with max ending here,\n        # instead of adding it\n        if arr[i-1] < 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n            \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "num_ids": 175
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    # if there is only 1 element, just return 1\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 48
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Initialize left, max_left, max_so_far and right to 0\n    left = 0\n    max_left = float('-inf')\n    max_so_far = float('-inf')\n    right = 0\n    max_right = float('-inf')\n    \n    # Initialize max_ending_here and max_ending_here_so_far to 0\n    max_ending_here = 0\n    max_ending_here_so_far = float('-inf')\n    \n    for i in xrange(len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        max_ending_here_so_far = max(max_ending_here, max_ending_here_so_far)\n        max_ending_here = max(0, max_ending_here)\n        if max_ending_here > 0:\n            right = i\n        if max_ending_here_so_far > max_so_far:\n            max_so_far = max_ending_here_so_far\n            left = left if max_ending_here_so_far > max_left else max_left\n            max_left = left\n            right = right if max_ending_here_so_far > max_right else max_right\n            max_right = right\n    return max_so_far\n",
        "num_ids": 318
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_subarray_product_brute(arr):\n        if len(arr) == 0:\n            return 0\n        max_product = arr[0]\n        for i in xrange(1, len(arr)):\n            max_product = max(max_product * arr[i], arr[i])\n        return max_product\n",
        "num_ids": 82
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n",
        "num_ids": 26
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    # the max_ending_here array will store the maximum subarray ending with arr[i]\n    # max_ending_here[i] represents the max subarray ending with arr[i]\n    # max_so_far represents the max subarray ending with the prefix elements of arr[:i+1]\n    # we'll use these 2 arrays to compute the answer\n    max_ending_here = [0 for _ in xrange(len(arr))]\n    max_so_far = [0 for _ in xrange(len(arr))]\n    for i in xrange(1, len(arr)):\n        max_ending_here[i] = max(arr[i], max_ending_here[i-1] * arr[i], max_so_far[i-1] * arr[i])\n        max_so_far[i] = max(arr[i], max_so_far[i-1] * arr[i], max_ending_here[i-1] * arr[i])\n    return max(max_ending_here), max_so_far\n",
        "num_ids": 266
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # TODO - Implement this\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in xrange(1,len(arr)):\n        current_product = max(current_product*arr[i],arr[i])\n        max_product = max(current_product,max_product)\n    return max_product\n",
        "num_ids": 87
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    dp = [[-1 for i in range(n)] for i in range(n)]\n    max_dp = [0 for i in range(n)]\n    min_dp = [0 for i in range(n)]\n",
        "num_ids": 61
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for key in dict:\n            if key == n:\n                return False\n        return True\n",
        "num_ids": 42
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if val!= n:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k,v in dict.items():\n        if v!= n:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    if len(dict) == 0:\n        return False\n    if not all(dict.values()):\n        return False\n    else:\n        return True\n",
        "num_ids": 53
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values()) and len(dict.values()) == 1\n",
        "num_ids": 20
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict.values():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    flag = False\n    if len(dict) == 1:\n        flag = True\n    else:\n        for i in range(0, len(dict)):\n            if dict[i]!= dict[0]:\n                flag = False\n                break\n    if flag:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 82
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    list = []\n    for key in dict:\n        list.append(dict[key])\n    if list[0] == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # drop the items whose values are all empty strings\n    # dict1 = {'a': '', 'b': '', 'c': ''}\n    dict1 = {k:v for k,v in dict1.items() if v}\n    return dict1\n",
        "num_ids": 63
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            dict1.pop(key)\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1.keys():\n        if dict1[item] == {}:\n            del dict1[item]\n    return dict1\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not isinstance(dict1, dict):\n        print(\"Argument should be a dictionary.\")\n        return\n",
        "num_ids": 28
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.iteritems():\n        if value == None:\n            dict1.pop(key)\n    return dict1\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1_copy = dict1.copy()\n    for k, v in dict1_copy.items():\n        if not v:\n            del dict1[k]\n    return dict1\n",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k:v for k, v in dict1.items() if v}\n    return new_dict\n",
        "num_ids": 31
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for k,v in dict1.items():\n        if v:\n            result[k] = v\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v == []:\n            del dict1[k]\n",
        "num_ids": 29
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    curr_product = 1\n    for i in range(0,len(arr)):\n        curr_product = 1\n        for j in range(i, len(arr)):\n            curr_product *= arr[j]\n            max_product = max(curr_product, max_product)\n    return max_product\n",
        "num_ids": 88
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    import sys\n    if arr == []:\n        return 1\n    max_product = 1\n    for i in range(len(arr)):\n        if i == 0:\n            temp = arr[i]\n        else:\n            temp *= arr[i]\n        if temp < 0:\n            temp = 0\n        max_product = max(temp, max_product)\n    return max_product\n",
        "num_ids": 96
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    length = len(arr)\n    if length < 3:\n        return arr[0] * arr[1] * arr[2]\n    if length == 3:\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1], arr[0] * arr[2])\n    current = max(arr[0] * arr[1] * arr[2], arr[1] * arr[2], arr[2])\n    for i in xrange(3, length):\n        temp = arr[i] * arr[i - 1] * arr[i - 2]\n        if temp > current:\n            current = temp\n    return current\n",
        "num_ids": 161
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, n):\n        max_product = max(max_product * arr[i], min_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], max_product * arr[i], arr[i])\n    return max_product\n",
        "num_ids": 128
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0]\n    max_val = arr[0]\n    min_val = arr[0]\n    for val in arr:\n        max_val = max(val, max_val*val)\n        min_val = min(val, min_val*val)\n        max_prod = max(max_val, max_prod)\n    return max_prod\n",
        "num_ids": 97
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        min_ending_here = arr[0]\n        min_so_far = arr[0]\n        for i in range(1,n):\n            max_ending_here = max(arr[i],max_ending_here*arr[i])\n            min_ending_here = min(arr[i],min_ending_here*arr[i])\n            max_so_far = max(max_so_far,max_ending_here)\n            min_so_far = min(min_so_far,min_ending_here)\n        return max_so_far\n",
        "num_ids": 199
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr is None or len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    \n    # O(n^2)\n    # O(n) space\n    '''\n    n = len(arr)\n    table = [1 for _ in range(n)]\n    max_product = 1\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[j] < arr[i]:\n                max_product = max(max_product, table[j] * arr[i])\n        table[i] = max_product\n    return max_product\n    '''\n    # O(n) space\n    '''\n    n = len(arr)\n    table = [1 for _ in range(n)]\n    max_product = -1\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j]:\n                table[i] = max(table[i], table[j] * arr[i])\n        max_product = max(max_product, table[i])\n    return max_product\n    '''\n    # O(n) space\n    '''\n    n = len(arr)\n    table = [1 for _ in range(n)]\n    max_product = 1\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j]:\n                table[i] = max(table[i], table[j] * arr[i])\n        max_product = max(max_product, table[i])\n    return max_product\n    '''\n    '''\n    # O(n) space\n    '''\n    n = len(arr)\n    table = [1 for _ in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j]:\n                table[i] = max(table[i], table[j] * arr[i])\n    return max(table)\n",
        "num_ids": 86
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    '''\n    Algorithm:\n    Take a sliding window of size k, and compute the product of the first k elements, and multiply the product of the elements outside the window.\n    \n    Example: [1,2,3,4,5] and k = 3\n    \n    -> Final max product = ((1*2)*(3*4)) = 60\n    \n    Example: [1,2,3,4,5,6,7,8,9] and k = 4\n    \n    -> Final max product = ((1*2)*(3*4)) = 804\n    \n    '''\n    \n    max_product = arr[0]*arr[1]\n    \n    for i in range(len(arr)-2):\n        max_product = max(max_product, arr[i]*arr[i+1]*arr[i+2])\n    \n    return max_product\n",
        "num_ids": 72
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr\n",
        "num_ids": 16
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(x+y for x,y in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(a + b for a, b in zip(test_tup, test_tup[1:])) + (test_tup[-1],)\n",
        "num_ids": 41
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define a helper function\n    def helper(l):\n        return [ l[i] + l[i+1] for i in range(len(l)-1) ]\n    # Check the edge case\n    if not test_tup:\n        return []\n    # Use the helper function to calculate the sum of the adjacent elements of the tuple\n    return helper(test_tup)\n",
        "num_ids": 92
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighbor_pairs = []\n    for i in range(len(test_tup)-1):\n        neighbor_pairs.append(test_tup[i]+test_tup[i+1])\n    return neighbor_pairs\n",
        "num_ids": 62
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 3:\n        return None\n    else:\n        return test_tup[0] + test_tup[1] + test_tup[2]\n",
        "num_ids": 49
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    x_ = x + y\n    y_ = x_ + y\n    z = x_ + y_\n    if z == (x + y + y):\n        return (x, y)\n    else:\n        return None\n",
        "num_ids": 78
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Note: You don't have to make use of the built-in sum() or any other built-in Python functions.\n    return (test_tup[1] - test_tup[0], test_tup[2] - test_tup[1])\n",
        "num_ids": 64
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return ((test_tup[0] + test_tup[1]), (test_tup[1] + test_tup[2]))\n",
        "num_ids": 38
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_tup = ()\n    for i in range(0, len(test_tup)):\n        if i < len(test_tup) - 1:\n            result_tup += (test_tup[i] + test_tup[i+1],)\n    return result_tup\n",
        "num_ids": 75
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x,y: x*y % n, arr)\n",
        "num_ids": 20
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return (arr[0] * arr[1]) % n\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = (res * arr[i]) % n\n    return res\n",
        "num_ids": 120
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #T(n) = 3*T(n/2) + O(n)\n    if n == 1:\n        return 1\n    else:\n        r = n\n        a = n/2\n        r = r + find_remainder(arr, a)\n        return r\n",
        "num_ids": 70
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize result \n    result = 1\n",
        "num_ids": 14
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # code here\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n",
        "num_ids": 37
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for i in arr:\n        total = (total * i) % n\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = product * arr[i]\n    return product % n\n",
        "num_ids": 35
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if arr == []:\n        return 1\n    else:\n        return arr[0] * find_remainder(arr[1:], n) % n\n",
        "num_ids": 40
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import numpy as np\n    import math\n    arr = np.array(arr)\n    prod = np.prod(arr)\n    return prod % n\n",
        "num_ids": 41
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    n = n\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n    \nif __name__ == '__main__':\n    # test case\n    arr = [3, 2, 1]\n    n = 10\n    # function call\n    result = find_remainder(arr, n)\n    print(result)\n    \n    # another test case\n    arr = [1, 2, 3, 4, 5]\n    n = 8\n    # function call\n    result = find_remainder(arr, n)\n    print(result)",
        "num_ids": 145
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    def is_consecutive(l):\n        l.sort()\n        if(len(l) == 1):\n            return True\n        else:\n            for i in range(1,len(l)):\n                if(l[i] - l[i-1]!= 1):\n                    return False\n            return True\n    l = [int(i) for i in l]\n    return is_consecutive(l)\n",
        "num_ids": 104
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    list_len = len(l) \n    l1 = l[0]\n    l2 = l[1]\n    if l1 == l2 - 1: \n        flag = True\n    else: \n        flag = False\n    for i in range(2, list_len): \n        l1 = l[i]\n        l2 = l[i-1]\n        if l1 - l2!= 1: \n            flag = False\n            break\n    return flag\n",
        "num_ids": 117
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for x,y in zip(l, l[1:]):\n        if x+1!= y:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0, len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]!= 1:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]!= l[i+1]-1: \n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(0,n-1):\n        if(l[i+1] - l[i]!= 1):\n            return False\n    return True\n    ",
        "num_ids": 51
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!=1:\n            return False\n    return True\n    \n",
        "num_ids": 48
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(test_list2)\n",
        "num_ids": 20
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    a = list(set(test_list1) & set(test_list2))\n    return tuple(a)\n",
        "num_ids": 30
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if (len(test_list1) == len(test_list2)):\n        result_list = []\n        for element in test_list1:\n            if element in test_list2:\n                result_list.append(element)\n        return result_list\n    else:\n        return None\n",
        "num_ids": 73
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [(x, y) for x in test_list1 for y in test_list2 if x == y]\n",
        "num_ids": 29
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = []\n    for item in test_list1:\n        if item in test_list2:\n            test_list3.append(item)\n    return test_list3\n",
        "num_ids": 48
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))\n",
        "num_ids": 40
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    out = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                out.append(tup1)\n    return out\n",
        "num_ids": 56
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = test_list1[1]\n    test_list2 = test_list2[1]\n    return tuple(set(test_list1) & set(test_list2))\n",
        "num_ids": 50
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [item for item in test_list1 if item in test_list2]\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=list(str1)\n    str1[ch]=newch\n    str1=''.join(str1)\n    return str1\n",
        "num_ids": 37
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    s=str1.replace(ch,newch)\n    return s\n",
        "num_ids": 20
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr = newstr[:i]+newch+newstr[i+1:]\n    return newstr\n",
        "num_ids": 59
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #print \"orig =\",str1\n    #print \"new =\",ch,newch\n    str2 = str1.replace(ch,newch)\n    #print \"str2 =\",str2\n    return str2\n",
        "num_ids": 55
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if len(dict1)==1:\n        return dict1\n    else:\n        if len(dict1)>1:\n            keylist=dict1.keys()\n            valuelist=dict1.values()\n            newlist=zip(valuelist,keylist)\n            newlist.sort()\n            sortedlist=zip(*newlist)\n            newdict={}\n            for i in sortedlist[0]:\n                newdict[i]=[]\n            for i in sortedlist[1]:\n                newdict[i].append(dict1[i])\n            return newdict\ndef is_palindrome(string):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    #string.replace(\" \", \"\")\n    if string==string[::-1]:\n        return True\n    else:\n        return False\ndef is_permutation(str1, str2):\n    '''\n    Write a function to check whether a string is a permutation of another string.\n    '''\n    if len(str1)==len(str2):\n        if len(str1)>1:\n            return Counter(str1) == Counter(str2)\n        else:\n            return False\n    else:\n        return False\ndef is_valid_parenthese(str1):\n    '''\n    Write a function to check whether a string is a valid parenthese.\n    '''\n    pstack=[['('],['['],['{'],['<']]\n    if len(str1)%2==1:\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i] in pstack[0]:\n                pstack[0].append(str1[i])\n            elif str1[i] in pstack[1]:\n                pstack[1].append(str1[i])\n            elif str1[i] in pstack[2]:\n                pstack[2].append(str1[i])\n            elif str1[i] in pstack[3]:\n                pstack[3].append(str1[i])\n            else:\n                return False\n        if pstack[0]==[')'] and pstack[1]==[']']:\n            return True\n        else:\n            return False\ndef is_match(str1, str2):\n    '''\n    Write a function to check whether two strings are a match or not.\n    Two strings are a match if one string's character can be rearranged to the other string.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i]!=str2[len(str2)-1-i]:\n                return False\n        return True\ndef is_balanced_parenthese(string):\n    '''\n    Write a function to check whether a string is a balanced parenthese.\n    '''\n    if len(string)==1:\n        return True\n    elif len(string)%2==1:\n        return False\n    else:\n        stack=[]\n        for i in range(len(string)):\n            if string[i]=='(' or string[i]=='[' or string[i]=='{' or string[i]=='<':\n                stack.append(string[i])\n            elif string[i]==')' and stack[-1]=='(':\n                stack.pop()\n            elif string[i]==']' and stack[-1]=='[':\n                stack.pop()\n            elif string[i]=='}' and stack[-1]=='{':\n                stack.pop()\n            elif string[i]=='>' and stack[-1]=='<':\n                stack.pop()\n            else:\n                return False\n        if stack==[]:\n            return True\n        else:\n            return False\ndef is_balanced(string):\n    '''\n    Write a function to check whether a string is a balanced.\n    '''\n    if len(string)==1:\n        return True\n    else:\n        stack=[]\n        for i in range(len(string)):\n            if string[i]=='(' or string[i]=='[' or string[i]=='{' or string[i]=='<':\n                stack.append(string[i])\n            elif string[i]==')' and stack[-1]=='(':\n                stack.pop()\n            elif string[i]==']' and stack[-1]=='[':\n                stack.pop()\n            elif string[i]=='}' and stack[-1]=='{':\n                stack.pop()\n            elif string[i]=='>' and stack[-1]=='<':\n                stack.pop()\n            else:\n                return False\n        if stack==[]:\n            return True\n        else:\n            return False\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagram of each other.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        return Counter(str1) == Counter(str2)\ndef is_reverse(str1, str2):\n    '''\n    Write a function to check whether two strings are reverse of each other.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        return str1==str2[::-1]\ndef is_substring(str1, str2):\n    '''\n    Write a function to check whether a string is substring of another string.\n    '''\n    if str2 in str1:\n        return True\n    else:\n        return False\ndef is_rotation(str1, str2):\n    '''\n    Write a function to check whether a string is rotation of another string.\n    '''\n    if len(str1)==len(str2):\n        if len(str1)>1:\n            return str1 in str2+str2\n        else:\n            return False\n    else:\n        return False\ndef is_palindrome_permutation(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome or not.\n    '''\n    if len(str1)==1:\n        return True\n    else:\n        if is_palindrome(str1):\n            return is_permutation(str1,str1)\n        else:\n            return False\ndef is_unique(str1):\n    '''\n    Write a function to check whether a string is unique or not.\n    '''\n    if len(str1)>1:\n        return len(set(str1))==len(str1)\n    else:\n        return True\ndef is_one_edit(str1, str2):\n    '''\n    Write a function to check whether a string is one edit or not.\n    '''\n    if abs(len(str1)-len(str2))>1:\n        return False\n    elif abs(len(str1)-len(str2))==1:\n        if len(str1)>len(str2):\n            for i in range(len(str1)):\n                if str1[i]!=str2[i]:\n                    if str1[i+1:]==str2[i:]:\n                        return True\n                    else:\n                        return False\n        elif len(str1)<len(str2):\n            for i in range(len(str2)):\n                if str1[i]!=str2[i]:\n                    if str1[i:]==str2[i:]:\n                        return True\n                    else:\n                        return False\n        else:\n            if str1[0]==str2[0]:\n                if str1[1:]==str2[1:]:\n                    return True\n                else:\n                    return False\n            else:\n                if str1[1:]==str2[1:]:\n                    return True\n                else:\n                    return False\ndef is_unique_word(str1):\n    '''\n    Write a function to check whether a string is unique or not.\n    '''\n    if len(str1)>1:\n        if is_unique(str1):\n            return True\n        else:\n            return False\n    else:\n        retur",
        "num_ids": 42
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    tup = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return tup\n",
        "num_ids": 32
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict2\n",
        "num_ids": 32
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    for i in sorted(dict1,key=dict1.get,reverse=True):\n        print i,dict1[i]\n",
        "num_ids": 35
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.iteritems(), key=lambda item: item[1], reverse=True)\n",
        "num_ids": 26
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    for key,value in sorted(dict1.items(),key=lambda x:x[1],reverse=True):\n        new_dict[key]=value\n    return new_dict\n",
        "num_ids": 51
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1,key=dict1.get,reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1,key=lambda x:dict1[x],reverse=True)\ndef sort_value(a):\n    return sorted(a,key=a.get,reverse=True)\ndef swap(a,b):\n    return b,a\ndef max_min(a,b):\n    if a>b:\n        return a,b\n    else:\n        return b,a\ndef even_odd(a):\n    if a%2 == 0:\n        return 'even'\n    else:\n        return 'odd'\ndef even_odd_list(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_tuple(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_range(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_dict(a):\n    return 'even' if a%2 == 0 else 'odd'\ndef even_odd_set(a):\n    return 'eve",
        "num_ids": 2016
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    largest = None\n    smallest = None\n    \n    for num in nums:\n        if not largest or num > largest:\n            largest = num\n        elif not smallest or num < smallest:\n            smallest = num\n    \n    return largest + smallest\n    \n    \ndef new_sort(nums):\n    '''\n    Write a python function to sort a given array in ascending order.\n    '''\n    \n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    \n    return nums\n    \n    \ndef num_diamond(num):\n    '''\n    Write a python function to find the number of diamond that can be formed from a given number of rows.\n    '''\n    \n    if num == 1:\n        return 1\n    \n    if num == 2:\n        return 2\n    \n    return (num * (num + 1)) // 2\n    \n    \ndef multi_table(num):\n    '''\n    Write a python function to find the multiplication table of a given number.\n    '''\n    \n    multi = []\n    \n    for i in range(1, 11):\n        multi.append(i * num)\n    \n    return multi\n    \n    \ndef palindrome(string):\n    '''\n    Write a python function to find the length of the longest palindrome in a given string.\n    '''\n    \n    if len(string) <= 1:\n        return len(string)\n    \n    string ='' + ''.join(string) +''\n    \n    string = [char for char in string]\n    \n    max_len = 0\n    start = 0\n    end = 0\n    \n    for i in range(len(string)):\n        if i > max_len and start == i:\n            max_len = end - start\n            end = i\n        \n        elif i > max_len and start!= i:\n            start = i\n            end = i\n        \n        elif i < max_len and start!= i:\n            start = i\n            end = i\n    \n    return max_len\n    \n    \ndef factorial(num):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    \n    if num == 0:\n        return 1\n    \n    return num * factorial(num - 1)\n    \n    \ndef fibonacci(num):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    \n    if num < 0:\n        return -1\n    \n    if num == 0:\n        return 0\n    \n    if num == 1:\n        return 1\n    \n    return fibonacci(num - 2) + fibonacci(num - 1)\n    \n    \ndef base_n(num, base):\n    '''\n    Write a python function to convert a number into base of n.\n    '''\n    \n    if base == 10:\n        return num\n    \n    if base == 2:\n        if num % 2:\n            return 1\n        else:\n            return 0\n    \n    if num == 0:\n        return 0\n    \n    return base_n(num // base, base) + base * (num % base)\n    \n    \ndef count_vowels(string):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    count = 0\n    \n    for char in string:\n        if char in vowels:\n            count += 1\n            \n    return count\n    \n    \ndef is_rotated(string1, string2):\n    '''\n    Write a python function to check if a given string is rotated.\n    '''\n    \n    if len(string1)!= len(string2):\n        return False\n    \n    if len(string1) == len(string2) == 1:\n        return True\n    \n    if string1[0] == string2[-1]:\n        return is_rotated(string1[1:], string2[:-1])\n    \n    return False\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    \n    if len(string) == 1:\n        return True\n    \n    if string[0] == string[-1]:\n        return is_palindrome(string[1:-1])\n    \n    return False\n    \n    \ndef minimum_moves(string):\n    '''\n    Write a python function to find the minimum number of moves to convert a given string to a palindrome.\n    '''\n    \n    if len(string) == 1:\n        return 0\n    \n    if len(string) == 2:\n        return 1\n    \n    if string[0] == string[-1]:\n        return minimum_moves(string[1:-1])\n    \n    if string[0] == string[-2]:\n        return 1 + minimum_moves(string[1:-1])\n    \n    return 2 + minimum_moves(string[1:-1])\n    \n    \ndef num_segments(string):\n    '''\n    Write a python function to find the number of contiguous strings that are palindromic.\n    '''\n    \n    if len(string) == 0:\n        return 0\n    \n    if len(string) == 1:\n        return 1\n    \n    if string[0] == string[-1]:\n        return num_segments(string[1:-1]) + 1\n    \n    return num_segments(string[1:-1])\n    \n    \ndef is_substring(string, substring):\n    '''\n    Write a python function to check if a string is a substring of another string.\n    '''\n    \n    if substring == string:\n        return True\n    \n    if len(string) < len(substring):\n        return False\n    \n    if string[0] == substring[0]:\n        return is_substring(string[1:], substring[1:])\n    \n    return False\n    \n    \ndef repeated_substring(string):\n    '''\n    Write a python function to find a substring that is repeated in a given string.\n    '''\n    \n    if len(string) == 1:\n        return None\n    \n    start = 0\n    end = 1\n    \n    while end < len(string):\n        if string[start]!= string[end]:\n            start += 1\n            end += 1\n        elif end - start >= 2:\n            return string[start:end]\n        else:\n            end += 1\n    \n    return None\n    \n    \ndef is_anagram(string1, string2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    \n    if len(string1)!= len(string2):\n        return False\n    \n    if sorted(string1) == sorted(string2):\n        return True\n    \n    return False\n    \n    \ndef count_even(num):\n    '''\n    Write a python function to count the number of even numbers in a given range.\n    '''\n    \n    if num <= 0:\n        return 0\n    \n    if num % 2:\n        return count_even(num - 1)\n    \n    return 1 + count_even(num - 2)\n    \n    \ndef next_bigger(num):\n    '''\n    Write a python function to find the next bigger number than a given number.\n    '''\n    \n    if num == 0:\n        return 0\n    \n    if num < 10:\n        return num\n    \n    if num % 9 == 0:\n        return 9 * (num // 9)\n    \n    num = str(num)\n    \n    for i in range(len(num) - 1):\n        if num[i] < num[i + 1]:\n            break\n    \n    num = list(num)\n    \n    if i == 0:\n        return int(''.join(num[1:] + [str(int(num[",
        "num_ids": 130
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(max(nums),min(nums))\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of the given number n.\n    '''\n    res = 1\n    for i in range(1,n+1):\n        res = res * i\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    assert type(string) == str, \"The string should be a string.\"\n    return string.lower()\n",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    return lower_case\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string, str):\n        return string.lower()\n    else:\n        raise TypeError('Wrong type: Input type should be string')\n",
        "num_ids": 39
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = re.sub(r'[a-z]+', '', str1)\n    return string\n",
        "num_ids": 27
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    s = re.sub(r'[a-z]+', '', str1)\n    return s\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    s = re.sub(r'[A-Z]+', '', str1)\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) <= 1:\n        return str1\n    if str1[0].islower() and str1[1:].islower():\n        return remove_lowercase(str1[1:])\n    else:\n        return str1[0] + remove_lowercase(str1[1:])\n",
        "num_ids": 77
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join([c for c in str1 if c.isupper()])\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join([c for c in str1 if c.islower()])\ndef convert_to_lowercase(str1):\n    '''\n    Write a function to convert a given string to lowercase\n    '''\n    return str1.lower()\ndef convert_to_uppercase(str1):\n    '''\n    Write a function to convert a given string to uppercase\n    '''\n    return str1.upper()\ndef convert_to_capital(str1):\n    '''\n    Write a function to convert a given string to upper case\n    '''\n    return str1.capitalize()\ndef split_string(str1):\n    '''\n    Write a function to split a given string based on a given delimiter.\n    '''\n    return str1.split(',')\ndef replace_string(str1,char,str2):\n    '''\n    Write a function to replace all the occurances of a given character in a given string with another given string.\n    '''\n    return str1.replace(char,str2)\ndef replace_string_2(str1,char,str2):\n    '''\n    Write a function to replace all the occurances of a given character in a given string with another given string.\n    '''\n    return re.sub(char,str2,str1)\ndef replace_string_3(str1,char,str2):\n    '''\n    Write a function to replace all the occurances of a given character in a given string with another given string.\n    '''\n    return str1.replace(char,str2)\ndef add_string(str1,str2):\n    '''\n    Write a function to add two strings.\n    '''\n    return str1 + str2\ndef multiply_string(str1,num):\n    '''\n    Write a function to multiply a given string with a number.\n    '''\n    return str1 * num\ndef replace_last_string(str1,str2):\n    '''\n    Write a function to replace the last character of a given string with another given string.\n    '''\n    return str1[:-1] + str2\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return str1[::-1]\ndef reverse_string_2(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome_2(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1\ndef is_palindrome_3(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1\ndef is_palindrome_4(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::-2]\ndef is_palindrome_5(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::2]\ndef is_palindrome_6(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::3]\ndef is_palindrome_7(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::4]\ndef is_palindrome_8(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::5]\ndef is_palindrome_9(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::6]\ndef is_palindrome_10(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::7]\ndef is_palindrome_11(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::8]\ndef is_palindrome_12(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::9]\ndef is_palindrome_13(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::10]\ndef is_palindrome_14(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::11]\ndef is_palindrome_15(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::12]\ndef is_palindrome_16(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::13]\ndef is_palindrome_17(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::14]\ndef is_palindrome_18(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::15]\ndef is_palindrome_19(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::16]\ndef is_palindrome_20(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::17]\ndef is_palindrome_21(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::18]\ndef is_palindrome_22(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::19]\ndef is_palindrome_23(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::20]\ndef is_palindrome_24(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::21]\ndef is_palindrome_25(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return str1[::-1] == str1[::22]\ndef is_palindrome_26(str1)",
        "num_ids": 31
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #return re.sub(r'[a-z]+', '', str1, re.I)\n    if re.search(r'[a-z]+', str1, re.I):\n        return re.sub(r'[a-z]+', '', str1, re.I)\n    else:\n        return str1\n",
        "num_ids": 82
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=str1.lower()\n    return str2\ndef remove_chars(str1):\n    '''\n    Write a function to remove all characters in a given string which are not alphabets.\n    '''\n    str2=re.sub('[^a-zA-Z]',' ',str1)\n    return str2\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the numbers in a given string.\n    '''\n    str2=re.sub('\\d',' ',str1)\n    return str2\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all the spaces from a given string.\n    '''\n    str2=re.sub('\\s',' ',str1)\n    return str2\ndef change_first_letter(str1):\n    '''\n    Write a function to change the first letter of a given string to uppercase and lowercase letters to lowercase.\n    '''\n    str2=str1.capitalize()\n    return str2\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    str2=str1[::-1]\n    return str2\ndef remove_first_char(str1):\n    '''\n    Write a function to remove the first character of a given string.\n    '''\n    str2=str1[1:]\n    return str2\ndef count_substring(str1,substr):\n    '''\n    Write a function to count the number of times a substring occurs in a given string.\n    '''\n    return str1.count(substr)\ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return str1.split()\ndef count_chars(str1):\n    '''\n    Write a function to count the number of characters in a given string.\n    '''\n    return len(str1)\ndef count_substrings(str1,substr):\n    '''\n    Write a function to count the number of times a substring occurs in a given string.\n    '''\n    return str1.count(substr)\ndef find_max_occuring_char(str1):\n    '''\n    Write a function to find the max occurring character in a given string.\n    '''\n    str2=list(str1)\n    str2.sort()\n    str2=dict(zip(str2,[0 for i in range(len(str2))]))\n    for i in str2:\n        str2[i]=str1.count(i)\n    max_count=0\n    max_char=''\n    for i in str2:\n        if str2[i]>max_count:\n            max_count=str2[i]\n            max_char=i\n    return max_char\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if str1==str1[::-1]:\n        return True\n    else:\n        return False\ndef is_alphabets(str1):\n    '''\n    Write a function to check if a given string is alphabets only or not.\n    '''\n    for i in str1:\n        if i.isalpha():\n            return True\n        else:\n            return False\ndef is_digit(str1):\n    '''\n    Write a function to check if a given string is digits only or not.\n    '''\n    for i in str1:\n        if i.isdigit():\n            return True\n        else:\n            return False\ndef is_lowercase(str1):\n    '''\n    Write a function to check if a given string is lowercase only or not.\n    '''\n    for i in str1:\n        if i.islower():\n            return True\n        else:\n            return False\ndef is_uppercase(str1):\n    '''\n    Write a function to check if a given string is uppercase only or not.\n    '''\n    for i in str1:\n        if i.isupper():\n            return True\n        else:\n            return False\ndef is_title(str1):\n    '''\n    Write a function to check if a given string is titlecase only or not.\n    '''\n    for i in str1:\n        if i.istitle():\n            return True\n        else:\n            return False\ndef is_spaces(str1):\n    '''\n    Write a function to check if a given string is spaces only or not.\n    '''\n    for i in str1:\n        if i.isspace():\n            return True\n        else:\n            return False\ndef is_alphanumeric(str1):\n    '''\n    Write a function to check if a given string is alphanumeric only or not.\n    '''\n    for i in str1:\n        if i.isalnum():\n            return True\n        else:\n            return False\ndef is_decimal(str1):\n    '''\n    Write a function to check if a given string is decimal only or not.\n    '''\n    for i in str1:\n        if i.isdecimal():\n            return True\n        else:\n            return False\ndef is_hexadecimal(str1):\n    '''\n    Write a function to check if a given string is hexadecimal only or not.\n    '''\n    for i in str1:\n        if i.isnumeric():\n            return True\n        else:\n            return False\ndef is_octal(str1):\n    '''\n    Write a function to check if a given string is octal only or not.\n    '''\n    for i in str1:\n        if i.isdigit():\n            return True\n        else:\n            return False\ndef is_uppercase_alphanumeric(str1):\n    '''\n    Write a function to check if a given string is uppercase alphanumeric only or not.\n    '''\n    for i in str1:\n        if i.isupper():\n            return True\n        else:\n            return False\ndef is_uppercase_alphabets(str1):\n    '''\n    Write a function to check if a given string is uppercase alphabets only or not.\n    '''\n    for i in str1:\n        if i.isupper():\n            return True\n        else:\n            return False\ndef is_lowercase_alphabets(str1):\n    '''\n    Write a function to check if a given string is lowercase alphabets only or not.\n    '''\n    for i in str1:\n        if i.islower():\n            return True\n        else:\n            return False\ndef is_lowercase_alphanumeric(str1):\n    '''\n    Write a function to check if a given string is lowercase alphanumeric only or not.\n    '''\n    for i in str1:\n        if i.islower():\n            return True\n        else:\n            return False\ndef is_lowercase_digits(str1):\n    '''\n    Write a function to check if a given string is lowercase digits only or not.\n    '''\n    for i in str1:\n        if i.isdigit():\n            return True\n        else:\n            return False\ndef is_lowercase_letters(str1):\n    '''\n    Write a function to check if a given string is lowercase letters only or not.\n    '''\n    for i in str1:\n        if i.isalpha():\n            return True\n        else:\n            return False\ndef is_lowercase_spaces(str1):\n    '''\n    Write a function to check if a given string is lowercase spaces only or not.\n    '''\n    for i in str1:\n        if i.isspace():\n            return True\n        else:\n            return False\ndef is_lowercase_title(str1):\n    '''\n    Write a function to check if a given string is lowercase title only or not.\n    '''\n    for i in str1:\n        if i.istitle():\n            return True\n        else:\n            return False\ndef is_lowercase_uppercase(str1):\n    '''\n    Write a function to check if a given string is lowercase uppercase letters only or not.\n    '''",
        "num_ids": 1
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #return re.sub(r'[a-z]+', '', str1)\n    return re.sub(r'[a-z]*', '', str1)\n",
        "num_ids": 44
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    else:\n        if str1[0].islower():\n            return str1[0].upper() + remove_lowercase(str1[1:])\n        else:\n            return str1[0].lower() + remove_lowercase(str1[1:])\ndef remove_all_non_alpha(str1):\n    '''\n    Write a function to remove all non-alphabetic characters from a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    else:\n        if str1[0].isalpha():\n            return remove_all_non_alpha(str1[1:])\n        else:\n            return remove_all_non_alpha(str1[1:])\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    if len(str1) == 0:\n        return True\n    else:\n        if str1[0] == str1[-1]:\n            return is_palindrome(str1[1:-1])\n        else:\n            return False\ndef reverse(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str1) == 0:\n        return str1\n    else:\n        return reverse(str1[1:]) + str1[0]\ndef remove_spaces(str1):\n    '''\n    Write a function to remove the spaces from a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    else:\n        if str1[0] =='':\n            return remove_spaces(str1[1:])\n        else:\n            return str1[0] + remove_spaces(str1[1:])\ndef get_palindromic_substrings(str1):\n    '''\n    Write a function to get all palindromic substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return []\n    else:\n        if str1[0] == str1[-1]:\n            return [str1] + get_palindromic_substrings(str1[1:-1])\n        else:\n            return get_palindromic_substrings(str1[1:])\ndef is_substring(str1, str2):\n    '''\n    Write a function to check if a given string is a substring of another given string.\n    '''\n    if len(str2) == 0:\n        return False\n    else:\n        if str1 == str2:\n            return True\n        else:\n            if str1[0] == str2[0]:\n                return is_substring(str1[1:], str2[1:])\n            else:\n                return False\ndef is_reverse(str1, str2):\n    '''\n    Write a function to check if a given string is a reverse of another given string.\n    '''\n    if len(str1) == len(str2):\n        return str1[::-1] == str2\n    else:\n        return False\ndef count_substrings(str1, str2):\n    '''\n    Write a function to count the number of substrings in a given string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if is_substring(str1, str2):\n            return 1 + count_substrings(str1[1:], str2[1:])\n        else:\n            return count_substrings(str1[1:], str2[1:])\ndef max_string_xor(str1, str2):\n    '''\n    Write a function to find the maximum of the XOR of two given strings.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if is_substring(str1, str2):\n            return str1.find(str2)\n        else:\n            return max_string_xor(str1[1:], str2[1:])\ndef compute_xor(str1, str2):\n    '''\n    Write a function to compute the XOR of two given strings.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if is_substring(str1, str2):\n            return str1.find(str2)\n        else:\n            return compute_xor(str1[1:], str2[1:])\ndef max_pairwise_product(str1, str2):\n    '''\n    Write a function to find the maximum pairwise product of two given strings.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if is_substring(str1, str2):\n            return str1.find(str2)\n        else:\n            return max_pairwise_product(str1[1:], str2[1:])\ndef count_vowels(str1):\n    '''\n    Write a function to count the vowels in a given string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0].lower() in 'aeiou':\n            return 1 + count_vowels(str1[1:])\n        else:\n            return count_vowels(str1[1:])\ndef count_consonants(str1):\n    '''\n    Write a function to count the consonants in a given string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0].lower() in 'bcdfghjklmnpqrstvwxyz':\n            return 1 + count_consonants(str1[1:])\n        else:\n            return count_consonants(str1[1:])\ndef count_letters(str1):\n    '''\n    Write a function to count the letters in a given string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0].isalpha():\n            return 1 + count_letters(str1[1:])\n        else:\n            return count_letters(str1[1:])\ndef count_words(str1):\n    '''\n    Write a function to count the words in a given string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0].isalpha():\n            return 1 + count_words(str1[1:])\n        else:\n            return count_words(str1[1:])\ndef count_letters_without_spaces(str1):\n    '''\n    Write a function to count the letters in a given string, excluding spaces.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0].isalpha():\n            return 1 + count_letters_without_spaces(str1[1:])\n        else:\n            return count_letters_without_spaces(str1[1:])\ndef count_vowels_without_spaces(str1):\n    '''\n    Write a function to count the vowels in a given string, excluding spaces.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0].lower() in 'aeiou':\n            return 1 + count_vowels_without_spaces(str1[1:])\n        else:\n            return count_vowels_without_spaces(str1[1:])\ndef count_consonants_without_spaces(str1):\n    '''\n    Write a function to count the consonants in a given string, excluding spaces.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0].lower() in 'bcdfghjklmnpqrstvwxyz':\n            return 1 + count_consonants_without_spaces(str1[1:])\n        else:\n            return count_consonants_without_spaces(str1[1:])\ndef count_sentences(str1):\n    '''\n    Write a function to count the sentences in a given string.\n    '''\n    if le",
        "num_ids": 5
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1.islower() == True:\n        str1 = str1.lower()\n        return str1\n    else:\n        return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the digits from a given string.\n    '''\n    return re.sub(r'\\d', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all the punctuations from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove all the stopwords from a given string.\n    '''\n    stopwords = ['a','an','and','are','as','at','be','but','by','can','dont','didnt',\\\n    'do','does','doesnt','doing','dont','for','from','get','got','hadnt','hasnt',\\\n    'has','had','hasnt','have','he','he\\'d','he\\'ll','he\\'s','her','here','heres',\\\n    'here\\'s','hers','herself','him','himself','his','how','how\\'d','how\\'ll','how\\'s',\\\n    'i','i\\'d','i\\'ll','i\\'m','i\\'ve','if','in','into','is','isnt','it','it\\'s','its',\\\n    'it\\'s','its','itself','lets','me','more','most','mustnt','my','myself','neither',\\\n    'no','nor','not','of','off','on','once','only','or','other','ought','our','ours',\\\n    'ourselves','out','over','own','same','she','she\\'d','she\\'ll','she\\'s','should','shouldnt',\\\n    'shall','shouldn','shouldnt','so','some','such','than','that','that\\'s','the','their',\\\n    'theirs','them','themselves','then','there','there\\'s','these','they','they\\'d','they\\'ll',\\\n    'they\\'re','they\\'ve','this','those','through','to','too','under','until','up','very',\\\n    'very','was','wasnt','we','we\\'d','we\\'ll','we\\'re','we\\'ve','were','werent',\\\n    'what','what\\'s','when','when\\'s','where','where\\'s','which','while','who','who\\'s',\\\n    'whom','why','will','with','won\\'t','would','wouldnt','you','you\\'d','you\\'ll','you\\'re',\\\n    'you\\'ve','your','yours','yourself','yourselves']\n    return''.join([word for word in str1.split() if word not in stopwords])\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove all the whitespaces from a given string.\n    '''\n    return re.sub(r'\\s', '', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the numbers from a given string.\n    '''\n    return re.sub(r'\\d', '', str1)\ndef clean_sentence(str1):\n    '''\n    Write a function to clean the given string.\n    '''\n    str1 = remove_punctuation(str1)\n    str1 = remove_lowercase(str1)\n    str1 = remove_numbers(str1)\n    str1 = remove_whitespace(str1)\n    return str1\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    str1 = remove_punctuation(str1)\n    str2 = remove_punctuation(str2)\n    str1 = remove_lowercase(str1)\n    str2 = remove_lowercase(str2)\n    str1 = remove_numbers(str1)\n    str2 = remove_numbers(str2)\n    str1 = remove_whitespace(str1)\n    str2 = remove_whitespace(str2)\n    str1 = sorted(str1.split(' '))\n    str2 = sorted(str2.split(' '))\n    return str1 == str2\ndef to_hex(dec):\n    '''\n    Write a function to convert an integer to hexadecimal.\n    '''\n    if dec > 255:\n        return 'Error'\n    elif dec == 0:\n        return '0'\n    else:\n        hex_dict = {10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f'}\n        hex_num = ''\n        while dec > 0:\n            remainder = dec % 16\n            if remainder > 9:\n                hex_num = hex_dict[remainder] + hex_num\n            else:\n                hex_num = str(remainder) + hex_num\n            dec = int(dec/16)\n        return hex_num\ndef to_hex_digit(dec):\n    '''\n    Write a function to convert a hexadecimal digit to its decimal value.\n    '''\n    if dec < 0 or dec > 9:\n        return 'Error'\n    else:\n        return dec\ndef hex_to_int(str1):\n    '''\n    Write a function to convert a hexadecimal string to its integer equivalent.\n    '''\n    if str1 == '' or str1 == None:\n        return 0\n    elif str1[0] == '0':\n        return int(str1, 16)\n    else:\n        hex_dict = {'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}\n        dec = 0\n        digit_len = len(str1)\n        for i in range(digit_len):\n            digit = str1[digit_len-1-i]\n            if digit not in hex_dict.keys():\n                return 0\n            dec += hex_dict[digit]*(16**i)\n        return dec\ndef to_base(dec, base):\n    '''\n    Write a function to convert a decimal integer to a given base.\n    '''\n    if dec < 0:\n        return 'Error'\n    elif dec == 0:\n        return 0\n    else:\n        remainder = ''\n        while dec > 0:\n            remainder = str(dec % base) + remainder\n            dec = int(dec/base)\n        return remainder\ndef to_base_digit(dec, base):\n    '''\n    Write a function to convert a decimal integer to a given base.\n    '''\n    if dec < 0 or dec > 9:\n        return 'Error'\n    else:\n        return dec\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    str1 = remove_punctuation(str1)\n    str1 = remove_lowercase(str1)\n    str1 = remove_numbers(str1)\n    str1 = remove_whitespace(str1)\n    str1 = sorted(str1.split(' '))\n    return str1 == str1[::-1]\ndef is_anagram_sorted(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    str1 = remove_punctuation(str1)\n    str1 = remove_lowercase(str1)\n    str1 = remove_numbers(str1)\n    str1 = remove_whitespace(str1)\n    str2 = remove_punctuation(str2)\n    str2 = remove_lowercase(str2)\n    str2 = remove_numbers(str2)\n    str2 = remove_whitespace(str2)\n    str1 = sorted(str1.split(' '))\n    str2 = sorted(str2.split(' '))\n    return str1 == str2\ndef is_anagram_dict(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    str1 = remove_punctuation(str1)\n    str1 ",
        "num_ids": 20
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n % 10\n",
        "num_ids": 24
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in n :\n        if i.isdigit() :\n            return int(i)\n        else :\n            return -1\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n.isdigit() :\n        n = int(n)\n        n = n % 10\n    else :\n        return -1\n    return n\n    \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    if n.isdigit() :\n        n = int(n)\n        n = n // 10\n    else :\n        return -1\n    return n\n",
        "num_ids": 40
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = int(n)\n    while n > 0 :\n        n = n / 10\n    return n\n",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 0 :\n        return int(n/10)\n    else :\n        return int(-n/10)\n    \ndef last_Digit(n) : \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 0 :\n        return int(n%10)\n    else :\n        return int((-n)%10)\n",
        "num_ids": 33
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else :\n        return first_Digit(n//10)\n",
        "num_ids": 29
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n=abs(n)\n    while n>=10 :\n        n=n/10\n    return int(n)\n",
        "num_ids": 32
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    temp = n\n    res = -1\n    while (temp>0):\n        res = temp%10\n        temp = temp//10\n        break\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l=[]\n    for x in list:\n        if x%2==1:\n            l.append(x)\n    return l\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if list[i]%2==1:\n            new_list.append(list[i])\n    return new_list\n    \ndef Sort(list):\n    '''\n    Write a python function which takes a list and returns a new list where all the duplicate values have been removed and the list has been sorted ascendingly.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if list[i] not in new_list:\n            new_list.append(list[i])\n    new_list.sort()\n    return new_list\n    \ndef Reverse(list):\n    '''\n    Write a python function which takes a list and returns a new list where the values have been reversed.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[-i-1])\n    return new_list\n    \ndef Unique(list):\n    '''\n    Write a python function which takes a list and returns a new list with all the duplicate values removed.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if list[i] not in new_list:\n            new_list.append(list[i])\n    return new_list\n    \ndef Double(list):\n    '''\n    Write a python function which takes a list and returns a new list with all the values doubled.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i]*2)\n    return new_list\n    \ndef Average(list):\n    '''\n    Write a python function which takes a list and returns the average value of the list.\n    '''\n    sum=0\n    for i in range(len(list)):\n        sum=sum+list[i]\n    return sum/len(list)\n    \ndef Evens(list):\n    '''\n    Write a python function which takes a list and returns a new list with all the even values removed.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            new_list.append(list[i])\n    return new_list\n    \ndef Magnitude(x,y):\n    '''\n    Write a python function which takes two lists of equal length and returns a new list with the magnitude of the distance between each pair of corresponding values in the two lists.\n    '''\n    new_list=[]\n    for i in range(len(x)):\n        new_list.append(abs(x[i]-y[i]))\n    return new_list\n    \ndef Distance(x,y):\n    '''\n    Write a python function which takes two lists of equal length and returns a new list with the distance between each pair of corresponding values in the two lists.\n    '''\n    new_list=[]\n    for i in range(len(x)):\n        new_list.append(abs(x[i]-y[i]))\n    return new_list\n    \ndef Sum(list):\n    '''\n    Write a python function which takes a list and returns the sum of the values in the list.\n    '''\n    sum=0\n    for i in range(len(list)):\n        sum=sum+list[i]\n    return sum\n    \ndef Median(list):\n    '''\n    Write a python function which takes a list and returns the median value of the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    new_list.sort()\n    if len(new_list)%2==1:\n        return new_list[int(len(new_list)/2)]\n    else:\n        return (new_list[int(len(new_list)/2-1)]+new_list[int(len(new_list)/2)])/2.0\n    \ndef Mode(list):\n    '''\n    Write a python function which takes a list and returns the mode value of the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    new_list.sort()\n    max_count=0\n    mode=0\n    for i in range(len(new_list)):\n        count=1\n        for j in range(i+1,len(new_list)):\n            if new_list[i]==new_list[j]:\n                count=count+1\n        if count>max_count:\n            max_count=count\n            mode=new_list[i]\n    return mode\n    \ndef Interquartile(list):\n    '''\n    Write a python function which takes a list and returns the interquartile value of the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    new_list.sort()\n    if len(new_list)%2==1:\n        return new_list[int(len(new_list)/2)]\n    else:\n        return (new_list[int(len(new_list)/2-1)]+new_list[int(len(new_list)/2)])/2.0\n    \ndef Mode2(list):\n    '''\n    Write a python function which takes a list and returns the mode value of the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    new_list.sort()\n    max_count=0\n    mode=0\n    for i in range(len(new_list)):\n        count=1\n        for j in range(i+1,len(new_list)):\n            if new_list[i]==new_list[j]:\n                count=count+1\n        if count>max_count:\n            max_count=count\n            mode=new_list[i]\n    return mode\n    \ndef First(list,num):\n    '''\n    Write a python function which takes a list and a number as input and returns the first num values from the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i<num:\n            new_list.append(list[i])\n    return new_list\n    \ndef First2(list,num):\n    '''\n    Write a python function which takes a list and a number as input and returns the first num values from the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i<num:\n            new_list.append(list[i])\n    return new_list\n    \ndef Last(list,num):\n    '''\n    Write a python function which takes a list and a number as input and returns the last num values from the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i>=(len(list)-num):\n            new_list.append(list[i])\n    return new_list\n    \ndef Last2(list,num):\n    '''\n    Write a python function which takes a list and a number as input and returns the last num values from the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i>=(len(list)-num):\n            new_list.append(list[i])\n    return new_list\n    \ndef Num(list):\n    '''\n    Write a python function which takes a list and returns the number of values in the list.\n    '''\n    num=0\n    for i in range(len(list)):\n        num=num+1\n    return num\n    \ndef Mean(list):\n    '''\n    Write a python function which takes a list and returns the mean value of the list.\n    '''\n    sum=0\n    for i in range(len(list)):\n        sum=sum+list[i]\n    return sum/len(list)\n    \ndef Variance(list):\n    '''\n    Write a python function which takes a list and returns the variance of the values in the list.\n    '''\n    mean=Mean(list)",
        "num_ids": 10
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2!= 0:\n            odds.append(i)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list:\n        if i%2!= 0:\n            print(i)\n            ",
        "num_ids": 26
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list:\n        if i % 2 == 1:\n            print i\n",
        "num_ids": 22
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n    \n    \ndef Reverse(list):\n    '''\n    Write a python function which takes a list of integers and only returns the \n    reversed list. Do not use the reversed() function.\n    '''\n    new_list = []\n    for i in range(len(list)-1,-1,-1):\n        new_list.append(list[i])\n    return new_list\n    \n    \ndef Parity(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of the same length, \n    where each element is True if the corresponding element in the first list is even, and False \n    if the element is odd.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(False)\n        else:\n            odd_list.append(True)\n    return odd_list\n    \n    \ndef PrimeFactors(num):\n    '''\n    Write a python function which takes a positive integer n and returns a list of the prime factors of n. \n    '''\n    list = []\n    divisor = 2\n    while num > 1:\n        while num % divisor == 0:\n            list.append(divisor)\n            num /= divisor\n        divisor += 1\n    return list\n    \n    \ndef ReverseList(list):\n    '''\n    Write a python function which takes a list of integers and returns the reverse of the list.\n    '''\n    new_list = []\n    for i in range(len(list)-1,-1,-1):\n        new_list.append(list[i])\n    return new_list\n    \n    \ndef GetFibonacci(n):\n    '''\n    Write a python function which takes a positive integer n and returns the nth fibonacci number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \n    \ndef GetFibonacciRecursively(n):\n    '''\n    Write a python function which takes a positive integer n and returns the nth fibonacci number. \n    The number is computed using the formula:\n    F(n) = F(n-1) + F(n-2)\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return GetFibonacciRecursively(n-1) + GetFibonacciRecursively(n-2)\n    \n    \ndef GetFibonacciIteratively(n):\n    '''\n    Write a python function which takes a positive integer n and returns the nth fibonacci number. \n    The number is computed using the formula:\n    F(n) = F(n-1) + F(n-2)\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a,b = 0,1\n        for i in range(n-1):\n            a,b = b,a+b\n    return a\n    \n    \ndef GetPerfectSquare(n):\n    '''\n    Write a python function which takes a positive integer n and returns the perfect square \n    of n if n is a perfect square, otherwise returns -1.\n    '''\n    root = n ** 0.5\n    if root == int(root):\n        return int(root)**2\n    else:\n        return -1\n    \n    \ndef GetPermutedList(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of the \n    permutations of the integers in the list. Each permutation is a list of the same length \n    as the original list.\n    '''\n    perms = []\n    if len(list) == 1:\n        return [list]\n    else:\n        for i in range(len(list)):\n            temp_list = list[:i] + list[i+1:]\n            list_perm = GetPermutedList(temp_list)\n            for perm in list_perm:\n                perms.append([list[i]] + perm)\n    return perms\n    \n    \ndef GetPermutedString(string):\n    '''\n    Write a python function which takes a string and returns a list of the \n    permutations of the characters in the string. Each permutation is a string \n    of the same length as the original string.\n    '''\n    list = []\n    for i in range(len(string)):\n        temp_list = string[:i] + string[i+1:]\n        list.append(GetPermutedString(temp_list))\n    permutations = []\n    for item in list:\n        for perm in item:\n            permutations.append(perm)\n    return permutations\n    \n    \ndef GetFactorial(n):\n    '''\n    Write a python function which takes a positive integer n and returns the factorial of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * GetFactorial(n-1)\n    \n    \ndef GetFibonacciGenerator(n):\n    '''\n    Write a python function which takes a positive integer n and returns the nth fibonacci number.\n    The number is computed using the formula:\n    F(n) = F(n-1) + F(n-2)\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a,b = 0,1\n        for i in range(n-1):\n            a,b = b,a+b\n        return a\n    \n    \ndef GetFibonacciGeneratorRecursively(n):\n    '''\n    Write a python function which takes a positive integer n and returns the nth fibonacci number.\n    The number is computed using the formula:\n    F(n) = F(n-1) + F(n-2)\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return GetFibonacciGeneratorRecursively(n-1) + GetFibonacciGeneratorRecursively(n-2)\n    \n    \ndef IsPalindrome(string):\n    '''\n    Write a python function which takes a string and returns True if the string is a \n    palindrome, and False otherwise.\n    '''\n    new_string = string.lower()\n    for i in range(len(new_string)//2):\n        if new_string[i]!= new_string[len(new_string)-i-1]:\n            return False\n    return True\n    \n    \ndef IsPalindromeIteratively(string):\n    '''\n    Write a python function which takes a string and returns True if the string is a \n    palindrome, and False otherwise.\n    '''\n    new_string = string.lower()\n    start = 0\n    end = len(new_string) - 1\n    while start < end:\n        if new_string[start]!= new_string[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \n    \ndef RemoveDuplicates(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of the \n    same length with all duplicate values removed.\n    '''\n    new_list = []\n    for num in list:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n    \n    \ndef RemoveAllDuplicates(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of the \n    same length with all duplicate values removed.\n    '''\n    new_list = []\n    for num in list:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n    \n    \ndef GetNthPermutation(n,k):\n    '''\n    Write a python function which takes a positive integer n and returns the nth \n    permutation of the digits 0, 1, 2,..., n.\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_odd = []\n    for i in list:\n        if i%2!= 0:\n            list_odd.append(i)\n    return list_odd\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    evenList = []\n    for item in list:\n        if item % 2 == 0:\n            evenList.append(item)\n    return evenList\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2]\n",
        "num_ids": 16
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # the sum of the cubes of the first n natural numbers is given by:\n    # sum = n*(n+1)*(n+2)*(n+3)\n    # so the sum of the first n natural numbers is given by:\n    # sum = ((n+1)*n/2)**2\n    # therefore, the difference is given by:\n    # sum - ((n+1)*n/2)**2 = n**3 + (n**2/2)**2 - (n**2/2)**2\n    # sum - (n**3/2) = n**3 + n**2 - n**2\n    # so the difference is given by:\n    # n**3 - (n**2/2) = n**3\n    # and the difference is given by:\n    # n**3 - n**2 = n**3\n    # so the difference is:\n    # n**3 - n**2 = n**3\n    return n**3 - n**2\n",
        "num_ids": 233
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 0\n    sum = 0\n    for i in range(1, n+1) :\n        a = a + i**3\n        sum = sum + i\n    return sum**2 - a\n",
        "num_ids": 50
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)]) - sum([i for i in range(1,n+1)])\n",
        "num_ids": 38
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (n**3) - (n*(n+1)*(2*n+1)/6)\n",
        "num_ids": 28
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return difference(n-1) + n**3\n",
        "num_ids": 30
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(n)]) - sum(range(n))**3\n",
        "num_ids": 27
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x = [0]*(n+1)\n    for i in range(0, n+1) :\n        x[i] = i**3\n    return sum(x) - sum(list(range(1, n+1)))\n",
        "num_ids": 59
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1,n)]) - sum([x for x in range(1,n+1)])\n",
        "num_ids": 36
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum = sum + i*i*i\n    cube = sum*sum*sum\n    return cube - sum\n",
        "num_ids": 47
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #Use Python builtin sum() function\n    return sum([x**3 for x in range(1, n+1)]) - sum([x for x in range(1, n+1)])\n    \n    #Use custom function\n    def diff(n) : \n        return sum(x**3 for x in range(1, n+1)) - sum(x for x in range(1, n+1))\n    \n    print diff(n)\n    \nif __name__ == '__main__':\n    \n    #Test 1\n    print difference(1)\n    \n    #Test 2\n    print difference(2)\n    \n    #Test 3\n    print difference(3)\n    \n    #Test 4\n    print difference(4)\n    \n    #Test 5\n    print difference(5)\n    \n    #Test 6\n    print difference(6)\n    \n    #Test 7\n    print difference(7)\n    \n    #Test 8\n    print difference(8)\n    \n    #Test 9\n    print difference(9)\n    \n    #Test 10\n    print difference(10)\n    \n    #Test 11\n    print difference(11)\n    \n    #Test 12\n    print difference(12)\n    \n    #Test 13\n    print difference(13)\n    \n    #Test 14\n    print difference(14)\n    \n    #Test 15\n    print difference(15)\n    \n    #Test 16\n    print difference(16)\n    \n    #Test 17\n    print difference(17)\n    \n    #Test 18\n    print difference(18)\n    \n    #Test 19\n    print difference(19)\n    \n    #Test 20\n    print difference(20)\n    \n    #Test 21\n    print difference(21)\n    \n    #Test 22\n    print difference(22)\n    \n    #Test 23\n    print difference(23)\n    \n    #Test 24\n    print difference(24)\n    \n    #Test 25\n    print difference(25)\n    \n    #Test 26\n    print difference(26)\n    \n    #Test 27\n    print difference(27)\n    \n    #Test 28\n    print difference(28)\n    \n    #Test 29\n    print difference(29)\n    \n    #Test 30\n    print difference(30)\n    \n    #Test 31\n    print difference(31)\n    \n    #Test 32\n    print difference(32)\n    \n    #Test 33\n    print difference(33)\n    \n    #Test 34\n    print difference(34)\n    \n    #Test 35\n    print difference(35)\n    \n    #Test 36\n    print difference(36)\n    \n    #Test 37\n    print difference(37)\n    \n    #Test 38\n    print difference(38)\n    \n    #Test 39\n    print difference(39)\n    \n    #Test 40\n    print difference(40)\n    \n    #Test 41\n    print difference(41)\n    \n    #Test 42\n    print difference(42)\n    \n    #Test 43\n    print difference(43)\n    \n    #Test 44\n    print difference(44)\n    \n    #Test 45\n    print difference(45)\n    \n    #Test 46\n    print difference(46)\n    \n    #Test 47\n    print difference(47)\n    \n    #Test 48\n    print difference(48)\n    \n    #Test 49\n    print difference(49)\n    \n    #Test 50\n    print difference(50)\n    \n    #Test 51\n    print difference(51)\n    \n    #Test 52\n    print difference(52)\n    \n    #Test 53\n    print difference(53)\n    \n    #Test 54\n    print difference(54)\n    \n    #Test 55\n    print difference(55)\n    \n    #Test 56\n    print difference(56)\n    \n    #Test 57\n    print difference(57)\n    \n    #Test 58\n    print difference(58)\n    \n    #Test 59\n    print difference(59)\n    \n    #Test 60\n    print difference(60)\n    \n    #Test 61\n    print difference(61)\n    \n    #Test 62\n    print difference(62)\n    \n    #Test 63\n    print difference(63)\n    \n    #Test 64\n    print difference(64)\n    \n    #Test 65\n    print difference(65)\n    \n    #Test 66\n    print difference(66)\n    \n    #Test 67\n    print difference(67)\n    \n    #Test 68\n    print difference(68)\n    \n    #Test 69\n    print difference(69)\n    \n    #Test 70\n    print difference(70)\n    \n    #Test 71\n    print difference(71)\n    \n    #Test 72\n    print difference(72)\n    \n    #Test 73\n    print difference(73)\n    \n    #Test 74\n    print difference(74)\n    \n    #Test 75\n    print difference(75)\n    \n    #Test 76\n    print difference(76)\n    \n    #Test 77\n    print difference(77)\n    \n    #Test 78\n    print difference(78)\n    \n    #Test 79\n    print difference(79)\n    \n    #Test 80\n    print difference(80)\n    \n    #Test 81\n    print difference(81)\n    \n    #Test 82\n    print difference(82)\n    \n    #Test 83\n    print difference(83)\n    \n    #Test 84\n    print difference(84)\n    \n    #Test 85\n    print difference(85)\n    \n    #Test 86\n    print difference(86)\n    \n    #Test 87\n    print difference(87)\n    \n    #Test 88\n    print difference(88)\n    \n    #Test 89\n    print difference(89)\n    \n    #Test 90\n    print difference(90)\n    \n    #Test 91\n    print difference(91)\n    \n    #Test 92\n    print difference(92)\n    \n    #Test 93\n    print difference(93)\n    \n    #Test 94\n    print difference(94)\n    \n    #Test 95\n    print difference(95)\n    \n    #Test 96\n    print difference(96)\n    \n    #Test 97\n    print difference(97)\n    \n    #Test 98\n    print difference(98)\n    \n    #Test 99\n    print difference(99)\n    \n    #Test 100\n    print difference(100)\n    \n    #Test 101\n    print difference(101)\n    \n    #Test 102\n    print difference(102)\n    \n    #Test 103\n    print difference(103)\n    \n    #Test 104\n    print difference(104)\n    \n    #Test 105\n    print difference(105)\n    \n    #Test 106\n    print difference(106)\n    \n    #Test 107\n    print difference(107)\n    \n    #Test 108\n    print difference(108)\n    \n    #Test 109\n    print difference(109)\n    \n    #Test 110\n    print difference(110)\n    \n    #Test 111\n    print difference(111)\n    \n    #Test 112\n    print difference(112)\n    \n    #Test 113\n    print difference(113)\n    \n    #Test 114\n    print difference(114)\n    \n    #Test 115\n    print difference(115)\n    \n    #Test 116\n    print difference(116)\n    \n    #Test 117\n    print difference(117)\n    \n    #Test 118\n    print difference(118)\n    \n    #Test 119\n    print difference(119)\n    \n    #Test 120\n    print difference(120)\n    \n    #Test 121\n    print difference(121)\n    \n    #Test 122\n    print difference(122)\n    \n    #Test 123\n    print difference(123)\n    \n    #Test 124\n    print difference(124)\n    \n    #Test 125\n    print difference(125)\n    \n    #Test 126\n    print difference(126)\n    \n    #Test 127\n    print difference(127)\n    \n    #Test 128\n    print difference(128)\n    \n    #Test 129\n    print difference(129)\n    \n    #Test 130\n    print difference(130)\n    \n    #Test 131\n    print difference(131)\n    \n    #Test 132\n    print difference(132)\n    \n    #Test 133\n    print difference(133)\n    \n    #Test 134\n    print difference(134)\n    \n    #Test 13",
        "num_ids": 2003
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N-1) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count \n",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    count = 0\n    while i<N : \n        if A[i]&1==1 : \n            count+=1\n        i+=1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = N-1\n    i=0\n    j=0\n    count=0\n    while(i<n) : \n        if(A[i] & A[i+1]==0) :\n            count=count+1\n        i=i+1\n    return count\ndef main() :\n    A = [8,3,5,4,9,2,3,8,1]\n    N = len(A)\n    print \"Odd pair count is : \", find_Odd_Pair(A,N)\n",
        "num_ids": 130
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) == 1 : \n                count = count + 1\n    return count \n",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i]^A[j]&1 : \n                count+=1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if ((A[i]^A[j]) & 1) : \n                res = res + 1\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if ((A[i] ^ A[j]) & 1) == 1 :\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) :\n        if (A[i] ^ A[i+1] & 1) :\n            count += 1\n    return count \n",
        "num_ids": 48
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i+1, N) : \n            if A[i] ^ A[j] & 1 :\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_letter(letter):\n        if letter.isupper():\n            return letter.lower()\n        elif letter.islower():\n            return letter.upper()\n        return letter\n    return ''.join([toggle_letter(letter) for letter in string])\n",
        "num_ids": 64
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def to_lower(letter):\n        if letter.isupper():\n            return letter.lower()\n        else:\n            return letter.upper()\n    return ''.join(map(to_lower, string))\n",
        "num_ids": 52
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower_case = string.lower()\n    upper_case = string.upper()\n",
        "num_ids": 22
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(i.swapcase() for i in string)\n    \n",
        "num_ids": 22
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower = string.lower()\n    upper = lower.upper()\n    return upper\n",
        "num_ids": 22
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n",
        "num_ids": 56
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for character in string:\n        new_string += character.swapcase()\n    return new_string\n",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isupper():\n        return string.lower()\n    else:\n        return string.upper()\n",
        "num_ids": 28
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        return 1\n    for i in range(len(str(n1))):\n        if int(str(n1)[i])!= int(str(n2)[i]):\n            return 1\n    return 0\n",
        "num_ids": 73
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2)))\n",
        "num_ids": 39
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n",
        "num_ids": 22
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2)))\n",
        "num_ids": 35
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Complete the function.\n    n1, n2 = str(n1), str(n2)\n    if len(n1) > len(n2):\n        n1, n2 = n2, n1\n    \n    digits = [0 for i in range(len(n1))]\n    for i in range(len(n1)):\n        if n1[i] == n2[i]:\n            digits[i] = 0\n        else:\n            digits[i] = abs(int(n1[i]) - int(n2[i]))\n    return sum(digits)\n",
        "num_ids": 148
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(int(str(n1)[0]) - int(str(n2)[0])) + abs(int(str(n1)[1]) - int(str(n2)[1]))\n",
        "num_ids": 50
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0:\n        return 0\n    digits = []\n    while n1 > 0:\n        digits.append(n1%10)\n        n1 /= 10\n    return sum([abs(n2%10 - n) for n in digits])\n",
        "num_ids": 66
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = abs(int(str(n1)[0]))\n    d2 = abs(int(str(n2)[0]))\n    count = 0\n    while d1!= d2:\n        if d1 > d2:\n            d1 -= d2\n        else:\n            d2 -= d1\n        count += 1\n    return count + abs(n1 - n2)\n",
        "num_ids": 96
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_list(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_dict(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_sets(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_set(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_tuple(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_float(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(float(str(n1)[i]) - float(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_float_list(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(float(str(n1)[i]) - float(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_float_dict(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(float(str(n1)[i]) - float(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_float_sets(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(float(str(n1)[i]) - float(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_float_set(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(float(str(n1)[i]) - float(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_float_tuple(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(float(str(n1)[i]) - float(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_list_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_list_list(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_list_dict(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_list_sets(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_list_set(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    s = 0\n    for i in range(d1):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n    \n    \ndef digit_distance_list_tuple(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))",
        "num_ids": 25
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    list_1 = [int(i) for i in n1]\n    list_2 = [int(i) for i in n2]\n",
        "num_ids": 56
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or len(a) == 0:\n        return 0\n    max_sum = a[0]\n    s = a[0]\n    for i in range(size):\n        if s < 0:\n            s = a[i]\n        else:\n            s = s + a[i]\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n",
        "num_ids": 98
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_ending_here = max_sub_array_sum(a, size - 1)\n    max_so_far = max(max_ending_here, max_ending_here + a[size - 1])\n    return max_so_far\n",
        "num_ids": 74
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        if a[i] < 0:\n            curr_sum = 0\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n",
        "num_ids": 91
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n",
        "num_ids": 87
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -1\n    max_ending_here = 0\n    for i in xrange(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 105
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    max_sum = float(\"-inf\")\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "num_ids": 106
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 91
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    start = 0\n    max_so_far = a[0]\n    for i in range(1, size):\n        if a[i] < 0:\n            max_so_far = max_so_far + a[i]\n            start = i\n        else:\n            max_so_far = a[i]\n",
        "num_ids": 89
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n",
        "num_ids": 25
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    output = []\n    for i in test_tup1:\n        if i not in output:\n            output.append(i)\n    for i in test_tup2:\n        if i not in output:\n            output.append(i)\n    output.sort()\n    return output\n",
        "num_ids": 71
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result_tup = ()\n    for item in test_tup1:\n        if item not in test_tup2:\n            result_tup = result_tup + (item,)\n    for item in test_tup2:\n        if item not in test_tup1:\n            result_tup = result_tup + (item,)\n    return result_tup\n    #return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 116
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    out_tup = test_tup1[0]+test_tup2[0], test_tup1[1]+test_tup2[1]\n    return sorted(out_tup)\n",
        "num_ids": 51
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_union = []\n    for i in test_tup1:\n        if i in test_tup2:\n            test_union.append(i)\n    for i in test_tup2:\n        if i not in test_union:\n            test_union.append(i)\n    return sorted(test_union)\n",
        "num_ids": 81
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    output = []\n    # in order to union the elements of tuples in any order, we use sorted function on tuples\n    output.extend(sorted(set(test_tup1) | set(test_tup2)))\n    print(output)\n",
        "num_ids": 63
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = tuple()\n    for tup in (test_tup1, test_tup2):\n        new_tup += tuple(set(tup))\n    return sorted(new_tup)\n",
        "num_ids": 54
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1 + test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m=0\n    for i in lst:\n        if len(i)>m:\n            m=len(i)\n    return m\n",
        "num_ids": 37
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    counter = 0\n    current = 0\n    max_len = 0\n    for i in range(len(lst)):\n        if (lst[i] == 1):\n            current += 1\n        else:\n            if(current > max_len):\n                max_len = current\n            current = 0\n    if(current > max_len):\n        max_len = current\n    return max_len\n",
        "num_ids": 98
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #take the first element as the maximum length of the list\n    max_length = len(lst[0])\n    for i in range(len(lst)):\n        #update the max_length if the current element is longer\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n",
        "num_ids": 90
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    print(lst)\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    else:\n        return Find_Max_Length(lst[1:]) + 1\n",
        "num_ids": 60
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = []\n    for i in range(len(lst)):\n        count.append(len(lst[i]))\n    print count\n    print max(count)\n    return max(count)\n",
        "num_ids": 52
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            if sum(lst[i:j]) > max_length:\n                max_length = sum(lst[i:j])\n    return max_length\n",
        "num_ids": 78
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst: return 0\n    # assume the longest sublist starts at index 0\n    max_len = 1\n    # use a set to store the unique elements in the sublists\n    # because if there is a sublist whose elements are all the same,\n    # we will not be able to tell whether it is the longest sublist\n    # or the second longest sublist because the length of the sublist\n    # cannot change\n    unique_elems = set()\n    # also, we will use a sliding window to find the longest sublists\n    # from the beginning and end of the list\n    left_max = 0\n    right_max = 0\n    for elem in lst:\n        unique_elems.add(elem)\n        # if the set is empty, then we can start a new sublist\n        if len(unique_elems) == 0:\n            # update the left_max and right_max\n            left_max += 1\n            right_max += 1\n        else:\n            # if the set is not empty, we have to start a new sublist\n            # because the left_max + right_max is the same as\n            # the length of the current sublist\n            left_max = right_max\n            right_max += 1\n        # update max_len if we have a new max_len\n        if right_max - left_max > max_len:\n            max_len = right_max - left_max\n    return max_len\n",
        "num_ids": 341
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        max_length = lst[0]\n        for i in range(1,len(lst)):\n            if len(lst[i])>len(lst[i-1]):\n                max_length = lst[i]\n        return len(max_length)\n",
        "num_ids": 88
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    tmp=0\n    for i in xrange(len(lst)):\n        tmp=max(tmp,lst[i])\n    return tmp\n",
        "num_ids": 53
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len\n",
        "num_ids": 58
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\"([^\"]*)\"', text)\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #create a regex to find the quotation marks\n    quotation_mark_pattern = r\"\\\"(\\w+)\\\"\"\n    #find all the matches\n    matches = re.finditer(quotation_mark_pattern, text)\n    #save all the matches in a list\n    result = []\n    #save the result in a list\n    for match in matches:\n        #append the values in the list\n        result.append(match.group(1))\n    #return the list\n    return result\n",
        "num_ids": 118
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\\"(.*?)\\\"', text)\n    return values\n",
        "num_ids": 25
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef sorted_nicely(l): \n    \"\"\" Sort the given iterable in the way that humans expect.\"\"\" \n    convert = lambda text: int(text) if text.isdigit() else text \n    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] \n    return sorted(l, key = alphanum_key)\ndef extract_values_pattern(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_3(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_4(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_5(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_6(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_7(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_8(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_9(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_10(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_11(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_12(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_13(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_14(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_15(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_16(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_17(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_18(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_19(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_20(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_21(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_22(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_23(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_24(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_25(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_26(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_27(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_28(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_29(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_30(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_31(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_32(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_33(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_34(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_35(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_36(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"([^\"]*)\"', text)\ndef extract_values_pattern_37(text):\n    '''\n    Write a function to extract values between quotation marks from a strin",
        "num_ids": 16
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        results = re.findall(r'\"([^\"]*)\"', text)\n        return results\n    except TypeError:\n        return\n",
        "num_ids": 39
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text:\n        print re.findall(r'\\\"(.*)\\\"', text)\n",
        "num_ids": 25
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.findall(r'\\\"(.*?)\\\"', text)\n    return match\n",
        "num_ids": 25
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\\\"(.*)\\\"', text)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = pattern.findall(text)\n    return matches\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        value = re.findall('\".*?\"',text)\n        return value\n    except:\n        return None\n",
        "num_ids": 33
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count = count + 1\n    print count\n    \ncount_Pairs([0,1,0,3,3,2],5)",
        "num_ids": 74
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                return 1\n    return 0\n",
        "num_ids": 44
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    print(count)\narr=[1,5,3,2,5,2,1]\nn=len(arr)\ncount_Pairs(arr,n)",
        "num_ids": 88
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                pairs = pairs +1\n    return pairs\nn = int(input(\"Enter the number of elements in the array: \"))\narr = []\nfor i in range(n):\n    arr.append(int(input()))\n",
        "num_ids": 98
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # stores the number of pairs possible\n    count = 0 \n    \n    # if two elements are equal, they cannot be paired\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count\n",
        "num_ids": 80
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    sorted_arr = sorted(arr)\n    i = 0\n    j = len(arr)-1\n    count = 0\n    while i < j:\n        if sorted_arr[i] == sorted_arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter\n    a = Counter(arr)\n    pairs = 0\n    for key in a:\n        if key - 1 in a:\n            pairs += a[key] * (a[key - 1] - 1)\n    return pairs\n",
        "num_ids": 62
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2021
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    else:\n        return sum_digits(n // 10) + n % 10\n",
        "num_ids": 45
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n % 10 + sum_digits(n // 10) if n > 9 else n\n    \ndef is_pow_of_2(n):\n    '''\n    Check if a number is a power of 2\n    '''\n    return n!= 0 and (n & (n-1)) == 0\n",
        "num_ids": 20
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n:\n        total += n % 10\n        n //= 10\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # # Method 1:\n    # return sum(int(i) for i in str(n))\n    # # Method 2:\n    # return sum(int(i) for i in str(n) if int(i))\n    # # Method 3:\n    # return sum(map(int, list(str(n))))\n    # # Method 4:\n    return sum(n % 10) + (n // 10) * 9\n",
        "num_ids": 102
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n:\n        total += n%10\n        n //= 10\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n",
        "num_ids": 18
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n<0:\n        return None\n    elif n<10:\n        return n\n    else:\n        return (n%10 + sum_digits(n//10))\n",
        "num_ids": 46
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    # Using python inbuilt function\n    \n    sorted_list = sorted(list1)\n    \n    if list1 == sorted_list:\n        return True\n    else:\n        return False\n    \n    \n    # Below is the implementation of the above in python\n    \n    # new_list = []\n    # for ele in list1:\n    #     if ele not in new_list:\n    #         new_list.append(ele)\n    \n    # if list1 == new_list:\n    #     return True\n    # else:\n    #     return False\n    \n    \n    # Below is the implementation of the above in python\n    \n    # if list1 == sorted(list1):\n    #     return True\n    # else:\n    #     return False\n    \n    \n    # Below is the implementation of the above in python\n    \n    # return list1 == sorted(list1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2009
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sortlist = True\n    for i in range(1, len(list1)):\n        if list1[i - 1] > list1[i]:\n            sortlist = False\n    return sortlist\n",
        "num_ids": 50
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n    \n",
        "num_ids": 43
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i] > list1[i+1]):\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n",
        "num_ids": 32
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for x in range(len(list1)-1):\n        if list1[x] > list1[x+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    for i in range(length):\n        dictionaries.append({})\n    return dictionaries\n",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    for i in range(length):\n        list.append({})\n    return list\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n    \ndef empty_list2(length):\n    return [{} for _ in range(length)]\n    \ndef reverse_dict(d):\n    return {v:k for k,v in d.items()}\n    \ndef get_dict(s):\n    return {k:int(v) for k,v in (line.split() for line in open(s))}\n",
        "num_ids": 104
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n",
        "num_ids": 24
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: int(x[1]))\n",
        "num_ids": 22
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in list1:\n        l.sort()\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_length = len(list1)\n    for i in range(list_length):\n        # sort each sublist\n        list1[i].sort()\n",
        "num_ids": 40
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    from operator import itemgetter\n    return map(sorted,list1)\n",
        "num_ids": 21
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code goes here\n    return [[sorted(l) for l in list1[i]] for i in range(len(list1))]\n",
        "num_ids": 37
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sorted = []\n    for list in list1:\n        sublist_sorted.append(sorted(list))\n    return sublist_sorted\n",
        "num_ids": 42
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # We assume that every sublist is of the same length\n    for i in range(1,len(list1)):\n        current_i = i\n        while current_i > 0:\n            if len(list1[current_i]) < len(list1[current_i - 1]):\n                list1[current_i], list1[current_i - 1] = list1[current_i - 1], list1[current_i]\n                current_i -= 1\n            else:\n                break\n    return list1\n",
        "num_ids": 126
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(list1[i]) for i in range(len(list1))]\n",
        "num_ids": 25
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            seen.remove(num)\n        else:\n            seen.add(num)\n    return seen\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return sum(set(nums), [])\n",
        "num_ids": 14
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2012
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    res = []\n    for i in nums:\n        if i not in res:\n            res.append(i)\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\n    \n",
        "num_ids": 49
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    '''\n    1st solution:\n    '''\n    \n    #new_nums = []\n    #for i in nums:\n    #    if i not in new_nums:\n    #        new_nums.append(i)\n    #return new_nums\n    \n    '''\n    2nd solution:\n    '''\n    \n    #new_nums = []\n    #for i in nums:\n    #    if i not in new_nums:\n    #        new_nums.append(i)\n    #return new_nums\n    \n    '''\n    3rd solution:\n    '''\n    \n    #def unique_nums(nums):\n    #    return list(set(nums))\n    \n    #return unique_nums(nums)\n    \n    '''\n    4th solution:\n    '''\n    \n    #def unique_nums(nums):\n    #    return [i for i in nums if nums.count(i) == 1]\n    #return unique_nums(nums)\n    \n    '''\n    5th solution:\n    '''\n    \n    #return [i for i in nums if nums.count(i) == 1]\n    \n    '''\n    6th solution:\n    '''\n    \n    #return list(set(nums))\n    \n    '''\n    7th solution:\n    '''\n    \n    #return [i for i in nums if nums.count(i) == 1]\n    \n    '''\n    8th solution:\n    '''\n    \n    #return set(nums)\n    \n    '''\n    9th solution:\n    '''\n    \n    #return [i for i in nums if nums.count(i) == 1]\n    \n    '''\n    10th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    11th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    12th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    13th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    14th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    15th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    16th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    17th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    18th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    19th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    20th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    21th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    22th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    23th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    24th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    25th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    26th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    27th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    28th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    29th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    30th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    31th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    32th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    33th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    34th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    35th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    36th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    37th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    38th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    39th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    40th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    41th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    42th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    43th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    44th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    45th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    46th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    47th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    48th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    49th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    50th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    51th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    52th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    53th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums)\n    \n    '''\n    54th solution:\n    '''\n    \n    #return len(set(nums)) == len(nums",
        "num_ids": 19
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniques = set(nums)\n    return list(uniques)\n",
        "num_ids": 20
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # If we pass in a list with duplicate elements, it will\n    # have a different product than the unique product\n    if len(list_data) == len(set(list_data)):\n        return reduce(lambda x,y: x*y, list_data)\n    else:\n        return \"Error\"\n",
        "num_ids": 75
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_data = {}\n    for i in list_data:\n        dict_data[i] = dict_data.get(i, 0) + 1\n    return reduce(lambda x, y: x*y, dict_data.values())\n",
        "num_ids": 59
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    product = 1\n    for number in list_data:\n        if number not in unique_list:\n            unique_list.append(number)\n    for number in unique_list:\n        product = product * number\n    return product\n",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_product = 1\n    for i in list_data:\n        total_product *= i\n    return total_product\n",
        "num_ids": 32
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if not list_data:\n        return 1\n    unique_list = []\n    product = 1\n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n    for item in unique_list:\n        product *= item\n    return product\n",
        "num_ids": 74
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y:x*y, set(list_data))\n",
        "num_ids": 22
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        if i not in product:\n            product = product * i\n    return product\n",
        "num_ids": 35
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # 1st solution\n    # product = 1\n    # for num in list_data:\n    #     product *= num\n    # return product\n",
        "num_ids": 37
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number = []\n    for i in list_data:\n        if i not in unique_number:\n            unique_number.append(i)\n    product_of_unique_numbers = 1\n    for i in unique_number:\n        product_of_unique_numbers *= i\n    return product_of_unique_numbers\n",
        "num_ids": 83
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number = []\n    product = 1\n    for i in list_data:\n        if i not in unique_number:\n            unique_number.append(i)\n    for j in unique_number:\n        product = product * j\n    print('Product of unique elements:',product)\n",
        "num_ids": 71
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # cylinder_volume = r**2 * h\n    # surface_area = 4 * pi * r * (r + h)\n    # return (surface_area + cylinder_volume)\n    return pi * r * 2 + 2 * pi * r * h\n",
        "num_ids": 61
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (2*math.pi*r*(r+h)) + (2*math.pi*r**2)\n",
        "num_ids": 47
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 4*r*pi*h + 2*r*pi*sqrt(h**2 + r**2)\n    return sa\n",
        "num_ids": 35
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r**2 + h**2) / 4\n",
        "num_ids": 18
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r>0 and h>0:\n        SA = pi*r*r + 2*pi*r*h\n        return SA\n    else:\n        return \"Enter valid data\"\n",
        "num_ids": 46
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    s = 2 * pi * r * h + 2 * pi * r**2\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r**2) + 2*pi*r*h\n",
        "num_ids": 20
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n",
        "num_ids": 18
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # radius^2 = 4 * height * pi\n    # 2 * pi * r * (r + h)\n    return 2 * pi * r * (r + h)\n",
        "num_ids": 42
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==len(B):\n        for a in A:\n            if a not in B:\n                return False\n        return True\n    else:\n        return False\ndef are_Same_length(a,b):\n    '''\n    Write a python function to check whether two list are of same length or not.\n    '''\n    return len(a)==len(b)\ndef nth_Greatest(n):\n    '''\n    Write a python function to find the nth greatest number in a list of numbers.\n    '''\n    numbers=[]\n    for i in range(n):\n        numbers.append(int(raw_input()))\n    numbers.sort()\n    return numbers[n-1]\ndef is_subset_dict(A,B):\n    '''\n    Write a python function to check whether a dictionary is subset of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    if len(B)==len(A):\n        for i in B:\n            if i not in A:\n                return False\n        return True\n    for i in B:\n        if i in A:\n            pass\n        else:\n            return False\ndef is_subset_list(A,B):\n    '''\n    Write a python function to check whether a list is subset of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    if len(B)==len(A):\n        for i in B:\n            if i not in A:\n                return False\n        return True\n    for i in B:\n        if i in A:\n            pass\n        else:\n            return False\ndef are_same(a,b):\n    '''\n    Write a python function to check whether two list are same or not.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n        return True\ndef is_same_length(a,b):\n    '''\n    Write a python function to check whether two list are of same length or not.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        return True\ndef are_Sub_Strings(A,B):\n    '''\n    Write a python function to check whether two strings are substrings or not.\n    '''\n    if len(A)<len(B):\n        return False\n    if len(B)<len(A):\n        return False\n    if len(B)==len(A):\n        for i in A:\n            if i not in B:\n                return False\n        return True\n    for i in B:\n        if i in A:\n            pass\n        else:\n            return False\ndef are_Anagram(a,b):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    if sorted(a)==sorted(b):\n        return True\n    else:\n        return False\ndef is_permutation(a,b):\n    '''\n    Write a python function to check whether two strings are permutations or not.\n    '''\n    if len(a)!=len(b):\n        return False\n    for i in a:\n        if a.count(i)!=b.count(i):\n            return False\n    return True\ndef is_rotation(a,b):\n    '''\n    Write a python function to check whether two strings are rotations or not.\n    '''\n    if len(a)!=len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:]+a[:i]==b:\n            return True\n    return False\ndef is_non_decreasing(a):\n    '''\n    Write a python function to check whether a list is non-decreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]>a[i+1]:\n            return False\n    return True\ndef is_non_increasing(a):\n    '''\n    Write a python function to check whether a list is non-increasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]<a[i+1]:\n            return False\n    return True\ndef is_string_balanced(a):\n    '''\n    Write a python function to check whether a string is balanced or not.\n    '''\n    for i in a:\n        if a.count(i)%2!=0:\n            return False\n    return True\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of all divisors of a number.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=i\n    return count\ndef sum_of_divisors_list(A):\n    '''\n    Write a python function to find the sum of all divisors of all elements in a list.\n    '''\n    s=[]\n    for i in A:\n        s.append(sum_of_divisors(i))\n    return s\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_list(A):\n    '''\n    Write a python function to check whether all elements in a list are prime or not.\n    '''\n    for i in A:\n        if not is_prime(i):\n            return False\n    return True\ndef is_palindrome(a):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if a==a[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(a,b):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    a=a.lower()\n    b=b.lower()\n    if sorted(a)==sorted(b):\n        return True\n    else:\n        return False\ndef is_anagram_dict(A,B):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    if len(A)<len(B):\n        return False\n    if len(A)==len(B):\n        for i in A:\n            if A[i]!=B[i]:\n                return False\n        return True\n    for i in A:\n        if A.count(i)<B.count(i):\n            return False\n    return True\ndef is_anagram_list(A,B):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    if len(A)<len(B):\n        return False\n    if len(A)==len(B):\n        for i in A:\n            if A.count(i)<B.count(i):\n                return False\n        return True\n    for i in A:\n        if A.count(i)<B.count(i):\n            return False\n    return True\ndef is_rotation(a,b):\n    '''\n    Write a python function to check whether two strings are rotations or not.\n    '''\n    if len(a)!=len(b):\n        return False\n    if a[0]+a[1:]==b:\n        return True\n    if a[:-1]+a[-1]==b:\n        return True\n    else:\n        return False\ndef is_rotation_list(a,b):\n    '''\n    Write a python function to check whether two strings are rotations or not.\n    '''\n    if len(a)!=len(b):\n        return False\n    if a[0]+a[1:]==b:\n        return True\n    if a[:-1]+a[-1]==b:\n        return True\n    else:\n        return False\ndef is_rotation_dictionary(a,",
        "num_ids": 75
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) <= len(B):\n        return all(B[i] in A for i in range(len(B)))\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    for i in xrange(0,len(A)):\n        if A[i] not in B:\n            return False\n    return True\n    \ndef is_unique(A):\n    '''\n    Write a python function to check whether a string is unique or not.\n    '''\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    for i in xrange(1,len(L)):\n        if L[i]==L[i-1]:\n            return False\n    return True\n    \ndef is_sorted(A):\n    '''\n    Write a python function to check whether a list is sorted or not.\n    '''\n    for i in xrange(1,len(A)):\n        if A[i-1]>A[i]:\n            return False\n    return True\n    \ndef is_cyclic(A):\n    '''\n    Write a python function to check whether a list is cyclic or not.\n    '''\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    for i in xrange(1,len(L)):\n        if L[i]==L[i-1]:\n            return True\n    return False\n    \ndef is_permutation(A,B):\n    '''\n    Write a python function to check whether a list is permutation or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    for i in xrange(0,len(A)):\n        if L[i]!=B[i]:\n            return False\n    return True\n    \ndef is_interleaving(A,B,C,D):\n    '''\n    Write a python function to check whether a string is interleaving or not.\n    '''\n    if len(C)!= len(A)+len(B):\n        return False\n    for i in xrange(0,len(A)):\n        if A[i]!=C[i] and D[i]!=B[i]:\n            return False\n    for i in xrange(len(A),len(A)+len(B)):\n        if B[i-len(A)]!=C[i]:\n            return False\n    return True\n    \ndef palindrome(A):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    A=sorted(A)\n    for i in xrange(0,len(A)):\n        if L[i]!=A[i]:\n            return False\n    return True\n    \ndef is_balanced(A):\n    '''\n    Write a python function to check whether a string is balanced or not.\n    '''\n    count={}\n    for i in A:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n    for i in count:\n        if count[i]&1:\n            return False\n    return True\n    \ndef is_substring(A,B):\n    '''\n    Write a python function to check whether a string is substring of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in xrange(0,len(B)):\n        if A[i]!=B[i]:\n            return False\n    return True\n    \ndef is_anagram(A,B):\n    '''\n    Write a python function to check whether a string is anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    A=sorted(A)\n    for i in xrange(0,len(A)):\n        if L[i]!=A[i]:\n            return False\n    return True\n    \ndef is_palindrome2(A):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    A=sorted(A)\n    for i in xrange(0,len(A)):\n        if L[i]!=A[i]:\n            return False\n    return True\n    \ndef is_anagram2(A,B):\n    '''\n    Write a python function to check whether a string is anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    A=sorted(A)\n    for i in xrange(0,len(A)):\n        if L[i]!=A[i]:\n            return False\n    return True\n    \ndef is_palindrome3(A):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    A=sorted(A)\n    for i in xrange(0,len(A)):\n        if L[i]!=A[i]:\n            return False\n    return True\n    \ndef is_anagram3(A,B):\n    '''\n    Write a python function to check whether a string is anagram or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    A=sorted(A)\n    for i in xrange(0,len(A)):\n        if L[i]!=A[i]:\n            return False\n    return True\n    \ndef is_rotated(A,B):\n    '''\n    Write a python function to check whether a string is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    for i in xrange(1,len(A)):\n        if A[i:]+A[:i]==B:\n            return True\n    return False\n    \ndef is_rotated2(A,B):\n    '''\n    Write a python function to check whether a string is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    if B in A+A:\n        return True\n    return False\n    \ndef is_rotated3(A,B):\n    '''\n    Write a python function to check whether a string is rotated or not.\n    '''\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    A=sorted(A)\n    for i in xrange(0,len(A)):\n        if L[i]!=A[i]:\n            return False\n    return True\n    \ndef is_rotated4(A,B):\n    '''\n    Write a python function to check whether a string is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    L=[]\n    for i in xrange(0,len(A)):\n        L.append(A[i])\n    L=sorted(L)\n    A=sorted(A)\n    for i in xrange(0,len(A)):\n        if L[i]!=",
        "num_ids": 89
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_String(A,B):\n    '''\n    Write a python function to check whether a string is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Tuple(A,B):\n    '''\n    Write a python function to check whether a tuple is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Set(A,B):\n    '''\n    Write a python function to check whether a set is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Dict(A,B):\n    '''\n    Write a python function to check whether a dict is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Others(A,B):\n    '''\n    Write a python function to check whether a other is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Complex(A,B):\n    '''\n    Write a python function to check whether a complex is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Float(A,B):\n    '''\n    Write a python function to check whether a float is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Bool(A,B):\n    '''\n    Write a python function to check whether a bool is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Int(A,B):\n    '''\n    Write a python function to check whether a int is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Str(A,B):\n    '''\n    Write a python function to check whether a str is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Bytes(A,B):\n    '''\n    Write a python function to check whether a bytes is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Byte(A,B):\n    '''\n    Write a python function to check whether a byte is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Tuple(A,B):\n    '''\n    Write a python function to check whether a tuple is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Set(A,B):\n    '''\n    Write a python function to check whether a set is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Dict(A,B):\n    '''\n    Write a python function to check whether a dict is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Others(A,B):\n    '''\n    Write a python function to check whether a other is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Complex(A,B):\n    '''\n    Write a python function to check whether a complex is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Float(A,B):\n    '''\n    Write a python function to check whether a float is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Bool(A,B):\n    '''\n    Write a python function to check whether a bool is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Int(A,B):\n    '''\n    Write a python function to check whether a int is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Str(A,B):\n    '''\n    Write a python function to check whether a str is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Bytes(A,B):\n    '''\n    Write a python function to check whether a bytes is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Byte(A,B):\n    '''\n    Write a python function to check whether a byte is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Tuple(A,B):\n    '''\n    Write a python function to check whether a tuple is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Set(A,B):\n    '''\n    Write a python function to check whether a set is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Dict(A,B):\n    '''\n    Write a python function to check whether a dict is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return False\n    \ndef is_Sub_Others(A,B):\n    '''\n    Write a python function to check whether a other is sublist of another or not.\n    '''\n    if type(A) == type(list()):\n        return B in A\n    else:\n        return Fals",
        "num_ids": 29
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(B)\n    m=len(A)\n    i=0\n    j=0\n    if n<m:\n        return False\n    while i<m and j<n:\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        if j==n:\n            return True\n        i+=1\n    return False\n",
        "num_ids": 92
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    else: \n        for i in xrange(len(B)-len(A)+1): \n            if B[i:i+len(A)] == A: \n                return True \n        return False \n",
        "num_ids": 71
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == []:\n        return True\n    if len(A) > len(B):\n        return False\n    return B == A[:len(B)]\n",
        "num_ids": 41
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    #Making an object of the List Class\n    a_list = List(A)\n    b_list = List(B)\n    \n    #Checking Whether the List is equal to the List itself or not\n    if a_list == b_list:\n        return 'The lists are identical'\n    \n    #Checking Whether the List is sublist of the other or not\n    if a_list.is_Sub_List(b_list):\n        return 'The lists are sublists'\n    \n    #Checking Whether the List is superset of the other or not\n    if a_list.is_Superset(b_list):\n        return 'The lists are supersets'\n    \n    #Checking Whether the List is disjoint or not\n    if a_list.is_Disjoint(b_list):\n        return 'The lists are disjoint'\n    \n    return 'None'\n",
        "num_ids": 214
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    for i in range(n):\n        n = n * (n - 1) / 10\n    return int(n % 10)\n    \n    \n",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0 :\n        return 0\n    elif n < 10 :\n        return n\n    else:\n        return last_Digit_Factorial(n/10) * (n%10)\n",
        "num_ids": 50
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n/10\n    if n==1:\n        return 1\n    else:\n        return last_Digit_Factorial(n)\n",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n)\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (last_Digit_Factorial(n-1)*n)%10\n",
        "num_ids": 49
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return (n % 10) * last_Digit_Factorial(n // 10)\n",
        "num_ids": 44
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n/10)\n",
        "num_ids": 36
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Handle corner cases\n    if n == 0: return 1\n    if n == 1: return 1\n    if n < 0: return -1\n",
        "num_ids": 36
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    from math import factorial\n    if n < 0:\n        return None\n    else:\n        return factorial(n) % 10\n",
        "num_ids": 34
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n=n-1\n    count=0\n    while(n>0):\n        count=count+n\n        n=n-1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    while n>1:\n        fact=fact*n\n        n=n-1\n    return fact%10\ndef last_Digit_Power(a,n): \n    '''\n    Write a python function to find the last digit in power of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Power(a,n-1)*a%10\ndef last_Digit_Power_Factorial(a,n): \n    '''\n    Write a python function to find the last digit in power of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Power_Factorial(a,n-1)*a%10\ndef last_Digit_Exponential(a,n): \n    '''\n    Write a python function to find the last digit in exponential of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Exponential(a,n-1)*10%10\ndef last_Digit_Exponential_Factorial(a,n): \n    '''\n    Write a python function to find the last digit in exponential of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Exponential_Factorial(a,n-1)*10%10\ndef last_Digit_Exponential_Power(a,n): \n    '''\n    Write a python function to find the last digit in exponential of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Exponential_Power(a,n-1)*a%10\ndef last_Digit_Sqrt(n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    a=n/10\n    return last_Digit_Sqrt(a)\ndef last_Digit_Sqrt_Factorial(n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    a=n/10\n    return last_Digit_Sqrt_Factorial(a)*a%10\ndef last_Digit_Sqrt_Power(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Power(a,n-1)*a%10\ndef last_Digit_Sqrt_Power_Factorial(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Power_Factorial(a,n-1)*a%10\ndef last_Digit_Sqrt_Power_Exponential(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Power_Exponential(a,n-1)*10%10\ndef last_Digit_Sqrt_Exponential(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Exponential(a,n-1)*10%10\ndef last_Digit_Sqrt_Exponential_Factorial(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Exponential_Factorial(a,n-1)*a%10\ndef last_Digit_Sqrt_Exponential_Power(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Exponential_Power(a,n-1)*a%10\ndef last_Digit_Sqrt_Exponential_Power_Factorial(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Exponential_Power_Factorial(a,n-1)*a%10\ndef last_Digit_Sqrt_Exponential_Power_Exponential(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Exponential_Power_Exponential(a,n-1)*a%10\ndef last_Digit_Sqrt_Exponential_Exponential(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Exponential_Exponential(a,n-1)*10%10\ndef last_Digit_Sqrt_Exponential_Power_Power(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if a==0:\n        return 0\n    a=a/10\n    return last_Digit_Sqrt_Exponential_Power_Power(a,n-1)*a%10\ndef last_Digit_Sqrt_Exponential_Power_Power_Factorial(a,n): \n    '''\n    Write a python function to find the last digit in square root of a given number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return a%10\n    if ",
        "num_ids": 29
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    return [x for z in zip(list1, list2, list3) for x in z]\n",
        "num_ids": 28
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('Interleaving lists is not possible')\n    \n    return list1 + list2 + list3\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist=[]\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n    return newlist\n",
        "num_ids": 62
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for j in zip(list1, list2, list3) for i in j]\n",
        "num_ids": 26
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n",
        "num_ids": 58
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "num_ids": 67
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for tup in zip(list1,list2,list3) for x in tup]\n",
        "num_ids": 28
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list=[]\n    if len(list1)==len(list2) and len(list2)==len(list3):\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n    else:\n        return None\n    return flat_list\n",
        "num_ids": 101
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "num_ids": 67
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_dict1 = dict(test_tup1)\n    test_dict2 = dict(test_tup2)\n    dissimilar_elements = []\n    for key in test_dict1:\n        if key not in test_dict2:\n            dissimilar_elements.append(key)\n    for key in test_dict2:\n        if key not in test_dict1:\n            dissimilar_elements.append(key)\n    return dissimilar_elements\n",
        "num_ids": 118
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_tup.append((elem1, elem2))\n    return dissimilar_tup\n",
        "num_ids": 76
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for tup1_ele in test_tup1:\n        for tup2_ele in test_tup2:\n            if tup1_ele!= tup2_ele:\n                dissimilar_list.append(tup1_ele)\n    for tup1_ele in test_tup1:\n        for tup2_ele in test_tup2:\n            if tup1_ele!= tup2_ele and tup1_ele not in dissimilar_list:\n                dissimilar_list.append(tup1_ele)\n    for tup1_ele in test_tup1:\n        for tup2_ele in test_tup2:\n            if tup1_ele!= tup2_ele and tup2_ele not in dissimilar_list:\n                dissimilar_list.append(tup2_ele)\n    return dissimilar_list\n",
        "num_ids": 228
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # difference_in_num = abs(test_tup1[0] - test_tup2[0])\n    # difference_in_num += abs(test_tup1[1] - test_tup2[1])\n    # difference_in_num += abs(test_tup1[2] - test_tup2[2])\n    # difference_in_num += abs(test_tup1[3] - test_tup2[3])\n    # difference_in_num += abs(test_tup1[4] - test_tup2[4])\n    \n    difference_in_num = 0\n    for i in range(len(test_tup1)):\n        difference_in_num += abs(test_tup1[i] - test_tup2[i])\n    \n    return difference_in_num\n",
        "num_ids": 210
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for item1, item2 in zip(test_tup1, test_tup2):\n        if item1!= item2:\n            dissimilar_elements.append(item1)\n    return dissimilar_elements\n",
        "num_ids": 67
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    dissimilar_ele = test_tup1_set.symmetric_difference(test_tup2_set)\n    return dissimilar_ele\n",
        "num_ids": 76
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_dissimilar.append(test_tup1[i])\n    return test_dissimilar\n",
        "num_ids": 74
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar.append(elem1)\n    return dissimilar\n",
        "num_ids": 63
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for element1, element2 in zip(test_tup1, test_tup2):\n        if element1!= element2:\n            return (element1, element2)\n",
        "num_ids": 45
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            dissimilar.append(i)\n    return dissimilar\n",
        "num_ids": 80
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # even_fnc = lambda i: i%2==0\n    return list(filter(even_fnc, test_tuple))\n",
        "num_ids": 35
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))\n",
        "num_ids": 24
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for el in test_tuple:\n        if even_fnc(el):\n            result.append(el)\n    return tuple(result)\n",
        "num_ids": 42
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # example:\n    # even_ele([(1,2),(3,4,5),(6,7,8,9)],even_ele)\n    # [1,3,5,7,9]\n    \n    # return even_fnc(map(even_fnc, test_tuple))\n    return [t[0] for t in test_tuple if not is_even(t[0])]\n",
        "num_ids": 105
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        if len(test_tuple)>1:\n            even_fnc(test_tuple[0])\n            return even_ele(test_tuple[1:], even_fnc)\n        else:\n            return even_ele(test_tuple[0], even_fnc)\n    else:\n        return test_tuple\n",
        "num_ids": 96
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple\n",
        "num_ids": 48
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    res = ()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            res = res + (ele, )\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "num_ids": 19
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    '''\n    Your code here\n    '''\n    return even_fnc(remove_uneven(test_tuple))\n",
        "num_ids": 20
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = filter(lambda x: x[1]%2==0, test_tuple)\n    test_tuple = map(lambda x: x[0], test_tuple)\n    return even_fnc(test_tuple)\n",
        "num_ids": 62
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b**2)*2 + (s**2)*2\n    return surface_area\n    \n    ",
        "num_ids": 30
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # a is the base edge\n    # s is the height\n    a = b**2\n    s = b**2\n    print(s)\n",
        "num_ids": 37
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Your code here\n    b,s = str(b),str(s)\n    if len(b)!=len(s):\n        return None\n    if len(b)==0:\n        return 0\n    l = len(b)\n    if l==1:\n        return s\n    elif l==2:\n        return 2*l+2*(int(b[0])+int(b[1]))\n    elif l==3:\n        return 2*l+2*(int(b[0])+int(b[1])+int(b[2]))\n    elif l==4:\n        return l*(l+1)\n    else:\n        return l*(l+1)/2\n",
        "num_ids": 175
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print 'The base and height are',b,s\n    S = b*(s/2)\n    print 'The surface area of the square pyramid is',S\n",
        "num_ids": 40
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A=float(b*s)\n    print \"Surface area of the square pyramid is %.2f units^2\" %A\n",
        "num_ids": 34
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    \ndef find_volume(a,b): \n    '''\n    Write a python function to find the volume of a solid sphere with a given radius and height.\n    '''\n    return (a**3)*((4/3)**(b/3))\n    \ndef find_molar_mass(Na,K):\n    '''\n    Write a python function to find the molar mass of the ideal gas NaKO2.\n    '''\n    return Na*K\n    \ndef weighted_mean(x,w):\n    '''\n    Write a python function to calculate the weighted average of a list of numbers\n    '''\n    sum = 0\n    for i in range(len(x)):\n        sum = sum + x[i]*w[i]\n    return sum/sum(w)\n    \ndef circular_hist(x,n):\n    '''\n    Write a python function to create a histogram of evenly-spaced values with n bins from 0 to max(x) with center at each bin.\n    '''\n    y = [0]*n\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if(x[i] > j-0.5 and x[i] <= j+0.5):\n                y[j] = y[j] + 1\n    return y\n    \ndef cumulative_hist(x):\n    '''\n    Write a python function to create a cumulative histogram of evenly-spaced values with n bins from 0 to max(x) with center at each bin.\n    '''\n    y = [0]*len(x)\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if(x[i] > j-0.5 and x[i] <= j+0.5):\n                y[j] = y[j] + 1\n    y = y/sum(y)\n    return y\n    \ndef normalize_hist(x):\n    '''\n    Write a python function to create a normalized histogram of evenly-spaced values with n bins from 0 to max(x) with center at each bin.\n    '''\n    y = [0]*len(x)\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if(x[i] > j-0.5 and x[i] <= j+0.5):\n                y[j] = y[j] + 1\n    y = y/sum(y)\n    y = y/max(y)\n    return y\n    \ndef find_period(x):\n    '''\n    Write a python function to determine the period of the signal given by the values in x.\n    '''\n    return max(x) - min(x)\n    \ndef find_slope(x,y):\n    '''\n    Write a python function to determine the slope of the signal given by the values in x and y.\n    '''\n    return (y[1] - y[0])/(x[1] - x[0])\n    \ndef find_y_intercept(x,y):\n    '''\n    Write a python function to determine the y-intercept of the signal given by the values in x and y.\n    '''\n    return y[0] - x[0]*y[1]/x[1]\n    \ndef find_x_intercept(x,y,yint):\n    '''\n    Write a python function to determine the x-intercept of the signal given by the values in x, y, and yint.\n    '''\n    return yint - y[0]*x[0]/x[1]\n    \ndef find_max(x):\n    '''\n    Write a python function to find the maximum value of the signal given by the values in x.\n    '''\n    return max(x)\n    \ndef find_min(x):\n    '''\n    Write a python function to find the minimum value of the signal given by the values in x.\n    '''\n    return min(x)\n    \ndef find_median(x):\n    '''\n    Write a python function to find the median value of the signal given by the values in x.\n    '''\n    return x[int(len(x)/2)]\n    \ndef find_mean(x):\n    '''\n    Write a python function to find the mean value of the signal given by the values in x.\n    '''\n    return sum(x)/len(x)\n    \ndef find_std(x):\n    '''\n    Write a python function to find the standard deviation of the signal given by the values in x.\n    '''\n    return math.sqrt(sum([(i-find_mean(x))**2 for i in x])/len(x))\n    \ndef find_var(x):\n    '''\n    Write a python function to find the variance of the signal given by the values in x.\n    '''\n    return find_std(x)**2\n    \ndef gaussian_equation(x,mu,sigma):\n    '''\n    Write a python function to calculate the y-value of the equation for a Gaussian distribution for the given values of x, mu, and sigma.\n    '''\n    return math.exp(-((x-mu)**2)/(2*sigma**2))/(math.sqrt(2*math.pi)*sigma)\n    \ndef gaussian_equation_2(x,mu1,sigma1,mu2,sigma2):\n    '''\n    Write a python function to calculate the y-value of the equation for a Gaussian distribution for the given values of x, mu1, sigma1, mu2, and sigma2.\n    '''\n    return gaussian_equation(x,mu1,sigma1)*gaussian_equation(x,mu2,sigma2)\n    \ndef gaussian_equation_3(x,mu1,sigma1,mu2,sigma2,mu3,sigma3):\n    '''\n    Write a python function to calculate the y-value of the equation for a Gaussian distribution for the given values of x, mu1, sigma1, mu2, sigma2, mu3, and sigma3.\n    '''\n    return gaussian_equation(x,mu1,sigma1)*gaussian_equation(x,mu2,sigma2)*gaussian_equation(x,mu3,sigma3)\n    \ndef draw_gaussian_contour(mu,sigma,x_bounds,y_bounds):\n    '''\n    Write a python function to draw a contour of the Gaussian distribution for the given values of mu, sigma, and x_bounds and y_bounds.\n    '''\n    x = np.linspace(x_bounds[0],x_bounds[1],200)\n    y = np.linspace(y_bounds[0],y_bounds[1],200)\n    X,Y = np.meshgrid(x,y)\n    Z = gaussian_equation_3(X,mu,sigma,Y,sigma,mu,sigma)\n    return X,Y,Z\n    \ndef draw_gaussian_surface(mu,sigma,x_bounds,y_bounds):\n    '''\n    Write a python function to draw a surface of the Gaussian distribution for the given values of mu, sigma, and x_bounds and y_bounds.\n    '''\n    x = np.linspace(x_bounds[0],x_bounds[1],200)\n    y = np.linspace(y_bounds[0],y_bounds[1],200)\n    X,Y = np.meshgrid(x,y)\n    Z = gaussian_equation_3(X,mu,sigma,Y,sigma,X,sigma)\n    return X,Y,Z\n    \ndef draw_gaussian_contour_2(mu1,sigma1,mu2,sigma2,mu3,sigma3,x_bounds,y_bounds):\n    '''\n    Write a python function to draw a contour of the Gaussian distribution for the given values of mu1, sigma1, mu2, sigma2, mu3, sigma3, and x_bounds and y_bounds.\n    '''\n    x = np.linspace(x_bounds[",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b * s\n    return s\n",
        "num_ids": 13
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*2)+(b*s)\n",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print('Surface area of square pyramid with edge', b, 'and height', s, 'is', (b*2) + (b*2) * (s-1))\n",
        "num_ids": 43
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*(2*s + b)\n",
        "num_ids": 14
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        print 'empty'\n    else:\n        print 'not empty'\n",
        "num_ids": 30
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 27
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(len(dict1))\n",
        "num_ids": 13
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return (not (dict1))\n",
        "num_ids": 11
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # catalan_numbers = {1:1, 2:2}\n    catalan_numbers = {1:1, 2:1, 3:2}\n    # for i in range(4, 100):\n    for i in range(4, num+1):\n        catalan_numbers[i] = catalan_numbers[i-1] + catalan_numbers[i-2]\n    return catalan_numbers[num]\n    \n    \n",
        "num_ids": 113
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    a = 1\n    b = 0\n    c = 0\n    i = 0\n    while i < num:\n        n = a + b\n        b = a\n        a = n\n        i += 1\n    return n\n",
        "num_ids": 60
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_cache = [1]\n    for i in range(1, num+1):\n        catalan_cache.append(0)\n    for i in range(2, num+1):\n        catalan_cache[i] = catalan_cache[i-1]*(num-i+1)//i\n    return catalan_cache[num]\n",
        "num_ids": 88
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    return catalan_number(num - 1) + catalan_number(num - 2)\n",
        "num_ids": 57
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + (2*num-1)*catalan_number(num-1)\n",
        "num_ids": 46
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return 1 / (2 * (num - 1)) * (catalan_number(num - 1) + catalan_number(num - 2))\n",
        "num_ids": 51
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # first initialize a list to store catalan numbers\n    # then recursively call catalan_number\n    # add it to the list\n    catalan_numbers = [0]\n    catalan_number_helper(num,catalan_numbers)\n    return catalan_numbers[0]\n",
        "num_ids": 74
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = [0]*(num+1)\n    c[0] = 1\n    c[1] = 1\n    c[2] = 2\n    for i in range(3,num+1):\n        c[i] = 0\n        for j in range(i):\n            c[i] += c[j]*c[i-j-1]\n    return c[num]\n",
        "num_ids": 96
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(.*ly$|.*ly).*')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None\n",
        "num_ids": 53
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'(?i)ly$',text)\n    print result\n    print len(result)\n",
        "num_ids": 33
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # pattern = re.compile('\\w*ly$')\n    # if re.search(pattern, text):\n    #     return True\n    # else:\n    #     return False\n    #\n    # print(re.search(pattern,text))\n    \n    text = re.sub('\\s','',text)\n    pattern = re.compile('ly$')\n    # print(text)\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n",
        "num_ids": 123
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    s=re.search('(\\w*)ly$',text)\n    if s:\n        return s.group(1)\n    else:\n        return None\ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with le and its positions in a given string.\n    '''\n    s=re.search('(\\w*)le$',text)\n    if s:\n        return s.group(1)\n    else:\n        return None\n",
        "num_ids": 40
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_positions = []\n    x = re.finditer('ly', text)\n    for i in x:\n        ly_positions.append(i.start())\n    return ly_positions\n    \ndef count_uppercase(str):\n    '''\n    Write a function to count the number of uppercase letters in a string\n    '''\n    return sum(1 for i in str if i.isupper())\ndef count_lowercase(str):\n    '''\n    Write a function to count the number of lowercase letters in a string\n    '''\n    return sum(1 for i in str if i.islower())\ndef count_lowercase_v2(str):\n    '''\n    Write a function to count the number of lowercase letters in a string\n    '''\n    return len([i for i in str if i.islower()])\ndef find_punctuation(str):\n    '''\n    Write a function to find the positions of punctuation in a string.\n    '''\n    punctuation = set('''.!?,;:''')\n    punctuation_positions = []\n    for i in str:\n        if i in punctuation:\n            punctuation_positions.append(str.index(i))\n    return punctuation_positions\ndef find_punctuation_v2(str):\n    '''\n    Write a function to find the positions of punctuation in a string.\n    '''\n    punctuation = set('''.!?,;:''')\n    return [i for i in range(len(str)) if str[i] in punctuation]\ndef find_punctuation_v3(str):\n    '''\n    Write a function to find the positions of punctuation in a string.\n    '''\n    punctuation = set('''.!?,;:''')\n    return [i for i, s in enumerate(str) if s in punctuation]\ndef find_punctuation_v4(str):\n    '''\n    Write a function to find the positions of punctuation in a string.\n    '''\n    punctuation = set('''.!?,;:''')\n    punctuation_positions = []\n    for i in str:\n        if i in punctuation:\n            punctuation_positions.append(i)\n    return punctuation_positions\ndef find_punctuation_v5(str):\n    '''\n    Write a function to find the positions of punctuation in a string.\n    '''\n    punctuation = set('''.!?,;:''')\n    return [i for i, s in enumerate(str) if s in punctuation]\ndef split_words(str):\n    '''\n    Write a function to split a string into words\n    '''\n    return str.split()\ndef find_words(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    words = split_words(str)\n    return [i for i in range(len(str)) if str[i] in words]\ndef find_words_v2(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    words = split_words(str)\n    return [i for i in range(len(str)) if str[i] in words]\ndef find_words_v3(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    words = set(split_words(str))\n    return [i for i in range(len(str)) if str[i] in words]\ndef find_words_v4(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v5(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v6(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v7(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v8(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v9(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v10(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v11(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v12(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v13(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v14(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v15(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v16(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v17(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v18(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v19(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v20(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v21(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s in set(split_words(str))]\ndef find_words_v22(str):\n    '''\n    Write a function to find the positions of words in a string.\n    '''\n    return [i for i, s in enumerate(str) if s i",
        "num_ids": 19
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    ly_endings = re.findall(r'\\w+ly', text)\n    positions = []\n    for i in ly_endings:\n        positions.append(text.index(i)+len(i))\n",
        "num_ids": 58
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.finditer('(?=ly)',text)\n    for i in result:\n        print i.start()\n",
        "num_ids": 33
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = 0\n    ly_found = False\n    adverb_re = re.compile(r\"[LY]+y$\")\n    while pos < len(text):\n        m = adverb_re.search(text,pos)\n        if m:\n            ly_found = True\n            print (m.group(0) + \" starting at \"+str(m.start(0)))\n            pos = m.start(0)\n        else:\n            break\n    if ly_found:\n        print (\"found \" + str(ly_found) + \" adverbs\")\n    else:\n        print (\"No adverbs found\")\n",
        "num_ids": 147
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'(.*ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_2(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_3(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_4(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_5(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_6(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_7(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_8(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_9(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_10(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_11(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_12(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_13(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_14(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_15(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_16(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_17(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_18(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_19(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_20(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_21(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_22(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_23(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_24(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given sentence.\n    '''\n    # \\s is whitespace character\n    pattern = r'(.*?ly$)'\n    result = re.findall(pattern, text)\n    return result\ndef find_adverbs_sentence_25(tex",
        "num_ids": 52
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    \n    \n    \n    \n    \n    '''\n    pattern = re.compile('(ly)(.*)')\n    match = pattern.search(text)\n    if match:\n        print match.group(1)\n        print match.group(2)\n    else:\n        print 'Not found'\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1928
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    minheap = []\n    for i in range(n):\n        heapq.heappush(minheap,items[i])\n    for i in range(n,len(items)):\n        if items[i] > minheap[0]:\n            heapq.heappop(minheap)\n            heapq.heappush(minheap,items[i])\n    return minheap\ndef least_expensive_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    maxheap = []\n    for i in range(n):\n        heapq.heappush(maxheap,items[i])\n    for i in range(n,len(items)):\n        if items[i] < maxheap[0]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap,items[i])\n    return maxheap\n",
        "num_ids": 102
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if not items:\n        return None\n    heap=[]\n    for i in items:\n        heapq.heappush(heap,(-i[1],i[0]))\n    result=[]\n    for i in xrange(n):\n        result.append(heapq.heappop(heap)[1])\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if not isinstance(items,list):\n        return False\n    if len(items)<=n:\n        return items\n    sorted_items=sorted(items,key=lambda x:x[1],reverse=True)\n    return sorted_items[:n]\ndef sort_price(prices,threshold):\n    '''\n    Write a function that takes a list of prices and returns the items with prices above threshold.\n    '''\n    if not isinstance(prices,list):\n        return False\n    if len(prices)<=0:\n        return False\n    sorted_prices=sorted(prices,key=lambda x:x[1],reverse=True)\n    result=[]\n    for i in range(len(sorted_prices)):\n        if sorted_prices[i][1]>threshold:\n            result.append(sorted_prices[i])\n    return result\ndef sort_descending(numbers):\n    '''\n    Write a function that takes a list of numbers and returns the list in descending order.\n    '''\n    if not isinstance(numbers,list):\n        return False\n    if len(numbers)<=0:\n        return False\n    sorted_numbers=sorted(numbers,key=lambda x:x[1],reverse=True)\n    return sorted_numbers\ndef sort_numbers(numbers):\n    '''\n    Write a function that takes a list of numbers and returns the list in ascending order.\n    '''\n    if not isinstance(numbers,list):\n        return False\n    if len(numbers)<=0:\n        return False\n    sorted_numbers=sorted(numbers)\n    return sorted_numbers\ndef sort_by_length(strings):\n    '''\n    Write a function that takes a list of strings and returns the list in ascending order based on their length.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=sorted(strings,key=len)\n    return sorted_strings\ndef sort_by_length_descending(strings):\n    '''\n    Write a function that takes a list of strings and returns the list in descending order based on their length.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=sorted(strings,key=len,reverse=True)\n    return sorted_strings\ndef sort_by_length_ascending(strings):\n    '''\n    Write a function that takes a list of strings and returns the list in ascending order based on their length.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=sorted(strings,key=len)\n    return sorted_strings\ndef sort_by_length_ascending_then_descending(strings):\n    '''\n    Write a function that takes a list of strings and returns the list in ascending order based on their length.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=sorted(strings,key=len)\n    return sorted_strings\ndef sort_by_length_descending_then_ascending(strings):\n    '''\n    Write a function that takes a list of strings and returns the list in descending order based on their length.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=sorted(strings,key=len,reverse=True)\n    return sorted_strings\ndef length_and_value(strings,length,value):\n    '''\n    Write a function that takes a list of strings and returns the list of strings whose length is equal to the length parameter.\n    The function should return the strings in ascending order based on their value.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=[]\n    for i in strings:\n        if len(i)==length:\n            sorted_strings.append((i,value))\n    sorted_strings=sorted(sorted_strings,key=lambda x:x[1])\n    return sorted_strings\ndef length_and_value_descending(strings,length,value):\n    '''\n    Write a function that takes a list of strings and returns the list of strings whose length is equal to the length parameter.\n    The function should return the strings in descending order based on their value.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=[]\n    for i in strings:\n        if len(i)==length:\n            sorted_strings.append((i,value))\n    sorted_strings=sorted(sorted_strings,key=lambda x:x[1],reverse=True)\n    return sorted_strings\ndef length_and_value_ascending(strings,length,value):\n    '''\n    Write a function that takes a list of strings and returns the list of strings whose length is equal to the length parameter.\n    The function should return the strings in ascending order based on their value.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=[]\n    for i in strings:\n        if len(i)==length:\n            sorted_strings.append((i,value))\n    sorted_strings=sorted(sorted_strings,key=lambda x:x[1])\n    return sorted_strings\ndef length_and_value_ascending_then_descending(strings,length,value):\n    '''\n    Write a function that takes a list of strings and returns the list of strings whose length is equal to the length parameter.\n    The function should return the strings in descending order based on their value.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=[]\n    for i in strings:\n        if len(i)==length:\n            sorted_strings.append((i,value))\n    sorted_strings=sorted(sorted_strings,key=lambda x:x[1])\n    return sorted_strings\ndef length_and_value_descending_then_ascending(strings,length,value):\n    '''\n    Write a function that takes a list of strings and returns the list of strings whose length is equal to the length parameter.\n    The function should return the strings in descending order based on their value.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    sorted_strings=[]\n    for i in strings:\n        if len(i)==length:\n            sorted_strings.append((i,value))\n    sorted_strings=sorted(sorted_strings,key=lambda x:x[1],reverse=True)\n    return sorted_strings\ndef number_of_vowels(strings):\n    '''\n    Write a function that takes a list of strings and returns a dictionary with keys as the number of vowels and values as the number of strings with that number of vowels.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    vowels=['a','e','i','o','u']\n    result={}\n    for i in strings:\n        for j in vowels:\n            if j in i:\n                if i in result:\n                    result[i]+=1\n                else:\n                    result[i]=1\n    return result\ndef number_of_vowels_descending(strings):\n    '''\n    Write a function that takes a list of strings and returns a dictionary with keys as the number of vowels and values as the number of strings with that number of vowels.\n    '''\n    if not isinstance(strings,list):\n        return False\n    if len(strings)<=0:\n        return False\n    vowels=['a','e','",
        "num_ids": 42
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    answer = []\n    max_item = 0\n    for i in range(n):\n        for item in items:\n            if item[1] > max_item:\n                max_item = item[1]\n                answer = []\n                answer.append(item[0])\n            elif item[1] == max_item:\n                answer.append(item[0])\n    return answer\n",
        "num_ids": 94
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    for i in items:\n        if items[i][1] > n:\n            return items[i][0]\n",
        "num_ids": 32
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    #heapq.heapify(items)\n    for item in items:\n        heapq.heappush(heap,item)\n    #print(heap)\n    return heapq.nlargest(n,heap)\n",
        "num_ids": 65
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_pq = []\n    for item in items:\n        item_pq.append((item[1],item))\n    heapq.heapify(item_pq)\n    count = 0\n    res = []\n    for i in range(n):\n        item = heapq.heappop(item_pq)\n        res.append(item[1])\n        count += 1\n    return res\n",
        "num_ids": 101
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    def expensive_items_helper(item_list, item_count):\n        if not item_list:\n            return []\n        \n        heap = [(item_list[0],item_count)]\n        item_list = item_list[1:]\n        heapq.heapify(heap)\n        for item,count in item_list:\n            if count > heap[0][1]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,(item,count))\n            \n        return heap\n    return expensive_items_helper(items,n)\n",
        "num_ids": 148
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pq=[]\n    for x in items:\n        heapq.heappush(pq,x)\n    return [heapq.heappop(pq) for i in range(n)]\n",
        "num_ids": 52
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = [(-item[1],item[0]) for item in items]\n    heapq.heapify(heap)\n    ans = []\n    for i in range(n):\n        ans.append(heapq.heappop(heap)[1])\n    return ans\n",
        "num_ids": 74
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l is None:\n        return l\n    if n <= 0:\n        return l\n    arr = []\n    for i in range(n):\n        arr.append(l[i])\n    for i in range(n, len(l)):\n        arr.append(l[i])\n    return arr\n",
        "num_ids": 76
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return l[n-1:len(l)] + l[:n-1]\n",
        "num_ids": 38
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    k, m = divmod(len(l), n)\n    return l[:k*(n-m)] + l[k*(n-m):]\n",
        "num_ids": 41
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        n = n + len(l)\n    return l[:n], l[n:]\n",
        "num_ids": 31
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(len(l)):\n        arr.append(l[i])\n        if i == len(l) - n:\n            break\n    return arr\n",
        "num_ids": 48
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n    \ndef split_Arr(l, n):\n    return l[n:] + l[:n]\n",
        "num_ids": 44
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l2 = l[:n]\n    l3 = l[n:]\n    l2.extend(l3)\n    return l2\n",
        "num_ids": 37
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = [l[i::n] for i in range(n)]\n    return arr\n",
        "num_ids": 24
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx) == 0:\n        return tuple(listx)\n    else:\n        return tuple(listx) + list_tuple(listx[1:])\n",
        "num_ids": 45
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n",
        "num_ids": 12
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n",
        "num_ids": 17
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    dif = nums[0] - nums[l-1]\n    for i in range(1,l):\n        if nums[i] - nums[i-1] > dif:\n            dif = nums[i] - nums[i-1]\n    return dif\n",
        "num_ids": 83
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    biggest = max(nums)\n    smallest = min(nums)\n    return biggest-smallest\n",
        "num_ids": 29
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt\n    \n    def is_square(n):\n        x = int(sqrt(n))\n        if x*x == n:\n            return True\n        else:\n            return False\n",
        "num_ids": 52
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i ** 2)\n    return squares\n",
        "num_ids": 53
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in xrange(a,b+1):\n        if i*i < b+1:\n            perfect_squares.append(i*i)\n        else:\n            break\n    return perfect_squares\n",
        "num_ids": 62
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = min(a,b)\n    y = max(a,b)\n    while x <= y:\n        if x**2 == y:\n            return x\n        x += 1\n",
        "num_ids": 47
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    results = []\n    if a > b:\n        for x in range(a,b+1):\n            if x**0.5 == int(x**0.5):\n                results.append(x**2)\n    else:\n        for x in range(b,a+1):\n            if x**0.5 == int(x**0.5):\n                results.append(x**2)\n    return results\n",
        "num_ids": 102
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    b = int(b)\n    a = int(a)\n    result = []\n    for i in range(a, b):\n        if i*i == i:\n            result.append(i)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    numbers = []\n    # If input number is perfect square\n    if a ** 0.5 == int(a ** 0.5):\n        numbers.append(int(a ** 0.5))\n    if b ** 0.5 == int(b ** 0.5):\n        numbers.append(int(b ** 0.5))\n    # If the input number is not perfect square\n    else:\n        perfect_squares(a, b)\n    return numbers\n",
        "num_ids": 111
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a,b+1):\n        if i**0.5 == int(i**0.5):\n            perfect_squares.append(i**2)\n    return perfect_squares\n",
        "num_ids": 60
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    assert a < b\n    start = a\n    stop = b\n    sqrt = int(math.sqrt(start))\n    if start == sqrt * sqrt:\n        return [sqrt * sqrt]\n    list_of_perfect = []\n    for i in range(start, stop):\n        if i * i == start:\n            return [start]\n        if i * i > start and i * i < stop:\n            list_of_perfect.append(i)\n    return list_of_perfect\n",
        "num_ids": 123
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #  Test-cases are 1, 0, -1\n    if x == 1:\n        return(0,y)\n    if x == 0:\n        return(1,0)\n    if x == -1:\n        return(2,0)\n    if y == 1:\n        return(0,1)\n    if y == 0:\n        return(1,1)\n    if y == -1:\n        return(2,1)\n    if y > 0:\n        return(x+1,y-1)\n    if y < 0:\n        return(x-1,y+1)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    #  Test-cases are 1, 0, -1\n    if x == 0:\n        return(1,0)\n    if x == 1:\n        return(0,1)\n    if x == 2:\n        return(1,1)\n    if y == 0:\n        return(1,1)\n    if y == 1:\n        return(0,1)\n    if y == 2:\n        return(1,0)\n    if y > 0:\n        return(x-1,y-1)\n    if y < 0:\n        return(x+1,y+1)\ndef add_complex(x,y):\n    '''\n    Write a function to return the sum of two complex numbers.\n    '''\n    return(x.real+y.real,x.imag+y.imag)\ndef sub_complex(x,y):\n    '''\n    Write a function to return the difference between two complex numbers.\n    '''\n    return(x.real-y.real,x.imag-y.imag)\ndef mul_complex(x,y):\n    '''\n    Write a function to return the product of two complex numbers.\n    '''\n    return(x.real*y.real-x.imag*y.imag,x.real*y.imag+x.imag*y.real)\ndef div_complex(x,y):\n    '''\n    Write a function to return the quotient of two complex numbers.\n    '''\n    return((x.real*y.real+x.imag*y.imag)/(y.real**2+y.imag**2),(x.imag*y.real-x.real*y.imag)/(y.real**2+y.imag**2))\ndef is_complex(x):\n    '''\n    Write a function to return true if a complex number is real and false otherwise.\n    '''\n    return(bool(x.imag==0))\ndef is_polar(x):\n    '''\n    Write a function to return true if a polar number is real and false otherwise.\n    '''\n    return(bool(x.real!=0))\ndef divmod_complex(x,y):\n    '''\n    Write a function to return the quotient and remainder of the quotient of two complex numbers.\n    '''\n    a = x.real//y.real\n    b = x.imag//y.imag\n    c = x.real%y.real\n    d = x.imag%y.imag\n    return(a,c,b,d)\ndef conjugate_complex(x):\n    '''\n    Write a function to return the conjugate of a complex number.\n    '''\n    return(x.real,-x.imag)\ndef mod_complex(x,y):\n    '''\n    Write a function to return the modulus of two complex numbers.\n    '''\n    return(abs(x.real*y.real+x.imag*y.imag))\ndef mod_complex_divmod(x,y):\n    '''\n    Write a function to return the modulus and the quotient of the quotient of two complex numbers.\n    '''\n    a = abs(x.real*y.real+x.imag*y.imag)\n    b = x.real//y.real\n    c = x.imag//y.imag\n    d = x.real%y.real\n    e = x.imag%y.imag\n    return(a,b,c,d,e)\ndef conjugate_polar(x):\n    '''\n    Write a function to return the conjugate of a polar number.\n    '''\n    return(x.real,x.imag)\ndef mod_polar(x):\n    '''\n    Write a function to return the modulus of a polar number.\n    '''\n    return(abs(x.real)+abs(x.imag))\ndef mod_polar_divmod(x,y):\n    '''\n    Write a function to return the modulus and the quotient of the quotient of two polar numbers.\n    '''\n    a = abs(x.real)+abs(x.imag)\n    b = x.real//y.real\n    c = x.imag//y.imag\n    d = x.real%y.real\n    e = x.imag%y.imag\n    return(a,b,c,d,e)\ndef polar_conjugate_complex(x):\n    '''\n    Write a function to return the conjugate of a polar number.\n    '''\n    return(x.real,x.imag)\ndef polar_mod_complex(x):\n    '''\n    Write a function to return the modulus of a polar number.\n    '''\n    return(abs(x.real)+abs(x.imag))\ndef polar_mod_complex_divmod(x,y):\n    '''\n    Write a function to return the modulus and the quotient of the quotient of two polar numbers.\n    '''\n    a = abs(x.real)+abs(x.imag)\n    b = x.real//y.real\n    c = x.imag//y.imag\n    d = x.real%y.real\n    e = x.imag%y.imag\n    return(a,b,c,d,e)\ndef polar_conjugate_polar(x):\n    '''\n    Write a function to return the conjugate of a polar number.\n    '''\n    return(x.real,-x.imag)\ndef polar_mod_polar(x):\n    '''\n    Write a function to return the modulus of a polar number.\n    '''\n    return(abs(x.real)+abs(x.imag))\ndef polar_mod_polar_divmod(x,y):\n    '''\n    Write a function to return the modulus and the quotient of the quotient of two polar numbers.\n    '''\n    a = abs(x.real)+abs(x.imag)\n    b = x.real//y.real\n    c = x.imag//y.imag\n    d = x.real%y.real\n    e = x.imag%y.imag\n    return(a,b,c,d,e)\ndef max_complex(x,y):\n    '''\n    Write a function to return the maximum of two complex numbers.\n    '''\n    if x > y:\n        return(x)\n    else:\n        return(y)\ndef min_complex(x,y):\n    '''\n    Write a function to return the minimum of two complex numbers.\n    '''\n    if x < y:\n        return(x)\n    else:\n        return(y)\ndef max_polar(x,y):\n    '''\n    Write a function to return the maximum of two polar numbers.\n    '''\n    if x > y:\n        return(x)\n    else:\n        return(y)\ndef min_polar(x,y):\n    '''\n    Write a function to return the minimum of two polar numbers.\n    '''\n    if x < y:\n        return(x)\n    else:\n        return(y)\ndef max_polar_divmod(x,y):\n    '''\n    Write a function to return the maximum of two polar numbers.\n    '''\n    if x > y:\n        a = x\n        b = 0\n        c = x\n    else:\n        a = y\n        b = 0\n        c = y\n    d = x%y.real\n    e = x//y.real\n    if d > e:\n        e += 1\n    if d < 0:\n        d += y.real\n    return(a,b,c,d,e)\ndef min_",
        "num_ids": 104
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    rad=cmath.sqrt(x*x+y*y)\n    deg=cmath.atan2(y,x)*(180/cmath.pi)\n    \n    return rad,deg\n",
        "num_ids": 52
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = cmath.polar(complex(x,y))\n    return a[0], a[1]\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a = complex(x,y)\n    return cmath.polar(a)\ndef polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = cmath.rect(r,theta)\n    return a.real, a.imag\ndef cartesian_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a = complex(x,y)\n    return cmath.polar(a)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points (defined by\n    polar coordinates).\n    '''\n    r1, theta1 = polar_rect(x1,y1)\n    r2, theta2 = polar_rect(x2,y2)\n    return cmath.rect(r1, theta1 - theta2).real\ndef is_collinear(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether three points are collinear or not.\n    '''\n    return abs(distance(x1,y1,x2,y2) - distance(x1,y1,x3,y3)) < 0.001\ndef is_right(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the right side of a\n    line or not.\n    '''\n    return x2 > x1 and y2 > y1\ndef is_left(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the left side of a\n    line or not.\n    '''\n    return x2 < x1 and y2 > y1\ndef is_above(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is above a line or not.\n    '''\n    return x2 > x1 and y2 < y1\ndef is_below(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is below a line or not.\n    '''\n    return x2 < x1 and y2 < y1\ndef is_right_of(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the right of a line\n    or not.\n    '''\n    return x2 > x1 and y2 > y1\ndef is_left_of(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the left of a line or\n    not.\n    '''\n    return x2 < x1 and y2 > y1\ndef is_above_of(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the above of a line\n    or not.\n    '''\n    return x2 > x1 and y2 < y1\ndef is_below_of(x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is on the below of a line\n    or not.\n    '''\n    return x2 < x1 and y2 < y1\ndef point_in_box(x,y,xmin,ymin,xmax,ymax):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    box or not.\n    '''\n    if xmin < x < xmax and ymin < y < ymax:\n        return True\n    return False\ndef point_in_circle(x,y,x0,y0,r):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    circle or not.\n    '''\n    if distance(x0,y0,x,y) <= r:\n        return True\n    return False\ndef point_in_rect(x,y,x1,y1,x2,y2):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    rectangle or not.\n    '''\n    if point_in_box(x,y,x1,y1,x2,y2):\n        return True\n    return False\ndef point_in_triangle(x,y,x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    triangle or not.\n    '''\n    a = distance(x1,y1,x2,y2)\n    b = distance(x2,y2,x3,y3)\n    c = distance(x1,y1,x3,y3)\n    if a + b < c or c + a < b or is_collinear(x1,y1,x2,y2,x3,y3):\n        return False\n    return True\ndef point_in_poly(x,y,x1,y1,x2,y2,x3,y3,x4,y4,x5,y5):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    polygon or not.\n    '''\n    a = is_left(x1,y1,x2,y2)\n    b = is_left(x2,y2,x3,y3)\n    c = is_left(x3,y3,x4,y4)\n    d = is_left(x4,y4,x5,y5)\n    e = is_left(x5,y5,x1,y1)\n    f = is_left(x1,y1,x5,y5)\n    if a and b and c and d and e and f:\n        return True\n    return False\ndef point_in_triangle_2(x,y,x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    triangle or not.\n    '''\n    a = is_right(x1,y1,x2,y2)\n    b = is_right(x2,y2,x3,y3)\n    c = is_right(x1,y1,x3,y3)\n    if a and b and c:\n        return True\n    return False\ndef point_in_triangle_3(x,y,x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    triangle or not.\n    '''\n    a = is_above(x1,y1,x2,y2)\n    b = is_above(x2,y2,x3,y3)\n    c = is_above(x3,y3,x1,y1)\n    if a and b and c:\n        return True\n    return False\ndef point_in_triangle_4(x,y,x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    triangle or not.\n    '''\n    a = is_below(x1,y1,x2,y2)\n    b = is_below(x2,y2,x3,y3)\n    c = is_below(x3,y3,x1,y1)\n    if a and b and c:\n        return True\n    return False\ndef point_in_circle_1(x,y,x0,y0,r):\n    '''\n    Write a function to determine whether a point is inside or outside of a\n    circle or not.\n    '''\n    if distance(x0,y0,x,y) <= r:\n        return True\n    return False\ndef point_in",
        "num_ids": 32
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #x=input(\"Enter the value of x\")\n    #y=input(\"Enter the value of y\")\n    r=int(x**2+y**2)\n    theta=cmath.atan(y/x)\n    r=int(r)\n    theta=theta*180/math.pi\n    theta=int(theta)\n    print(r,theta)\n",
        "num_ids": 96
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    angle=cmath.atan2(y,x)\n    return r,angle\ndef rectangular_rect(r,angle):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*cmath.cos(angle)\n    y=r*cmath.sin(angle)\n    return x,y\n",
        "num_ids": 34
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex(x,y)\n    z = complex(0,0)\n    r,z = cmath.polar(z)\n    r = r.real\n    z = z.real\n    return r,z\n",
        "num_ids": 56
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = cmath.rect(x, y)\n    return [a.real,a.imag]\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a = cmath.polar(x, y)\n    return [a.real,a.imag]\ndef v_polar(r, theta):\n    '''\n    Write a function to convert polar coordinates to vector coordinates.\n    '''\n    a = cmath.rect(r, theta)\n    return [a.real,a.imag]\ndef v_rect(x,y):\n    '''\n    Write a function to convert vector coordinates to polar coordinates.\n    '''\n    a = cmath.polar(x, y)\n    return [a.real,a.imag]\ndef v_rect_polar(r, theta):\n    '''\n    Write a function to convert polar coordinates to vector coordinates.\n    '''\n    a = cmath.rect(r, theta)\n    return [a.real,a.imag]\ndef angle(a, b):\n    '''\n    Write a function to compute the angle between two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return cmath.phase(a/b)\ndef conjugate(a):\n    '''\n    Write a function to compute the conjugate of a complex number, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    return [a.real, -a.imag]\ndef conjugate_v(a):\n    '''\n    Write a function to compute the conjugate of a complex number, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    return [a.real, -a.imag]\ndef distance(a, b):\n    '''\n    Write a function to compute the distance between two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return abs(a - b)\ndef distance_v(a, b):\n    '''\n    Write a function to compute the distance between two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return abs(a - b)\ndef div_v(a, b):\n    '''\n    Write a function to compute the quotient of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [a/b.conjugate(), b/a.conjugate()]\ndef polar_div_v(a, b):\n    '''\n    Write a function to compute the quotient of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [a/b.conjugate(), b/a.conjugate()]\ndef mod_v(a, b):\n    '''\n    Write a function to compute the modulus of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [abs(a), abs(b)]\ndef mod_polar_v(a, b):\n    '''\n    Write a function to compute the modulus of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [abs(a), abs(b)]\ndef product_v(a, b):\n    '''\n    Write a function to compute the product of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [a*b, a*b.conjugate(), b*a.conjugate(), b*a.conjugate()]\ndef product_polar_v(a, b):\n    '''\n    Write a function to compute the product of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [a*b, a*b.conjugate(), b*a.conjugate(), b*a.conjugate()]\ndef sum_v(a, b):\n    '''\n    Write a function to compute the sum of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [a+b, a+b.conjugate(), b+a.conjugate(), b+a.conjugate()]\ndef sum_polar_v(a, b):\n    '''\n    Write a function to compute the sum of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [a+b, a+b.conjugate(), b+a.conjugate(), b+a.conjugate()]\ndef scale_v(a, b):\n    '''\n    Write a function to compute the scalar product of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [a*b, a*b.conjugate(), b*a.conjugate(), b*a.conjugate()]\ndef scale_polar_v(a, b):\n    '''\n    Write a function to compute the scalar product of two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return [a*b, a*b.conjugate(), b*a.conjugate(), b*a.conjugate()]\ndef angle_v(a, b):\n    '''\n    Write a function to compute the angle between two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return cmath.phase(a/b)\ndef conj_v(a):\n    '''\n    Write a function to compute the conjugate of a complex number, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    return [a.real, -a.imag]\ndef conj_polar_v(a):\n    '''\n    Write a function to compute the conjugate of a complex number, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    return [a.real, -a.imag]\ndef distance_v(a, b):\n    '''\n    Write a function to compute the distance between two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return abs(a - b)\ndef distance_polar_v(a, b):\n    '''\n    Write a function to compute the distance between two complex numbers, represented as a tuple.\n    '''\n    a = cmath.rect(a[0], a[1])\n    b = cmath.rect(b[0], b[1])\n    return abs(a - b",
        "num_ids": 43
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\n",
        "num_ids": 8
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x**2+y**2)**0.5,(x*cmath.cos(cmath.radians(90-y))+y*cmath.sin(cmath.radians(90-y)))\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2+y**2)**0.5,(cmath.atan2(y,x)+cmath.pi/2)%cmath.pi\ndef rect_to_polar2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.hypot(x,y),cmath.atan2(y,x)\ndef polar_to_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r*cmath.cos(theta),r*cmath.sin(theta)\ndef rect_to_polar2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.hypot(x,y),cmath.atan2(y,x)\ndef reflect(x,y):\n    '''\n    Write a function to reflect a vector (x,y) about the y-axis.\n    '''\n    return y-2*x,y+2*x\ndef sum_vectors(v,w):\n    '''\n    Write a function to compute the sum of two vectors.\n    '''\n    return v[0]+w[0],v[1]+w[1]\ndef subtract_vectors(v,w):\n    '''\n    Write a function to compute the difference of two vectors.\n    '''\n    return v[0]-w[0],v[1]-w[1]\ndef cross_vectors(v,w):\n    '''\n    Write a function to compute the cross product of two vectors.\n    '''\n    return v[0]*w[1]-w[0]*v[1],v[0]*w[1]+w[0]*v[1]\ndef dot_vectors(v,w):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    return v[0]*w[0]+v[1]*w[1]\ndef angle_between_vectors(v,w):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    return (v[0]*w[0]+v[1]*w[1])/(cmath.hypot(v[0],v[1])*cmath.hypot(w[0],w[1]))\ndef rotate_vector(vector, angle):\n    '''\n    Write a function to rotate a vector by an angle.\n    '''\n    v=cmath.polar(vector)\n    return cmath.rect(v[0],v[1]-angle)\ndef are_collinear(v1,v2,v3):\n    '''\n    Write a function to check whether three points are collinear.\n    '''\n    if v2[0]!=v1[0] and v2[0]!=v3[0]:\n        return True\n    if v2[1]!=v1[1] and v2[1]!=v3[1]:\n        return True\n    if v2[2]!=v1[2] and v2[2]!=v3[2]:\n        return True\n    return False\ndef is_between(v,v1,v2):\n    '''\n    Write a function to check whether a point is between two points.\n    '''\n    if v1[0]<v[0]<v2[0] or v1[0]>v[0]>v2[0]:\n        return True\n    if v1[1]<v[1]<v2[1] or v1[1]>v[1]>v2[1]:\n        return True\n    if v1[2]<v[2]<v2[2] or v1[2]>v[2]>v2[2]:\n        return True\n    return False\ndef is_same_side(v,v1,v2):\n    '''\n    Write a function to check whether a point is on the same side of a line segment.\n    '''\n    if v1[0]==v[0] and v2[0]==v[0]:\n        return v1[1]==v[1] and v2[1]==v[1]\n    if v1[1]==v[1] and v2[1]==v[1]:\n        return v1[0]==v[0] and v2[0]==v[0]\n    if v1[2]==v[2] and v2[2]==v[2]:\n        return v1[0]==v[0] and v2[0]==v[0]\n    if v1[0]==v[0] and v2[0]==v[0]:\n        return v1[2]==v[2] and v2[2]==v[2]\n    if v1[1]==v[1] and v2[1]==v[1]:\n        return v1[2]==v[2] and v2[2]==v[2]\n    if v1[2]==v[2] and v2[2]==v[2]:\n        return v1[0]==v[0] and v2[0]==v[0]\n    cross=cross_vectors(v,v1)\n    if cross[0]==0:\n        return v1[2]==v[2]\n    if cross[1]==0:\n        return v1[0]==v[0]\n    if cross[2]==0:\n        return v1[1]==v[1]\n    return cross[0]*v[0]+cross[1]*v[1]+cross[2]*v[2]\ndef is_perpendicular(v1,v2):\n    '''\n    Write a function to check whether two vectors are perpendicular.\n    '''\n    return v1[0]*v2[1]-v1[1]*v2[0]\ndef is_parallel(v1,v2):\n    '''\n    Write a function to check whether two vectors are parallel.\n    '''\n    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2]\ndef is_zero(v):\n    '''\n    Write a function to check whether a vector is zero.\n    '''\n    return v[0]==0 and v[1]==0 and v[2]==0\ndef is_same_point(v1,v2):\n    '''\n    Write a function to check whether two points are the same point.\n    '''\n    return v1[0]==v2[0] and v1[1]==v2[1] and v1[2]==v2[2]\ndef is_between_points(v,v1,v2):\n    '''\n    Write a function to check whether a point is between two points.\n    '''\n    if v1[0]<v[0]<v2[0] or v1[0]>v[0]>v2[0]:\n        return True\n    if v1[1]<v[1]<v2[1] or v1[1]>v[1]>v2[1]:\n        return True\n    if v1[2]<v[2]<v2[2] or v1[2]>v[2]>v2[2]:\n        return True\n    return False\ndef is_zero(v):\n    '''\n    Write a function to check whether a vector is zero.\n    '''\n    return v[0]==0 and v[1]==0 and v[2]==0\ndef transform_coordinate(coordinate, transform):\n    '''\n    Write a function to transform a coordinate according to a transform.\n    '''\n    if transform[0]==0:\n        return coordinate[1]\n    if transform[1]==0:\n        return coordinate[0]\n",
        "num_ids": 36
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #x = math.sqrt(math.pow(x,2)+math.pow(y,2))\n    #y = math.atan2(y,x)\n    return [x,y]\n",
        "num_ids": 52
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n    # Your code here\n",
        "num_ids": 11
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 31
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if newList is None:\n        return\n    size = len(newList)\n    if size < 2:\n        return\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n",
        "num_ids": 72
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1]+newList[1:-1]+newList[0]\ndef shuffle_List(newList): \n    '''\n    Write a python function to shuffle an input list in-place.\n    '''\n    newList[:] = newList[::-1]\n    return newList\ndef duplicate_List(newList): \n    '''\n    Write a python function to return a new list that contains all the elements of the original list \n    and appends duplicate elements in the new list in the order they appear in the original list. \n    For example if the original list is [1,2,3,4,5] then the new list should be [1,1,2,2,3,3,4,4,5,5]\n    '''\n    newList = []\n    for num in newList:\n        if num not in newList:\n            newList.append(num)\n    newList.append(num)\n    return newList\ndef remove_duplicate_List(newList):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    newList = []\n    for num in newList:\n        if num not in newList:\n            newList.append(num)\n    return newList\ndef insert_List(newList, pos, value): \n    '''\n    Write a python function to insert an element at the given position in the given list. \n    For example if the original list is [1,2,3,4] and pos is 2 then the new list should be [1,2,3,4,5]\n    and the given value should be 5.\n    '''\n    newList[pos:pos] = [value]\n    return newList\ndef remove_List(newList, val): \n    '''\n    Write a python function to remove an element from a list.\n    For example if the original list is [1,2,3,4,5] and val is 3 then the new list should be [1,2,4,5]\n    '''\n    for i in range(len(newList)):\n        if newList[i] == val:\n            newList.pop(i)\n    return newList\ndef count_List(newList, val): \n    '''\n    Write a python function to return the number of occurrences of a given element in a list.\n    '''\n    return newList.count(val)\ndef find_List(newList, val): \n    '''\n    Write a python function to return the index of a given element in a list.\n    '''\n    return newList.index(val)\ndef sort_List(newList): \n    '''\n    Write a python function to sort a list in ascending order.\n    For example if the original list is [5,3,4,1,2] then the new list should be [1,2,3,4,5]\n    '''\n    newList.sort()\n    return newList\ndef reverse_List(newList): \n    '''\n    Write a python function to reverse a list.\n    For example if the original list is [5,3,4,1,2] then the new list should be [2,1,4,3,5]\n    '''\n    newList[:] = newList[::-1]\n    return newList\ndef all_List(newList, val): \n    '''\n    Write a python function to return True if all elements of the list are of the same type. \n    For example if the original list is [1,2,3,4] then the new list should be [1,2,3,4] and the \n    returned value should be True.\n    '''\n    return len(set(newList)) == 1\ndef any_List(newList, val): \n    '''\n    Write a python function to return True if any element of the list is of the given type. \n    For example if the original list is [1,2,3,4] then the new list should be [1,2,3,4] and the \n    returned value should be True.\n    '''\n    return len(set(newList))!= 1\ndef length_List(newList): \n    '''\n    Write a python function to return the length of the list.\n    For example if the original list is [1,2,3,4,5,6,7] then the new list should be [1,2,3,4,5,6,7] \n    and the length of the new list should be 8.\n    '''\n    return len(newList)\ndef max_List(newList): \n    '''\n    Write a python function to return the maximum element of a list.\n    For example if the original list is [1,2,3,4,5,6,7] then the new list should be [1,2,3,4,5,6,7] \n    and the returned value should be 7.\n    '''\n    return max(newList)\ndef min_List(newList): \n    '''\n    Write a python function to return the minimum element of a list.\n    For example if the original list is [1,2,3,4,5,6,7] then the new list should be [1,2,3,4,5,6,7] \n    and the returned value should be 1.\n    '''\n    return min(newList)\ndef sum_List(newList): \n    '''\n    Write a python function to return the sum of all the elements of the list.\n    For example if the original list is [1,2,3,4,5,6,7] then the new list should be [1,2,3,4,5,6,7] \n    and the returned value should be 28.\n    '''\n    return sum(newList)\ndef slice_List(newList, start, end): \n    '''\n    Write a python function to return a slice of the list from the start to the end position.\n    For example if the original list is [1,2,3,4,5,6,7] then the new list should be [2,3,4,5,6,7] \n    and the returned value should be [2,3,4,5,6,7]\n    '''\n    return newList[start:end]\ndef merge_List(newList1, newList2): \n    '''\n    Write a python function to merge two lists.\n    For example if the original list is [1,2,3,4] and the new list is [5,6,7] then the new list should \n    be [1,2,3,4,5,6,7] and the returned value should be True.\n    '''\n    newList1.extend(newList2)\n    return newList1\ndef sort_List(newList): \n    '''\n    Write a python function to sort a list in ascending order.\n    For example if the original list is [5,3,4,1,2] then the new list should be [1,2,3,4,5] and the \n    returned value should be True.\n    '''\n    return newList.sort()\ndef copy_List(newList): \n    '''\n    Write a python function to return a copy of the list.\n    '''\n    return newList[:]\ndef reverse_List(newList): \n    '''\n    Write a python function to reverse a list in-place.\n    For example if the original list is [5,3,4,1,2] then the new list should be [2,1,4,3,5]\n    '''\n    newList[:] = newList[::-1]\n    return newList\ndef print_List(newList): \n    '''\n    Write a python function to print a list.\n    '''\n    print newList\n    return newList\ndef append_List(newList, val): \n    '''\n    Write a python function to append a value at the end of a list.\n    For example if the original list is [1,2,3,4] and the given value is 5 then the new list should be [1,2,3,4,5]\n    '''\n    newList.append(val)\n    return newList\ndef insert_List(newList, pos, val): \n    '''\n    Write a python function to insert a value at the given position in a list.\n    For example if the original list is [1,2,3,4] and pos is 1 then th",
        "num_ids": 43
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1] + newList[1:-1] + newList[0]\n",
        "num_ids": 25
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(min(k,n-k)):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n    \n",
        "num_ids": 60
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    for i in range(1,k+1):\n        c = c * (n-i+1)/i\n    return c\n",
        "num_ids": 38
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # This function computes the binomial coefficients.\n    # This is a recursive function that depends on the value of\n    #      n-1 < k <= n\n    # This means that we will always have n < k <= n.\n    # NOTE: We use 0 based indexing\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k))\n",
        "num_ids": 118
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1,k+1): \n        result = result * (n-i+1) // i \n    return result \n",
        "num_ids": 42
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "num_ids": 53
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = math.factorial(n) / (math.factorial(k) * math.factorial(n-k))\n    return binomial_coeff\n",
        "num_ids": 44
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(min(k, n-k)):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binom = [0 for i in range(k+1)] \n    binom[0] = 1\n    for i in range(1, n+1): \n        j = min(i, k)\n        while j>0: \n            binom[j] = binom[j] + binom[j-1] \n            j -= 1\n    return binom[k] \n",
        "num_ids": 96
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==k:\n        return 1\n    else:\n        return (n-k+1)*binomial_Coeff(n,k-1)\n",
        "num_ids": 40
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    res = re.sub(r'\\.0+$','',ip)\n    return res\n",
        "num_ids": 24
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\.0*)', '', ip)\n",
        "num_ids": 20
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('\\.[0-9]+','.0',ip)\n    return ip\n",
        "num_ids": 26
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip) is not None:\n        s=ip.split('.')\n        if s[0] == '0':\n            s.pop(0)\n            newip='.'.join(s)\n            return newip\n        else:\n            return ip\n    else:\n        return None\ndef splitIP(ip):\n    '''\n    Write a function to split an ip address into its component.\n    '''\n    if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip) is not None:\n        ip_list=ip.split('.')\n        return [int(i) for i in ip_list]\n    else:\n        return None\ndef to_dotted_ip(ip_list):\n    '''\n    Write a function to convert an ip address to its dotted notation.\n    '''\n    if len(ip_list) == 4:\n        return '%d.%d.%d.%d' % (ip_list[0], ip_list[1], ip_list[2], ip_list[3])\n    else:\n        return None\ndef is_valid_ip(ip):\n    '''\n    Write a function to check whether a string is a valid ip address or not.\n    '''\n    if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip) is not None:\n        return True\n    else:\n        return False\ndef calculate_ip_subnet_mask(ip_list):\n    '''\n    Write a function to calculate the subnet mask from an ip address.\n    '''\n    if len(ip_list) == 4:\n        return [255-int(i) for i in ip_list]\n    else:\n        return None\ndef calculate_ip_host_mask(ip_list):\n    '''\n    Write a function to calculate the host mask from an ip address.\n    '''\n    if len(ip_list) == 4:\n        ip_list[0] = int(ip_list[0]) & int(ip_list[1])\n        ip_list[1] = int(ip_list[2]) & int(ip_list[3])\n        ip_list[2] = int(ip_list[0]) & int(ip_list[1])\n        ip_list[3] = int(ip_list[2]) & int(ip_list[3])\n        return [255-int(i) for i in ip_list]\n    else:\n        return None\ndef is_valid_host_mask(mask):\n    '''\n    Write a function to check whether a string is a valid host mask or not.\n    '''\n    if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', mask) is not None:\n        return True\n    else:\n        return False\ndef host_to_dotted_ip(host_list):\n    '''\n    Write a function to convert a host to its dotted ip address.\n    '''\n    if len(host_list) == 4:\n        return '%d.%d.%d.%d' % (host_list[0], host_list[1], host_list[2], host_list[3])\n    else:\n        return None\ndef network_to_dotted_ip(net_list):\n    '''\n    Write a function to convert a network to its dotted ip address.\n    '''\n    if len(net_list) == 4:\n        return '%d.%d.%d.%d' % (net_list[0], net_list[1], net_list[2], net_list[3])\n    else:\n        return None\ndef subnet_to_dotted_ip(subnet_list):\n    '''\n    Write a function to convert a subnet to its dotted ip address.\n    '''\n    if len(subnet_list) == 4:\n        return '%d.%d.%d.%d' % (subnet_list[0], subnet_list[1], subnet_list[2], subnet_list[3])\n    else:\n        return None\ndef network_mask_to_dotted_ip(net_mask):\n    '''\n    Write a function to convert a network mask to its dotted ip address.\n    '''\n    if is_valid_ip(net_mask):\n        ip_list=splitIP(net_mask)\n        if ip_list is not None:\n            return network_to_dotted_ip(ip_list)\n        else:\n            return None\n    else:\n        return None\ndef host_mask_to_dotted_ip(host_mask):\n    '''\n    Write a function to convert a host mask to its dotted ip address.\n    '''\n    if is_valid_ip(host_mask):\n        ip_list=splitIP(host_mask)\n        if ip_list is not None:\n            return host_to_dotted_ip(ip_list)\n        else:\n            return None\n    else:\n        return None\ndef network_mask_to_subnet(net_mask):\n    '''\n    Write a function to convert a network mask to its subnet.\n    '''\n    if is_valid_ip(net_mask):\n        ip_list=splitIP(net_mask)\n        if ip_list is not None:\n            return network_to_subnet(ip_list)\n        else:\n            return None\n    else:\n        return None\ndef host_mask_to_subnet(host_mask):\n    '''\n    Write a function to convert a host mask to its subnet.\n    '''\n    if is_valid_ip(host_mask):\n        ip_list=splitIP(host_mask)\n        if ip_list is not None:\n            return host_to_subnet(ip_list)\n        else:\n            return None\n    else:\n        return None\ndef subnet_to_network(subnet_list):\n    '''\n    Write a function to convert a subnet to its network.\n    '''\n    if len(subnet_list) == 4:\n        ip_list=subnet_to_dotted_ip(subnet_list)\n        if ip_list is not None:\n            return to_dotted_ip(splitIP(ip_list))\n        else:\n            return None\n    else:\n        return None\ndef host_to_network(host_list):\n    '''\n    Write a function to convert a host to its network.\n    '''\n    if len(host_list) == 4:\n        ip_list=host_to_dotted_ip(host_list)\n        if ip_list is not None:\n            return to_dotted_ip(splitIP(ip_list))\n        else:\n            return None\n    else:\n        return None\ndef network_to_host(net_list):\n    '''\n    Write a function to convert a network to its host.\n    '''\n    if len(net_list) == 4:\n        ip_list=network_to_dotted_ip(net_list)\n        if ip_list is not None:\n            return to_dotted_ip(splitIP(ip_list))\n        else:\n            return None\n    else:\n        return None\ndef network_to_subnet(net_list):\n    '''\n    Write a function to convert a network to its subnet.\n    '''\n    if len(net_list) == 4:\n        ip_list=network_to_dotted_ip(net_list)\n        if ip_list is not None:\n            return to_dotted_ip(splitIP(ip_list))\n        else:\n            return None\n    else:\n        return None\ndef is_valid_subnet(subnet):\n    '''\n    Write a function to check whether a string is a valid subnet mask or not.\n    '''\n    if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3",
        "num_ids": 33
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.lstrip('0')\n    return ip\ndef remove_duplicates(mylist):\n    '''\n    Write a function that removes duplicates from a list\n    '''\n    return list(set(mylist))\n",
        "num_ids": 12
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    s = ip.split('.')\n    return '.'.join([s[0],s[1],s[2],s[3].lstrip('0')])\n",
        "num_ids": 42
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'0*\\d{1,3}')\n    ip = pattern.sub('\\d{1,3}',ip)\n    return ip\ndef reverse_ip(ip):\n    '''\n    Write a function to reverse an ip address\n    '''\n    ip = ip.split('.')\n    ip.reverse()\n    ip = '.'.join(ip)\n    return ip\ndef get_ip(s):\n    '''\n    Write a function to extract ip address from a string.\n    '''\n    pattern = re.compile(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}')\n    s = pattern.findall(s)\n    return s\ndef get_ip_list(ip):\n    '''\n    Write a function to extract ip address from a string.\n    '''\n    pattern = re.compile(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}')\n    s = pattern.findall(ip)\n    return s\ndef is_valid_ip(ip):\n    '''\n    Write a function to check if a given string is a valid ip address.\n    '''\n    pattern = re.compile(r'^(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}([01]?\\d\\d?|2[0-4]\\d|25[0-5])$')\n    ip = pattern.findall(ip)\n    return ip\ndef is_valid_ip_list(ip_list):\n    '''\n    Write a function to check if a given list of ip address are valid\n    '''\n    if not isinstance(ip_list, list):\n        return False\n    else:\n        for item in ip_list:\n            if not is_valid_ip(item):\n                return False\n        return True\ndef get_net_mask(ip_str):\n    '''\n    Write a function to extract network mask from a given ip string\n    '''\n    ip_str = removezero_ip(ip_str)\n    ip_list = get_ip_list(ip_str)\n    for item in ip_list:\n        if '255' not in item:\n            return item\ndef get_host_ip_list(ip_str):\n    '''\n    Write a function to extract host ip address from a given ip string\n    '''\n    ip_str = removezero_ip(ip_str)\n    ip_list = get_ip_list(ip_str)\n    host_ip_list = []\n    for item in ip_list:\n        if '255' not in item:\n            host_ip_list.append(item)\n    return host_ip_list\ndef get_net_ip_list(ip_str):\n    '''\n    Write a function to extract network ip address from a given ip string\n    '''\n    ip_str = removezero_ip(ip_str)\n    ip_list = get_ip_list(ip_str)\n    net_ip_list = []\n    for item in ip_list:\n        if '255' in item:\n            net_ip_list.append(item)\n    return net_ip_list\ndef get_subnet_mask(ip_str):\n    '''\n    Write a function to extract subnet mask from a given ip string\n    '''\n    ip_str = removezero_ip(ip_str)\n    ip_list = get_ip_list(ip_str)\n    for item in ip_list:\n        if '255' in item:\n            return item\ndef subnet_to_cidr(net, sub):\n    '''\n    Write a function to convert a subnet mask to cidr\n    '''\n    n = net.split('.')\n    s = sub.split('.')\n    cidr = int(s[3]) - int(s[2])\n    net = int(n[3]) - int(s[2])\n    if net > 0:\n        cidr += (128-net)\n    return cidr\ndef convert_ip_to_int(ip_str):\n    '''\n    Write a function to convert a ip string to integer\n    '''\n    ip = ip_str.split('.')\n    ip_int = []\n    for item in ip:\n        ip_int.append(int(item))\n    return ip_int\ndef convert_ip_to_str(ip_int):\n    '''\n    Write a function to convert a ip integer to string\n    '''\n    ip_str = []\n    for item in ip_int:\n        ip_str.append(str(item))\n    ip_str = '.'.join(ip_str)\n    return ip_str\ndef get_subnet_ip_list(ip_str):\n    '''\n    Write a function to extract subnet ip address from a given ip string\n    '''\n    ip_str = removezero_ip(ip_str)\n    ip_int = convert_ip_to_int(ip_str)\n    sub_ip_list = []\n    for item in ip_int:\n        if item > 0 and item < 128:\n            sub_ip_list.append(item)\n    for item in sub_ip_list:\n        if item > 32:\n            sub_ip_list.remove(item)\n    return sub_ip_list\ndef get_subnet_mask(ip_str):\n    '''\n    Write a function to extract subnet mask from a given ip string\n    '''\n    ip_str = removezero_ip(ip_str)\n    ip_int = convert_ip_to_int(ip_str)\n    sub_mask_list = []\n    for item in ip_int:\n        if item > 0 and item < 128:\n            sub_mask_list.append(item)\n    for item in sub_mask_list:\n        if item > 32:\n            sub_mask_list.remove(item)\n    sub_mask = convert_ip_to_str(sub_mask_list)\n    return sub_mask\ndef get_broadcast_ip(ip_str, sub):\n    '''\n    Write a function to extract broadcast ip address from a given ip string and subnet mask\n    '''\n    sub = removezero_ip(sub)\n    ip_str = removezero_ip(ip_str)\n    sub_ip_list = get_subnet_ip_list(ip_str)\n    sub_mask = get_subnet_mask(ip_str)\n    mask = subnet_to_cidr(sub_ip_list[0], sub_mask)\n    sub_mask = removezero_ip(sub_mask)\n    broadcast_ip = []\n    for item in sub_ip_list:\n        if item > 0 and item < 128:\n            broadcast_ip.append(item + mask)\n    broadcast_ip = convert_ip_to_str(broadcast_ip)\n    return broadcast_ip\ndef get_network_ip(ip_str, sub):\n    '''\n    Write a function to extract network ip address from a given ip string and subnet mask\n    '''\n    sub = removezero_ip(sub)\n    ip_str = removezero_ip(ip_str)\n    sub_ip_list = get_subnet_ip_list(ip_str)\n    sub_mask = get_subnet_mask(ip_str)\n    mask = subnet_to_cidr(sub_ip_list[0], sub_mask)\n    sub_mask = removezero_ip(sub_mask)\n    network_ip = []\n    for item in sub_ip_list:\n        if item > 0 and item < 128:\n            network_ip.append(item - mask)\n    network_ip = convert_ip_to_str(network_ip)\n    return network_ip\ndef get_first_ip(ip_str, sub):\n    '''\n    Write a function to extract first ip address from a given ip string and subnet mask\n    '''\n    sub = removezero_ip(sub)\n    ip_str = removezero_ip(ip_str)\n    sub_ip_list = get_subnet_ip_list(ip_str)\n    sub_mask = get_subnet_mas",
        "num_ids": 60
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    result = re.sub('\\.0+$', '', ip)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match('^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$',ip):\n        return ip\n    return re.sub('^0*(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$','\\\\1.\\\\2.\\\\3.\\\\4',ip)\n",
        "num_ids": 112
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    result = []\n    for i in ip_list:\n        if i == '0':\n            i = ''\n        result.append(i)\n    return '.'.join(result)\n",
        "num_ids": 59
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = (list1[0] - list1[1])\n    return diff\n",
        "num_ids": 22
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = list1[1]\n    even_num = list1[0]\n    return even_num - odd_num\n",
        "num_ids": 34
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[-1])\n",
        "num_ids": 19
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        print(\"Not enough elements\")\n    else:\n        for i in list1:\n            if i % 2 == 0:\n                return i-list1[1]\n            else:\n                return i-list1[0]\n",
        "num_ids": 66
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    evens = []\n    odds = []\n    for number in list1:\n        if number % 2 == 0:\n            evens.append(number)\n        else:\n            odds.append(number)\n    return [abs(evens[0]-odds[0]), abs(evens[-1]-odds[-1])]\n",
        "num_ids": 84
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even, odd = 0, 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return abs(even - odd)\n",
        "num_ids": 51
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    list2=[]\n    for i in range(0,len(list1)):\n        if i%2==0:\n            list2.append(list1[i])\n    return list2[0]-list2[1]\n",
        "num_ids": 59
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    for i in range(0, len(list1)):\n        if list1[i]%2 == 0:\n            odd = list1[i]\n            break\n    return list1[0] - odd\n",
        "num_ids": 57
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    a = 0\n    b = 0\n    for i in list1:\n        if i % 2 == 0:\n            a += i\n        else:\n            b += i\n    return abs(a - b)\n",
        "num_ids": 52
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even - odd\n",
        "num_ids": 49
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return -1\n",
        "num_ids": 23
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n",
        "num_ids": 21
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i,j = 0,0\n    count = 0\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            elif str2[j] == '0':\n                j += 1\n            count += 1\n        i += 1\n        j += 1\n    return count\n",
        "num_ids": 103
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def countSwaps(s,d):\n        n = len(s)\n        counter = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                if s[i] > s[j]:\n                    counter += 1\n                    temp = s[i]\n                    s[i] = s[j]\n                    s[j] = temp\n        if counter == 0:\n            return (s == d)\n        return False\n",
        "num_ids": 111
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count+=1\n            str1 = str1[:i] + '0' + str1[i+1:]\n            str2 = str2[:i] + '1' + str2[i+1:]\n    return count\n",
        "num_ids": 90
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    char_arr1 = list(str1)\n    char_arr2 = list(str2)\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if char_arr1[i]!= char_arr2[i]:\n            temp = char_arr1[i]\n            char_arr1[i] = char_arr2[i]\n            char_arr2[i] = temp\n            count += 1\n    return count\n",
        "num_ids": 116
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return min_Swaps_helper(str1,str2,0)\n",
        "num_ids": 21
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            swaps += 1\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n    return swaps\n",
        "num_ids": 99
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c = 0\n    # store the position of the 1s in the two strings\n    s1 = []\n    s2 = []\n    for i in range(len(str1)) :\n        if str1[i] == '1' :\n            s1.append(i)\n    for i in range(len(str2)) :\n        if str2[i] == '1' :\n            s2.append(i)\n    # find the minimum swap\n    for i in range(len(s1)) :\n        if s1[i]!= s2[i] :\n            c += 1\n    return c\n",
        "num_ids": 148
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def num2bin(n) : \n        res = ''\n        while n : \n            res = str(n%2) + res\n            n = n//2\n        return res\n",
        "num_ids": 47
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sum_of_size = 0\n    for tuple_value in tuple_list:\n        sum_of_size += sys.getsizeof(tuple_value)\n    return sum_of_size\n",
        "num_ids": 49
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef sort_list_by_count(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a list of tuples in which the second element is sorted by the first element.\n    '''\n    return sorted(tuple_list, key=lambda t: t[1])\ndef remove_repetidos(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a list of tuples in which the second element is sorted by the first element.\n    '''\n    return list(set(tuple_list))\ndef remove_dict_repetidos(dict_list):\n    '''\n    Write a function that takes a list of dictionaries of (something, something_else) \n    and returns a list of dictionaries in which the second element is sorted by the first element.\n    '''\n    return list(dict.fromkeys(dict_list))\ndef list_to_dict(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:t[0] for t in tuple_list}\ndef list_to_dict_comp(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:t[0] for t in tuple_list}\ndef list_to_dict_comp_repetidos(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:t[0] for t in tuple_list}\ndef list_to_dict_nested(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:{t[0]:t[2]} for t in tuple_list}\ndef list_to_dict_nested_comp(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:{t[0]:t[2]} for t in tuple_list}\ndef list_to_dict_nested_repetidos(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:{t[0]:t[2]} for t in tuple_list}\ndef list_to_dict_nested_comp_repetidos(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:{t[0]:t[2]} for t in tuple_list}\ndef dict_to_list(dict_list):\n    '''\n    Write a function that takes a dictionary of (something, something_else) \n    and returns a list in which the second element is sorted by the first element.\n    '''\n    return [(k,v) for k,v in dict_list.items()]\ndef dict_to_list_comp(dict_list):\n    '''\n    Write a function that takes a dictionary of (something, something_else) \n    and returns a list in which the second element is sorted by the first element.\n    '''\n    return [(k,v) for k,v in dict_list.items()]\ndef dict_to_list_comp_repetidos(dict_list):\n    '''\n    Write a function that takes a dictionary of (something, something_else) \n    and returns a list in which the second element is sorted by the first element.\n    '''\n    return [(k,v) for k,v in dict_list.items()]\ndef dict_to_list_nested(dict_list):\n    '''\n    Write a function that takes a dictionary of (something, something_else) \n    and returns a list in which the second element is sorted by the first element.\n    '''\n    return [(k,{k2:v2}) for k,v in dict_list.items() for k2,v2 in v.items()]\ndef dict_to_list_nested_comp(dict_list):\n    '''\n    Write a function that takes a dictionary of (something, something_else) \n    and returns a list in which the second element is sorted by the first element.\n    '''\n    return [(k,{k2:v2}) for k,v in dict_list.items() for k2,v2 in v.items()]\ndef dict_to_list_nested_repetidos(dict_list):\n    '''\n    Write a function that takes a dictionary of (something, something_else) \n    and returns a list in which the second element is sorted by the first element.\n    '''\n    return [(k,{k2:v2}) for k,v in dict_list.items() for k2,v2 in v.items()]\ndef dict_to_list_nested_comp_repetidos(dict_list):\n    '''\n    Write a function that takes a dictionary of (something, something_else) \n    and returns a list in which the second element is sorted by the first element.\n    '''\n    return [(k,{k2:v2}) for k,v in dict_list.items() for k2,v2 in v.items()]\ndef dict_to_list_nested_comp_repetidos2(dict_list):\n    '''\n    Write a function that takes a dictionary of (something, something_else) \n    and returns a list in which the second element is sorted by the first element.\n    '''\n    return [(k,{k2:v2}) for k,v in dict_list.items() for k2,v2 in v.items()]\ndef list_to_dict_fromkeys(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:t[0] for t in tuple_list}\ndef list_to_dict_fromkeys_comp(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:t[0] for t in tuple_list}\ndef list_to_dict_fromkeys_comp_repetidos(tuple_list):\n    '''\n    Write a function that takes a list of tuples of (something, something_else) \n    and returns a dictionary in which the second element is sorted by the first element.\n    '''\n    return {t[1]:t[0] for t in tuple_list}\ndef set_to_list(set_list):\n    '''\n    Write a function that takes a set of strings and returns a list of strings sorted by the length of the string.\n    '''\n    return sorted(list(set_list), key=len)\ndef set_to_list_comp(set_list):\n    '''\n    Write a function that takes a set of strings and returns a list of strings sorted by the length of the string.\n    '''\n    return sorted(list(set_list), key=len)\ndef set_to_list_comp_repetidos(set_list):\n    '''\n    Write a function that takes a set of strings and returns a lis",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    size = 0\n    for element in list_list:\n        size += sys.getsizeof(element)\n    return size\ndef list_depth(list_list):\n    '''\n    Write a function to find the depth of the given list.\n    '''\n    depth = 0\n    for element in list_list:\n        if type(element) == list:\n            depth += 1\n    return depth\ndef list_depth_iterator(list_list):\n    '''\n    Write a function to find the depth of the given list by using iterator.\n    '''\n    depth = 0\n    for element in list_list:\n        try:\n            if type(element) == list:\n                depth += 1\n        except TypeError:\n            pass\n    return depth\ndef find_tuple(element, tuple_list):\n    '''\n    Write a function to find an element in a tuple.\n    '''\n    for x in tuple_list:\n        if element == x:\n            return True\n    return False\ndef find_list(element, list_list):\n    '''\n    Write a function to find an element in a list.\n    '''\n    for x in list_list:\n        if element == x:\n            return True\n    return False\ndef find_list_index(element, list_list):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index = 0\n    for x in list_list:\n        if element == x:\n            return index\n        index += 1\ndef find_tuple_index(element, tuple_list):\n    '''\n    Write a function to find the index of an element in a tuple.\n    '''\n    index = 0\n    for x in tuple_list:\n        if element == x:\n            return index\n        index += 1\ndef tuple_count(element, tuple_list):\n    '''\n    Write a function to count the number of occurrences of an element in a tuple.\n    '''\n    count = 0\n    for x in tuple_list:\n        if element == x:\n            count += 1\n    return count\ndef tuple_max(tuple_list):\n    '''\n    Write a function to find the maximum value in a tuple.\n    '''\n    max = tuple_list[0]\n    for element in tuple_list:\n        if element > max:\n            max = element\n    return max\ndef tuple_min(tuple_list):\n    '''\n    Write a function to find the minimum value in a tuple.\n    '''\n    min = tuple_list[0]\n    for element in tuple_list:\n        if element < min:\n            min = element\n    return min\ndef tuple_max_index(tuple_list):\n    '''\n    Write a function to find the index of the maximum value in a tuple.\n    '''\n    index = 0\n    max = tuple_list[0]\n    for element in tuple_list:\n        if element > max:\n            max = element\n            index = tuple_list.index(element)\n    return index\ndef tuple_min_index(tuple_list):\n    '''\n    Write a function to find the index of the minimum value in a tuple.\n    '''\n    index = 0\n    min = tuple_list[0]\n    for element in tuple_list:\n        if element < min:\n            min = element\n            index = tuple_list.index(element)\n    return index\ndef tuple_append(tuple_list, element):\n    '''\n    Write a function to append an element to a tuple.\n    '''\n    tuple_list += (element,)\n    return tuple_list\ndef tuple_add(tuple_list, element):\n    '''\n    Write a function to add an element to a tuple.\n    '''\n    tuple_list = tuple_list + (element,)\n    return tuple_list\ndef tuple_remove(tuple_list, element):\n    '''\n    Write a function to remove an element from a tuple.\n    '''\n    if element in tuple_list:\n        tuple_list = tuple_list.remove(element)\n    return tuple_list\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple_list = tuple_list[::-1]\n    return tuple_list\ndef tuple_insert(tuple_list, element, index):\n    '''\n    Write a function to insert an element to a tuple at a given index.\n    '''\n    tuple_list = tuple_list[0:index] + (element,) + tuple_list[index:]\n    return tuple_list\ndef tuple_pop(tuple_list, index):\n    '''\n    Write a function to pop an element from a tuple at a given index.\n    '''\n    tuple_list = tuple_list[0:index] + tuple_list[index + 1:]\n    return tuple_list\ndef tuple_remove_all(tuple_list, element):\n    '''\n    Write a function to remove all occurrences of an element from a tuple.\n    '''\n    while element in tuple_list:\n        tuple_list.remove(element)\n    return tuple_list\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple_list = tuple_list[:]\n    tuple_list.sort()\n    return tuple_list\ndef tuple_append_sort(tuple_list, element):\n    '''\n    Write a function to append an element to a tuple and sort the tuple.\n    '''\n    tuple_list = tuple_list + (element,)\n    tuple_list.sort()\n    return tuple_list\ndef tuple_count_sort(tuple_list, element):\n    '''\n    Write a function to count the number of occurrences of an element in a tuple.\n    '''\n    count = 0\n    for element in tuple_list:\n        if element == element:\n            count += 1\n    return count\ndef tuple_index_sort(tuple_list, element):\n    '''\n    Write a function to find the index of an element in a tuple.\n    '''\n    index = 0\n    for element in tuple_list:\n        if element == element:\n            return index\n        index += 1\ndef tuple_reverse_sort(tuple_list):\n    '''\n    Write a function to reverse a tuple and sort the tuple.\n    '''\n    tuple_list = tuple_list[:]\n    tuple_list.reverse()\n    tuple_list.sort()\n    return tuple_list\ndef tuple_mixed_sort(tuple_list):\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple_list = tuple_list[:]\n    tuple_list.sort()\n    return tuple_list\ndef tuple_index(tuple_list, element):\n    '''\n    Write a function to find the index of an element in a tuple.\n    '''\n    index = 0\n    for element in tuple_list:\n        if element == element:\n            return index\n        index += 1\ndef tuple_slice(tuple_list):\n    '''\n    Write a function to slice a tuple.\n    '''\n    tuple_list = tuple_list[2:-2]\n    return tuple_list\ndef tuple_slice_step(tuple_list):\n    '''\n    Write a function to slice a tuple by step.\n    '''\n    tuple_list = tuple_list[0:5:2]\n    return tuple_list\ndef tuple_slice_reverse(tuple_list):\n    '''\n    Write a function to slice a tuple in reverse.\n    '''\n    tuple_list = tuple_list[::-1]\n    return tuple_list\ndef tuple_slice_all(tuple_list):\n    '''\n    Write a function to slice a tuple so that it contains all elements.\n    '''\n    tuple_list = tuple_list[:]\n    return tuple_list\ndef tuple_slice_all_except_last(tuple_list):\n    '''\n    Write a function to slice a tuple so tha",
        "num_ids": 12
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print (sys.getsizeof(tuple_list))\n    \ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    print (sys.getsizeof(list_list))\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef check_tuple_list(tuple_list):\n    '''\n    Write a function to check whether the given tuple is empty or not.\n    '''\n    return tuple_list\ndef test_tuple_size():\n    assert(tuple_size((1,2,3)) == 28)\n    assert(tuple_size((1,2,3,4,5)) == 36)\n    assert(tuple_size(()) == 28)\n    assert(tuple_size((1,2,3,4,5)) == 36)\n    assert(tuple_size([]) == 28)\n    assert(tuple_size((1,2,3,4,5)) == 36)\n    assert(tuple_size(tuple_size((1,2,3,4,5))))\n    assert(tuple_size((1,2,3,4,5)) == 36)\n    assert(tuple_size(tuple_size((1,2,3,4,5))) == 36)\n    assert(tuple_size(tuple_size(tuple_size((1,2,3,4,5)))) == 36)\ndef test_check_tuple_list():\n    assert(check_tuple_list((1,2,3,4,5)) == False)\n    assert(check_tuple_list((1,2,3,4,5,6)) == True)\n    assert(check_tuple_list((1,2,3)) == False)\n    assert(check_tuple_list((1,2)) == False)\n    assert(check_tuple_list((1,2,3,4,5)) == True)\n    assert(check_tuple_list(()) == False)\n    assert(check_tuple_list((1,2,3,4,5,6)) == True)\n    assert(check_tuple_list((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751",
        "num_ids": 1958
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # counter = 0\n    # for item in tuple_list:\n    #     counter += sys.getsizeof(item)\n    # return counter\n    return sum([sys.getsizeof(item) for item in tuple_list])\n",
        "num_ids": 57
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # my_tuple = ('abcd', 786, 2.23, 'john', 70.2)\n    # my_tuple = ('abcd', )\n    # my_tuple = ()\n    # my_tuple = (7,)\n    # print(sys.getsizeof(my_tuple))\n    # my_tuple = (7, )\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    # print(sys.getsizeof(my_tuple))\n    ",
        "num_ids": 2010
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth_helper(arr1, arr2, 0, len(arr1) - 1, len(arr2) - 1, k)\n",
        "num_ids": 39
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n    elif len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n",
        "num_ids": 69
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    assert k >= 1, \"K should be at least 1\"\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if arr1[0] < arr2[0]:\n        return find_kth(arr1[1:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[1:], k-1)\n",
        "num_ids": 131
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    len1, len2 = len(arr1), len(arr2)\n",
        "num_ids": 27
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n",
        "num_ids": 82
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while True:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        elif j == len(arr2):\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        if k > 1:\n            if arr1[i] > arr2[j]:\n                j += 1\n                k -= 1\n            else:\n                i += 1\n                k -= 1\n",
        "num_ids": 130
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[0] > arr2[0]:\n        arr1, arr2 = arr2, arr1\n    if len(arr1) <= len(arr2):\n        l = len(arr1)\n    else:\n        l = len(arr2)\n    for i in range(l):\n        if i >= k:\n            return arr1[i-k]\n    for i in range(l):\n        if i >= k:\n            return arr2[i-k]\n    return None\n",
        "num_ids": 121
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n",
        "num_ids": 32
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return arr1[i - k] if i > k else arr2[j - k]\n",
        "num_ids": 104
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n",
        "num_ids": 20
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s=str(number)\n    l=len(s)\n    a=s[0:l]\n    b=int(a)**l\n    if b==int(number):\n        print number,'is an armstrong number'\n    else:\n        print number,'is not an armstrong number'\n",
        "num_ids": 74
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    temp_sum = 0\n    while temp > 0:\n        temp_sum += temp % 10\n        temp /= 10\n    if temp_sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit = []\n    n = number\n    length = len(str(number))\n    for i in range(length):\n        digit.append(n % 10)\n        n = n / 10\n    total = 0\n    for i in digit:\n        total = total + i ** length\n    if total == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 88
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_of_digits = len(str(number))\n    #sum_of_digits = sum(int(digit)**number_of_digits for digit in str(number))\n    sum_of_digits = sum(digit**number_of_digits for digit in map(int, str(number)))\n    return number == sum_of_digits\n",
        "num_ids": 88
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    digits = len(str(n))\n    sum = 0\n    while(n > 0):\n        digit = n%10\n        sum += digit**digits\n        n //= 10\n    if sum == number:\n        print(\"The number is armstrong\")\n    else:\n        print(\"The number isn't armstrong\")\n",
        "num_ids": 84
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number\n",
        "num_ids": 45
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number))==1:\n        return 1\n    digits = [int(digit) for digit in str(number)]\n    n = len(digits)\n    return sum(digits[i]**n for i in range(0,n)) == number\n",
        "num_ids": 67
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_as_string = str(number)\n    length = len(number_as_string)\n    sum = 0\n    for i in range(length):\n        sum += int(number_as_string[i])**length\n    return True if sum == number else False\n",
        "num_ids": 66
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # If the given number is zero\n    if number == 0:\n        return True\n    # Else if the given number is negative\n    elif number < 0:\n        return False\n    # Else\n    else:\n        # Get the sum of the cube of each digit\n        sum_of_cube_of_digits = 0\n        temp_number = number\n        while temp_number:\n            # Get the cube of the digit\n            cube_of_digit = temp_number % 10\n            # Add the cube of the digit to the sum\n            sum_of_cube_of_digits += cube_of_digit ** 3\n            # Reduce the number by removing the first digit\n            temp_number //= 10\n        # Return true if the sum of the cube of each digit is the same as the given number\n        return sum_of_cube_of_digits == number\n",
        "num_ids": 201
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    num = 1\n    while num <= number:\n        total += num\n        num += 1\n    return total, total/number\n",
        "num_ids": 37
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(number+1)), (sum(range(number+1)) / (number+1))\n",
        "num_ids": 28
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s=0\n    for i in range(1,number+1):\n        s+=i\n    return s/number\n",
        "num_ids": 31
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum, count = 0, 0\n    for i in range(1, number+1):\n        sum = sum + i\n        count = count + 1\n    return sum, float(sum)/count\n",
        "num_ids": 48
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return (number * (number + 1)) // 2\n",
        "num_ids": 15
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        raise TypeError('Number must be an integer')\n    elif number < 0:\n        raise ValueError('Number cannot be a negative number')\n    return sum(range(1, number+1)) / number\n",
        "num_ids": 60
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total, count = 0, 0\n    while count < number:\n        total += count\n        count += 1\n    average = total / number\n    return average\n",
        "num_ids": 39
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    average = sum(number)/len(number)\n    total = 0\n    for i in number:\n        total += i\n    return total, average\n",
        "num_ids": 39
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, number):\n        sum += i\n    return sum, sum / number\n",
        "num_ids": 31
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    if number > 0:\n        for i in range(1, number + 1):\n            result += i\n        return result / number\n    else:\n        print(\"Number must be positive.\")\n",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1 : \n        return False \n    for i in range(2, n) : \n        if n % i == 0 : \n            return False \n    return True\n",
        "num_ids": 47
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0: \n        return True \n    return False \n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!= 0: \n        return True \n    return False \n    \ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n % i == 0 : \n            sum += i\n        i += 1 \n    if sum == n : \n        return True \n    return False\n    \ndef is_Abundant(n) : \n    '''\n    Write a python function to check whether the given number is an abundant number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n % i == 0 : \n            sum += i\n        i += 1 \n    if sum > n : \n        return True \n    return False \n    \ndef is_Deficient(n) : \n    '''\n    Write a python function to check whether the given number is a deficient number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n % i == 0 : \n            sum += i\n        i += 1 \n    if sum < n : \n        return True \n    return False \n    \ndef is_Harshad(n) : \n    '''\n    Write a python function to check whether the given number is a harshad number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n % i == 0 : \n            sum += i\n        i += 1 \n    if sum % n == 0 : \n        return True \n    return False \n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n%2 == 0 : \n        return False \n    i = 3\n    while i*i <= n :\n        if n%i == 0 :\n            return False \n        i += 2 \n    return True \n    \ndef is_Composite(n) : \n    '''\n    Write a python function to check whether the given number is a composite number or not.\n    '''\n    if n%2 == 0 : \n        return False \n    i = 3\n    while i*i <= n :\n        if n%i == 0 :\n            return True \n        i += 2 \n    return False \n    \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is a palindrome number or not.\n    '''\n    s = str(n)\n    n = len(s)\n    i = 0\n    j = n - 1\n    while i < j :\n        if s[i]!= s[j] :\n            return False\n        i += 1 \n        j -= 1 \n    return True \n    \ndef is_Factorial(n) : \n    '''\n    Write a python function to check whether the given number is a factorial number or not.\n    '''\n    fact = 1 \n    i = 1\n    while i <= n : \n        fact = fact * i \n        i += 1 \n    if n == fact : \n        return True \n    return False \n    \ndef is_Number(n) : \n    '''\n    Write a python function to check whether the given number is a number or not.\n    '''\n    if type(n) == int or type(n) == float : \n        return True \n    return False \n    \ndef is_Cube(n) : \n    '''\n    Write a python function to check whether the given number is a cube number or not.\n    '''\n    if is_Number(n) and n > 0 : \n        return is_Factorial(n*n*n)\n    return False \n    \ndef is_Square(n) : \n    '''\n    Write a python function to check whether the given number is a square number or not.\n    '''\n    if is_Number(n) and n > 0 : \n        return is_Factorial(n*n)\n    return False \n    \ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True \n    return False \n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!= 0 : \n        return True \n    return False \n    \ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n % i == 0 : \n            sum += i\n        i += 1 \n    if sum == n : \n        return True \n    return False \n    \ndef is_Abundant(n) : \n    '''\n    Write a python function to check whether the given number is an abundant number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n % i == 0 : \n            sum += i\n        i += 1 \n    if sum > n : \n        return True \n    return False \n    \ndef is_Deficient(n) : \n    '''\n    Write a python function to check whether the given number is a deficient number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n % i == 0 : \n            sum += i\n        i += 1 \n    if sum < n : \n        return True \n    return False \n    \ndef is_Harshad(n) : \n    '''\n    Write a python function to check whether the given number is a harshad number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n : \n        if n % i == 0 : \n            sum += i\n        i += 1 \n    if sum % n == 0 : \n        return True \n    return False \n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n%2 == 0 : \n        return False \n    i = 3\n    while i*i <= n :\n        if n%i == 0 :\n            return False \n        i += 2 \n    return True \n    \ndef is_Composite(n) : \n    '''\n    Write a python function to check whether the given number is a composite number or not.\n    '''\n    if n%2 == 0 : \n        return False \n    i = 3\n    while i*i <= n :\n        if n%i == 0 :\n            return True \n        i += 2 \n    return False \n    \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is a palindrome number or not.\n    '''\n    s = str(n)\n    n = len(s)\n    i = 0\n    j = n - 1\n    while i < j :\n        if s[i]!= s[j] :\n            return False\n        i += 1 \n        j -= 1 \n    return True \n    \ndef is_Factorial(n) : \n    '''\n    Write a python function to check whether the given number is a factorial number or not.\n    '''\n    fact = 1 \n    i = 1\n    while i <= n : \n        fact = fact * i \n        i += 1 \n    if n == fact : \n        return True \n    return False \n    \ndef is_Number(n) : \n    '''\n    Write a python function to check whether the given number is a number or not.\n    '''\n    if type(",
        "num_ids": 6
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0",
        "num_ids": 9
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0:\n        return True\n    else:\n        return False\n    \ndef is_Odd(n) :\n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if (n % 2)!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else :\n        return False\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1:\n        return True\n    else :\n        return False\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n%2 == 0:\n        return False\n    elif n%3 == 0:\n        return False\n    else:\n        return True\ndef is_Palindrome(str) : \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if str == str[::-1]:\n        return True\n    else :\n        return False\ndef palindrome_permutation(str) : \n    '''\n    Write a python function to check whether the given string is palindrome permutation or not.\n    '''\n    str = str.lower()\n    chars = {}\n    for char in str:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    #print(chars)\n    odd_count = 0\n    for char in chars.keys():\n        if chars[char]%2!= 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    else:\n        return True\ndef is_pandigital(n, digit) : \n    '''\n    Write a python function to check whether the given number is pandigital or not.\n    '''\n    temp = n\n    s = \"\"\n    while temp > 0:\n        s += str(temp%10)\n        temp //= 10\n    if len(s)!= digit:\n        return False\n    else:\n        return True\ndef is_Armstrong(n) : \n    '''\n    Write a python function to check whether the given number is armstrong number or not.\n    '''\n    temp = n\n    sum = 0\n    while temp > 0:\n        sum += pow(temp%10, 3)\n        temp //= 10\n    if n == sum:\n        return True\n    else:\n        return False\ndef is_Amicable(n) : \n    '''\n    Write a python function to check whether the given numbers are amicable or not.\n    '''\n    if n == sum_factors(n) and n!= sum_factors(sum_factors(n)) :\n        return True\n    else :\n        return False\ndef is_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is fibonacci number or not.\n    '''\n    if n < 3 :\n        return False\n    else:\n        a, b = 1, 1\n        while a<n:\n            a, b = b, a+b\n        if a == n:\n            return True\n        else:\n            return False\ndef is_Lattice_Pentagonal(n) : \n    '''\n    Write a python function to check whether the given number is lattice pentagonal or not.\n    '''\n    a, b, c = 2, 3, 4\n    while a < n:\n        while b < n:\n            while c < n:\n                if a+b+c == n:\n                    return True\n                c += 1\n            b += 1\n            c = b+1\n        a += 1\n        b = a+1\n        c = b+1\n    return False\ndef is_Magic_Number(n) : \n    '''\n    Write a python function to check whether the given number is a magic number or not.\n    '''\n    if is_Perfect(n) and is_Prime(n):\n        return True\n    else:\n        return False\ndef is_Lattice_Magic(n) : \n    '''\n    Write a python function to check whether the given number is lattice magic number or not.\n    '''\n    if is_Lattice_Pentagonal(n) and is_Magic_Number(n):\n        return True\n    else:\n        return False\ndef is_High_Power_Prime(n, p) : \n    '''\n    Write a python function to check whether the given number is high power prime or not.\n    '''\n    if is_Prime(n) and is_Prime(p) :\n        temp = n\n        while temp%p == 0:\n            temp //= p\n        if temp == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_Quadratic_Residue(n, a) : \n    '''\n    Write a python function to check whether the given number is quadratic residue or not.\n    '''\n    if is_Prime(n) and is_Prime(a) :\n        temp = n\n        while temp%a == 0:\n            temp //= a\n        if temp == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_Abundant_Number(n) : \n    '''\n    Write a python function to check whether the given number is abundant or not.\n    '''\n    temp = 0\n    for i in range(1, n):\n        if n%i == 0:\n            temp += i\n    if temp > n:\n        return True\n    else:\n        return False\ndef is_Deficient_Number(n) : \n    '''\n    Write a python function to check whether the given number is deficient or not.\n    '''\n    temp = 0\n    for i in range(1, n):\n        if n%i == 0:\n            temp += i\n    if temp < n:\n        return True\n    else:\n        return False\ndef is_Perfect_Number(n) : \n    '''\n    Write a python function to check whether the given number is perfect number or not.\n    '''\n    temp = 0\n    for i in range(1, n):\n        if n%i == 0:\n            temp += i\n    if temp == n:\n        return True\n    else:\n        return False\ndef is_Perfect_Triplet(n) : \n    '''\n    Write a python function to check whether the given numbers is perfect triplet or not.\n    '''\n    a, b, c = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i*i + j*j == k*k:\n                    a, b, c = i, j, k\n    if a*a + b*b == c*c:\n        return True\n    else:\n        return False\ndef is_Pentagonal_Number(n) : \n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    if is_Prime(n) and is_Prime(n+1) and is_Prime(n+2) and is_Prime(n+3) :\n        return True\n    else:\n        return False\ndef is_Hexagonal_Number(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    if is_Prime(n) and is_Prime(n+1) and is_Prime(n+2) :\n        return True\n    else:\n        return False\ndef is_Hexagonal_Number_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal number perfect or not.\n    '''\n    if is_Perfect_Number(n) and is_Hexagonal_Number(n) :\n        return True\n    else:\n        return False\ndef is_Hexagonal_Number_Abundant(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal number abundant or not.\n    '''\n    if is_Abundant_Number(n) and is_Hexagonal_Number(n) :\n        return True\n    else:\n        return False\ndef is_Hexagonal_Number_Deficient(n) : \n    '''\n    Write a python function to check whether the given number is he",
        "num_ids": 15
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!= 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 26
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    hash = {}\n    for char in str1:\n        if char not in hash:\n            hash[char] = 1\n        else:\n            return char\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 is None:\n        return None\n    if len(str1) <= 1:\n        return str1\n    \n    dic = {}\n    for i in range(0, len(str1)):\n        if str1[i] in dic:\n            return str1[i]\n        else:\n            dic[str1[i]] = 1\n    return None\n",
        "num_ids": 93
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            return i\n        else:\n            d[i] = 1\n    return None\n",
        "num_ids": 42
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if c in d:\n            return c\n        else:\n            d[c] = 1\n    return 'No repeating character found'\n",
        "num_ids": 47
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    characters = {}\n    for character in str1:\n        if character in characters:\n            return character\n        characters[character] = 1\n    return None\n",
        "num_ids": 40
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict.keys():\n            return char\n        else:\n            char_dict[char] = True\n",
        "num_ids": 46
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            return char\n",
        "num_ids": 45
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    chars_count = {}\n    for i in str1:\n        if i in chars_count:\n            return i\n        else:\n            chars_count[i] = 1\n    return 'Not Found'\n",
        "num_ids": 53
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if d.has_key(c):\n            return c\n        else:\n            d[c] = 1\n    return None\n",
        "num_ids": 46
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.replace(' ', '')\n    count = {}\n    for i in str1:\n        if i in count:\n            return i\n        else:\n            count[i] = 1\n    return None\n",
        "num_ids": 55
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = [False] * (n+1)\n    lucids = []\n    ludic_nums[1] = True\n    for i in range(2, n+1):\n        if i < 4:\n            ludic_nums[i] = True\n        if not lucids:\n            lucids.append(i)\n        else:\n            for j in lucids:\n                if i % j == 0:\n                    break\n                if j * j > i:\n                    ludic_nums[i] = True\n                    lucids.append(i)\n                    break\n    return lucids\n",
        "num_ids": 150
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = [1]\n    i = 1\n    while len(lucids) < n:\n        i += 1\n        s = str(i)\n        l = int(s[0]) + int(s[1]) + int(s[2])\n        if (i % 2) == 0 and l <= 9:\n            lucids.append(l)\n    return lucids\n",
        "num_ids": 95
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n) if sum(list(map(lambda x: int(x) ** 2, str(i)))) == i]\n",
        "num_ids": 38
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0:\n        return [0]\n    lucids = []\n    for i in xrange(n, 0, -1):\n        if (i ** 2) % 11 == 1:\n            lucids.append(i)\n    return lucids\n",
        "num_ids": 65
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_lst = []\n    lucid_num = 1\n    for num in xrange(1,n):\n        if is_ludic(num):\n            lucid_lst.append(num)\n    return lucid_lst\n",
        "num_ids": 63
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic_nums = [n]\n    l_1 = get_ludic(n-1)\n    l_2 = get_ludic(n-2)\n    for num in l_1:\n        for i in range(2, int(num/2) + 1):\n            if num % i == 0:\n                break\n        else:\n            ludic_nums.append(num)\n    for num in l_2:\n        for i in range(2, int(num/2) + 1):\n            if num % i == 0:\n                break\n        else:\n            ludic_nums.append(num)\n    return ludic_nums\n",
        "num_ids": 174
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    result = [1]\n    for i in range(2, n):\n        if is_ludic(i):\n            result.append(i)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    from math import sqrt\n    lucids = []\n    for i in range(1, int(sqrt(n)) + 1):\n        if i**2 == n:\n            lucids.append(i)\n        else:\n            if i**2 > n:\n                break\n            elif i**2 < n and (i + 1)**2 > n:\n                lucids.append(i)\n            else:\n                lucids += get_ludic(n - i**2)\n    return sorted(lucids)\n",
        "num_ids": 130
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(1,n) if x%2==0]\n",
        "num_ids": 23
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # use a backtracking approach\n    def get_ludics(num, out):\n        if num > n:\n            return\n        if num == n:\n            out.append(num)\n            return\n        get_ludics(num * 10 + 1, out)\n        get_ludics(num * 10 + 7, out)\n    out = []\n    get_ludics(0, out)\n    return out\n",
        "num_ids": 104
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #Turn the string into a list of strings\n    lst = s.split(' ')\n    #reverse the list\n    lst.reverse()\n    #Join the reversed list with spaces\n    s =''.join(lst)\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # loop through all the characters and when you find space, reverse the string from\n    # current index to previous index and keep on going till you reach the last\n    # character\n    s = s.strip()\n    res = ''\n    idx = len(s) - 1\n    while idx >= 0:\n        if s[idx]!='':\n            res += s[idx]\n        else:\n            res += s[idx+1:idx+1:-1]\n            res +=''\n        idx -= 1\n    return res[::-1]\n",
        "num_ids": 136
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s or len(s) == 0:\n        return ''\n",
        "num_ids": 19
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    else:\n        # reverse each word\n        res = []\n        words = s.split(' ')\n        for i in range(len(words)-1, -1, -1):\n            res.append(words[i])\n        return''.join(res)\n",
        "num_ids": 74
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    # print words\n    new_word = []\n    for i in words[::-1]:\n        new_word.append(i)\n    return \" \".join(new_word)\n",
        "num_ids": 54
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(words[::-1])\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    i, j = len(s) - 1, 0\n    while j < i:\n        s[j], s[i] = s[i], s[j]\n        j, i = j + 1, i - 1\n    return''.join(s)\n",
        "num_ids": 73
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 0:\n        raise ValueError('Inputs should be greater than zero')\n    if num == 1:\n        return False\n    elif num % 2 == 0:\n        return num == 2\n    elif num % 3 == 0:\n        return num == 3\n    i = 5\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 102
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is a prime number\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef bunnies(n):\n    '''\n    You have n bunnies and you want to give them to other bunnies. Each bunny has\n    to find a way to do that.\n    \n    Bunnies can just give the bunnies the bunny with a higher number.\n    \n    You know that there are bunnies with number 1, 2, 3, 4 and 5.\n    \n    It is not enough to find a way to give the bunnies. How many bunnies will be\n    given to each bunny (3, 4 or 5)?\n    \n    Example:\n    \n    Given:\n    - n = 5\n    \n    Return:\n    - 1\n    - 2\n    - 3\n    - 4\n    - 5\n    '''\n    if n <= 0:\n        return []\n    # Create a list with the given number of bunnies\n    bunnies = [1] * n\n    # Check if the bunnies are given to the right bunnies\n    for i in range(2, n + 1):\n        # Loop through all bunnies\n        for j in range(2, i):\n            # If the bunnies are given to the right bunnies\n            if i % j == 0:\n                # Remove the bunnies that are given to the right bunnies\n                bunnies[i - j] -= 1\n                break\n    # Return the number of bunnies that are given to the right bunnies\n    return bunnies\n    \n",
        "num_ids": 172
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for x in range(5, int(num**.5) + 1, 6):\n            if num % x == 0 or num % (x + 2) == 0:\n                return False\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    for x in xrange(2, num):\n        if num % x == 0:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # if num is 0 or 1, it is not a prime number\n    if num == 1:\n        return False\n    # if num is 2, 3, or 5, it is a prime number\n    if num == 2 or num == 3 or num == 5:\n        return True\n    # if num is even and not 2 or 3, it is not a prime number\n    if num % 2 == 0 and num!= 2 and num!= 3:\n        return False\n    # if num is not 1, and not 2 or 3, it is not a prime number\n    # so to find out if the number is a prime number, we divide the number by all the possible numbers from 2 to sqrt(num)\n    for i in range(2,int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 197
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5 + 1), 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n",
        "num_ids": 80
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_meter(degree, meter):\n    '''\n    Write a function to convert degrees and meter to radians.\n    '''\n    return degree*math.pi/180*meter\ndef radian_meter_meter(radians, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return radians*meter/math.pi\ndef degree_meter(degree, meter):\n    '''\n    Write a function to convert degrees and meter to radians.\n    '''\n    return degree*math.pi/180*meter\ndef degree_meter_meter(degree, meter):\n    '''\n    Write a function to convert degrees and meter to radians.\n    '''\n    return degree*math.pi/180*meter\ndef degree_meter_degree(degree, meter):\n    '''\n    Write a function to convert degrees and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter(degree, meter):\n    '''\n    Write a function to convert degrees and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef meter_meter(meter, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180\ndef meter_degree(meter, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180*degree\ndef meter_degree_meter(meter, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/degree\ndef meter_meter_degree(meter, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/meter*degree\ndef meter_meter_meter(meter, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/meter\ndef meter_degree_meter(meter, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/degree\ndef meter_degree_degree(meter, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/degree\ndef meter_degree_degree_meter(meter, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/degree\ndef degree_degree_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180*meter\ndef degree_degree_degree(degree, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/degree\ndef degree_degree_degree_meter(degree, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/degree\ndef degree_degree_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180*meter\ndef degree_degree_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef meter_degree_degree(meter, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/degree\ndef meter_degree_degree_meter(meter, degree):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/degree\ndef meter_meter_meter(meter, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/meter\ndef degree_meter_degree(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180*meter\ndef degree_meter_degree_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef meter_meter_meter(meter, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return meter*math.pi/180/meter\ndef degree_meter_degree_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter_degree(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_meter_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_meter_meter_meter_degree(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_meter_meter_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_meter_meter_meter_meter_degree(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter_meter_degree(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter_meter_meter_degree(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_meter_meter_meter_meter_meter(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_meter_meter_meter_meter_meter_degree(degree, meter):\n    '''\n    Write a function to convert radians and meter to radians.\n    '''\n    return degree*math.pi/180/meter\ndef degree_meter_degree_meter_meter_meter_meter(degree, meter):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180.0*math.pi\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree * math.pi)/180\n",
        "num_ids": 13
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi*degree/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef radian_degree_2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef radians_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * (180 / math.pi)\ndef radians_degree_2(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * (180 / math.pi)\ndef distance_between_2_points(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_2(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_3(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_4(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_5(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_6(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_7(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_8(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_9(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_10(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_11(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_12(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_13(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_14(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_15(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_16(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_17(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_18(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_19(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_20(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_21(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_22(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_23(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_24(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef distance_between_2_points_25(x1, y1, x2, y2):\n    '''\n    Write a function to compute the euclidean distance between two points.\n    '''\n    retur",
        "num_ids": 5
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef main():\n    # print radian_degree(45)\n    print radian_degree(45.5)\n    print radian_degree(90)\n    print radian_degree(180)\n    print radian_degree(270)\n    print radian_degree(360)\nif __name__ == '__main__':\n    main(",
        "num_ids": 93
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = pattern.finditer(text)\n    if not matches:\n        return\n    # Get the substring, a start index, and end index\n    match = next(matches)\n    for m in matches:\n        if m.start() > match.start():\n            match = m\n    return match\n",
        "num_ids": 75
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    def find_all(pattern, text):\n        '''\n        Returns an array of all matching patterns in the text.\n        '''\n        pattern = re.compile(pattern)\n        found_patterns = pattern.findall(text)\n        return found_patterns\n",
        "num_ids": 34
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    start = 0\n    for match in matches:\n        if match.start() > start:\n            yield match.start(), match.end()\n            start = match.start() + 1\n    if match.end() > start:\n        yield match.start(), match.end()\n    return None\n",
        "num_ids": 93
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = pattern.findall(text)\n    print(matches)\n    if matches:\n        return matches[0]\n    else:\n        return None\n",
        "num_ids": 41
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    match = re.search(pattern, text)\n    if match is not None:\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end\n    else:\n        return None, None, None\n",
        "num_ids": 76
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end()\n",
        "num_ids": 35
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if (pattern == None or text == None):\n        return None\n    pattern = pattern.strip()\n    text = text.strip()\n    regex = re.compile(pattern)\n    # print regex.pattern\n    # print regex.search(text)\n    result = regex.search(text)\n    # if result == None:\n    #     print \"No match\"\n    #     return None\n    # print result.group()\n    # print result.start()\n    # print result.end()\n    return (result.group(), result.start(), result.end())\n",
        "num_ids": 136
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.group(0), m.start(), m.end()\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "num_ids": 34
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern not in text:\n        return None, None, None\n    \n    match = re.search(pattern, text)\n    if match is None:\n        return None, None, None\n    \n    return text[match.start():match.end()], match.start(), match.end()\n",
        "num_ids": 71
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [1]\n    for i in range(1, n+1):\n        bell_list.append(bell_list[i-1] + bell_list[i-1])\n    return bell_list[n]\n",
        "num_ids": 58
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    B = [0] * (n + 1)\n    B[0] = 1\n    for i in range(1, n + 1):\n        B[i] = 0\n        for j in range(i):\n            B[i] += B[j] * (i - j)\n    return B[n]\n",
        "num_ids": 77
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)\n",
        "num_ids": 41
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def factorial(n):\n        if n <= 1: \n            return 1\n        return n * factorial(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int((n**n)/(math.factorial(n)*math.factorial(n-1)))\n",
        "num_ids": 28
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((n*(n+1))//2)\n",
        "num_ids": 16
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    output = 1\n    for i in range(1, n+1): \n        output = output + i \n    return output \n    \nprint(bell_Number(10))\n",
        "num_ids": 45
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    if n < 0: \n        return 0\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n",
        "num_ids": 60
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if (n == 0 or n == 1): \n        return 1\n    else: \n        return n * bell_Number(n-1) \n",
        "num_ids": 38
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    \n    first = list1[0]\n    list2 = [first]\n    for i in range(1,len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n",
        "num_ids": 77
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.pop(L[L.index(L[L.index(list1[L.index(L[-1])])])])\n    return L\n",
        "num_ids": 39
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n    ",
        "num_ids": 20
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n",
        "num_ids": 15
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    for item in list1:\n        i = i + 1\n        if (i == L):\n            del list1[i-1]\n        else:\n            pass\n    return list1\n",
        "num_ids": 52
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Remove the kth element\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 27
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L==None:\n        return None\n    elif L>=len(list1):\n        return None\n    elif L<0:\n        return None\n    else:\n        i=0\n        while i<L:\n            del list1[i]\n            i+=1\n        return list1\n",
        "num_ids": 75
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = 0\n    for row in test_list:\n        if len(row) >= N:\n            max_num = max(row[N-1], max_num)\n    return max_num\n",
        "num_ids": 52
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return None\n    if len(test_list) == 1:\n        return test_list[0][N]\n    return max(max_of_nth(row, N) for row in test_list[1:])\n",
        "num_ids": 63
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([col[N] for col in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for lst in test_list:\n        max_col.append(lst[N-1])\n    return max(max_col)\n",
        "num_ids": 43
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(max(test_list[i][N]))\n    return max_col\n",
        "num_ids": 48
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    nth_col = []\n    for row in test_list:\n        nth_col.append(row[N-1])\n    return max(nth_col)\n",
        "num_ids": 44
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    matrix = []\n    for row in test_list:\n        matrix.append(row)\n    max_of_column = []\n    for i in range(0, len(matrix)):\n        max_of_column.append(max(matrix[i]))\n    return max_of_column[N-1]\n",
        "num_ids": 81
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = test_list[0][N-1]\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n",
        "num_ids": 64
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([max(sublist) for sublist in test_list])\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n",
        "num_ids": 20
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = [x[0] + [x[1]] for x in lst]\n    return [[lst[0][i], lst[1][i]] for i in range(0, len(lst[0]))]\n",
        "num_ids": 58
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[], []]\n    for l in lst:\n        result[0].append(l[0])\n        result[1].append(l[1])\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return map(lambda x: [x[0], x[1]], lst)\n",
        "num_ids": 23
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    return merge_helper(lst, 0, len(lst)-1)\n",
        "num_ids": 53
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append([lst[i][0],lst[i][1]])\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for l in lst:\n        res.append(l[0])\n        res.append(l[1])\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst[0][0], lst[0][1]]\n    elif len(lst) == 2:\n        return [[lst[0][0], lst[1][0]], [lst[0][1], lst[1][1]]]\n    else:\n        return merge([lst[0:int(len(lst)/2)]]) + merge([lst[int(len(lst)/2):]])\n",
        "num_ids": 138
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n",
        "num_ids": 31
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    a, b = zip(*lst)\n    return [[a[i],b[i]] for i in range(0, len(a))]\n    \n    \nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert isinstance(merge([]), list), \"The result must be a list\"\n    assert merge([[1, 2], [3, 4], [5, 6, 7]]) == [[1, 2], [3, 4, 5, 6, 7]], \"Example\"\n    assert merge([['a', 'b'], ['c', 'd']]) == [['a', 'b'], ['c', 'd']], \"Dictionary\"\n    assert merge([[5, 6], ['a', 'b']]) == [5, 6, 'a', 'b'], \"First\"\n    assert merge([[5, 6], [4, 3]]) == [5, 6, 4, 3], \"Second",
        "num_ids": 241
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for l in lst:\n        result.append([l[0], l[1]])\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(len(test_list)):\n        if i == 0:\n            cum_sum.append(test_list[0])\n        else:\n            cum_sum.append(test_list[i] + cum_sum[i-1])\n    return cum_sum\n    \ndef factorial(test_list):\n    '''\n    Write a function to find the factorial of all the values that are present in the given tuple list.\n    '''\n    factorial = 1\n    for i in range(len(test_list)):\n        factorial = factorial * test_list[i]\n    return factorial\n    \ndef reverse(test_list):\n    '''\n    Write a function to reverse a list.\n    '''\n    return test_list[::-1]\n    \ndef reverse_pairwise(test_list):\n    '''\n    Write a function to reverse the pairwise values of a list.\n    '''\n    for i in range(len(test_list)//2):\n        test_list[i], test_list[-(i+1)] = test_list[-(i+1)], test_list[i]\n    return test_list\n    \ndef triangle_number(test_list):\n    '''\n    Write a function to find the triangle number of all the values that are present in the given tuple list.\n    '''\n    triangle_num = 0\n    for i in range(len(test_list)):\n        triangle_num = triangle_num + (i + 1)\n    return triangle_num\n    \ndef digit_count(test_list):\n    '''\n    Write a function to find the digit count of all the values that are present in the given tuple list.\n    '''\n    digit_count = []\n    for i in range(len(test_list)):\n        digit_count.append(str(test_list[i]).count('0'))\n    return digit_count\n    \ndef digit_count_dict(test_list):\n    '''\n    Write a function to find the digit count of all the values that are present in the given tuple list.\n    '''\n    digit_count = {}\n    for i in range(len(test_list)):\n        if '0' in str(test_list[i]):\n            digit_count[i] = digit_count.get(i, 0)\n        else:\n            digit_count[i] = 0\n    return digit_count\n    \ndef add_digits(test_list):\n    '''\n    Write a function to add the digits of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum = sum + int(str(test_list[i]).strip('0'))\n    return sum\n    \ndef pairs_list(test_list):\n    '''\n    Write a function to find the number of pairs of the list that have the same element.\n    '''\n    pairs_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                pairs_count += 1\n    return pairs_count\n    \ndef sub_list(test_list):\n    '''\n    Write a function to find the sub list of the given list that is greater than or equal to all the elements in the given list.\n    '''\n    sub_list = []\n    for i in range(len(test_list)):\n        sub_list.append(test_list[i])\n        for j in range(len(test_list)):\n            if test_list[i] < test_list[j] and test_list[i] not in sub_list:\n                sub_list.append(test_list[i])\n    return sub_list\n    \ndef permutations(test_list):\n    '''\n    Write a function to find the number of permutations of all the values that are present in the given tuple list.\n    '''\n    factorial = factorial(test_list)\n    permutations_list = []\n    for i in range(len(test_list)):\n        permutations_list.append(factorial / (factorial * i))\n    return permutations_list\n    \ndef combinations(test_list):\n    '''\n    Write a function to find the number of combinations of all the values that are present in the given tuple list.\n    '''\n    factorial = factorial(test_list)\n    combinations_list = []\n    for i in range(len(test_list)):\n        combinations_list.append(factorial / (factorial * i))\n    return combinations_list\n    \ndef subset_list(test_list):\n    '''\n    Write a function to find the number of subsets of the list that have all the same elements.\n    '''\n    factorial = factorial(test_list)\n    subsets_list = []\n    for i in range(len(test_list)):\n        subsets_list.append(factorial / (factorial * i))\n    return subsets_list\n    \ndef subset_list_dict(test_list):\n    '''\n    Write a function to find the number of subsets of the list that have all the same elements.\n    '''\n    factorial = factorial(test_list)\n    subsets_list = {}\n    for i in range(len(test_list)):\n        subsets_list[i] = factorial / (factorial * i)\n    return subsets_list\n    \ndef subsets_list(test_list):\n    '''\n    Write a function to find the number of subsets of the list that have all the same elements.\n    '''\n    subsets_list = []\n    subsets_list.append([])\n    for i in range(len(test_list)):\n        for j in range(len(subsets_list)):\n            subsets_list.append(subsets_list[j] + [test_list[i]])\n    return subsets_list\n    \ndef powerset(test_list):\n    '''\n    Write a function to find the powerset of the list.\n    '''\n    subsets_list = []\n    subsets_list.append([])\n    for i in range(len(test_list)):\n        for j in range(len(subsets_list)):\n            subsets_list.append(subsets_list[j] + [test_list[i]])\n    return subsets_list\n    \ndef powerset_dict(test_list):\n    '''\n    Write a function to find the powerset of the list.\n    '''\n    subsets_list = {}\n    subsets_list[0] = []\n    for i in range(len(test_list)):\n        for j in range(len(subsets_list)):\n            subsets_list[j + 1] = subsets_list[j] + [test_list[i]]\n    return subsets_list\n    \ndef power_set(test_list):\n    '''\n    Write a function to find the power set of the list.\n    '''\n    powerset_list = []\n    for i in range(len(test_list)):\n        powerset_list.append([test_list[i]])\n        for j in range(i):\n            powerset_list.append([test_list[i]] + powerset_list[j])\n    return powerset_list\n    \ndef power_set_dict(test_list):\n    '''\n    Write a function to find the power set of the list.\n    '''\n    powerset_list = {}\n    powerset_list[0] = []\n    for i in range(len(test_list)):\n        powerset_list[i + 1] = [test_list[i]]\n        for j in range(i):\n            powerset_list[i + 1] += powerset_list[j]\n    return powerset_list\n    \ndef powerset_dict(test_list):\n    '''\n    Write a function to find the powerset of the list.\n    '''\n    powerset_list = {}\n    powerset_list[0] = []\n    for i in range(len(test_list)):\n        powerset_list[i + 1] = [test",
        "num_ids": 48
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for index, value in enumerate(test_list):\n        if index == 0:\n            cumulative_sum.append(value)\n        else:\n            cumulative_sum.append(cumulative_sum[index - 1] + value)\n    return cumulative_sum\n",
        "num_ids": 73
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    cum_list = []\n    cum_list.append(test_list[0])\n    for i in range(1, len(test_list)):\n        cum_list.append(test_list[i] + cum_list[i-1])\n    return cum_list\n",
        "num_ids": 80
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list = []\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n        cum_sum_list.append(cum_sum)\n    return cum_sum_list\n",
        "num_ids": 56
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n",
        "num_ids": 29
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n",
        "num_ids": 29
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list = []\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n        cum_sum_list.append(cum_sum)\n    return cum_sum_list\n",
        "num_ids": 56
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if i == 0:\n                test_list[i][j] = test_list[i][j]\n            else:\n                test_list[i][j] += test_list[i - 1][j]\n    return test_list\n",
        "num_ids": 89
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    soln = 0\n    for num in test_list:\n        soln += num\n    return soln\n",
        "num_ids": 28
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list = []\n    for i in range(len(test_list)):\n        total = 0\n        for j in range(i+1):\n            total = total + test_list[j]\n        cum_sum_list.append(total)\n    return cum_sum_list\n",
        "num_ids": 73
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums)/len(nums)]\n",
        "num_ids": 16
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in nums:\n        average_list.append(sum(i) / len(i))\n    return average_list\n    \n    ",
        "num_ids": 43
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(i)/len(i)) for i in nums]\n",
        "num_ids": 20
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in nums]\n",
        "num_ids": 20
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for n in nums:\n        avg.append(sum(n) / len(n))\n    return avg\n",
        "num_ids": 36
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sub in nums:\n        averages.append(sum(sub) / len(sub))\n    return averages\n",
        "num_ids": 36
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for item in nums:\n        sum += item\n    return sum / len(nums)\n",
        "num_ids": 30
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        average_list.append(sum(num)/len(num))\n    return average_list\n",
        "num_ids": 39
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = [0] * len(nums[0])\n    for tup in nums:\n        for i in range(len(averages)):\n            averages[i] += tup[i]\n    return [x/len(nums) for x in averages]\n",
        "num_ids": 69
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/float(len(x)) for x in nums]\n",
        "num_ids": 22
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    modulo_tup = ()\n    for x,y in zip(test_tup1, test_tup2):\n        modulo_tup += (x%y, )\n    return modulo_tup\n",
        "num_ids": 74
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return [ (t1 % t2) for t1, t2 in zip(test_tup1, test_tup2) ]\n",
        "num_ids": 35
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return\n    else:\n        return tuple((x%y for x, y in zip(test_tup1, test_tup2)))\n",
        "num_ids": 56
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Incompatible tuples'\n    else:\n        return [i%j for i,j in zip(test_tup1, test_tup2)]\n",
        "num_ids": 61
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    out = []\n    for i in range(len(test_tup1)):\n        out.append(test_tup1[i] % test_tup2[i])\n    return tuple(out)\n",
        "num_ids": 73
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x,y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        modulo_tup = tuple([a%b for a,b in zip(test_tup1, test_tup2)])\n        return modulo_tup\n    else:\n        return \"error\"\n",
        "num_ids": 73
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a%b for a,b in zip(test_tup1,test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if steps < 0:\n        return float('inf')\n    elif steps == 0:\n        return 1\n    return min(min_Jumps(steps-1, d-1), min_Jumps(steps-2, d-2))\n",
        "num_ids": 70
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = [0] * len(steps)\n    J[0] = abs(steps[0] - d[0])\n    J[1] = abs(steps[1] - d[1])\n    for i in range(2, len(steps)):\n        J[i] = min(J[i - 1], min(abs(steps[i] - d[i - 1]), abs(steps[i] - d[i])))\n    return J[len(steps) - 1]\n",
        "num_ids": 118
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    if d == 1:\n        return steps + 1\n    if d == 2:\n        return 2*steps + 1\n",
        "num_ids": 41
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return min_Jumps_recursive(steps, 0, 0, d)\n",
        "num_ids": 21
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0: \n        return 0\n    if d == 0: \n        return 1\n    if d > steps: \n        return 0\n    if d == steps: \n        return 1\n    return 1 + min_Jumps(steps, d + steps) + min_Jumps(steps, d - steps)\n",
        "num_ids": 78
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d > steps:\n        return -1\n    if d < 0:\n        return -1\n    if d == steps:\n        return 1\n",
        "num_ids": 48
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    prev_step = [0] * (n + 1)\n    prev_step[0] = -1\n    j = 0\n    for i in range(1, n + 1):\n        while j > 0 and i - steps[j-1] - 1 >= 0 and i - steps[j-1] - 1 < n + 1:\n            j = prev_step[i-steps[j-1]-1]\n        if i >= n:\n            return 1\n        prev_step[i] = j\n        j = i\n    return -1\n",
        "num_ids": 138
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    table = {}\n    if d == 0:\n        return 0\n    for i in range(len(steps)):\n        if i in table:\n            continue\n        curr = steps[i]\n        if curr < d:\n            jumps = 1 + min_Jumps(steps, d - curr)\n        elif curr == d:\n            jumps = 1\n        else:\n            jumps = 0\n        table[i] = jumps\n    return table[-1]\n",
        "num_ids": 117
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1: return 1\n    if steps == 0: return 0\n    if d < 0: return 0\n",
        "num_ids": 29
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) == 1:\n        return 0\n    #if d == -1:\n        #return 0\n    numJumps = [float('inf') for x in xrange(len(steps))]\n    numJumps[0] = 0\n    for i in xrange(len(steps)):\n        for j in xrange(1, steps[i] + 1):\n            if i + j < len(steps):\n                if d == 0:\n                    numJumps[i + j] = min(numJumps[i + j], numJumps[i] + 1)\n                else:\n                    numJumps[i + j] = min(numJumps[i + j], numJumps[i] + 1, numJumps[i] + 1)\n    return numJumps[len(steps) - 1]\n",
        "num_ids": 197
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [[num1/num2 for num1,num2 in zip(nums1,nums2)] for nums1,nums2 in zip(nums1,nums2)]\n",
        "num_ids": 47
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print(list(map(lambda x,y: x/y, nums1,nums2)))\n",
        "num_ids": 27
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 31
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst = []\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            lst.append(nums1[i]/nums2[i])\n        return lst\n    else:\n        return 'error'\n",
        "num_ids": 73
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1 or not nums2:\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [m/n for m,n in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) < len(nums2):\n        return [nums1[i]/nums2[i] for i in range(len(nums1))]\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 101
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list=[]\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert isinstance(nums1,list)\n    assert isinstance(nums2,list)\n    assert isinstance(nums1[0],int)\n    assert isinstance(nums2[0],int)\n    \n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 82
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # test_str = 'qweasdzxc12345'\n    s = ''\n    for i in test_str:\n        if i.isdigit():\n            s += i\n    return s + test_str[len(s):]\n",
        "num_ids": 63
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_ind = []\n    num_str = []\n    for i, c in enumerate(test_str):\n        if c.isdigit():\n            num_ind.append(i)\n            num_str.append(c)\n    num_str.extend(test_str[i].lower() for i in num_ind)\n    return ''.join(num_str)\n",
        "num_ids": 94
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    stack = []\n    for i in test_str:\n        if i.isdigit():\n            stack.append(i)\n    for i in stack:\n        test_str = test_str.replace(i,'')\n    return test_str+''.join(stack)\n",
        "num_ids": 79
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    string = ''\n    for i in test_str:\n        if i.isdigit():\n            string += i\n    return string + ''.join(sorted(string, reverse=True))\n",
        "num_ids": 48
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = list(test_str)\n    length = len(test_str_list)\n    pos = 0\n    \n    for i in range(length):\n        if not test_str_list[i].isdigit():\n            pos = i\n            break\n    \n    while pos < length:\n        test_str_list[pos], test_str_list[length-1] = test_str_list[length-1], test_str_list[pos]\n        pos += 1\n        length -= 1\n    \n    return ''.join(test_str_list)\n",
        "num_ids": 141
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    mv_str = []\n    for char in test_str:\n        if char.isdigit():\n            mv_str.append(char)\n    for idx in range(len(test_str)-1, -1, -1):\n        if test_str[idx].isdigit():\n            mv_str.append(test_str[idx])\n    return ''.join(mv_str)\n",
        "num_ids": 103
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    \n    result = []\n    curr_num = ''\n    for char in test_str:\n        if char.isdigit():\n            curr_num += char\n        else:\n            if curr_num:\n                result.append(int(curr_num))\n                curr_num = ''\n            result.append(char)\n    if curr_num:\n        result.append(int(curr_num))\n    return ''.join(result)\n",
        "num_ids": 126
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Copy the string and create a new string\n    new_str = test_str\n    # Character to use to replace all characters\n    replace_char = '1'\n    # Replace all characters with the new char\n    new_str = new_str.replace(replace_char, '')\n    new_str += replace_char\n    # Return the new string\n    return new_str\n",
        "num_ids": 91
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    def num_str(test_str):\n        '''\n        Write a function to move all the numbers to the end of the given string.\n        '''\n        output_str = ''\n        for i in test_str:\n            if i.isdigit():\n                output_str += i\n        return output_str\n    \n    def move_num_last(test_str):\n        '''\n        Write a function to move all the numbers to the end of the given string.\n        '''\n        output_str = ''\n        for i in test_str:\n            if i.isdigit():\n                output_str += i\n        for i in test_str[::-1]:\n            if i.isdigit():\n                output_str += i\n        return output_str\n    \n    print num_str(test_str)\n    print move_num(test_str)\n    print move_num_last(test_str)\n    \nmove_num('n12345d0as0987')\nmove_num('n12345d0as0987asdfasdfasdfasdf')\nmove_num('n12345d0as0987')\nmove_num('asdfasdfasdfasdfasdfasdf')\nmove_num('asdfasdfasdfasdfasdfasdfasdfasdfasdf')",
        "num_ids": 199
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    char_dict = {}\n    for c in test_str:\n        if c in char_dict:\n            char_dict[c] += 1\n        else:\n            char_dict[c] = 1\n    return ''.join(map(lambda x: str(x) * char_dict[x], char_dict.keys()))\n",
        "num_ids": 81
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # break up a into list\n    list_a = a[:]\n    n = len(a)\n    \n    # sort the list\n    list_a.sort()\n    \n    # create an empty list for the result\n    output = []\n    \n    # create a variable to represent the current element\n    curr_val = list_a[0]\n    \n    # find the best result for each number\n    while (curr_val * (n - 1)) > len(a):\n        # find the smallest index to add to the output\n        start = 0\n        while (start + 1 < n and list_a[start] == list_a[start + 1]):\n            start += 1\n        # add this number to the output\n        output.append(list_a[start])\n        # remove the element from the list\n        del list_a[start]\n        # increment the current value\n        curr_val = curr_val * (n - start - 1)\n        n = len(list_a)\n    \n    return output\n",
        "num_ids": 246
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    s = [0] * n\n    p = [0] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and s[i] < s[j]:\n                s[i] = s[j]\n                p[i] = j\n    mx = 0\n    for i in range(n):\n        mx = max(mx, s[i] + 1)\n    subset = []\n    for i in range(mx):\n        subset.append([])\n    for i in range(n):\n        subset[s[i]].append(a[i])\n    print subset\n    return mx\n",
        "num_ids": 177
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return 1\n    \n    max_subset = 0\n    for i in range(len(a)):\n        subset = a[i]\n        if subset > max_subset:\n            max_subset = subset\n            break\n        else:\n            a.remove(subset)\n            max_subset += largest_subset(a)\n            a.append(subset)\n",
        "num_ids": 104
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n    \ndef lcs(x, y):\n    '''\n    Return the length of the longest common substrings of the two strings x and y.\n    '''\n    m = len(x)\n    n = len(y)\n    dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n",
        "num_ids": 148
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from collections import defaultdict\n    divisible_dict = defaultdict(int)\n    for num in a:\n        divisible_dict[num] += 1\n",
        "num_ids": 39
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    n = len(a)\n    best = [0 for i in range(n+1)]\n    for i in range(n):\n        best[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                best[i] = max(best[i], best[j]+1)\n    return max(best)\n",
        "num_ids": 106
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    elif len(a) == 1:\n        return a[0]\n    else:\n        mid = len(a) / 2\n        lhs = largest_subset(a[:mid])\n        rhs = largest_subset(a[mid:])\n        return max(lhs, rhs, lhs + rhs)\n",
        "num_ids": 91
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if (a[i] % a[j]) == 0:\n                result.append((a[i], a[j]))\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    \n    # dp[i] is the max size of the subset of a[:i+1] that is divisible by the last element of a[:i+1]\n    dp = [0 for i in range(len(a))]\n    \n    for i in range(len(a)):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n",
        "num_ids": 152
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    import copy\n    b = copy.deepcopy(a)\n    b.sort()\n    n = len(a)\n    num = 0\n    if n < 2:\n        return n\n    else:\n        max_num = max(a)\n        for i in range(n):\n            for j in range(i + 1, n):\n                num = abs(a[i] + a[j])\n                if num > max_num and num % 2 == 0:\n                    max_num = num\n    return max_num\n",
        "num_ids": 126
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if n is even:\n    #     return (arr1[n//2] + arr2[n//2]) / 2\n    # else:\n    #     return arr1[n//2]\n    '''\n    The above solution seems to be wrong for this question.\n    '''\n    i, j = 0, 0\n    total = (n + 1) // 2\n",
        "num_ids": 22
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 < n2:\n        return get_median(arr2, arr1, n)\n    m = (n1 + n2) / 2\n    if m == n1:\n        return arr1[m-1]\n    if m == n2:\n        return arr2[m-1]\n    if m % 2 == 0:\n        return (arr1[m/2-1] + arr1[m/2]) / 2.0\n    return arr1[m/2]\n",
        "num_ids": 140
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return (arr1[n // 2] + arr2[n // 2]) / 2\n",
        "num_ids": 23
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # new_arr = []\n    # for i in range(0, len(arr1)):\n    #     new_arr.append(arr1[i])\n    #     new_arr.append(arr2[i])\n    # new_arr.sort()\n    # n = len(new_arr)\n    # if n % 2 == 0:\n    #     return (new_arr[n/2] + new_arr[n/2-1])/2\n    # else:\n    #     return new_arr[n/2]\n",
        "num_ids": 131
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n/2] + arr2[n/2]) / 2\n    else:\n        return arr1[n/2]\n",
        "num_ids": 46
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    median = 0\n",
        "num_ids": 18
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    medians = []\n    if n % 2 == 0:\n        i = n/2 - 1\n        medians.append(int((arr1[i] + arr2[i])/2))\n        i -= 1\n        medians.append(int((arr1[i] + arr2[i])/2))\n    else:\n        i = n/2\n        medians.append(arr1[i])\n        medians.append(arr2[i])\n",
        "num_ids": 112
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find min of arr1 and arr2\n    smallest = arr1[n // 2] if n % 2 == 1 else (arr1[n // 2 - 1] + arr1[n // 2]) / 2\n    # find min of arr2 and arr2\n    smallest = arr2[n // 2] if n % 2 == 1 else (arr2[n // 2 - 1] + arr2[n // 2]) / 2\n    # return median\n    return smallest\n    \n",
        "num_ids": 113
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    mid1 = arr1[n // 2]\n    mid2 = arr2[n // 2]\n    if mid1 == mid2:\n        return mid1\n    elif mid1 < mid2:\n        return arr1[n // 2]\n    else:\n        return arr2[n // 2]\n",
        "num_ids": 88
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        return (arr1[n//2] + arr2[n//2-1])/2\n    else:\n        return arr1[n//2]\n",
        "num_ids": 48
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(n):\n        for j in range(len(nums)):\n            nums[j] = nums[j]**n\n    return nums\n",
        "num_ids": 44
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**num for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    i = 0\n    while i < len(nums):\n        nums[i] = nums[i]**n\n        i+=1\n    return nums\ndef ith_num(num,n):\n    '''\n    Write a function to compute the ith-th power of each number in a list.\n    '''\n    i = 0\n    while i < len(num):\n        num[i] = num[i]**n\n        i+=1\n    return num\ndef reverse_list(num):\n    '''\n    Write a function that reverses a list of integers in place.\n    '''\n    i = 0\n    while i < len(num)//2:\n        num[i],num[len(num)-1-i] = num[len(num)-1-i],num[i]\n        i+=1\n    return num\ndef rotate_list(num,k):\n    '''\n    Write a function that rotates a list of integers by k, in place.\n    '''\n    num = num[k:]+num[:k]\n    return num\ndef reverse_list(num):\n    '''\n    Write a function that reverses a list of integers in place.\n    '''\n    i = 0\n    while i < len(num)//2:\n        num[i],num[len(num)-1-i] = num[len(num)-1-i],num[i]\n        i+=1\n    return num\ndef bubble_sort(nums):\n    '''\n    Write a function that sorts a list using bubble sort.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef bubble_sort(nums):\n    '''\n    Write a function that sorts a list using bubble sort.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef quick_sort(nums):\n    '''\n    Write a function that takes a list of integers and returns a sorted list.\n    '''\n    def partition(nums,low,high):\n        pivot = nums[low]\n        i = low\n        j = high\n        while i < j:\n            while i < high and nums[i] <= pivot:\n                i+=1\n            while nums[j] > pivot:\n                j-=1\n            if i < j:\n                nums[i],nums[j] = nums[j],nums[i]\n        if low < j:\n            nums[low],nums[j] = nums[j],nums[low]\n        return j\n    def _quick_sort(nums,low,high):\n        if low < high:\n            mid = partition(nums,low,high)\n            _quick_sort(nums,low,mid-1)\n            _quick_sort(nums,mid+1,high)\n    _quick_sort(nums,0,len(nums)-1)\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function that takes a list of integers and returns a sorted list.\n    '''\n    def _merge_sort(nums,low,high):\n        if low < high:\n            mid = (low+high)//2\n            _merge_sort(nums,low,mid)\n            _merge_sort(nums,mid+1,high)\n            i = low\n            j = mid+1\n            temp = []\n            while i <= mid and j <= high:\n                if nums[i] > nums[j]:\n                    temp.append(nums[j])\n                    j+=1\n                else:\n                    temp.append(nums[i])\n                    i+=1\n            if i > mid:\n                while j <= high:\n                    temp.append(nums[j])\n                    j+=1\n            else:\n                while i <= mid:\n                    temp.append(nums[i])\n                    i+=1\n            nums[low:high+1] = temp[:]\n    _merge_sort(nums,0,len(nums)-1)\n    return nums\ndef mergesort(nums):\n    '''\n    Write a function that takes a list of integers and returns a sorted list.\n    '''\n    def _mergesort(nums,low,high):\n        if low < high:\n            mid = (low+high)//2\n            _mergesort(nums,low,mid)\n            _mergesort(nums,mid+1,high)\n            merge(nums,low,mid,high)\n    def merge(nums,low,mid,high):\n        i = low\n        j = mid+1\n        temp = []\n        while i <= mid and j <= high:\n            if nums[i] > nums[j]:\n                temp.append(nums[j])\n                j+=1\n            else:\n                temp.append(nums[i])\n                i+=1\n        if i > mid:\n            while j <= high:\n                temp.append(nums[j])\n                j+=1\n        else:\n            while i <= mid:\n                temp.append(nums[i])\n                i+=1\n        nums[low:high+1] = temp[:]\n    _mergesort(nums,0,len(nums)-1)\n    return nums\ndef radix_sort(nums):\n    '''\n    Write a function that takes a list of integers and returns a sorted list.\n    '''\n    def _radix_sort(nums,divider):\n        temp = [[] for i in range(10)]\n        for num in nums:\n            temp[num//divider%10].append(num)\n        for i in range(10):\n            temp[i] = radix_sort(temp[i])\n        i = 0\n        for j in range(10):\n            for num in temp[j]:\n                nums[i] = num\n                i+=1\n    divider = 1\n    while max(nums)//divider:\n        divider*=10\n    _radix_sort(nums,divider)\n    return nums\ndef quick_sort(nums):\n    '''\n    Write a function that takes a list of integers and returns a sorted list.\n    '''\n    def partition(nums,low,high):\n        pivot = nums[low]\n        i = low\n        j = high\n        while i < j:\n            while i < high and nums[i] <= pivot:\n                i+=1\n            while nums[j] > pivot:\n                j-=1\n            if i < j:\n                nums[i],nums[j] = nums[j],nums[i]\n        if low < j:\n            nums[low],nums[j] = nums[j],nums[low]\n        return j\n    def _quick_sort(nums,low,high):\n        if low < high:\n            mid = partition(nums,low,high)\n            _quick_sort(nums,low,mid-1)\n            _quick_sort(nums,mid+1,high)\n    _quick_sort(nums,0,len(nums)-1)\n    return nums\ndef count_and_sort(nums):\n    '''\n    Write a function that takes a list of integers and returns a sorted list.\n    '''\n    counts = [0]*(max(nums)+1)\n    for num in nums:\n        counts[num]+=1\n    i = 0\n    for j in range(len(counts)):\n        while counts[j] > 0:\n            nums[i] = j\n            counts[j]-=1\n            i+=1\n    return nums\ndef binary_search(nums,n):\n    '''\n    Write a function that takes a list of integers and returns the inde",
        "num_ids": 17
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**i for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for i in string:\n        if i.isupper():\n            result += i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string[0].isupper():\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper() == True:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    return string.lower()\n    \ndef is_capital(string):\n    '''\n    Write a python function to convert a given string to its first letter as capital.\n    '''\n    return string.capitalize()\n    \ndef is_reverse(string):\n    '''\n    Write a python function to convert a given string to its reverse.\n    '''\n    return string[::-1]\n    \ndef is_remove(string):\n    '''\n    Write a python function to convert a given string to its non-alphabet characters removed.\n    '''\n    return string.translate(None, string.punctuation)\n",
        "num_ids": 18
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"Swap the first and last element in the list \")\n    newList.append(newList.pop(0))\n    newList.append(newList.pop())\n    return newList\n",
        "num_ids": 49
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[len(newList)-1]\n    newList[0] = last\n    newList[len(newList)-1] = first\n    return newList\n",
        "num_ids": 53
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size=len(newList)\n    temp=newList[0]\n    newList[0]=newList[size-1]\n    newList[size-1]=temp\n    return newList\n    \ndef swap_Tuple(newTuple): \n    '''\n    Write a python function to interchange the first and last element in a given tuple.\n    '''\n    size=len(newTuple)\n    temp=newTuple[0]\n    newTuple[0]=newTuple[size-1]\n    newTuple[size-1]=temp\n    return newTuple\n    \ndef reverse_String(string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    temp=string[-1]\n    string=string[0:len(string)-1]\n    string+=temp\n    return string\n",
        "num_ids": 34
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Using list slicing to swap the first and last element\n    return newList[-1:]+newList[1:-1]+newList[:1]\n",
        "num_ids": 38
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n        return newList\n",
        "num_ids": 60
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if not isinstance(newList,list):\n        print \"Invalide list\"\n    else:\n        newList[0],newList[-1]=newList[-1],newList[0]\n        return newList\n",
        "num_ids": 56
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # use (2 * pi * r^2) / 3\n    return (2 * math.pi * r**2) / 3\n    \ndef generate_numbers(start, end) :  \n    '''\n    Write a python function to generate a list of numbers from start to end. \n    '''\n    return [x for x in range(start, end)]\n    \ndef is_prime(n) :  \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    # return a boolean value \n    return True if n == 2 or n == 3 or n == 5 or n == 7 else False\n    \ndef count_primes(numbers) :  \n    '''\n    Write a python function to count the number of prime numbers from the list of numbers.\n    '''\n    # return a list of count of prime numbers\n    return [x for x in numbers if is_prime(x)]\n    \ndef is_even(n) :  \n    '''\n    Write a python function to check whether a given number is even or odd.\n    '''\n    # return a boolean value \n    return True if n%2 == 0 else False\n    \ndef find_largest_divisor(n, divisors) :  \n    '''\n    Write a python function to find the largest divisor of a given number n.\n    '''\n    # return the largest divisor of n\n    return max(divisors)\n    \ndef reverse_numbers(numbers) :  \n    '''\n    Write a python function to reverse the numbers in a list.\n    '''\n    # return a list of reversed numbers\n    return numbers[::-1]\n    \ndef get_square_digit_count(n) :  \n    '''\n    Write a python function to count the number of square digits in a given number n.\n    '''\n    # use the formula to count the number of square digits\n    return int(math.log10(n) / math.log10(2)) + 1\n    \ndef get_tuple_digit_count(t) :  \n    '''\n    Write a python function to count the number of tuple digits in a given tuple t.\n    '''\n    # use the formula to count the number of tuple digits\n    return int(math.log10(t[0]) / math.log10(10)) + 1\n    \ndef get_reverse_tuple_digit_count(t) :  \n    '''\n    Write a python function to count the number of reverse tuple digits in a given tuple t.\n    '''\n    # use the formula to count the number of tuple digits\n    return int(math.log10(t[1]) / math.log10(10)) + 1\n    \ndef get_permutations(n) :  \n    '''\n    Write a python function to get the permutations of the list of numbers.\n    '''\n    # return a list of permutations\n    return list(permutations(n))\n    \ndef get_nth_permutation(n, p) :  \n    '''\n    Write a python function to get the nth permutation of the list of numbers.\n    '''\n    # return the nth permutation of the list of numbers\n    return ''.join(p[n-1])\n    \ndef get_power_digit_count(n, p) :  \n    '''\n    Write a python function to count the number of power digit in the nth permutation of the list of numbers.\n    '''\n    # use the formula to count the number of power digit\n    return int(math.log10(n) / math.log10(p)) + 1\n    \ndef is_power_digit(n, p) :  \n    '''\n    Write a python function to check whether the nth power digit is a power digit of the nth permutation of the list of numbers.\n    '''\n    # return a boolean value\n    return True if get_power_digit_count(n, p) == get_tuple_digit_count(p) else False\n    \ndef get_largest_power_digit(n, p) :  \n    '''\n    Write a python function to get the largest power digit of the nth permutation of the list of numbers.\n    '''\n    # return the largest power digit\n    return max(p[get_tuple_digit_count(p) - 1])\n    \ndef get_smallest_power_digit(n, p) :  \n    '''\n    Write a python function to get the smallest power digit of the nth permutation of the list of numbers.\n    '''\n    # return the smallest power digit\n    return min(p[get_tuple_digit_count(p) - 1])\n    \ndef get_power_digit_list(n, p) :  \n    '''\n    Write a python function to get the list of power digits of the nth permutation of the list of numbers.\n    '''\n    # return the list of power digits\n    return list(p[get_tuple_digit_count(p) - 1])\n    \ndef get_reverse_power_digit_list(n, p) :  \n    '''\n    Write a python function to get the list of reverse power digits of the nth permutation of the list of numbers.\n    '''\n    # use the formula to get the list of reverse power digits\n    return list(p[get_tuple_digit_count(p) - 1])[::-1]\n    \ndef get_nth_power_digit(n, p) :  \n    '''\n    Write a python function to get the nth power digit of the nth permutation of the list of numbers.\n    '''\n    # return the nth power digit\n    return p[get_power_digit_count(n, p) - 1]\n    \ndef get_reverse_power_digit(n, p) :  \n    '''\n    Write a python function to get the reverse power digit of the nth permutation of the list of numbers.\n    '''\n    # return the reverse power digit\n    return p[get_reverse_tuple_digit_count(p) - 1][::-1]\n    \ndef is_power_digit_list_reverse(l) :  \n    '''\n    Write a python function to check whether the list of reverse power digits is a power digit list or not.\n    '''\n    # return a boolean value\n    return True if len(l) == len(set(l)) else False\n    \ndef get_power_digit_list_reverse(l) :  \n    '''\n    Write a python function to get the list of reverse power digits of the list of numbers.\n    '''\n    # return the list of reverse power digits\n    return [x for x in l[::-1]]\n    \ndef get_nth_power_digit_list_reverse(n, l) :  \n    '''\n    Write a python function to get the list of nth reverse power digits of the list of numbers.\n    '''\n    # use the formula to get the list of nth reverse power digits\n    return [l[get_power_digit_count(n, l) - 1][::-1]]\n    \ndef get_largest_power_digit_list_reverse(n, l) :  \n    '''\n    Write a python function to get the list of largest power digits of the list of numbers.\n    '''\n    # return the list of largest power digits\n    return [max(l[get_power_digit_count(n, l) - 1])]\n    \ndef get_smallest_power_digit_list_reverse(n, l) :  \n    '''\n    Write a python function to get the list of smallest power digits of the list of numbers.\n    '''\n    # return the list of smallest power digits\n    return [min(l[get_power_digit_count(n, l) - 1])]\n    \ndef get_power_digit_count_reverse(n, l) :  \n    '''\n    Write a python function to count the number of power digit of the nth permutation of the list of numbers.\n    '''\n    # use the formula to count the number of power digit\n    return get_power_digit_count(n, l[::-1])\n    \ndef get_nth_power_digit_list_reverse(n, l) :  \n    '''\n    Write a python function to get the list of nth power digits of the list of numbers.\n    '''\n    # return the list of nth power digits",
        "num_ids": 12
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3*math.pi*r**2)/4\n",
        "num_ids": 17
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return abs(r**2 * math.pi/3)\n",
        "num_ids": 21
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi * (r ** 2) / 4\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0:\n        return -1\n    return 3*r*r*asin(r)\n",
        "num_ids": 27
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return math.sqrt(r**2 * (3 + r))\n",
        "num_ids": 23
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    if (r == 0):\n        print(\"Error : Radius must be greater than 0\")\n    else :\n        return math.pi*(r**2)\n",
        "num_ids": 43
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = sqrt(r**2 - (r-2)**2)\n    b = sqrt(r**2 - (r+2)**2)\n    return (a + b)/2\n",
        "num_ids": 49
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # function will always return either 0 or 1.\n    # 0 is returned when the value of the function is 0.\n    # 1 is returned when the value of the function is greater than 0.\n    \n    \n    return math.sqrt(r**2 * ((r + 1)**2 - 0.25)) - 0.5\n    \n    \n    \nprint(triangle_area(10))",
        "num_ids": 99
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import sqrt\n    return sqrt( r * r * r - (r * r - 3 * r) * (r * r - 3 * r) ) / 2\n    \n",
        "num_ids": 45
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return None\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid]==mid+1:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return array[mid]+1\n",
        "num_ids": 108
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start >= end:\n        return start\n    mid = (end-start)//2 + start\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 90
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return None\n    if array[start] is None:\n        return start\n    if array[end] is None:\n        return end\n    return find_First_Missing(array,start+1,end)\n",
        "num_ids": 73
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end or start < 0 or end > len(array):\n        return None\n    if start == end:\n        if array[start] == None:\n            return start + 1\n        else:\n            return None\n    mid = (start + end) // 2\n    if array[mid] == None:\n        return mid\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 143
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return None\n    if start == end - 1:\n        if array[start] == start + 1:\n            return start + 1\n        else:\n            return start\n    mid = (start + end) / 2\n    if array[mid] == mid + 1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n",
        "num_ids": 122
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start > end:\n        return None\n    mid=int((end+start)/2)\n    if array[mid] > mid:\n        return mid\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 103
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end<start:\n        return None\n    if end == start:\n        return end+1\n    if array[start] == start:\n        return start+1\n    i=start+1\n    while i<end:\n        if array[i] - array[start] == start+1:\n            i+=1\n        else:\n            return array[start]+1\n    return array[start]+1\n",
        "num_ids": 113
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    newString = string.replace(\" \",\"%20\")\n    return newString\n",
        "num_ids": 21
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n",
        "num_ids": 15
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "num_ids": 17
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n    # return string.replace(' ', '%20')\n",
        "num_ids": 28
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join([string[i].replace(' ','%20') for i in range(len(string))])\n",
        "num_ids": 30
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "num_ids": 17
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenlist = []\n    oddlist = []\n    for element in list:\n        if element % 2 == 0:\n            evenlist.append(element)\n        else:\n            oddlist.append(element)\n    print(\"Even numbers: \", evenlist)\n    print(\"Odd numbers: \", oddlist)\n",
        "num_ids": 75
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Sort the list.\n    list.sort()\n    # Iterate through the list.\n    for element in list:\n        # If the element is an even number, print it.\n        if element % 2 == 0:\n            print(element)\n            \n",
        "num_ids": 62
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for x in list:\n        if x%2 == 0:\n            even_numbers.append(x)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Your code goes here\n    # Remove pass statement below and write your logic here\n    a = []\n    for i in list:\n        if i % 2 == 0:\n            a.append(i)\n    return a\n",
        "num_ids": 54
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list2=[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            list2.append(list[i])\n    return list2\n",
        "num_ids": 48
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    for num in list:\n        if num%2 == 0:\n            list1.append(num)\n    return list1\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i%2 == 0:\n            even_num.append(i)\n    return even_num\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd_numbers = []\n    for i in list: \n        if (i % 2!= 0):\n            odd_numbers.append(i)\n    return odd_numbers\n",
        "num_ids": 47
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for i in list:\n        if (i % 2 == 0):\n            result.append(i)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = len(list)\n    list2 = []\n    for i in range(0,l):\n        if list[i] % 2 == 0:\n            list2.append(list[i])\n    return list2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2018
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [list(sub) + [x] for x in ele]\n",
        "num_ids": 19
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    return [(x+i,y+j) for i in [-1,0,1] for j in [-1,0,1] if (i,j)!= (0,0)]\n",
        "num_ids": 53
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # your code goes here\n    \n    a, b = ele\n    for i in [-1, 0, 1]:\n        for j in [-1, 0, 1]:\n            if (i, j) == (0, 0):\n                continue\n            else:\n                sub.append((a + i, b + j))\n    return sub\n    \n",
        "num_ids": 83
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adja = [\n        ((ele[0] - 1, ele[1]), 2),\n        ((ele[0], ele[1] + 1), 2),\n        ((ele[0] + 1, ele[1]), 2),\n        ((ele[0], ele[1] - 1), 2)\n    ]\n    \n    if (ele[0], ele[1] + 1) not in sub:\n        adja.append(((ele[0], ele[1] + 1), 1))\n    \n    if (ele[0], ele[1] - 1) not in sub:\n        adja.append(((ele[0], ele[1] - 1), 1))\n    \n    if (ele[0] + 1, ele[1]) not in sub:\n        adja.append(((ele[0] + 1, ele[1]), 1))\n    \n    if (ele[0] - 1, ele[1]) not in sub:\n        adja.append(((ele[0] - 1, ele[1]), 1))\n    \n    return adja\n",
        "num_ids": 250
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0:\n        sub.append((ele[0]-1,ele[1]))\n    if ele[1] > 0:\n        sub.append((ele[0],ele[1]-1))\n    if ele[1] < size[1]-1:\n        sub.append((ele[0],ele[1]+1))\n    if ele[0] < size[0]-1:\n        sub.append((ele[0]+1,ele[1]))\n    return sub\n",
        "num_ids": 120
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    new_sub = []\n    \n    for elem in ele:\n        if elem > 0:\n            new_sub.append(elem-1)\n            new_sub.append(elem+1)\n        else:\n            new_sub.append(elem+1)\n            new_sub.append(elem-1)\n    \n    new_sub = list(set(new_sub))\n    \n    if sub!= []:\n        new_sub = sub + new_sub\n        \n    return new_sub\n    \n    \ndef get_distance(coord, length):\n    '''\n    Write a function that computes the distance between a coordinate (x, y) and a straight line segment. \n    The segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The distance is the square root of the sum of the squares of the differences in x and y.\n    '''\n    \n    x_1, y_1 = coord[0], coord[1]\n    x_2, y_2 = length[0], length[1]\n    \n    x_dif = (x_2 - x_1)**2\n    y_dif = (y_2 - y_1)**2\n    \n    return sqrt(x_dif + y_dif)\n    \n    \ndef get_angle(x_1, y_1, x_2, y_2, x_3, y_3):\n    '''\n    Write a function that computes the angle of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The angle is the angle between the line segment and the horizontal line.\n    '''\n    \n    theta = degrees(atan2(y_2-y_1, x_2-x_1))\n    \n    return theta\n    \n    \ndef get_slope(x_1, y_1, x_2, y_2):\n    '''\n    Write a function that computes the slope of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The slope is the ratio of the change in y over the change in x.\n    '''\n    \n    slope = (y_2-y_1)/(x_2-x_1)\n    \n    return slope\n    \n    \ndef get_all_slopes(coord, length):\n    '''\n    Write a function that computes all the slopes of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The slopes are the slopes of all line segments that make up the line segment.\n    The slopes are computed by calling get_slope.\n    '''\n    \n    slopes = []\n    for elem in adjac(coord, length):\n        slopes.append(get_slope(coord[0], coord[1], elem[0], elem[1]))\n    \n    return slopes\n    \n    \ndef get_intercepts(x_1, y_1, x_2, y_2, x_3, y_3, slopes):\n    '''\n    Write a function that computes the intercepts of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The intercept is the x-value of the y-intercept of the line segment.\n    The intercepts are the x-values of all line segments that make up the line segment.\n    The intercepts are computed by calling get_slope.\n    '''\n    \n    intercepts = []\n    \n    for elem in slopes:\n        intercept = y_1 - elem*x_1\n        \n        intercepts.append(intercept)\n        \n    return intercepts\n    \n    \ndef get_intercept(coord, length):\n    '''\n    Write a function that computes the intercept of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The intercept is the x-value of the y-intercept of the line segment.\n    '''\n    \n    slopes = get_all_slopes(coord, length)\n    \n    intercepts = get_intercepts(coord[0], coord[1], length[0], length[1], coord[0], coord[1], slopes)\n    \n    intercept = intercepts[0]\n    \n    for i in range(len(intercepts)):\n        if intercepts[i] > intercept:\n            intercept = intercepts[i]\n            \n    return intercept\n    \n    \ndef get_y_intercept(coord, length):\n    '''\n    Write a function that computes the y-intercept of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The y-intercept is the y-value of the x-intercept of the line segment.\n    '''\n    \n    slope = get_slope(coord[0], coord[1], length[0], length[1])\n    \n    y_intercept = -1/slope\n    \n    return y_intercept\n    \n    \ndef get_all_y_intercepts(coord, length):\n    '''\n    Write a function that computes all the y-intercepts of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The y-intercepts are the y-values of all line segments that make up the line segment.\n    The y-intercepts are computed by calling get_y_intercept.\n    '''\n    \n    y_intercepts = []\n    \n    for elem in adjac(coord, length):\n        y_intercepts.append(get_y_intercept(coord, elem))\n    \n    return y_intercepts\n    \n    \ndef get_min_y_intercept(coord, length):\n    '''\n    Write a function that computes the minimum y-intercept of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The minimum y-intercept is the y-value of the y-intercept of the line segment with the smallest absolute value.\n    '''\n    \n    all_y_intercepts = get_all_y_intercepts(coord, length)\n    \n    min_y_intercept = min(all_y_intercepts, key=abs)\n    \n    return min_y_intercept\n    \n    \ndef get_max_y_intercept(coord, length):\n    '''\n    Write a function that computes the maximum y-intercept of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The maximum y-intercept is the y-value of the y-intercept of the line segment with the largest absolute value.\n    '''\n    \n    all_y_intercepts = get_all_y_intercepts(coord, length)\n    \n    max_y_intercept = max(all_y_intercepts, key=abs)\n    \n    return max_y_intercept\n    \n    \ndef get_y_intercepts(coord, length):\n    '''\n    Write a function that computes all the y-intercepts of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The y-intercepts are the y-values of all line segments that make up the line segment.\n    The y-intercepts are computed by calling get_y_intercept.\n    '''\n    \n    y_intercepts = []\n    \n    for elem in adjac(coord, length):\n        y_intercepts.append(get_y_intercept(coord, elem))\n    \n    return y_intercepts\n    \n    \ndef get_max_y_intercept(coord, length):\n    '''\n    Write a function that computes the maximum y-intercept of a line segment.\n    The line segment is defined by the endpoints (x1, y1) and (x2, y2).\n    The maximum ",
        "num_ids": 51
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele)==0:\n        return []\n    if len(ele)==1:\n        return [[ele[0]-1, ele[1]], [ele[0]+1, ele[1]], [ele[0], ele[1]-1], [ele[0], ele[1]+1]]\n    else:\n        return [[ele[0]-1, ele[1]], [ele[0]+1, ele[1]], [ele[0], ele[1]-1], [ele[0], ele[1]+1], [ele[0]-1, ele[1]-1], [ele[0]+1, ele[1]-1], [ele[0]-1, ele[1]+1], [ele[0]+1, ele[1]+1]]\n",
        "num_ids": 180
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == ():\n        return []\n    else:\n        return [(ele[0], ele[1] + 1), (ele[0], ele[1] - 1), (ele[0] + 1, ele[1]), (ele[0] - 1, ele[1])]\n",
        "num_ids": 69
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    neighbors = [(x-1, y-1), (x-1, y), (x-1, y+1), (x, y-1), (x, y+1), (x+1, y-1), (x+1, y), (x+1, y+1)]\n    return [(ele + sub) for ele in neighbors if (0 <= ele[0] < 8 and 0 <= ele[1] < 8)]\n",
        "num_ids": 111
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for row in range(ele[0]-1, ele[0]+2):\n        for col in range(ele[1]-1, ele[1]+2):\n            if (row, col)!= ele:\n                adj.append((row, col))\n    return adj\n",
        "num_ids": 70
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\")\n    #return text.replace(\"_\",\" \")\n",
        "num_ids": 25
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    output = \"\"\n    for char in text:\n        if char.isspace():\n            output += '_'\n        else:\n            output += char\n    return output\n",
        "num_ids": 42
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n",
        "num_ids": 13
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Implement your function here\n    new_string = ''\n    for c in text:\n        if c =='':\n            new_string += '_'\n        else:\n            new_string += c\n    return new_string\n",
        "num_ids": 56
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    result = re.sub('[\\s]','_',text)\n    result = re.sub('_',' ',result)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for x in text:\n        if x =='':\n            new_text += '_'\n        else:\n            new_text += x\n    return new_text\n",
        "num_ids": 49
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n    #return text.replace('_','')\n",
        "num_ids": 25
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join(['_' if t =='' else t for t in text])\n",
        "num_ids": 23
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return num_list\n    list_copy = num_list[:]\n    # iterate over num_list\n    for i in range(len(num_list)):\n        # if number is zero\n        if num_list[i] == 0:\n            # move that element to end of list\n            list_copy.append(list_copy.pop(i))\n    return list_copy\n",
        "num_ids": 105
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #return list(filter(lambda x: x!=0,num_list))+[0]*(len(num_list)-len(list(filter(lambda x: x!=0,num_list))))\n    return [i for i in num_list if i!=0]+[0]*(len(num_list)-len(list(filter(lambda x: x!=0,num_list))))\n",
        "num_ids": 98
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [i for i in num_list if i!=0] + [0 for i in num_list if i==0]\n",
        "num_ids": 33
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    for i in num_list:\n        if i == 0:\n            zero_list.append(i)\n    for i in range(len(num_list) - len(zero_list)):\n        zero_list.append(0)\n    return zero_list\n",
        "num_ids": 72
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[len(num_list)-1]\n            num_list[len(num_list)-1] = 0\n    return num_list\n",
        "num_ids": 71
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = [item for item in num_list if item!= 0]\n    num_list.extend([0]*(len(num_list)-len(num_list)))\n    return num_list\n",
        "num_ids": 53
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = [i for i in range(len(num_list)) if num_list[i] == 0]\n    for i in zero_indices:\n        num_list.append(num_list.pop(i))\n    return num_list\n",
        "num_ids": 64
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    m=0\n    for i in range(n):\n        for j in range(i+1,n):\n            m=m^arr[i]^arr[j]\n    return m\n",
        "num_ids": 48
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(len(arr)) : \n        for j in range(i+1,len(arr)) : \n            sum=sum^(arr[i]^arr[j])\n    return sum \n",
        "num_ids": 58
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) :\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return(arr[0]^arr[1]^arr[2]^arr[3]^arr[4]^arr[5]^arr[6]^arr[7]^arr[8]^arr[9])\n",
        "num_ids": 55
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([ arr[i]^arr[i+1] for i in range(n-1) ])\n",
        "num_ids": 28
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    total = 0\n    for i in range(0,n-1) :\n        if arr[i] == arr[i+1] :\n            continue\n        total += arr[i] ^ arr[i+1]\n    return total\n",
        "num_ids": 64
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr1 = arr[:]\n    arr1.sort()\n    tot = 0\n    for i in range(n-1) : \n        for j in range(i+1,n) : \n            if arr1[i] == arr1[j] : \n                continue \n            tot += (arr1[i]^arr1[j])\n    return tot \n",
        "num_ids": 93
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum_xor = sum_xor ^ (arr[i] ^ arr[j])\n    return sum_xor\n",
        "num_ids": 65
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # arr = [2, 3, 1, 4] \n    # n = 4 \n    # ans = 0 \n    # for i in range(len(arr)): \n    #     ans += arr[i] ^ arr[(i + 1) % 4] \n    # return ans \n    return sum([a ^ b for a, b in zip(arr, arr[1:])]) \n",
        "num_ids": 97
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            arr_sum = arr_sum ^ (arr[i] ^ arr[j])\n    return arr_sum\n",
        "num_ids": 61
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort1(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort2(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort3(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort4(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort5(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort6(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort7(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort8(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort9(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort10(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort11(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort12(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort13(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort14(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort15(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort16(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort17(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort18(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort19(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort20(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort21(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort22(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort23(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort24(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort25(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort26(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort27(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort28(iterable,key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef heap_sort29(iterable,key=None):\n    '",
        "num_ids": 55
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Given a list of size n, create a max heap of size n, \n    #then iterate through the list and heapify from the back.\n    #O(n) time\n    h = []\n    for i in range(len(iterable)):\n        hq.heappush(h, iterable[i])\n    sorted_list = []\n    for i in range(len(h)):\n        sorted_list.append(hq.heappop(h))\n    return sorted_list\ndef merge(iterable_1, iterable_2):\n    '''\n    Write a function to merge the two sorted lists. \n    '''\n    #Sort both lists and merge them.\n    #O(n log n) time\n    sorted_list = []\n    while len(iterable_1) > 0 and len(iterable_2) > 0:\n        if iterable_1[0] < iterable_2[0]:\n            sorted_list.append(iterable_1[0])\n            iterable_1.pop(0)\n        else:\n            sorted_list.append(iterable_2[0])\n            iterable_2.pop(0)\n    if len(iterable_1) == 0:\n        sorted_list.extend(iterable_2)\n    if len(iterable_2) == 0:\n        sorted_list.extend(iterable_1)\n    return sorted_list\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Use merge sort to sort the list.\n    #O(n log n) time\n    if len(iterable) < 2:\n        return iterable\n    mid = len(iterable) / 2\n    left_half = iterable[:mid]\n    right_half = iterable[mid:]\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    return merge(left_half, right_half)\ndef find_max_sum(iterable):\n    '''\n    Write a function to find the maximum sum of a non-empty array of numbers \n    with numbers taking either positive or negative values.\n    '''\n    #Use divide and conquer to find the maximum sum of the array.\n    #O(n log n) time\n    def helper(start, end):\n        if start == end:\n            return iterable[start]\n        mid = (start + end) / 2\n        left_sum = helper(start, mid)\n        right_sum = helper(mid+1, end)\n        max_left, max_right = left_sum, right_sum\n        left_sum = iterable[mid]\n        right_sum = 0\n        for i in range(mid, start-1, -1):\n            left_sum += iterable[i]\n            if left_sum > max_left:\n                max_left = left_sum\n        for i in range(mid+1, end+1):\n            right_sum += iterable[i]\n            if right_sum > max_right:\n                max_right = right_sum\n        return max(max_left, max_right)\n    return helper(0, len(iterable)-1)\ndef find_missing(iterable):\n    '''\n    Write a function to find the first missing positive integer in the range [0, n].\n    '''\n    #Use divide and conquer to find the first missing positive integer.\n    #O(n log n) time\n    def helper(start, end):\n        if start == end:\n            return start\n        mid = (start + end) / 2\n        left_missing = helper(start, mid)\n        right_missing = helper(mid+1, end)\n        if left_missing > 0:\n            return left_missing\n        if right_missing > 0:\n            return right_missing\n        left_sum = iterable[mid]\n        right_sum = 0\n        for i in range(mid, start-1, -1):\n            left_sum += iterable[i]\n            if left_sum > left_missing:\n                return left_missing\n        for i in range(mid+1, end+1):\n            right_sum += iterable[i]\n            if right_sum > right_missing:\n                return right_missing\n        return start + 1\n    return helper(0, len(iterable)-1)\ndef find_median(iterable):\n    '''\n    Write a function that takes in a list of numbers and returns the median of the list.\n    If the list is even, take the average of the two middle values.\n    '''\n    #Use divide and conquer to find the median of the list.\n    #O(n log n) time\n    def helper(start, end):\n        if start == end:\n            return iterable[start]\n        mid = (start + end) / 2\n        left_median = helper(start, mid)\n        right_median = helper(mid+1, end)\n        if len(iterable) % 2 == 0:\n            return (left_median + right_median) / 2\n        else:\n            return left_median\n    return helper(0, len(iterable)-1)\ndef find_longest_common_subsequence(string_1, string_2):\n    '''\n    Write a function to find the longest common subsequence between two strings. \n    A subsequence is a string that can be derived from another string by deleting \n    some or no characters without changing the order of the remaining characters.\n    '''\n    #Use divide and conquer to find the longest common subsequence.\n    #O(m * n) time\n    def helper(start_1, end_1, start_2, end_2):\n        if start_1 > end_1 or start_2 > end_2:\n            return 0\n        if start_1 == end_1 and start_2 == end_2:\n            return 1\n        mid_1 = (start_1 + end_1) / 2\n        mid_2 = (start_2 + end_2) / 2\n        left_1 = helper(start_1, mid_1, start_2, mid_2)\n        right_1 = helper(mid_1, end_1, start_2, mid_2)\n        left_2 = helper(start_1, mid_1, mid_2, end_2)\n        right_2 = helper(mid_1, end_1, mid_2, end_2)\n        if string_1[mid_1] == string_2[mid_2]:\n            return left_1 + right_1 + 1\n        else:\n            return max(left_1, right_1, left_2, right_2)\n    return helper(0, len(string_1)-1, 0, len(string_2)-1)\ndef find_maximum_recurring_subsequence(string):\n    '''\n    Write a function that takes in a string and returns the maximum recurring \n    subsequence of the string. A recurring sequence is a sequence of one or more \n    values that are the same and are not separated by a single character.\n    '''\n    #Use divide and conquer to find the maximum recurring subsequence.\n    #O(n * n) time\n    def helper(start, end):\n        if start == end:\n            return 1\n        mid = (start + end) / 2\n        left_count = helper(start, mid)\n        right_count = helper(mid+1, end)\n        if string[mid] == string[mid+1]:\n            return left_count + right_count + 1\n        else:\n            return max(left_count, right_count)\n    return helper(0, len(string)-1)\ndef is_palindrome(iterable):\n    '''\n    Write a function to check if a string is a palindrome. \n    A string is a palindrome if it reads the same forwards and backwards.\n    '''\n    #Use divide and conquer to check if the string is a palindrome.\n    #O(n log n) time\n    def helper(start, end):\n        if start == end:\n            return True\n        mid = (start + end) / 2\n        if iterable[start] == iterable[end]:\n            return helper(start+1, end-1)\n        return False\n    return helper(0, len(iterable)-1)\ndef count_rotations(iterable):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for val in iterable:\n        hq.heappush(l, val)\n    return [hq.heappop(l) for i in xrange(len(l))]\n",
        "num_ids": 52
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [iterable[0]]\n    for i in range(1,len(iterable)):\n        hq.heappush(heap,iterable[i])\n        hq.heappop(heap)\n    return heap\ndef heap_sort_reverse(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [iterable[0]]\n    for i in range(1,len(iterable)):\n        hq.heappush(heap,iterable[i])\n        hq.heappop(heap)\n    return heap\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)>1:\n        mid = len(iterable)//2\n        left = iterable[:mid]\n        right = iterable[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i,j,k = 0,0,0\n        while i<len(left) and j<len(right):\n            if left[i]<right[j]:\n                iterable[k] = left[i]\n                i+=1\n            else:\n                iterable[k] = right[j]\n                j+=1\n            k+=1\n        while i<len(left):\n            iterable[k] = left[i]\n            i+=1\n            k+=1\n        while j<len(right):\n            iterable[k] = right[j]\n            j+=1\n            k+=1\ndef mergesort(iterable,start,end):\n    if end-start>1:\n        mid = (end+start)//2\n        mergesort(iterable,start,mid)\n        mergesort(iterable,mid,end)\n        l = start\n        r = mid\n        i = l\n        while l<mid and r<end:\n            if iterable[l]<iterable[r]:\n                l+=1\n            else:\n                iterable[i]=iterable[l]\n                l+=1\n            i+=1\n        while l<mid:\n            iterable[i]=iterable[l]\n            l+=1\n            i+=1\n        while r<end:\n            iterable[i]=iterable[r]\n            r+=1\n            i+=1\ndef count_sort(iterable,max_num):\n    '''\n    Write a function to sort the given list.\n    '''\n    count = [0]*(max_num+1)\n    for i in iterable:\n        count[i]+=1\n    i = 0\n    for j in range(len(count)):\n        for k in range(count[j]):\n            iterable[i]=j\n            i+=1\n    return iterable\ndef counting_sort_reverse(iterable,max_num):\n    '''\n    Write a function to sort the given list.\n    '''\n    count = [0]*(max_num+1)\n    for i in iterable:\n        count[i]+=1\n    i = 0\n    for j in range(len(count)-1,-1,-1):\n        for k in range(count[j]):\n            iterable[i]=j\n            i+=1\n    return iterable\ndef radix_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)>1:\n        max_num = max(iterable)\n        exp = 1\n        while max_num/exp>0:\n            count_sort(iterable,max_num)\n            exp*=10\ndef radix_sort_reverse(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)>1:\n        max_num = max(iterable)\n        exp = 1\n        while max_num/exp>0:\n            count_sort_reverse(iterable,max_num)\n            exp*=10\ndef bitonic_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)>1:\n        if len(iterable)%2==0:\n            mid = len(iterable)//2\n            left = iterable[:mid]\n            right = iterable[mid:]\n            bitonic_sort(left)\n            bitonic_sort(right)\n            i,j,k = 0,0,0\n            while i<len(left) and j<len(right):\n                if left[i]<right[j]:\n                    iterable[k] = left[i]\n                    i+=1\n                else:\n                    iterable[k] = right[j]\n                    j+=1\n                k+=1\n            while i<len(left):\n                iterable[k] = left[i]\n                i+=1\n                k+=1\n            while j<len(right):\n                iterable[k] = right[j]\n                j+=1\n                k+=1\n        else:\n            mid = len(iterable)//2\n            left = iterable[:mid]\n            right = iterable[mid+1:]\n            bitonic_sort(left)\n            bitonic_sort(right)\n            i,j,k = 0,0,0\n            while i<len(left) and j<len(right):\n                if left[i]<right[j]:\n                    iterable[k] = left[i]\n                    i+=1\n                else:\n                    iterable[k] = right[j]\n                    j+=1\n                k+=1\n            while i<len(left):\n                iterable[k] = left[i]\n                i+=1\n                k+=1\n            while j<len(right):\n                iterable[k] = right[j]\n                j+=1\n                k+=1\ndef bitonic_sort_reverse(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)>1:\n        if len(iterable)%2==0:\n            mid = len(iterable)//2\n            left = iterable[:mid]\n            right = iterable[mid:]\n            bitonic_sort_reverse(left)\n            bitonic_sort_reverse(right)\n            i,j,k = 0,0,0\n            while i<len(left) and j<len(right):\n                if left[i]<right[j]:\n                    iterable[k] = left[i]\n                    i+=1\n                else:\n                    iterable[k] = right[j]\n                    j+=1\n                k+=1\n            while i<len(left):\n                iterable[k] = left[i]\n                i+=1\n                k+=1\n            while j<len(right):\n                iterable[k] = right[j]\n                j+=1\n                k+=1\n        else:\n            mid = len(iterable)//2\n            left = iterable[:mid]\n            right = iterable[mid+1:]\n            bitonic_sort_reverse(left)\n            bitonic_sort_reverse(right)\n            i,j,k = 0,0,0\n            while i<len(left) and j<len(right):\n                if left[i]<right[j]:\n                    iterable[k] = left[i]\n                    i+=1\n                else:\n                    iterable[k] = right[j]\n                    j+=1\n                k+=1\n            while i<len(left):\n                iterable[k] = left[i]\n                i+=1\n                k+=1\n            while j<len(right):\n                iterable[k] = right[j]\n                j+=1\n                k+=1\ndef bubble_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)>1:\n        for i in range(len(iterable)-1):\n            for j in range(len(iterable)-i-1):\n                if iterable[j]>iterable[j+1]:\n                    iterable[j],iterable[j+1] = iterable[j+1],iterable[j]\ndef bubble_sort_reverse(iterable):\n    '''\n    Write a function to sort the given list",
        "num_ids": 11
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heapify(iterable):\n        hq._heapify_max(iterable)\n    def siftdown(iterable, startpos, pos):\n        newitem = iterable[pos]\n        # Follow the path to the root, moving parents down until finding a place\n        # newitem fits.\n        while pos > startpos:\n            parentpos = (pos - 1) >> 1\n            parent = iterable[parentpos]\n            if newitem < parent:\n                iterable[pos] = parent\n                pos = parentpos\n                continue\n            break\n        iterable[pos] = newitem\n    # The main function to sort the iterable\n    def heappush(iterable):\n        hq._heappush_max(iterable)\n    def heappop(iterable):\n        return hq._heappop_max(iterable)\n    def heapreplace(iterable):\n        hq._heapreplace_max(iterable)\n    # The following is the original sort algorithm,\n    # but modified to be a max heap\n    hq._heapify_max = hq._heapify\n    hq._heapify = heapify\n    hq._heappop_max = hq._heappop\n    hq._heapreplace_max = hq._heapreplace\n    hq._heapify_max = heapify\n    hq._heapify = heapify\n    hq._heappop = heappop\n    hq._heapreplace = heapreplace\n    hq._heapify_max = heapify\n    hq._heapify = heapify\n    hq._heappop_max = heappop\n    hq._heapreplace_max = heapreplace\n    if __name__ == \"__main__\":\n        A = [9,6,2,3,7,4,8,5,1,0,6,4,7,2,1,8,4,0,5,9,8,5,3,4,3,6,7,2,3,4,6,5,8,1,0,3,3,6,7,2,3,2,4,6,4,7,0,6,8,0,4,2,3,2,7,8,4,8,7,0,5,3,1,2,9,3,4,1,6,7,1,9,3,4,1,7,2,4,2,0,8,4,3,4,1,9,1,6,7,5,3,2,7,3,2,5,3,5,2,1,1,1,8,8,8,6,2,7,5,4,7,2,9,7,8,5,9,3,0,6,2,9,8,3,2,5,9,2,1,5,4,1,3,1,4,1,4,8,7,7,4,1,1,4,5,5,4,8,7,1,1,3,3,4,3,3,7,3,2,2,1,2,0,6,0,1,5,3,4,9,7,2,7,7,8,3,1,2,1,0,2,3,2,8,9,3,1,7,4,2,3,0,6,7,8,5,5,2,9,3,1,1,5,1,1,7,8,7,8,4,9,4,3,1,5,1,4,3,3,8,6,3,7,9,0,7,1,1,4,7,6,3,1,4,9,0,4,4,8,6,8,1,8,6,1,3,9,4,5,6,9,4,3,3,5,7,8,6,4,6,9,6,6,5,1,5,1,1,9,1,8,4,7,1,1,6,3,1,2,9,4,3,1,1,3,5,1,4,2,2,3,1,6,1,8,1,8,1,2,4,2,5,6,6,2,1,1,1,1,2,0,4,0,4,2,6,3,2,2,5,0,1,7,0,4,5,3,0,9,2,2,7,8,6,9,4,4,7,5,1,3,1,1,0,0,7,2,1,8,1,5,4,1,7,1,4,1,9,1,6,6,3,1,2,4,1,1,3,1,1,3,4,0,1,3,5,2,7,0,5,2,8,4,3,4,2,6,1,4,4,0,1,4,1,1,2,2,1,1,2,1,3,0,0,5,1,2,0,2,0,7,1,1,1,6,1,2,1,1,2,1,1,1,6,1,2,2,6,1,8,1,8,1,3,1,4,1,1,1,2,1,1,1,1,0,1,1,1,1,2,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "num_ids": 2014
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = len(iterable)\n    for i in xrange(l):\n        l1 = []\n        for j in xrange(l):\n            if j!= i:\n                l1.append(iterable[j])\n        l2 = []\n        for j in xrange(l):\n            if j!= i:\n                l2.append(iterable[j])\n        sorted(l1)\n        sorted(l2)\n        for j in xrange(l):\n            if j!= i:\n                iterable[j] = l1.pop()\n                iterable[j] = l2.pop()\n    return iterable\n",
        "num_ids": 158
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for _ in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for i in iterable:\n        hq.append(i)\n    hq.sort()\n    return hq\n",
        "num_ids": 37
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    elif actual_cost>sale_amount:\n        return False\n    else:\n        return False\n        \n        \n    \ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if actual_cost<sale_amount:\n        return False\n    elif actual_cost==sale_amount:\n        return True\n    else:\n        return True\n        \n        \ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return True\n    elif actual_cost==sale_amount:\n        return True\n    else:\n        return False\n        \n        \ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has a profit and loss\n    '''\n    if actual_cost<sale_amount:\n        return False\n    elif actual_cost==sale_amount:\n        return True\n    else:\n        return True\n        \n        \ndef max_profit(actual_cost,sale_amount): \n    '''\n    Write a function to find the maximum profit for a given sale amount\n    '''\n    if noprofit_noloss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    elif profit_noloss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef max_loss(actual_cost,sale_amount): \n    '''\n    Write a function to find the maximum loss for a given sale amount\n    '''\n    if noprofit_loss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    elif profit_loss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef min_loss(actual_cost,sale_amount): \n    '''\n    Write a function to find the minimum loss for a given sale amount\n    '''\n    if noprofit_loss(actual_cost,sale_amount):\n        return actual_cost-sale_amount\n    elif profit_loss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef max_profit(actual_cost,sale_amount): \n    '''\n    Write a function to find the maximum profit for a given sale amount\n    '''\n    if noprofit_profit(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    elif profit_profit(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost<sale_amount:\n        return False\n    elif actual_cost==sale_amount:\n        return True\n    else:\n        return True\n        \n        \ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return True\n    elif actual_cost==sale_amount:\n        return True\n    else:\n        return False\n        \n        \ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has a profit and no loss\n    '''\n    if actual_cost<sale_amount:\n        return False\n    elif actual_cost==sale_amount:\n        return True\n    else:\n        return True\n        \n        \ndef max_profit(actual_cost,sale_amount): \n    '''\n    Write a function to find the maximum profit for a given sale amount\n    '''\n    if noprofit_noloss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    elif profit_noloss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef max_loss(actual_cost,sale_amount): \n    '''\n    Write a function to find the maximum loss for a given sale amount\n    '''\n    if noprofit_loss(actual_cost,sale_amount):\n        return actual_cost-sale_amount\n    elif profit_loss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef min_loss(actual_cost,sale_amount): \n    '''\n    Write a function to find the minimum loss for a given sale amount\n    '''\n    if noprofit_loss(actual_cost,sale_amount):\n        return actual_cost-sale_amount\n    elif profit_loss(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef max_profit(actual_cost,sale_amount): \n    '''\n    Write a function to find the maximum profit for a given sale amount\n    '''\n    if noprofit_profit(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    elif profit_profit(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef min_profit(actual_cost,sale_amount): \n    '''\n    Write a function to find the minimum profit for a given sale amount\n    '''\n    if noprofit_profit(actual_cost,sale_amount):\n        return actual_cost-sale_amount\n    elif profit_profit(actual_cost,sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n        \ndef total_max_profit(actual_cost,sale_amount): \n    '''\n    Write a function to find the total maximum profit for a given sale amount\n    '''\n    if noprofit_noloss(actual_cost,sale_amount):\n        return max_profit(actual_cost,sale_amount)*noprofit_noloss(actual_cost,sale_amount)\n    elif profit_noloss(actual_cost,sale_amount):\n        return max_profit(actual_cost,sale_amount)*profit_noloss(actual_cost,sale_amount)\n    else:\n        return max_profit(actual_cost,sale_amount)*max_profit(actual_cost,sale_amount)\n        \n        \ndef total_max_loss(actual_cost,sale_amount): \n    '''\n    Write a function to find the total maximum profit for a given sale amount\n    '''\n    if noprofit_noloss(actual_cost,sale_amount):\n        return max_loss(actual_cost,sale_amount)*noprofit_noloss(actual_cost,sale_amount)\n    elif profit_noloss(actual_cost,sale_amount):\n        return max_loss(actual_cost,sale_amount)*profit_noloss(actual_cost,sale_amount)\n    else:\n        return max_loss(actual_cost,sale_amount)*max_loss(actual_cost,sale_amount)\n        \n        \ndef total_min_profit(actual_cost,sale_amount): \n    '''\n    Write a function to find the total minimum profit for a given sale amount\n    '''\n    if noprofit_noloss(actual_cost,sale_amount):\n        return min_profit(actual_cost,sale_amount)*noprofit_noloss(actual_cost,sale_amount)\n    elif profit_noloss(actual_cost,sale_amount):\n        return min_profit(actual_cost,sale_amount)*profit_noloss(actual_cost,sale_amount)\n    else:\n        return min_profit(actual_cost,sale",
        "num_ids": 116
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: \n        return False\n    else: \n        return True\n",
        "num_ids": 27
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost==0 or sale_amount==0\n",
        "num_ids": 16
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n    \ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit or loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False\n    \ndef profit_loss_1(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit or loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        for j in range(len(actual_cost)-i-1):\n            if actual_cost[j]>actual_cost[j+1]:\n                return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    \n    if (actual_cost > sale_amount):\n        return False\n    elif (actual_cost < sale_amount):\n        return False\n    else:\n        return True\n    ",
        "num_ids": 70
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return noprofit_noloss(sale_amount - actual_cost, actual_cost)\n",
        "num_ids": 61
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    if t > 50:\n        t = 50\n    if v < 3:\n        v = 3\n    elif v > 50:\n        v = 50\n",
        "num_ids": 41
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v/3.6\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    v = math.pow(v,0.16)\n    t = (9./5.)*t + 32\n    return round(a + (b*t) + (c*v) + (d*t*v))\n",
        "num_ids": 95
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<=3:\n        wc=35.74+0.6215*t+(-35.75*v**0.16)+0.4275*t*v**0.16\n        return math.ceil(wc)\n    else:\n        wc=35.74+0.6215*t+(-35.75*v**0.16)+0.4275*t*v**0.16\n        return math.floor(wc)\n",
        "num_ids": 113
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215 * t + (35.75 * v ** 0.16) - (0.4275 * t) * (v ** 0.16)\n    wci = round(wci)\n    return wci\n",
        "num_ids": 61
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 0.000621371\n    t = (t * 9.0/5.0) + 32\n    wci = 13.12 + (0.6215*t) + (11.37*v) - (35.75*t*v) + (0.3965*t*t)\n    return round(wci)\n",
        "num_ids": 85
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # v=float(input('Enter wind speed in km/h: '))\n    # t=float(input('Enter temperature in celsius: '))\n    a=35.74\n    b=0.6215\n    c=35.75\n    d=0.4275\n    v=(v*math.pi)/30\n    wci=a+(b*t)+(c*t)-(d*v*v)\n    wci=(round(wci,0))\n    return wci\n",
        "num_ids": 119
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 40:\n        wci = 35.74 + 0.6215 * t + (0.4275 * t) - 35.75 * math.pow(v, 0.16) + 0.4275 * math.pow(v, 0.16)\n    else:\n        wci = -22.90 + 0.6215 * t + (0.4275 * t) - 35.75 * math.pow(v, 0.16) + 0.4275 * math.pow(v, 0.16)\n    return int(wci)\n",
        "num_ids": 136
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert to degrees and round\n    v_c = math.ceil(v)\n    t_c = math.ceil(t)\n",
        "num_ids": 36
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #convert temperature to fahrenheit\n    t=(t*1.8)+32\n    #calculate wind chill\n    wind_chill=(35.74 + 0.6215*t + (0.4275*t - 35.75)*v**0.16)\n    return math.ceil(wind_chill)\n",
        "num_ids": 80
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_mod = v/3.6\n    a = 13.12 + (0.6215*t) - (11.37*(v_mod**0.16)) + (0.3965*(t**2))\n    return round(a)\n",
        "num_ids": 63
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n    return sum([len(x) for x in sample_names if x[0].isupper()])\n    \n    \ndef sample_nam1(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(x) for x in sample_names if x[0].isupper())\n    \n    \ndef sample_nam2(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam3(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(x) for x in sample_names if x[0].isupper())\n    \n    \ndef sample_nam4(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam5(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam6(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam7(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam8(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam9(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam10(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam11(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam12(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam13(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam14(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam15(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam16(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam17(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam18(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam19(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam20(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam21(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam22(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam23(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam24(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    \ndef sample_nam25(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, (x for x in sample_names if x[0].isupper())))\n    \n    ",
        "num_ids": 31
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import random\n    return sum(len(name) for name in sample_names if name[0].isupper() == False)\n",
        "num_ids": 32
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if not name[0].islower())\n",
        "num_ids": 26
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_length = 0\n    for i in sample_names:\n        if i[0].isupper():\n            sum_of_length += len(i)\n    print(\"The total length of the names is\", sum_of_length)\n",
        "num_ids": 60
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_length = 0\n    for sample_name in sample_names:\n        if sample_name[0].isupper():\n            sum_of_length += len(sample_name)\n    return sum_of_length\n",
        "num_ids": 56
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def nam_sum(sample_names):\n        return sum(len(name) for name in sample_names if name.lower().startswith('a'))\n    return nam_sum(sample_names)\n",
        "num_ids": 53
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count+=len(name)\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if i[0]!= 'a' and i[0]!= 'A' and i[0]!= 'b' and i[0]!= 'B':\n            count += len(i)\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # import re\n    # re_match_lower = re.compile(r'^[a-z]+')\n    # len_names = 0\n    # for name in sample_names:\n    #     if re_match_lower.search(name):\n    #         len_names += len(name)\n    #     else:\n    #         pass\n    # print len_names\n    # return len_names\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n",
        "num_ids": 124
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items[0] == '(':\n        del items[0]\n    if items[-1] == ')':\n        del items[-1]\n    return ''.join(items)\n",
        "num_ids": 48
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\(.*?\\)', '', items)\n",
        "num_ids": 21
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_item = item.replace('(', '')\n        new_item = new_item.replace(')', '')\n        new_item = new_item.strip()\n        new_items.append(new_item)\n    return new_items\n",
        "num_ids": 76
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    ret = ''\n    #print 'The items are', items\n    for i in items:\n        if i == '(':\n            i = '{'\n        if i == ')':\n            i = '}'\n        ret = ret + i\n    #print 'The final string', ret\n    return ret\n",
        "num_ids": 74
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_list = []\n    for i in items:\n        new_list.append(re.sub(r'\\([^()]+\\)', '', i))\n    return new_list\n",
        "num_ids": 47
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    for i in range(len(items)):\n        items[i] = re.sub('\\([^)]*\\)', '', items[i])\n    return items\n",
        "num_ids": 44
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i = 0\n    new_list = []\n    while i < len(items):\n        if items[i] == '(' and items[i+1] == ')':\n            new_list.append(items[i])\n            new_list.append(items[i+2])\n            i += 2\n        else:\n            new_list.append(items[i])\n            i += 1\n    return new_list\n",
        "num_ids": 102
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string = items\n    string = re.sub(r\"\\([^)]*\\)\", \"\", string)\n    return string\n",
        "num_ids": 32
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^\\(\\)]*\\)', '', items)\n    \ndef remove_multiple_spaces(items):\n    '''\n    Write a function to remove the multiple spaces from the string.\n    '''\n    return re.sub(r'\\s\\s+','', items)\n    \ndef to_lowercase(items):\n    '''\n    Write a function to convert the first letter of every word to lower case.\n    '''\n    return items.lower()\n",
        "num_ids": 9
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #print items\n    if items[0]=='(':\n        pos=0\n        while items[pos]!=')':\n            pos+=1\n        items=items[pos+1:]\n        #print items\n    if items[-1]==')':\n        pos=len(items)-1\n        while items[pos]!='(':\n            pos-=1\n        items=items[:pos]\n        #print items\n    return items\n",
        "num_ids": 109
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # we can see that the first nonagonal number is 1. \n    # in other words, 1 is the square of 1\n    # we can see that the second nonagonal number is 1+1 = 2\n    # in other words, 1+1 is the square of 2\n    # we can see that the third nonagonal number is 2+1 = 3\n    # in other words, 2+1 is the square of 3\n    # we can see that the fourth nonagonal number is 3+1 = 4\n    # and so on. \n    return ((n*(n+1))/2)**2 == n*(n+1)\n",
        "num_ids": 147
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n+1)*(n+2))//2\n",
        "num_ids": 17
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # 1, 3, 6, 10, 15,...\n    # 1, 3, 5, 7, 9,..\n    # 1, 4, 7, 10, 13,...\n    # 1, 4, 5, 6, 8,..\n    # 1, 5, 8, 11, 14,...\n    # 1, 6, 11, 14, 19,...\n    # 1, 8, 15, 22, 29,...\n    # 1, 9, 18, 27, 35,...\n    # 1, 10, 19, 28, 36,...\n    \n    if n % 2 == 1:\n        return n\n    else:\n        return n-1\n    \n",
        "num_ids": 150
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    def is_even(n):\n        '''\n        A nonagonal number is of the form n^2 + n - 2\n        '''\n        return n == n**2 + n - 2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n**2+n)%2==1\n",
        "num_ids": 16
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = 0\n    for i in xrange(1,n):\n        s += i\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return 3*n*(n-1)/2\n",
        "num_ids": 49
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    for i in range(n-1):\n        num += i\n    num += 1\n    return num\n",
        "num_ids": 32
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return False\n    \n    square = n * n\n    if (n == 1):\n        return 1\n",
        "num_ids": 34
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]','',text)\n    for word in text.split():\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search(r'(^[^z]|[^z]$)z', text))\n",
        "num_ids": 30
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_lower = text.lower()\n    if text_lower.count('z')==1 and text_lower.startswith('z') and text_lower.endswith('z'):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # only check words\n    if not re.search(r'\\b\\w{1,}\\w*\\b', text):\n        return False\n    # check for 'z' in the middle\n    if re.search(r'\\b\\w*z\\b', text):\n        return False\n    # if none of the above, return True\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # if re.search(r'z', text, re.I):\n    #     return True\n    # return False\n",
        "num_ids": 31
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text)==0:\n        return False\n    else:\n        text=text.lower()\n        if text[0]=='z':\n            return False\n        if text[-1]=='z':\n            return False\n        else:\n            for c in text:\n                if c=='z':\n                    return False\n            return True\n",
        "num_ids": 86
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.*z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_1(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.+z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{1}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{2}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{3}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{4}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{5}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{6}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{7}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{8}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{9}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{10}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{11}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{12}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{13}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{14}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{15}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_17(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{16}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_18(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{17}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_19(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{18}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_20(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{19}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_21(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{20}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_22(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{21}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_23(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{22}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_24(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{23}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_25(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{24}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_26(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{25}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_27(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{26}z\", text):\n        return True\n    return False\ndef text_match_wordz_middle_28(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z.{27}z\", text):\n    ",
        "num_ids": 19
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    new_text = re.sub('z', '', text)\n    if text[0]=='z' or text[-1]=='z':\n        return False\n    return new_text[1:-1].lower().strip() == text[1:-1].lower().strip()\n",
        "num_ids": 69
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search(r'\\bz',text))\n",
        "num_ids": 19
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('z',text)\n",
        "num_ids": 13
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input is None:\n        return\n    reverse_Array_Upto_K(input[1:k],k)\n    print input[k-1],\n    reverse_Array_Upto_K(input[k:], k)\n",
        "num_ids": 60
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[-k::]\n",
        "num_ids": 11
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    list_reverse = input[::-1]\n    return list_reverse[:k]\n",
        "num_ids": 24
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    #Base Case : \n    if len(input) < k : \n        return input[::-1]\n",
        "num_ids": 31
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_Array(input, 0, k - 1) \n    reverse_Array(input, k, len(input) - 1) \n    reverse_Array(input, 0, len(input) - 1) \n",
        "num_ids": 53
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    return input[len(input) - k : ] + input[ : len(input) - k ] \n",
        "num_ids": 40
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_Upto_K(input,k):\n        if k == 0:\n            return input\n        elif k == 1:\n            return [input[-1]] + input[:-1]\n        else:\n            return input[-1:] + reverse_Array_Upto_K(input[:-1], k-1)\n",
        "num_ids": 85
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k] + input[::-1] + input[k:]\n",
        "num_ids": 22
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    i = 0\n    while i < k:\n        arr.append(input[len(input) - 1 - i])\n        i += 1\n    return arr\n",
        "num_ids": 45
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (k>= len(input)): \n        return input\n    return input[k: ] + input[0: k]\n",
        "num_ids": 34
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "num_ids": 18
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # YOUR CODE HERE\n    test_tup = tuple([test_tup[0], test_tup[1]])\n    for key in test_dict:\n        test_tup = tuple(test_tup + (test_dict[key],))\n    return test_tup\n",
        "num_ids": 70
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "num_ids": 18
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.values())\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # remove the tuple '()'\n    tup = str(test_tup)[1:-1]\n    # create a list of the key value pairs\n    tup_lst = tup.split(',')\n    # create a new list to add the key value pairs to\n    new_tup = []\n    # loop through the list and add the key value pairs\n    for pair in tup_lst:\n        pair_lst = pair.split(':')\n        new_tup.append(tuple(pair_lst))\n    # create a tuple out of the new list\n    new_tup = tuple(new_tup)\n    # create a new tuple out of the new tuple and the dictionary\n    new_tup = (new_tup, test_dict)\n    # return the new tuple\n    return new_tup\n",
        "num_ids": 200
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = list(test_tup)\n    new_tup.append(test_dict)\n    return tuple(new_tup)\n",
        "num_ids": 39
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    out_tup = []\n    for i in range(len(test_tup)):\n        out_tup.append(test_tup[i] + test_dict[i])\n    return tuple(out_tup)\n",
        "num_ids": 58
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (*test_tup, test_dict)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # i need to take care of the case when the key is not in the dictionary.\n    # the code should raise a KeyError.\n    return tuple([*test_tup, **test_dict])\n",
        "num_ids": 49
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    if len(cost) == 1:\n        return cost[0][0]\n",
        "num_ids": 35
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n",
        "num_ids": 21
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost)==0:\n        return 0\n    dp = [[0 for i in range(len(cost[0]))] for j in range(len(cost))]\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i==0 and j==0:\n                dp[i][j] = cost[i][j]\n            elif i==0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j==0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n    return dp[len(cost)-1][len(cost[0])-1]/float(len(cost))\n",
        "num_ids": 229
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    # dp = [[0]*(n+1) for _ in xrange(m+1)]\n    dp = [ [0]*(n+1) for _ in range(m+1) ]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n    return dp[-1][-1]/float(n*m)\n",
        "num_ids": 155
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Here the cost is a dp array and the problem is to find the maximum average cost of paths\n    # The idea is to use dp to store the maximum average cost of the path ending at cell [i][j]\n    # for each cell [i][j], we use the path with max average cost ending at cell [i][j] to compute the average path ending at cell [i][j]\n    \n    # let dp[i][j] be the maximum average cost of a path ending at cell [i][j]\n    # dp[i][j] = max(dp[i-1][j],dp[i][j-1])+cost[i][j]\n    # hence, dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n    # dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + cost[i][j]\n    # dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0 and j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # we then have that, for each cell [i][j], the maximum average cost of a path ending at cell [i][j] is dp[i][j]. But, if i>0 and j>0, then we have to account for two cases\n    # (i,j) is a corner point\n    # (i-1,j) or (i,j-1) is a corner point\n    # hence, dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    \n    # For dp[i][j], we have two cases\n    # 1) (i,j) is a corner point\n    # 2) (i,j) is a non-corner point\n    \n    # so, dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0 and j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # And if we have [i][j] = -1, it means we never had visited this cell, hence we should skip it when computing the average\n    # dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0 and j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # for each cell [i][j] we have two cases\n    # (i,j) is a corner point\n    # (i-1,j) or (i,j-1) is a corner point\n    # hence, dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    # if i>0 and j>0: dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])\n    \n    # when (i,j) is a non-corner point, we just need to return dp[i][j]\n    # when (i,j) is a corner point, we have to return dp[i][j] + cost[i][j]\n    \n    N = len(cost)\n    if N == 0:\n        return 0\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n    for j in range(1,N):\n        dp[0][j] = cost[0][j]\n    for i in range(1,N):\n        for j in range(1,N):\n            dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n    res = 0\n    for i in range(N):\n        res = max(res,dp[N-1][i])\n    return res\n",
        "num_ids": 1366
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost is None or len(cost) == 0:\n        return 0\n    rows = len(cost)\n    cols = len(cost[0])\n    if rows == 1 and cols == 1:\n        return cost[0][0]\n    max_cost = 0\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                max_cost = cost[i][j]\n            elif i == 0:\n                max_cost = max(max_cost, cost[i][j] + cost[i][j - 1])\n            elif j == 0:\n                max_cost = max(max_cost, cost[i][j] + cost[i - 1][j])\n            else:\n                max_cost = max(max_cost, cost[i][j] + max(cost[i - 1][j], cost[i][j - 1]))\n    return max_cost / float(rows * cols)\n",
        "num_ids": 235
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    rows, cols = n, n\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(rows):\n        for j in xrange(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j - 1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i - 1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n - 1][n - 1] / float(n * n)\n",
        "num_ids": 215
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    table = [ [0 for i in range(len(cost[0]))] for j in range(len(cost))]\n    for i in range(len(cost)):\n        table[i][0] = cost[i][0]\n    for j in range(1,len(cost[0])):\n        table[0][j] = table[0][j-1] + cost[0][j]\n    for i in range(1,len(cost)):\n        table[i][0] = table[i-1][0] + cost[i][0]\n    for i in range(1,len(cost)):\n        for j in range(1,len(cost[0])):\n            table[i][j] = min(table[i-1][j-1],table[i-1][j],table[i][j-1]) + cost[i][j]\n    return table[-1][-1]/len(cost)\n",
        "num_ids": 227
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n    max_avg = 0\n    dp = [[0 for j in range(col)] for i in range(row)]\n    for i in range(row):\n        dp[i][0] = cost[i][0]\n    for j in range(col):\n        dp[0][j] = cost[0][j]\n",
        "num_ids": 96
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    max_cost = -inf\n    for row in range(rows):\n        for col in range(cols):\n            if row == 0 and col == 0:\n                max_cost = cost[row][col]\n            elif row == 0:\n                max_cost = max(max_cost, cost[row][col] + max_cost)\n            elif col == 0:\n                max_cost = max(max_cost, cost[row][col] + max_cost)\n            else:\n                max_cost = max(max_cost, cost[row][col] + cost[row - 1][col] + cost[row][col - 1])\n    return max_cost / float(rows * cols)\n",
        "num_ids": 187
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = {}\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            out[student] = students[student]\n    return out\n",
        "num_ids": 52
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students.keys():\n        if student not in h.keys() or student not in w.keys():\n            pass\n        elif students[student][0] > h[student] and students[student][1] > w[student]:\n            filtered_students[student] = students[student]\n        else:\n            pass\n    return filtered_students\n",
        "num_ids": 97
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key,value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students\n",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [student for student in students if student[1][0] > h and student[1][1] > w]\n",
        "num_ids": 30
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_students = {}\n    for student,data in students.items():\n        height,weight = data\n        if height > h and weight > w:\n            filter_students[student] = data\n    return filter_students\n",
        "num_ids": 57
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            filtered_students[student] = students[student]\n    return filtered_students\n",
        "num_ids": 63
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height = min(students.values(), key=lambda x: x[0])[0]\n    min_weight = min(students.values(), key=lambda x: x[1])[1]\n    res = {}\n    for s in students:\n        if students[s][0] > min_height and students[s][1] > min_weight:\n            res[s] = students[s]\n    return res\n",
        "num_ids": 104
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # students = {'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Sunny': (5.6, 70.0), 'Ajay': (6.0, 70.0), 'Deepika': (5.7, 70.0), 'Jaya': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Ajay': (6.0, 70.0), 'Sunny': (5.6, 70.0), 'Deepika': (5.7, 70.0), 'Jaya': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Sunny': (5.6, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Jaya': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Ajay': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Jaya': (6.0, 70.0)}\n    \n    # students = {'Ajay': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Sunny': (5.6, 70.0), 'Jaya': (6.0, 70.0), 'Deepika': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Akshat': (5.7, 70.0), 'Jaya': (6.0, 70.0)}\n    \n    # students = {'Ajay': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Sunny': (5.6, 70.0), 'Ajay': (6.0, 70.0), 'Deepika': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Akshat': (5.7, 70.0), 'Jaya': (6.0, 70.0)}\n    \n    \n    # students = {'Ajay': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Sunny': (5.6, 70.0), 'Ajay': (6.0, 70.0), 'Deepika': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Akshat': (5.7, 70.0), 'Jaya': (6.0, 70.0)}\n    \n    # students = {'Ajay': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Sunny': (5.6, 70.0), 'Ajay': (6.0, 70.0), 'Deepika': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Akshat': (5.7, 70.0), 'Jaya': (6.0, 70.0)}\n    \n    \n    # students = {'Ajay': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Sunny': (5.6, 70.0), 'Ajay': (6.0, 70.0), 'Deepika': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Akshat': (5.7, 70.0), 'Jaya': (6.0, 70.0)}\n    \n    \n    # students = {'Ajay': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Sunny': (5.6, 70.0), 'Ajay': (6.0, 70.0), 'Deepika': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Ajay': (6.0, 70.0), 'Abhijit': (6.0, 70.0), 'Akshat': (5.7, 70.0), 'Abhijit': (6.0, 70.0), 'Aksha",
        "num_ids": 1971
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n",
        "num_ids": 61
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in xrange(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef find_min_max_diff(nums):\n    '''\n    The input is a list of integers. Find the pair of numbers whose absolute difference is closest to 0.\n    '''\n    diff = float('inf')\n    min_val = max_val = float('-inf')\n    for i in xrange(len(nums)):\n        for j in xrange(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) < diff:\n                diff = abs(nums[i] - nums[j])\n                min_val, max_val = min(nums[i], nums[j]), max(nums[i], nums[j])\n    return min_val, max_val, diff\ndef string_match(A, B):\n    '''\n    The input is two strings. Return the longest common substring.\n    '''\n    def get_substrings(word1, word2):\n        substrings = []\n        for i in xrange(len(word1)):\n            for j in xrange(len(word2)):\n                if i+j < len(word1) and word1[i] == word2[j]:\n                    substrings.append(word1[i:i+j+1])\n        return substrings\n    def helper(word1, word2, start1, start2):\n        nonlocal count\n        if start1 >= len(word1) or start2 >= len(word2):\n            return\n        if word1[start1] == word2[start2]:\n            count += 1\n            helper(word1, word2, start1+1, start2+1)\n        helper(word1, word2, start1+1, start2)\n        helper(word1, word2, start1, start2+1)\n    count = 0\n    substrings = get_substrings(A, B)\n    for substring in substrings:\n        count = max(count, count_same_pair(A, substring))\n        count = max(count, count_same_pair(B, substring))\n    return count\ndef string_rotation(string1, string2):\n    '''\n    The input is two strings. Return true if the strings are rotation of each other.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    for i in xrange(len(string1)):\n        if string1[i:] + string1[:i] == string2:\n            return True\n    return False\ndef rotate_matrix(matrix):\n    '''\n    The input is a 2-d array of integers.\n    '''\n    def rotate_layer(layer):\n        nonlocal matrix\n        new_layer = []\n        for i in xrange(len(layer)):\n            row = []\n            for j in xrange(len(layer)-1, -1, -1):\n                row.append(layer[j][i])\n            new_layer.append(row)\n        matrix = new_layer\n    for layer in xrange(len(matrix) // 2):\n        rotate_layer(matrix[layer])\n    return matrix\ndef is_unique(string):\n    '''\n    The input is a string.\n    '''\n    seen = set()\n    for i in xrange(len(string)):\n        if string[i] in seen:\n            return False\n        else:\n            seen.add(string[i])\n    return True\ndef is_subsequence(subsequence, string):\n    '''\n    The input is two strings. Return true if the first string is a substring of the second.\n    '''\n    for i in xrange(len(subsequence)):\n        if string[i] == subsequence[i]:\n            continue\n        return False\n    return True\ndef is_anagram(string1, string2):\n    '''\n    The input is two strings.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    counter1 = [0] * 26\n    counter2 = [0] * 26\n    for i in xrange(len(string1)):\n        counter1[ord(string1[i]) - ord('a')] += 1\n        counter2[ord(string2[i]) - ord('a')] += 1\n    for i in xrange(26):\n        if counter1[i]!= counter2[i]:\n            return False\n    return True\ndef is_balanced_string(string):\n    '''\n    The input is a string.\n    '''\n    stack = []\n    for i in xrange(len(string)):\n        if string[i] == '{' or string[i] == '[' or string[i] == '(':\n            stack.append(string[i])\n        if string[i] == '}' or string[i] == ']' or string[i] == ')':\n            if not stack:\n                return False\n            if string[i] == '}' and stack[-1]!= '{':\n                return False\n            if string[i] == ']' and stack[-1]!= '[':\n                return False\n            if string[i] == ')' and stack[-1]!= '(':\n                return False\n            stack.pop()\n    return True if not stack else False\ndef longest_palindrome(string):\n    '''\n    The input is a string.\n    '''\n    def helper(left, right):\n        while left >= 0 and right < len(string) and string[left] == string[right]:\n            left -= 1\n            right += 1\n        return string[left+1:right]\n    if len(string) < 2 or string == string[::-1]:\n        return string\n    result = ''\n    for i in xrange(len(string)-1):\n        result = max(result, helper(i, i), helper(i, i+1), key=len)\n    return result\ndef is_prime(num):\n    '''\n    The input is an integer.\n    '''\n    if num < 2:\n        return False\n    for i in xrange(2, num):\n        if num % i == 0:\n            return False\n    return True\ndef largest_product(string):\n    '''\n    The input is a string.\n    '''\n    if len(string) < 4:\n        return -1\n    if len(string) == 4 and string[0] == string[3] and string[1] == string[2]:\n        return 9\n    products = []\n    for i in xrange(len(string) - 3):\n        products.append(string[i] + string[i+1] + string[i+2] + string[i+3])\n    return max(products)\ndef compute_max_min(nums):\n    '''\n    The input is a list of integers.\n    '''\n    if not nums:\n        return [0, 0]\n    min_val = max_val = nums[0]\n    for i in xrange(1, len(nums)):\n        max_val = max(nums[i], max_val * nums[i])\n        min_val = min(nums[i], min_val * nums[i])\n    return [min_val, max_val]\ndef max_pair_product(nums):\n    '''\n    The input is a list of integers.\n    '''\n    max_val = float('-inf')\n    min_val = float('inf')\n    for i in xrange(len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        if nums[i] < min_val:\n            min_val = nums[i]\n    return max_val * min_val\ndef permutations(nums):\n    '''\n    The input is a list of integers.\n    '''\n    res = []\n    if not nums:\n        return [res]\n    if len(nums) == 1:\n        return [nums]\n    for i in xrange(len(nums)):\n        for perm in per",
        "num_ids": 57
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num1, num2 = nums1, nums2\n    if len(num1)!= len(num2):\n        raise ValueError('lists have different length')\n    else:\n        count = 0\n        for i in range(len(num1)):\n            if num1[i] == num2[i]:\n                count += 1\n        return count\n",
        "num_ids": 87
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # the following only works for even length lists\n    if len(nums1) % 2 == 1:\n        return 0\n    else:\n        for x in xrange(len(nums1) / 2):\n            if nums1[x]!= nums2[x]:\n                return x\n",
        "num_ids": 73
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                same_pair += 1\n    return same_pair\n",
        "num_ids": 66
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            count += 1\n    return count\n",
        "num_ids": 111
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n",
        "num_ids": 67
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in xrange(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i] == nums2[i]:\n            ans += 1\n    return ans\ndef count_same_pair2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i] == nums2[i]:\n            ans += 1\n    return ans\ndef array_product(nums):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums)\n    ans = 0\n    for i in range(len_nums):\n        if nums[i]!= 0:\n            ans += 1\n    return ans\ndef array_product2(nums):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums)\n    ans = 0\n    for i in range(len_nums):\n        if nums[i]!= 0:\n            ans += 1\n    return ans\ndef array_product3(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product4(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product5(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product6(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product7(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product8(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product9(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product10(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product11(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product12(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product13(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product14(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product15(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product16(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product17(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product18(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product19(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array_product20(nums1, nums2):\n    '''\n    Write a function to compute the number of elements in the intersection of two arrays.\n    '''\n    len_nums = len(nums1)\n    ans = 0\n    for i in range(len_nums):\n        if nums1[i]!= 0:\n            ans += 1\n    return ans\ndef array",
        "num_ids": 56
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += (base ** power) % 10\n        power -= 1\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return int(sum([(int(i) ** power) for i in str(base)]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2002
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    if power == 1:\n        return base\n    if power % 2 == 0:\n        return power_base_sum(base, power / 2) * power_base_sum(base, power / 2)\n    else:\n        return base * power_base_sum(base, (power - 1) / 2) * power_base_sum(base, (power - 1) / 2)\n",
        "num_ids": 103
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = 0\n    for i in range(power):\n        num += base ** i\n    return num\n",
        "num_ids": 27
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digit_sum = 0\n    while power > 0:\n        digit_sum += (base ** power) % 10\n        power -= 1\n    return digit_sum\n",
        "num_ids": 40
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(digit)**power for digit in str(base)])\n",
        "num_ids": 21
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # remove the \"while\" loop\n    result = 0\n    power_str = str(power)\n    if not power_str.isdigit():\n        print \"power must be a positive integer\"\n    else:\n        base_str = str(base)\n        if not base_str.isdigit():\n            print \"base must be a positive integer\"\n        else:\n            for i in range(len(power_str)):\n                result += int(power_str[i]) ** int(base_str[i])\n    return result\n",
        "num_ids": 129
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    else:\n        return base ** power\n",
        "num_ids": 23
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert type(base) == int and type(power) == int\n    sum = 0\n    while power > 0:\n        digit = power % 10\n        sum += digit\n        power //= 10\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for x in str(base**power):\n        total += int(x)\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_start = '\"'\n    quotation_end = '\"'\n    # find the first quotation mark\n    first_quote_start = text1.find(quotation_start)\n    if first_quote_start == -1:\n        return None\n    # find the last quotation mark\n    last_quote_end = text1.rfind(quotation_end)\n    if last_quote_end == -1:\n        return None\n    quotation_start_index = first_quote_start + 1\n    quotation_end_index = last_quote_end - 1\n    return text1[quotation_start_index:quotation_end_index]\n",
        "num_ids": 157
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = re.compile(r'(\\\".*?\\\")',re.DOTALL)\n    matches = re.findall(quotation_pattern, text1)\n    return matches\n",
        "num_ids": 51
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\\"(.*?)\\\"',text1)\n    print result\n    \nif __name__ == '__main__':\n    text = \"The best way to earn money is to practice high-performance trading. If you have never done that, you will never make money. Some people are even more dangerous and make a mess of their money than they can bear.\"\n    extract_quotation(text)",
        "num_ids": 98
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"\\\"\",\"\")\n    return re.findall(r'\"[^\"]*\"',text1)\n",
        "num_ids": 34
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"([^\"]*)\\\"', text1)\n",
        "num_ids": 22
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #result = re.findall(r'\"([^\"]+)\"',text1)\n    result = re.findall(r'\"([^\"]*)\"',text1)\n    #print result\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # my_list = re.findall(r'\"(.*?)\"', text1)\n    # print my_list\n    # return my_list\n    my_list = re.findall('\"([^\"]*)\"', text1)\n    # print my_list\n    return my_list\n",
        "num_ids": 72
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\".*?\"',text1)\n    text2 = ''.join(list1)\n    return text2\n    \n    \n    \ndef extract_web_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \n    \ndef extract_web_quotation_1(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_2(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \n    \ndef extract_web_quotation_3(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \n    \ndef extract_web_quotation_4(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_5(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_6(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_7(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_8(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_9(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_10(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_11(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_12(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_13(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_14(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_15(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_16(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_17(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_18(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_19(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_20(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_21(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_22(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_23(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_24(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall(r'\"(.*?)\"',text)\n    text2 = ''.join(list1)\n    return text2\n    \ndef extract_web_quotation_25(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    ''",
        "num_ids": 22
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    res = re.findall(r'\"(.*)\"', text1)\n    return res\n",
        "num_ids": 24
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1) == str:\n        return re.findall(r'(?:^|(?<=\\s))\"\\s*(.*?)\\s*\"',text1)\n    else:\n        return []\n",
        "num_ids": 57
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # your code here\n    return\n",
        "num_ids": 11
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    total = 1\n    for i in test_tup:\n        total = total*i\n    return (total,)*len(test_tup)\n",
        "num_ids": 38
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply_elements(test_tup):\n        if len(test_tup) <= 1:\n            return test_tup\n        else:\n            return test_tup[0] * multiply_elements(test_tup[1:])\n    return multiply_elements(test_tup)\n",
        "num_ids": 76
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert type(test_tup) is tuple, 'input must be a tuple'\n    assert len(test_tup) > 1, 'input must have more than 1 element'\n    return tuple(test_tup[i] * test_tup[i+1] for i in xrange(len(test_tup)-1))\n",
        "num_ids": 81
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * y for x, y in zip(test_tup, test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i, j in zip(test_tup[::-1], test_tup[1:]))\n",
        "num_ids": 34
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mul_tup = tuple()\n    if len(test_tup) > 1:\n        for i in range(0, len(test_tup) - 1):\n            mul_tup = mul_tup + (test_tup[i] * test_tup[i+1], )\n        return mul_tup\n    else:\n        return test_tup\n",
        "num_ids": 94
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * y for x, y in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #tuple length\n    length = len(test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = []\n    for i in range(len(test_tup)):\n        output.append(test_tup[i]*test_tup[i+1])\n    return tuple(output)\n",
        "num_ids": 52
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a_i + b_i for a_i, b_i in zip(lst1, lst2)]\n    \ndef mul_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return [a_i * b_i for a_i, b_i in zip(lst1, lst2)]\n",
        "num_ids": 32
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    for i in range(len(lst1)):\n        res.append(lst1[i] + lst2[i])\n    return res\n    \ndef list_from_string(s):\n    '''\n    Write a function that takes as input a string and returns a list of the characters in the string.\n    '''\n    res = []\n    for i in range(len(s)):\n        res.append(s[i])\n    return res\n    \ndef count_letters(lst,letter):\n    '''\n    Write a function that takes as input a list of words and returns a dictionary with the number of times each letter appears in each word.\n    '''\n    res = {}\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] in res:\n                res[lst[i][j]] += 1\n            else:\n                res[lst[i][j]] = 1\n    for k in res:\n        if k == letter:\n            res[k] += 1\n    return res\n    \ndef max_num_list(lst):\n    '''\n    Write a function that takes as input a list of numbers and returns the maximum number in the list.\n    '''\n    res = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] > res:\n            res = lst[i]\n    return res\n    \ndef max_num_dict(d):\n    '''\n    Write a function that takes as input a dictionary of numbers and returns the maximum number in the dictionary.\n    '''\n    res = d[d.keys()[0]]\n    for i in d:\n        if d[i] > res:\n            res = d[i]\n    return res\n    \ndef max_num_list_dict(d1,d2):\n    '''\n    Write a function that takes as input two dictionaries of numbers and returns the maximum number in the two dictionaries.\n    '''\n    res = d1[d1.keys()[0]]\n    for i in d1:\n        if d1[i] > res:\n            res = d1[i]\n    for i in d2:\n        if d2[i] > res:\n            res = d2[i]\n    return res\n    \ndef make_word_list(filename):\n    '''\n    Write a function that takes as input a filename and returns a list of the words in the file.\n    '''\n    file = open(filename,'r')\n    words = []\n    for line in file:\n        line = line.strip()\n        words.append(line)\n    return words\n    \ndef word_lengths(lst):\n    '''\n    Write a function that takes as input a list of words and returns a list of the lengths of the words.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append(len(lst[i]))\n    return res\n    \ndef reverse_string(s):\n    '''\n    Write a function that takes as input a string and returns a string in reverse order.\n    '''\n    res = []\n    for i in range(1,len(s)+1):\n        res.append(s[-i])\n    return \"\".join(res)\n    \ndef all_the_same(lst):\n    '''\n    Write a function that takes as input a list of strings and returns true if all the strings are the same and false otherwise.\n    '''\n    res = True\n    for i in range(1,len(lst)):\n        if lst[i]!= lst[0]:\n            res = False\n    return res\n    \ndef all_the_same_one(lst):\n    '''\n    Write a function that takes as input a list of strings and returns true if all the strings are the same and false otherwise.\n    '''\n    res = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]!= res:\n            return False\n    return True\n    \ndef is_pallindrome(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a palindrome and false otherwise.\n    '''\n    res = True\n    for i in range(1,len(s)):\n        if s[i]!= s[0]:\n            res = False\n    return res\n    \ndef is_pallindrome_one(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a palindrome and false otherwise.\n    '''\n    res = s[::-1]\n    return s == res\n    \ndef is_pallindrome_two(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a palindrome and false otherwise.\n    '''\n    for i in range(len(s)//2):\n        if s[i]!= s[-i-1]:\n            return False\n    return True\n    \ndef is_pallindrome_three(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a palindrome and false otherwise.\n    '''\n    for i in range(len(s)//2):\n        if s[i]!= s[-i-1]:\n            return False\n    return True\n    \ndef is_pallindrome_four(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a palindrome and false otherwise.\n    '''\n    for i in range(len(s)//2):\n        if s[i]!= s[-i-1]:\n            return False\n    return True\n    \ndef is_pallindrome_five(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a palindrome and false otherwise.\n    '''\n    s = s.lower()\n    for i in range(len(s)//2):\n        if s[i]!= s[-i-1]:\n            return False\n    return True\n    \ndef palindrome_permutation(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a permutation of a palindrome and false otherwise.\n    '''\n    s = s.lower()\n    res = 0\n    for i in range(len(s)):\n        if s[i] in s[:i] or s[i] in s[i+1:]:\n            res += 1\n    return res <= 1\n    \ndef palindrome_permutation_one(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a permutation of a palindrome and false otherwise.\n    '''\n    s = s.lower()\n    d = {}\n    for i in range(len(s)):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    res = 0\n    for i in d:\n        if d[i] % 2 == 1:\n            res += 1\n    return res <= 1\n    \ndef palindrome_permutation_two(s):\n    '''\n    Write a function that takes as input a string and returns true if the string is a permutation of a palindrome and false otherwise.\n    '''\n    s = s.lower()\n    d = {}\n    for i in range(len(s)):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    res = 0\n    for i in d:\n        if d[i] % 2 == 1:\n            res += 1\n    return res <= 1\n    \ndef knapsack(c,w,v,max_weight):\n    '''\n    Write a function that takes as input a knapsack weight, a list of objects with weights, a list of values and a maximum weight and returns a list of pairs where each pair is [object,value]\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 30
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n    \ndef fibonacci(num):\n    '''\n    Write a function takes as input a number and returns the nth value in the fibonacci series\n    '''\n    if num==0:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        return fibonacci(num-1)+fibonacci(num-2)\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for x, y in zip(lst1, lst2):\n        lst.append(x + y)\n    return lst\n",
        "num_ids": 41
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==0:\n        return lst2\n    elif len(lst2)==0:\n        return lst1\n    else:\n        return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 71
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [(key, len(list(group))) for key, group in groupby(nums)]\n",
        "num_ids": 25
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            del nums[i]\n            i -= 1\n        i += 1\n    return nums\n",
        "num_ids": 58
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #return [item for item, count in groupby(nums) if count > 1]\n    #return [item for item, count in Counter(nums).items() if count > 1]\n    return [item for item, count in groupby(nums) if len(list(groupby(nums))) > 1]\n",
        "num_ids": 77
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for (k, _) in groupby(nums)]\n",
        "num_ids": 20
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            nums.remove(nums[i])\n        else:\n            i+=1\n    return nums\n",
        "num_ids": 59
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(nums)]\n",
        "num_ids": 21
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    from collections import deque\n    q = deque()\n    for n in nums:\n        if q and q[0] == n:\n            q.popleft()\n        else:\n            q.append(n)\n",
        "num_ids": 56
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    prev,next=nums[0],1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            continue\n        else:\n            prev,next = nums[i],1\n        \n    return prev\n",
        "num_ids": 77
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(set(nums))\n    return nums\n",
        "num_ids": 19
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2: return nums\n    p = 0\n    while p < len(nums) - 1:\n        if nums[p] == nums[p + 1]:\n            nums[p] = None\n            nums[p + 1] = None\n        p += 1\n    return [x for x in nums if x!= None]\ndef sort_012(input_list):\n    '''\n    Given an input array consisting on only 0, 1, and 2, sort the array in a single traversal.\n    '''\n    # 0, 1, 2,..., n\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., 2n - 1\n    # 0, 1, 2,..., 2n - 2\n    # 0, 1, 2,..., 3n - 1\n    # 0, 1, 2,..., 3n - 2\n    # 0, 1, 2,..., 4n - 1\n    # 0, 1, 2,..., 4n - 2\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, 2,..., n - 1\n    # 0, 1, 2,..., n - 2\n    # 0, 1, 2,..., n - 3\n    #...\n    # 0, 1, ",
        "num_ids": 1755
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2 + math.pi*r*h + math.pi*(r**2+h**2)\n",
        "num_ids": 34
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #enter your answer here\n    return math.pi*r**2 + math.pi*r*(math.sqrt(2*h/math.pi))\n",
        "num_ids": 40
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface=math.pi*math.pow(r,2)+math.pi*math.pow(r,2)*math.pow(h,2)/2\n    return surface\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    surface=math.pi*math.pow(r,2)\n    return surface\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    surface=math.pi*math.pow(r,2)+math.pi*math.pow(r,2)*math.pow(h,2)/2\n    return surface\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    surface=math.pi*math.pow(r,2)*2*math.atan(h/r)\n    return surface\ndef lateralsurface_pyramid(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the base length, height, and apex length.\n    '''\n    surface=math.pi*math.pow(a,2)/2+math.pi*math.pow(b,2)/2+math.pi*math.pow(c,2)/2\n    return surface\ndef lateralsurface_trigon(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base length, height, and apex length.\n    '''\n    surface=math.sqrt(math.pow(b,2)+math.pow(c,2)-math.pow(a,2))\n    return surface\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the width and the height.\n    '''\n    surface=a*b\n    return surface\ndef lateralsurface_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base length, height, and apex length.\n    '''\n    surface=a*d/2+b*c/2\n    return surface\ndef lateralsurface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base length, height, and apex length.\n    '''\n    surface=math.sqrt(math.pow(b,2)+math.pow(c,2)-math.pow(a,2))\n    return surface\ndef lateralsurface_quad(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a quadrilateral given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the base length and the height.\n    '''\n    surface=math.pi*math.pow(a,2)*math.pow(b,2)/4\n    return surface\ndef lateralsurface_polygon(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a polygon given the base length, height, and apex length.\n    '''\n    surface=a*d\n    return surface\ndef lateralsurface_mesh(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a mesh given the base length, height, and apex length.\n    '''\n    surface=a*d*b/2\n    return surface\ndef lateralsurface_trisurface(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trisurface given the base length, height, and apex length.\n    '''\n    surface=a*d*b/2\n    return surface\ndef lateralsurface_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_hexahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_octahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a octahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_icosahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a icosahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_cono(r,h):\n    '''\n    Write a function to find the lateral surface area of a cono given the radius and the height.\n    '''\n    surface=math.pi*math.pow(r,2)+math.pi*math.pow(r,2)*math.pow(h,2)/2\n    return surface\ndef lateralsurface_hexa(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given the base length, height, and apex length.\n    '''\n    surface=a*d\n    return surface\ndef lateralsurface_octa(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a octahedron given the base length, height, and apex length.\n    '''\n    surface=a*d\n    return surface\ndef lateralsurface_icosa(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a icosahedron given the base length, height, and apex length.\n    '''\n    surface=a*d\n    return surface\ndef lateralsurface_tetra(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_trisurf(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trisurface given the base length, height, and apex length.\n    '''\n    surface=a*b\n    return surface\ndef lateralsurface_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_hexahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_octahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a octahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c+d\n    return surface\ndef lateralsurface_icosaedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a icosahedron given the base length, height, and apex length.\n    '''\n    surface=a+b+c",
        "num_ids": 10
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2+math.pi*r*h/3\n    return s\n    \ndef conesegments_cone(r,h):\n    '''\n    Write a function to find the number of segments on a cone given radius r and the height h.\n    '''\n    l=math.pi*r**2\n    s=math.pi*r*h/3\n    n=l/s\n    return n\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2+math.pi*r*h/3\n    return s\n    \ndef lateralsurface_cyl(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical shell given radius r and the height h.\n    '''\n    l=math.pi*r**2\n    s=math.pi*r*h\n    return l+s\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2+math.pi*r*h/3\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    s=2*l*w+2*w*h+2*l*h\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length ",
        "num_ids": 19
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h/3\n",
        "num_ids": 16
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r**2) * (math.cos(math.radians(60)))\n    return area + 2 * math.pi * r * h\n",
        "num_ids": 42
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2+math.pi*r*h\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r+(2*math.pi*r*h)\n",
        "num_ids": 23
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate side area\n    sa = math.pi * r**2\n    # calculate bottom area\n    ba = math.pi * (r**2-math.sqrt(r**2 - h**2))\n    # find lateral surface area\n    s = sa - ba\n    return s\n",
        "num_ids": 69
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)+(h*math.sqrt(r**2-(r**2/2)))\n",
        "num_ids": 32
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S = math.pi * (r**2) * h\n    return S\n",
        "num_ids": 21
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new = []\n    for x in text:\n        if (x =='') or (x == ',') or (x == '.'):\n            new.append(':')\n        else:\n            new.append(x)\n    return ''.join(new)\n",
        "num_ids": 65
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"\\s+|\\s*,\\s*|\\s\\.\\s*\", \":\", text)\n",
        "num_ids": 34
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[,|.|\\s]', ':', text)\n",
        "num_ids": 23
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\"[,\\.]\", \":\", text)\n    return text\n",
        "num_ids": 24
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[\\.\\,\\s]','',text)\ndef alphabetize(text):\n    '''\n    Write a function that returns a string in which all the characters are in sorted order.\n    '''\n    return ''.join(sorted(text))\ndef is_palindrome(text):\n    '''\n    Write a function that determines if a string is a palindrome.\n    '''\n    return text[::-1] == text\ndef is_anagram(text1,text2):\n    '''\n    Write a function that determines if two strings are anagrams.\n    '''\n    text1 = text1.lower().replace(' ','').replace('.','').replace(',','')\n    text2 = text2.lower().replace(' ','').replace('.','').replace(',','')\n    return sorted(text1) == sorted(text2)\ndef is_prime(number):\n    '''\n    Write a function that determines if a number is prime.\n    '''\n    if number < 2:\n        return False\n    elif number == 2:\n        return True\n    else:\n        if number % 2 == 0:\n            return False\n        for i in range(3,int(number**0.5)+1,2):\n            if number%i == 0:\n                return False\n        return True\ndef reverse_string(text):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    return text[::-1]\ndef reverse_string_with_spaces(text):\n    '''\n    Write a function that returns the reverse of a string with spaces.\n    '''\n    return''.join(text[::-1])\ndef remove_duplicates(text):\n    '''\n    Write a function that returns a string where all duplicate characters are removed.\n    '''\n    return ''.join(set(text))\ndef remove_all_the_letters(text,letters):\n    '''\n    Write a function that removes all the characters in letters from a string.\n    '''\n    for i in letters:\n        text = text.replace(i,'')\n    return text\ndef remove_all_the_letters_from_a_to_z(text,letters):\n    '''\n    Write a function that removes all the characters in letters from a string.\n    '''\n    for i in letters:\n        text = text.replace(chr(ord('a')+1),'')\n    return text\ndef remove_all_the_letters_from_a_to_z_with_spaces(text,letters):\n    '''\n    Write a function that removes all the characters in letters from a string with spaces.\n    '''\n    for i in letters:\n        text = text.replace(chr(ord('a')+1),' ')\n    return text\ndef remove_nth_char(text,n):\n    '''\n    Write a function that removes the nth character from a string.\n    '''\n    return text[:n] + text[n+1:]\ndef remove_nth_char_from_a_to_z(text,n):\n    '''\n    Write a function that removes the nth character from a string.\n    '''\n    for i in range(n):\n        text = text[:-1]\n    return text\ndef remove_nth_char_from_a_to_z_with_spaces(text,n):\n    '''\n    Write a function that removes the nth character from a string with spaces.\n    '''\n    for i in range(n):\n        text = text[:-1]\n    return text\ndef remove_nth_char_from_a_to_z_with_spaces_and_reverse(text,n):\n    '''\n    Write a function that removes the nth character from a string with spaces and reverse the string.\n    '''\n    for i in range(n):\n        text = text[:-1]\n    return text[::-1]\ndef remove_nth_char_from_a_to_z_with_spaces_and_reverse_from_a_to_z(text,n):\n    '''\n    Write a function that removes the nth character from a string with spaces and reverse the string from a to z.\n    '''\n    for i in range(n):\n        text = text[:-1]\n    return text[::-1]\ndef convert_a_to_b(text,a,b):\n    '''\n    Write a function that converts a string from one character set to another.\n    '''\n    return text.replace(chr(ord(a)+1),b)\ndef convert_a_to_b_with_spaces(text,a,b):\n    '''\n    Write a function that converts a string from one character set to another with spaces.\n    '''\n    return text.replace(chr(ord(a)+1),b)\ndef get_string_with_first_and_last_chars_swapped(text):\n    '''\n    Write a function that returns a string where the first and last characters are swapped.\n    '''\n    return text[-1] + text[1:-1] + text[0]\ndef get_string_with_first_and_last_chars_swapped_with_spaces(text):\n    '''\n    Write a function that returns a string where the first and last characters are swapped with spaces.\n    '''\n    return text[-1] +'' + text[1:-1] +'' + text[0]\ndef get_string_with_first_and_last_chars_swapped_with_spaces_and_reverse(text):\n    '''\n    Write a function that returns a string where the first and last characters are swapped with spaces and reversed.\n    '''\n    return text[-1] +'' + text[1:-1] +'' + text[::-1][1:]\ndef get_string_with_first_and_last_chars_swapped_with_spaces_and_reverse_from_a_to_z(text,a,b):\n    '''\n    Write a function that returns a string where the first and last characters are swapped with spaces and reversed from a to z.\n    '''\n    for i in range(b):\n        text = text[:-1]\n    return text[-1] +'' + text[1:-1] +'' + text[::-1][1:]\ndef get_string_with_first_and_last_chars_swapped_with_spaces_and_reverse_from_a_to_z_with_spaces(text,a,b):\n    '''\n    Write a function that returns a string where the first and last characters are swapped with spaces and reversed from a to z with spaces.\n    '''\n    for i in range(b):\n        text = text[:-1]\n    return text[-1] +'' + text[1:-1] +'' + text[::-1][1:]\ndef get_string_with_first_and_last_chars_swapped_with_spaces_and_reverse_from_a_to_z_with_spaces_and_reverse(text,a,b):\n    '''\n    Write a function that returns a string where the first and last characters are swapped with spaces and reversed from a to z with spaces and reversed.\n    '''\n    for i in range(b):\n        text = text[:-1]\n    return text[-1] +'' + text[1:-1] +'' + text[::-1][1:]\ndef get_string_with_first_and_last_chars_swapped_with_spaces_and_reverse_from_a_to_z_with_spaces_and_reverse_from_a_to_z(text,a,b):\n    '''\n    Write a function that returns a string where the first and last characters are swapped with spaces and reversed from a to z with spaces and reversed from a to z.\n    '''\n    for i in range(b):\n        text = text[:-1]\n    return text[-1] +'' + text[1:-1] +'' + text[::-1][1:]\ndef get_string_with_first_and_last_chars_swapped_with_spaces_and_reverse_from_a_to_z_with_spaces_and_reverse_from_a_to_z",
        "num_ids": 100
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\s*,\\s*', ':', text)\n    text = re.sub(r'\\.+', ':', text)\n    text = re.sub(r',+', ':', text)\n    text = re.sub(r'\\s*', '', text)\n    return text\n",
        "num_ids": 100
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]', ':', text)\n    text = re.sub(r',', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text\n",
        "num_ids": 58
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # space,comma,dot are replaced with colon\n    text = re.sub('[\\s,\\.]', ':', text)\n    return text\n",
        "num_ids": 39
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace any whitespace with a colon\n    return re.sub('\\s', ':', text)\n",
        "num_ids": 27
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left < right:\n        middle = (left + right) / 2\n        if x < A[middle]:\n            right = middle - 1\n        elif x > A[middle]:\n            left = middle + 1\n        else:\n            return middle\n    return -1\n",
        "num_ids": 81
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    first_occur = -1\n    low = 0\n    high = len(A) - 1\n",
        "num_ids": 28
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    if A[len(A)-1] == x:\n        return len(A)-1\n    l, r = 0, len(A)-1\n    while l <= r:\n        m = l + (r-l)//2\n        if A[m] == x:\n            return m\n        elif A[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1\n",
        "num_ids": 134
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)\n    mid = (start + end) / 2\n",
        "num_ids": 26
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    L = 0\n    R = len(A) - 1\n    while L <= R:\n        mid = L + ((R-L)>>1)\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            R = mid - 1\n        else:\n            L = mid + 1\n    return -1\n",
        "num_ids": 86
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    mid = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if x > A[mid]:\n            low = mid + 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            if mid - 1 < 0:\n                return mid\n            elif A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n",
        "num_ids": 124
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Brute force\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "num_ids": 39
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)\n    while start < end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            end = mid\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 78
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n",
        "num_ids": 30
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = []\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        prod.append(arr[0])\n        prod.append(arr[1]*arr[0])\n        for i in range(2,len(arr)):\n            prod.append(arr[i]*prod[i-1]+arr[i])\n        return prod[-1]\n",
        "num_ids": 115
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    left_prod = [0 for i in range(arr_len)]\n    left_prod[0] = arr[0]\n    product = 1\n",
        "num_ids": 49
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if arr == None:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # given a list of numbers\n    # list the products of all possible sublists of the list\n    # return the sum of products\n    # sum of products of all the sublists of a list is the product of all the elements in the list\n",
        "num_ids": 56
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Code here\n    total = 0\n    for i in range(len(arr)):\n        for j in range(len(arr) - i):\n            prod = 1\n            for k in range(i, i + j + 1):\n                prod *= arr[k]\n            total += prod\n    return total\n",
        "num_ids": 78
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subprod = []\n    for i in range(n):\n        for j in range(i, n):\n            subprod.append(arr[i] * arr[j])\n    return sum(subprod)\n",
        "num_ids": 63
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i,n):\n            # print(arr[i:j+1])\n            result += arr[i]*arr[j]\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # dynamic programming approach\n    # we will store (i,j,n) in hash table\n    # i - starting index of subarray\n    # j - ending index of subarray\n    # n - length of subarray\n",
        "num_ids": 53
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product = 1\n    sum_of_products = 0\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i,len(arr)):\n            product *= arr[j]\n            sum_of_products += product\n",
        "num_ids": 65
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    temp_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i < j):\n                temp_sum = temp_sum + arr[i] * arr[j] * arr[i + 1:j][::-1]\n    return temp_sum\n",
        "num_ids": 79
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x55555555) + ((n & 0xAAAAAAAA) >> 1)\n    return n & 0x0FFFFFFF\n",
        "num_ids": 38
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        x = str(bin(n))\n        if len(x) < 32:\n            x = \"0\"*(32 - len(x)) + x\n        \n        for i in xrange(1,32):\n            if i == 31:\n                x = x[:i] + str(1 - int(x[i])) + \"0\"*(32 - len(x[i:]))\n            elif i == 31 - 1:\n                x = x[:i] + str(1 - int(x[i])) + \"1\"*(32 - len(x[i:]))\n            else:\n                x = x[:i] + str(1 - int(x[i])) + x[i+1:]\n        return int(x,2)\n        \n",
        "num_ids": 212
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = n & 0x55555555\n    return (num | (num << 1)) & 0x55555555\n",
        "num_ids": 32
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = n & 1\n    n = n >> 1\n    return n | a << 31\n",
        "num_ids": 24
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return n + 1\n    return n - 1\n",
        "num_ids": 34
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = int(n)\n    mask = 1 << (n.bit_length() - 1)\n    return n ^ mask\n",
        "num_ids": 32
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n >> 2)\n    n = n ^ (n >> 3)\n    n = n ^ (n >> 4)\n    n = n ^ (n >> 5)\n    n = n ^ (n >> 6)\n    return n\n",
        "num_ids": 72
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_list = list(bin(n))\n    bit_list[1], bit_list[-2] = bit_list[-2], bit_list[1]\n    return int(''.join(bit_list[1:]), 2)\n",
        "num_ids": 60
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= 0xfe\n    n ^= (n >> 1)\n    n &= 0x7e\n    n ^= (n >> 1)\n    return n\n    \ndef get_number_of_inversions(A):\n    '''\n    Write a python function to count number of inversions in an array of integers. https://www.geeksforgeeks.org/count-number-of-inversions-array/\n    '''\n    n = len(A)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] > A[j]:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = (1 << 32) - 1\n    return (n & mask) ^ ((n ^ mask) >> 1)\n",
        "num_ids": 30
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n",
        "num_ids": 17
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # i = len(a)\n    # while i>0 and a[i-1] > x:\n    #     i -= 1\n    # a.insert(i, x)\n    # return i\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        a.insert(i, x)\n        return i\n",
        "num_ids": 107
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 16
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # how do you find the left insertion point for x?\n    # find the index i, which is such that a[i-1] < x <= a[i]\n",
        "num_ids": 41
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if a[i]!= x:\n        a.insert(i, x)\n    return i\n",
        "num_ids": 43
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (hi + lo) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n",
        "num_ids": 82
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    assert a!= [], \"list is empty\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1\n",
        "num_ids": 62
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    \n    index = bisect.bisect_left(a, x)\n    \n    if a[index-1] <= x <= a[index]:\n        return index\n    return index-1\n    \ndef left_insertion_efficient(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    if not a:\n        return 0\n    \n    index = bisect.bisect_left(a, x)\n    \n    if a[index-1] <= x <= a[index]:\n        return index\n    \n    if a[0] <= x <= a[index-1]:\n        return index-1\n    return index\n    \ndef left_insertion_recursive(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    if not a:\n        return 0\n    \n    index = bisect.bisect_left(a, x)\n    \n    if a[index-1] <= x <= a[index]:\n        return index\n    \n    if a[0] <= x <= a[index-1]:\n        return index-1\n    return index\n    \ndef left_insertion_recursive_efficient(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    if not a:\n        return 0\n    \n    index = bisect.bisect_left(a, x)\n    \n    if a[index-1] <= x <= a[index]:\n        return index\n    \n    if a[0] <= x <= a[index-1]:\n        return index-1\n    return index\n",
        "num_ids": 82
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    bisect.insort_left(a, x)\n    return a\n",
        "num_ids": 20
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] > x:\n        return i\n    else:\n        return i+1\n",
        "num_ids": 59
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None\nprint check_str('a')\nprint check_str('an')\nprint check_str('A')\nprint check_str('Aa')\nprint check_str('anA')\nprint check_str('aA')\nprint check_str('aa')\nprint check_str('aAn')\nprint check_str('AAn')\nprint check_str('aAAn')\nprint check_str('aaAn')\nprint check_str('anAa')\nprint check_str('aAaA')\nprint check_str('aAAnA')\nprint check_str('aAaAnA')\nprint check_str('anAaAa')\nprint check_str('aAaAnAa')\nprint check_str('AaAa')\nprint check_str('aAaAaA')\nprint check_str('aAaAaAnA')\nprint check_str('aAaAaAnAa')\nprint check_str('aaAaAaAnAa')\nprint check_str('aAaAaAaAnAa')\nprint check_str('AaAaAaAnAaAa')\nprint check_str('AaAaAaAnAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('aAaAaAaAnAaAaAaAaAaAaAaAa')\nprint check_str('AaAaAaAnAaAaAaAaAa",
        "num_ids": 1980
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return True if re.match(regex,string)!=None else False\n",
        "num_ids": 20
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.match(regex,string)\n    if matcher is not None: \n        return True \n    else:\n        return False \n",
        "num_ids": 40
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string) is not None\ndef main():\n    test = check_str(\"hello\")\n    if test:\n        print \"Valid\"\n    else:\n        print \"Invalid\"\n",
        "num_ids": 52
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) is not None: \n        print(True)\n    else: \n        print(False)\n",
        "num_ids": 36
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string)\n",
        "num_ids": 23
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return True if re.match(regex, string) else False\ncheck_str(\"dog\")\ncheck_str(\"w_23i\")\ncheck_str(\"z_12\")\n",
        "num_ids": 72
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print \"Yes\"\n    else:\n        print \"No\"\n    \ncheck_str(\"hello\")\ncheck_str(\"abc\")\ncheck_str(\"a\")\ncheck_str(\"\")\ncheck_str(\"B\"",
        "num_ids": 65
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) is not None:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ncheck_str(\"kp\")\ncheck_str(\"n\")\ncheck_str(\"geeksforgeeks\")\ncheck_str(\"kGeeksFOrGeeks\")\ncheck_str(\"geek\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"Geeks\")\ncheck_str(\"Geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"geek\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"Geeks\")\ncheck_str(\"Geeks\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEKS\")\ncheck_str(\"GEEKS\")\ncheck_str(\"geek\")\ncheck_str(\"geeks\")\ncheck_str(\"geeks\")\ncheck_str(\"GEEK\")\ncheck_str(\"GEEK\"",
        "num_ids": 1981
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.match(regex, string)): \n        print (\"Pattern matched\") \n    else: \n        print (\"Pattern not matched\")\ncheck_str(\"test\")\ncheck_str(\"boohoo\")\ncheck_str(\"tewst\")\ncheck_str(\"eetst\")\ncheck_str(\"tew\")\ncheck_str(\"t\")\n",
        "num_ids": 87
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1 / (n - 1)) * geometric_sum(n - 1)\n",
        "num_ids": 37
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 + (1 / (n - 1))\n",
        "num_ids": 15
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n * geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def sum_geometric_sum(n):\n        if n == 0:\n            return 0\n        else:\n            return (1 / (n-1)) * sum_geometric_sum(n-1)\n    return sum_geometric_sum(n)\n",
        "num_ids": 64
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 1/n * geometric_sum(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 1 + geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (1-pow(1-pow(0.5,n),2))/2\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    geo_sum = 1\n    for i in range(1, n):\n        geo_sum = geo_sum * i\n    return geo_sum\n",
        "num_ids": 39
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = \"\"\n    k = 1\n    while len(num)<n:\n        num = str(k*(k+1)/2)\n        k+=1\n    return num.index(num[n-1])\n    \ndef isPentagonal(n):\n    '''\n    Write a python function to check if a number is pentagonal number. https://www.geeksforgeeks.org/pentagonal-number/\n    '''\n    sq = (1+math.sqrt(1+24*n))/6\n    if sq == int(sq):\n        return True\n    else:\n        return False\n    \ndef isHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal number. https://www.geeksforgeeks.org/hexagonal-number/\n    '''\n    sq = (1+math.sqrt(1+8*n))/4\n    if sq == int(sq):\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    start = math.pow(10, n-1)\n    end = math.pow(10, n) - 1\n    return int(start + (end-start)/2)\n",
        "num_ids": 46
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index=0\n    a = int(math.pow(10,n-1))\n    b = int(math.pow(10,n))\n    if (a-1)*(b-1) > n:\n        index = n - (a-1)\n    else:\n        index = n - (b-1)\n    return index\n",
        "num_ids": 85
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # If n is greater than 1, there will be no such triangular number.\n    if n == 1:\n        return 0\n    triangle = int(math.pow(10, n))\n    smallest = 0\n    # Consider all the triangular numbers with 1 digit\n    for i in range(0, 10):\n        if i == 0:\n            smallest = triangle\n        else:\n            smallest = smallest + i * i\n",
        "num_ids": 102
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    #initializing the range\n    range_end = 10**n\n    lower_limit = 0\n    index = 0\n    \n    #iterating until we get a triangular number with n digits \n    while True: \n        triangular_number = lower_limit*(lower_limit+1)//2\n        #checking if the triangular number is less than the range_end\n        if triangular_number < range_end:\n            #incrementing the lower limit\n            lower_limit += 1\n            #increasing the index\n            index += 1\n        else:\n            #returning the index\n            return index\n",
        "num_ids": 152
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import itertools\n    n1=n*(n+1)/2\n    n2=math.ceil(n*(n+1)/2)\n    n3=math.ceil(n*(n+1)*(2*n+1)/6)\n    list_of_triangular_numbers=[n1,n2,n3]\n    index_of_minimum_triangular_number=min(range(len(list_of_triangular_numbers)),key=list_of_triangular_numbers.__getitem__)\n    return index_of_minimum_triangular_number\n",
        "num_ids": 146
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the smallest triangular number with n digits\n    return (math.ceil(math.pow(10,n)/9))\ndef read_number():\n    '''\n    Write a python function to read a number and store it in a variable\n    '''\n    num = input(\"Enter a number: \")\n    return int(num)\ndef counting_digits():\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    num = read_number()\n    count = 0\n    while(num!=0):\n        count+=1\n        num = num//10\n    return count\ndef is_square(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n<=0):\n        return False\n    return int(math.sqrt(n))*int(math.sqrt(n))==n\ndef is_triangle(n):\n    '''\n    Write a python function to check whether a number is triangular or not.\n    '''\n    if(n<=0):\n        return False\n    return int((math.sqrt(8*n+1)+1)/4)==math.sqrt(8*n+1)/2\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    if(n<=0):\n        return 0\n    else:\n        return n%10+sum_of_digits(n//10)\ndef find_smallest_factorial():\n    '''\n    Write a python function to find the smallest factorial of a number.\n    '''\n    num = read_number()\n    if(num<=0):\n        return 0\n    factorial = 1\n    for i in range(1,num+1):\n        factorial*=i\n    return factorial\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    if(n<=0):\n        return False\n    if(n==1):\n        return True\n    if(n%2==0):\n        return False\n    return is_perfect(int(n/2))\ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n<=0):\n        return False\n    return is_perfect(int(math.sqrt(n)))\ndef is_perfect_triangle(n):\n    '''\n    Write a python function to check whether a number is perfect triangle or not.\n    '''\n    if(n<=0):\n        return False\n    if(is_perfect_square(n)):\n        return True\n    return is_perfect(int(math.sqrt(8*n+1)+1)/4)\ndef are_identical(a,b):\n    '''\n    Write a python function to check whether two strings are identical or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    for i in range(len(a)):\n        if(a[i]!=b[i]):\n            return False\n    return True\ndef is_anagram(a,b):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    for i in range(len(a)):\n        if(a[i]!=b[i]):\n            return False\n    return True\ndef are_permutations(a,b):\n    '''\n    Write a python function to check whether two strings are permutations or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    for i in range(len(a)):\n        if(a[i]!=b[i]):\n            if(a[b[i]]!=a[i]):\n                return False\n    return True\ndef are_anagrams(a,b):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    for i in range(len(a)):\n        if(a[i]!=b[i]):\n            if(a.count(a[i])!=b.count(b[i])):\n                return False\n    return True\ndef are_pandigital(n,start,end):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    if(len(str(n))!=end-start+1):\n        return False\n    if(n<=0):\n        return False\n    for i in range(start,end+1):\n        if(str(i) not in str(n)):\n            return False\n    return True\ndef find_pandigital_triangular(n):\n    '''\n    Write a python function to find the first triangular number with n digits which has all its digits distinct.\n    '''\n    end = find_Index(n)\n    for i in range(1,end+1):\n        if(is_triangle(i)):\n            if(are_pandigital(i,1,n)):\n                return i\ndef find_pandigital_triangular2(n):\n    '''\n    Write a python function to find the first triangular number with n digits which has all its digits distinct.\n    '''\n    if(n<=0):\n        return -1\n    if(n==1):\n        return 1\n    if(is_perfect(n)):\n        return n\n    if(is_perfect_square(n)):\n        return n**2\n    if(is_perfect_triangle(n)):\n        return n*(n+1)\n    if(are_pandigital(n,2,n)):\n        return (n+1)*n/2\n    for i in range(n-1,1,-1):\n        if(are_pandigital(n,i,n)):\n            return (n+1)*n/2+i\ndef find_pandigital_triangular3(n):\n    '''\n    Write a python function to find the first triangular number with n digits which has all its digits distinct.\n    '''\n    if(n<=0):\n        return -1\n    if(n==1):\n        return 1\n    if(is_perfect(n)):\n        return n\n    if(is_perfect_square(n)):\n        return n**2\n    if(is_perfect_triangle(n)):\n        return n*(n+1)\n    if(are_pandigital(n,2,n)):\n        return (n+1)*n/2\n    for i in range(n-1,1,-1):\n        if(are_pandigital(n,i,n)):\n            return (n+1)*n/2+i\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if(n<=0):\n        return False\n    if(n==1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            return False\n    return True\ndef largest_prime_factor(n):\n    '''\n    Write a python function to find the largest prime factor of a number.\n    '''\n    if(n<=0):\n        return -1\n    if(n==1):\n        return 1\n    for i in range(n,1,-1):\n        if(is_prime(i)):\n            if(n%i==0):\n                return i\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    if(n<=0):\n        return False\n    if(",
        "num_ids": 18
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        k = 1\n        index = 0\n        while k <= n: \n            k = k + 1\n            index = index + int(math.pow(10, n - 1)) \n            n = n - 1\n        return index\ndef find_index_by_digit(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        k = 1\n        index = 0\n        while k <= n: \n            k = k + 1\n            index = index + math.pow(10, n - 1) \n            n = n - 1\n        return index\ndef find_index_by_digit_binarySearch(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        left = 1\n        right = int(math.pow(10, n - 1))\n        mid = int((left + right) / 2)\n        while left!= right:\n            if mid*(mid + 1) > n:\n                right = mid - 1\n            elif mid*(mid + 1) == n:\n                return mid\n            else:\n                left = mid + 1\n            mid = int((left + right) / 2)\n        return mid\ndef find_Triangular_number(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/nth-triangular-number/\n    '''\n    return int(math.pow(10, n) * (int((math.pow(10, n) + 1) / 2)))\n",
        "num_ids": 35
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n -= 1\n    return n * (n + 1) * (2 * n + 1) / 6\n",
        "num_ids": 27
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    limit = n * (n + 1) / 2\n    if n < 2:\n        return n \n    for i in range(2, limit):\n        k = i \n        while(k * (k + 1) / 2 < i): \n            k += 1 \n        if k * (k + 1) / 2 == i:\n            return i \n    return -1\n",
        "num_ids": 92
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_values = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        key_values[test_tup[i]] = test_tup[i + 1]\n    return key_values\n",
        "num_ids": 59
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "num_ids": 49
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[:-1],test_tup[1:]))\n",
        "num_ids": 25
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict(zip(test_tup, test_tup[1:]))\n    return d\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for key,value in zip(test_tup,test_tup[1:]):\n        my_dict[key] = value\n    return my_dict\n",
        "num_ids": 47
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        d[test_tup[i]] = test_tup[i + 1]\n",
        "num_ids": 49
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res_dict = {}\n    for i in range(0, len(test_tup), 2):\n        res_dict[test_tup[i]] = test_tup[i+1]\n    return res_dict\n",
        "num_ids": 56
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    d=len(s)\n    if d==0 :\n        return False\n    for i in range(d) :\n        if s[i]!= s[0] :\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==0 :\n        return 1\n    elif len(s)==1 :\n        return 0\n    elif len(s)>1 :\n        if s[0]==s[-1] :\n            return all_Characters_Same(s[1:-1])\n        else :\n            return 0\n",
        "num_ids": 79
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n",
        "num_ids": 44
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Your Code Here\n    if s[0] == s[1] and s[1] == s[2] :\n        return True\n    else :\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0] :\n        return True\n    else :\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    x = True\n    for i in range(len(l)-1) :\n        if l[i]!= l[i+1] :\n            x = False\n    return x\n",
        "num_ids": 54
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    l.sort()\n    if l[0]!= l[-1] :\n        return False\n    else :\n        return True\n",
        "num_ids": 43
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((3**0.5) / 4) * (side ** 2)\n    return area\n",
        "num_ids": 26
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/6*side**2\ndef area_prism(side_a, side_b):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return side_a*side_b/2\ndef area_cone(radius, height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return 1/3*math.pi*radius*radius*height\ndef area_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return 2*math.pi*radius*radius + 2*math.pi*radius*height\ndef area_cuboid(side_a, side_b, side_c):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return side_a*side_b + side_b*side_c + side_a*side_c\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return 4*math.pi*radius**2\ndef area_hemi_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a hemicellipsoid.\n    '''\n    return 2*math.pi*radius*radius + 2*math.pi*radius*height\ndef area_ellipsoid(radius_x, radius_y, radius_z):\n    '''\n    Write a function to caluclate the area of a ellipsoid.\n    '''\n    return 2*math.pi*radius_x*radius_y*radius_z\ndef area_torus(inner_radius, outer_radius):\n    '''\n    Write a function to caluclate the area of a torus.\n    '''\n    return math.pi*inner_radius*outer_radius\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return 1/2*side1*side2\ndef area_square(side1, side2):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side1*side2\ndef area_polygon(side, n):\n    '''\n    Write a function to caluclate the area of a polygon.\n    '''\n    return 1/2*n*side**2\ndef area_convex_polygon(side, n):\n    '''\n    Write a function to caluclate the area of a convex polygon.\n    '''\n    return (1/2*n*side**2)/4\ndef area_concave_polygon(side, n):\n    '''\n    Write a function to caluclate the area of a concave polygon.\n    '''\n    return (n*side**2)/4\ndef area_pyramid(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return 1/2*side1*side2 + 1/2*side2*side3 + 1/2*side1*side3\ndef area_triangle_parallelogram(side1, side2):\n    '''\n    Write a function to caluclate the area of a triangle and a parallelogram.\n    '''\n    return 1/2*side1*side2\ndef area_triangle_trapezoid(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a triangle and a trapezoid.\n    '''\n    return 1/2*(side1+side2+side3)*math.sqrt(side1*side2*side3)\ndef area_square_parallelogram(side1, side2):\n    '''\n    Write a function to caluclate the area of a square and a parallelogram.\n    '''\n    return side1*side2\ndef area_square_trapezoid(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a square and a triangle.\n    '''\n    return 1/2*side1*side2\ndef area_square_hyperbola(side1, side2):\n    '''\n    Write a function to caluclate the area of a square and a hyperbola.\n    '''\n    return 1/2*side1*side2\ndef area_rectangle(side1, side2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side1*side2\ndef area_triangle_rectangle(side1, side2):\n    '''\n    Write a function to caluclate the area of a triangle and a rectangle.\n    '''\n    return 1/2*side1*side2\ndef area_dodecagon(side1, side2, side3, side4, side5, side6, side7, side8):\n    '''\n    Write a function to caluclate the area of a dodecagon.\n    '''\n    return 1/4*side1*side2 + 1/4*side2*side3 + 1/4*side3*side4 + 1/4*side4*side5 + 1/4*side5*side6 + 1/4*side6*side7 + 1/4*side7*side8\ndef area_triangle_quadrilateral(side1, side2, side3, side4):\n    '''\n    Write a function to caluclate the area of a triangle and a quadrilateral.\n    '''\n    return 1/2*side1*side2\ndef area_triangle_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a triangle and a triangle.\n    '''\n    return 1/2*side1*side2\ndef area_triangle_rectangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a triangle and a rectangle.\n    '''\n    return 1/2*side1*side2\ndef area_rectangle_circle(side1, side2, radius):\n    '''\n    Write a function to caluclate the area of a rectangle and a circle.\n    '''\n    return 1/2*side1*side2 + 1/2*math.pi*radius*radius\ndef area_circle_circle(radius1, radius2):\n    '''\n    Write a function to caluclate the area of a circle and a circle.\n    '''\n    return math.pi*radius1*radius2\ndef area_square_square(side1, side2):\n    '''\n    Write a function to caluclate the area of a square and a square.\n    '''\n    return side1*side2\ndef area_square_circle(side1, radius):\n    '''\n    Write a function to caluclate the area of a square and a circle.\n    '''\n    return 1/2*side1*side1\ndef area_circle_square(radius, side2):\n    '''\n    Write a function to caluclate the area of a circle and a square.\n    '''\n    return 1/2*math.pi*radius*radius + 1/2*side2*side2\ndef area_circle_circle(radius1, radius2):\n    '''\n    Write a function to caluclate the area of a circle and a circle.\n    '''\n    return math.pi*radius1*radius2\ndef area_rectangle_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a rectangle and a triangle.\n    '''\n    return 1/2*side1*side2\ndef area_rectangle_rectangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a rectangle and a rectangle.\n    '''\n    return side1*side2\ndef area_rectangle_circle(side1, side2, radius):\n    '''\n    Write a function to caluclate the area of a rectangle and a circle.\n    '''\n    return 1/2*side1*side2 + 1/2*math.pi*radius*radius\ndef area_rectangle_rectangl",
        "num_ids": 35
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((3/4)*(side**2))\n    return area\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3)/4\n    return area\n    \ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume = (4/3)*area_tetrahedron(side)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3 * (side ** 2)) / 4\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((3*math.sqrt(3))/4)*(side**2)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return ((3*math.sqrt(3))/4)*(side**3)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return (side**2)*6\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (3*math.sqrt(3))*(side**2)\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of an octahedron.\n    '''\n    return (3*math.sqrt(3))*(side**3)\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (5*math.sqrt(5))*(side**2)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return (5*math.sqrt(5))*(side**3)\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return (2*math.sqrt(7))*(side**2)\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    return (2*math.sqrt(7))*(side**3)\ndef area_truncated_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a truncated dodecahedron.\n    '''\n    return (4*math.sqrt(7))*(side**2)\ndef volume_truncated_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a truncated dodecahedron.\n    '''\n    return (4*math.sqrt(7))*(side**3)\ndef area_truncated_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a truncated icosahedron.\n    '''\n    return (4*math.sqrt(5))*(side**2)\ndef volume_truncated_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a truncated icosahedron.\n    '''\n    return (4*math.sqrt(5))*(side**3)\ndef area_prism(side):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return (side*4)\ndef volume_prism(side):\n    '''\n    Write a function to caluclate the volume of a prism.\n    '''\n    return (side**2)*6\ndef area_snowflake(side):\n    '''\n    Write a function to caluclate the area of a snowflake.\n    '''\n    return (3*math.sqrt(5))*(side**2)\ndef volume_snowflake(side):\n    '''\n    Write a function to caluclate the volume of a snowflake.\n    '''\n    return (3*math.sqrt(5))*(side**3)\ndef area_hexagon(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return (2*(side**2))\ndef volume_hexagon(side):\n    '''\n    Write a function to caluclate the volume of a hexagon.\n    '''\n    return (6*side**2)\ndef area_truncated_hexagon(side):\n    '''\n    Write a function to caluclate the area of a truncated hexagon.\n    '''\n    return (2*math.sqrt(3)*(side**2))\ndef volume_truncated_hexagon(side):\n    '''\n    Write a function to caluclate the volume of a truncated hexagon.\n    '''\n    return (6*side**2)\ndef area_heptagon(side):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    return (5*(side**2))\ndef volume_heptagon(side):\n    '''\n    Write a function to caluclate the volume of a heptagon.\n    '''\n    return (5*(side**2))\ndef area_octagon(side):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return (8*(side**2))\ndef volume_octagon(side):\n    '''\n    Write a function to caluclate the volume of a octagon.\n    '''\n    return (8*(side**2))\ndef area_nonagon(side):\n    '''\n    Write a function to caluclate the area of a nonagon.\n    '''\n    return (9*(side**2))\ndef volume_nonagon(side):\n    '''\n    Write a function to caluclate the volume of a nonagon.\n    '''\n    return (9*(side**2))\ndef area_decagon(side):\n    '''\n    Write a function to caluclate the area of a decagon.\n    '''\n    return (12*(side**2))\ndef volume_decagon(side):\n    '''\n    Write a function to caluclate the volume of a decagon.\n    '''\n    return (12*(side**2))\ndef area_dodecagon(side):\n    '''\n    Write a function to caluclate the area of a dodecagon.\n    '''\n    return (15*(side**2))\ndef volume_dodecagon(side):\n    '''\n    Write a function to caluclate the volume of a dodecagon.\n    '''\n    return (15*(side**2))\ndef area_tetragon(side):\n    '''\n    Write a function to caluclate the area of a tetragon.\n    '''\n    return (4*(side**2))\ndef volume_tetragon(side):\n    '''\n    Write a function to caluclate the volume of a tetragon.\n    '''\n    return (4*(side**2))\ndef area_nonagon(side):\n    '''\n    Write a function to caluclate the area of a nonagon.\n    '''\n    return (9*(side**2))\ndef volume_nonagon(side):\n    '''\n    Write a function to caluclate the volume of a nonagon.\n    '''\n    return (9*(side**2))\ndef area_octagon(side):\n    '''\n    Write a function to caluclate the area of an octagon.\n    '''\n    return (8*(side**2))\ndef volume_octagon(side):\n    '''\n    Write a function to caluclate the volume of an octagon.\n    '''\n    return (8*(side**2))\ndef area_heptagon(side):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    return (7*(side**2))\ndef volume_heptagon(side):\n    '''\n    Write a function to caluclate the volume of a heptagon.\n    '''\n    return (7*(side**2))\ndef area_nonagon(side):\n    '''\n    Write a function to caluclate the area of a nonagon.\n    '''\n    return (10*(side**2))\ndef volume_nonagon(side):\n    '''\n    Write a function to caluclate the volume of a nonagon",
        "num_ids": 16
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (3*math.sqrt(side**2))\n    return area\n",
        "num_ids": 33
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4*side**2\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(side**2))**0.5\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return area_tetrahedron(side)*side/3\ndef volume_box(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the volume of a box.\n    '''\n    return side_a * side_b * side_c\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (radius**3)\ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return (1/3) * math.pi * (radius**2) * height\ndef volume_cuboid(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return side_a * side_b * side_c\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi * (radius**2) * height\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return 4 * math.pi * (radius**2)\ndef area_cone(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    return math.pi * radius * (radius + (height/2))\ndef area_cuboid(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the area of a cuboid.\n    '''\n    return side_a * side_b\ndef area_cylinder(radius, height):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return math.pi * radius * (radius + (height/2))\ndef surface_sphere(radius):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4 * math.pi * (radius**2)\ndef surface_cone(radius, height):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    return (2 * math.pi * radius) + (2 * math.pi * radius * (height/2))\ndef surface_cuboid(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the surface area of a cuboid.\n    '''\n    return 4 * side_a + 4 * side_b\ndef surface_cylinder(radius, height):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    return 2 * math.pi * radius + (2 * math.pi * radius * (height/2))\ndef mean_rectangle(height, width):\n    '''\n    Write a function to calculate the mean of the values of a rectangle.\n    '''\n    return height*width\ndef mean_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a triangle.\n    '''\n    return mean_rectangle(side_a, side_b) / 2\ndef mean_square(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a square.\n    '''\n    return mean_rectangle(side_a, side_b) * side_c\ndef mean_square_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a triangle.\n    '''\n    return mean_square(side_a, side_b, side_c) / 4\ndef mean_square_rectangle(height, width):\n    '''\n    Write a function to calculate the mean of the values of a rectangle.\n    '''\n    return mean_square(height, width, height)\ndef mean_square_cylinder(radius, height):\n    '''\n    Write a function to calculate the mean of the values of a cylinder.\n    '''\n    return mean_square_square(radius, radius, height)\ndef mean_square_square(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a square.\n    '''\n    return mean_square(side_a, side_b, side_c)\ndef mean_sphere(radius):\n    '''\n    Write a function to calculate the mean of the values of a sphere.\n    '''\n    return surface_sphere(radius)\ndef mean_cone(radius, height):\n    '''\n    Write a function to calculate the mean of the values of a cone.\n    '''\n    return (area_cone(radius, height) + surface_cone(radius, height)) / 2\ndef mean_cuboid(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a cuboid.\n    '''\n    return (area_cuboid(side_a, side_b, side_c) + surface_cuboid(side_a, side_b, side_c)) / 2\ndef mean_cylinder(radius, height):\n    '''\n    Write a function to calculate the mean of the values of a cylinder.\n    '''\n    return (area_cylinder(radius, height) + surface_cylinder(radius, height)) / 2\ndef mean_rectangle(height, width):\n    '''\n    Write a function to calculate the mean of the values of a rectangle.\n    '''\n    return (area_rectangle(height, width) + surface_rectangle(height, width)) / 2\ndef mean_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a triangle.\n    '''\n    return (area_triangle(side_a, side_b, side_c) + surface_triangle(side_a, side_b, side_c)) / 2\ndef mean_rectangle_square(height, width):\n    '''\n    Write a function to calculate the mean of the values of a rectangle.\n    '''\n    return (area_rectangle_square(height, width) + surface_rectangle_square(height, width)) / 2\ndef mean_triangle_square(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a triangle.\n    '''\n    return (area_triangle_square(side_a, side_b, side_c) + surface_triangle_square(side_a, side_b, side_c)) / 2\ndef mean_square(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a square.\n    '''\n    return (area_square(side_a, side_b, side_c) + surface_square(side_a, side_b, side_c)) / 2\ndef mean_square_triangle(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the mean of the values of a triangle.\n    '''\n    return (area_square_triangle(side_a, side_b, side_c) + surface_square_triangle(side_a, side_b, side_c)) / 2\ndef mean_square_rectangle(height, width):\n    '''\n    Write a function to calculate the mean of the values of a rectangle.\n    '''\n    return (area_square_rectangle(height, width) + surface_square_rectangle(height, width)) / 2\ndef mean_square_cylinder(radius, height):\n    '''\n    Write a function to calculate the mean of the values of a cylinder.\n    '''\n    return (area_square_cylinder(radius, height) + surface_square_cylinder(radius, height)) / 2\ndef mean_sphere(radius):\n    '''\n    Write a function to calculate the mean of the values of a sphere",
        "num_ids": 16
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * side**2\n",
        "num_ids": 17
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m == 0:\n        return list\n    elif m > n:\n        return rotate_right(list, m%n)\n    elif m < 0:\n        m = abs(m)\n        return rotate_right(list, m)\n    else:\n        return list[m:] + list[:m]\n",
        "num_ids": 86
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:]+list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[m:]\n    temp.extend(list[:m])\n    return temp\n",
        "num_ids": 26
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:]+list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    list2 = []\n    for i in range(length - m, length):\n        list2.append(list[i])\n    for i in range(0, length - m):\n        list2.append(list[i])\n    return list2\n",
        "num_ids": 69
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for tup in test_tup:\n        if None in tup:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n    \n    \nprint check_none((1,2,3))\nprint check_none((1,2,None))\nprint check_none((1,2,None,4))\nprint check_none((None,2,3))\nprint check_none((None,None,None)",
        "num_ids": 92
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = (10,10.1,None)\n    return None not in test_tup\n",
        "num_ids": 28
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: not any(num % int(i) for i in str(x)), range(startnum, endnum + 1)))\n    ",
        "num_ids": 39
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum,endnum+1) if all([num % i == 0 for i in range(1, 10)])]\n    \n",
        "num_ids": 41
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all(num % int(digit) == 0 for digit in str(num))]\n",
        "num_ids": 37
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum,endnum+1) if all(x%int(i)==0 for i in str(x))]\n",
        "num_ids": 39
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: not (x%int(str(x)[0])), range(startnum,endnum))\n    \nprint(divisible_by_digits(startnum,endnum))\nprint(divisible_by_digits(5,100))",
        "num_ids": 64
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if all([x % int(c) == 0 for c in str(x)])]\n    # return [x for x in range(startnum, endnum+1) if all([any([y % int(c) == 0 for c in str(y)]) for y in range(startnum, endnum+1)])]\n",
        "num_ids": 95
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    from itertools import permutations\n    from functools import reduce\n    return [x for x in range(startnum,endnum+1) if not reduce(lambda x,y: x or not y, map(lambda x: x%10!= 0, permutations(str(x))))]\n",
        "num_ids": 71
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = list(range(startnum, endnum))\n    return [i for i in l if len(str(i)) == len(set(str(i))) and all([i%int(d)==0 for d in str(i)])]\n",
        "num_ids": 61
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if not any([x % int(d) for d in str(x)])]\n    \n    \ndef divisible_by_digits_2(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if not any([any(digit_of_number(x, i) for i in range(1, len(str(x)))) for digit_of_number in [int(d) for d in str(x)]])]\n    \n",
        "num_ids": 72
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all([x % int(i) == 0 for i in str(x)]), range(startnum, endnum + 1)))\n",
        "num_ids": 40
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r*r*a/360\n",
        "num_ids": 32
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Area = pi*r^2*sin(a)\n    if a < 0 or a > 360:\n        return None\n    else:\n        return math.pi * r**2 * math.sin(math.radians(a))\n",
        "num_ids": 58
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = (a*(math.pi/180))\n    if angle > 360:\n        return None\n    else:\n        return math.pi*r*r*(angle/360)\nprint(sector_area(10,45))\nprint(sector_area(5,320))\nprint(sector_area(5,120))\n",
        "num_ids": 80
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*(math.sin(math.radians(a)))\n",
        "num_ids": 40
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r*r*a/360\ndef area_of_the_sector(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return (math.pi*r*r*a/360)\ndef radius_of_the_sector(r,a):\n    '''\n    Write a function to find radius of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return r*(math.pi*a/360)\ndef radius_of_the_circle(r):\n    '''\n    Write a function to find radius of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return r\ndef radius_of_the_circle2(r):\n    '''\n    Write a function to find radius of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return abs(r)\ndef area_of_the_circle(r):\n    '''\n    Write a function to find area of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*(r*r)\ndef area_of_the_circle2(r):\n    '''\n    Write a function to find area of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*(r*r)\ndef circumference_of_the_circle(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return 2*math.pi*r\ndef circumference_of_the_circle2(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return 2*math.pi*r\ndef circumference_of_the_sector(r,a):\n    '''\n    Write a function to find circumference of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return (2*math.pi*r*a)/360\ndef circumference_of_the_sector2(r,a):\n    '''\n    Write a function to find circumference of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return (2*math.pi*r*a)/360\ndef circumference_of_the_circle3(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle4(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle5(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle6(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle7(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle8(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle9(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle10(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle11(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle12(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle13(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle14(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle15(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle16(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if(r<0):\n        return None\n    else:\n        return (2*math.pi*r)\ndef circumference_of_the_circle17(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '",
        "num_ids": 34
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360.0\n",
        "num_ids": 34
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2 * (1 - math.cos(a*math.pi/180))\ndef area_of_sector(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2 * (1 - math.cos(a*math.pi/180))\ndef pi_area_of_sector(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2 * (1 - math.cos(a*math.pi/180))\ndef pi_area_of_sector2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2 * (1 - math.cos(a*math.pi/180))\ndef pi_area_of_sector3(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2 * (1 - math.cos(a*math.pi/180))\ndef pi_area_of_sector4(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2 * (1 - math.cos(a*math.pi/180))\ndef test_sector_area():\n    print(sector_area(3,180) == 6.283185307179586)\n    print(sector_area(3,360) == None)\n    print(sector_area(3,0) == None)\n    print(sector_area(3,90) == 3.1622776601683795)\n    print(sector_area(3,270) == None)\n    print(sector_area(3,270.1) == None)\n    print(sector_area(3,360.1) == None)\n    print(sector_area(3,-90) == None)\n    print(sector_area(3,-270) == None)\n    print(sector_area(3,-270.1) == None)\n    print(sector_area(3,-360.1) == None)\ndef test_area_of_sector():\n    print(area_of_sector(3,180) == 6.283185307179586)\n    print(area_of_sector(3,360) == None)\n    print(area_of_sector(3,0) == None)\n    print(area_of_sector(3,90) == 3.162277660168379)\n    print(area_of_sector(3,270) == None)\n    print(area_of_sector(3,270.1) == None)\n    print(area_of_sector(3,360.1) == None)\n    print(area_of_sector(3,-90) == None)\n    print(area_of_sector(3,-270) == None)\n    print(area_of_sector(3,-270.1) == None)\n    print(area_of_sector(3,-360.1) == None)\ndef test_pi_area_of_sector():\n    print(pi_area_of_sector(3,180) == 6.283185307179586)\n    print(pi_area_of_sector(3,360) == None)\n    print(pi_area_of_sector(3,0) == None)\n    print(pi_area_of_sector(3,90) == 3.162277660168379)\n    print(pi_area_of_sector(3,270) == None)\n    print(pi_area_of_sector(3,270.1) == None)\n    print(pi_area_of_sector(3,360.1) == None)\n    print(pi_area_of_sector(3,-90) == None)\n    print(pi_area_of_sector(3,-270) == None)\n    print(pi_area_of_sector(3,-270.1) == None)\n    print(pi_area_of_sector(3,-360.1) == None)\ndef test_pi_area_of_sector2():\n    print(pi_area_of_sector2(3,180) == 6.283185307179586)\n    print(pi_area_of_sector2(3,360) == None)\n    print(pi_area_of_sector2(3,0) == None)\n    print(pi_area_of_sector2(3,90) == 3.162277660168379)\n    print(pi_area_of_sector2(3,270) == None)\n    print(pi_area_of_sector2(3,270.1) == None)\n    print(pi_area_of_sector2(3,360.1) == None)\n    print(pi_area_of_sector2(3,-90) == None)\n    print(pi_area_of_sector2(3,-270) == None)\n    print(pi_area_of_sector2(3,-270.1) == None)\n    print(pi_area_of_sector2(3,-360.1) == None)\ndef test_pi_area_of_sector3():\n    print(pi_area_of_sector3(3,180) == 6.283185307179586)\n    print(pi_area_of_sector3(3,360) == None)\n    print(pi_area_of_sector3(3,0) == None)\n    print(pi_area_of_sector3(3,90) == 3.162277660168379)\n    print(pi_area_of_sector3(3,270) == None)\n    print(pi_area_of_sector3(3,270.1) == None)\n    print(pi_area_of_sector3(3,360.1) == None)\n    print(pi_area_of_sector3(3,-90) == None)\n    print(pi_area_of_sector3(3,-270) == None)\n    print(pi_area_of_sector3(3,-270.1) == None)\n    print(pi_area_of_sector3(3,-360.1) == None)\ndef test_pi_area_of_sector4():\n    print(pi_area_of_sector4(3,180) == 6.283185307179586)\n    print(pi_area_of_sector4(3,360) == None)\n    print(pi_area_of_sector4(3,0) == None)\n    print(pi_area_of_sector4(3,90) == 3.162277660168379)\n    print(pi_area_of_sector4(3,270) == None)\n    print(pi_area_of_sector4(3,270.1) == None)\n    print(pi_area_of_sector4(3,360.1) == None)\n    print(pi_area_of_sector4(3,-90) == None)\n    print(pi_area_of_sector4(3,-270) == None)\n    print(pi_area_of_sector4(3,-270.1) == None)\n    print(pi_area_of_sector4(3,-360.1) == None)\ndef test_all():\n    test_pi_area_of_sector()\n    test_pi_area_of_sector2()\n    test_pi_are",
        "num_ids": 1503
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # this is not a normal function, but it's a simple exercise\n    if a > 360:\n        return None\n    return math.pi * r**2 * math.sin(math.radians(a))\n",
        "num_ids": 51
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(1-math.cos(math.radians(a)))\n",
        "num_ids": 42
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area=r*a\n        return area\n",
        "num_ids": 28
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #table = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    table = [[[None for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            for k in range(len(Z)+1):\n                if i==0 or j==0 or k==0:\n                    table[i][j][k] = 0\n                elif X[i-1]==Y[j-1]==Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n",
        "num_ids": 247
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n",
        "num_ids": 229
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n",
        "num_ids": 236
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    l = [[[None] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    l[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    l[i][j][k] = l[i - 1][j - 1][k - 1] + 1\n                else:\n                    l[i][j][k] = max(l[i - 1][j][k], l[i][j - 1][k], l[i][j][k - 1])\n    \n    return l[m][n][o]\n",
        "num_ids": 240
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n",
        "num_ids": 31
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    LCS = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else: \n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1]) \n    return LCS[m][n][o]\n",
        "num_ids": 240
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # cache[i][j][k] = lcs for X[:i], Y[:j], and Z[:k] \n    cache = [[[None] for i in range(len(Y) + 1)] for j in range(len(X) + 1)]\n    \n    # if len(X) = 0, lcs = len(Y), if len(Y) = 0, lcs = len(X)\n    for i in range(1, len(X) + 1):\n        cache[i][0][0] = 0\n    for i in range(1, len(Y) + 1):\n        cache[0][i][0] = 0\n    for i in range(1, len(Z) + 1):\n        cache[0][0][i] = 0\n",
        "num_ids": 185
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub('(?<=[a-zA-Z0-9])([A-Z]+)', r'\\1 ', str1)\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('(?<=[a-zA-Z])\\W',' ',str1)\n",
        "num_ids": 27
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    pattern = re.compile('(?<=[a-z])([A-Z][a-z])')\n    new = pattern.sub(r' \\1', str1)\n    return new\n",
        "num_ids": 52
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s1=re.sub('[A-Z]',' ',str1)\n    s2=re.sub('[^A-Z\\s]+',' ',s1)\n    return s2\ndef get_word_list(str1):\n    '''\n    Write a function to extract all the words from a string and put them in a list.\n    '''\n    s1=re.sub('[^A-Za-z]+',' ',str1)\n    s2=re.sub(' +',' ',s1)\n    s3=s2.split(' ')\n    return s3\ndef get_dictionary(fname):\n    '''\n    Write a function to open a file and return a dictionary with words as keys and the number of times they appear as values.\n    '''\n    f=open(fname)\n    s=f.read()\n    f.close()\n    s1=s.lower()\n    s2=capital_words_spaces(s1)\n    s3=get_word_list(s2)\n    d={}\n    for i in s3:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\ndef get_words_above_n(d,n):\n    '''\n    Write a function to return a list of all the words in a dictionary that appear more than n times.\n    '''\n    s=[]\n    for i in d:\n        if d[i]>n:\n            s.append(i)\n    return s\ndef get_longest_word_length(l):\n    '''\n    Write a function to return the length of the longest word in a list of words.\n    '''\n    s=0\n    for i in l:\n        if len(i)>s:\n            s=len(i)\n    return s\ndef get_longest_words(l):\n    '''\n    Write a function to return a list of all the words in a list of words that are the same length.\n    '''\n    s=[]\n    for i in l:\n        if len(i)==len(l[0]):\n            s.append(i)\n    return s\ndef get_middle(l):\n    '''\n    Write a function to return the middle element in a list.\n    '''\n    return l[int(len(l)/2)]\ndef get_middle_letters(l):\n    '''\n    Write a function to return the first half of the word in a list, and the second half of the word in a list.\n    '''\n    s=[]\n    s.append(l[0][0:int(len(l[0])/2)])\n    s.append(l[0][int(len(l[0])/2):])\n    return s\ndef get_shortest_word(l):\n    '''\n    Write a function to return the shortest word in a list of words.\n    '''\n    s=l[0]\n    for i in l:\n        if len(i)<len(s):\n            s=i\n    return s\ndef is_a_palindrome(s):\n    '''\n    Write a function to determine if a word is a palindrome.\n    '''\n    return s==s[::-1]\ndef get_longest_word_in_list(l):\n    '''\n    Write a function to return the longest word in a list of words.\n    '''\n    s=[]\n    s.append(l[0])\n    for i in l:\n        if len(i)>len(s[0]):\n            s.append(i)\n    return s[0]\ndef is_a_palindrome_no_strings(s):\n    '''\n    Write a function to determine if a word is a palindrome.\n    '''\n    s1=s[::-1]\n    return s==s1\ndef get_a_list_of_primes(n):\n    '''\n    Write a function to return a list of all the prime numbers less than n.\n    '''\n    s=[]\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j==0:\n                break\n        else:\n            s.append(i)\n    return s\ndef get_a_list_of_primes_no_strings(n):\n    '''\n    Write a function to return a list of all the prime numbers less than n.\n    '''\n    s=[]\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j==0:\n                break\n        else:\n            s.append(i)\n    return s\ndef get_the_biggest_prime_factor(n):\n    '''\n    Write a function to return the biggest prime factor of a number.\n    '''\n    s=[]\n    for i in range(2,n):\n        if n%i==0:\n            s.append(i)\n    return max(s)\ndef get_the_smallest_prime_factor(n):\n    '''\n    Write a function to return the smallest prime factor of a number.\n    '''\n    s=[]\n    for i in range(2,n):\n        if n%i==0:\n            s.append(i)\n    return min(s)\ndef get_the_smallest_divisor(n):\n    '''\n    Write a function to return the smallest divisor of a number.\n    '''\n    s=[]\n    for i in range(2,n):\n        if n%i==0:\n            s.append(i)\n    return min(s)\ndef get_the_largest_divisor(n):\n    '''\n    Write a function to return the largest divisor of a number.\n    '''\n    s=[]\n    for i in range(2,n):\n        if n%i==0:\n            s.append(i)\n    return max(s)\ndef is_a_perfect_square(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    s=0\n    m=n\n    while m>0:\n        s+=1\n        m=n%10\n        n=n/10\n    return s==n\ndef get_first_digit(n):\n    '''\n    Write a function to return the first digit of a number.\n    '''\n    s=0\n    m=n\n    while m>0:\n        s+=1\n        m=n%10\n        n=n/10\n    return s\ndef get_last_digit(n):\n    '''\n    Write a function to return the last digit of a number.\n    '''\n    s=0\n    m=n\n    while m>0:\n        s+=1\n        m=n%10\n        n=n/10\n    return n\ndef get_middle_digit(n):\n    '''\n    Write a function to return the middle digit of a number.\n    '''\n    s=0\n    m=n\n    while m>0:\n        s+=1\n        m=n%10\n        n=n/10\n    return s\ndef get_all_digits(n):\n    '''\n    Write a function to return a string with all the digits in a number.\n    '''\n    s=''\n    m=n\n    while m>0:\n        s+=str(m%10)\n        m=m/10\n    return s\ndef get_all_digits_no_strings(n):\n    '''\n    Write a function to return a string with all the digits in a number.\n    '''\n    s=''\n    m=n\n    while m>0:\n        s+=str(m%10)\n        m=m/10\n    return s\ndef get_first_and_last_digits(n):\n    '''\n    Write a function to return the first and last digits of a number.\n    '''\n    s=0\n    m=n\n    while m>0:\n        s+=1\n        m=n%10\n        n=n/10\n    return s,n\ndef get_first_n_digits(n,d):\n    '''\n    Write a function to return the first d digits of a number.\n    '",
        "num_ids": 19
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    p=re.compile(r'(?<=[A-Z]\\w)([A-Z][a-z]+)')\n    # x=p.findall(str1)\n    # print x\n    # return''.join(x)\n    x = p.sub('\\g<1> ', str1)\n    print x\n    return x\n",
        "num_ids": 87
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split(\" \")\n    for i in str1:\n        if i[0].isupper():\n            i=i.strip()\n            i+=\" \"\n    return \"\".join(str1)\n",
        "num_ids": 56
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = re.findall('([A-Z][a-z]+)',str1)\n    for i in res:\n        str1 = str1.replace(i,i+' ')\n    return str1\n",
        "num_ids": 54
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    result = ''\n    for word in str1:\n        if word[0].isupper():\n            result +=''+ word\n        else:\n            result += word\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if len(str1) == 0:\n        return\n    else:\n        result = ''\n        for i in range(0, len(str1)):\n            if str1[i]!='' and i == 0:\n                result += str1[i].upper()\n            elif str1[i]!='' and i!= 0:\n                result +='' + str1[i].upper()\n            elif str1[i] =='':\n                if i + 1 < len(str1):\n                    if str1[i + 1] =='':\n                        continue\n                    else:\n                        result +=''\n        return result\ndef word_break(str1):\n    '''\n    Given a string, write a function that checks if the string is a palindrome, using\n    recursion, and that is can be achieved by breaking the string into substrings of\n    length 2 or greater.\n    '''\n    if len(str1) <= 1:\n        return True\n    else:\n        if str1[0] == str1[len(str1) - 1]:\n            if len(str1) > 2:\n                return word_break(str1[1:len(str1) - 1])\n            else:\n                return True\n        else:\n            return False\ndef palindrome(str1):\n    '''\n    Write a function that checks if a string is a palindrome, ignoring\n    case and punctuation.\n    '''\n    if len(str1) <= 1:\n        return True\n    else:\n        if str1[0] == str1[len(str1) - 1]:\n            if len(str1) > 2:\n                return palindrome(str1[1:len(str1) - 1])\n            else:\n                return True\n        else:\n            return False\ndef rotate_word(str1, n):\n    '''\n    Write a function that accepts a string and an integer as arguments and\n    rotates the string by the given integer (rotation should be performed on\n    the first index).\n    '''\n    if len(str1) == 0:\n        return\n    else:\n        str1 = list(str1)\n        new_string = []\n        for i in range(0, len(str1)):\n            new_string.append(str1[(i + n) % len(str1)])\n        return ''.join(new_string)\ndef is_rotation(str1, str2):\n    '''\n    Write a function that accepts two strings and returns true if the second\n    string is a rotation of the first string, and false otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        if len(str1) == 0:\n            return False\n        else:\n            result = rotate_word(str1, 1)\n            if result == str2:\n                return True\n            else:\n                return False\ndef is_palindrome(str1):\n    '''\n    Write a function that accepts a string and returns true if the string is a\n    palindrome, and false otherwise.\n    '''\n    if len(str1) <= 1:\n        return True\n    else:\n        if str1[0] == str1[len(str1) - 1]:\n            if len(str1) > 2:\n                return is_palindrome(str1[1:len(str1) - 1])\n            else:\n                return True\n        else:\n            return False\ndef is_rotation(str1, str2):\n    '''\n    Write a function that accepts two strings and returns true if the second\n    string is a rotation of the first string, and false otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        if len(str1) == 0:\n            return False\n        else:\n            result = rotate_word(str1, 1)\n            if result == str2:\n                return True\n            else:\n                return False\ndef is_rotation(str1, str2):\n    '''\n    Write a function that accepts two strings and returns true if the second\n    string is a rotation of the first string, and false otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        if len(str1) == 0:\n            return False\n        else:\n            result = rotate_word(str1, 1)\n            if result == str2:\n                return True\n            else:\n                return False\ndef first_word(str1):\n    '''\n    Write a function that accepts a string and returns the first word in the\n    string.\n    '''\n    if len(str1) == 0:\n        return\n    else:\n        if str1[0]!='':\n            return str1[0]\n        else:\n            return first_word(str1[1:len(str1)])\ndef last_word(str1):\n    '''\n    Write a function that accepts a string and returns the last word in the\n    string.\n    '''\n    if len(str1) == 0:\n        return\n    else:\n        if str1[len(str1) - 1]!='':\n            return str1[len(str1) - 1]\n        else:\n            return last_word(str1[0:len(str1) - 1])\ndef count_word(str1, str2):\n    '''\n    Write a function that accepts a string and a substring and returns the\n    number of times that substring occurs in the string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0] == str2:\n            return 1 + count_word(str1[1:len(str1)], str2)\n        else:\n            return count_word(str1[1:len(str1)], str2)\ndef max_word(str1):\n    '''\n    Write a function that accepts a string and returns the max word length.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0]!='':\n            return 1 + max_word(str1[1:len(str1)])\n        else:\n            return max_word(str1[1:len(str1)])\ndef max_word_length(str1):\n    '''\n    Write a function that accepts a string and returns the max word length.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0]!='':\n            return 1 + max_word_length(str1[1:len(str1)])\n        else:\n            return max_word_length(str1[1:len(str1)])\ndef reverse_word(str1):\n    '''\n    Write a function that accepts a string and returns the reversed string.\n    '''\n    if len(str1) == 0:\n        return\n    else:\n        return str1[len(str1) - 1] + reverse_word(str1[0:len(str1) - 1])\ndef count_word(str1, str2):\n    '''\n    Write a function that accepts a string and a substring and returns the\n    number of times that substring occurs in the string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        if str1[0] == str2:\n            return 1 + count_word(str1[1:len(str1)], str2)\n        else:\n            return count_word(str1[1:len(str1)], str2)\ndef palindrome_permutation(str1):\n    '''\n    Write a function that accepts a string and returns true if the string is\n    a permutation of a palindrome and false otherwise.\n    '''\n    if len(str1) <= 1:\n        return True\n    else:\n        if str1[0]!= str1[len(str1) - 1]:\n            return palindrome_permutation(str1[1:len(str1) - 1])\n        else:\n            if len(str1) > 2:\n                return palindrome_permutation(str1[1:len(str1) - 1])\n            else:\n                return True\ndef is_permutatio",
        "num_ids": 117
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if str1 is None:\n        return None\n    space_to_add = \"\"\n    for char in str1:\n        if char.isupper():\n            space_to_add = space_to_add + \" \"\n        space_to_add = space_to_add + char\n    return space_to_add\n",
        "num_ids": 78
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if not nums_str:\n        return []\n    nums_str = list(map(lambda x: int(x), nums_str))\n    sorted_nums_str = sorted(nums_str)\n    return list(map(lambda x: str(x), sorted_nums_str))\n",
        "num_ids": 76
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    l = []\n    nums = []\n    for string in nums_str:\n        l.append(string)\n    l.sort()\n    for s in l:\n        nums.append(int(s))\n    return nums\n",
        "num_ids": 60
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    return [str(x) for x in nums]\n",
        "num_ids": 41
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "num_ids": 16
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    new_list = sorted(nums_str)\n    new_list.sort(key=lambda x:int(x))\n    return new_list\n    \n",
        "num_ids": 42
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return [str(num) for num in nums]\n",
        "num_ids": 54
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return [str(num) for num in nums]\n",
        "num_ids": 54
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if not test_list:\n        return [test_tup]\n    else:\n        new_list = []\n        for i in test_list:\n            new_list.append(i + test_tup)\n        return new_list\n",
        "num_ids": 60
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # This line fails.  This is because tuples are immutable.\n    # test_list.append(test_tup)\n    \n    # This works.\n    test_list.extend(test_tup)\n    \n    # print test_list\n    \ndef list_to_tuple(test_list):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Create a new tuple\n    test_tuple = ()\n    \n    # Copy the items from the list to the tuple.\n    for item in test_list:\n        test_tuple += (item,)\n    \n    # print test_tuple\n    \n    return test_tuple\n    \ndef add_tuple_to_list(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    # Add the item to the list.\n    # test_list.append(test_tup)\n    \n    # Add all the items from the tuple to the list.\n    # print len(test_list)\n    for item in test_tup:\n        test_list.append(item)\n    \n    # print test_list\n    \ndef add_item_to_tuple(test_tup, item):\n    '''\n    Write a function to add the given item to the given tuple.\n    '''\n    test_tup = test_tup + (item,)\n    \n    return test_tup\n    \ndef list_to_tuple_and_add(test_list, item):\n    '''\n    Write a function to convert a list to a tuple and then add the given item to the end of the tuple.\n    '''\n    test_tup = list_to_tuple(test_list)\n    add_item_to_tuple(test_tup, item)\n    \n    return test_tup\n    \ndef test_add_tuple():\n    test_list = [1, 2, 3]\n    test_tup = (4, 5, 6)\n    \n    add_tuple(test_list, test_tup)\n    \n    print test_list\n    \ndef test_list_to_tuple():\n    test_list = [1, 2, 3, 4]\n    \n    test_tup = list_to_tuple(test_list)\n    \n    print test_tup\n    \ndef test_add_tuple_to_list():\n    test_list = [1, 2, 3]\n    test_tup = (4, 5, 6)\n    \n    add_tuple_to_list(test_list, test_tup)\n    \n    print test_list\n    \ndef test_add_item_to_tuple():\n    test_tup = (4, 5, 6)\n    item = 7\n    \n    add_item_to_tuple(test_tup, item)\n    \n    print test_tup\n    \ndef test_list_to_tuple_and_add():\n    test_list = [1, 2, 3]\n    item = 4\n    \n    test_tup = list_to_tuple_and_add(test_list, item)\n    \n    print test_tup\n    \ndef main():\n    # test_add_tuple()\n    # test_list_to_tuple()\n    # test_add_tuple_to_list()\n    # test_add_item_to_tuple()\n    test_list_to_tuple_and_add()\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 460
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    test_list.append(test_tup)\n    \n    return test_list\n    \ndef find_intersection(test_list_1, test_list_2):\n    '''\n    Write a function that takes two lists and returns the intersection of them\n    '''\n    \n    intersection = []\n    \n    for element in test_list_1:\n        if element in test_list_2:\n            intersection.append(element)\n            \n    return intersection\n    \ndef find_symmetric_difference(test_list_1, test_list_2):\n    '''\n    Write a function that takes two lists and returns the symmetric difference of them\n    '''\n    \n    difference = []\n    \n    for element in test_list_1:\n        if element not in test_list_2:\n            difference.append(element)\n            \n    for element in test_list_2:\n        if element not in test_list_1:\n            difference.append(element)\n            \n    return difference\n    \ndef find_union(test_list_1, test_list_2):\n    '''\n    Write a function that takes two lists and returns the union of them\n    '''\n    \n    union = []\n    \n    union = add_tuple(union, test_list_1)\n    union = add_tuple(union, test_list_2)\n    \n    return union\n    \ndef find_difference(test_list_1, test_list_2):\n    '''\n    Write a function that takes two lists and returns the difference of them\n    '''\n    \n    difference = []\n    \n    difference = add_tuple(difference, test_list_1)\n    \n    for element in test_list_2:\n        if element in difference:\n            difference.remove(element)\n            \n    return difference\n    \ndef find_letter_value(letter):\n    '''\n    Write a function that takes a letter and returns its integer value.\n    '''\n    \n    value = ord(letter)\n    \n    return value\n    \ndef find_index_of_letters(test_list, test_letter):\n    '''\n    Write a function that takes a list of characters and a character and returns the index of that letter in the list.\n    '''\n    \n    index = 0\n    \n    for element in test_list:\n        if element == test_letter:\n            return index\n        index = index + 1\n        \n    return None\n    \ndef find_multiples_of_letter(test_list, test_letter):\n    '''\n    Write a function that takes a list of characters and a character and returns the list with all elements that are multiples of that character.\n    '''\n    \n    index = find_index_of_letters(test_list, test_letter)\n    \n    if index == None:\n        return None\n    \n    return test_list[index::]\n    \ndef find_permutations(test_list):\n    '''\n    Write a function that takes a list of characters and returns all permutations of those characters.\n    '''\n    \n    permutations = []\n    \n    if len(test_list) <= 1:\n        return test_list\n    \n    permutations.append(test_list)\n    \n    for index in range(len(test_list)):\n        sub_permutations = find_permutations(test_list[0:index] + test_list[index+1:])\n        \n        for sub_permutation in sub_permutations:\n            permutations.append(test_list[index] + sub_permutation)\n            \n    return permutations\n    \ndef find_all_combinations(test_list, test_length):\n    '''\n    Write a function that takes a list of characters and a length and returns all combinations of those characters with the given length.\n    '''\n    \n    combinations = []\n    \n    if test_length == 0:\n        return test_list\n    \n    combinations.append(test_list[0])\n    \n    sub_combinations = find_all_combinations(test_list[1:], test_length-1)\n    \n    for sub_combination in sub_combinations:\n        for element in test_list:\n            combinations.append(sub_combination + [element])\n            \n    return combinations\n    \ndef find_all_strings_with_given_length(test_list, test_length):\n    '''\n    Write a function that takes a list of characters and a length and returns all strings of that length that can be made by these characters.\n    '''\n    \n    strings = []\n    \n    if test_length == 0:\n        return test_list\n    \n    strings.append(test_list[0])\n    \n    sub_strings = find_all_strings_with_given_length(test_list[1:], test_length-1)\n    \n    for sub_string in sub_strings:\n        for element in test_list:\n            strings.append(sub_string + element)\n            \n    return strings\n    \ndef find_all_strings_of_length(test_list, test_length):\n    '''\n    Write a function that takes a list of characters and a length and returns all strings of that length that can be made by these characters.\n    '''\n    \n    strings = []\n    \n    if test_length == 0:\n        return test_list\n    \n    strings.append(test_list[0])\n    \n    for index in range(1, test_length):\n        sub_strings = find_all_strings_of_length(test_list[1:], test_length-index)\n        \n        for sub_string in sub_strings:\n            strings.append([test_list[0]]*index + sub_string)\n            \n    return strings\n    \ndef find_all_strings(test_list):\n    '''\n    Write a function that takes a list of characters and returns all strings that can be made from these characters.\n    '''\n    \n    strings = []\n    \n    for string_length in range(len(test_list)):\n        strings = strings + find_all_strings_of_length(test_list, string_length)\n        \n    return strings\n    \ndef find_missing_integer(test_list):\n    '''\n    Write a function that takes a list of integers and returns the integer that is missing from the list.\n    '''\n    \n    list_sum = 0\n    \n    for element in test_list:\n        list_sum = list_sum + element\n        \n    return list_sum\n    \ndef find_index_of_missing_integer(test_list, test_integer):\n    '''\n    Write a function that takes a list of integers and a number and returns the index of that number in the list.\n    '''\n    \n    index = 0\n    \n    for element in test_list:\n        if element == test_integer:\n            return index\n        index = index + 1\n        \n    return None\n    \ndef find_duplicates(test_list):\n    '''\n    Write a function that takes a list of characters and returns a list of characters that have duplicates.\n    '''\n    \n    duplicates = []\n    \n    for element in test_list:\n        if test_list.count(element) > 1:\n            duplicates.append(element)\n            \n    return duplicates\n    \ndef find_letter_count(test_list, test_letter):\n    '''\n    Write a function that takes a list of characters and a letter and returns a dictionary that contains the number of times that letter appears in the list.\n    '''\n    \n    count = 0\n    \n    for element in test_list:\n        if element == test_letter:\n            count = count + 1\n            \n    return {test_letter: count}\n    \ndef find_occurrences_of_letter(test_list, test_letter):\n    '''\n    Write a function that takes a list of characters and a letter and returns the list with all elements that have the given letter in them.\n    '''\n    \n    occurrences = []\n    \n    for element in test_list:\n        if element == test_letter:\n            occurrences.append(element)\n            \n    return occurrences\n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function that takes a list of characters and returns a list with duplicates removed.\n",
        "num_ids": 22
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i\n    while parent:\n        child = parent * 2 + 1\n        if child < len(arr) and arr[child] < arr[child+1]:\n            child += 1\n        if arr[parent] >= arr[child]:\n            return False\n        parent = child\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # when the ith element is the max of the left and right subtree\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    min_element = arr[i]\n    idx = i\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        min_element = arr[left]\n        idx = left\n    \n    if right < len(arr) and arr[right] < arr[idx]:\n        min_element = arr[right]\n        idx = right\n    \n    # If the root is not the minimum element then swap with root and recurse\n    if idx!= i:\n        arr[i], arr[idx] = arr[idx], arr[i]\n        check_min_heap_helper(arr, i)\n    \ndef check_min_heap(arr):\n    '''\n    This function takes an array of integers and returns true if the array is a min heap or not.\n    This is done by recursively checking the values of the array and comparing them with their children.\n    '''\n    \n    # Size of the array is 1 or less\n    if len(arr) <= 1:\n        return True\n    \n    # We are going to check for the first element of the array, and its children, to see if the array is min heap or not\n    # recursively call check_min_heap_helper on the array and its children\n    check_min_heap_helper(arr, 0)\n    \n    # Now recursively call on the array again on the children\n    for i in range(len(arr)):\n        check_min_heap_helper(arr, i)\n    \n    # Check if all the elements in the array are sorted.\n    # Since all the elements are greater than the elements below it, it must be a min heap\n    for i in range(len(arr)):\n        if arr[i] < arr[(i+1)//2]:\n            return False\n    \n    return True\n",
        "num_ids": 221
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n",
        "num_ids": 13
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if index i is none then there is no left child\n    if arr[i] == None:\n        return True\n    left_child = i * 2 + 1\n    if left_child < len(arr):\n        return arr[left_child] < arr[i] and arr[left_child] < arr[left_child + 1]\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check if parent has left child\n    if i!= 0 and arr[i] < arr[(i - 1) // 2]:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If i is at the end of the array, the above condition does not apply.\n    # So we'll check if arr[i] is less than its children.\n    if i*2+1 < len(arr):\n        # If arr[i] is greater than its left child, then return false.\n        if arr[i] > arr[i*2+1]:\n            return False\n    # If i is at the end of the array, the above condition does not apply.\n    # So we'll check if arr[i] is less than its right child.\n    if i*2+2 < len(arr):\n        # If arr[i] is greater than its right child, then return false.\n        if arr[i] > arr[i*2+2]:\n            return False\n    # If all the conditions are true, then return true.\n    return True\n",
        "num_ids": 201
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child_index = 2 * i + 1\n    right_child_index = 2 * i + 2\n    if left_child_index >= len(arr):\n        return True\n    if arr[i] < arr[left_child_index] or arr[i] < arr[right_child_index]:\n        return False\n    if not check_min_heap_helper(arr, left_child_index):\n        return False\n    if not check_min_heap_helper(arr, right_child_index):\n        return False\n    return True\n",
        "num_ids": 135
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i+1\n    right = 2*i+2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n==0): return 0\n    elif (n==1): return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 55
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "num_ids": 70
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1 or n == 2: \n        return 1\n    elif n == 3: \n        return 3\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "num_ids": 65
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    \n",
        "num_ids": 59
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # initialize the jacobsthal numbers\n    jacobsthal_nums = [1]\n    \n    # find the jacobsthal numbers and store it\n    for i in range(1, n):\n        jacobsthal_nums.append(jacobsthal_nums[i-1] + 2*jacobsthal_nums[i])\n    \n    return jacobsthal_nums[n-1]\n",
        "num_ids": 110
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = [0, 1, 1]\n    for i in range(3, n + 1):\n        l.append((l[i-1] + l[i-2]) % 1000000007)\n    return l[n]\n",
        "num_ids": 57
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    table = [0,1]\n    for i in range(2,n+1): \n        table.append(table[i-2] + table[i-1])\n    return table[n]\n",
        "num_ids": 51
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    \ndef jacobsthal_gen(n):\n    '''\n    Write a generator for the jacobsthal numbers (jacobsthal numbers are the numbers divisible by 2, 3 and 5)\n    '''\n    if n == 0:\n        yield 1\n    elif n == 1:\n        yield 1\n    elif n == 2:\n        yield 2\n    else:\n        a,b = jacobsthal_gen(n-1),jacobsthal_gen(n-2)\n        yield (a+b)%3\n        yield (2*a+b)%3\n    \n    ",
        "num_ids": 100
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    \n    return jacobsthal_num(n-2) + jacobsthal_num(n-1)\n",
        "num_ids": 50
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    \n    j = [0, 1]\n    for i in range(n-2):\n        j.append(j[-1] + j[-2])\n    return j[-1]\n",
        "num_ids": 67
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 0:\n        return []\n    \n    test_list.sort(key=lambda x: x[1])\n    if test_list[0][1] < K:\n        return test_list[:K]\n    else:\n        i = 0\n        while K > 0:\n            if test_list[i][1] >= K:\n                break\n            K -= test_list[i][1]\n            i += 1\n        return test_list[:i] + test_list[i+1:]\n    \n    \ndef test_min_k():\n    print(\"Test 1: \", min_k([(1,2),(2,3),(3,4)], 5))\n    print(\"Test 2: \", min_k([(1,2),(2,3),(3,4)], 4))\n    print(\"Test 3: \", min_k([(1,2),(2,3),(3,4)], 3))\n    print(\"Test 4: \", min_k([(1,2),(2,3),(3,4)], 2))\n    print(\"Test 5: \", min_k([(1,2),(2,3),(3,4)], 1))\n    print(\"Test 6: \", min_k([(1,2),(2,3),(3,4)], 0))\n    print(\"Test 7: \", min_k([(1,2),(2,3),(3,4)], -1))\n    print(\"Test 8: \", min_k([(1,2),(2,3),(3,4)], -2))\n    print(\"Test 9: \", min_k([(1,2),(2,3),(3,4)], -3))\n    print(\"Test 10: \", min_k([(1,2),(2,3),(3,4)], -4))\n    print(\"Test 11: \", min_k([(1,2),(2,3),(3,4)], -5))\n",
        "num_ids": 472
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(2))\n    print(sorted_list)\n    res = []\n    count = 0\n    for i in sorted_list:\n        res.append(i)\n        count += 1\n        if count == K:\n            break\n    return res\n",
        "num_ids": 78
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x:x[1])\n    return test_list[:K]\n",
        "num_ids": 33
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    a = []\n    b = []\n    for i in test_list:\n        if len(b) < K:\n            b.append(i)\n        elif len(b) == K:\n            if i[1] < min(b, key=lambda x:x[1])[1]:\n                a.append(i)\n    return a\n",
        "num_ids": 86
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(test_list, key=lambda x: x[K])\n",
        "num_ids": 20
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = list()\n    for i in range(K):\n        min_list.append(test_list[i])\n",
        "num_ids": 33
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return heapq.nsmallest(K, test_list)\n",
        "num_ids": 18
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return None\n    else:\n        min_set = []\n        for i in range(0, K):\n            min_set.append(min(test_list, key=lambda x: x[i]))\n        return min_set\n    \nif __name__ == '__main__':\n    from time import time\n    \n    # test 1\n    k_list = [10,12,3,4,7,7,8,2,1,9]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,6,7,8,9,10]\n    k_list = [1,2,3,4,5,",
        "num_ids": 1974
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return sort_list[0:K]\n    \n    \ndef min_k_heap(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using heap - in this case a verbatim copy of test cases\n    '''\n    \n    import heapq\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: x[1])\n    \n    \ndef min_k_count(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using count() - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_index(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using index() - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_set(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using set() - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_list(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using list() - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_generator(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using dictionary - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_gen_dict(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_gen_itr(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_gen_itr_dict(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict_gen(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_set_gen(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict_itr(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict_itr_gen(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict_itr_gen_dict(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict_gen_dict(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict_gen_itr_dict(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict_gen_itr_dict_dict(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verbatim copy of test cases\n    '''\n    \n    import collections\n    \n    sort_list = sorted(test_list, key = lambda x: x[1])\n    \n    return collections.Counter(sort_list).most_common(K)\n    \n    \ndef min_k_dict_gen_itr_dict_itr_dict(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list using generator - in this case a verba",
        "num_ids": 23
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # base condition\n    if len(test_list) == 0:\n        return False\n    # base condition\n    if len(test_list) == 1:\n        return test_list[0]\n    # sort the list\n    test_list = sorted(test_list, key=itemgetter(0))\n    # get the first tuple\n    first_tuple = test_list[0]\n    # get the first K elements\n    first_K_ele = first_tuple[:K]\n    # get the second K elements\n    second_K_ele = test_list[1][:K]\n    # compare the first and second K elements\n    if first_K_ele == second_K_ele:\n        return first_K_ele\n    # if both first and second K elements are not same\n    else:\n        # remove the first tuple from the list\n        test_list = test_list[1:]\n        # recursively call the min_k function\n        return min_k(test_list, K)\n    # return False if no element is found\n    return False\n",
        "num_ids": 255
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # if the first and second lists are empty, there is no common element\n    if len(l1) == 0 or len(l2) == 0:\n        return []\n",
        "num_ids": 44
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    m = max(len(l1), len(l2), len(l3))\n    common_list = []\n    for i in xrange(m):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list\n",
        "num_ids": 79
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def common_elements(l1, l2, l3):\n        return [e1 for e1 in l1 if e1 in l2 and e1 in l3]\n    return common_elements(l1, l2, l3)\n",
        "num_ids": 61
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for i in l1:\n        if i in l2 and i in l3:\n            l4.append(i)\n    return l4\n",
        "num_ids": 43
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "num_ids": 65
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Your code here\n    return []\n",
        "num_ids": 12
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in l1:\n        if i in l2 and i in l3:\n            l.append(i)\n    return l\n",
        "num_ids": 40
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_element_list = []\n    for index in range(0, len(l1)):\n        if l1[index] in l2 and l1[index] in l3 and l1[index] not in common_element_list:\n            common_element_list.append(l1[index])\n    return common_element_list\n",
        "num_ids": 83
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k] and i not in l:\n                    l.append(i)\n    return l\n",
        "num_ids": 84
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest\n",
        "num_ids": 81
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first_smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest\n",
        "num_ids": 86
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n    \n",
        "num_ids": 7
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # more compact than using the built-in min function\n    # find the minimum value\n    min_val = min(numbers)\n    # find all values that are not the minimum\n    others = [x for x in numbers if x!= min_val]\n    # return the second smallest\n    return min(others)\n",
        "num_ids": 78
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not isinstance(numbers, list):\n        return None\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    if len(numbers) > 2:\n        numbers.sort()\n        return numbers[-2]\n",
        "num_ids": 77
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers == []:\n        return None\n    else:\n        for n in numbers:\n            if n!= None:\n                numbers.remove(n)\n                return n\n",
        "num_ids": 45
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    else:\n        new_numbers = numbers[:]\n        new_numbers.sort()\n        return new_numbers[1]\n    \n    \nprint(second_smallest([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(second_smallest([-5,-4,-3,-2,-1]))\nprint(second_smallest([4,3,1,5,2])",
        "num_ids": 124
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Your code here\n    min_num = min(numbers)\n    numbers.remove(min_num)\n    return min(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return sorted(numbers)[1]\n",
        "num_ids": 51
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # TODO\n    return False\n",
        "num_ids": 11
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    import re\n    text_match = re.match(r'a(.+)?b', text)\n    print(text_match.group())\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'(?<=a)b+', text)\n    if match:\n        print('Found text: %s' % match.group())\n    else:\n        print('Nothing found')\n",
        "num_ids": 54
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*', text)\n    if match:\n        print(match.group())\n    else:\n        print('Did not match')\n",
        "num_ids": 42
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab*'\n    if re.match(pattern,text):\n        print('Match found')\n    else:\n        print('Match not found')\n",
        "num_ids": 40
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # First, create a regex that matches an 'a' followed by an optional series of one or more 'b's.\n    # The regex has to match the first letter (the regex needs to be fixed for the challenge.)\n    regex = re.compile(r'[ab]*[a]')\n    # The regex should match 'abba', 'abbba', 'abbba', 'ab', 'a', etc.\n    result = regex.findall(text)\n    return result\n",
        "num_ids": 112
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_zero_one2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_one_or_more2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_one_or_more3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_one_or_more4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_no_bracket(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_no_bracket2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_no_bracket3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_no_bracket4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_optional(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_optional2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_optional3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_optional4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_optional5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_or(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_or2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_or3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_match_or4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(?i)a+b\")\n    if pattern.search(text):\n        return True\n    return False\ndef text_matc",
        "num_ids": 42
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_b_pattern = re.compile(r'a(?=.*b)')\n    result = a_b_pattern.search(text)\n    print result\n",
        "num_ids": 43
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match('(a+b)*', text)\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (i < j and test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # https://www.programcreek.com/2012/10/leetcode-reverse-pairs-of-an-array/\n    # https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n",
        "num_ids": 67
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in test_list:\n        if i[::-1] in test_list:\n            count += 1\n    print count\n",
        "num_ids": 39
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #create a dictionary to store the count\n    dictionary = {}\n    for s in test_list:\n        if s[::-1] in dictionary:\n            dictionary[s[::-1]] += 1\n        else:\n            dictionary[s[::-1]] = 1\n    return len(dictionary)\n",
        "num_ids": 77
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # test_list = ['geeks', 'geeks', 'for', 'for', 'eeks', 'e','s','s']\n    #test_list = ['a', 'b', 'c']\n    if len(test_list) == 0:\n        return 0\n    if len(test_list) == 1:\n        return 0\n    elif len(test_list) == 2:\n        return 0 if test_list[0] == test_list[1] else 1\n    else:\n        result = 0\n        for i in range(len(test_list) - 1):\n            for j in range(i + 1, len(test_list)):\n                if test_list[i] == test_list[j][::-1]:\n                    result += 1\n        return result\n",
        "num_ids": 186
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs_of_reverse_strings = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pairs_of_reverse_strings += 1\n    return pairs_of_reverse_strings\n",
        "num_ids": 88
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for x in test_list:\n        count = 0\n        for y in test_list:\n            if x == y[::-1]:\n                count += 1\n        print(count)\n",
        "num_ids": 47
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # initialize a list\n    # loop through the list\n    # for each item, count the reverse string in the list\n    # sum the counts\n    # return the total count\n",
        "num_ids": 42
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) == 0:\n        return 0\n    count = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Hint: Use a dictionary to store the counts of the values\n    list1_dict = {}\n    for i in list1:\n        list1_dict[tuple(i)] = list1_dict.get(tuple(i), 0) + 1\n    return list1_dict\n",
        "num_ids": 70
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    unique_dic = {}\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n            unique_dic[item] = 1\n        else:\n            unique_dic[item] += 1\n",
        "num_ids": 71
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = {}\n    for x in list1:\n        if tuple(x) not in counter:\n            counter[tuple(x)] = 1\n        else:\n            counter[tuple(x)] += 1\n    return counter\n",
        "num_ids": 56
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    sublist = []\n    for item in list1:\n        if item not in sublist:\n            sublist.append(item)\n    for item in sublist:\n        count[item] = list1.count(item)\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    list_dict = {}\n    for i in range(len(list1)):\n        unique_list = list(set(list1[i]))\n        list_dict[tuple(unique_list)] = list1[i].count(unique_list)\n    return list_dict\n    \n    \ndef unique_words_in_string(string):\n    '''\n    Write a function to find all the unique words in a string\n    '''\n    unique_list = []\n    unique_string = []\n    string = string.split(' ')\n    for word in string:\n        unique_list = list(set(word))\n        unique_string.append(tuple(unique_list))\n    return unique_string\n    \n    \ndef find_missing_num(num1,num2,num3):\n    '''\n    Write a function that takes three numbers and returns a list of all the missing numbers between them.\n    '''\n    missing_num = []\n    for i in range(num1,num2):\n        if i not in range(num3):\n            missing_num.append(i)\n    return missing_num\n    \n    \ndef find_missing_num_list(num1,num2,num3):\n    '''\n    Write a function that takes three numbers and returns a list of all the missing numbers between them.\n    '''\n    missing_num = []\n    for i in range(num1,num2):\n        if i not in range(num3):\n            missing_num.append(i)\n    return missing_num\n    \n    \ndef print_grid(n):\n    '''\n    Write a function that prints a grid of nxn stars\n    '''\n    for i in range(n):\n        for j in range(n):\n            print('*',end='')\n        print('')\n    \n    \ndef find_largest_prime_factor(num):\n    '''\n    Write a function that returns the largest prime factor of num\n    '''\n    for i in range(2,int(num**0.5)):\n        if num%i == 0:\n            return i\n    return num\n    \n    \ndef find_largest_prime_factor_list(num):\n    '''\n    Write a function that returns the largest prime factor of num\n    '''\n    list_prime = []\n    for i in range(2,int(num**0.5)):\n        if num%i == 0:\n            list_prime.append(i)\n    return list_prime\n    \n    \ndef check_anagram(word1,word2):\n    '''\n    Write a function that takes two strings as input and returns true if they are anagrams.\n    '''\n    word1 = word1.replace(' ','').lower()\n    word2 = word2.replace(' ','').lower()\n    for letter in word1:\n        if word1.count(letter)!= word2.count(letter):\n            return False\n    return True\n    \n    \ndef check_anagram_list(word1,word2):\n    '''\n    Write a function that takes two strings as input and returns true if they are anagrams.\n    '''\n    word1 = word1.replace(' ','').lower()\n    word2 = word2.replace(' ','').lower()\n    if len(word1)!= len(word2):\n        return False\n    count = {}\n    for letter in word1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    for letter in word2:\n        if letter in count:\n            count[letter] -= 1\n    for value in count.values():\n        if value!= 0:\n            return False\n    return True\n    \n    \ndef add_up(num1,num2):\n    '''\n    Write a function that takes two numbers and returns their sum.\n    '''\n    return num1+num2\n    \n    \ndef add_up_list(numbers):\n    '''\n    Write a function that takes a list of numbers and returns their sum.\n    '''\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i]\n    return sum\n    \n    \ndef multiply_list(num1,num2):\n    '''\n    Write a function that takes two numbers and returns their product.\n    '''\n    return num1*num2\n    \n    \ndef multiply_list_dict(numbers):\n    '''\n    Write a function that takes a list of numbers and returns a dictionary where keys are the unique number and values are the number of occurencies of that number.\n    '''\n    mult_dict = {}\n    for i in range(len(numbers)):\n        mult_dict[numbers[i]] = numbers.count(numbers[i])\n    return mult_dict\n    \n    \ndef find_greatest_common_divisor(num1,num2):\n    '''\n    Write a function that takes two numbers and returns their greatest common divisor.\n    '''\n    for i in range(num1,0,-1):\n        if num1%i == 0 and num2%i == 0:\n            return i\n    return 1\n    \n    \ndef find_greatest_common_divisor_list(num1,num2):\n    '''\n    Write a function that takes two numbers and returns their greatest common divisor.\n    '''\n    list_div = []\n    for i in range(num1,0,-1):\n        if num1%i == 0 and num2%i == 0:\n            list_div.append(i)\n    return list_div\n    \n    \ndef print_first_line(n):\n    '''\n    Write a function that prints n stars in the first line\n    '''\n    for i in range(n):\n        print('*',end='')\n    print('')\n    \n    \ndef print_middle_line(n):\n    '''\n    Write a function that prints n stars in the middle line\n    '''\n    for i in range(n):\n        print(' ',end='')\n    print('*',end='')\n    print('')\n    \n    \ndef print_last_line(n):\n    '''\n    Write a function that prints n stars in the last line\n    '''\n    for i in range(n):\n        print('*',end='')\n    print('')\n    \n    \ndef print_star_pattern(n):\n    '''\n    Write a function that prints n stars in a star pattern\n    '''\n    for i in range(n):\n        print_first_line(n)\n        print_middle_line(n)\n        print_last_line(n)\n    print('')\n    \n    \ndef is_prime(num):\n    '''\n    Write a function that returns true if num is prime and false if num is not prime\n    '''\n    if num == 1:\n        return False\n    else:\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n    return True\n    \n    \ndef is_prime_list(num):\n    '''\n    Write a function that returns true if num is prime and false if num is not prime\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n    \n    \ndef get_common_elements(list1,list2):\n    '''\n    Write a function that returns a list of common elements in two lists\n    '''\n    common_list = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common_list.append(list1[i])\n    return common_list\n    \n    \ndef get_common_elements_list(list1,list2):\n    '''\n    Write a function that returns a list of common elements in two lists\n    '''\n    common_list = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common_list.append(list1[i])\n    return common_list\n    \n    \ndef get_unique_",
        "num_ids": 62
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for list2 in list1:\n        if tuple(list2) not in unique_dict:\n            unique_dict[tuple(list2)] = 1\n        else:\n            unique_dict[tuple(list2)] += 1\n    return unique_dict\n",
        "num_ids": 70
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n    d = defaultdict(list)\n    for i in list1:\n        t = tuple(i)\n        d[t] += [i]\n    return d\n",
        "num_ids": 48
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for sublist in list1:\n        t = tuple(sublist)\n        d[t] = d.get(t,0) + 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for elem in list1:\n        for sublist in elem:\n            t = tuple(sublist)\n            if t in d:\n                d[t] += 1\n            else:\n                d[t] = 1\n    return d\n",
        "num_ids": 65
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for l in list1:\n        temp = tuple(l)\n        d[temp] = d.get(temp,0) + 1\n    return d\n",
        "num_ids": 44
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.match(\"^-?\\d*\\.?\\d*$\", num)!= None:\n        return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    is_num = True\n    num = float(num)\n    if num == 0.0:\n        is_num = False\n    else:\n        num = num - int(num)\n        if num == 0.0:\n            is_num = True\n        else:\n            is_num = False\n    return is_num\n",
        "num_ids": 80
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    s = str(num)\n    for i in range(len(s)):\n        if s[i] not in '0123456789.+-':\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    s = str(num)\n    if len(s) == 0:\n        return False\n    if s[-1] == '.':\n        return False\n    else:\n        for c in s:\n            if c not in '0123456789.':\n                return False\n        return True\n    pass\n",
        "num_ids": 76
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).isdecimal()\n",
        "num_ids": 13
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num) == float:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        if num[0] == '-' and num[1:].isdigit() and len(num) > 1:\n            return True\n        elif num.isdigit() and len(num) > 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    def is_digit(num):\n        if num in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return True\n        else:\n            return False\n",
        "num_ids": 59
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.find('.')!= -1 and len(num) < 13\n",
        "num_ids": 21
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num) is str:\n        return False\n    if float(num) % 1 == 0.0:\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_set = set(arr)\n    return len(arr_set) == len(arr)\n",
        "num_ids": 26
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l = len(arr)\n    num = arr[0]\n    for i in range(1, l):\n        if arr[i]!= num:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    res = []\n    for ele in arr:\n        if ele not in res:\n            res.append(ele)\n    if len(res) == len(arr):\n        print(\"All elements are unique\")\n    else:\n        print(\"Elements are not unique\")\n",
        "num_ids": 65
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d={}\n    for i in arr:\n        if i in d:\n            return False\n        else:\n            d[i]=1\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_element = True\n    for i in arr:\n        if arr.count(i) > 1:\n            distinct_element = False\n    if distinct_element:\n        return distinct_element\n    else:\n        return distinct_element\n",
        "num_ids": 60
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    dict = {}\n    for i in arr:\n        if i in dict.keys():\n            return False\n        else:\n            dict[i] = 1\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for ele in arr:\n        if ele not in unique:\n            unique.append(ele)\n    if len(unique) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if not isinstance(monthnum3, int):\n        raise ValueError('Month number should be an integer')\n    if monthnum3 <= 0 or monthnum3 > 12:\n        raise ValueError('Month number should be between 1 and 12')\n    if not (monthnum3 == 30 or monthnum3 == 31):\n        return False\n    else:\n        return True\n",
        "num_ids": 127
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print \"30 days\"\n    else:\n        print \"29 days\"\n",
        "num_ids": 65
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return \"FALSE\"\n    else:\n        return \"TRUE\"\n",
        "num_ids": 42
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12):\n        return True\n    elif(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n        return False\n    else:\n        return True\n",
        "num_ids": 93
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4,6,9,11]:\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids": 34
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print 'YES'\n    else:\n        print 'NO'\n",
        "num_ids": 63
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (int(year) % 4 == 0 and int(year) % 100!= 0 or int(year) % 400 == 0):\n        return True\n    elif monthnum3 == 2 and (int(year) % 4!= 0 or int(year) % 100 == 0 or int(year) % 400 == 0):\n        return False\n    else:\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n        print \"31 days\"\n    elif (monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n        print \"30 days\"\n    else:\n        print \"29 days\"\n",
        "num_ids": 102
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n",
        "num_ids": 57
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    minimum = arr[1] - arr[0]\n    for i in range(n):\n        if i == 0:\n            continue\n        minimum = min(minimum,arr[i]-arr[i-1])\n    return minimum\n",
        "num_ids": 62
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n",
        "num_ids": 78
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    arr.sort()\n    \n    # use two pointers to check for the smallest difference between arr[i] and arr[j]\n    #where i < j \n    smallest = arr[1] - arr[0]\n    for i in range(n - 1):\n        j = i + 1\n        if arr[i] - arr[j] < smallest:\n            smallest = arr[i] - arr[j]\n    return smallest\n",
        "num_ids": 132
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        min_diff = min(min_diff,arr[i+1] - arr[i])\n    return min_diff\n",
        "num_ids": 63
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[1] - arr[0]\n    for i in range(1, n):\n        res = min(res, arr[i] - arr[i-1])\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n - 1] - arr[0]\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff\n",
        "num_ids": 65
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # O(nlogn)\n    if len(arr) < 2:\n        return None\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if i == 0:\n            return arr[1]-arr[0]\n        if arr[i+1] - arr[i] > 0:\n            return arr[i+1] - arr[i]\n    return arr[-1] - arr[0]\n",
        "num_ids": 107
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        if (arr[i] - arr[i - 1] < min_diff):\n            min_diff = arr[i] - arr[i - 1]\n",
        "num_ids": 73
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1] - arr[0]\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[j] - arr[i]) < min_diff:\n                min_diff = arr[j] - arr[i]\n    return min_diff\n",
        "num_ids": 78
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(str.count(x) for x in '0123456789')\n",
        "num_ids": 23
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str = str[::-1]\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n        else:\n            break\n    return ctr\n",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    # Convert str to int\n    num = int(str)\n    \n    # Return length of str\n    return len(str(num))\n",
        "num_ids": 37
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\nprint number_ctr('123456789')\n",
        "num_ids": 20
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n_prime = 1\n    n_less_then_p_prime = 0\n    n_less_then_p_prime_count = 0\n    n_prime_count = 0\n    while n_prime < n :\n        n_prime_count += 1\n        n_prime = n_prime_count + n_less_then_p_prime_count\n        n_less_then_p_prime_count += 1\n        if n_prime_count % 2 == 0:\n            n_prime_count = 0\n            n_less_then_p_prime += 1\n    return n_less_then_p_prime\ndef prime_factorize(n):\n    '''\n    We need to know how many prime factors each number has. \n    Let us say number n is prime then n is dividible by 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n    so the function will return list with number of prime factors of each number\n    '''\n    factor = 2\n    factors = []\n    while n > 1:\n        if n % factor == 0:\n            factors.append(factor)\n            n = n / factor\n            factor = 2\n        else:\n            factor += 1\n    return factors\ndef first_prime_factors(n):\n    '''\n    We need to know the first prime factor of each number. \n    let us say number n is prime then n is dividible by 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n    so the function will return list with first prime factors of each number\n    '''\n    prime_factors = []\n    n_prime = 2\n    while n_prime < n:\n        if n % n_prime == 0:\n            prime_factors.append(n_prime)\n            n = n / n_prime\n        else:\n            n_prime += 1\n    return prime_factors\ndef second_prime_factors(n):\n    '''\n    We need to know the second prime factor of each number. \n    let us say number n is prime then n is dividible by 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n    so the function will return list with second prime factors of each number\n    '''\n    prime_factors = []\n    n_prime = 3\n    while n_prime < n:\n        if n % n_prime == 0:\n            prime_factors.append(n_prime)\n            n = n / n_prime\n        else:\n            n_prime += 2\n    return prime_factors\ndef third_prime_factors(n):\n    '''\n    We need to know the third prime factor of each number. \n    let us say number n is prime then n is dividible by 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n    so the function will return list with third prime factors of each number\n    '''\n    prime_factors = []\n    n_prime = 5\n    while n_prime < n:\n        if n % n_prime == 0:\n            prime_factors.append(n_prime)\n            n = n / n_prime\n        else:\n            n_prime += 4\n    return prime_factors\ndef is_perfect(n):\n    '''\n    Perfect number is a number which sum of divisors equals to the number. \n    For example if number n is 12 then the divisors are 1,2,3,4,6 and hence the function will return true\n    '''\n    sum_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_divisors += i\n    if sum_divisors == n:\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Abundant number is a number which sum of divisors is more than number. \n    For example if number n is 12 then the divisors are 1,2,3,4,6 and hence the function will return true\n    '''\n    sum_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_divisors += i\n    if sum_divisors > n:\n        return True\n    else:\n        return False\ndef is_abundant_summable(n):\n    '''\n    Write a function to check if number is abundant and summable or not.\n    If the number is abundant then the function will return True and summable will be false\n    '''\n    sum_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_divisors += i\n    if sum_divisors > n:\n        return True\n    else:\n        return False\ndef get_all_abundant_numbers(n):\n    '''\n    Write a function to find all abundant numbers less than n.\n    '''\n    all_abundant_numbers = []\n    for i in range(1,n):\n        if is_abundant(i):\n            all_abundant_numbers.append(i)\n    return all_abundant_numbers\ndef get_all_abundant_summable_numbers(n):\n    '''\n    Write a function to find all abundant numbers less than n.\n    '''\n    all_abundant_numbers = []\n    for i in range(1,n):\n        if is_abundant_summable(i):\n            all_abundant_numbers.append(i)\n    return all_abundant_numbers\ndef is_amicable(n):\n    '''\n    Write a function to check if two numbers are amicable or not.\n    '''\n    sum_of_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\ndef is_amicable_sum(n):\n    '''\n    Write a function to check if two numbers are amicable or not.\n    '''\n    sum_of_divisors = 0\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\ndef get_amicable_numbers(n):\n    '''\n    Write a function to find amicable numbers.\n    '''\n    amicable_numbers = []\n    for i in range(1,n):\n        if is_amicable_sum(i):\n            amicable_numbers.append(i)\n    return amicable_numbers\ndef get_abundant_numbers(n):\n    '''\n    Write a function to find all abundant numbers less than n.\n    '''\n    abundant_numbers = []\n    for i in range(1,n):\n        if is_abundant(i):\n            abundant_numbers.append(i)\n    return abundant_numbers\ndef get_all_perfect_numbers(n):\n    '''\n    Write a function to find all perfect numbers less than n.\n    '''\n    perfect_numbers = []\n    for i in range(1,n):\n        if is_perfect(i):\n            perfect_numbers.append(i)",
        "num_ids": 40
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def factorization(n):\n        i = 2\n        factors = []\n        while i*i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n    l = len(factorization(n))\n    numbers = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if l%i == 0:\n            numbers.append(i)\n            numbers.append(l//i)\n    return sum(numbers)\ndef is_polite_2(n):\n    n = str(n)\n    while len(n) > 1:\n        n = str(eval('*'.join(n)))\n    return eval(n)\ndef is_polite_3(n):\n    '''\n    Nth Prime\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    def nth_prime(n):\n        count = 0\n        while True:\n            if is_prime(count):\n                count += 1\n                if count == n:\n                    return count\n            else:\n                count += 1\n    return nth_prime(n)\ndef is_polite_4(n):\n    '''\n    Odd number\n    '''\n    num = (n+1)//2\n    # find all the factors\n    factors = []\n    for i in range(1, num):\n        if num % i == 0:\n            factors.append(i)\n    for j in range(2, num):\n        if j in factors:\n            factors.remove(j)\n    if len(factors) == 0:\n        return True\n    else:\n        return False\ndef is_polite_5(n):\n    '''\n    Palindromic number\n    '''\n    n = str(n)\n    if n == n[::-1]:\n        return True\n    else:\n        return False\ndef is_polite_6(n):\n    '''\n    Check if a number is prime number or not\n    '''\n    num = 2\n    while num*num <= n:\n        if n % num == 0:\n            return False\n        num += 1\n    return True\ndef is_polite_7(n):\n    '''\n    Largest prime factor\n    '''\n    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\ndef is_polite_8(n):\n    '''\n    Tower of Hanoi\n    '''\n    moves = []\n    def hanoi(n, frm, to, spare):\n        if n > 0:\n            hanoi(n-1, frm, spare, to)\n            moves.append([frm, to])\n            hanoi(n-1, spare, to, frm)\n    hanoi(n, 'A', 'C', 'B')\n    return moves\ndef is_polite_9(n):\n    '''\n    find all the prime factors of n\n    '''\n    i = 2\n    factors = []\n    while i*i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\ndef is_polite_10(n):\n    '''\n    Ulam's sequence\n    '''\n    if n == 1:\n        return True\n    i = 2\n    factors = [1]\n    while i*i < n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    count = 0\n    seq = [1]\n    for i in range(len(factors)):\n        if factors[i] == 1:\n            count += 1\n        else:\n            for j in range(1, len(seq)):\n                if seq[j]*factors[i] == seq[0]:\n                    count += 1\n            if count == 1:\n                seq.append(seq[0]*factors[i])\n                count = 0\n    if len(seq) < len(factors):\n        return False\n    else:\n        return True\ndef is_polite_11(n):\n    '''\n    Prime power\n    '''\n    if n == 1:\n        return True\n    i = 2\n    factors = [1]\n    while i*i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    for i in range(len(factors)-1):\n        if factors[i]**factors[i+1] == n:\n            return True\n    return False\ndef is_polite_12(n):\n    '''\n    Check if a number is a happy number\n    '''\n    def happy(n):\n        # check if the number is 1\n        if n == 1:\n            return True\n        # check if the number is even\n        if n % 2 == 0:\n            return happy(n//2)\n        # check if the number is a square\n        temp = n\n        num = 1\n        while temp > 0:\n            num *= 10\n            temp //= 10\n        temp = num\n        while temp > 0:\n            if temp % 10 == n:\n                return False\n            temp //= 10\n        return True\n    return happy(n)\ndef is_polite_13(n):\n    '''\n    Multiples of 3 or 5\n    '''\n    return (n%3 == 0 or n%5 == 0)\ndef is_polite_14(n):\n    '''\n    Largest multiple of 3 or 5\n    '''\n    a = n % 3\n    b = n % 5\n    if a == 0:\n        return 3\n    if b == 0:\n        return 5\n    return max(a, b)\ndef is_polite_15(n):\n    '''\n    Palindromic prime\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    n = str(n)\n    if is_prime(int(n)) and n == n[::-1]:\n        return True\n    else:\n        return False\ndef is_polite_16(n):\n    '''\n    LCM of 2 numbers\n    '''\n    a = n%100\n    b = n//100\n    while b:\n        a, b = b, a%b\n    return a\ndef is_polite_17(n):\n    '''\n    Consecutive prime numbers\n    '''\n    num = n//2\n    count = 0\n    while num > 1:\n        if is_prime(num):\n            count += 1\n        num //= 2\n    return count\ndef is_polite_18(n):\n    '''\n    Prime count in a range\n    '''\n    num = 100\n    count = 0\n    while num < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return count\ndef is_polite_19(n):\n    '''\n    Smallest multiple\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\ndef is_polite_20(n):\n    '''\n    Largest multiple\n    '''\n    for i in range(n, 0, -1):\n        if n % i =",
        "num_ids": 22
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n += 1\n    return ((1 + math.sqrt(5))**n - (1 - math.sqrt(5))**n) / math.sqrt(5)\n",
        "num_ids": 44
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #c=0\n    #for i in range(2,n):\n    #    if i%2!=0:\n    #        c+=1\n    #if n%2==0:\n    #    c-=1\n    #if n>2 and c%2==0:\n    #    return True\n    #else:\n    #    return False\n    return n%2!=0\n",
        "num_ids": 97
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 1\n    b = 0\n    c = 1\n    d = 1\n    while True:\n        a = b\n        b = c\n        c = d\n        d = a + b + c\n        if d == n:\n            return True\n        elif d > n:\n            return False\n",
        "num_ids": 74
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    x = [1]\n    nth_polite = 0\n    while len(x) < n:\n        nth_polite += 1\n        m = len(x)\n        while True:\n            if m > n:\n                break\n            if is_polite_not_a_polite(m, x):\n                x.append(m)\n                break\n            m += 1\n    return nth_polite\ndef is_polite_not_a_polite(m, x):\n    if m == 1:\n        return True\n    if m == 2:\n        if is_polite_not_a_polite(m - 1, x):\n            return True\n        else:\n            return False\n    if m % 2 == 0:\n        return is_polite_not_a_polite(m / 2, x)\n    if is_polite_not_a_polite(m - 1, x):\n        return True\n    else:\n        return False\n    \ndef get_pow_consecutive(n):\n    '''\n    Write a function to find nth power of consecutive numbers. geeksforgeeks.org/n-th-consecutive-power/\n    '''\n    x = [0] * (n + 1)\n    for i in range(1, n + 1):\n        x[i] = i * x[i - 1]\n    return x[n]\ndef power_of_consecutive_number(n):\n    '''\n    Write a function to find nth power of consecutive numbers. geeksforgeeks.org/n-th-consecutive-power/\n    '''\n    x = [1]\n    for i in range(1, n):\n        x.append(i * x[i - 1])\n    return x[n - 1]\ndef find_min_max(arr):\n    '''\n    Write a function to find min and max element in array. geeksforgeeks.org/find-min-max-element-in-array/\n    '''\n    if len(arr) == 0:\n        return None\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return [min_val, max_val]\ndef smallest_subarray_with_given_sum(s, arr):\n    '''\n    Write a function to find smallest subarray with given sum in the array. geeksforgeeks.org/smallest-subarray-with-given-sum/\n    '''\n    n = len(arr)\n    if s > sum(arr):\n        return [-1, -1]\n    left = 0\n    right = n - 1\n    min_length = n + 1\n    curr_sum = 0\n    while left <= right:\n        if curr_sum == s:\n            min_length = min(min_length, right - left + 1)\n            right -= 1\n            curr_sum -= arr[left]\n            left += 1\n        elif curr_sum > s:\n            curr_sum -= arr[left]\n            left += 1\n        else:\n            right -= 1\n            curr_sum += arr[right]\n    if min_length == n + 1:\n        return [-1, -1]\n    return [left, right]\ndef count_pairs(arr, sum_value):\n    '''\n    Write a function to count pairs of elements in an array that sum up to a given value. geeksforgeeks.org/count-pairs-with-given-sum/\n    '''\n    arr_dict = {}\n    for i in range(len(arr)):\n        if arr[i] in arr_dict:\n            arr_dict[arr[i]] += 1\n        else:\n            arr_dict[arr[i]] = 1\n    count = 0\n    for j in arr_dict:\n        if sum_value - j in arr_dict:\n            count += arr_dict[j] * arr_dict[sum_value - j]\n    return count\ndef min_pairs(arr, sum_value):\n    '''\n    Write a function to find minimum number of pairs of elements in an array that sum up to a given value. geeksforgeeks.org/minimum-number-pairs-with-given-sum/\n    '''\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    min_pairs = 0\n    while left <= right:\n        if arr[left] + arr[right] == sum_value:\n            min_pairs += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] > sum_value:\n            right -= 1\n        else:\n            left += 1\n    return min_pairs\ndef count_pairs_one_pass(arr, sum_value):\n    '''\n    Write a function to count pairs of elements in an array that sum up to a given value. geeksforgeeks.org/count-pairs-with-given-sum/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == sum_value:\n            count += 1\n    return count\ndef sorted_rotated_array_search(arr, target):\n    '''\n    Write a function to search a sorted array which is rotated, but it is not rotated in the original array. geeksforgeeks.org/sorted-rotated-array-search/\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if target == arr[mid]:\n            return mid\n        if target < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\ndef count_rotated_array_search(arr, target):\n    '''\n    Write a function to search a sorted array which is rotated, but it is not rotated in the original array. geeksforgeeks.org/sorted-rotated-array-search/\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if target == arr[mid]:\n            return mid\n        if arr[left] <= arr[mid]:\n            if target >= arr[left] and target <= arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if target >= arr[mid] and target <= arr[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1\ndef find_smallest_missing_positive(arr):\n    '''\n    Write a function to find the smallest missing positive in a sorted array. geeksforgeeks.org/find-the-smallest-missing-positive-number-in-a-sorted-array/\n    '''\n    if arr[0] > 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1] - 1:\n            return arr[i] + 1\n    return arr[-1] + 1\ndef find_smallest_rotated_number(arr):\n    '''\n    Write a function to find the smallest element in a rotated array. geeksforgeeks.org/find-the-smallest-element-in-a-rotated-sorted-array/\n    '''\n    if arr[0] < arr[-1]:\n        return arr[0]\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]\ndef count_unique(arr):\n    '''\n    Write a function to find number of unique elements in an array. geeksforgeeks.org/count-unique-elements-in-an-array/\n    '''\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i]!= ar",
        "num_ids": 36
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return(n*(n+1)//2)\n",
        "num_ids": 16
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # geeksforgeeks.org/n-th-polite-number/\n    '''\n    Polite number is a number whose only prime divisor is 1,\n    that is number whose only prime divisors is greater than 1.\n",
        "num_ids": 35
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polites = [0,1]\n    for i in range(2,n+1):\n        #print(\"i=\"+str(i))\n        num = len(polites)\n        if num == 0:\n            num = 1\n        elif num == 1:\n            num = 2\n        elif num == 2:\n            num = 3\n        elif num == 3:\n            num = 5\n        elif num == 5:\n            num = 11\n        elif num == 11:\n            num = 20\n        elif num == 20:\n            num = 22\n        else:\n            print(\"i=\"+str(i))\n            print(\"num=\"+str(num))\n            print(\"len(polites)=\"+str(len(polites)))\n            num = 3*num+1\n        polites.append(num)\n    return len(polites)-1\n",
        "num_ids": 207
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n == 1):\n        return 0\n    if (n == 2):\n        return 1\n    if (n == 3):\n        return 3\n    a = [0,1,3]\n    for i in range(4,n+1):\n        k = i/2\n        j = int(math.sqrt(i))\n        if j*j == i:\n            j -= 1\n        a.append(a[j] + (i - j*j)/(j + 1))\n    return a[-1]\n",
        "num_ids": 127
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Make a copy of the list\n    l2 = l1[:]\n    # Swap the items in the list in pairs\n    for i in range(1, len(l2), 2):\n        l2[i-1], l2[i] = l2[i], l2[i-1]\n    return l2\n",
        "num_ids": 79
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    d = {}\n    for i in range(len(l1) - 1):\n        d[l1[i]] = l1[i+1]\n    return d.values()\n",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[x], l1[x+1]) for x in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    def pair_w(l2):\n        return [(l2[i], l2[i + 1]) for i in range(len(l2) - 1)]\n",
        "num_ids": 41
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])\n",
        "num_ids": 16
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    i = 0\n    while i < len(l1):\n        result.append([l1[i], l1[i+1]])\n        i += 2\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    pairs = []\n    for i in range(0, len(l1) - 1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n",
        "num_ids": 51
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    if len(l1) < 2:\n        return pair_list\n    elif len(l1) == 2:\n        pair_list.append([l1[0], l1[1]])\n        return pair_list\n    else:\n        pair_list.append([l1[0], l1[1]])\n        for i in range(2, len(l1)):\n            pair_list.append([l1[i-1], l1[i]])\n        return pair_list\n    \ndef interval(l1):\n    '''\n    Write a function to compute the area of two rectangles, each with width and height 1.\n    '''\n    return l1[0] * l1[1]\n",
        "num_ids": 16
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in xrange(0,len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n",
        "num_ids": 50
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            output.append((l1[i], l1[j]))\n    return output\n",
        "num_ids": 58
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if not arr:\n        return 0\n    if len(arr) < 2:\n        return 0\n    return (arr[0]+1)*(get_pairs_count(arr[1:], sum-arr[0]) + get_pairs_count(arr[1:], sum))\n",
        "num_ids": 70
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    if len(arr)<2:\n        return pairs_count\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 83
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) <= 1:\n        return 0\n    hashmap = {}\n    result = 0\n    for i in range(len(arr)):\n        if (sum - arr[i]) in hashmap:\n            result = result + hashmap[sum - arr[i]]\n        if arr[i] in hashmap:\n            hashmap[arr[i]] += 1\n        else:\n            hashmap[arr[i]] = 1\n    return result\n",
        "num_ids": 109
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in xrange(len(arr)):\n        if sum - arr[i] in arr:\n            result += 1\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Use Dict\n    d = {}\n    for num in arr:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    count = 0\n    for num in d:\n        if num + sum in d:\n            count += d[num] * (d[num] - 1) // 2\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len([ i for i in arr if i <= sum ])\n",
        "num_ids": 17
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    map = {}\n    for num in arr:\n        map[num] = map.get(num, 0) + 1\n    count = 0\n    for num in arr:\n        count += map.get(sum-num, 0)\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    li_dif.sort()\n    return li_dif\n",
        "num_ids": 37
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [i for i in li1 + li2 if i not in li1 or i not in li2]\n",
        "num_ids": 28
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n",
        "num_ids": 28
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).difference(set(li2)))\n",
        "num_ids": 20
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1+li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n % 2 == 1) : \n        return (n*n*n*n)\n    else :\n        return (n*n*n*n - 1)\n",
        "num_ids": 44
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return \n    else :\n        return n + odd_num_sum(n - 1)\n",
        "num_ids": 33
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : \n        return 'enter a positive number'\n",
        "num_ids": 19
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(1,n+1,2) if x%2!= 0)\n",
        "num_ids": 31
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(i*i*i for i in range(1,n) if i % 2 == 1)\n",
        "num_ids": 28
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n * (n + 1) ** 2 / 4\n",
        "num_ids": 16
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    res = 0\n    for i in range(1, n) : \n        if (i % 2)!= 0 :\n            res = res + (i * i * i * i)\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0 \n    for num in range(1,n+1,2) : \n        sum = sum + num ** 4 \n    print(sum)\n",
        "num_ids": 41
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if (i%2!= 0):\n            s = s + i**4\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1) : \n        total += i**4\n    return total \n",
        "num_ids": 34
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for token in exp.split():\n        if token in '{[(':\n            stack.append(token)\n        elif token == '}':\n            if len(stack) == 0 or stack.pop()!= '{':\n                return False\n        elif token == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n        elif token == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n",
        "num_ids": 148
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #s = ['(',')','[',']']\n    stack = deque()\n    for i in exp:\n        if i in ['(','[','{']:\n            stack.append(i)\n        elif i in [')',']','}']:\n            if stack:\n                top = stack.pop()\n                if top == '(' and i == ')':\n                    continue\n                elif top == '[' and i == ']':\n                    continue\n                elif top == '{' and i == '}':\n                    continue\n                else:\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True\n    \ndef build_tree(exp):\n    '''\n    Write a function to build a tree from the given expression. https://www.geeksforgeeks.org/build-a-tree-from-a-given-expression/\n    '''\n    #s = ['(',')','[',']']\n    stack = deque()\n    dict_ = {}\n    l = len(exp)\n    for i in range(l):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if not stack:\n                return\n            top = stack.pop()\n            if top!= '(':\n                dict_[top] = exp[i]\n        elif exp[i] == '[':\n            stack.append(exp[i])\n        elif exp[i] == ']':\n            if not stack:\n                return\n            top = stack.pop()\n            if top!= '[':\n                dict_[top] = exp[i]\n        elif exp[i] == '{':\n            stack.append(exp[i])\n        elif exp[i] == '}':\n            if not stack:\n                return\n            top = stack.pop()\n            if top!= '{':\n                dict_[top] = exp[i]\n    if stack:\n        return\n    else:\n        return dict_\ndef find_max_depth(tree):\n    '''\n    Write a function to find the maximum depth of a tree or graph. https://www.geeksforgeeks.org/find-maximum-depth-of-a-tree-or-graph/\n    '''\n    if not tree:\n        return 0\n    else:\n        return 1 + max(find_max_depth(tree[i]) for i in tree)\ndef is_balanced(tree):\n    '''\n    Write a function to check if a given tree is balanced or not. https://www.geeksforgeeks.org/check-if-a-tree-is-balanced/\n    '''\n    if not tree:\n        return True\n    else:\n        return abs(find_max_depth(tree) - find_min_depth(tree)) <= 1\ndef find_min_depth(tree):\n    '''\n    Write a function to find the minimum depth of a tree or graph. https://www.geeksforgeeks.org/find-minimum-depth-of-a-tree-or-graph/\n    '''\n    if not tree:\n        return 0\n    elif len(tree) == 1:\n        return 1\n    else:\n        return min(find_min_depth(tree[i]) for i in tree) + 1\ndef find_dist(tree,a,b):\n    '''\n    Write a function to find the distance between 2 nodes in a given tree. https://www.geeksforgeeks.org/find-distance-between-nodes-in-a-given-tree/\n    '''\n    if not tree:\n        return 0\n    elif tree[0] == a and tree[1] == b:\n        return 0\n    elif tree[0] == a:\n        return 1 + find_dist(tree[1:],b,b)\n    elif tree[1] == b:\n        return 1 + find_dist(tree[2:],a,a)\n    else:\n        return 1 + find_dist(tree[2:],a,b)\ndef is_bst(tree):\n    '''\n    Write a function to check if a binary tree is a binary search tree. https://www.geeksforgeeks.org/check-if-a-binary-tree-is-a-bst/\n    '''\n    if not tree:\n        return True\n    elif tree[0] > tree[1]:\n        return False\n    else:\n        return is_bst(tree[2:]) and is_bst(tree[:2])\ndef is_valid(tree):\n    '''\n    Write a function to check if a tree is a valid binary search tree. https://www.geeksforgeeks.org/check-if-a-binary-search-tree-is-valid/\n    '''\n    if not tree:\n        return True\n    elif tree[0] < tree[1]:\n        return is_valid(tree[2:]) and is_valid(tree[1:])\n    else:\n        return False\ndef construct_tree(exp):\n    '''\n    Write a function to construct a binary tree from the given expression. https://www.geeksforgeeks.org/construct-a-binary-tree-from-the-given-expression/\n    '''\n    #s = ['(',')','[',']']\n    stack = deque()\n    for i in exp:\n        if i in ['(','[','{']:\n            stack.append(i)\n        elif i in [')','}',']']:\n            if not stack:\n                return\n            top = stack.pop()\n            if top == '(' and i == ')':\n                continue\n            elif top == '[' and i == ']':\n                continue\n            elif top == '{' and i == '}':\n                continue\n            else:\n                return\n    if stack:\n        return\n    else:\n        return\ndef count_nodes(tree):\n    '''\n    Write a function to count the number of nodes in a tree. https://www.geeksforgeeks.org/count-the-number-of-nodes-in-a-tree/\n    '''\n    if not tree:\n        return 0\n    elif not tree[1:]:\n        return 1\n    else:\n        return 1 + count_nodes(tree[1:])\ndef get_left_child(tree,i):\n    '''\n    Write a function to get the left child of a node. https://www.geeksforgeeks.org/get-the-left-child-of-a-node-in-a-tree/\n    '''\n    if not tree:\n        return\n    elif tree[0] < tree[i]:\n        return tree[0]\n    else:\n        return get_left_child(tree[1:],i-1)\ndef get_right_child(tree,i):\n    '''\n    Write a function to get the right child of a node. https://www.geeksforgeeks.org/get-the-right-child-of-a-node-in-a-tree/\n    '''\n    if not tree:\n        return\n    elif tree[0] > tree[i]:\n        return tree[0]\n    else:\n        return get_right_child(tree[1:],i-1)\ndef is_bst_2(tree):\n    '''\n    Write a function to check if a tree is a balanced binary search tree. https://www.geeksforgeeks.org/check-if-a-binary-search-tree-is-balanced/\n    '''\n    if not tree:\n        return True\n    elif tree[0] < tree[1]:\n        return is_bst_2(tree[2:]) and is_bst_2(tree[1:])\n    else:\n        return False\ndef find_bst_in_range(tree,start,end):\n    '''\n    Write a function to find a node in a given range of a balanced binary search tree. https://www.geeksforgeeks.org/find-a-node-in-a-given-range-of-a-binary-search-tree/\n    '''\n    if not tree:\n        return\n    elif start > tree[0] and end < tree[1]:\n        return find_bst_in_range(tree[2:]",
        "num_ids": 43
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n    \ndef check_expression2(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    for c in exp:\n        if c == '(':\n            s.append(c)\n        elif c == ')':\n            if len(s) == 0:\n                return False\n            s.pop()\n    return len(s) == 0\n",
        "num_ids": 69
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for x in exp:\n        if x == '{':\n            stack.append('{')\n        elif x == '}':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if not stack:\n        return True\n    else:\n        return False\n",
        "num_ids": 79
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_symbols = {'{':'}', '[':']', '(':')'}\n    for i in exp:\n        if i in open_symbols:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            if open_symbols[stack.pop()]!= i:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 108
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    dict = {'(':0, ')':0, '{':1, '}':1, '[':2, ']':2}\n    for i in exp:\n        if i in dict:\n            stack.append(i)\n        elif i == ')' and len(stack) > 0 and stack[-1] == '(':\n            stack.pop()\n        elif i == ']' and len(stack) > 0 and stack[-1] == '[':\n            stack.pop()\n        elif i == '}' and len(stack) > 0 and stack[-1] == '{':\n            stack.pop()\n        else:\n            return False\n    if len(stack) > 0:\n        return False\n    return True\n",
        "num_ids": 183
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in '([{':\n            stack.append(ch)\n        elif ch in ')]}':\n            if len(stack) == 0:\n                return False\n            ch_opening = stack.pop()\n            if ch_opening == '(':\n                if ch!= ')':\n                    return False\n            elif ch_opening == '{':\n                if ch!= '}':\n                    return False\n            elif ch_opening == '[':\n                if ch!= ']':\n                    return False\n    if len(stack) == 0:\n        return True\n    return False\ndef get_middle_stack(exp):\n    stack = deque()\n    for ch in exp:\n        if ch in '([{':\n            stack.append(ch)\n        elif ch in ')]}':\n            if len(stack) == 0:\n                return None\n            ch_opening = stack.pop()\n            if ch_opening == '(':\n                if ch!= ')':\n                    return None\n            elif ch_opening == '{':\n                if ch!= '}':\n                    return None\n            elif ch_opening == '[':\n                if ch!= ']':\n                    return None\n    if len(stack) == 0:\n        return None\n    return stack.pop()\n",
        "num_ids": 319
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Create a stack to store opening and closing brackets\n    stack = []\n    # Iterate over the Expression\n    for char in exp:\n        # If opening bracket, append it to the stack\n        if char == '(':\n            stack.append(char)\n        # If closing bracket, pop the top element\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    # If the stack is empty, it means that there is a closing bracket without an opening bracket. Hence, the Expression is not balanced\n    if len(stack)!= 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 156
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for letter in exp:\n        if letter in '([{':\n            stack.append(letter)\n        elif letter in ')]}':\n            if len(stack)==0:\n                return False\n            if stack[-1] == '(' and letter == ')':\n                stack.pop()\n            elif stack[-1] == '[' and letter == ']':\n                stack.pop()\n            elif stack[-1] == '{' and letter == '}':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 159
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    queue = deque()\n    for i in exp:\n        if i == '(' or i == '{' or i == '[':\n            queue.append(i)\n        elif i == ')' or i == '}' or i == ']':\n            if len(queue) == 0:\n                return False\n            if i == ')' and queue[-1]!= '(':\n                return False\n            elif i == '}' and queue[-1]!= '{':\n                return False\n            elif i == ']' and queue[-1]!= '[':\n                return False\n            queue.pop()\n    if len(queue) > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 171
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    s = test_str.split(' ')\n    return''.join([s[i] for i in range(len(s)) if len(s[i])!=K])\n",
        "num_ids": 44
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    a = test_str.split()\n    b = [i for i in a if len(i)!= K]\n    return''.join(b)\n",
        "num_ids": 38
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    # create a new list to store the final output\n    res = []\n    \n    # traverse the test string and create a new word of length K if it doesn't have length K\n    for i in xrange(len(test_str)):\n        if len(test_str[i:i+K]) == K:\n            res.append(test_str[i:i+K])\n    \n    # return the result\n    return \"\".join(res)\n",
        "num_ids": 111
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([i for i in test_str.split() if len(i)!= K])\n",
        "num_ids": 26
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = \"\"\n    for word in test_str.split():\n        if len(word) == K:\n            continue\n        res += word + \" \"\n    return res[:-1]\n    \ndef atoi(arr):\n    res = 0\n    for i in arr:\n        res = res * 10 + i\n    return res\n    \ndef is_strictly_increasing(arr):\n    '''\n    Given an array of integers, find if the array is strictly increasing or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n    \ndef is_increasing(arr):\n    '''\n    Given an array of integers, find if the array is increasing or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            return False\n    return True\n    \ndef is_sorted(arr):\n    '''\n    Given an array of integers, find if the array is sorted or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n    \ndef count_sorted_arrays(arr, lo, hi):\n    '''\n    Given an array of integers and a range, find the number of sorted arrays in the range.\n    '''\n    if lo >= hi:\n        return 1\n    if arr[lo] <= arr[hi]:\n        return 0\n    mid = lo + (hi-lo)/2\n    res = count_sorted_arrays(arr, lo, mid) + count_sorted_arrays(arr, mid+1, hi)\n    i = lo\n    while i <= mid:\n        j = mid+1\n        while j <= hi:\n            if arr[i] < arr[j]:\n                break\n            j += 1\n        res += j-mid-1\n        i += 1\n    return res\n    \ndef search_insertion(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n    \ndef search_rotated_array(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target < arr[mid]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return -1\n    \ndef search_rotated_arrays(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            if target <= arr[hi] and target > arr[lo]:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        else:\n            if target >= arr[lo] and target < arr[hi]:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n    return -1\n    \ndef search_rotated_arrays_optimized(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            if target <= arr[hi] and target > arr[lo]:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        else:\n            if target >= arr[lo] and target < arr[hi]:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n    return -1\n    \ndef search_rotated_arrays_optimized2(arr, target):\n    '''\n    Given a sorted array and a target integer, find the index of the target integer in the array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo)/2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            if target <= arr[hi] and target > arr[lo]:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        else:\n            if target >= arr[lo] and target < arr[hi]:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n    return -1\n    \ndef sum_of_subset(arr):\n    '''\n    Given an array of integers and a target integer, find the number of pairs in the array whose sum is equal to the target integer.\n    '''\n    res = 0\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if i-target in d and i == target:\n            res += d[i]*(d[i]-1)/2\n        elif i-target in d:\n            res += d[i-target]*d[i]\n    return res\n    \ndef find_duplicates(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if d[i] > 1:\n            return i\n    return -1\n    \ndef find_rotated_arrays(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    res = []\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if d[i] > 1:\n            res.append(i)\n            d[i] -= 1\n    return res\n    \ndef find_missing_number(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in range(len(arr)):\n        if d.get(i, 0) == 1:\n            return i\n    return len(arr)\n    \ndef find_duplicates_optimized(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    res = []\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if d[i] > 1:\n            res.append(i)\n            d[i] -= 1\n    return res\n    \ndef find_rotated_arrays(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    res = []\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in arr:\n        if d[i] > 1:\n            res.append(i)\n            d[i] -= 1\n    return res\n    \ndef find_rotated_arrays_optimized(arr):\n    '''\n    Given an array of integers, find the first element that appears more than once.\n    '''\n    res = []\n    d = {}\n    fo",
        "num_ids": 14
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str)<K:\n        return test_str\n    if K==1:\n        return ''.join(test_str.split(' '))\n    else:\n        return''.join(test_str.split(' ')[K:])\n",
        "num_ids": 63
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    # Remove 'r' and 'a' and 'n' from the string\n    test_str = test_str.strip('rn')\n    \n    # Remove the leading and trailing spaces and lower all characters\n    test_str = test_str.strip().lower()\n    \n    # Split the string into a list of words\n    word_list = test_str.split()\n    \n    # Create an empty list to store the strings with k length\n    new_word_list = []\n    \n    # Iterate through the list of words and filter out the words with k length\n    for word in word_list:\n        if len(word) == K:\n            new_word_list.append(word)\n    \n    # Reconstruct the string from the filtered list\n    return''.join(new_word_list)\n",
        "num_ids": 191
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K < 0 or len(test_str) < K:\n        return test_str\n    \n    word_list = test_str.split()\n    new_list = []\n    for word in word_list:\n        if len(word) == K:\n            continue\n        new_list.append(word)\n    \n    return \" \".join(new_list)\n",
        "num_ids": 90
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lst = test_str.split()\n    new_lst = []\n    for ele in lst:\n        if len(ele) == K:\n            continue\n        else:\n            new_lst.append(ele)\n    return''.join(new_lst)\n",
        "num_ids": 68
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    result = []\n    for word in test_str.split(' '):\n        if len(word) == K:\n            result.append(word)\n    return''.join(result)\n",
        "num_ids": 48
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while True:\n        start=text.find(pattern,index)\n        if start!=-1:\n            index=start+1\n            yield (start,start+len(pattern))\n        else:\n            break\n",
        "num_ids": 59
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text == None or pattern == None:\n        return None\n    text = str(text)\n    pattern = str(pattern)\n    if pattern in text:\n        return (text.index(pattern), text.index(pattern) + len(pattern))\n    return None\n",
        "num_ids": 65
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    start = 0\n    # r = re.compile('[a-z]')\n    # m = r.search(text)\n    # print(m)\n    # print(m.start())\n    # print(m.end())\n    # print(m.span())\n    # print(text)\n    while start < len(text):\n        m = re.search(pattern,text[start:])\n        if m:\n            print(m.start())\n            print(m.end())\n            print(m.span())\n            start = m.start() + start\n        else:\n            return None\n",
        "num_ids": 146
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.sub(pattern, lambda m:text[m.start():m.end()],text)\n",
        "num_ids": 27
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=[]\n    pos=[]\n    if text=='':\n        return None\n    if pattern=='':\n        return None\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)]==pattern:\n            occurance.append(i)\n    return occurance\n    \ndef exact_match(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=[]\n    pos=[]\n    if text=='':\n        return None\n    if pattern=='':\n        return None\n    if text==pattern:\n        return (0,[])\n    if len(text)<len(pattern):\n        return None\n    if text[0:len(pattern)]!=pattern:\n        return None\n    for i in range(len(text)):\n        if text[i:i+len(pattern)]==pattern:\n            occurance.append(i)\n            pos.append(i)\n    return (occurance,pos)\n    \ndef binary_search(array,value):\n    '''\n    A binary search algorithm is a search algorithm that operates on a sorted array. The algorithm repeatedly steps through the array, dividing the array into two parts: the lower part of the array and the upper part of the array. There is a half of the array that is lower than the value being searched and half of the array that is greater than the value being searched. The algorithm is repeated until the array is empty or a match is found.\n    '''\n    if len(array)<1:\n        return None\n    if len(array)==1:\n        return array[0]\n    if len(array)==2:\n        if value==array[0] or value==array[1]:\n            return value\n        return None\n    array.sort()\n    half=len(array)/2\n    if value>array[half]:\n        return binary_search(array[half:],value)\n    else:\n        return binary_search(array[:half],value)\n    \ndef factorial(n):\n    if n==0:\n        return 1\n    return n*factorial(n-1)\n",
        "num_ids": 155
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if(len(text)<len(pattern)):\n        return -1\n    else:\n        if(text.find(pattern)!=-1):\n            return text.index(pattern)\n        else:\n            return -1\n            \ndef count_substring(text,substring):\n    '''\n    Write a function to count the number of occurances of a substring in a string.\n    '''\n    count=0\n    start=0\n    while(start!=-1):\n        start=text.find(substring,start+1)\n        if(start!=-1):\n            count+=1\n            start+=1\n    return count\n        \ndef find_string(text,pattern):\n    '''\n    Write a function to find the first occurance of the pattern in the text. Return None if there is no match.\n    '''\n    start=0\n    while(start!=-1):\n        start=text.find(pattern,start+1)\n        if(start!=-1):\n            return start\n        else:\n            return -1\n",
        "num_ids": 52
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match=re.search(pattern,text)\n    if match:\n        print \"Pattern found at index:\",match.start()\n    else:\n        print \"Pattern not found in text\"\n",
        "num_ids": 47
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.search(pattern,text)\n    if result:\n        return result.span()\n    else:\n        return None\n",
        "num_ids": 34
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.findall(pattern,text)\n",
        "num_ids": 14
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    l,r=0,0\n    while l<len(text):\n        i=text.find(pattern,r)\n        if i==-1:\n            return None\n        l,r=i+1,i+1\n    return l-1\n",
        "num_ids": 63
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return None\n    else:\n        for i in range(0, len(nums), 2):\n            if i+1 < len(nums) and nums[i+1] % 2!= 0:\n                return False\n        return True\n",
        "num_ids": 87
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not nums[i]%2:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2 == 1 and (num-1) % 2 == 1:\n            return True\n        else:\n            return False\n",
        "num_ids": 41
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    output = True\n    for i in xrange(0, len(nums), 2):\n        if i == 0:\n            output = output and nums[i] % 2 == 1\n        else:\n            output = output and nums[i] % 2 == 1 and nums[i-1] % 2 == 1\n    return output\n",
        "num_ids": 81
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2:\n        if len(nums) == 1:\n            return True\n        else:\n            for i in range(1,len(nums),2):\n                if nums[i] % 2!= 1:\n                    return False\n            return True\n    else:\n        return True\ndef odd_position2(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2:\n        for i in range(0,len(nums),2):\n            if nums[i] % 2!= 1:\n                return False\n        return True\n    else:\n        return True\ndef odd_position3(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2:\n        return all(num % 2 for num in nums[1::2])\n    else:\n        return True\ndef odd_position4(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position5(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2 for num in nums[1::2])\ndef odd_position6(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position7(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position8(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position9(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position10(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position11(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2 for num in nums[1::2])\ndef odd_position12(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position13(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position14(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position15(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2 for num in nums[1::2])\ndef odd_position16(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position17(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2 for num in nums[1::2])\ndef odd_position18(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position19(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position20(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position21(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position22(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position23(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2 for num in nums[1::2])\ndef odd_position24(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position25(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position26(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position27(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\ndef odd_position28(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] ",
        "num_ids": 26
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        for i in range(1,len(nums),2):\n            if nums[i] % 2!= 0:\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i, j in enumerate(test_str):\n        if j in vowels and i < len(test_str)-1:\n            if test_str[i+1] in vowels:\n                count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    output_dict = {}\n    vowels = 'aeiou'\n    for char in test_str:\n        if char in vowels:\n            if char not in output_dict:\n                output_dict[char] = 1\n            else:\n                output_dict[char] += 1\n    return output_dict\n",
        "num_ids": 77
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ('a','e','i','o','u')\n    count = 0\n    for i in xrange(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(1, len(test_str)):\n        if test_str[i-1] in \"aeiouAEIOU\":\n            if test_str[i+1] in \"aeiouAEIOU\":\n                vowels = vowels + 1\n    return vowels\n",
        "num_ids": 80
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    char_count = {}\n    for char in test_str:\n        if char in vowels:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    return char_count\n",
        "num_ids": 76
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in ['a','e','i','o','u']:\n            if test_str[i+1] in ['a','e','i','o','u']:\n                vowel_count += 1\n    return vowel_count\n",
        "num_ids": 87
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in 'aeiou':\n            if test_str[i] == test_str[i + 1]:\n                vowel_count += 1\n    return vowel_count\n",
        "num_ids": 75
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    test_str = test_str.lower()\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i!= len(test_str)-1 and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in ['a', 'e', 'i', 'o', 'u'] and test_str[i+1] in ['a', 'e', 'i', 'o', 'u']):\n            count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    result = 0\n    for index in range(len(test_str)-1):\n        if test_str[index] in vowels and test_str[index+1] in vowels:\n            result += 1\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr:\n        if arr.count(i)==1:\n            s = s+i\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_items = []\n    for i in arr:\n        if i not in unique_items:\n            unique_items.append(i)\n    print(sum(unique_items))\n",
        "num_ids": 46
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            s += i\n    return s\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for item in arr:\n        sum += item\n    return sum\n    \ndef find_list_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for item in arr:\n        sum += item\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_arr = sum(arr)\n    return sum_arr\n",
        "num_ids": 18
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr[:i]:\n            sum += i\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = []\n    for num in arr:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return sum(unique_nums)\n",
        "num_ids": 49
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return sum(d.values())\n    \n",
        "num_ids": 51
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    output = sum(arr)\n    return output\n",
        "num_ids": 14
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1=sorted(list1)\n    out=[]\n    for k,g in groupby(list1):\n        out+=[list(g)]\n    return out\ndef find_consecutive_duplicates(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n    return maxi\ndef find_consecutive_duplicates_r(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n    return maxi\ndef find_consecutive_duplicates_adv(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n    return maxi\ndef find_consecutive_duplicates_adv_r(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n    return maxi\ndef find_consecutive_duplicates_adv_r_1(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n            list1[i]=[]\n    return maxi\ndef find_consecutive_duplicates_adv_r_2(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n            list1[i]=[]\n    return maxi\ndef find_consecutive_duplicates_adv_r_3(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n            list1[i]=[]\n    return maxi\ndef find_consecutive_duplicates_adv_r_4(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n            list1[i]=[]\n    return maxi\ndef find_consecutive_duplicates_adv_r_5(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n            list1[i]=[]\n    return maxi\ndef find_consecutive_duplicates_adv_r_6(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n            list1[i]=[]\n    return maxi\ndef find_consecutive_duplicates_adv_r_7(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n            list1[i]=[]\n    return maxi\ndef find_consecutive_duplicates_adv_r_8(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range(len(list1)):\n        if len(list1[i])>maxi:\n            maxi=len(list1[i])\n        elif len(list1[i])==maxi and list1[i][0] not in list1[i-1]:\n            list1[i-1].append(list1[i][0])\n            list1[i]=[]\n    return maxi\ndef find_consecutive_duplicates_adv_r_9(list1):\n    '''\n    Write a function to find the longest consecutive duplicates in a list\n    '''\n    list1=pack_consecutive_duplicates(list1)\n    maxi=0\n    for i in range",
        "num_ids": 31
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1)==1:\n        return list1\n    new_list=[]\n    i=0\n    while i < len(list1)-1:\n        new_list.append(list1[i])\n        new_list.append(list1[i+1])\n        i+=2\n    if i==len(list1)-1:\n        new_list.append(list1[i])\n    return new_list\n",
        "num_ids": 106
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #list1 = [1,2,3,4,4,4,5,6,6,7,8,8]\n    l1 = []\n    for k,g in groupby(list1):\n        l1.append(list(g))\n    print l1\n",
        "num_ids": 68
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # list1 = [1,1,2,3,3,4,5,5,5,5]\n    list1 = [1,2,3,4,5,6,7,8,9,10,11,12]\n    \n    # def get_intervals(list1):\n    #     groups = groupby(enumerate(list1), lambda x: x[1] - x[0])\n    #     for k, g in groups:\n    #         print(k, list(map(itemgetter(1), g)))\n    #         # print(k)\n    #         print(list(g))\n",
        "num_ids": 151
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    for k, g in groupby(list1):\n        output.append(list(g))\n    return output\n",
        "num_ids": 34
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [(k,len(list(g))) for k,g in groupby(list1)]\n    r = []\n    i = 0\n    while i<len(groups):\n        l = groups[i]\n        j = i\n        while j<len(groups)-1 and groups[j+1][0]==l[0]:\n            j += 1\n            l = (l[0],l[1] + groups[j][1])\n        if l[1] > 1:\n            r.append((l[0],l[1]))\n        i = j + 1\n    return r\n",
        "num_ids": 143
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k,g in groupby(list1):\n        result.append([list(g)])\n    return result\n    ",
        "num_ids": 36
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(enumerate(list1), lambda (i, x): i - x):\n        l1 = map(itemgetter(1), g)\n        l1 = [x for x in l1 if x!= None]\n        if len(l1) > 1:\n            yield l1\n",
        "num_ids": 79
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for k, g in groupby(list1):\n        list2.append(list(g))\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group by consecutive\n    # zip the result\n    # groupby the result\n    for key, group in groupby(list1):\n        res = zip(*[iter(group)]*2)\n        print(res)\n",
        "num_ids": 54
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # E.g. if list1 is [[1,2,3],[1,2,3],[1,2,3]]\n    # return: {(1,2,3):2}\n    if not list1:\n        return None\n    counter = {}\n    for item in list1:\n        new_tuple = tuple(item)\n        if new_tuple in counter:\n            counter[new_tuple] += 1\n        else:\n            counter[new_tuple] = 1\n    return counter\n",
        "num_ids": 122
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    sublist = []\n    for l in list1:\n        if type(l) == list:\n            sublist.append(tuple(l))\n    for i in sublist:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n",
        "num_ids": 88
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for x in list1:\n        if tuple(x) in d:\n            d[tuple(x)] += 1\n        else:\n            d[tuple(x)] = 1\n    return d\n",
        "num_ids": 55
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) in dict:\n            dict[tuple(list1[i])] += 1\n        else:\n            dict[tuple(list1[i])] = 1\n    return dict\n",
        "num_ids": 71
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in list1:\n        dict[tuple(i)] = list1.count(i)\n    return dict\n",
        "num_ids": 36
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    res = {}\n    for item in list1:\n        if item not in res.keys():\n            res[item] = [item]\n        else:\n            res[item].append(item)\n    return res\n",
        "num_ids": 53
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for i in range(0, len(list1)):\n        list2 = list1[i]\n        if tuple(list2) in dictionary:\n            dictionary[tuple(list2)] += 1\n        else:\n            dictionary[tuple(list2)] = 1\n    return dictionary\n",
        "num_ids": 78
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for l in list1:\n        t = tuple(l)\n        if t in dictionary:\n            dictionary[t] += 1\n        else:\n            dictionary[t] = 1\n    return dictionary\n",
        "num_ids": 57
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) in d:\n            d[tuple(list1[i])] += 1\n        else:\n            d[tuple(list1[i])] = 1\n    return d\n",
        "num_ids": 71
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in list1:\n        if type(i) == list:\n            dict1[tuple(i)] = list1.count(i)\n    return dict1\n",
        "num_ids": 49
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in test_list:\n        for j in test_list:\n            if i[0] + j[0] == i[1] + j[1]:\n                if i[0] == j[0]:\n                    tup = (i[0], i[1], j[1])\n                else:\n                    tup = (i[0], j[0], j[1])\n                if tup not in final_list:\n                    final_list.append(tup)\n    return final_list\n",
        "num_ids": 129
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(1,len(test_list)+1):\n        for combination in combinations(test_list, i):\n            comb.append(sum(combination))\n    print(comb)\n",
        "num_ids": 54
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combs = []\n    # print all_combs\n    for l in range(1,len(test_list)):\n        combs_of_sum = list(combinations(test_list,l))\n        # print combs_of_sum\n        for comb in combs_of_sum:\n            all_combs.append(comb)\n    # print all_combs\n    return all_combs\n",
        "num_ids": 102
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in test_list:\n        temp = []\n        for j in test_list:\n            if i[0] + j[0] == i[1]:\n                temp.append(i[0]+j[0])\n        result.append(temp)\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the given tuple list to get unique value for each tuple\n    sorted_list = sorted(test_list, key = lambda x: (x[0],x[1]))\n    # get the unique value for each tuple\n    list_values = []\n    for i in range(len(sorted_list)):\n        if sorted_list[i] not in list_values:\n            list_values.append(sorted_list[i])\n    combinations_list = []\n    for i in range(len(list_values)):\n        # add the combinations in list_values\n        for j in range(i,len(list_values)):\n            combinations_list.append(list_values[i]+list_values[j])\n    return combinations_list\n",
        "num_ids": 182
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    sum_of_tuple = sum(test_list)\n    if sum_of_tuple % 2!= 0:\n        return result\n    n = len(test_list)\n    temp = list(combinations(test_list, n/2))\n    for tup in temp:\n        if sum(tup) == sum_of_tuple/2:\n            result.append(tup)\n    return result\n",
        "num_ids": 107
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for x in range(len(test_list)):\n        for i in combinations(test_list,x):\n            print i\n",
        "num_ids": 33
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            res.append((test_list[i],test_list[j]))\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #first find the size of tuple list\n    size = len(test_list)\n    #get list of all possible sums\n    sums = []\n    for i in range(1,size):\n        sums += list(combinations(test_list,i))\n    #now we have list of tuples of sums\n    sums = [sum(x) for x in sums]\n    sums.sort()\n    return sums\n",
        "num_ids": 102
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list, i):\n            print(j)\n            \n",
        "num_ids": 39
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            count += 1\n    return count % 2 == 0\ndef count_digits(n) : \n    '''\n    Write a python function to count the number of digits in an integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    return len(str(n))\ndef sum_digits(n) : \n    '''\n    Write a python function to sum all the digits of a positive integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    return sum([int(x) for x in str(n)])\ndef product_digits(n) : \n    '''\n    Write a python function to compute the product of all the digits of a positive integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return math.prod([int(x) for x in str(n)])\ndef find_gcd(a,b) : \n    '''\n    Write a python function to find the greatest common divisor of two positive integers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if a > b : \n        return find_gcd(a-b,b)\n    elif a == 0 : \n        return b\n    else : \n        return find_gcd(b,a)\ndef find_lcm(a,b) : \n    '''\n    Write a python function to find the least common multiple of two positive integers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if a > b : \n        return a*b/find_gcd(a,b)\n    elif a == 0 : \n        return b\n    else : \n        return a*b/find_gcd(a,b)\ndef find_power(a,b) : \n    '''\n    Write a python function to find a**b. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    return pow(a,b)\ndef square_numbers(n) : \n    '''\n    Write a python function to square all the numbers from 0 to n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    return [x*x for x in range(n+1)]\ndef fibonacci(n) : \n    '''\n    Write a python function to compute the n-th Fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    a,b = 0,1\n    for i in range(n) : \n        a,b = b,a+b\n    return a\ndef factorial(n) : \n    '''\n    Write a python function to compute the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n == 0 or n == 1 : \n        return 1\n    else : \n        return n * factorial(n-1)\ndef reverse(n) : \n    '''\n    Write a python function to reverse a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    return int(str(n)[::-1])\ndef power_series(n,a) : \n    '''\n    Write a python function to compute the n-th value in a power series. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    return a * (n ** (n-1))\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether a number is a palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    return str(n) == str(n)[::-1]\ndef is_superprime(n) : \n    '''\n    Write a python function to check whether a number is superprime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 : \n        return True\n    elif n < 2 or n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0 or n % 13 == 0 : \n        return False\n    for i in range(7,n-1,2) : \n        if n % i == 0 : \n            return False\n    return True\ndef is_square(n) : \n    '''\n    Write a python function to check whether a number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    if n == 1 or n == 2 : \n        return True\n    else : \n        if n % 2 == 0 : \n            return is_square(n/2)\n        else : \n            return False\ndef is_rightangled(a,b,c) : \n    '''\n    Write a python function to check whether a triangle is right angled. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    return ((b**2+c**2) == a**2) and (a>=b+c)\ndef is_pentagonal(n) : \n    '''\n    Write a python function to check whether a number is a pentagonal number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-41.php\n    '''\n    return ((n*(3*n-1))/2) == int(str(n*(3*n-1))[:1:-1])\ndef is_hexagonal(n) : \n    '''\n    Write a python function to check whether a number is a hexagonal number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-42.php\n    '''\n    return ((n*(2*n-1))/2) == int(str(n*(2*n-1))[:1:-1])\ndef is_heptagonal(n) : \n    '''\n    Write a python function to check whether a number is a heptagonal number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-43.php\n    '''\n    return ((n*(5*n-3))/2) == int(str(n*(5*n-3))[:1:-1])\ndef is_octagonal(n) : \n    '''\n    Write a python function to check whether a number is a octagonal number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-44.php\n    '''\n    return ((n*(3*n-2))/2) == int(str(n*(3*n-2))[:1:-1])\ndef is_neptagonal(n) : \n    '''\n    Write a python function to check whether a number is a neptagonal number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-4",
        "num_ids": 47
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    divisors = divisors + [1]\n    for i in range(2,n):\n        if n%i == 0 :\n            divisors = divisors + [i]\n    return len(divisors)\n    \n    \ndef print_prime_factors(num):\n    \"\"\"\n    Print the number of prime factors of num.\n    \"\"\"\n    print(\"%d has %d prime factors\" % (num, count_divisors(num)))\n    \n",
        "num_ids": 122
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            if n / i == i :\n                count += 1\n            else :\n                count += 2\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for x in range(1,n) :\n        if n%x == 0 :\n            divisors = divisors + 1\n    return divisors%2 == 0\n",
        "num_ids": 51
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    return divisors\n    \ndef factorial_iter(n) : \n    '''\n    Write a python function to calculate factorial using iterative approach. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    factorial = 1\n    for i in range(1, n + 1) :\n        factorial = factorial * i\n    return factorial\n",
        "num_ids": 36
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n<0 :\n        return 0\n    count = 1\n    i = 2\n    while i <= math.sqrt(n):\n        if n%i == 0 :\n            count += 2\n        i += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n==1) : \n        return 1\n    divisors = 1\n    for i in range(2,n) : \n        if (n % i == 0) : \n            divisors += 1\n    return divisors\ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check whether the number is a perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if (n==1) : \n        return True\n    i = 1\n    while (i * i < n) : \n        i += 1\n    if (i * i == n) : \n        return True\n    return False\ndef isPermutation(s1, s2) : \n    '''\n    Write a python function to check whether the string is a permutation of each other or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if (len(s1)!= len(s2)) : \n        return False\n    if (sorted(s1) == sorted(s2)) : \n        return True\n    return False\ndef triangle(n) : \n    '''\n    Write a python function to check whether the given number is an integer or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return True\n    for i in range(2,n) : \n        if (n % i == 0) : \n            return False\n    return True\ndef is_power_of_two(n) : \n    '''\n    Write a python function to check whether the given number is a power of two or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if (n == 1) : \n        return True\n    if (n==0) : \n        return False\n    while n % 2 == 0 : \n        n = n / 2\n    if (n == 1) : \n        return True\n    return False\ndef get_triangular_number(n) : \n    '''\n    Write a python function to check whether the given number is a triangular number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    n = int(math.sqrt(2 * n + 0.25))\n    return (n * (n + 1)) / 2\ndef isPrime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    for i in range(3,int(math.sqrt(n)) + 1, 2) : \n        if (n % i == 0) : \n            return False\n    return True\ndef get_perfect_squares(n) : \n    '''\n    Write a python function to check whether the given number is a perfect square number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    a = int(math.sqrt(n))\n    if (n == a ** 2) : \n        return True\n    return False\ndef is_perfect_square_int(n) : \n    '''\n    Write a python function to check whether the given number is a perfect square number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    a = int(math.sqrt(n))\n    if (n == a ** 2) : \n        return True\n    return False\ndef is_perfect_square_long(n) : \n    '''\n    Write a python function to check whether the given number is a perfect square number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    a = int(math.sqrt(n))\n    if (n == a ** 2) : \n        return True\n    return False\ndef is_perfect_square_fast(n) : \n    '''\n    Write a python function to check whether the given number is a perfect square number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    a = int(math.sqrt(n))\n    if (n == a ** 2) : \n        return True\n    return False\ndef is_perfect_square_double(n) : \n    '''\n    Write a python function to check whether the given number is a perfect square number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    a = int(math.sqrt(n))\n    if (n == a ** 2) : \n        return True\n    b = a + 1\n    while (b * b <= n) : \n        if (b * b == n) : \n            return True\n        b += 1\n    return False\ndef get_perfect_squares_list(n) : \n    '''\n    Write a python function to check whether the given number is a perfect square number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return [1]\n    if (n % 2 == 0) : \n        return []\n    a = int(math.sqrt(n))\n    if (n == a ** 2) : \n        return [n]\n    b = a + 1\n    squares = [n]\n    while (b * b <= n) : \n        if (b * b == n) : \n            squares.append(b * b)\n        b += 1\n    return squares\ndef get_perfect_squares_iter(n) : \n    '''\n    Write a python function to check whether the given number is a perfect square number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if (n < 1) : \n        return False\n    if (n == 1) : \n        return [1]\n    if (n % 2 == 0) : \n        return []\n    a = int(math.sqrt(n))\n    if (n == a ** 2) : \n        return [n]\n    ",
        "num_ids": 80
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor = 1\n    count = 0\n    while divisor <= math.sqrt(n) :\n        if n % divisor == 0 :\n            count = count + 1\n        divisor = divisor + 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0 : \n        n = n*(-1) \n    count = 0 \n    i = 1 \n    while i < n : \n        if n % i == 0 : \n            count = count + 1 \n        i = i + 1 \n    if count % 2 == 0 : \n        print \"Divisors of\", n, \"are even\" \n    else : \n        print \"Divisors of\", n, \"are odd\" \ndef find_factors(n) : \n    '''\n    Write a python function to find the factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    i = 1 \n    while i < n : \n        if n % i == 0 : \n            print i \n        i = i + 1 \ndef prime_number(n) : \n    '''\n    Write a python function to check whether a given number is a prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n < 0 : \n        n = n*(-1) \n    if n == 1 : \n        print \"0 and 1 are neither prime nor composite\" \n        return \n    i = 2 \n    while i < n : \n        if n % i == 0 : \n            print \"Number\", n, \"is not a prime number\" \n            return \n        i = i + 1 \n    print \"Number\", n, \"is a prime number\" \ndef calculate_area_of_a_circle(r) : \n    '''\n    Write a python function to calculate the area of a circle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    area = 3.14 * (r**2) \n    print \"The area of the circle with radius\", r, \"is\", area \ndef calculate_area_of_a_rectangle(l,b) : \n    '''\n    Write a python function to calculate the area of a rectangle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    area = l * b \n    print \"The area of the rectangle is\", area \ndef calculate_area_of_a_triangle(b,h) : \n    '''\n    Write a python function to calculate the area of a triangle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    area = b * h / 2 \n    print \"The area of the triangle is\", area \ndef calculate_area_of_a_trapezium(b1,b2,h) : \n    '''\n    Write a python function to calculate the area of a trapezium. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    area = ((b1 + b2) * h) / 2 \n    print \"The area of the trapezium is\", area \ndef calculate_area_of_a_quadrilateral(a,b,c,d) : \n    '''\n    Write a python function to calculate the area of a quadrilateral. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    area = (a+b+c+d) / 2 \n    print \"The area of the quadrilateral is\", area \ndef calculate_area_of_a_parallelogram(a,b) : \n    '''\n    Write a python function to calculate the area of a parallelogram. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    area = a * b \n    print \"The area of the parallelogram is\", area \ndef calculate_area_of_a_rhombus(a,b) : \n    '''\n    Write a python function to calculate the area of a rhombus. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    area = a * b / 2 \n    print \"The area of the rhombus is\", area \ndef calculate_area_of_a_square(a) : \n    '''\n    Write a python function to calculate the area of a square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    area = a * a \n    print \"The area of the square is\", area \ndef calculate_area_of_a_parallelogram_with_one_edge_equal_to_a_point_radius(a,b,c) : \n    '''\n    Write a python function to calculate the area of a square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    area = a * b \n    print \"The area of the square is\", area \ndef calculate_area_of_a_circle_with_three_points(x1,y1,x2,y2,x3,y3) : \n    '''\n    Write a python function to calculate the area of a circle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    area = math.pi * math.pow((math.pow((x1-x2),2) + math.pow((y1-y2),2)),0.5)\n    print \"The area of the circle is\", area \ndef calculate_area_of_a_circle_with_a_point_as_the_center(x,y,r) : \n    '''\n    Write a python function to calculate the area of a circle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    area = math.pi * math.pow((r*r),0.5)\n    print \"The area of the circle is\", area \ndef calculate_area_of_a_square_with_a_point_as_the_center(x,y,a) : \n    '''\n    Write a python function to calculate the area of a square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    area = a * a \n    print \"The area of the square is\", area \ndef calculate_area_of_a_square_with_three_points(x1,y1,x2,y2,x3,y3) : \n    '''\n    Write a python function to calculate the area of a square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    area = math.pow((math.pow((x1-x2),2) + math.pow((y1-y2),2)),0.5)\n    print \"The area of the square is\", area \ndef calculate_area_of_a_square_with_a_point_as_the_center(x,y,a) : \n    '''\n    Write a python function to calculate the area of a square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    area = math.pow((a*a),0.5)\n    print \"The area of the square is\", area \ndef calculate_area_of_a_rectangle_with_three_points(x1,y1,x2,y2,x3,y3) : \n    '''\n    Write a python function to calculate the area of a square. https://ww",
        "num_ids": 18
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    i = 2\n    while i <= n :\n        if n % i == 0 :\n            divisors += 1\n        i += 1\n    return divisors\ndef count_divisors_recursive(n, divisors) :\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 :\n        return divisors\n    else :\n        if n % 2 == 0 :\n            divisors += 1\n        divisors += count_divisors_recursive(n - 1, divisors)\n        return divisors\n",
        "num_ids": 64
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # time - O(n)\n    # space - O(1)\n",
        "num_ids": 20
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    res = sum(arr[0::2])\n    for i in range(1, len(arr)):\n        if i % 2:\n            res += sum(arr[i::2])\n        else:\n            res -= sum(arr[i::2])\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # base case\n    if len(arr) <= 1:\n        return 0\n    if len(arr) % 2!= 0:\n        return sum(arr)\n    \n    # recursion\n    return odd_length_sum(arr[1:]) + odd_length_sum(arr[:-1]) + sum(arr[::2])\n",
        "num_ids": 82
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_len = len(arr)\n    if arr_len == 0:\n        return 0\n    elif arr_len == 1:\n        return arr[0]\n    odd_sum = 0\n    for i in xrange(0,arr_len-1,2):\n        odd_sum += sum(arr[i:i+2])\n    return odd_sum\n",
        "num_ids": 89
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)<1:\n        return\n    if len(arr)==1:\n        return arr[0]\n",
        "num_ids": 32
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        start = i\n        end = i+1\n        if (end < len(arr)):\n            while end < len(arr):\n                total_sum += sum(arr[start:end])\n                start += 1\n                end += 1\n    return total_sum\n",
        "num_ids": 83
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)-i):\n            if len(arr[j:i+j+1])%2 == 1:\n                total += sum(arr[j:i+j+1])\n    return total\n",
        "num_ids": 72
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + odd_length_sum(arr[1:])\n",
        "num_ids": 48
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # function to find the sum of all odd length subarrays\n    def find_sum(arr, len):\n        result = 0\n        for i in range(len):\n            for j in range(i, len, 2):\n                result += sum(arr[i:j+1])\n        return result\n",
        "num_ids": 75
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h, s, v = colorsys.rgb_to_hsv(r/255.0, g/255.0, b/255.0)\n    return h, s, v\n",
        "num_ids": 47
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = r / 255\n    G = g / 255\n    B = b / 255\n    mx = max(R, G, B)\n    mn = min(R, G, B)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == R:\n        h = (60 * ((G - B) / df) + 360) % 360\n    elif mx == G:\n        h = (60 * ((B - R) / df) + 120) % 360\n    elif mx == B:\n        h = (60 * ((R - G) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n",
        "num_ids": 196
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    Cmax = max(r, g, b)\n    Cmin = min(r, g, b)\n    delta = Cmax - Cmin\n",
        "num_ids": 62
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # calculating the v value of color\n    v = max(r,g,b)\n    # checking for v value\n    if v == 0:\n        # return hue value\n        return 0\n",
        "num_ids": 47
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if diff == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * (((g - b) / diff) % 6)\n    elif cmax == g:\n        h = 60 * (((b - r) / diff) + 2)\n    elif cmax == b:\n        h = 60 * (((r - g) / diff) + 4)\n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff / cmax) * 100\n    v = cmax * 100\n    return h, s, v\n",
        "num_ids": 202
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r > g and r > b:\n        maximum = r\n    elif g > r and g > b:\n        maximum = g\n    else:\n        maximum = b\n    minimum = min(r, g, b)\n    difference = maximum - minimum\n    v = maximum\n",
        "num_ids": 69
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    high = max(r, g, b)\n    low = min(r, g, b)\n    diff = high - low\n    if high == low:\n        h = 0\n    elif high == r:\n        h = (g - b) / diff\n    elif high == g:\n        h = 2 + (b - r) / diff\n    else:\n        h = 4 + (r - g) / diff\n    if high == 0:\n        s = 0\n    else:\n        s = diff / high\n    v = high\n    return h, s, v\n",
        "num_ids": 162
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_color = np.asarray([r,g,b], dtype = np.float)\n    hsv_color = np.zeros_like(rgb_color)\n    hsv_color[:,0] = rgb_color[:,0]/255.0\n    hsv_color[:,1] = rgb_color[:,1]/255.0\n    hsv_color[:,2] = rgb_color[:,2]/255.0\n",
        "num_ids": 112
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 221
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_mul = 1\n    odd_mul = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_mul *= i\n        else:\n            odd_mul *= i\n",
        "num_ids": 57
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #odd_product = 1\n    #even_product = 1\n",
        "num_ids": 18
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n",
        "num_ids": 45
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product = product * i\n    return product\n",
        "num_ids": 35
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Edge case: empty list\n    if len(list1) == 0:\n        return 0\n    # Initialize list of products\n    list2 = []\n    # Loop through the list and add to the product\n    for item in list1:\n        if item % 2 == 0:\n            list2.append(item * 2)\n        else:\n            list2.append(item * 3)\n    return list2\n",
        "num_ids": 99
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even = even * i\n        else:\n            odd = odd * i\n    return (even, odd)\n",
        "num_ids": 55
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for number in list1:\n        if number % 2 == 0:\n            even_product = even_product * number\n        else:\n            odd_product = odd_product * number\n    return even_product, odd_product\n",
        "num_ids": 69
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n",
        "num_ids": 16
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for ele in list1:\n        if ele % 2 == 0:\n            even_product *= ele\n        else:\n            odd_product *= ele\n    print even_product, odd_product\n",
        "num_ids": 63
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # your code goes here\n    list1 = [1,2,3,4,5,6,7,8]\n    a = 1\n    b = 1\n    for i in range(0,len(list1)):\n        if i%2 == 0:\n            a*=list1[i]\n        else:\n            b*=list1[i]\n    return a*b\n",
        "num_ids": 95
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(n) for n in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Test_str = \"('', '', '', '')\"\n    # return (0, 0, 0, 0)\n    return tuple(int(x) for x in test_str.lstrip('(').rstrip(')').strip(',').split(', '))\n",
        "num_ids": 66
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    return tuple(map(int, re.findall(r'\\d+', test_str)))\n",
        "num_ids": 30
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str[1:-1].split(','))\n",
        "num_ids": 26
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(' '))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for s in str_list:\n        int_list.append(int(s))\n    return tuple(int_list)\n",
        "num_ids": 53
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_list = []\n    for i in test_str:\n        if i == ',':\n            continue\n        else:\n            temp_list.append(i)\n    res = ''.join(temp_list)\n    return tuple(int(i) for i in res)\n",
        "num_ids": 69
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    output = []\n    for i in test_str:\n        if i.isdigit():\n            output.append(int(i))\n        else:\n            pass\n    return tuple(output)\n",
        "num_ids": 49
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    i = 0\n    for x in test_str:\n        i = i * 256 + ord(x)\n    return i\n",
        "num_ids": 32
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple([int(x) for x in test_str[1:-1].split(',')])\n    except ValueError:\n        return None\n    except:\n        return None\n    \ndef tuple_int_str(test_tuple):\n    '''\n    Write a function to convert integer tuple to string tuple.\n    '''\n    try:\n        return str(test_tuple).replace(' ', '').replace('(', '').replace(')', '')\n    except ValueError:\n        return None\n    except:\n        return None\n",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    k = bisect.bisect(a, x)\n    if k!= n and a[k] == x:\n        return k\n    else:\n        return k+1\n",
        "num_ids": 53
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    start, end = 0, len(a)-1\n    while start < end:\n        mid = (start+end)/2\n        if x == a[mid]:\n            return mid\n        if x > a[mid]:\n            start = mid+1\n        else:\n            end = mid-1\n    return start\n",
        "num_ids": 76
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0 or a[-1]<x:\n        return len(a)\n    elif a[0]>x:\n        return 0\n    else:\n        # Binary search\n        left = 0\n        right = len(a)\n        while right-left>1:\n            middle = (right+left)//2\n            if a[middle]<x:\n                left = middle\n            else:\n                right = middle\n        return right\n",
        "num_ids": 112
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    raise ValueError\n",
        "num_ids": 45
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    a.append(x)\n    for i in range(n, len(a)):\n        if a[i] < a[i - 1]:\n            a[i] = a[i - 1]\n        else:\n            break\n    return a\n",
        "num_ids": 70
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if a[index-1] <= x < a[index]:\n        return index\n    elif a[index] < x:\n        return index+1\n    elif a[index] == x:\n        return index\n    else:\n        return -1\n",
        "num_ids": 79
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    if pos == len(a):\n        return pos\n    if a[pos] > x:\n        return pos\n    return pos+1\n",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos if pos<len(a) and a[pos]!=x else -1\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos if pos<len(a) and a[pos]!=x else -1\n",
        "num_ids": 40
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    loc = bisect.bisect_right(a, x)\n    return loc\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'a(.)b{3}', text)\n",
        "num_ids": 21
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m = re.search(r'a{3}b', text)\n    if m:\n        print m.group()\n",
        "num_ids": 32
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'a(.)b{3}', text)\n    return match\n",
        "num_ids": 26
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_three = re.match('a.{3}b',text)\n    return match_three\n",
        "num_ids": 27
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'^a\\w{3}b$', text)\n",
        "num_ids": 23
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    pattern = r'a(.*)b{3}'\n    result = re.match(pattern, text)\n    return result.group(1)\n",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*a.*b.*b.*b.*')\n    if pattern.match(text):\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    print re.findall(r'ab+', text)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything.\n    '''\n    print re.findall(r'ab+', text)\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the second 'b' should\n    only be matched when the first character is an 'a'.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first 'b' should\n    only be matched when the second character is a 'b'.\n    '''\n    print re.findall(r'ab+', text)\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same, and the second and third characters should\n    also not be the same.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same, and the second and third characters should\n    also not be the same. But the 'b's should be optional.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same, and the second and third characters should\n    also not be the same. But the 'b's should be optional. So the 'b' in the second\n    position should be considered optional.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    and then an 'b' followed by anything. However, this time, the first and second\n    characters should not be the same. But the 'b's should be optional. So the 'b'\n    in the second position should be considered optional. And make sure to\n    consider the case where they are missing both.\n    '''\n    print re.findall(r'(?:ab)+', text)\n    \ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed b",
        "num_ids": 18
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(\"a\", \"AB\", text)\n    text = re.sub(\"a\", \"AB\", text)\n    return text\n",
        "num_ids": 36
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_three_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_three_or_more_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_three_comma_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_three_comma_or_more_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_any_digit(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_digit_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_digit_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_digit_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_or_more_digit(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_digit_or_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_comma_or_more_digit(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_comma_or_more_digit_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_comma_or_more_digit_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_digit_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_digit_comma_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_anything_but_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_anything_but_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_anything_but_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_anything_but_comma_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_anything_but_comma_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_anything_but_comma_comma_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_anything_but_comma_comma_comma_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_anything_but_comma_comma_comma_comma_comma_comma(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'ab{",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    new_list.append(test_str)\n    new_list += test_list\n    return tuple(new_list)\n",
        "num_ids": 39
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # print(test_list, test_str)\n    new_tuple = tuple(test_str)\n    # print(new_tuple)\n    return new_tuple\n",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + test_str)\n    print('tuple',new_tuple)\n    return new_tuple\n",
        "num_ids": 38
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError('1st argument must be a list')\n    if not isinstance(test_str, str):\n        raise TypeError('2nd argument must be a string')\n    new_tup = tuple(test_list + [test_str])\n    return new_tup\n",
        "num_ids": 81
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str)\n    for i in test_list:\n        new_tuple = new_tuple + (i,)\n    return new_tuple\n    \n",
        "num_ids": 48
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in xrange(0, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([num%2==0 for num in nums])\n",
        "num_ids": 18
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return True\n    if len(nums) == 1:\n        return True if nums[0] % 2 == 0 else False\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in xrange(0, len(nums), 2):\n        if not nums[i]%2:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0,len(nums),2):\n        if(nums[i]%2==0):\n            count = count + 1\n    if(count==len(nums)/2):\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2 == 0 for i in nums)\n",
        "num_ids": 18
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2==0 for i in nums)\n",
        "num_ids": 18
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 1:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(item) for item in test_tup)\n    else:\n        return test_tup\n",
        "num_ids": 46
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([i for i in test_tup if not isinstance(i, tuple)])\n",
        "num_ids": 25
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([item for item in test_tup if item not in ('(', ')' )])\n",
        "num_ids": 26
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            temp.append(i)\n    return tuple(temp)\n",
        "num_ids": 43
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while(True):\n        # test_tup = test_tup[0]\n        if(isinstance(test_tup, tuple)):\n            remove_nested(test_tup[0])\n            test_tup = test_tup[1]\n        else:\n            return test_tup\n",
        "num_ids": 77
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            tup = tuple(remove_nested(tup))\n        test_list.append(tup)\n    return tuple(test_list)\n",
        "num_ids": 66
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for item in test_tup if not isinstance(item, tuple))\n",
        "num_ids": 24
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([x for x in test_tup if x!= test_tup])\n",
        "num_ids": 24
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (remove_nested(x) if isinstance(x, tuple) else x for x in test_tup)\n",
        "num_ids": 31
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(i) for i in test_tup)\n    return test_tup\n",
        "num_ids": 42
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    while input_list:\n        counter += 1\n        input_list = input_list[0]\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    else:\n        return 1 + count_list(input_list[1:])\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i = 0\n    while i < len(input_list):\n        if type(input_list[i]) == list:\n            print input_list[i]\n            i += 1\n        else:\n            i += 1\n",
        "num_ids": 55
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    n = input_list[0]\n    if n == 0:\n        return 0\n    else:\n        return 1 + count_list(input_list[1:])\n",
        "num_ids": 43
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    length = len(input_list)\n    if length == 1:\n        return 1\n    else:\n        return length + count_list(input_list[1:])\n    ",
        "num_ids": 44
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return reduce(lambda x,y:x+y, map(lambda x:1 if type(x)==list else 0,input_list))\n",
        "num_ids": 36
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list==[]:\n        return 0\n    return 1 + count_list(input_list[1:])\n",
        "num_ids": 31
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list) \n",
        "num_ids": 12
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if arr[0] > x:\n        return 0\n    mid = int(len(arr)/2)\n    if arr[mid] > x:\n        return last(arr[:mid],x)\n    else:\n        return last(arr[mid:],x) + mid\n",
        "num_ids": 83
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    p = n - 1\n    while p >= 0 and arr[p] > x:\n        p -= 1\n    return p + 1\n",
        "num_ids": 42
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n    return None\n",
        "num_ids": 37
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # your code goes here\n    if x<arr[0] or x>arr[-1]:\n        return -1\n    l=0\n    r=len(arr)-1\n    while l<=r:\n        m=(l+r)//2\n        if arr[m]<x:\n            l=m+1\n        elif arr[m]>x:\n            r=m-1\n        else:\n            if m==0 or arr[m-1]!=x:\n                return m\n            else:\n                r=m-1\n    return -1\n",
        "num_ids": 139
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x in arr:\n        if arr.index(x)==len(arr)-1:\n            return arr.index(x)\n        for i in range(len(arr)-1,0,-1):\n            if arr[i]>x and arr[i-1]<=x:\n                return i-1\n    return -1\n",
        "num_ids": 82
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while(low <= high):\n        mid = low + (high - low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 86
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    try:\n        return arr.index(x)\n    except:\n        return -1\n",
        "num_ids": 24
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        mid = len(arr)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1:\n                return mid\n            else:\n                if arr[mid+1] == x:\n                    return mid+1\n                else:\n                    return mid\n        elif arr[mid] < x:\n            return last(arr[mid+1:],x)\n        else:\n            return last(arr[:mid],x)\n",
        "num_ids": 127
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr = arr\n    arr.sort()\n    i = len(arr)-1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i = i-1\n    return -1\n",
        "num_ids": 55
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 43
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=a)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=b)').findall(text)\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=b)').findall(text)\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=b)').findall(text)\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=b)').findall(text)\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=b)').findall(text)\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=b)').findall(text)\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=b)').findall(text)\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=b)(.*?)(?=b)').findall(text)\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=b)').findall(text)\n    \ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    return re.compile(r'(?<=a)(.*?)(?=a)').findall(text)\n    \ndef text_startb_endb(text):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #text = text.replace(\" \",\"\")\n    #text = text.lower()\n    match = re.search(r'^[a-z].*b$', text)\n    return bool(match)\n",
        "num_ids": 52
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\w+b')\n    matches = pattern.findall(text)\n    return matches\n",
        "num_ids": 35
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    return result\ndef text_starta_endb_1(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    return result\ndef text_starta_endb_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    return result\ndef text_starta_endb_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    return result\ndef text_starta_endb_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    return result\ndef text_starta_endb_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    return result\ndef text_starta_endb_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    return result\ndef text_starta_endb_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_18(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_19(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_20(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_21(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_22(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_23(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_24(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_25(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_26(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\ndef text_starta_endb_27(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r",
        "num_ids": 6
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    pattern.match(text)\ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab\\Z')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab$')\n    pattern.match(text)\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a",
        "num_ids": 13
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'\\ba+b')\n",
        "num_ids": 17
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.sub(r'[^a-z]','',text)\n    start = re.search(r'a[a-z]*b',text)\n    if start:\n        return start.start()\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k,v in dict.items():\n        total += v\n    return total\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not dict:\n        return 0\n    else:\n        return sum(dict.values())\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Python 3.5\n    # return sum(dict.values())\n",
        "num_ids": 19
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n    \ndef return_sum(dict):\n    '''\n    Write a function that takes in a dictionary and returns the sum of all of its values.\n    '''\n    total = 0\n    for num in dict.values():\n        total += num\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for k, v in dict.items():\n        s += v\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    return reduce(lambda x,y:x+y, map(lambda z:z%2==1, range(l,r+1)))\n",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # intialize an empty list\n    sums = []\n    # iterate over the range l to r\n    for i in range(l,r+1):\n        # if i is an odd number\n        if i%2 == 1:\n            # append the sum to the sums list\n            sums.append(i)\n        # return the sum of the list\n    return sum(sums)\n",
        "num_ids": 95
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1, n+1, 2))\n",
        "num_ids": 17
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2:\n            s += i\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # print sum(x for x in range(n) if x % 2!= 0)\n    return sum(x for x in range(n) if x % 2!= 0)\n",
        "num_ids": 45
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n) if i % 2)\n",
        "num_ids": 20
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n+sum_odd(n-1)\n    \ndef sum_even(n):\n    if n == 1:\n        return 1\n    else:\n        return n+sum_even(n-1)\n    \ndef fact(n):\n    if n == 1:\n        return 1\n    else:\n        return n*fact(n-1)\n",
        "num_ids": 102
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if not isinstance(n,int):\n        raise TypeError('n must be a integer')\n    if not isinstance(l,int):\n        raise TypeError('l must be a integer')\n    if not isinstance(r,int):\n        raise TypeError('r must be a integer')\n    if l<0:\n        raise ValueError('l must be a positive integer')\n    if r<0:\n        raise ValueError('r must be a positive integer')\n    if l>r:\n        raise ValueError('l must be less than or equal to r')\n    return sum(range(1,n,2))\n",
        "num_ids": 147
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s = s + i\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for val in arr:\n        total += val\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    tot = 0 \n    for i in arr: \n        tot += i \n    return tot \n",
        "num_ids": 29
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for ele in arr:\n        sum = sum + ele\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_array = 0\n    for i in range(0, len(arr)):\n        sum_array += arr[i]\n    return sum_array\n",
        "num_ids": 39
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for item in arr:\n        total += item\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    _sum=0\n    for i in arr:\n        _sum=_sum+i\n    return _sum\n",
        "num_ids": 31
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | ((n & 0xffffffff) >> (32-d))\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d%32\n    n = (n<<d)|(n>>(32-d))\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print n,d\n    return (n << d | n >> (32-d)) & 0xffffffff\n",
        "num_ids": 28
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #Right-rotate by d bits\n    n = (n >> d) | (n << (32-d))\n    return n\n",
        "num_ids": 34
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | ((n & 0xFFFFFFFF) >> (32 - d))\n",
        "num_ids": 25
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 2**32-1\n    return ((n & mask)<<d)|((n>>(32-d)) & mask)\n",
        "num_ids": 33
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace('\\n', '')\n    text = text.replace('\\t', '')\n    text = text.replace('\\r', '')\n    text = text.replace(' ', '')\n    return text\n",
        "num_ids": 56
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n",
        "num_ids": 14
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(r'\\s+')\n    res = pattern.sub(' ', text)\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\ndef replace_all_spaces(text):\n    '''\n    Write a function to replace all spaces in a string with \"%20\".\n    '''\n    return re.sub(\" \", \"%20\", text)\ndef reverse_a_string(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    return text[::-1]\ndef delete_a_char(text, index):\n    '''\n    Write a function to delete the character at index in a string.\n    '''\n    return text[:index] + text[index+1:]\ndef replace_a_char(text, index, new_letter):\n    '''\n    Write a function to replace the character at index in a string with a new letter.\n    '''\n    return text[:index] + new_letter + text[index+1:]\ndef insert_a_char(text, index, new_letter):\n    '''\n    Write a function to insert a character at index in a string.\n    '''\n    return text[:index] + new_letter + text[index:]\ndef remove_a_char_if_prev_char_is_a_char(text, index):\n    '''\n    Write a function to remove the character at index in a string if the previous character is a char.\n    '''\n    if text[index - 1] == \"a\" or text[index - 1] == \"e\" or text[index - 1] == \"i\" or text[index - 1] == \"o\" or text[index - 1] == \"u\" or text[index - 1] == \"y\":\n        return text[:index - 1] + text[index:]\n    return text[:index] + text[index + 1:]\ndef replace_a_char_if_next_char_is_a_char(text, index):\n    '''\n    Write a function to replace the character at index in a string if the next character is a char.\n    '''\n    if text[index + 1] == \"a\" or text[index + 1] == \"e\" or text[index + 1] == \"i\" or text[index + 1] == \"o\" or text[index + 1] == \"u\" or text[index + 1] == \"y\":\n        return text[:index] + text[index + 1] + text[index + 2:]\n    return text[:index] + text[index + 1:]\ndef split_string_if_char_is_a_char(text, index):\n    '''\n    Write a function to split the string into two strings if the character at index is a char.\n    '''\n    if text[index] == \"a\" or text[index] == \"e\" or text[index] == \"i\" or text[index] == \"o\" or text[index] == \"u\" or text[index] == \"y\":\n        return text[:index], text[index:]\n    return text[:index], text[index + 1:]\ndef insert_a_space_at_index(text, index):\n    '''\n    Write a function to insert a space at index in a string.\n    '''\n    return text[:index] + \" \" + text[index:]\ndef swap_a_char_at_index(text, index1, index2):\n    '''\n    Write a function to swap the characters at index1 and index2 in a string.\n    '''\n    return text[:index1] + text[index2] + text[index1 + 1:index2] + text[index1] + text[index2 + 1:]\ndef get_char_count(text):\n    '''\n    Write a function to return the number of characters in a string.\n    '''\n    return len(text)\ndef get_number_of_words(text):\n    '''\n    Write a function to return the number of words in a string.\n    '''\n    return len(text.split())\ndef get_number_of_characters_in_a_string(text):\n    '''\n    Write a function to return the number of characters in a string.\n    '''\n    return len(text)\ndef get_number_of_sentences(text):\n    '''\n    Write a function to return the number of sentences in a string.\n    '''\n    sentences = re.findall(r'[a-zA-Z]+[.!?]', text)\n    return len(sentences)\ndef get_number_of_upper_case_letters(text):\n    '''\n    Write a function to return the number of upper case letters in a string.\n    '''\n    return len(re.findall(r'[A-Z]', text))\ndef get_number_of_lower_case_letters(text):\n    '''\n    Write a function to return the number of lower case letters in a string.\n    '''\n    return len(re.findall(r'[a-z]', text))\ndef get_number_of_digits(text):\n    '''\n    Write a function to return the number of digits in a string.\n    '''\n    return len(re.findall(r'[0-9]', text))\ndef get_number_of_whitespaces(text):\n    '''\n    Write a function to return the number of whitespaces in a string.\n    '''\n    return len(re.findall(r' ', text))\ndef get_number_of_non_whitespaces(text):\n    '''\n    Write a function to return the number of non whitespaces in a string.\n    '''\n    return len(re.findall(r'\\S', text))\ndef get_number_of_non_whitespaces_in_a_string(text):\n    '''\n    Write a function to return the number of non whitespaces in a string.\n    '''\n    return len(re.findall(r'\\S', text))\ndef get_number_of_punctuations(text):\n    '''\n    Write a function to return the number of punctuations in a string.\n    '''\n    return len(re.findall(r'[,;.:!?]', text))\ndef is_number(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0-9]*\\.?[0-9]+$', text)\ndef is_a_number(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0-9]+$', text)\ndef is_a_number_string(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0-9]*\\.?[0-9]+$', text)\ndef is_a_number_string(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0-9]*\\.?[0-9]+$', text)\ndef is_a_number_string(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0-9]*\\.?[0-9]+$', text)\ndef is_a_number_string(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0-9]*\\.?[0-9]+$', text)\ndef is_a_number_string(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0-9]*\\.?[0-9]+$', text)\ndef is_a_number_string(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0-9]*\\.?[0-9]+$', text)\ndef is_a_number_string(text):\n    '''\n    Write a function to return whether a string is a number or not.\n    '''\n    return re.findall(r'^[0",
        "num_ids": 14
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    output = \"\"\n    for char in text:\n        if char!= \" \":\n            output += char\n    return output\n",
        "num_ids": 32
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[\\s]+','',text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+',' ',text)\n",
        "num_ids": 16
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return(x==y==z)\n",
        "num_ids": 12
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    if x == y!= z:\n        return 2\n    if x == z!= y:\n        return 2\n    if y == z!= x:\n        return 2\n    return 0\n",
        "num_ids": 61
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    if x == y or y == z or x == z:\n        return 2\n    return 0\n",
        "num_ids": 38
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y or y == z or z == x:\n        count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    else:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    total = 0\n    if x == y and x == z:\n        total += 1\n    if y == x and y == z:\n        total += 1\n    if z == x and z == y:\n        total += 1\n    return total\n",
        "num_ids": 59
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #Code here\n    return x == y and x == z\n",
        "num_ids": 17
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count = count+1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    while(arr!= sorted(arr)):\n        # print(arr)\n        # print(sorted(arr))\n        rotations += 1\n    return rotations\n",
        "num_ids": 48
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    while(arr!= sorted(arr)):\n        count += 1\n        arr.sort()\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotate = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            rotate += 1\n    return rotate\n",
        "num_ids": 44
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    min_ele = arr[0]\n    min_ele_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < min_ele:\n            min_ele = arr[i]\n            min_ele_index = i\n    if min_ele_index == 0:\n        return 0\n    else:\n        count = 1\n        for i in range(min_ele_index, len(arr)):\n            if arr[i] < min_ele:\n                count += 1\n        return count\n",
        "num_ids": 143
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # store the length of the array\n    l = len(arr)\n",
        "num_ids": 19
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start, end = 0, len(arr)-1\n    while start < end:\n        if arr[start] > arr[end]:\n            start += 1\n        else:\n            end -= 1\n    return start\n",
        "num_ids": 52
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    # base case\n    if arr == sorted(arr):\n        return 0\n    # if array is not sorted\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                break\n        else:\n            return 0\n    \n    # if array is sorted\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # if array is not sorted\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] < arr[i+1]:\n                break\n        else:\n            return 0\n    \n    # find out the minimum number of rotations required\n    rotations = i + 1\n    for j in range(i+1, len(arr)):\n        if arr[j] < arr[i]:\n            rotations += 1\n    return rotations\n",
        "num_ids": 221
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    mid = len(arr)//2\n",
        "num_ids": 12
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n",
        "num_ids": 13
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if (n < 0) :\n        x = -n\n    if (n == 0 or n == 1) :\n        return True\n    if (n%2 == 0) :\n        return False\n    c = 3\n    while (x > 0) :\n        x = x/2\n        if (x == 1) :\n            return True\n        if (x%2 == 0) :\n            return False\n        if (pow(2,c) > x) :\n            return False\n        c += 1\n    return True\n",
        "num_ids": 131
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = math.sqrt(n)\n    return root * root == n\n",
        "num_ids": 21
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    sqrt = int(math.sqrt(n))\n    if sqrt*sqrt == n :\n        return True\n    else :\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    if (n < 0):\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # A simple test to check whether n is a perfect square.\n    x = n * n\n    if (x == n) :\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # A simple method is to use the\n    # factorial of the square root\n    # of the number and see if the\n    # remainder is zero or not. If\n    # the remainder is zero, then the\n    # number is a perfect square.\n    if (n < 0) :\n        return False;\n",
        "num_ids": 74
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(math.sqrt(n))\n    return (x * x) == n\n",
        "num_ids": 25
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0) :\n        return 1\n    s = math.sqrt(n)\n    return (s - math.floor(s)) == 0\n",
        "num_ids": 40
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n*n == int(n*n))\n",
        "num_ids": 16
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product*num\n    if product%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num\n    if(product % 2 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    res = 1\n    for i in arr:\n        res = res * i\n    if res % 2 == 0:\n        return True\n    return False\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        elif n % 3 == 0:\n            return False\n        else:\n            i = 5\n            while (i * i <= n):\n                if n % i == 0:\n                    return False\n                elif n % (i+2) == 0:\n                    return False\n                i = i+6\n            return True\n",
        "num_ids": 117
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even = True\n    for num in arr:\n        if num%2 == 1:\n            even = False\n    return even\n    \ndef is_product_odd(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    odd = True\n    for num in arr:\n        if num%2 == 0:\n            odd = False\n    return odd\n",
        "num_ids": 32
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x*y, arr) % 2 == 0\n",
        "num_ids": 22
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if arr[0] % 2 == 0:\n        return is_product_even(arr[1:])\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n",
        "num_ids": 22
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr.sort()\n    res = 1\n    for i in arr:\n        res *= i\n    if res % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # arr = [2, 4, 6, 8]\n    return reduce(lambda x, y: x*y, arr)%2 == 0\n",
        "num_ids": 36
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    lst = 1\n    for i in arr: \n        lst = lst * i\n    if lst % 2 == 0: \n        return True\n    else: \n        return False\n    \ndef is_product_odd(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    lst = 1\n    for i in arr: \n        lst = lst * i\n    if lst % 2 == 1: \n        return True\n    else: \n        return False\n",
        "num_ids": 49
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return 0\n    current_sum = sum(lists[0])\n    result = lists[0]\n    for l in lists[1:]:\n        if current_sum < sum(l):\n            current_sum = sum(l)\n            result = l\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    new_list = []\n    for i in lists:\n        new_list.append(sum(i))\n    return new_list.index(max(new_list))\n",
        "num_ids": 43
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = None\n    for list_ in lists:\n        sum_list = sum(list_)\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_sum_list = list_\n    return max_sum_list\n    \ndef min_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the lowest.\n    '''\n    min_sum = None\n    min_sum_list = None\n    for list_ in lists:\n        sum_list = sum(list_)\n        if min_sum == None or min_sum > sum_list:\n            min_sum = sum_list\n            min_sum_list = list_\n    return min_sum_list\n    \ndef total_list(lists):\n    '''\n    Write a function that returns the total sum of all the elements in a list of lists.\n    '''\n    total = 0\n    for list_ in lists:\n        total += sum(list_)\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    # traversing through all the lists\n    for i in lists:\n        total = 0\n        # traversing through all the elements of the list\n        for j in i:\n            total += j\n        if total > max_sum:\n            max_sum = total\n    return max_sum\n",
        "num_ids": 76
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists)==0:\n        return []\n    max_sum=lists[0]\n    for l in lists:\n        sum_l=0\n        for e in l:\n            sum_l+=e\n        if sum_l>max_sum:\n            max_sum=sum_l\n    list_of_max_sum=[]\n    for l in lists:\n        sum_l=0\n        for e in l:\n            sum_l+=e\n        if sum_l==max_sum:\n            list_of_max_sum.append(l)\n    return list_of_max_sum\n    \ndef sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists)==0:\n        return []\n    max_sum=lists[0]\n    for l in lists:\n        sum_l=0\n        for e in l:\n            sum_l+=e\n        if sum_l>max_sum:\n            max_sum=sum_l\n    return max_sum\n    \ndef max_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists)==0:\n        return []\n    max_sum=lists[0]\n    for l in lists:\n        sum_l=0\n        for e in l:\n            sum_l+=e\n        if sum_l<max_sum:\n            max_sum=sum_l\n    list_of_max_sum=[]\n    for l in lists:\n        sum_l=0\n        for e in l:\n            sum_l+=e\n        if sum_l==max_sum:\n            list_of_max_sum.append(l)\n    return list_of_max_sum\n    \ndef unique_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists)==0:\n        return []\n    max_sum=lists[0]\n    for l in lists:\n        sum_l=0\n        for e in l:\n            sum_l+=e\n        if sum_l<max_sum:\n            max_sum=sum_l\n    list_of_max_sum=[]\n    for l in lists:\n        sum_l=0\n        for e in l:\n            sum_l+=e\n        if sum_l==max_sum:\n            list_of_max_sum.append(l)\n    return list_of_max_sum\n",
        "num_ids": 148
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=sum)\n",
        "num_ids": 13
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = []\n    for sublist in lists:\n        sums.append(sum(sublist))\n    return lists[sums.index(max(sums))]\n",
        "num_ids": 44
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sum_list_helper([], lists)\n",
        "num_ids": 17
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -1\n    for list in lists:\n        total = sum(list)\n        if total > max_sum:\n            max_sum = total\n            max_list = list\n    return max_list\n",
        "num_ids": 54
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    res = [0,0]\n    for l in lists:\n        if sum(l) > res[0]:\n            res = [sum(l), l]\n    return res[1]\n",
        "num_ids": 48
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # convert to lowercase\n    test_str = test_str.lower()\n    # convert each character to unicode\n    lst = [ord(x) for x in test_str]\n    # list of maximum uppercase run for each character\n    max_run = [1]\n    # loop through each character\n    for i in range(1, len(lst)):\n        # if character is uppercase, update max_run\n        if lst[i] >= 65 and lst[i] <= 90:\n            max_run.append(max_run[i-1] + 1)\n        # otherwise, update max_run\n        else:\n            max_run.append(1)\n    return max(max_run)\n",
        "num_ids": 175
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n",
        "num_ids": 101
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for c in test_str:\n        if c.isupper():\n            max_run += 1\n        else:\n            break\n    return max_run\n",
        "num_ids": 46
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run=0\n    cur_run=0\n    for i in test_str:\n        if i.isupper():\n            cur_run+=1\n        else:\n            max_run=max(max_run,cur_run)\n            cur_run=0\n    return max(max_run,cur_run)\n",
        "num_ids": 80
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    \n    max_run = 0\n    current_run = 1\n    index = 0\n",
        "num_ids": 39
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 1\n    count = 1\n    for i in range(1,len(test_str)):\n        if test_str[i-1] == test_str[i]:\n            count += 1\n        else:\n            max_count = max(max_count,count)\n            count = 1\n    max_count = max(max_count,count)\n    return max_count\n",
        "num_ids": 96
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in xrange(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n    return max(max_run, curr_run)\n",
        "num_ids": 95
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_upper = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run_upper += 1\n        else:\n            if run_upper > 0:\n                return run_upper\n            run_upper = 0\n    return run_upper\n",
        "num_ids": 74
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    max_str = ''\n    for i in range(len(test_str)):\n        count = 0\n        for j in test_str[i:]:\n            if j.isupper():\n                count += 1\n            else:\n                break\n        if count > max:\n            max = count\n            max_str = test_str[i:i+count]\n    return max_str\n",
        "num_ids": 99
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase += 1\n    return uppercase\n",
        "num_ids": 39
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "num_ids": 37
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n%2!= 0:\n            return n\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        if nums[0] % 2 == 1:\n            return nums[0]\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n",
        "num_ids": 83
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_indices = [i for i,j in enumerate(test_tup) if j == K]\n    return len(k_indices)\n    \ndef pair_combinations(a,b,c,d):\n    '''\n    Given 4 integers, find all the possible combinations of 4 integers in the array.\n    '''\n    a_b_combinations = []\n    b_c_combinations = []\n    c_d_combinations = []\n    d_a_combinations = []\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            a_b_combinations.append((a[i], b[j]))\n    for i in range(len(b)):\n        for j in range(i+1, len(b)):\n            b_c_combinations.append((b[i], c[j]))\n    for i in range(len(c)):\n        for j in range(i+1, len(c)):\n            c_d_combinations.append((c[i], d[j]))\n    for i in range(len(d)):\n        for j in range(i+1, len(d)):\n            d_a_combinations.append((d[i], a[j]))\n    return a_b_combinations + b_c_combinations + c_d_combinations + d_a_combinations\n",
        "num_ids": 266
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n",
        "num_ids": 14
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #return K in test_tup\n    return len([1 for i in range(len(test_tup)) if test_tup[i] == K]) == len(test_tup)\n",
        "num_ids": 49
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if K in test_tup else False\n",
        "num_ids": 15
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[K-1] in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup)==K or (len(test_tup)==K+1 and test_tup[K]==None)\n",
        "num_ids": 38
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if test_tup[0] == K else False\n",
        "num_ids": 18
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    # Write your logic here\n    # pass\n    return test_tup[K]\n",
        "num_ids": 25
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (test_tup[0] == K):\n        return True\n    else:\n        return False\n    \n    \ndef check_C(test_tup, C):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (test_tup[1] == C):\n        return True\n    else:\n        return False\n    \n    \ndef process_K(test_tup, K):\n    '''\n    Write a function to process the tuple containing the k value.\n    '''\n    return test_tup[2]\n    \n    \ndef process_C(test_tup, C):\n    '''\n    Write a function to process the tuple containing the k value.\n    '''\n    return test_tup[3]\n    \n    \ndef process_tuple(test_tup):\n    '''\n    Write a function to process the tuple with the k value and C value\n    '''\n    if (check_K(test_tup, K)):\n        k_value = process_K(test_tup, K)\n    else:\n        k_value = 0\n    if (check_C(test_tup, C)):\n        c_value = process_C(test_tup, C)\n    else:\n        c_value = 0\n    return k_value, c_value\n    \n    \ndef compute_cost(k_value, c_value):\n    '''\n    Write a function to compute the cost based on the K value and C value\n    '''\n    cost = k_value * c_value\n    return cost\n    \n    \ndef get_cost(test_tup):\n    '''\n    Write a function to get the cost from the tuple\n    '''\n    return compute_cost(process_tuple(test_tup)[0], process_tuple(test_tup)[1])\n    \n    \ndef get_K(test_tup):\n    '''\n    Write a function to get the k value from the tuple\n    '''\n    return process_tuple(test_tup)[0]\n    \n    \ndef get_C(test_tup):\n    '''\n    Write a function to get the C value from the tuple\n    '''\n    return process_tuple(test_tup)[1]\n    \n    \ndef process_tuple_dist(test_tup):\n    '''\n    Write a function to process the tuple with the K, C value and distance\n    '''\n    if (check_K(test_tup, K)):\n        k_value = get_K(test_tup)\n    else:\n        k_value = 0\n    if (check_C(test_tup, C)):\n        c_value = get_C(test_tup)\n    else:\n        c_value = 0\n    return k_value, c_value, process_tuple(test_tup)[2]\n    \n    \ndef compute_cost_dist(k_value, c_value, dist):\n    '''\n    Write a function to compute the cost based on the K, C value and distance\n    '''\n    cost = k_value * c_value * dist\n    return cost\n    \n    \ndef get_cost_dist(test_tup):\n    '''\n    Write a function to get the cost from the tuple with the K, C value and distance\n    '''\n    return compute_cost_dist(process_tuple_dist(test_tup)[0], process_tuple_dist(test_tup)[1], process_tuple_dist(test_tup)[2])\n    \n    \ndef get_K_dist(test_tup):\n    '''\n    Write a function to get the K value from the tuple with the K, C value and distance\n    '''\n    return process_tuple_dist(test_tup)[0]\n    \n    \ndef get_C_dist(test_tup):\n    '''\n    Write a function to get the C value from the tuple with the K, C value and distance\n    '''\n    return process_tuple_dist(test_tup)[1]\n    \n    \ndef get_dist(test_tup):\n    '''\n    Write a function to get the distance from the tuple with the K, C value and distance\n    '''\n    return process_tuple_dist(test_tup)[2]\n    \n    \ndef process_tuple_dist_and_route(test_tup):\n    '''\n    Write a function to process the tuple with the K, C value and distance\n    '''\n    if (check_K(test_tup, K)):\n        k_value = get_K(test_tup)\n    else:\n        k_value = 0\n    if (check_C(test_tup, C)):\n        c_value = get_C(test_tup)\n    else:\n        c_value = 0\n    if (check_K(test_tup, K) and check_C(test_tup, C)):\n        dist = get_dist(test_tup)\n    else:\n        dist = 0\n    return k_value, c_value, dist\n    \n    \ndef compute_cost_dist_and_route(k_value, c_value, dist):\n    '''\n    Write a function to compute the cost based on the K, C value and distance\n    '''\n    cost = k_value * c_value * dist\n    return cost\n    \n    \ndef get_cost_dist_and_route(test_tup):\n    '''\n    Write a function to get the cost from the tuple with the K, C value and distance\n    '''\n    return compute_cost_dist_and_route(process_tuple_dist_and_route(test_tup)[0], process_tuple_dist_and_route(test_tup)[1], process_tuple_dist_and_route(test_tup)[2])\n    \n    \ndef get_K_dist_and_route(test_tup):\n    '''\n    Write a function to get the K value from the tuple with the K, C value and distance\n    '''\n    return process_tuple_dist_and_route(test_tup)[0]\n    \n    \ndef get_C_dist_and_route(test_tup):\n    '''\n    Write a function to get the C value from the tuple with the K, C value and distance\n    '''\n    return process_tuple_dist_and_route(test_tup)[1]\n    \n    \ndef get_dist_and_route(test_tup):\n    '''\n    Write a function to get the distance from the tuple with the K, C value and distance\n    '''\n    return process_tuple_dist_and_route(test_tup)[2]\n    \n    \ndef process_tuple_route(test_tup):\n    '''\n    Write a function to process the tuple with the K, C value and route\n    '''\n    if (check_K(test_tup, K)):\n        k_value = get_K(test_tup)\n    else:\n        k_value = 0\n    if (check_C(test_tup, C)):\n        c_value = get_C(test_tup)\n    else:\n        c_value = 0\n    if (check_K(test_tup, K) and check_C(test_tup, C)):\n        route = get_route(test_tup)\n    else:\n        route = 0\n    return k_value, c_value, route\n    \n    \ndef compute_cost_route(k_value, c_value, route):\n    '''\n    Write a function to compute the cost based on the K, C value and route\n    '''\n    cost = k_value * c_value * route\n    return cost\n    \n    \ndef get_cost_route(test_tup):\n    '''\n    Write a function to get the cost from the tuple with the K, C value and route\n    '''\n    return compute_cost_route(process_tuple_route(test_tup)[0], process_tuple_route(test_tup)[1], process_tuple_route(test_tup)[2])\n    \n    \ndef get_K_route(test_tup):",
        "num_ids": 69
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple([x < y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for index in range(0, len(test_tup1)):\n        if test_tup1[index] < test_tup2[index]:\n            return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert (test_tup1 == (1, 2, 3, 4, 5, 6)), \"Wrong tuple passed in as first argument\"\n    assert (test_tup2 == (2, 1, 4, 6, 5, 3)), \"Wrong tuple passed in as second argument\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            print \"False\"\n        else:\n            print \"True\"\n            \ndef check_smaller_in_list(test_list1, test_list2):\n    '''\n    Write a function to check if each element of second list is smaller than its corresponding element in the first list.\n    '''\n    assert (test_list1 == [1, 2, 3, 4, 5, 6]), \"Wrong list passed in as first argument\"\n    assert (test_list2 == [2, 1, 4, 6, 5, 3]), \"Wrong list passed in as second argument\"\n    \n    for i in range(len(test_list1)):\n        if test_list2[i] > test_list1[i]:\n            print \"False\"\n        else:\n            print \"True\"\n            \ndef check_smaller_in_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert (test_tup1 == (1, 2, 3, 4, 5, 6)), \"Wrong tuple passed in as first argument\"\n    assert (test_tup2 == (2, 1, 4, 6, 5, 3)), \"Wrong tuple passed in as second argument\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            print \"False\"\n        else:\n            print \"True\"\n            \ndef check_smaller_in_dict(test_dict1, test_dict2):\n    '''\n    Write a function to check if each element of second dictionary is smaller than its corresponding element in the first dictionary.\n    '''\n    assert (test_dict1 == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}), \"Wrong dictionary passed in as first argument\"\n    assert (test_dict2 == {\"a\": 2, \"b\": 1, \"c\": 4, \"d\": 6, \"e\": 5, \"f\": 3}), \"Wrong dictionary passed in as second argument\"\n    \n    for i in range(len(test_dict1)):\n        if test_dict2[i] > test_dict1[i]:\n            print \"False\"\n        else:\n            print \"True\"\n            \ndef check_smaller_in_set(test_set1, test_set2):\n    '''\n    Write a function to check if each element of second set is smaller than its corresponding element in the first set.\n    '''\n    assert (test_set1 == {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}), \"Wrong set passed in as first argument\"\n    assert (test_set2 == {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}), \"Wrong set passed in as second argument\"\n    \n    for i in range(len(test_set1)):\n        if test_set2[i] > test_set1[i]:\n            print \"False\"\n        else:\n            print \"True\"\n            \ndef check_smaller_in_list_of_sets(test_list1, test_list2):\n    '''\n    Write a function to check if each element of second list of sets is smaller than its corresponding element in the first list of sets.\n    '''\n    assert (test_list1 == [{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}]), \"Wrong list of sets passed in as first argument\"\n    assert (test_list2 == [{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}]), \"Wrong list of sets passed in as second argument\"\n    \n    for i in range(len(test_list1)):\n        if test_list2[i] > test_list1[i]:\n            print \"False\"\n        else:\n            print \"True\"\n            \ndef check_smaller_in_tuple_of_sets(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple of sets is smaller than its corresponding element in the first tuple of sets.\n    '''\n    assert (test_tup1 == ({\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"})), \"Wrong tuple of sets passed in as first argument\"\n    assert (test_tup2 == ({\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"})), \"Wrong tuple of sets passed in as second argument\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            print \"False\"\n        else:\n            print \"True\"\n            \ndef check_smaller_in_tuple_of_dicts(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple of dictionary is smaller than its corresponding element in the first tuple of dictionary.\n    '''\n    assert (test_tup1 == ({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}, {\"a\": 2, \"b\": 1, \"c\": 4, \"d\": 6, \"e\": 5, \"f\": 3}, {\"a\": 4, \"b\": 6, \"c\": 5, \"d\": 3, \"e\": 1, \"f\": 2}, {\"a\": 6, \"b\": 3, \"c\": 2, \"d\": 4, \"e\": 6, \"f\": 1})), \"Wrong tuple of dictionaries passed in as first argument\"\n    assert (test_tup2 == ({\"a\": 2, \"b\": 1, \"c\": 4, \"d\": 6, \"e\": 5, \"f\": 3}, {\"a\": 1, \"b\": 2, \"c\": 4, \"d\": 6, \"e\": 5, \"f\": 3}, {\"a\": 4, \"b\": 6, \"c\": 5, \"d\": 3, \"e\": 1, \"f\": 2}, {\"a\": 6, \"b\": 3, \"c\": 2, \"d\": 4, \"e\": 6, \"f\": 1})), \"Wrong tuple of dictionaries passed in as second argument\"\n    \n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            if test_tup2[i][j] > test_tup1[i][j]:\n                print \"False\"\n            else:\n                print \"True\"\n                \ndef check_smaller_in_tuple_of_sets_and_dicts(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple of sets and dictionary is smaller than its corresponding element in the first tuple of sets and dictionary.\n    '''\n    assert (test_tup1 == ({\"a\", \"b\", ",
        "num_ids": 19
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check for null tuples\n    if test_tup1 is None:\n        return False\n    if test_tup2 is None:\n        return False\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # check each element in tuple 1 with corresponding element in tuple 2\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # if no false is returned, then each element of tuple 1 is smaller than each element of tuple 2\n    return True\n",
        "num_ids": 146
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n        else:\n            continue\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[1] > test_tup2[1]:\n        return False\n    else:\n        return True\n    \n    \n    \n    \ndef check_larger(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is larger than its corresponding element in the first tuple.\n    '''\n    \n    if test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[1] < test_tup2[1]:\n        return False\n    else:\n        return True\n    \n    \n    \ndef check_comparison(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is less than its corresponding element in the first tuple.\n    '''\n    \n    if test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] > test_tup2[1]:\n            return True\n        elif test_tup1[1] < test_tup2[1]:\n            return False\n        else:\n            return True\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[0] > test_tup2[0]:\n        return False\n    \n    \n    \n    \ndef check_overlap(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is larger than its corresponding element in the first tuple.\n    '''\n    \n    if test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1]:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef reverse_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns a new tuple with the elements in reverse order.\n    '''\n    \n    new_tup = (test_tup[1], test_tup[0])\n    return new_tup\n    \n    \n    \n    \ndef sub_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to create a new tuple that is the difference between tuples test_tup1 and test_tup2.\n    '''\n    \n    if len(test_tup1) == len(test_tup2):\n        tuple_diff = []\n        for i in range(len(test_tup1)):\n            tuple_diff.append(test_tup1[i] - test_tup2[i])\n        return tuple_diff\n    else:\n        return None\n    \n    \n    \n    \ndef tuple_to_list(test_tup):\n    '''\n    Write a function that takes a tuple and returns a list of the individual elements of the tuple.\n    '''\n    \n    list_of_elements = []\n    for element in test_tup:\n        list_of_elements.append(element)\n    return list_of_elements\n    \n    \n    \ndef list_to_tuple(test_list):\n    '''\n    Write a function that takes a list and returns a tuple with the same elements of the list in the same order.\n    '''\n    \n    list_tuple = tuple(test_list)\n    return list_tuple\n    \n    \n    \ndef list_of_tuples_to_tuple(test_list):\n    '''\n    Write a function that takes a list of tuples and returns a new tuple with the same elements of the tuples in the same order.\n    '''\n    \n    new_tup = ()\n    for element in test_list:\n        new_tup += (element,)\n    return new_tup\n    \n    \n    \ndef remove_from_list(test_list, test_tup):\n    '''\n    Write a function that takes a list and a tuple as arguments. The function should remove the elements of the tuple from the list and return the new list.\n    '''\n    \n    list_copy = test_list[:]\n    for element in test_tup:\n        if element in test_list:\n            list_copy.remove(element)\n    return list_copy\n    \n    \n    \ndef check_for_tuples(test_list, test_tup):\n    '''\n    Write a function that takes a list and a tuple as arguments. The function should return True if the tuple is in the list and False otherwise.\n    '''\n    \n    if test_tup in test_list:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef remove_from_list_in_place(test_list, test_tup):\n    '''\n    Write a function that takes a list and a tuple as arguments. The function should remove the elements of the tuple from the list and return the new list.\n    '''\n    \n    list_copy = test_list[:]\n    for element in test_tup:\n        if element in list_copy:\n            list_copy.remove(element)\n    return list_copy\n    \n    \n    \n    \ndef sort_tuples(test_list):\n    '''\n    Write a function that takes a list of tuples as an argument and returns a sorted list of tuples sorted by the second element of the tuple.\n    '''\n    \n    sorted_list = []\n    for element in test_list:\n        sorted_list.append(element)\n    sorted_list.sort(key=lambda x: x[1])\n    return sorted_list\n    \n    \n    \n    \ndef remove_from_list_in_place_sorted(test_list, test_tup):\n    '''\n    Write a function that takes a list and a tuple as arguments. The function should remove the elements of the tuple from the list and return the new list. The elements of the list should be sorted according to the second element of the tuple.\n    '''\n    \n    list_copy = test_list[:]\n    for element in test_tup:\n        if element in list_copy:\n            list_copy.remove(element)\n    list_copy.sort(key=lambda x: x[1])\n    return list_copy\n    \n    \n    \n    \ndef make_list_of_tuples(test_list):\n    '''\n    Write a function that takes a list as an argument and returns a list of tuples. The tuples in the list should be of the form (x, y) where x is the element in the list and y is the element in the list after that.\n    '''\n    \n    list_of_tuples = []\n    for i in range(len(test_list) - 1):\n        tuple_element = (test_list[i], test_list[i+1])\n        list_of_tuples.append(tuple_element)\n    return list_of_tuples\n    \n    \n    \n    \ndef sort_list_of_tuples(test_list):\n    '''\n    Write a function that takes a list of tuples as an argument and returns a sorted list of tuples sorted according to the second element of the tuple.\n    '''\n    \n    sorted_list = []\n    for element in test_list:\n        sorted_list.append(element)\n    sorted_list.sort(key=lambda x: x[1])\n    return sorted_list\n    \n    \n    \n    \ndef sum_of_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the sum of the elements of the tuple.\n    '''\n    \n    return sum(test_tup)\n    \n    \n    \n    \ndef div_by_ten(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns a new tuple that is the first element divided by 10. The second element of the tuple should be divided by 10.\n    '''\n    \n    if test_tup[1] % 10 == 0:\n        return (test_tup",
        "num_ids": 26
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return ((test_tup1[0] <= test_tup2[0]) and (test_tup1[1] <= test_tup2[1]))\n",
        "num_ids": 43
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i, j in zip(test_tup1, test_tup2):\n        if i > j:\n            print(\"False\")\n            return\n    print(\"True\")\n",
        "num_ids": 45
    }
]