[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #Similarity as cosine similarity\n    vec1 = test_tup1[1]\n    vec2 = test_tup2[1]\n    if len(vec1)!= len(vec2):\n        return 0\n    return sum(x[0]*x[1] for x in zip(vec1,vec2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_tup1 = (10, 20, 30, 40, 50, 60, 70)\n    # test_tup2 = (30, 40, 50, 60, 70, 80, 90)\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    shared_items = []\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        return set(test_tup1).intersection(test_tup2)\n    else:\n        return \"Inputs must be tuples.\"\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    return [i for i in l1 if i in l2]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for x in test_tup1:\n        if x in test_tup2:\n            shared_elements.append(x)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #pass\n    if type(test_tup1)!= tuple:\n        test_tup1 = tuple(test_tup1)\n    if type(test_tup2)!= tuple:\n        test_tup2 = tuple(test_tup2)\n    \n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    # Check from 2 to n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return False\n    elif n==1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n > 2 and n % 2 == 0:\n        return True\n    else:\n        max = math.ceil(math.sqrt(n))\n        for i in range(3, max+1, 2):\n            if n % i == 0:\n                return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for x in range(2,n):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef factor(n):\n    '''\n    Write a python function to determine prime factors of a number.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\ndef num_divisors(n):\n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    total = 1\n    while n % 2 == 0:\n        n //= 2\n        total += 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            total += 2\n            n //= i\n    if n > 2:\n        total += 1\n    return total\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\ndef perfect_number(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    if n == sum(factor(i) for i in range(1, n)):\n        return True\n    else:\n        return False\ndef abundant_number(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if n < sum(factor(i) for i in range(1, n)):\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Write a python function to check if a number is abundant or not.\n    '''\n    if sum(factor(i) for i in range(1, n)) > n:\n        return True\n    else:\n        return False\ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    if n == sum(factor(i) for i in range(1, n)):\n        return True\n    else:\n        return False\ndef is_divisor(n, m):\n    '''\n    Write a python function to check if a number is divisible by another number.\n    '''\n    if n % m == 0:\n        return True\n    else:\n        return False\ndef is_leap_year(n):\n    '''\n    Write a python function to check if a year is leap or not.\n    '''\n    if n % 4 == 0:\n        return True\n    elif n % 100 == 0:\n        return False\n    elif n % 400 == 0:\n        return True\n    else:\n        return False\ndef is_armstrong(n):\n    '''\n    Write a python function to check if a number is an armstrong number or not.\n    '''\n    x = list(str(n))\n    y = [int(x) ** len(x) for x in x]\n    if sum(y) == n:\n        return True\n    else:\n        return False\ndef is_prime_factors(n):\n    '''\n    Write a python function to check if a number is prime factors of another number.\n    '''\n    factors = []\n    x = 2\n    while x * x <= n:\n        if n % x == 0:\n            factors.append(x)\n            n //= x\n        else:\n            x += 1\n    factors.append(n)\n    return factors\ndef is_perfect_factors(n):\n    '''\n    Write a python function to check if a number is perfect factors of another number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    factors.sort()\n    return factors\ndef is_factors(n, m):\n    '''\n    Write a python function to check if a number is factors of another number.\n    '''\n    x = []\n    if m > n:\n        for i in range(1, n + 1):\n            if n % i == 0:\n                x.append(i)\n    else:\n        for i in range(1, m + 1):\n            if m % i == 0:\n                x.append(i)\n    return x\ndef is_factor(n, m):\n    '''\n    Write a python function to check if a number is a factor of another number.\n    '''\n    if m > n:\n        for i in range(1, n + 1):\n            if n % i == 0 and m % i == 0:\n                return True\n    else:\n        for i in range(1, m + 1):\n            if m % i == 0 and n % i == 0:\n                return True\n    return False\ndef is_in_range(n, m):\n    '''\n    Write a python function to check if a number is in range.\n    '''\n    if n in range(m + 1):\n        return True\n    else:\n        return False\ndef is_odd(n):\n    '''\n    Write a python function to check if a number is odd or not.\n    '''\n    if n % 2!= 0:\n        return True\n    else:\n        return False\ndef is_odd_factor(n, m):\n    '''\n    Write a python function to check if a number is odd factors of another number.\n    '''\n    if n % m == 0:\n        return True\n    else:\n        return False\ndef is_even(n):\n    '''\n    Write a python function to check if a number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\ndef is_even_factor(n, m):\n    '''\n    Write a python function to check if a number is even factors of another number.\n    '''\n    if n % m == 0:\n        return True\n    else:\n        return False\ndef is_prime_factor(n, m):\n    '''\n    Write a python function to check if a number is a prime factor of another number.\n    '''\n    if n % m == 0:\n        return True\n    else:\n        return False\ndef is_prime_factor_of_factor(n, m):\n    '''\n    Write a python function to check if a number is a prime factor of another number.\n    '''\n    if m % n == 0:\n        return True\n    else:\n        return False\ndef is_factors(n, m):\n    '''\n    Write a python function to check if a number is factors of another number.\n    '''\n    x = []\n    if m > n:\n        for i in range(1, n + 1):\n            if n % i == 0:\n                x.append(i)\n    else:\n        for i in range(1, m + 1):\n            if m % i == 0:\n                x.append(i)\n    return x\ndef is_divisor_of_factor(n, m):\n    '''\n    Write a python function to check if a number is divisor of another number.\n    '''\n    if m % n == 0:\n        return True\n    else:\n        return False\ndef is_divisor_of_divisor(n, m):\n    '''\n    Write a python function to check if a number is divisor of another number.\n    '''\n    if m % n == 0:\n        return True\n    else:\n        return False\ndef is_divisor_of_factor_of_divisor(n, m):\n    '''\n    Write a python function to check if a number is divisor of another number.\n    '''\n    if m % n == 0:\n        return True\n    elif m % n!= 0:\n        return False\ndef is_perfect_number(n):\n    '''\n    Write a python function to check if a number is perfect number or not.\n    '''\n    if sum(factor(i) fo"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return True\n    return False\ndef find_primitive_root(a):\n    '''\n    Write a python function to find primitive roots of a number.\n    '''\n    if pow(a,0,a)==1:\n        return a\n    elif pow(a,0,a)==a:\n        return 0\n    else:\n        i=2\n        while i<a:\n            if pow(i,0,a)==1:\n                return i\n            i+=1\ndef gcd(a,b):\n    '''\n    Write a python function to compute GCD of two numbers.\n    '''\n    if a==0:\n        return b\n    else:\n        return gcd(b%a,a)\ndef inverse_mod(a,m):\n    '''\n    Write a python function to compute modular inverse of a number.\n    '''\n    if a<0 or m<0:\n        return None\n    if gcd(a,m)>1:\n        return None\n    u1,u2,u3=1,0,a\n    v1,v2,v3=0,1,m\n    while v3!=0:\n        q=u3//v3\n        v1,v2,v3,u1,u2,u3=u1-q*v1,u2-q*v2,u3-q*v3,v1,v2,v3\n    return u1%m\ndef solve_equation(a,b,c):\n    '''\n    Write a python function to solve linear algebraic system of equations.\n    '''\n    if gcd(a,b)>1:\n        return None\n    else:\n        if inverse_mod(b,a) is None:\n            return None\n        d=inverse_mod(b,a)\n        x=d*c%a\n        y=d*a-x\n        return x,y\ndef is_prime(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    if n>2 and n%2==0:\n        return False\n    max=math.floor(math.sqrt(n))\n    for i in range(3,1+max,2):\n        if n%i==0:\n            return False\n    return True\ndef generate_prime_number(m):\n    '''\n    Write a python function to generate prime numbers using eratosthenes sieve.\n    '''\n    sieve=[True]*(m+1)\n    for i in range(2,m+1):\n        if sieve[i]:\n            j=i*2\n            while j<=m:\n                sieve[j]=False\n                j+=i\n    return [i for i in range(2,m+1) if sieve[i]]\ndef generate_binary_number(n,m):\n    '''\n    Write a python function to generate binary number using base 2.\n    '''\n    if n==0:\n        return [0]\n    if n==1:\n        return [1]\n    b=[]\n    while n>0:\n        b.append(int(n%2))\n        n//=2\n    while len(b)<m:\n        b.append(0)\n    b.reverse()\n    return b\ndef binary_addition(a,b):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    if len(a)<len(b):\n        a=''.join(map(str,a))\n        b=''.join(map(str,b))\n        b='0'*(len(a)-len(b))+b\n    else:\n        b=''.join(map(str,b))\n        a=''.join(map(str,a))\n        a='0'*(len(b)-len(a))+a\n    carry=0\n    result=[]\n    for i in range(len(a)-1,-1,-1):\n        s=int(a[i])+int(b[i])+carry\n        result.append(s%2)\n        carry=s//2\n    if carry!=0:\n        result.append(carry)\n    return result\ndef binary_multiplication(a,b):\n    '''\n    Write a python function to multiply two binary numbers.\n    '''\n    if len(a)<len(b):\n        a='0'*(len(b)-len(a))+a\n    else:\n        b='0'*(len(a)-len(b))+b\n    result=[]\n    for i in range(len(a)):\n        s=0\n        for j in range(len(a)):\n            s+=int(a[j])*int(b[i+j])\n        result.append(s)\n    return result\ndef generate_factors(n):\n    '''\n    Write a python function to generate factors of a number.\n    '''\n    if n<=1:\n        return []\n    if is_prime(n):\n        return [n]\n    else:\n        return [i for i in range(2,n+1) if n%i==0]\ndef generate_powerset(iterable):\n    '''\n    Write a python function to generate all subsets of a set.\n    '''\n    s=list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\ndef generate_subsets(s):\n    '''\n    Write a python function to generate all subsets of a set.\n    '''\n    for i in generate_powerset(s):\n        yield i\ndef get_subsets(s):\n    '''\n    Write a python function to generate all subsets of a set.\n    '''\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\ndef get_permutations(s):\n    '''\n    Write a python function to generate all permutations of a set.\n    '''\n    return chain.from_iterable(permutations(s, r) for r in range(len(s)+1))\ndef get_combinations(s):\n    '''\n    Write a python function to generate all combinations of a set.\n    '''\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\ndef get_combinations_with_replacement(s):\n    '''\n    Write a python function to generate all combinations of a set with replacement.\n    '''\n    return chain.from_iterable(combinations_with_replacement(s, r) for r in range(len(s)+1))\ndef get_permutations_with_replacement(s):\n    '''\n    Write a python function to generate all permutations of a set with replacement.\n    '''\n    return chain.from_iterable(permutations_with_replacement(s, r) for r in range(len(s)+1))\ndef get_combinations_with_replacement(s):\n    '''\n    Write a python function to generate all combinations of a set with replacement.\n    '''\n    return chain.from_iterable(combinations_with_replacement(s, r) for r in range(len(s)+1))\ndef get_combinations_with_replacement_n(s,n):\n    '''\n    Write a python function to generate all combinations of a set with replacement.\n    '''\n    return chain.from_iterable(combinations_with_replacement(s, r) for r in range(n+1))\ndef get_multiplication(n):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    if n<=0:\n        return 0\n    m=n\n    while m>0:\n        if m%2==1:\n            return 1+get_multiplication(m//2)\n        else:\n            return get_multiplication(m//2)\ndef count_digit(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return math.cei"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for x in range(2,int(math.sqrt(n))+1):\n        if n%x == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nlargest = []\n    hq.heapify(nlargest)\n    for num in nums:\n        hq.heappushpop(nlargest,num)\n    return nlargest[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result=[]\n    for i in range(n):\n        hq.heappush(result,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>result[0]:\n            hq.heapreplace(result,nums[i])\n    return result\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    result=[]\n    for i in range(n):\n        hq.heappush(result,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<result[0]:\n            hq.heapreplace(result,nums[i])\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0 or len(nums)==0:\n        return []\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0 or len(nums)==0:\n        return []\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using heap sort.\n    '''\n    if len(nums)==0:\n        return []\n    heap=[]\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n    for i in range(len(nums)):\n        nums[i]=hq.heappop(heap)\n    return nums\ndef max_heapify(nums,n,i):\n    '''\n    Write a function to create a max heap in O(nlgn) time\n    '''\n    if i>=n:\n        return\n    left=2*i+1\n    right=2*i+2\n    largest=i\n    if left<n and nums[left]>nums[largest]:\n        largest=left\n    if right<n and nums[right]>nums[largest]:\n        largest=right\n    if largest!=i:\n        nums[largest],nums[i]=nums[i],nums[largest]\n        max_heapify(nums,n,largest)\ndef max_heap_insert(nums,val):\n    '''\n    Write a function to insert a value into a max heap, and maintain the heap property.\n    '''\n    n=len(nums)\n    nums.append(-float('inf'))\n    i=n\n    while i>0 and nums[(i-1)//2]<nums[i]:\n        nums[(i-1)//2],nums[i]=nums[i],nums[(i-1)//2]\n        i=(i-1)//2\ndef max_heap_extract_max(nums):\n    '''\n    Write a function to extract a max number from a max heap, and maintain the heap property.\n    '''\n    if len(nums)==0:\n        return -float('inf')\n    if len(nums)==1:\n        return nums[0]\n    max_value=nums[0]\n    nums[0]=nums[-1]\n    nums.pop()\n    max_heapify(nums,len(nums),0)\n    return max_value\ndef min_heap_insert(nums,val):\n    '''\n    Write a function to insert a value into a min heap, and maintain the heap property.\n    '''\n    n=len(nums)\n    nums.append(float('inf'))\n    i=n\n    while i>0 and nums[(i-1)//2]>nums[i]:\n        nums[(i-1)//2],nums[i]=nums[i],nums[(i-1)//2]\n        i=(i-1)//2\ndef min_heap_extract_min(nums):\n    '''\n    Write a function to extract a min number from a min heap, and maintain the heap property.\n    '''\n    if len(nums)==0:\n        return float('inf')\n    if len(nums)==1:\n        return nums[0]\n    min_value=nums[0]\n    nums[0]=nums[-1]\n    nums.pop()\n    max_heapify(nums,len(nums),0)\n    return min_value\ndef heap_sort_right(nums,left,right,reverse=False):\n    '''\n    Write a function to sort a list of numbers using heap sort.\n    '''\n    if left>=right:\n        return\n    if not reverse:\n        nums[left],nums[right]=nums[right],nums[left]\n    else:\n        nums[left],nums[right]=nums[right],nums[left]\n    n=right-left+1\n    for i in range(left+n//2,left,-1):\n        max_heapify(nums,n,i)\n    for i in range(left+n-1,left-1,-1):\n        nums[i],nums[left]=nums[left],nums[i]\n        max_heapify(nums,i,left)\ndef heap_sort_left(nums,left,right,reverse=False):\n    '''\n    Write a function to sort a list of numbers using heap sort.\n    '''\n    if left>=right:\n        return\n    if not reverse:\n        nums[left],nums[right]=nums[right],nums[left]\n    else:\n        nums[left],nums[right]=nums[right],nums[left]\n    n=right-left+1\n    for i in range(left+n//2,left,-1):\n        min_heapify(nums,n,i)\n    for i in range(left+n-1,left-1,-1):\n        nums[i],nums[left]=nums[left],nums[i]\n        min_heapify(nums,i,left)\ndef min_heap_insert(nums,val):\n    '''\n    Write a function to insert a value into a min heap, and maintain the heap property.\n    '''\n    n=len(nums)\n    nums.append(float('inf'))\n    i=n\n    while i>0 and nums[(i-1)//2]>nums[i]:\n        nums[(i-1)//2],nums[i]=nums[i],nums[(i-1)//2]\n        i=(i-1)//2\ndef max_heap_insert(nums,val):\n    '''\n    Write a function to insert a value into a max heap, and maintain the heap property.\n    '''\n    n=len(nums)\n    nums.append(-float('inf'))\n    i=n\n    while i>0 and nums[(i-1)//2]<nums[i]:\n        nums[(i-1)//2],nums[i]=nums[i],nums[(i-1)//2]\n        i=(i-1)//2\ndef max_heap_extract_max(nums):\n    '''\n    Write a function to extract a max number from a max heap, and maintain the heap property.\n    '''\n    if len(nums)==0:\n        return -float('inf')\n    if len(nums)==1:\n        return nums[0]\n    max_value=nums[0]\n    nums[0]=nums[-1]\n    nums.pop()\n    max_heapify(nums,len(nums),0)\n    return max_value\ndef min_heap_extract_min(nums):\n    '''\n    Write a function to extract a min number from a min heap, and maintain the heap property.\n    '''\n    if len(nums)==0:\n        return float('inf')\n    if len(nums)==1:\n        return nums[0]\n    min_value=nums[0]\n    nums[0]=nums[-1]"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    if len(nums)<n:\n        return -1\n    num_list = [-1*num for num in nums]\n    hq.heapify(num_list)\n    for i in range(n-1):\n        hq.heappop(num_list)\n    return [-1*num for num in num_list]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n == 0:\n        return []\n    if len(nums)<n:\n        return -1\n    num_list = [-1*num for num in nums]\n    hq.heapify(num_list)\n    for i in range(n-1):\n        hq.heappop(num_list)\n    return [-1*num for num in num_list]\ndef find_sorted_list(a,b):\n    '''\n    Given two lists sorted in ascending order, find the smallest common element(s) among them.\n    '''\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            print(a[i],b[j])\n            i+=1\n            j+=1\n        elif a[i] > b[j]:\n            j+=1\n        elif a[i] < b[j]:\n            i+=1\n    return None\ndef find_min_distance(a,b):\n    '''\n    Given two lists of numbers, find the minimal absolute difference between any two elements of list a and b.\n    '''\n    i = 0\n    j = 0\n    min_diff = abs(a[0]-b[0])\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            min_diff = 0\n            i+=1\n            j+=1\n        elif abs(a[i]-b[j]) < min_diff:\n            min_diff = abs(a[i]-b[j])\n            print(min_diff)\n        elif abs(a[i]-b[j]) > min_diff:\n            j+=1\n        else:\n            i+=1\n    return min_diff\ndef find_maximum_pair(a,b):\n    '''\n    Find the maximum difference between any two elements of list a and b.\n    '''\n    i = 0\n    j = 0\n    max_diff = abs(a[0]-b[0])\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            max_diff = 0\n            i+=1\n            j+=1\n        elif abs(a[i]-b[j]) > max_diff:\n            max_diff = abs(a[i]-b[j])\n            print(max_diff)\n        elif abs(a[i]-b[j]) < max_diff:\n            j+=1\n        else:\n            i+=1\n    return max_diff\ndef find_sum_of_squares(a):\n    '''\n    Given a list of integers, return the sum of the squares of the elements, returned in ascending order.\n    '''\n    i = 0\n    sum = 0\n    while i < len(a):\n        sum+=a[i]**2\n        i+=1\n    return sum\ndef find_number_of_factors(n):\n    '''\n    Given an integer n, count the total number of ways you can write n as a product of two integers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    if n < 0:\n        return 0\n    if n == 2:\n        return 2\n    if n%2 == 0:\n        return 1 + find_number_of_factors(n/2)\n    if n%2!= 0:\n        return find_number_of_factors((n-1)/2) + 1\ndef find_perfect_squares(n):\n    '''\n    Given an integer n, find the sum of all the integers from 1 to n (inclusive) that are perfect squares.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return 1 + find_perfect_squares(n/2)\n    if n%2!= 0:\n        return find_perfect_squares((n-1)/2) + 1\ndef find_number_of_perfect_squares(n):\n    '''\n    Given an integer n, find the total number of perfect squares that exist up to and including n.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return 1 + find_number_of_perfect_squares(n/2)\n    if n%2!= 0:\n        return find_number_of_perfect_squares((n-1)/2) + 1\ndef find_largest_prime_factor(n):\n    '''\n    Given an integer n, find the largest prime factor of n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return i\n    return n\ndef find_factors(n):\n    '''\n    Given an integer n, count the total number of factors that n has.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return 1 + find_factors(n/2)\n    if n%2!= 0:\n        return find_factors((n-1)/2) + 1\ndef find_factors_of_n(n):\n    '''\n    Given an integer n, count the total number of integers from 1 to n (inclusive) that have exactly n factors.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return find_factors_of_n(n/2)\n    if n%2!= 0:\n        return find_factors_of_n((n-1)/2) + 1\ndef find_number_of_unique_factors(n):\n    '''\n    Given an integer n, count the number of unique factors that n has.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return find_number_of_unique_factors(n/2)\n    if n%2!= 0:\n        return find_number_of_unique_factors((n-1)/2) + 1\ndef find_n_divisors(n,divisor):\n    '''\n    Find the total number of divisors of an integer n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return find_n_divisors(n/2,divisor) + 1\n    if n%2!= 0:\n        return find_n_divisors((n-1)/2,divisor) + 1\ndef find_sum_of_divisors(n):\n    '''\n    Given an integer n, return the sum of the divisors of n, returned in ascending order.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return find_n_divisors(n/2,n)\n    if n%2!= 0:\n        return find_n_divisors((n-1)/2,n) + 1\ndef find_number_of_divisors(n):\n    '''\n    Given an integer n, count the total number of divisors that n has.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        retur"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    if n>len(heap):\n        return heap\n    else:\n        for j in range(n):\n            hq.heappop(heap)\n        return heap\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    if n>len(heap):\n        return heap\n    else:\n        for j in range(n):\n            hq.heappop(heap)\n        return heap\n    \ndef print_nth_element(nums,n):\n    '''\n    Write a function to find the nth element of a list, using the iterative method.\n    '''\n    i=0\n    j=0\n    for i in range(n):\n        for j in range(len(nums)):\n            if j==n:\n                return nums[j]\n                \ndef insert(a,b):\n    '''\n    Write a function that inserts a new node in a BST\n    '''\n    tree = BinarySearchTree()\n    tree.insert(a)\n    tree.insert(b)\n    return tree.root\n    \ndef insert_iterative(a,b):\n    '''\n    Write a function that inserts a new node in a BST\n    '''\n    tree = BinarySearchTree()\n    tree.insert_iterative(a)\n    tree.insert_iterative(b)\n    return tree.root\n    \ndef search(a,b):\n    '''\n    Write a function that searches for a node in a BST.\n    '''\n    tree = BinarySearchTree()\n    tree.insert(a)\n    tree.insert(b)\n    return tree.search(b)\n    \ndef search_iterative(a,b):\n    '''\n    Write a function that searches for a node in a BST.\n    '''\n    tree = BinarySearchTree()\n    tree.insert_iterative(a)\n    tree.insert_iterative(b)\n    return tree.search(b)\n    \ndef print_bst(root):\n    '''\n    Write a function to print the BST in inorder traversal\n    '''\n    if root:\n        print_bst(root.left)\n        print(root.val)\n        print_bst(root.right)\n    \ndef print_bst_iterative(root):\n    '''\n    Write a function to print the BST in inorder traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        while stack or curr:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                print(curr.val)\n                curr = curr.right\n                \ndef print_bst_pre_iterative(root):\n    '''\n    Write a function to print the BST in preorder traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        while stack or curr:\n            if curr:\n                print(curr.val)\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                curr = curr.right\n    \ndef print_bst_post_iterative(root):\n    '''\n    Write a function to print the BST in postorder traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        while stack or curr:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                print(curr.val)\n                curr = curr.right\n                \ndef print_bst_breadth_first(root):\n    '''\n    Write a function to print the BST in breadth first traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        stack.append(root)\n        while stack:\n            curr = stack.pop()\n            print(curr.val)\n            if curr.left:\n                stack.append(curr.left)\n            if curr.right:\n                stack.append(curr.right)\n    \ndef get_level_order_traversal(root):\n    '''\n    Write a function to print the BST in level order traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        stack.append(root)\n        level = []\n        while stack:\n            curr = stack.pop(0)\n            if curr.left:\n                stack.append(curr.left)\n            if curr.right:\n                stack.append(curr.right)\n            level.append(curr.val)\n        return level\n    \ndef get_level_order_traversal_iterative(root):\n    '''\n    Write a function to print the BST in level order traversal\n    '''\n    if root:\n        queue = []\n        curr = root\n        queue.append(curr)\n        level = []\n        while queue:\n            curr = queue.pop(0)\n            level.append(curr.val)\n            if curr.left:\n                queue.append(curr.left)\n            if curr.right:\n                queue.append(curr.right)\n        return level\n    \ndef get_pre_order_traversal(root):\n    '''\n    Write a function to print the BST in preorder traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        stack.append(root)\n        pre_order = []\n        while stack:\n            curr = stack.pop()\n            pre_order.append(curr.val)\n            if curr.right:\n                stack.append(curr.right)\n            if curr.left:\n                stack.append(curr.left)\n        return pre_order\n    \ndef get_in_order_traversal(root):\n    '''\n    Write a function to print the BST in inorder traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        stack.append(curr)\n        in_order = []\n        while stack:\n            curr = stack.pop()\n            if curr.left:\n                stack.append(curr.left)\n            in_order.append(curr.val)\n            if curr.right:\n                stack.append(curr.right)\n        return in_order\n    \ndef get_post_order_traversal(root):\n    '''\n    Write a function to print the BST in postorder traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        stack.append(curr)\n        post_order = []\n        while stack:\n            curr = stack.pop()\n            if curr.left:\n                stack.append(curr.left)\n            if curr.right:\n                stack.append(curr.right)\n            post_order.append(curr.val)\n        return post_order\n    \ndef get_minimum_element(root):\n    '''\n    Write a function to print the BST in preorder traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        min_ele = root.val\n        while stack or curr:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                if curr.val < min_ele:\n                    min_ele = curr.val\n                curr = curr.right\n        return min_ele\n    \ndef get_maximum_element(root):\n    '''\n    Write a function to print the BST in preorder traversal\n    '''\n    if root:\n        stack = []\n        curr = root\n        max_ele = root.val\n        while stack or curr:"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n        if len(h) > n:\n            hq.heappop(h)\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n        if len(h) > n:\n            hq.heappop(h)\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return [hq.heappop(nums) for _ in xrange(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    min_heap=[]\n    for num in nums:\n        hq.heappush(min_heap,num)\n    while len(min_heap)>n:\n        hq.heappop(min_heap)\n    return min_heap\n    \ndef find_smallest(nums):\n    smallest=nums[0]\n    smallest_index=0\n    for i in range(1,len(nums)):\n        if nums[i]<smallest:\n            smallest=nums[i]\n            smallest_index=i\n    return smallest_index\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums=sorted(nums,reverse=True)\n    print(nums[0:n])\n    return nums[0:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for num in nums:\n        if len(hq) < n:\n            hq.append(num)\n        else:\n            if hq[0] < num:\n                hq.remove(hq[0])\n                hq.append(num)\n    return hq[::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1)==0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    if x & (x-1) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x!= 0 and x & (x - 1) == 0\ndef is_Binary (x):\n    '''\n    Write a python function to check whether the given number is a binary number or not.\n    '''\n    return isinstance(x, int) and (0 <= x < pow(2, 32))\ndef count_bits(x):\n    '''\n    Write a python function to count the number of bits set in the given integer.\n    '''\n    return bin(x).count('1')\ndef bin_to_dec(x):\n    '''\n    Write a python function to convert a binary number into a decimal number.\n    '''\n    if not is_Binary(x):\n        raise ValueError('bin_to_dec: Not a binary number')\n    return sum([int(x) * pow(2, n) for n in range(0, 32)])\ndef dec_to_bin(x):\n    '''\n    Write a python function to convert a decimal number into a binary number.\n    '''\n    if not is_Decimal(x):\n        raise ValueError('dec_to_bin: Not a decimal number')\n    result = bin(x)\n    if result[-1] == '-':\n        result = result[:-1]\n    if result[-1] == 'b':\n        result = result[:-1]\n    return result\ndef is_Decimal(x):\n    '''\n    Write a python function to check whether the given number is a decimal number or not.\n    '''\n    return isinstance(x, int) and (0 <= x < pow(2, 32))\ndef is_octal(x):\n    '''\n    Write a python function to check whether the given number is octal number or not.\n    '''\n    return is_Decimal(x) and (0 <= x < pow(8, 32))\ndef octal_to_dec(x):\n    '''\n    Write a python function to convert an octal number into a decimal number.\n    '''\n    if not is_octal(x):\n        raise ValueError('octal_to_dec: Not an octal number')\n    result = 0\n    for i, n in enumerate(x):\n        if n == '0':\n            n = 0\n        else:\n            n = 1\n        result += n * pow(8, 31 - i)\n    return result\ndef dec_to_octal(x):\n    '''\n    Write a python function to convert a decimal number into an octal number.\n    '''\n    if not is_Decimal(x):\n        raise ValueError('dec_to_octal: Not a decimal number')\n    result = ''\n    while x:\n        result = str(x % 8) + result\n        x = x // 8\n    return result\ndef is_hexadecimal(x):\n    '''\n    Write a python function to check whether the given number is hexadecimal number or not.\n    '''\n    return is_Decimal(x) and (0 <= x < pow(16, 32))\ndef hex_to_dec(x):\n    '''\n    Write a python function to convert a hexadecimal number into a decimal number.\n    '''\n    if not is_hexadecimal(x):\n        raise ValueError('hex_to_dec: Not a hexadecimal number')\n    result = 0\n    for i, n in enumerate(x):\n        if n == '0':\n            n = 0\n        else:\n            n = ord(n) - ord('0') + 1\n        result += n * pow(16, 31 - i)\n    return result\ndef dec_to_hex(x):\n    '''\n    Write a python function to convert a decimal number into a hexadecimal number.\n    '''\n    if not is_Decimal(x):\n        raise ValueError('dec_to_hex: Not a decimal number')\n    result = ''\n    while x:\n        result = chr(x % 16 + ord('0')) + result\n        x = x // 16\n    return result\ndef is_Base_N(x, base):\n    '''\n    Write a python function to check whether the given number is a base number or not.\n    '''\n    if not isinstance(base, int) or not (1 <= base <= 36):\n        raise ValueError('is_Base_N: Not a valid base')\n    return isinstance(x, int) and (0 <= x < pow(base, 32))\ndef dec_to_Base_N(x, base):\n    '''\n    Write a python function to convert a decimal number into a base number.\n    '''\n    if not is_Decimal(x):\n        raise ValueError('dec_to_Base_N: Not a decimal number')\n    if not is_Base_N(base, 10):\n        raise ValueError('dec_to_Base_N: Base not in [10, 36]')\n    result = ''\n    while x:\n        result = str(x % base) + result\n        x = x // base\n    return result\ndef Base_N_to_dec(x, base):\n    '''\n    Write a python function to convert a base number into a decimal number.\n    '''\n    if not is_Base_N(x, base):\n        raise ValueError('Base_N_to_dec: Not a valid base number')\n    result = 0\n    for i, n in enumerate(x):\n        if n == '0':\n            n = 0\n        else:\n            n = ord(n) - ord('0')\n        result += n * pow(base, 31 - i)\n    return result\ndef is_Base_N_Power_Of_Two(x, base):\n    '''\n    Write a python function to check whether the given number is a base number with power of 2 or not.\n    '''\n    if not is_Decimal(x):\n        raise ValueError('is_Base_N_Power_Of_Two: Not a decimal number')\n    if not is_Base_N(base, 2):\n        raise ValueError('is_Base_N_Power_Of_Two: Base not in [2, 36]')\n    return is_Power_Of_Two(x)\ndef Base_N_Power_Of_Two_To_dec(x, base):\n    '''\n    Write a python function to convert a base number with power of 2 into a decimal number.\n    '''\n    if not is_Base_N_Power_Of_Two(x, base):\n        raise ValueError('Base_N_Power_Of_Two_To_dec: Not a base number with power of 2')\n    result = 0\n    for i, n in enumerate(x):\n        if n == '0':\n            n = 0\n        else:\n            n = 1\n        result += n * pow(base, 31 - i)\n    return result\ndef is_Base_N_Power_Of_Three(x, base):\n    '''\n    Write a python function to check whether the given number is a base number with power of 3 or not.\n    '''\n    if not is_Decimal(x):\n        raise ValueError('is_Base_N_Power_Of_Three: Not a decimal number')\n    if not is_Base_N(base, 3):\n        raise ValueError('is_Base_N_Power_Of_Three: Base not in [3, 27]')\n    return is_Power_Of_Three(x)\ndef Base_N_Power_Of_Three_To_dec(x, base):\n    '''\n    Write a python function to convert a base number with power of 3 into a decimal number.\n    '''\n    if not is_Base_N_Power_Of_Three(x, base):\n        raise ValueError('Base_N_Power_Of_Three_To_dec: Not a base number with power of 3')\n    result = 0\n    for i, n in enumerate(x):\n        if n == '0':\n            n = 0\n        else:\n            n = 1\n        result += n * pow(base, 31 - i)\n    return result\ndef is_Base_N_Power_Of_Four(x, base):\n    '''\n    Write a python function to check whether the given number is a base number with power of 4 or not.\n    '''\n    if not is_Decimal(x):\n        raise ValueError('is_Base_N_Power_Of_Four: Not a decimal number')\n    if not is"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Approach-1\n    return (x & (x-1) == 0)\n    \n    # Approach-2\n    # b = bin(x)\n    # i = b.find(\"1\")\n    # if i == -1:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)\ndef find_char_long2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}', text)\ndef find_char_long3(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text)\ndef find_char_long4(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.IGNORECASE)\ndef find_char_long5(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.I)\ndef find_char_long6(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.S)\ndef find_char_long7(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.X)\ndef find_char_long8(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M)\ndef find_char_long9(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.I)\ndef find_char_long10(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long11(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long12(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long13(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long14(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long15(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long16(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long17(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long18(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long19(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long20(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long21(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long22(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long23(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long24(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long25(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long26(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long27(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long28(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long29(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text, flags=re.M|re.S)\ndef find_char_long30(text):\n    '''\n    Write a function to find all words which are at least 4 characters lon"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    match = re.findall(r'[^\\s]+',text)\n    print match\n    return match\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # pass\n    pattern = re.compile('\\w{4,}')\n    ans = pattern.findall(text)\n    # print(ans)\n    return ans\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) == 0:\n        return 0\n    pattern = re.compile(r'\\w{4,}')\n    match = pattern.findall(text)\n    return len(match)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    match_list = []\n    for word in text.split():\n        if len(word) >= 4:\n            match_list.append(word)\n    print match_list\n    return match_list\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w+', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    lst = []\n    \n    for word in text.split():\n        if len(word) >= 4:\n            lst.append(word)\n    return lst\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [x for x in text.split() if len(x)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\w{4,}', text)\n    return words\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # nums = [2, 3, 4, 5]\n    # result = [4, 9, 16, 25]\n    \n    return [num**2 for num in nums]\n    \ndef neg_nums(nums):\n    '''\n    Write a function to find negative numbers in a list.\n    '''\n    # nums = [2, 3, 4, 5]\n    # result = [3, -1, -4, -9]\n    \n    return [num for num in nums if num < 0]\n    \ndef div_by_7(nums):\n    '''\n    Write a function to find all numbers divisible by 7.\n    '''\n    # nums = [2, 3, 4, 5, 7]\n    # result = [2, 3, 4, 5]\n    \n    return [num for num in nums if num % 7 == 0]\n    \ndef vowels(string):\n    '''\n    Write a function to find vowels in a string.\n    '''\n    # string = 'Python'\n    # result = ['o', 'o', 'o']\n    \n    return [char for char in string if char in 'aeiou']\n    \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    # n = 5\n    # result = 120\n    \n    return reduce(lambda x, y: x * y, range(1, n+1))\n    \ndef common_items(a, b):\n    '''\n    Write a function to find common items in two lists.\n    '''\n    # a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    # b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    # result = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    \n    return list(set(a).intersection(b))\n    \ndef closest_num(num, nums):\n    '''\n    Write a function to find the closest number to a given number.\n    '''\n    # num = 7\n    # result = 6\n    \n    return min(nums, key=lambda x: abs(x - num))\n    \ndef best_list_pureness(k, l):\n    '''\n    Write a function to find the best pureness for a list with a number of elements.\n    '''\n    # k = 4\n    # l = [4, -1, -7, 10, 3, 8, 8, 4, -5, -9, -5, -3]\n    # result = 42\n    \n    best = 0\n    best_elem = None\n    \n    for elem in permutations(l, k):\n        pureness = sum(elem)\n        if pureness > best:\n            best = pureness\n            best_elem = elem\n    \n    return best, list(best_elem)\n    \ndef product_of_all(string):\n    '''\n    Write a function to find product of all numbers in a string.\n    '''\n    # string = '234'\n    # result = 234\n    \n    return reduce(lambda x, y: x * y, [int(char) for char in string])\n    \ndef words_with_repetition(string):\n    '''\n    Write a function to find words with repetition in a string.\n    '''\n    # string = 'Python is awesome'\n    # result = ['is', 'Python', 'awesome']\n    \n    return [item for item in set([word for word in string.split() if string.count(word) > 1])]\n    \ndef is_beautiful(string):\n    '''\n    Write a function to check if a string is beautiful or not.\n    '''\n    # string = '1222311'\n    # result = True\n    \n    return all([len(set(string[i:i+2])) == 1 for i in range(len(string)-1)])\n    \ndef is_interesting(string):\n    '''\n    Write a function to check if a string is interesting or not.\n    '''\n    # string = 'aba'\n    # result = True\n    \n    return all([char!= 'a' for char in string])\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    # string = 'abcdcba'\n    # result = True\n    \n    return string == string[::-1]\n    \ndef is_pandigital(string):\n    '''\n    Write a function to check if a string is a pandigital number or not.\n    '''\n    # string = '123456789'\n    # result = True\n    \n    return all([len(set(string)) == 9, sum([int(char) for char in string]) == 45])\n    \ndef make_string_list(string):\n    '''\n    Write a function to make a list of characters in a string.\n    '''\n    # string = 'Hello'\n    # result = ['H', 'e', 'l', 'l', 'o']\n    \n    return [char for char in string]\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    # num = 7\n    # result = True\n    \n    return all([num % i!= 0 for i in range(2, num)])\n    \ndef is_odd(num):\n    '''\n    Write a function to check if a number is odd or not.\n    '''\n    # num = 5\n    # result = True\n    \n    return num % 2!= 0\n    \ndef sum_of_digits(num):\n    '''\n    Write a function to calculate the sum of digits of a number.\n    '''\n    # num = 123\n    # result = 6\n    \n    return sum([int(char) for char in str(num)])\n    \ndef is_even(num):\n    '''\n    Write a function to check if a number is even or not.\n    '''\n    # num = 9\n    # result = True\n    \n    return num % 2 == 0\n    \ndef is_a_perfect_square(num):\n    '''\n    Write a function to check if a number is perfect square or not.\n    '''\n    # num = 16\n    # result = True\n    \n    return all([num % int(math.sqrt(num)) == 0, int(math.sqrt(num)) * int(math.sqrt(num)) == num])\n    \ndef is_perfect_square(num):\n    '''\n    Write a function to check if a number is perfect square or not.\n    '''\n    # num = 16\n    # result = True\n    \n    return all([num % int(math.sqrt(num)) == 0, int(math.sqrt(num)) * int(math.sqrt(num)) == num])\n    \ndef is_perfect_square(num):\n    '''\n    Write a function to check if a number is perfect square or not.\n    '''\n    # num = 16\n    # result = True\n    \n    return all([num % int(math.sqrt(num)) == 0, int(math.sqrt(num)) * int(math.sqrt(num)) == num])\n    \ndef invert_string(string):\n    '''\n    Write a function to invert a string.\n    '''\n    # string = 'python'\n    # result = 'nohty'\n    \n    return ''.join([char for char in string[::-1]])\n    \ndef is_a_pangram(string):\n    '''\n    Write a function to check if a string is a pangram or not.\n    '''\n    # string = 'The quick brown fox jumps over the lazy dog'\n    # result = True\n    \n    return all([char in string.lower() for char in 'abcdefghijklmnopqrstuvwxyz'])\n    \ndef is_a_panagram(string):\n    '''\n    Write a function to check if a string is a panagram or not.\n    '''\n    # string = 'The quick brown fox jumps over the lazy dog'\n    # result = True\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i] * nums[i])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i]**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Squared list\n    squares = []\n    # Squared element for every element\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return map(lambda x: x ** 2, nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sqr_nums = [num ** 2 for num in nums]\n    return sqr_nums\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = -1\n    if len(str) < 2:\n        return rotations\n    elif str[0] == str[len(str)-1]:\n        rotations = 1\n    else:\n        for i in range(1,len(str)):\n            if str[i-1] == str[len(str)-1-i]:\n                rotations += 1\n            else:\n                break\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2: \n        return 0\n    start = 0 \n    end = len(str) - 1 \n    while start < end: \n        if str[start] == str[end]: \n            start += 1\n            end -= 1\n        else: \n            return 1 + find_Rotations(str[start:end])\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #str = \"abcab\"\n    #print (rotate(str, 3))\n    rotate(str, 3)\n    \ndef rotate(str, n):\n    for i in range(n):\n        print (str[-1] + str[:-1])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    #taking the string as input.\n    s = str\n    l = len(s)\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if s[i:j] == s[j:k] and j-i > 0:\n                    return j-i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    len_str = len(str)\n    if len_str == 0:\n        return 0\n    if len_str == 1:\n        return 0\n    if len_str == 2:\n        if str[0]!= str[1]:\n            return 1\n        else:\n            return 0\n    if len_str == 3:\n        if str[0] == str[2]:\n            return 0\n        else:\n            if str[1] == str[2]:\n                return 1\n            else:\n                return 2\n    \n    start = str[0]\n    start_i = 0\n    min_rot = len_str\n    rot_str = ''\n    for i in range(1, len_str):\n        if str[i]!= start:\n            curr_rot = i - start_i\n            if curr_rot < min_rot:\n                min_rot = curr_rot\n                rot_str = str[start_i:start_i+min_rot]\n            start = str[i]\n            start_i = i\n    curr_rot = len_str - start_i\n    if curr_rot < min_rot:\n        min_rot = curr_rot\n        rot_str = str[start_i:start_i+min_rot]\n    return min_rot\n    \ndef get_next_index(str, index):\n    '''\n    Write a python function to get the next index of the string.\n    '''\n    if index < len(str)-1:\n        return index+1\n    return 0\n    \ndef find_Rotations2(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    len_str = len(str)\n    if len_str == 0:\n        return 0\n    if len_str == 1:\n        return 0\n    if len_str == 2:\n        if str[0]!= str[1]:\n            return 1\n        else:\n            return 0\n    if len_str == 3:\n        if str[0] == str[2]:\n            return 0\n        else:\n            if str[1] == str[2]:\n                return 1\n            else:\n                return 2\n    \n    curr_str = str\n    curr_rot = len_str\n    curr_index = 0\n    while curr_index < len_str:\n        next_index = get_next_index(curr_str, curr_index)\n        next_str = curr_str[curr_index:next_index]\n        curr_rot = min(curr_rot, len_str-next_index)\n        if curr_str == next_str:\n            break\n        curr_str = next_str\n        curr_index = next_index\n    return curr_rot\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    str_len = len(str)\n    if str_len == 0:\n        return 0\n    elif str_len == 1:\n        return 0\n    elif str_len == 2:\n        return 0 if str[0] == str[1] else 1\n    \n    result = []\n    for i in range(str_len):\n        result.append(str[i:] + str[:i])\n    \n    min_count = str_len\n    for i in range(len(result)):\n        for j in range(len(result) - i - 1):\n            if result[i] == result[j + i + 1]:\n                min_count = min(min_count, j + i + 1)\n    return min_count\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(1,n):\n        if str[i:] == str[i:][::-1]:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    N = len(str)\n    if N==0:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Write your code here\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def isRotated(str1, str2):\n        if len(str1)!= len(str2):\n            return False\n        return str1 in str2 + str2\n    \n    def find_rotations(str):\n        min_num_rotations = len(str)\n        for i in xrange(1, len(str)):\n            if isRotated(str[i:], str[:i]):\n                min_num_rotations = min(min_num_rotations, i)\n        return min_num_rotations\n    return find_rotations(str)\n    \ndef find_Rotation"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #An optimal solution will be the number of characters in the string\n    #We can assume that the string is not empty and will always have equal characters\n    length = len(str)\n    if length == 1:\n        return 0\n    else:\n        first = str[0]\n        rotation_count = 0\n        for i in range(1,length):\n            if first == str[i]:\n                rotation_count = rotation_count + 1\n        return rotation_count\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '')\n        s = s.replace(ch, '')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pos1 = s.find(ch)\n    pos2 = s.rfind(ch)\n    return s[:pos1] + s[pos2+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n    \n    \ndef get_input():\n    '''\n    Write a python function to get the input from the user.\n    '''\n    \n    #Enter any input you want and press enter\n    #Use raw_input() if you need to get the input from the user\n    \n    string = raw_input(\"Enter the string: \")\n    #string = raw_input()\n    return string\n    \n    \ndef print_output(s):\n    '''\n    Write a python function to print the output to the console.\n    '''\n    \n    #print the string to console\n    #Use print() if you need to print the output to the console\n    \n    print s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if s[0] == ch:\n        del s[0]\n    if s[-1] == ch:\n        del s[-1]\n    return ''.join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        s=s.replace(ch, \"\")\n        s=s[:-1]\n        s=s[1:]\n        return s\n    except:\n        return False\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,\"\")\n    s = s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)==1:\n        return s[0:s.index(ch)]+s[s.index(ch)+1:]\n    return s\n    \ndef remove_Occ_2(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.index(ch)]+s[s.index(ch)+1:]\n    \ndef my_max_1(L):\n    '''\n    Write a python function that returns the max element of a list.\n    '''\n    return max(L)\n    \ndef my_max_2(L):\n    '''\n    Write a python function that returns the max element of a list.\n    '''\n    m = L[0]\n    for x in L:\n        if x>m:\n            m=x\n    return m\n    \ndef my_min_1(L):\n    '''\n    Write a python function that returns the min element of a list.\n    '''\n    return min(L)\n    \ndef my_min_2(L):\n    '''\n    Write a python function that returns the min element of a list.\n    '''\n    m = L[0]\n    for x in L:\n        if x<m:\n            m=x\n    return m\n    \ndef my_sum_1(L):\n    '''\n    Write a python function that returns the sum of all elements in a list.\n    '''\n    return sum(L)\n    \ndef my_sum_2(L):\n    '''\n    Write a python function that returns the sum of all elements in a list.\n    '''\n    s = 0\n    for x in L:\n        s = s + x\n    return s\n    \ndef my_mean_1(L):\n    '''\n    Write a python function that returns the mean of all elements in a list.\n    '''\n    return sum(L)/len(L)\n    \ndef my_mean_2(L):\n    '''\n    Write a python function that returns the mean of all elements in a list.\n    '''\n    s = 0\n    for x in L:\n        s = s + x\n    return s/len(L)\n    \ndef my_median_1(L):\n    '''\n    Write a python function that returns the median of all elements in a list.\n    '''\n    # all three median functions return the median of the list\n    if len(L)%2==1:\n        return my_median_2(L)\n    else:\n        return (my_median_1(L[0:len(L)/2])+my_median_1(L[len(L)/2:]))/2\n    \ndef my_median_2(L):\n    '''\n    Write a python function that returns the median of all elements in a list.\n    '''\n    s = 0\n    for x in L:\n        s = s + x\n    if len(L)%2==1:\n        return s/len(L)\n    else:\n        return (s/2)/len(L)\n    \ndef my_mode_1(L):\n    '''\n    Write a python function that returns the mode of all elements in a list.\n    '''\n    count = {}\n    for x in L:\n        count[x] = count.get(x,0)+1\n    return max(count, key=lambda x: count[x])\n    \ndef my_mode_2(L):\n    '''\n    Write a python function that returns the mode of all elements in a list.\n    '''\n    count = {}\n    for x in L:\n        count[x] = count.get(x,0)+1\n    mode = max(count, key=count.get)\n    return mode\n    \ndef my_variance_1(L):\n    '''\n    Write a python function that returns the variance of all elements in a list.\n    '''\n    N = len(L)\n    m = my_mean_1(L)\n    return sum((x-m)**2 for x in L)/N\n    \ndef my_variance_2(L):\n    '''\n    Write a python function that returns the variance of all elements in a list.\n    '''\n    N = len(L)\n    m = my_mean_2(L)\n    return sum((x-m)**2 for x in L)/N\n    \ndef my_std_dev_1(L):\n    '''\n    Write a python function that returns the standard deviation of all elements in a list.\n    '''\n    return my_variance_1(L)**0.5\n    \ndef my_std_dev_2(L):\n    '''\n    Write a python function that returns the standard deviation of all elements in a list.\n    '''\n    return my_variance_2(L)**0.5\n    \ndef my_map_1(L,f):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    return [f(x) for x in L]\n    \ndef my_map_2(L,f):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    s = []\n    for x in L:\n        s.append(f(x))\n    return s\n    \ndef my_reduce_1(L,f):\n    '''\n    Write a python function that applies the function f to the list L,\n    starting with an initial value and then reducing it to a single value.\n    '''\n    return reduce(f,L)\n    \ndef my_reduce_2(L,f):\n    '''\n    Write a python function that applies the function f to the list L,\n    starting with an initial value and then reducing it to a single value.\n    '''\n    s = L[0]\n    for x in L[1:]:\n        s = f(s,x)\n    return s\n    \ndef my_pow_1(x,y):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    return x**y\n    \ndef my_pow_2(x,y):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    return x**y\n    \ndef my_sqrt_1(x):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    return x**0.5\n    \ndef my_sqrt_2(x):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    return x**0.5\n    \ndef my_binom_1(n,k):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    if k>n:\n        return 0\n    p = 1\n    for i in range(k):\n        p = p*(n-i)\n    return p\n    \ndef my_binom_2(n,k):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    if k>n:\n        return 0\n    p = 1\n    for i in range(k):\n        p = p*(n-i)\n    return p\n    \ndef my_comb_1(n,k):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    if k>n:\n        return 0\n    p = 1\n    for i in range(k):\n        p = p*(n-i)\n    return p\n    \ndef my_comb_2(n,k):\n    '''\n    Write a python function that returns the result of applying the function f to every element in the list L.\n    '''\n    if k>n:\n        return 0\n    p = 1\n    for i in range(k):\n        p = p*(n-i)\n    return p\n    "
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        s=s.replace(ch,\"\")\n        s=s[1:len(s)-1]\n    return s\ndef Remove_repeat(s): \n    '''\n    Write a python function to remove the consecutive occurrence of a given character in a given string\n    '''\n    for ch in s: \n        if ch in s[0:len(s)-1]: \n            s=s.replace(ch,\"\")\n    return s\ndef Remove_consec(s): \n    '''\n    Write a python function to remove consecutive duplicates in the given string\n    '''\n    s=s.replace(s[0]*2,\"\")\n    return s\ndef Replace_consec(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)-1): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_2(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    i=0\n    while i<len(s): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n        i+=1\n    return s\ndef Replace_consec_3(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_4(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_5(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_6(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    i=0\n    while i<len(s): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n        i+=1\n    return s\ndef Replace_consec_7(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_8(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_9(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_10(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_11(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_12(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_13(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_14(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_15(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_16(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_17(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_18(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_19(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_20(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_21(s): \n    '''\n    Write a python function to replace consecutive duplicates in the given string\n    '''\n    for i in range(0,len(s)): \n        if s[i]==s[i+1]: \n            s=s.replace(s[i]+s[i],\"\")\n    return s\ndef Replace_consec_22(s): \n    '''\n    Write a python function to replace consecutive duplicates in the give"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    c = s.find(ch)\n    return s[:c] + s[c+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s[0:s.index(ch)]+s[s.rindex(ch)+1:]\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if not M:\n        return\n    i, j = 0, len(M[0]) - 1\n    while i < len(M) and j >= 0:\n        curr_row = sum(M[i])\n        if curr_row > M[j][j]:\n            i += 1\n        else:\n            j -= 1\n    m, n = len(M), len(M[0])\n    # swap\n    M[m-1], M[j] = M[j], M[m-1]\n    # reverse\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if i < j:\n                M[i][j], M[j][i] = M[j][i], M[i][j]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if M[j][i] > M[j+1][i]:\n                M[j][i], M[j+1][i] = M[j+1][i], M[j][i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    row_sum = [sum(M[i]) for i in range(n)]\n    res = []\n    for i in range(n):\n        res.append([row_sum[i], M[i]])\n    res.sort()\n    return [r[1] for r in res]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M)-1):\n            if M[i][j]>M[i][j+1]:\n                M[i][j],M[i][j+1]=M[i][j+1],M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp = [sum(x) for x in M]\n    temp.sort()\n    return temp\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        smallest_pos = i\n        for j in range(i+1, len(M)):\n            if sum(M[smallest_pos]) > sum(M[j]):\n                smallest_pos = j\n        temp = M[i]\n        M[i] = M[smallest_pos]\n        M[smallest_pos] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M[0])\n    for i in xrange(n):\n        M[0][i] += M[1][i]\n    \n    for i in xrange(2, n):\n        for j in xrange(n):\n            M[i][j] += M[i-1][j]\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        for j in range(N - 1):\n            if M[i][j] > M[i][j + 1]:\n                temp = M[i][j]\n                M[i][j] = M[i][j + 1]\n                M[i][j + 1] = temp\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 0.5*l*b*h\n    print (\"Volume of the triangle is \",Volume)\n    \ndef find_Area(b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    Area = b*h\n    print (\"Area of the triangle is \",Area)\n    \ndef find_Perimeter(b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    Perimeter = 2*(b+h)\n    print (\"Perimeter of the triangle is \",Perimeter)\n    \ndef isosceles_triangle(a,b,c) : \n    '''\n    Write a python function to check if a triangle is isosceles or not.\n    '''\n    if a==b==c :\n        print(\"It is an isosceles triangle\")\n    else : \n        print(\"It is not an isosceles triangle\")\n        \ndef scalene_triangle(a,b,c) : \n    '''\n    Write a python function to check if a triangle is scalene or not.\n    '''\n    if a==b or b==c or c==a :\n        print(\"It is a scalene triangle\")\n    else : \n        print(\"It is a scalene triangle\")\n        \ndef isosceles_triangle_or_rectangle(a,b,c) : \n    '''\n    Write a python function to check if a triangle is isosceles or not.\n    '''\n    if a==b or b==c or c==a :\n        print(\"It is an isosceles triangle\")\n    else : \n        print(\"It is a scalene triangle\")\n        \ndef rectangle_triangle(a,b) : \n    '''\n    Write a python function to check if a rectangle is a triangle or not.\n    '''\n    if a==b :\n        print(\"It is a rectangle\")\n    else : \n        print(\"It is a scalene triangle\")\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 1/3 * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return h*l*b/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 1/3 * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l*b\n    return (a*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*b*h)/3.0\n    print v\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if (b <= 0) or (h <= 0) or (b > h) :\n        return 0\n    return (b*h)/3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    import re\n    return len(re.findall(\"[a-z]+_[a-z]+\",text))>0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]*_[a-z]*', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_dash(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of letters separated by hyphens and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_semicolon(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of semicolons and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_colon(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of colons and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_hashtag(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of hash characters and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_dots(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of dots and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_slash(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of slashes and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_exclamation(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of exclamation points and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_at(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of the following symbols before an @ symbol and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_dollar(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of the following symbols before a dollar symbol and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_percent(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of the following symbols before a percent sign and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_ascii(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of ascii characters and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_question(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of the following symbols before a question mark and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_paren(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of parentheses and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_at_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of the following symbols before an @ symbol and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_hash_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of hash characters and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_dot_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of the following symbols before a dot symbol and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_slash_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of slash characters and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_exclamation_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of exclamation points and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_at_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of the following symbols before an @ symbol and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_dot_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of dot characters and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_slash_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of slash characters and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_exclamation_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of exclamation points and false otherwise.\n    '''\n    text=text.lower()\n    text=re.sub('[^a-z]','',text)\n    if text=='':\n        return True\n    else:\n        return False\ndef text_at_symbol(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of the following symbols before an @ symbol and false otherwise.\n    ''"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'^[a-z]+_[a-z]+$', text))\ndef text_alphanumeric(text):\n    '''\n    Write a function to that returns true if the input string contains only alphanumeric characters and false otherwise.\n    '''\n    return bool(re.search(r'^[a-zA-Z0-9]+$', text))\ndef text_alphabet(text):\n    '''\n    Write a function that accepts a string and returns true if every character in the string is in the alphabet and false otherwise.\n    '''\n    return bool(re.search(r'^[a-z]+$', text))\ndef text_caesar(text):\n    '''\n    Write a function that accepts a string, encodes the string using Caesar cipher, and returns the encoded string.\n    '''\n    return text.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ','NOPQRSTUVWXYZABCDEFGHIJKLM'))\ndef text_encrypt_caesar(text, shift):\n    '''\n    Write a function that accepts a string and an integer shift value, and returns a encoded string using Caesar cipher.\n    '''\n    return text_caesar(text)\ndef text_decrypt_caesar(text, shift):\n    '''\n    Write a function that accepts a string and an integer shift value, and returns a decoded string using Caesar cipher.\n    '''\n    return text_caesar(text)[shift:] + text_caesar(text)[:shift]\ndef text_encrypt_vigenere(text, key):\n    '''\n    Write a function that accepts a string and a string key, and returns a encoded string using Vigenere cipher.\n    '''\n    return text.translate(str.maketrans(key, key * (len(text) // len(key) + 1)))\ndef text_decrypt_vigenere(text, key):\n    '''\n    Write a function that accepts a string and a string key, and returns a decoded string using Vigenere cipher.\n    '''\n    return text.translate(str.maketrans(key, key * (len(text) // len(key) + 1)[::-1]))\ndef text_encrypt_bigram(text, key):\n    '''\n    Write a function that accepts a string and a string key, and returns a encoded string using Bigram Cipher.\n    '''\n    text = text.replace(' ', '')\n    temp = ''\n    for i in range(len(text)):\n        temp += text[i]\n        if i < len(text) - 1:\n            temp += key[(i % len(key))]\n    return temp\ndef text_decrypt_bigram(text, key):\n    '''\n    Write a function that accepts a string and a string key, and returns a decoded string using Bigram Cipher.\n    '''\n    text = text.replace(' ', '')\n    temp = ''\n    for i in range(len(text)):\n        temp += text[i]\n        if i < len(text) - 1:\n            temp += key[(i % len(key))]\n    return temp\ndef text_transpose(text, n):\n    '''\n    Write a function that accepts a string and a positive integer n, and returns a string with each character transposed to n positions. For example, text_transpose('hello', 4) would return 'llohe'\n    '''\n    return text[n:] + text[:n]\ndef text_decrypt_transpose(text, n):\n    '''\n    Write a function that accepts a string and a positive integer n, and returns a decoded string with each character transposed to n positions. For example, text_transpose('hello', 4) would return 'llohe'\n    '''\n    return text_transpose(text, n)[n:] + text_transpose(text, n)[:n]\ndef text_str_mix_up(a, b):\n    '''\n    Write a function that accepts two strings a and b and returns a string with the first character of a and the first character of b swapped, the second character of a and the second character of b swapped, etc. So if the input is 'alphabet' and 'foo' the output would be 'foobar'\n    '''\n    return b[0] + a[1:] + a[0] + b[1:]\ndef text_mix_up(text):\n    '''\n    Write a function that accepts a string and returns a string with each word reversed.\n    '''\n    return''.join([text_str_mix_up(x, x[::-1]) for x in text.split(' ')])\ndef text_in_word(text, word):\n    '''\n    Write a function that accepts a string and returns true if the word is in the string, and false otherwise.\n    '''\n    return bool(re.search(r'\\b' + word + r'\\b', text))\ndef text_two_words(text, word1, word2):\n    '''\n    Write a function that accepts a string and two words, and returns true if the words are in the string, and false otherwise.\n    '''\n    return bool(re.search(r'\\b' + word1 + r'\\b' + r'\\b' + word2 + r'\\b', text))\ndef text_sort_word(text, word):\n    '''\n    Write a function that accepts a string and a word and returns the word with the smallest ASCII value, if two words have the same ASCII value, return the word that comes first.\n    '''\n    word_list = list(word)\n    word_list.sort()\n    return ''.join(word_list)\ndef text_sort_words(text, words):\n    '''\n    Write a function that accepts a string and a list of words, and returns the words with the smallest ASCII values in alphabetical order, separated by spaces.\n    '''\n    return''.join([text_sort_word(text, word) for word in words])\ndef text_replace(text, old, new):\n    '''\n    Write a function that accepts a string and two strings, old and new, and returns the string with old replaced by new.\n    '''\n    return text.replace(old, new)\ndef text_filter_words(text, words):\n    '''\n    Write a function that accepts a string and a list of words, and returns the list with words that appear in the string.\n    '''\n    return [x for x in words if re.search(r'\\b' + x + r'\\b', text)]\ndef text_index_words(text, words):\n    '''\n    Write a function that accepts a string and a list of words, and returns the list with words that appear in the string, in alphabetical order.\n    '''\n    return sorted(text_filter_words(text, words))\ndef text_concatenate(text, words):\n    '''\n    Write a function that accepts a string and a list of words, and returns the string with words concatenated with a space in between.\n    '''\n    return''.join(words)\ndef text_insert_words(text, words, index):\n    '''\n    Write a function that accepts a string and a list of words, and inserts a space in between each word. The index is the location of the space. The space is to the left of the word.\n    '''\n    return''.join([text[:index], x, text[index:]])\ndef text_reorder_words(text, words):\n    '''\n    Write a function that accepts a string and a list of words, and returns a string with the words reordered according to their length.\n    '''\n    return''.join(sorted(words, key=len))\ndef text_reverse_words(text):\n    '''\n    Write a function that accepts a string and returns a string with all the words reversed.\n    '''\n    return''.join([x[::-1] for x in text.split(' ')])\ndef text_count_words(text, words):\n    '''\n    Write a function that accepts a string and a list of words, and returns the number of times each word appears in the string.\n    '''\n    return sum([text.count(x) for x in words])\ndef text_index_char(text, char):\n    '''\n    Write a function tha"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.islower()\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall('[a-z]{2}_[a-z]{2}', text)) > 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(\"[a-z]{2}_[a-z]+\", text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    while True:\n        index = re.search('_+',text)\n        if index == None:\n            return True\n        else:\n            if index.start() == 0:\n                text = text[index.end():]\n            else:\n                text = text[:index.start() - 1] + text[index.end():]\n    return False\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function that returns the perimeter of a triangle given the length of its\n    base and height as inputs.\n    '''\n    return b+h+b\n    \ndef rectangle_perimeter(a,b):\n    '''\n    Write a function that returns the perimeter of a rectangle given its width and height\n    as inputs.\n    '''\n    return 2*(a+b)\n    \ndef rectangle_area(a,b):\n    '''\n    Write a function that returns the area of a rectangle given its width and height as\n    input.\n    '''\n    return a*b\n    \ndef circle_perimeter(r):\n    '''\n    Write a function that returns the perimeter of a circle given its radius as input.\n    '''\n    return 2*math.pi*r\n    \ndef circle_area(r):\n    '''\n    Write a function that returns the area of a circle given its radius as input.\n    '''\n    return math.pi*r*r\n    \ndef square_round_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square rounded up to the nearest\n    integer given its side length as input.\n    '''\n    return round((a*4)**(1/2))\n    \ndef square_round_area(a):\n    '''\n    Write a function that returns the area of a square rounded up to the nearest integer\n    given its side length as input.\n    '''\n    return (a**2)**(1/2)\n    \ndef triangle_round_perimeter(b,h):\n    '''\n    Write a function that returns the perimeter of a triangle rounded up to the nearest\n    integer given the length of its base and height as inputs.\n    '''\n    return round((b+h)**(1/2))\n    \ndef triangle_round_area(b,h):\n    '''\n    Write a function that returns the area of a triangle rounded up to the nearest integer\n    given the length of its base and height as inputs.\n    '''\n    return (b*h)**(1/2)\n    \ndef rectangle_round_perimeter(a,b):\n    '''\n    Write a function that returns the perimeter of a rectangle rounded up to the nearest\n    integer given its width and height as inputs.\n    '''\n    return round((a+b)**(1/2))\n    \ndef rectangle_round_area(a,b):\n    '''\n    Write a function that returns the area of a rectangle rounded up to the nearest integer\n    given its width and height as inputs.\n    '''\n    return (a*b)**(1/2)\n    \ndef circle_round_perimeter(r):\n    '''\n    Write a function that returns the perimeter of a circle rounded up to the nearest integer\n    given its radius as input.\n    '''\n    return round(2*math.pi*r)\n    \ndef circle_round_area(r):\n    '''\n    Write a function that returns the area of a circle rounded up to the nearest integer\n    given its radius as input.\n    '''\n    return round(math.pi*r*r)\n    \ndef is_triangle(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return a==b==c\n    \ndef is_rectangle(a,b):\n    '''\n    Write a function that returns True if the two sides of a rectangle are equal,\n    False otherwise.\n    '''\n    return a==b\n    \ndef is_equal(a,b):\n    '''\n    Write a function that returns True if two numbers are equal, False otherwise.\n    '''\n    return a==b\n    \ndef is_right_angle(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are right-angled,\n    False otherwise.\n    '''\n    return (a**2+b**2)==c**2\n    \ndef is_triangle_or_parallelogram(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_triangle(a,b,c) or is_parallelogram(a,b,c)\n    \ndef is_isosceles_triangle(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return a==b or a==c or b==c\n    \ndef is_isosceles_triangle_or_rectangle(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_isosceles_triangle(a,b,c) or is_rectangle(a,b)\n    \ndef is_isosceles_triangle_or_rectangle(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_isosceles_triangle(a,b,c) or is_rectangle(a,b)\n    \ndef is_isosceles_triangle_or_parallelogram(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_isosceles_triangle(a,b,c) or is_parallelogram(a,b,c)\n    \ndef is_isosceles_triangle_or_parallelogram(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_isosceles_triangle(a,b,c) or is_parallelogram(a,b,c)\n    \ndef is_triangle_or_square(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_triangle(a,b,c) or is_square(a,b,c)\n    \ndef is_triangle_or_square(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_triangle(a,b,c) or is_square(a,b,c)\n    \ndef is_triangle_or_rectangle(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_triangle(a,b,c) or is_rectangle(a,b,c)\n    \ndef is_rectangle_or_square(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a rectangle are equal,\n    False otherwise.\n    '''\n    return is_rectangle(a,b,c) or is_square(a,b,c)\n    \ndef is_triangle_or_circle(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_triangle(a,b,c) or is_circle(a,b,c)\n    \ndef is_circle_or_square(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a circle are equal,\n    False otherwise.\n    '''\n    return is_circle(a,b,c) or is_square(a,b,c)\n    \ndef is_triangle_or_triangle(a,b,c):\n    '''\n    Write a function that returns True if the three sides of a triangle are equal,\n    False otherwise.\n    '''\n    return is_triangle(a,b,c) or is_triangle(a,b,c)\n    \ndef is_triangle_or_nonagon("
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = []\n    for i in string:\n        if i not in str_list:\n            str_list.append(i)\n    return str_list\ndef Encrypt():\n    string = input(\"Enter the string: \")\n    string = string.replace(\" \", \"\")\n    string_length = len(string)\n    result = []\n    for i in range(string_length):\n        result.append(string[i])\n    key = int(input(\"Enter the key:\"))\n    result = result[::-1]\n    key_length = len(result)\n    j = 0\n    for i in range(key_length):\n        j = i\n        while j < key_length:\n            result[j], result[j + key] = result[j + key], result[j]\n            j = j + 1\n    result = result[::-1]\n    print(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for x in string: \n        list1.append(x) \n    return list1\ndef fill_alphabets(character_list, n):\n    alphabets = []\n    for i in range(n):\n        alphabets.append(character_list[i])\n    return alphabets\ndef find_julius(character_list, alphabets):\n    julius_pos = []\n    for i in range(len(character_list)):\n        if character_list[i] in alphabets:\n            julius_pos.append(i)\n    return julius_pos\ndef find_julius_second(julius_pos, alphabet, character_list):\n    julius_pos_second = []\n    for i in range(len(julius_pos)):\n        for j in range(len(alphabet)):\n            if julius_pos[i] == alphabet[j]:\n                julius_pos_second.append(j)\n    return julius_pos_second\ndef print_julius_string(julius_pos, character_list, julius_pos_second, length_character_list):\n    julius_string = \"\"\n    for i in range(len(julius_pos)):\n        julius_string += character_list[julius_pos[i]]\n    return julius_string\ndef julius_cipher(character_list, alphabets, length_character_list):\n    julius_pos = []\n    for i in range(len(character_list)):\n        if character_list[i] in alphabets:\n            julius_pos.append(i)\n    return julius_pos\ndef julius_cipher_second(julius_pos, alphabet, length_character_list):\n    julius_pos_second = []\n    for i in range(len(julius_pos)):\n        for j in range(len(alphabet)):\n            if julius_pos[i] == alphabet[j]:\n                julius_pos_second.append(j)\n    return julius_pos_second\ndef print_julius_string_second(julius_pos_second, length_character_list, character_list):\n    julius_string_second = \"\"\n    for i in range(len(julius_pos_second)):\n        julius_string_second += character_list[julius_pos_second[i]]\n    return julius_string_second\ndef convert_string_to_int(string):\n    int_list = []\n    for i in range(len(string)):\n        int_list.append(ord(string[i]))\n    return int_list\ndef convert_int_to_string(int_list):\n    string = \"\"\n    for i in range(len(int_list)):\n        string += chr(int_list[i])\n    return string\ndef make_string_list(string):\n    string_list = []\n    for i in range(len(string)):\n        string_list.append(string[i])\n    return string_list\ndef julius_decrypt(character_list, alphabets, length_character_list):\n    julius_pos = []\n    for i in range(len(character_list)):\n        if character_list[i] in alphabets:\n            julius_pos.append(i)\n    return julius_pos\ndef julius_decrypt_second(julius_pos, alphabet, length_character_list):\n    julius_pos_second = []\n    for i in range(len(julius_pos)):\n        for j in range(len(alphabet)):\n            if julius_pos[i] == alphabet[j]:\n                julius_pos_second.append(j)\n    return julius_pos_second\ndef print_julius_string_second(julius_pos_second, length_character_list, character_list):\n    julius_string_second = \"\"\n    for i in range(len(julius_pos_second)):\n        julius_string_second += character_list[julius_pos_second[i]]\n    return julius_string_second\ndef julius_decrypt_third(string, alphabets, length_character_list):\n    julius_pos = []\n    for i in range(len(string)):\n        if string[i] in alphabets:\n            julius_pos.append(i)\n    return julius_pos\ndef julius_decrypt_fourth(julius_pos, alphabet, length_character_list):\n    julius_pos_second = []\n    for i in range(len(julius_pos)):\n        for j in range(len(alphabet)):\n            if julius_pos[i] == alphabet[j]:\n                julius_pos_second.append(j)\n    return julius_pos_second\ndef print_julius_string_third(julius_pos_second, length_character_list, character_list):\n    julius_string_second = \"\"\n    for i in range(len(julius_pos_second)):\n        julius_string_second += character_list[julius_pos_second[i]]\n    return julius_string_second\ndef shift_alphabets(alphabet, length_alphabet):\n    alphabets_temp = []\n    for i in range(length_alphabet):\n        alphabets_temp.append(alphabet[(i+1)%length_alphabet])\n    return alphabets_temp\ndef find_alphabets(character_list):\n    alphabets = []\n    for i in range(len(character_list)):\n        if character_list[i].isalpha():\n            alphabets.append(character_list[i])\n    return alphabets\ndef list_of_alphabets(length_alphabets):\n    alphabets = []\n    for i in range(length_alphabets):\n        alphabets.append(chr(97+i))\n    return alphabets\ndef shift_string(julius_string, julius_pos_second, julius_pos, alphabets, julius_pos_second_first, julius_pos_second_second, length_character_list):\n    julius_string_second = \"\"\n    for i in range(len(julius_pos_second)):\n        julius_string_second += julius_string[julius_pos_second[i]]\n    julius_string_second_first = \"\"\n    for i in range(len(julius_pos_second_first)):\n        julius_string_second_first += julius_string[julius_pos_second_first[i]]\n    julius_string_second_second = \"\"\n    for i in range(len(julius_pos_second_second)):\n        julius_string_second_second += julius_string[julius_pos_second_second[i]]\n    length_julius_string = len(julius_string_second_second)\n    julius_string_second_third = julius_string_second[0:length_julius_string/2]\n    julius_string_second_fourth = julius_string_second[length_julius_string/2:]\n    julius_string_second = julius_string_second_first + julius_string_second_second + julius_string_second_third + julius_string_second_fourth\n    if len(julius_string_second)%2 == 1:\n        julius_string_second = julius_string_second[0:len(julius_string_second)-1]\n    julius_string_second_first = julius_string_second_first[0:length_julius_string/2]\n    julius_string_second_second = julius_string_second_second"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    str_1 = list(string)\n    str_2 = [\"\"]*len(string)\n    for i in range(len(string)):\n        str_2[i] = string[:i]+string[i+1:]\n    \n    for i in range(len(str_1)):\n        if str_2.count(str_1[i]) > 0:\n            del str_1[i]\n    \n    return str_1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string == '':\n        return []\n    str1 = list(string)\n    str2 = []\n    for i in range(0, len(str1)):\n        if str1[i] not in str2:\n            str2.append(str1[i])\n    return str2\ndef check_for_anagrams(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1) == len(str2):\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        if str1 == str2:\n            return True\n    return False\ndef common_letters(string1, string2):\n    '''\n    Write a function to find the number of common characters between two strings.\n    '''\n    string1 = string1.lower()\n    string2 = string2.lower()\n    if len(string1) == len(string2):\n        common_chars = ''\n        for i in range(0, len(string1)):\n            if string1[i] in string2:\n                common_chars = common_chars + string1[i]\n        return common_chars\n    return -1\ndef least_common_letter(string1, string2):\n    '''\n    Write a function to find the least common letter in two strings.\n    '''\n    string1 = string1.lower()\n    string2 = string2.lower()\n    if len(string1)!= len(string2):\n        return -1\n    if len(string1) == len(string2):\n        str1 = list(string1)\n        str2 = list(string2)\n        for i in range(0, len(str1)):\n            if str1[i] not in str2:\n                return str1[i]\n        return -1\ndef replace_letter(string, letter, new_letter):\n    '''\n    Write a function to replace the first letter with a new letter in a string.\n    '''\n    string = list(string)\n    string[0] = new_letter\n    return ''.join(string)\ndef replace_str(string1, string2):\n    '''\n    Write a function to replace all the characters in a string with the characters in another string.\n    '''\n    string1 = list(string1)\n    string2 = list(string2)\n    for i in range(0, len(string1)):\n        string1[i] = string2[i]\n    return ''.join(string1)\ndef rotate_str(string, n):\n    '''\n    Write a function to rotate a string by n place.\n    '''\n    string = list(string)\n    for i in range(0, n):\n        string = string[-1] + string[:-1]\n    return ''.join(string)\ndef count_vowels(string):\n    '''\n    Write a function to count the vowels in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    string = string.lower()\n    for i in range(0, len(string)):\n        if string[i] in vowels:\n            count += 1\n    return count\ndef is_pangram(string):\n    '''\n    Write a function to check if a string is a pangram or not.\n    '''\n    string = string.lower()\n    string = list(string)\n    pangram = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for i in range(0, len(string)):\n        if string[i] in pangram:\n            pangram.remove(string[i])\n    if len(pangram) == 0:\n        return True\n    return False\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    string = string.lower()\n    if len(string) == 0 or len(string) == 1:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    return is_palindrome(string[1:-1])\ndef count_prime(num):\n    '''\n    Write a function to count the number of prime numbers within a given range.\n    '''\n    count = 0\n    if num > 1:\n        for i in range(2, num + 1):\n            if num % i == 0:\n                count += 1\n    else:\n        return 0\n    return count\ndef count_digit(num):\n    '''\n    Write a function to count the number of digits in a given number.\n    '''\n    string = str(num)\n    return len(string)\ndef count_upper(string):\n    '''\n    Write a function to count the number of uppercase characters in a string.\n    '''\n    string = string.lower()\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            count += 1\n    return count\ndef count_lower(string):\n    '''\n    Write a function to count the number of lowercase characters in a string.\n    '''\n    string = string.lower()\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            count += 1\n    return count\ndef is_balanced(string):\n    '''\n    Write a function to check if a string is balanced or not.\n    '''\n    string = string.lower()\n    stack = []\n    for i in range(0, len(string)):\n        if string[i] in ['(','[', '{', '<']:\n            stack.append(string[i])\n        else:\n            if len(stack) == 0:\n                return False\n            elif string[i] == ')' and stack[-1]!= '(':\n                return False\n            elif string[i] == ']' and stack[-1]!= '[':\n                return False\n            elif string[i] == '}' and stack[-1]!= '{':\n                return False\n            elif string[i] == '>' and stack[-1]!= '<':\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    string = list(string)\n    n = len(string) - 1\n    for i in range(0, len(string) / 2):\n        temp = string[i]\n        string[i] = string[n]\n        string[n] = temp\n        n -= 1\n    return ''.join(string)\ndef are_anagrams(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    string1 = string1.lower()\n    string2 = string2.lower()\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    if string1 == string2:\n        return True\n    return False\ndef is_substring(string, sub_string):\n    '''\n    Write a function to check if a string is a substring or not.\n    '''\n    string = string.lower()\n    sub_string = sub_string.lower()\n    if string.find(sub_string)!= "
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for i in range(0, len(string)):\n        if string[i] not in new_list:\n            new_list.append(string[i])\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str2 = string[::-1] \n    list1 = [0]*NO_OF_CHARS \n    list2 = [0]*NO_OF_CHARS \n    for i in range(len(string)): \n        list1[ord(string[i])] = i\n    for i in range(len(str2)): \n        list2[ord(str2[i])] = i\n    for i in range(len(str2)): \n        if list1[ord(str2[i])] < list2[ord(str2[i])]: \n            list2[ord(str2[i])] -= 1\n    output = '' \n    for i in range(len(string)): \n        if list2[ord(string[i])] == i: \n            output += string[i] \n    return output\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = []\n    str2 = []\n    for ch in string:\n        if ch not in str2:\n            str1.append(ch)\n            str2.append(ch)\n    return (str1)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = input('Enter the string: ')\n    list1 = []\n    list2 = []\n    for i in range(len(str1)):\n        if str1[i] not in list2:\n            list1.append(str1[i])\n        list2.append(str1[i])\n    list1.sort()\n    print(list1)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string[:len(string)] \n    str2 = string[len(string):] \n    index = 0\n    while index < len(str1):\n        if str1[index] in str2:\n            str1 = str1.replace(str1[index], \"\", 1)\n        index = index + 1\n    print str1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = list(string)\n    return li\n    \ndef list_to_str(list): \n    '''\n    Write a function to combine characters of the given list into a string.\n    '''\n    string = ''\n    for i in list:\n        string = string + i\n    return string\n    \ndef get_val_after_chr(string, chr): \n    '''\n    Write a function to find the value of the character after the first occurence of the character.\n    '''\n    # print(string, chr)\n    val = ord(chr)\n    return val\n    \ndef get_char_after_val(val, string): \n    '''\n    Write a function to find the character after the first occurence of the given value.\n    '''\n    char = chr(val)\n    return char\n    \ndef get_string_after_chr(string, chr): \n    '''\n    Write a function to find the string after the first occurence of the character.\n    '''\n    val = ord(chr)\n    li = []\n    for i in range(len(string)):\n        if ord(string[i]) == val:\n            li.append(string[i+1:])\n    return li\n    \ndef get_string_before_chr(string, chr): \n    '''\n    Write a function to find the string before the first occurence of the character.\n    '''\n    li = []\n    val = ord(chr)\n    for i in range(len(string)):\n        if ord(string[i]) == val:\n            li.append(string[:i])\n    return li\n    \ndef get_list_after_chr(string, chr): \n    '''\n    Write a function to find the list after the first occurence of the character.\n    '''\n    li = []\n    val = ord(chr)\n    for i in range(len(string)):\n        if ord(string[i]) == val:\n            li.append(string[i+1:])\n    return li\n    \ndef get_list_before_chr(string, chr): \n    '''\n    Write a function to find the list before the first occurence of the character.\n    '''\n    li = []\n    val = ord(chr)\n    for i in range(len(string)):\n        if ord(string[i]) == val:\n            li.append(string[:i])\n    return li\n    \ndef get_nth_char(string, n): \n    '''\n    Write a function to get the nth character of a string.\n    '''\n    return string[n]\n    \ndef get_nth_val(n, string): \n    '''\n    Write a function to get the nth value of the string.\n    '''\n    return ord(string[n])\n    \ndef get_nth_val_after_chr(string, chr, n): \n    '''\n    Write a function to get the nth value of the string after the first occurence of the character.\n    '''\n    val = ord(chr)\n    li = []\n    for i in range(len(string)):\n        if ord(string[i]) == val:\n            li.append(string[i+n])\n    return li\n    \ndef get_nth_val_before_chr(string, chr, n): \n    '''\n    Write a function to get the nth value of the string before the first occurence of the character.\n    '''\n    val = ord(chr)\n    li = []\n    for i in range(len(string)):\n        if ord(string[i]) == val:\n            li.append(string[:i])\n    return li\n    \ndef get_val_at_index(li, n): \n    '''\n    Write a function to get the value of the list at the index position.\n    '''\n    return li[n]\n    \ndef get_val_at_index_in_string(string, li, n): \n    '''\n    Write a function to get the value of the list at the index position in the string.\n    '''\n    val = string[li[n]]\n    return val\n    \ndef get_list_at_index(li, n): \n    '''\n    Write a function to get the list at the index position.\n    '''\n    return li[n]\n    \ndef get_list_at_index_in_string(string, li, n): \n    '''\n    Write a function to get the list at the index position in the string.\n    '''\n    val = string[li[n]]\n    return val\n    \ndef get_nth_index(li, val): \n    '''\n    Write a function to get the index position of the list element in the list.\n    '''\n    n = 0\n    for i in li:\n        if i == val:\n            n = n + 1\n    return n\n    \ndef get_nth_index_in_string(string, val): \n    '''\n    Write a function to get the index position of the string element in the string.\n    '''\n    n = 0\n    for i in string:\n        if i == val:\n            n = n + 1\n    return n\n    \ndef get_index_at_nth_char(string, chr, n): \n    '''\n    Write a function to get the index position of the character in the string.\n    '''\n    n = string.find(chr, n)\n    return n\n    \ndef get_index_at_nth_char_in_string(string, chr, n): \n    '''\n    Write a function to get the index position of the character in the string.\n    '''\n    n = string.find(chr, n)\n    return n\n    \ndef get_index_of_first_val(li, val): \n    '''\n    Write a function to get the index position of the first occurence of the value in the list.\n    '''\n    n = 0\n    for i in li:\n        if i == val:\n            n = n + 1\n            break\n    return n\n    \ndef get_index_of_first_val_in_string(string, val): \n    '''\n    Write a function to get the index position of the first occurence of the value in the string.\n    '''\n    n = 0\n    for i in string:\n        if i == val:\n            n = n + 1\n            break\n    return n\n    \ndef get_index_of_second_val(li, val): \n    '''\n    Write a function to get the index position of the second occurence of the value in the list.\n    '''\n    n = 0\n    for i in li:\n        if i == val:\n            n = n + 1\n            break\n        if n == 1:\n            break\n    return n\n    \ndef get_index_of_second_val_in_string(string, val): \n    '''\n    Write a function to get the index position of the second occurence of the value in the string.\n    '''\n    n = 0\n    for i in string:\n        if i == val:\n            n = n + 1\n            break\n        if n == 1:\n            break\n    return n\n    \ndef get_index_of_third_val(li, val): \n    '''\n    Write a function to get the index position of the third occurence of the value in the list.\n    '''\n    n = 0\n    for i in li:\n        if i == val:\n            n = n + 1\n            break\n        if n == 2:\n            break\n    return n\n    \ndef get_index_of_third_val_in_string(string, val): \n    '''\n    Write a function to get the index position of the third occurence of the value in the string.\n    '''\n    n = 0\n    for i in string:\n        if i == val:\n            n = n + 1\n            break\n        if n == 2:\n            break\n    return n\n    \ndef get_index_of_fourth_val(li, val): \n    '''\n    Write a function to get the inde"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    d = {}\n    for x in arraynums:\n        if x in d:\n            return True\n        d[x] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    unique = []\n    for num in arraynums:\n        if num not in unique:\n            unique.append(num)\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for i in range(0, len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    length = len(arraynums)\n    if length < 2:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dict_nums = {}\n    for num in arraynums:\n        if num in dict_nums:\n            return True\n        else:\n            dict_nums[num] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def duplicate(nums):\n        nums = sorted(nums)\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                return True\n        return False\n    for array in arraynums:\n        print(duplicate(array))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i]) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n    elif len(arraynums) == 2:\n        return arraynums[0] == arraynums[1]\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #TODO: Test for duplicate numbers in array\n    \n    sortednums = sorted(arraynums)\n    #start with the first element, compare to the rest of the elements\n    for i in range(len(sortednums) - 1):\n        if sortednums[i] == sortednums[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 'quack': \n        return True\n    elif x == 'tack': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True\n    elif x == 'quacken': \n        return True\n    elif x == 'tacken': \n        return True\n    elif x == 'quacki': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackie': \n        return True\n    elif x == 'quackie': \n        return True\n    elif x == 'quacko': \n        return True\n    elif x == 'quackin': \n        return True\n    elif x == 'tackin': \n        return True"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(len(str(x))==6):\n        if(x%2==0):\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    temp = x\n    if len(str(x)) == 2:\n        temp = x % 10\n    if temp in [2,3,4]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 1:\n        if x % 2 == 0:\n            return False\n        else:\n            if is_even(x) and (is_odd(x)):\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x))==2 and int(str(x)[1])==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x)) < 6:\n        return False\n    if str(x).startswith(\"1\") or str(x).endswith(\"7\"):\n        return False\n    x = str(x)\n    for i in xrange(len(x) / 2):\n        if int(x[i])!= int(x[len(x) - i - 1]):\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # TODO: Write your code here\n    if ((x >= 1) and (x <= 2)):\n        return True\n    elif ((x >= 3) and (x <= 5)):\n        return True\n    elif ((x >= 6) and (x <= 10)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x%5==0 and x%3==0):\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x))==5:\n        sum1=0\n        sum2=0\n        for i in str(x):\n            sum1+=int(i)\n        for i in str(sum1):\n            sum2+=int(i)\n        if int(x)%sum2==0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # check if x is a string\n    if type(x)!= str:\n        return False\n    # check if x is a letter\n    elif not x.isalpha():\n        return False\n    # check if x is a word\n    elif len(x) < 5:\n        return False\n    # check if the last letter of x is a vowel\n    elif x[-1] not in 'aeiou':\n        return False\n    # check if the first letter of x is a consonant\n    elif x[0] not in 'aeiou':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str_num = str(num)\n    return int(str_num[::-1]) - 2*int(str_num) == num\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if int(num[::-1]) - 2*int(num) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 2 * (num % 10)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = 0\n    rev = 0\n    while num > 0:\n        rev = (rev * 10) + (num % 10)\n        num = num // 10\n        s += 1\n    if (rev - (rev // 10) * 10) == num:\n        return True\n    else:\n        return False\n    \nprint(rev(21))\nprint(rev(155))\nprint(rev(222))\nprint(rev(1551))\nprint(rev(1891))\nprint(rev(1221))\nprint(rev(11))\nprint(rev(64))\nprint(rev(217))\nprint(rev(871))\nprint(rev(7))\nprint(rev(15))\nprint(rev(16))"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revNum = str(num)[::-1]\n    if num - int(revNum) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    rev = 0\n    while (num > 0):\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num / 10\n    if rev == num - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if (num - rev_num) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num==int(str(num)[::-1])-1\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if num == str(int(num[::-1])*2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return arr[0]*arr[1]*arr[2]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > max : \n            max = arr[i]\n    return max \n    \n    \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    min = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] < min : \n            min = arr[i]\n    return min \n    \n    \ndef find_Sum_of_Digits(arr) : \n    '''\n    Write a python function to find the sum of the digits of the given number.\n    '''\n    sum = 0 \n    for i in range(len(arr)) : \n        sum += arr[i]\n    return sum\n    \n    \ndef find_Product_of_Digits(arr) : \n    '''\n    Write a python function to find the product of the digits of the given number.\n    '''\n    prod = 1 \n    for i in range(len(arr)) : \n        prod *= arr[i]\n    return prod\n    \n    \ndef find_Center_of_Gap(arr) : \n    '''\n    Write a python function to find the center of the gap in the given array of integers.\n    '''\n    center = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] < arr[right] : \n            center = arr[left]\n            left += 1 \n        else : \n            center = arr[right]\n            right -= 1 \n    return center \n    \n    \ndef find_Gap(arr) : \n    '''\n    Write a python function to find the number of gaps in the given array of integers.\n    '''\n    gap = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] < arr[right] : \n            left += 1 \n            if left == right : \n                gap += 1 \n                left += 1 \n        else : \n            right -= 1 \n            if left == right : \n                gap += 1 \n                right -= 1 \n    return gap\n    \n    \ndef find_Duplicate(arr) : \n    '''\n    Write a python function to find the first element that is repeated.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[left] < arr[right] : \n                left += 1 \n            else : \n                right -= 1 \n    return duplicate \n    \n    \ndef find_Duplicate_Reverse(arr) : \n    '''\n    Write a python function to find the first element that is repeated in reverse.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[left] < arr[right] : \n                left += 1 \n            else : \n                right -= 1 \n    return duplicate \n    \n    \ndef find_Duplicate_Rear(arr) : \n    '''\n    Write a python function to find the first element that is repeated by moving elements to the right.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[left] < arr[right] : \n                left += 1 \n            else : \n                right -= 1 \n    return duplicate \n    \n    \ndef find_Duplicate_Index(arr) : \n    '''\n    Write a python function to find the first element that is repeated by moving elements to the right by one position.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[left] < arr[right] : \n                left += 1 \n            else : \n                right -= 1 \n    return duplicate \n    \n    \ndef find_Duplicate_Exchange(arr) : \n    '''\n    Write a python function to find the first element that is repeated by exchanging one of the elements with its next element.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[left] < arr[right] : \n                left += 1 \n            else : \n                right -= 1 \n    return duplicate \n    \n    \ndef find_Duplicate_Exchange_Rear(arr) : \n    '''\n    Write a python function to find the first element that is repeated by exchanging one of the elements with its previous element.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[left] < arr[right] : \n                left += 1 \n            else : \n                right -= 1 \n    return duplicate \n    \n    \ndef find_Duplicate_Exchange_Rear_Rear(arr) : \n    '''\n    Write a python function to find the first element that is repeated by exchanging one of the elements with its previous and next elements.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[left] < arr[right] : \n                left += 1 \n            else : \n                right -= 1 \n    return duplicate \n    \n    \ndef find_Duplicate_Exchange_Rear_Rear_Rear(arr) : \n    '''\n    Write a python function to find the first element that is repeated by exchanging one of the elements with its previous, next, and next-next elements.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[left] < arr[right] : \n                left += 1 \n            else : \n                right -= 1 \n    return duplicate \n    \n    \ndef find_Duplicate_Rear_Rear(arr) : \n    '''\n    Write a python function to find the first element that is repeated by exchanging one of the elements with its previous and next elements.\n    '''\n    duplicate = 0 \n    left = 0 \n    right = len(arr) - 1 \n    while left <= right : \n        if arr[left] == arr[right] : \n            duplicate = arr[left]\n            left += 1 \n            right -= 1 \n        else : \n            if arr[lef"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in arr : \n        if i > max_num : \n            max_num = i\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # method 1\n    # l = []\n    # for i in range(1, len(arr) + 1):\n    #     for j in range(0, i):\n    #         l.append(arr[j] * arr[j + 1])\n    # print(max(l))\n    # method 2\n    # print(max(arr) * max(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = 0\n    for elem in arr:\n        if elem > maxNum:\n            maxNum = elem\n    return maxNum\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == []:\n        return 0\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    i = 0\n    j = 0\n    output = 0\n    while i < len(arr) : \n        j = 0\n        while j < len(arr) :\n            if output < arr[j] * arr[i] :\n                output = arr[j] * arr[i]\n            j = j + 1\n        i = i + 1\n    return output\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    n = len(arr)\n    \n    # if n is even\n    if n%2 == 0 : \n        max_sum = 0\n        \n        for i in range(0,n/2) : \n            temp = arr[i]*arr[n-i-1]\n            if temp > max_sum : \n                max_sum = temp\n        \n        return max_sum\n    \n    # if n is odd \n    else : \n        max_sum = 0\n        \n        for i in range(0,(n-1)/2) : \n            temp = arr[i]*arr[n-i-1]\n            if temp > max_sum : \n                max_sum = temp\n        \n        return max_sum\n    \ndef main() :\n    # make a list of integers from 0 to 19\n    arr = [x for x in range(0,20)]\n    \n    # call the function find_Max_Num\n    result = find_Max_Num(arr)\n    \n    print result\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    temp = []\n    for i in range(len(arr)):\n        temp.append(arr[i])\n    temp.sort()\n    return temp[len(temp)-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    maximum = arr[0]\n    for i in arr : \n        if i > maximum : \n            maximum = i \n    return maximum\n    \ndef find_missing_Number(arr1,arr2) : \n    '''\n    Write a python function to find the missing number from the two given lists.\n    '''\n    \n    diff = 0\n    for i in range(0,len(arr1)) : \n        diff += arr1[i] - arr2[i]\n    return diff\n    \ndef find_first_missing_num(arr) : \n    '''\n    Write a python function to find the first missing positive number in an array. \n    '''\n    \n    diff = 0\n    for i in range(0,len(arr)) : \n        if arr[i] > 0 : \n            diff += abs(arr[i]-i)\n    return diff\n    \ndef find_largest_possible_num(arr) : \n    '''\n    Write a python function to find the first missing positive number in an array. \n    '''\n    \n    diff = 0\n    for i in range(0,len(arr)) : \n        diff += arr[i]\n    return diff\n    \ndef find_LCM(arr) : \n    '''\n    Write a python function to find the least common multiple of a list of numbers.\n    '''\n    \n    num = 1\n    for i in arr : \n        num *= i\n    return num\n    \ndef find_num_of_factors(num) : \n    '''\n    Write a python function to find the number of factors a number has.\n    '''\n    \n    count = 0\n    for i in range(1,num+1) : \n        if num%i == 0 : \n            count += 1\n    return count\n    \ndef find_digit_count(num) : \n    '''\n    Write a python function to find the number of digits of a number.\n    '''\n    \n    count = 0\n    while num!= 0 : \n        num //= 10\n        count += 1\n    return count\n    \ndef find_num_of_factors_in_range(arr) : \n    '''\n    Write a python function to find the number of factors of a number from a range of numbers.\n    '''\n    \n    count = 0\n    for i in range(0,len(arr)) : \n        num = arr[i]\n        if num > 1 : \n            count += find_num_of_factors(num)\n    return count\n    \ndef find_first_smallest_num(arr) : \n    '''\n    Write a python function to find the first smallest number in a list.\n    '''\n    \n    num = arr[0]\n    for i in arr : \n        if i < num : \n            num = i\n    return num\n    \ndef find_first_smallest_num_in_range(arr) : \n    '''\n    Write a python function to find the first smallest number in a range of numbers.\n    '''\n    \n    num = arr[0]\n    for i in arr : \n        if i < num : \n            num = i\n    return num\n    \ndef find_second_smallest_num(arr) : \n    '''\n    Write a python function to find the second smallest number in a list.\n    '''\n    \n    arr.sort()\n    return arr[1]\n    \ndef find_second_smallest_num_in_range(arr) : \n    '''\n    Write a python function to find the second smallest number in a range of numbers.\n    '''\n    \n    arr.sort()\n    return arr[1]\n    \ndef find_sum_of_digit(num) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    \n    digit = 0\n    while num!= 0 : \n        digit += num % 10\n        num //= 10\n    return digit\n    \ndef find_sum_of_digit_in_range(arr) : \n    '''\n    Write a python function to find the sum of digits of a number in a range of numbers.\n    '''\n    \n    sum = 0\n    for i in arr : \n        sum += find_sum_of_digit(i)\n    return sum\n    \ndef find_least_common_multiple(arr) : \n    '''\n    Write a python function to find the least common multiple of a list of numbers.\n    '''\n    \n    num = 1\n    for i in arr : \n        num *= i\n    return num\n    \ndef find_greatest_common_divisor(arr) : \n    '''\n    Write a python function to find the greatest common divisor of a list of numbers.\n    '''\n    \n    num = arr[0]\n    for i in arr : \n        if num%i!= 0 : \n            num = i\n    return num\n    \ndef find_greatest_common_divisor_in_range(arr) : \n    '''\n    Write a python function to find the greatest common divisor of a list of numbers in a range.\n    '''\n    \n    num = arr[0]\n    for i in arr : \n        if num%i!= 0 : \n            num = i\n    return num\n    \ndef find_factors(num) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    \n    arr = []\n    for i in range(1,num+1) : \n        if num%i == 0 : \n            arr.append(i)\n    return arr\n    \ndef find_factors_in_range(arr) : \n    '''\n    Write a python function to find the factors of a number in a range.\n    '''\n    \n    arr = []\n    for i in range(0,len(arr)) : \n        if arr[i] > 1 : \n            arr.append(find_factors(arr[i]))\n    return arr\n    \ndef find_perfect_num(num) : \n    '''\n    Write a python function to find the perfect number of a number.\n    '''\n    \n    sum = 0\n    for i in range(1,num) : \n        if num%i == 0 : \n            sum += i\n    if sum == num : \n        return True\n    else : \n        return False\n    \ndef find_perfect_num_in_range(arr) : \n    '''\n    Write a python function to find the perfect number of a number in a range.\n    '''\n    \n    arr = []\n    for i in range(0,len(arr)) : \n        if find_perfect_num(arr[i]) : \n            arr.append(arr[i])\n    return arr\n    \ndef find_perfect_num_in_range_with_factors(arr) : \n    '''\n    Write a python function to find the perfect number of a number in a range that have their factors.\n    '''\n    \n    arr = []\n    for i in range(0,len(arr)) : \n        if find_perfect_num_in_range(arr[i]) : \n            arr.append(arr[i])\n    return arr\n    \ndef find_perfect_num_in_range_with_factors_and_sum(arr) : \n    '''\n    Write a python function to find the perfect number of a number in a range that have their factors and sum.\n    '''\n    \n    arr = []\n    for i in range(0,len(arr)) : \n        if find_perfect_num_in_range_with_factors(arr[i]) : \n            arr.append(arr[i])\n    return arr\n    \ndef find_largest_and_smallest_num(arr) : \n    '''\n    Write a python function to find the largest and smallest number of a list of numbers.\n    '''\n    \n    arr.sort()\n    return (arr[len(arr)-1],arr[0])\n    \ndef find_largest_and_smallest_num_in_range(arr) : \n    '''\n    Write a python function to find the largest and smallest number of a list of numbers in a range.\n    '''\n    \n    arr.sort()\n    return "
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    return False\ndef last_digit(x,y):\n    '''\n    Write a python function to compute the last digit of a product of two numbers.\n    '''\n    if x==0 or y==0:\n        return 0\n    elif x%10==0 and y%10==0:\n        return 0\n    else:\n        return (x*y)%10\ndef function(a,b):\n    '''\n    Write a python function to compute the arithmetic mean of a list of values.\n    '''\n    return (a+b)/2.0\ndef list_to_string(x):\n    '''\n    Write a python function to convert a list of characters to a string.\n    '''\n    s = ''\n    for i in range(len(x)):\n        s = s + x[i]\n    return s\ndef even_numbers(x):\n    '''\n    Write a python function to return a list of even numbers from a given list.\n    '''\n    return [i for i in x if i%2==0]\ndef double_letters(x):\n    '''\n    Write a python function to return a string that has all the letters of the input string in the order of output\n    '''\n    return ''.join([x[i]*2 for i in range(len(x))])\ndef find_max(x):\n    '''\n    Write a python function to return the max of a list of values.\n    '''\n    return max(x)\ndef sum_of_squares(x):\n    '''\n    Write a python function to compute the sum of the square of each element in a list of values.\n    '''\n    return sum(i**2 for i in x)\ndef check_pangram(x):\n    '''\n    Write a python function to check whether a given string contains all the letters of the alphabet.\n    '''\n    for i in range(97,123):\n        if chr(i) not in x:\n            return False\n    return True\ndef score_word(x):\n    '''\n    Write a python function to score a word, given the score list.\n    '''\n    if x==\"\":\n        return 0\n    else:\n        return (ord(x[0])-96)*(len(x)-1)\ndef find_largest_digit(x):\n    '''\n    Write a python function to return the largest digit in a number.\n    '''\n    return max([int(i) for i in str(x)])\ndef is_palindrome(x):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    return str(x)==str(x)[::-1]\ndef is_prime(x):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2,int(x**0.5)+1):\n        if x%i==0:\n            return False\n    return True\ndef largest_prime_factor(x):\n    '''\n    Write a python function to return the largest prime factor of a given number.\n    '''\n    for i in range(2,x):\n        if x%i==0 and is_prime(i):\n            return i\n    return x\ndef happy_numbers(x):\n    '''\n    Write a python function to return a list of happy numbers.\n    '''\n    return [i for i in x if happy_number(i)==True]\ndef happy_number(x):\n    '''\n    Write a python function to check if a number is happy or not.\n    '''\n    x1 = 0\n    x2 = 0\n    while True:\n        x1 = sum_of_squares(x)\n        x2 = sum_of_squares(x1)\n        if x1 == 1:\n            return True\n        elif x2==1:\n            return False\n        else:\n            x = x2\ndef sum_of_digits(x):\n    '''\n    Write a python function to return the sum of digits in a number.\n    '''\n    return sum([int(i) for i in str(x)])\ndef convert_days(x):\n    '''\n    Write a python function to convert a given number of days to hours, minutes, and seconds.\n    '''\n    if x<0:\n        return \"The given input cannot be negative.\"\n    else:\n        hours = int(x/3600)\n        minutes = int((x%3600)/60)\n        seconds = int((x%3600)%60)\n        return [hours, minutes, seconds]\ndef is_anagram(x,y):\n    '''\n    Write a python function to check whether a given two strings are anagram or not.\n    '''\n    return sorted(x)==sorted(y)\ndef find_second_largest(x):\n    '''\n    Write a python function to return the second largest number in a list.\n    '''\n    a = set(x)\n    return sorted(a)[-2]\ndef replace_vowels(x):\n    '''\n    Write a python function to replace all the vowels in a string with a character.\n    '''\n    vowels = set('aeiou')\n    return ''.join([i if i not in vowels else 'v' for i in x])\ndef get_pythagorean_triple(x):\n    '''\n    Write a python function to return the pythagorean triple for a given side.\n    '''\n    for i in range(1,x):\n        for j in range(1,x):\n            for k in range(1,x):\n                if i**2+j**2==k**2 and i!=j and i!=k and j!=k:\n                    return [i,j,k]\ndef modulo(x,y):\n    '''\n    Write a python function to return the remainder of two numbers.\n    '''\n    return x%y\ndef remove_spaces(x):\n    '''\n    Write a python function to remove all the spaces in a string.\n    '''\n    return x.replace(\" \",\"\")\ndef a_plus_abs_b(a,b):\n    '''\n    Write a python function to return the absolute value of a number.\n    '''\n    if a<0:\n        return -a\n    else:\n        return a\ndef negate_number(x):\n    '''\n    Write a python function to negate a number.\n    '''\n    return -x\ndef to_octal(x):\n    '''\n    Write a python function to convert a given number to octal.\n    '''\n    return oct(x)\ndef to_hexadecimal(x):\n    '''\n    Write a python function to convert a given number to hexadecimal.\n    '''\n    return hex(x)\ndef is_number_balanced(x):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    a = x\n    b = x[::-1]\n    return a==b\ndef diff_of_largest_and_smallest(x):\n    '''\n    Write a python function to find the difference between the largest and smallest numbers in a list.\n    '''\n    return max(x)-min(x)\ndef to_string(x):\n    '''\n    Write a python function to convert a given number to string.\n    '''\n    return str(x)\ndef reverse_string(x):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return x[::-1]\ndef reverse_vowels(x):\n    '''\n    Write a python function to reverse vowels in a string.\n    '''\n    vowels = set('aeiou')\n    return ''.join([i if i not in vowels else 'v' for i in x])\ndef is_palindrome_permutation(x):\n    '''\n    Write a python function to check whether a given string is a palindrome permutation or not.\n    '''\n    return sorted(x)==sorted(x,reverse=True)\ndef is_string_permutation(x,y):\n    '''\n    Write a python functio"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        print 'x and y have opposite signs'\n    elif x > 0 and y < 0:\n        print 'x and y have opposite signs'\n    elif x > 0 and y > 0:\n        print 'x and y have same sign'\n    elif x < 0 and y > 0:\n        print 'x and y have same sign'\n    else:\n        print 'x and y have opposite signs'\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = int(x)\n    y = int(y)\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    elif x==0 and y!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or x>0 and y<0\n    \ndef prime_or_not(n):\n    if n==1:\n        return False\n    elif n<=3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    else:\n        for i in range(5,int(n**0.5)+1,2):\n            if n%i==0 or n%(i+2)==0:\n                return False\n        return True\n        \ndef valid_triangle(s1,s2,s3):\n    '''\n    Write a python function to check whether the given three sides form a valid triangle or not.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return False\n    else:\n        if s1+s2>s3 and s1+s3>s2 and s2+s3>s1:\n            return True\n        else:\n            return False\n            \ndef valid_pythagorean_triplet(a,b,c):\n    '''\n    Write a python function to check whether the given three sides form a valid pythagorean triplet or not.\n    '''\n    if a**2+b**2==c**2:\n        return True\n    else:\n        return False\n        \ndef even_or_odd(n):\n    '''\n    Write a python function to check whether the given number is even or odd.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n        \ndef largest_factor(n):\n    '''\n    Write a python function to return the largest factor of a given number n.\n    '''\n    for i in range(n-1,1,-1):\n        if n%i==0:\n            return i\n            \ndef perfect_or_not(n):\n    '''\n    Write a python function to check whether the given number n is perfect or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s=s+i\n    return s==n\n            \ndef prime_or_not(n):\n    '''\n    Write a python function to check whether the given number n is prime or not.\n    '''\n    if n<=1:\n        return False\n    elif n<=3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    else:\n        for i in range(5,int(n**0.5)+1,2):\n            if n%i==0 or n%(i+2)==0:\n                return False\n        return True\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to return the sum of the digits of a given number n.\n    '''\n    s=0\n    while n:\n        s=s+n%10\n        n=n//10\n    return s\n        \ndef valid_triangle(s1,s2,s3):\n    '''\n    Write a python function to check whether the given three sides form a valid triangle or not.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return False\n    else:\n        if s1+s2>s3 and s1+s3>s2 and s2+s3>s1:\n            return True\n        else:\n            return False\n            \ndef valid_pythagorean_triplet(a,b,c):\n    '''\n    Write a python function to check whether the given three sides form a valid pythagorean triplet or not.\n    '''\n    if a**2+b**2==c**2:\n        return True\n    else:\n        return False\n        \ndef even_or_odd(n):\n    '''\n    Write a python function to check whether the given number n is even or odd.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n        \ndef largest_factor(n):\n    '''\n    Write a python function to return the largest factor of a given number n.\n    '''\n    for i in range(n-1,1,-1):\n        if n%i==0:\n            return i\n            \ndef perfect_or_not(n):\n    '''\n    Write a python function to check whether the given number n is perfect or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s=s+i\n    return s==n\n            \ndef prime_or_not(n):\n    '''\n    Write a python function to check whether the given number n is prime or not.\n    '''\n    if n<=1:\n        return False\n    elif n<=3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    else:\n        for i in range(5,int(n**0.5)+1,2):\n            if n%i==0 or n%(i+2)==0:\n                return False\n        return True\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to return the sum of the digits of a given number n.\n    '''\n    s=0\n    while n:\n        s=s+n%10\n        n=n//10\n    return s\n        \ndef valid_triangle(s1,s2,s3):\n    '''\n    Write a python function to check whether the given three sides form a valid triangle or not.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return False\n    else:\n        if s1+s2>s3 and s1+s3>s2 and s2+s3>s1:\n            return True\n        else:\n            return False\n            \ndef valid_pythagorean_triplet(a,b,c):\n    '''\n    Write a python function to check whether the given three sides form a valid pythagorean triplet or not.\n    '''\n    if a**2+b**2==c**2:\n        return True\n    else:\n        return False\n        \ndef even_or_odd(n):\n    '''\n    Write a python function to check whether the given number n is even or odd.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n        \ndef largest_factor(n):\n    '''\n    Write a python function to return the largest factor of a given number n.\n    '''\n    for i in range(n-1,1,-1):\n        if n%i==0:\n            return i\n            \ndef perfect_or_not(n):\n    '''\n    Write a python function to check whether the given number n is perfect or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s=s+i\n    return s==n\n            \ndef prime_or_not(n):\n    '''\n    Write a python function to check whether the given number n is prime or not.\n    '''\n    if n<=1:\n        return False\n    elif n<=3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    else:\n        for i in range(5,int(n**0.5)+1,2):\n            if n%i==0 or n%(i+2)==0:\n                return False\n        return True\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to return the sum of the digits of a given number n.\n    '''\n    s=0\n    while n:\n        s=s+n%10\n        n=n//10\n    return s\n        \ndef valid_triangle(s1,s2,s3):\n    '''\n    Write a python function to check whether the given three sides form a valid triangle or not.\n    '''\n    if s1<=0 or s2<=0 or s3<=0:\n        return False\n    else:\n        if s1+s2>"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return False\n    elif x<0 and y<0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x<0 and y<0:\n        return True\n    if x>0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n    \ndef palindrome_permutation(s):\n    '''\n    Write a python function to check whether the given string is a permutation of a palindrome or not.\n    '''\n    if len(s) == 1:\n        return True\n    if len(s) == 0:\n        return False\n    a = s[0]\n    b = s[-1]\n    c = s[1:-1]\n    for i in c:\n        if i!= a and i!= b:\n            return False\n    return True\n    \ndef string_reverser(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    else:\n        return s[-1]+string_reverser(s[:-1])\n    \ndef anagram(s, t):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s)==sorted(t)\n    \ndef rotate_string(s,n):\n    '''\n    Write a python function to rotate a string by n places.\n    '''\n    if n==0:\n        return s\n    if n<0:\n        return rotate_string(s,-n)\n    temp = ''\n    for i in range(len(s)):\n        temp += s[(i+n)%len(s)]\n    return temp\n    \ndef check_permutation(s1, s2):\n    '''\n    Write a python function to check whether two strings are permutations or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return True\n    a = s1[0]\n    b = s2[0]\n    c = s1[1:]\n    d = s2[1:]\n    if a == b:\n        return check_permutation(c,d)\n    else:\n        return opposite_Signs(a,b) and check_permutation(c,d)\n    \ndef reverse_vowels(s):\n    '''\n    Write a python function to reverse vowels in a string.\n    '''\n    s = list(s)\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    start = 0\n    end = len(s)-1\n    while start <= end:\n        if s[start] in vowels and s[end] in vowels:\n            s[start], s[end] = s[end], s[start]\n            start+=1\n            end-=1\n        elif s[start] not in vowels:\n            start+=1\n        elif s[end] not in vowels:\n            end-=1\n    return ''.join(s)\n    \ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return True\n    a = s1[0]\n    b = s2[0]\n    c = s1[1:]\n    d = s2[1:]\n    if a == b:\n        return is_anagram(c,d)\n    else:\n        return opposite_Signs(a,b) and is_anagram(c,d)\n    \ndef is_rotation(s1,s2):\n    '''\n    Write a python function to check whether two strings are rotations of each other or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return True\n    a = s1[0]\n    b = s2[0]\n    c = s1[1:]\n    d = s2[1:]\n    if a == b:\n        return is_rotation(c,d)\n    else:\n        return a == d[0:len(a)] and is_rotation(c,d)\n    \ndef make_readable(seconds):\n    '''\n    Write a python function to convert seconds to hours, minutes and seconds\n    '''\n    s = seconds%60\n    m = (seconds-s)/60\n    h = (seconds-s-m*60)/60\n    return '%d:%d:%d'%(h,m,s)\n    \ndef sum_of_intervals(intervals):\n    '''\n    Write a python function to compute the sum of all the elements in a given list of intervals.\n    '''\n    total = 0\n    for i in intervals:\n        total+=i\n    return total\n    \ndef compress(s):\n    '''\n    Write a python function to compress a string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s+'1'\n    result = ''\n    count = 1\n    previous = s[0]\n    for i in s[1:]:\n        if i == previous:\n            count+=1\n        else:\n            result = result + str(count) + previous\n            count = 1\n        previous = i\n    result = result + str(count) + previous\n    return result\n    \ndef repeated(s,n):\n    '''\n    Write a python function to check if a string is repeated n times or not.\n    '''\n    if n <= 1:\n        return False\n    return s*n == s\n    \ndef repeated_string(s, n):\n    '''\n    Write a python function to check if a string repeats itself n times or not.\n    '''\n    if len(s) == 0:\n        return False\n    if n == 0:\n        return False\n    count = 0\n    for i in s:\n        if i == 'a':\n            count+=1\n    if count*n < len(s):\n        return False\n    else:\n        return True\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a matrix by 90 degrees.\n    '''\n    if len(matrix) == 0:\n        return []\n    if len(matrix) == 1:\n        return [[matrix[0][0]]]\n    result = []\n    for i in range(len(matrix[0])):\n        result.append([])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            result[j].append(matrix[(len(matrix)-1-i)][j])\n    return result\n    \ndef remove_element(nums, val):\n    '''\n    Write a python function to remove a given element from a list.\n    '''\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        if nums[0] == val:\n            return []\n        else:\n            return nums\n    if nums[0] == val:\n        return remove_element(nums[1:],val)\n    else:\n        return [nums[0]] + remove_element(nums[1:],val)\n    \ndef num_subarray_div_k(nums, k):\n    '''\n    Write a python function to count the number of subarrays where the sum of the elements in the subarray is divisible by k.\n    '''\n    if len(nums) == 0:\n        return 0\n    result = 0\n    if nums[0]%k == 0:\n        result += 1\n    result+=num_subarray_div_k(nums[1:],k)\n    return result\n    \ndef find_max_consecutive_ones(nums):\n    '''\n    Write a python function to find the maximum number of consecutive 1s in the given array.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            current_count+=1\n        else:\n            max_count = max(max_count,current_count)\n            current_count = 0\n    max_count = max"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # if (x>0 and y<0) or (x<0 and y>0):\n    #     return True\n    # else:\n    #     return False\n    return x*y<0\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (((8 * n) + 1)**0.5 - 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    i = 1\n    while i < n:\n        a = a + b\n        b = a + b\n        i = i + 1\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return 3*n*(n-1) + "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n=n-1\n    if n%2==0:\n        return n*(n+1)*(n+2)/6\n    else:\n        return n*(n+1)*(n+2)/6 - 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a,b = 1,1\n    for i in range(1,n):\n        a,b = b,a+b\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((n * (n + 1)) * (n + 2)) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2!= 0:\n        return False\n    number = 0\n    root = 1\n    while(root <= n):\n        number += root**3\n        root += 1\n    return True if number == n else False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonals = [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    return octagonals[n - 1]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sums = defaultdict(int)\n    for i in xrange(len(s)):\n        sums[i] = sum(int(x) for x in s[i:])\n        \n    return sum(v for k,v in sums.items() if v == len(s))\n    \nassert(count_Substrings('12345') == 2)\nassert(count_Substrings('xy') == 0)\nassert(count_Substrings('zz') == 1)\nassert(count_Substrings('a1b2c3d4e') == 6)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if sum(map(int,s[i:j]))==j-i:\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(len(s), i, -1):\n            # print(s[i:j])\n            if sum(int(x) for x in s[i:j]) == len(s[i:j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n < 1:\n        return 0\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return sum(dp[0])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if sum(map(int,list(s[i:j]))) == len(s[i:j]):\n                count[s[i:j]] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            d[s[i:j]]+=1\n    count=0\n    for key in d:\n        count+=d[key]*(d[key]-1)//2\n    return count\ndef calculate_Sum(a,b):\n    '''\n    Write a python function to calculate the sum of the digits in a and b.\n    '''\n    temp = 0\n    while b>0:\n        temp+=a%10\n        a/=10\n        b/=10\n    return temp\ndef compare_strings(a,b):\n    '''\n    Write a python function to compare two strings. The strings are given in lower case.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\ndef no_of_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if calculate_Sum(s[i:j],j-i)==len(s[i:j]):\n                count+=1\n    return count\ndef compare_strings(a,b):\n    '''\n    Write a python function to compare two strings. The strings are given in lower case.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            d[s[i:j]]+=1\n    for key in d:\n        count+=d[key]*(d[key]-1)//2\n    return count\ndef calculate_Sum(a,b):\n    '''\n    Write a python function to calculate the sum of the digits in a and b.\n    '''\n    temp = 0\n    while b>0:\n        temp+=a%10\n        a/=10\n        b/=10\n    return temp\ndef compare_strings(a,b):\n    '''\n    Write a python function to compare two strings. The strings are given in lower case.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\ndef no_of_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if calculate_Sum(s[i:j],j-i)==len(s[i:j]):\n                count+=1\n    return count\ndef compare_strings(a,b):\n    '''\n    Write a python function to compare two strings. The strings are given in lower case.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            d[s[i:j]]+=1\n    for key in d:\n        count+=d[key]*(d[key]-1)//2\n    return count\ndef calculate_Sum(a,b):\n    '''\n    Write a python function to calculate the sum of the digits in a and b.\n    '''\n    temp = 0\n    while b>0:\n        temp+=a%10\n        a/=10\n        b/=10\n    return temp\ndef compare_strings(a,b):\n    '''\n    Write a python function to compare two strings. The strings are given in lower case.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\ndef no_of_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if calculate_Sum(s[i:j],j-i)==len(s[i:j]):\n                count+=1\n    return count\ndef compare_strings(a,b):\n    '''\n    Write a python function to compare two strings. The strings are given in lower case.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            d[s[i:j]]+=1\n    for key in d:\n        count+=d[key]*(d[key]-1)//2\n    return count\ndef calculate_Sum(a,b):\n    '''\n    Write a python function to calculate the sum of the digits in a and b.\n    '''\n    temp = 0\n    while b>0:\n        temp+=a%10\n        a/=10\n        b/=10\n    return temp\ndef compare_strings(a,b):\n    '''\n    Write a python function to compare two strings. The strings are given in lower case.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\ndef no_of_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if calculate_Sum(s[i:j],j-i)==len(s[i:j]):\n                count+=1\n    return count\ndef compare_strings(a,b):\n    '''\n    Write a python function to compare two strings. The strings are given in lower case.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            d[s[i:j]]+="
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def get_digit_map(s):\n        d = defaultdict(int)\n        for c in s:\n            d[c]+=1\n        return d\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum([int(s[k]) for k in range(i, j + 1)]) == j - i + 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += count_Substrings_On_One_End(s, i, i)\n        count += count_Substrings_On_One_End(s, i, i+1)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i,len(s)):\n            if sum(map(int,list(s[i:j+1]))) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        raise ValueError('List cannot be empty')\n    min_val = xs[0]\n    for val in xs:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    largest = xs[0]\n    for i in xs:\n        if i > largest:\n            largest = i\n    return largest\n    \ndef reverse(xs):\n    '''\n    Write a python function to reverse a list.\n    '''\n    new_list = []\n    for i in xs:\n        new_list.append(i)\n    return new_list[::-1]\n    \ndef is_sorted(xs):\n    '''\n    Write a python function to check if a list is sorted.\n    '''\n    for i in range(len(xs)-1):\n        if xs[i] > xs[i+1]:\n            return False\n    return True\n    \ndef sort_list(xs):\n    '''\n    Write a python function to sort a list.\n    '''\n    if is_sorted(xs) == True:\n        return xs\n    else:\n        for i in range(len(xs)-1):\n            if xs[i] > xs[i+1]:\n                temp = xs[i]\n                xs[i] = xs[i+1]\n                xs[i+1] = temp\n    return xs\n    \ndef remove_nth(xs, n):\n    '''\n    Write a python function to remove the nth element from a list.\n    '''\n    new_list = []\n    for i in xs:\n        if xs.index(i)!= n:\n            new_list.append(i)\n    return new_list\n    \ndef is_anagram(word1, word2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    word1_list = list(word1)\n    word2_list = list(word2)\n    for i in word1_list:\n        if i in word2_list:\n            word2_list.remove(i)\n        else:\n            return False\n    if len(word2_list) == 0:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(word):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    for i in range(len(word)//2):\n        if word[i]!= word[-i-1]:\n            return False\n    return True\n    \ndef find_pairs(xs, target_sum):\n    '''\n    Write a python function to find a pair of integers in a list that sum to a target value.\n    '''\n    pairs = []\n    for i in range(len(xs)):\n        for j in range(i+1,len(xs)):\n            if xs[i] + xs[j] == target_sum:\n                pairs.append([xs[i],xs[j]])\n    return pairs\n    \ndef find_triplets(xs):\n    '''\n    Write a python function to find a triplet of integers in a list that sum to 0.\n    '''\n    triplets = []\n    for i in range(len(xs)):\n        for j in range(i+1, len(xs)):\n            for k in range(j+1,len(xs)):\n                if xs[i] + xs[j] + xs[k] == 0:\n                    triplets.append([xs[i],xs[j],xs[k]])\n    return triplets\n    \ndef find_largest(xs):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    max_num = xs[0]\n    for i in xs:\n        if i > max_num:\n            max_num = i\n    return max_num\n    \ndef find_smallest(xs):\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    min_num = xs[0]\n    for i in xs:\n        if i < min_num:\n            min_num = i\n    return min_num\n    \ndef slice_list(xs):\n    '''\n    Write a python function to slice a list.\n    '''\n    return xs[1::2]\n    \ndef merge_list(xs, ys):\n    '''\n    Write a python function to merge two lists.\n    '''\n    new_list = xs + ys\n    return new_list\n    \ndef extract_digits(xs):\n    '''\n    Write a python function to extract digits from a list.\n    '''\n    new_list = []\n    for i in xs:\n        if isinstance(i,int):\n            new_list.append(i)\n    return new_list\n    \ndef find_highest_digit(xs):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    highest = xs[0]\n    for i in xs:\n        if i > highest:\n            highest = i\n    return highest\n    \ndef count_hi(xs):\n    '''\n    Write a python function to count the number of times that the letter 'hi' appears in a string.\n    '''\n    count = 0\n    for i in xs:\n        if i == 'hi':\n            count += 1\n    return count\n    \ndef check_characters(xs):\n    '''\n    Write a python function to check if a string contains all letters of the alphabet.\n    '''\n    for i in xs:\n        if i.isalpha() == False:\n            return False\n    return True\n    \ndef count_letters(xs):\n    '''\n    Write a python function to count the number of letters in a string.\n    '''\n    count = 0\n    for i in xs:\n        if i.isalpha() == True:\n            count += 1\n    return count\n    \ndef replace_chars(xs, old, new):\n    '''\n    Write a python function to replace all old characters with new characters in a string.\n    '''\n    new_string = xs.replace(old,new)\n    return new_string\n    \ndef main():\n    print(smallest_num([1,2,3,4,5,6,7,8,9,10]))\n    print(largest_num([1,2,3,4,5,6,7,8,9,10]))\n    print(reverse([1,2,3,4,5,6,7,8,9,10]))\n    print(is_sorted([1,2,3,4,5,6,7,8,9,10]))\n    print(sort_list([5,3,1,4,7,9,2,6,8]))\n    print(remove_nth([1,2,3,4,5,6,7,8,9,10], 1))\n    print(is_anagram('stop', 'pots'))\n    print(is_palindrome('abba'))\n    print(find_pairs([1,4,2,5,3,6,7,8,9,10], 25))\n    print(find_triplets([1,2,3,4,5,6,7,8,9,10]))\n    print(find_largest([1,2,3,4,5,6,7,8,9,10]))\n    print(find_smallest([1,2,3,4,5,6,7,8,9,10]))\n    print(slice_list([1,2,3,4,5,6,7,8,9,10]))\n    print(merge_list([1,2,3,4,5],[6,7,8,9,10]))\n    print(extract_digits([26,32,21,8]))\n    print(find_highest_digit([26,32,21,8]))\n    print(count_hi('hi hi hi!'))\n    print(check_characters('This is a sentence'))\n    print(count_letters('i love python'))\n    print(replace_chars('python is nice', 'o', 'e'))\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    result = xs[0]\n    for i in xs[1:]:\n        if i < result:\n            result = i\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    max_diff = -99\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            max_diff = max(max_diff, abs(test_list[i] - test_list[j]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in xrange(0, len(test_list)):\n        for j in xrange(i + 1, len(test_list)):\n            max_diff = max(max_diff, abs(test_list[i] - test_list[j]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # a_list = list(a_tuple)\n    # a_list.sort()\n    # result = a_list[-1] - a_list[0]\n    # return result\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0,len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i]-test_list[j]\n            max_diff = max(max_diff,diff)\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        max_difference = test_list[0]\n        for i in xrange(1,len(test_list)):\n            for j in xrange(i+1, len(test_list)):\n                difference = abs(test_list[i]-test_list[j])\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    import heapq\n    heap = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            heapq.heappush(heap, abs(test_list[i]-test_list[j]))\n    return heapq.heappop(heap)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j]:\n                continue\n            else:\n                result.append(abs(test_list[i] - test_list[j]))\n    return max(result)\n    \nif __name__ == '__main__':\n    test_list = [3, 1, 4, 2, 9, 11, 12]\n    print(max_difference(test_list))"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i+1, len(test_list)):\n            if (test_list[i]!= test_list[j]):\n                if abs(test_list[i] - test_list[j]) > max:\n                    max = abs(test_list[i] - test_list[j])\n    return max\n    \nprint max_difference((1, 3, 4, 6, 7))\nprint max_difference((1, 3, 4, 6, 9))\nprint max_difference((2, 4, 6, 8, 10))\nprint max_difference((3, 6, 9, 12, 15))\nprint max_difference((5, 7, 12, 19, 22))\nprint max_difference((2, 4, 6, 8, 10, 12, 14))\nprint max_difference((1, 2, 3, 4, 5, 6, 7))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78))\nprint max_difference((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjects = sorted(subjectmarks,key=lambda x:x[1])\n    return subjects\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    return sorted(subjectmarks,key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    result = sorted(subjectmarks,key=operator.itemgetter(1),reverse=True)\n    return result\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n    \nsubject = [('maths', 90), ('science', 90), ('social', 90), ('physics', 90)]\nsubjects = subject_marks(subject)\nprint(subjects)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = sorted(subjectmarks, key=lambda x: x[1])\n    print new_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def Sort(tuples):\n        tuples = list(tuples)\n        for i in range(len(tuples)):\n            for j in range(len(tuples)-1):\n                if tuples[j][1] < tuples[j+1][1]:\n                    tuples[j],tuples[j+1] = tuples[j+1],tuples[j]\n        return tuples\n    return Sort(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in subjectmarks:\n        print(i)\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # if list is not empty\n    if len(data_list) == 0:\n        return 0\n    \n    # base case\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #\n    # YOUR CODE HERE\n    #\n    if len(data_list)==0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # input: data_list: a list, each element is a list\n    # output: result: a list of sum of all elements\n    result = []\n    for list_i in data_list:\n        result += list_i\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Recursion base case\n    if len(data_list) == 0:\n        return 0\n    \n    # Non-recursive base case\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # Recursive step\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #base case\n    if len(data_list) == 1:\n        return data_list[0]\n    #recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    \ndef flatten_list(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #base case\n    if len(data_list) == 1:\n        return data_list[0]\n    #recursive case\n    else:\n        return data_list[0] + flatten_list(data_list[1:])\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # if the data is a list\n    if isinstance(data_list, list):\n        # return the sum of all the elements in the list\n        return sum(recursive_list_sum(item) for item in data_list)\n    # if the data is a number\n    elif isinstance(data_list, int):\n        # return the data\n        return data_list\n    # if the data is a string\n    elif isinstance(data_list, str):\n        # return the data\n        return data_list\n    # if the data is None\n    elif data_list == None:\n        # return 0\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    try:\n        if type(data_list) == type([]):\n            if len(data_list) == 0:\n                return 0\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    except Exception as e:\n        raise e\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #initialize the counter\n    pos_count = 0\n    for i in list:\n        #condition to check for positive numbers\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positives = 0\n    for item in list:\n        if item > 0:\n            positives += 1\n    return positives\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count=0\n    for x in list:\n        if x > 0:\n            pos_count += 1\n    print pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for x in list:\n        if x > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num_list = [1,1,2,5,14,42,132,429,1430,4862,16796,59008,126012,408248,151200,551441,183631,576576,1254012,421387,1407269,4294969,8717829,196411]\n    result = 0\n    for i in range(1,n+1):\n        result += bell_num_list[i-1]\n    return result\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (2**n) - 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0]*n\n    bell[0] = 1\n    bell[1] = 1\n    bell[2] = 2\n    bell[3] = 5\n    for i in range(4,n):\n        bell[i] = bell[i-1] + bell[i-2] + bell[i-3]\n    return bell[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bells = [1]\n    for i in range(1,n+1):\n        bells.append(bells[i-1]+bells[i-2])\n    \n    return bells[-1]\n    \ndef bell_number2(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    a = [0]*(n+1)\n    a[0] = 1\n    a[1] = 1\n    for i in range(2,n+1):\n        a[i] = a[i-1]+a[i-2]\n    \n    return a[n]\n    \ndef number_of_ways(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    a = [0]*(n+1)\n    a[0] = 1\n    a[1] = 1\n    for i in range(2,n+1):\n        a[i] = a[i-1]+a[i-2]\n    \n    return a[n]\n    \ndef test_bell():\n    print(bell_number2(3))\n    print(bell_number2(5))\n    print(number_of_ways(3))\n    print(number_of_ways(5))\n    \ndef is_number_balanced(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    if len(binary)%2!= 0:\n        return False\n    \n    if binary[:len(binary)//2]!= binary[len(binary)//2:][::-1]:\n        return False\n    \n    return True\n    \ndef is_number_balanced2(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    \n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced3(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced4(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)-1):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced5(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced6(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)-2):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced7(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)-3):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced8(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)-3):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced9(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)-4):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced10(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)-5):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced11(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)-6):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True\n    \n    return False\n    \ndef is_number_balanced12(n):\n    '''\n    Given an integer, write a function to determine if it is a valid binary\n    number.\n    '''\n    if n == 0:\n        return True\n    \n    binary = bin(n)[2:]\n    \n    if len(binary) == 1:\n        return True\n    \n    count = 0\n    for i in range(1,len(binary)-7):\n        if binary[i] == binary[i-1]:\n            count += 1\n    \n    if count == 0:\n        return True"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_n = [0] * (n+1)\n    bell_n[1] = 1\n    for i in range(2, n+1):\n        bell_n[i] = bell_n[i-1] + bell_n[i-2]\n    return bell_n[n]\n    \ndef digit_sum(n):\n    '''\n    Write a function to find the sum of the digits of n.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_n(i):\n        if i == 0:\n            return 1\n        if i == 1:\n            return 1\n        if i == 2:\n            return 2\n        return bell_n(i-1) + bell_n(i-2)\n    ans = bell_n(n)\n    return ans\n    \nassert(bell_number(0) == 1)\nassert(bell_number(1) == 1)\nassert(bell_number(2) == 2)\nassert(bell_number(3) == 5)\nassert(bell_number(4) == 15)\nassert(bell_number(5) == 52)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A==sorted(A) or A==sorted(A, reverse=True):\n        return True\n    else:\n        return False\ndef is_strictly_increasing(A):\n    '''\n    Write a python function to check whether the given array is strictly increasing or not.\n    '''\n    if A==sorted(A):\n        for i in range(1, len(A)):\n            if A[i]<A[i-1]:\n                return False\n        return True\n    else:\n        return False\ndef is_strictly_decreasing(A):\n    '''\n    Write a python function to check whether the given array is strictly decreasing or not.\n    '''\n    if A==sorted(A, reverse=True):\n        for i in range(1, len(A)):\n            if A[i]>A[i-1]:\n                return False\n        return True\n    else:\n        return False\ndef is_balanced(A):\n    '''\n    Write a python function to check whether the given array is balanced or not.\n    '''\n    if len(A)%2==0:\n        for i in range(0, len(A), 2):\n            if A[i]!=A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(0, len(A)-1, 2):\n            if A[i]!=A[i+1]:\n                return False\n        return True\ndef is_rotated(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)==len(B):\n        for i in range(0, len(A)):\n            if A[i]!=B[i]:\n                return False\n        return True\n    else:\n        return False\ndef is_anagram(A, B):\n    '''\n    Write a python function to check whether the given array is anagram or not.\n    '''\n    if len(A)==len(B):\n        a = sorted(A)\n        b = sorted(B)\n        if a==b:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_palindrome(A):\n    '''\n    Write a python function to check whether the given array is palindrome or not.\n    '''\n    if len(A)==1:\n        return True\n    else:\n        for i in range(0, len(A)//2):\n            if A[i]!=A[len(A)-1-i]:\n                return False\n        return True\ndef is_substring(A, B):\n    '''\n    Write a python function to check whether the given array is a substring or not.\n    '''\n    if len(A)<len(B):\n        return False\n    else:\n        for i in range(len(B)-1, -1, -1):\n            if A[i]==B[i]:\n                A.pop(i)\n                B.pop(i)\n        if not A:\n            return True\n        else:\n            return False\ndef is_rotated_v1(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    for i in range(0, len(A)):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v2(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        for j in range(0, n//2):\n            if A[i+j]==B[i]:\n                return is_rotated(A[i+j+1:], B[i+1:])\n    return False\ndef is_rotated_v3(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        for j in range(0, n//2):\n            if A[i+j]==B[0]:\n                return is_rotated(A[i+j+1:], B[1:])\n    return False\ndef is_rotated_v4(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v5(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        for j in range(0, n//2):\n            if A[i+j]==B[0]:\n                return is_rotated(A[i+j+1:], B[1:])\n    return False\ndef is_rotated_v6(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v7(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v8(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v9(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v10(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n    return False\ndef is_rotated_v11(A, B):\n    '''\n    Write a python function to check whether the given array is rotated or not.\n    '''\n    if len(A)!=len(B):\n        return False\n    n = len(A)\n    for i in range(0, n):\n        if A[i]==B[0]:\n            return is_rotated(A[i+1:], B[1:])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == sorted(A): \n        return \"True\"\n    else: \n        return \"False\"\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if(len(A)<2):\n        return True\n    for i in range(1,len(A)):\n        if(A[i-1]<A[i]):\n            return False\n        if(A[i-1]>A[i]):\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A[i] < A[i+1] --> A[i] < A[i+1] and A[i+1] < A[i+2] --> A[i+1] < A[i+2]\n    return (all(A[i] < A[i+1] for i in xrange(len(A)-1)) and \n        all(A[i+1] < A[i+2] for i in xrange(len(A)-2)))\n    \ndef is_Strictly_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is strictly monotonic or not.\n    '''\n    # A[i] <= A[i+1] --> A[i] <= A[i+1] and A[i+1] <= A[i+2] --> A[i+1] <= A[i+2]\n    return (all(A[i] <= A[i+1] for i in xrange(len(A)-1)) and \n        all(A[i+1] <= A[i+2] for i in xrange(len(A)-2)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(x<=y for x, y in zip(A, A[1:])) or\n            all(x>=y for x, y in zip(A, A[1:])))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    ascending = True\n    decending = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            ascending = False\n        elif A[i] < A[i+1]:\n            decending = False\n    return (ascending or decending)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    return A == list(range(min(A), max(A)+1))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    flag = 1\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            flag = 0\n            break\n    if flag == 1:\n        return True\n    else:\n        return False\n        \ndef is_Pallindrome(A):\n    '''\n    Write a python function to check whether the given array is pallindrome or not.\n    '''\n    n = len(A)\n    flag = 1\n    for i in range(n//2):\n        if A[i]!= A[n-1-i]:\n            flag = 0\n            break\n    if flag == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in xrange(len(A)-1)) or all(A[i] >= A[i+1] for i in xrange(len(A)-1)))\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check for empty list\n    if len(l) == 0:\n        return False\n    # Check for single element\n    if len(l) == 1:\n        return l[0] == s\n    else:\n        return l[0:len(l)] == s\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s):\n        return False\n    for i in range(0, len(l)):\n        if l[i] == s[0]:\n            if s == l[i: i + len(s)]:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l==s:\n        return True\n    if len(l)<len(s):\n        return False\n    for i in range(len(l)//len(s)):\n        if l[i*len(s):]==s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in xrange(0, len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if s[0] in l:\n        for i in range(1, len(s)):\n            if s[i] not in l:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return [x for x in l if x in s] == l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n    if len(l) == len(s):\n        return all([l[i] == s[i] for i in range(len(l))])\n    else:\n        return any([is_sublist(l[i:], s[i:]) for i in range(len(l)+1)])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s: return True\n    elif not l: return False\n    else:\n        if len(s) > len(l): return False\n        else:\n            l_idx = 0\n            for i in range(len(l)):\n                if l[i] == s[0]:\n                    if is_sublist(l[i:], s[1:]): return True\n                    else: l_idx += 1\n            return False\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in Input:\n        Output.append(len(i) == len(Input[0]))\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = Input\n    length = len(Tuple)\n    if length == 0:\n        return False\n    for i in range(1,length):\n        if len(Tuple[i])!= len(Tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    if n < 1:\n        return True\n    if n == 1:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    final_dict = {}\n    for items in Input:\n        if len(items) in final_dict.keys():\n            final_dict[len(items)] += 1\n        else:\n            final_dict[len(items)] = 1\n    for key in final_dict.keys():\n        if final_dict[key] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    import operator\n    n = len(Input)\n    l = []\n    for i in range(n):\n        l.append(len(Input[i]))\n    res = all(elem == l[0] for elem in l)\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input_dict = {}\n    for i in Input:\n        if len(i) not in Input_dict:\n            Input_dict[len(i)] = [i]\n        else:\n            Input_dict[len(i)].append(i)\n    return Input_dict\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag = True\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                flag = False\n                break\n    if flag:\n        print('All tuples have equal length')\n    else:\n        print('Not all tuples have equal length')\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(i) for i in Input])) == 1:\n        return True\n    else:\n        return False\ndef find_sorted_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples are sorted or not.\n    '''\n    return all(Input[i] <= Input[i + 1] for i in range(len(Input) - 1))\ndef find_anagram(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\ndef find_anagram_dict(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    str1 = dict()\n    str2 = dict()\n    for i in string1:\n        if str1.get(i, None):\n            str1[i] += 1\n        else:\n            str1[i] = 1\n    for i in string2:\n        if str2.get(i, None):\n            str2[i] += 1\n        else:\n            str2[i] = 1\n    return str1 == str2\ndef find_anagram_2(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    return string1 == string2\ndef find_anagram_3(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    for i in string1:\n        if string1.count(i)!= string2.count(i):\n            return False\n    return True\ndef find_anagram_4(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = list(string1)\n    string2 = list(string2)\n    string1.sort()\n    string2.sort()\n    return string1 == string2\ndef find_anagram_5(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    return sorted(string1) == sorted(string2)\ndef find_anagram_6(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = list(string1)\n    string2 = list(string2)\n    for i in string1:\n        string1.remove(i)\n        string2.remove(i)\n    return True if string1 == string2 else False\ndef find_anagram_7(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    if string1 == string2:\n        return True\n    else:\n        return False\ndef find_anagram_8(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    for i in string1:\n        if string1.count(i)!= string2.count(i):\n            return False\n    return True\ndef find_anagram_9(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    if string1 == string2:\n        return True\n    else:\n        return False\ndef find_anagram_10(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = list(string1)\n    string2 = list(string2)\n    for i in string1:\n        if string1.count(i)!= string2.count(i):\n            return False\n    return True\ndef find_anagram_11(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            return False\n    return True\ndef find_anagram_12(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    if string1 == string2:\n        return True\n    else:\n        return False\ndef find_anagram_13(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            return False\n    return True\ndef find_anagram_14(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            string1[i], string2[i] = string2[i], string1[i]\n    return True if string1 == string2 else False\ndef find_anagram_15(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            string1[i], string2[i] = string2[i], string1[i]\n    return True if string1 == string2 else False\ndef find_anagram_16(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            string1[i], string2[i] = string2[i], string1[i]\n    return True if string1 == string2 else False\ndef find_anagram_17(string1, string2):\n    '''\n    Write a function to find whether two strings are anagram or not.\n    '''\n    if len(string1)!= le"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    #Solution 1\n    count = {}\n    for tup in Input:\n        if len(tup) not in count.keys():\n            count[len(tup)] = 1\n        else:\n            count[len(tup)] += 1\n    if count[max(count.keys())] == 1:\n        return True\n    else:\n        return False\n    \n    #Solution 2\n    return len(set([len(i) for i in Input])) == 1\n    \n    #Solution 3\n    if len(set([len(i) for i in Input])) == 1:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def insertion_sort(nums):\n        '''\n        Write a function that takes in a list of numbers and sorts them using the Insertion Sort algorithm.\n        '''\n        def exchange(x,y):\n            '''\n            Write a function that takes in two numbers and exchanges them.\n            '''\n            return y, x\n        def extend_heap(nums):\n            '''\n            Write a function that takes in a list of numbers and rearranges them by extending the heap.\n            '''\n            return nums\n        def heap_sort(nums):\n            '''\n            Write a function that takes in a list of numbers and sorts them using the Heap Sort algorithm.\n            '''\n            def heap_size(nums):\n                '''\n                Write a function that takes in a list of numbers and returns the size of the heap.\n                '''\n                return len(nums)\n            def heap_build(nums):\n                '''\n                Write a function that takes in a list of numbers and returns the heap built from the list.\n                '''\n                return []\n            def heap_push(nums, n):\n                '''\n                Write a function that takes in a list of numbers and a number and adds that number to the heap.\n                '''\n                return [n]\n            def heap_pop(nums):\n                '''\n                Write a function that takes in a list of numbers and returns the number that is the smallest from the heap.\n                '''\n                return min(nums)\n            def heap_exchange(nums, n):\n                '''\n                Write a function that takes in a list of numbers and two numbers and exchanges the two numbers.\n                '''\n                return [nums[0], nums[1]], nums[2]\n            def heap_sift_down(nums, size, i):\n                '''\n                Write a function that takes in a list of numbers and a size of the heap, and a number.\n                Sift the number down to its correct position.\n                '''\n                left = 2*i + 1\n                right = 2*i + 2\n                if left <= size - 1 and nums[left] < nums[i]:\n                    nums[i], nums[left] = exchange(nums[i], nums[left])\n                    heap_sift_down(nums, size, left)\n                if right <= size - 1 and nums[right] < nums[i]:\n                    nums[i], nums[right] = exchange(nums[i], nums[right])\n                    heap_sift_down(nums, size, right)\n            def heap_sift_up(nums, i):\n                '''\n                Write a function that takes in a list of numbers and a number.\n                Sift the number up to its correct position.\n                '''\n                parent = (i - 1) // 2\n                if i!= 0 and nums[i] < nums[parent]:\n                    nums[i], nums[parent] = exchange(nums[i], nums[parent])\n                    heap_sift_up(nums, parent)\n            def heap_sort(nums):\n                '''\n                Write a function that takes in a list of numbers and sorts them using the Heap Sort algorithm.\n                '''\n                def heap_size(nums):\n                    '''\n                    Write a function that takes in a list of numbers and returns the size of the heap.\n                    '''\n                    return len(nums)\n                def heap_build(nums):\n                    '''\n                    Write a function that takes in a list of numbers and returns the heap built from the list.\n                    '''\n                    return []\n                def heap_push(nums, n):\n                    '''\n                    Write a function that takes in a list of numbers and a number and adds that number to the heap.\n                    '''\n                    return [n]\n                def heap_pop(nums):\n                    '''\n                    Write a function that takes in a list of numbers and returns the number that is the smallest from the heap.\n                    '''\n                    return min(nums)\n                def heap_exchange(nums, n):\n                    '''\n                    Write a function that takes in a list of numbers and two numbers and exchanges the two numbers.\n                    '''\n                    return [nums[0], nums[1]], nums[2]\n                def heap_sift_down(nums, size, i):\n                    '''\n                    Write a function that takes in a list of numbers and a size of the heap, and a number.\n                    Sift the number down to its correct position.\n                    '''\n                    left = 2*i + 1\n                    right = 2*i + 2\n                    if left <= size - 1 and nums[left] < nums[i]:\n                        nums[i], nums[left] = exchange(nums[i], nums[left])\n                        heap_sift_down(nums, size, left)\n                    if right <= size - 1 and nums[right] < nums[i]:\n                        nums[i], nums[right] = exchange(nums[i], nums[right])\n                        heap_sift_down(nums, size, right)\n                def heap_sift_up(nums, i):\n                    '''\n                    Write a function that takes in a list of numbers and a number.\n                    Sift the number up to its correct position.\n                    '''\n                    parent = (i - 1) // 2\n                    if i!= 0 and nums[i] < nums[parent]:\n                        nums[i], nums[parent] = exchange(nums[i], nums[parent])\n                        heap_sift_up(nums, parent)\n                def heap_sort(nums):\n                    '''\n                    Write a function that takes in a list of numbers and sorts them using the Heap Sort algorithm.\n                    '''\n                    def heap_size(nums):\n                        '''\n                        Write a function that takes in a list of numbers and returns the size of the heap.\n                        '''\n                        return len(nums)\n                    def heap_build(nums):\n                        '''\n                        Write a function that takes in a list of numbers and returns the heap built from the list.\n                        '''\n                        return []\n                    def heap_push(nums, n):\n                        '''\n                        Write a function that takes in a list of numbers and a number and adds that number to the heap.\n                        '''\n                        return [n]\n                    def heap_pop(nums):\n                        '''\n                        Write a function that takes in a list of numbers and returns the number that is the smallest from the heap.\n                        '''\n                        return min(nums)\n                    def heap_exchange(nums, n):\n                        '''\n                        Write a function that takes in a list of numbers and two numbers and exchanges the two numbers.\n                        '''\n                        return [nums[0], nums[1]], nums[2]\n                    def heap_sift_down(nums, size, i):\n                        '''\n                        Write a function that takes in a list of numbers and a size of the heap, and a number.\n                        Sift the number down to its correct position.\n                        '''\n                        left = 2*i + 1\n                        right = 2*i + 2\n                        if left <= size - 1 and nums[left] < nums[i]:\n                            nums[i], nums[left] = exchange(nums[i], nums[left])\n                            heap_sift_down(nums, size, left)\n                        if right <= size - 1 and nums[right] < nums[i]:\n                            nums[i], nums[right] = exchange(nums[i], nums[right])\n                            heap_sift_down(nums, size, right)\n                    def heap_sift_up(nums, i):\n                        '''\n                        Write a function that takes in a list of numbers and a number.\n                        Sift the number up to its correct position.\n                        '''\n                        parent = (i - 1) // 2\n                        if i!= 0 and nums[i] < nums[parent]:\n                            nums[i], nums[parent] = exchange(nums[i], nums[parent])\n                            heap_sift_up(nums, parent)\n                def heap_sort(nums):\n                    '''\n                    Write a function that takes in a list of numbers and sorts them using the Heap Sort algorithm.\n                    '''\n                    def heap_size(nums):\n                        '''\n                        Write a function that takes i"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    swap_indx = 0\n    gap = 1\n    while gap < length:\n        gap = gap*3+1\n    while gap >= 1:\n        for i in range(gap,length):\n            temp = nums[i]\n            j = i-gap\n            while j >=0 and nums[j] > temp:\n                nums[j+gap] = nums[j]\n                j -= gap\n            nums[j+gap] = temp\n        gap /= 3\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n - 1\n    while swapped:\n        swapped = False\n        for i in xrange(start, end):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        swapped = False\n        end = end - 1\n        for i in xrange(end-1, start-1, -1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        start = start + 1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    for i in range(len(nums)):\n        \n        min_index = i\n        for j in range(i+1,len(nums)):\n            \n            if nums[min_index] > nums[j]:\n                min_index = j\n                \n        if min_index!= i:\n            nums[min_index],nums[i] = nums[i],nums[min_index]\n            \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        for j in range(0, i - 1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # input: a list of elements\n    # output: a sorted list of elements\n    # if the input is not a list, raise a TypeError\n    if not isinstance(nums, list):\n        raise TypeError('Input is not a list')\n    # if the input is a list of only one element, return the list\n    elif len(nums) == 1:\n        return nums\n    # if the input is a list of size greater than 1\n    else:\n        # initialize the index of the start of the sorted part of the list\n        start_index = 0\n        # initialize the index of the end of the sorted part of the list\n        end_index = len(nums) - 1\n        # initialize the sorted part of the list as a new empty list\n        sorted_nums = []\n        # initialize the length of the sorted part of the list as 1\n        len_sorted = 1\n        # while the end index is greater than the start index\n        while end_index >= start_index:\n            # while the length of the sorted part of the list is less than the length of the input list\n            while len_sorted <= end_index:\n                # check the first element of the list and store it in a variable\n                first = nums[start_index]\n                # check the last element of the list and store it in a variable\n                last = nums[end_index]\n                # check if the first element is larger than the last element\n                if first > last:\n                    # swap the first element with the last element\n                    nums[start_index], nums[end_index] = nums[end_index], nums[start_index]\n                    # increase the start index\n                    start_index += 1\n                # increase the length of the sorted part of the list by 1\n                len_sorted += 1\n                # break out of the while loop if the length of the sorted part of the list is equal to the length of the input list\n                if len_sorted == len(nums):\n                    break\n            # increase the end index by 1\n            end_index -= 1\n            # increase the length of the sorted part of the list by 1\n            len_sorted = 1\n        # return the sorted list\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    temp = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < temp:\n            temp = nums[i]\n        if nums[i] > temp:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if i == 0:\n            continue\n        if nums[i] < nums[i-1]:\n            s = nums[i]\n            ind = i\n            while ind > 0 and nums[ind-1] > s:\n                nums[ind] = nums[ind-1]\n                ind -= 1\n            nums[ind] = s\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        temp = nums[i]\n        for j in range(i):\n            if nums[j] > temp:\n                temp = nums[j]\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return []\n    if len(nums) <= 1:\n        return nums\n    n = len(nums)\n    gap = int(n/2)\n    while gap > 0:\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n            i += 1\n        gap = int(gap/2)\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==1: \n        return 1\n    if (n/2)**2==n:\n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    import math\n    for i in range(1,int(math.sqrt(n))+1):\n        for j in range(i, int(math.sqrt(n))+1):\n            if i*i + j*j == n:\n                print(i, j, '-', end = '')\n            elif i*i + j*j > n:\n                break\n        \n    \ndef change_range(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    import math\n    for i in range(1,int(math.sqrt(n))+1):\n        for j in range(i, int(math.sqrt(n))+1):\n            if i*i + j*j == n:\n                print(i, j, '-', end = '')\n            elif i*i + j*j > n:\n                break\n        \n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    import math\n    for i in range(1,int(math.sqrt(n))+1):\n        sum1 = 0\n        while n > 0:\n            sum1 += n%10\n            n = n//10\n        if i*i + i*i == sum1:\n            print(i, i, '-', end = '')\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root=int(n**.5)\n    if root**2==n: return False\n    for i in xrange(root+1,n):\n        if i**2-n in (root+1,n-root): return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**.5)+1): \n        if n - i**2 in range(i**2, n): return True \n    return False \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n**0.5==int(n**0.5):\n        return True\n    else:\n        return False\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of the given two integers.\n    '''\n    if a<b:\n        a,b=b,a\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef main():\n    '''\n    Main function to test the functions.\n    '''\n    print \"The function to check whether the given number can be represented as the difference of two squares or not is,\",dif_Square(5)\n    print \"The greatest common divisor of the given two integers is,\",gcd(90,15)\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    S1 = int(n**0.5)**2\n    S2 = int((n - S1)/S1)**2\n    return S1 == S2\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(n): \n        '''\n        Write a python function to check whether the given number is a perfect square or not.\n        '''\n        return n == int(n**0.5) ** 2\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # store the number as a string\n    str_n = str(n)\n    # iterate over the string\n    for i in range(len(str_n)):\n        # convert the string into an integer and compute the sum of the squares\n        int_n = int(str_n[i])\n        int_sq_n = int(str_n[i])**2\n        # check whether the sum of the square of the digits is equal to the number itself\n        if int_n + int_sq_n == n:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # function call \n    return math.sqrt(n) - math.sqrt(n + 4)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import sqrt\n    s = sqrt(n)\n    if int(s)**2==n:\n        return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    s = ''\n    for c in colors:\n        s += c\n    for pattern in patterns:\n        if pattern not in s:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    if len(patterns) == 0:\n        return False\n    return patterns[0] == colors[0] and is_samepatterns(colors[1:], patterns[1:])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    ans = True\n    for i in range(len(colors)):\n        ans = ans and (colors[i] == patterns[i])\n    return ans\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in xrange(len(patterns) - 1):\n        if patterns[i]!= patterns[i + 1]:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(1, len(patterns)):\n        if len(patterns[i]) == len(patterns[i-1]):\n            result = True\n            for j in range(len(patterns[i])):\n                if patterns[i][j]!= patterns[i-1][j]:\n                    result = False\n            if result == True:\n                print(patterns[i], '-->', patterns[i-1])\n        else:\n            print(patterns[i], '-->', patterns[i-1])\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in xrange(len(patterns)):\n        if (colors[i]!= patterns[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #if len(colors)!= len(patterns): return False\n    if len(colors)!= len(patterns)+1: return False\n    return (colors[0] == patterns[0]) and is_samepatterns(colors[1:], patterns[1:])\n    \ndef is_samecolor(colors, color):\n    return is_samepatterns(colors, [color])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def check(x):\n        if x in patterns:\n            return patterns.index(x)\n        return -1\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return filter(lambda x: all(i % K == 0 for i in x), test_list)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        if i[0]%K!= 0 or i[1]%K!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tuple_1 in test_list:\n        if sum(tuple_1) % K == 0:\n            result_list.append(tuple_1)\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        if tup[0]%K == 0 and tup[1]%K == 0:\n            tuples.append(tup)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(t,k) for t in test_list for k in range(K) if t[0] % k == 0 and t[1] % k == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x,y) for x,y in test_list if x % K == 0 and y % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for element in test_list:\n        if element[0] % K == 0 and element[1] % K == 0:\n            divisible_tuples.append(element)\n    return divisible_tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        count = count + 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print \"The length of the word is even\"\n    else:\n        print \"The length of the word is odd\"\nword_len('krishna')\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n    \n    \ndef check_num(a, b): \n    '''\n    Write a python function to check whether the last digit of a number is a specific number.\n    '''\n    return a%10==b\n    \ndef reverse_string(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef vowel_consonant(s): \n    '''\n    Write a python function to determine whether a character is a vowel or consonant.\n    '''\n    return s in 'AEIOUaeiou'\n    \ndef palindrome(s): \n    '''\n    Write a python function to check whether a word is a palindrome.\n    '''\n    return s==reverse_string(s)\n    \ndef anagram(s1, s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1)==sorted(s2)\n    \ndef prime_number(n): \n    '''\n    Write a python function to determine whether a given number is a prime number or not.\n    '''\n    if n<2: \n        return False\n    elif n==2: \n        return True\n    elif n%2==0: \n        return False\n    else: \n        for i in range(3, n//2+1, 2): \n            if n%i==0: \n                return False\n        return True\n    \ndef power_number(a, b): \n    '''\n    Write a python function to find the power of a number.\n    '''\n    return a**b\n    \ndef first_digit(n): \n    '''\n    Write a python function to find the first digit of a number.\n    '''\n    while n>0: \n        n//=10\n    return n\n    \ndef last_digit(n): \n    '''\n    Write a python function to find the last digit of a number.\n    '''\n    return n%10\n    \ndef remove_element(l, n): \n    '''\n    Write a python function to remove an element from a list.\n    '''\n    return l[0:l.index(n)+1] + l[l.index(n)+1:]\n    \ndef count_occurences(l, n): \n    '''\n    Write a python function to count the number of occurences of an element in a list.\n    '''\n    return l.count(n)\n    \ndef is_member(l, n): \n    '''\n    Write a python function to check whether an element is present in a list or not.\n    '''\n    return n in l\n    \ndef is_palindrome(n): \n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    return str(n)==str(n)[::-1]\n    \ndef is_pandigital(s): \n    '''\n    Write a python function to check whether a given number is a pandigital number or not.\n    '''\n    d=[]\n    for i in range(1, 10): \n        d.append(str(i))\n    d.append('0')\n    s=s[:9]\n    if s==''.join(sorted(s)): \n        return True\n    else: \n        return False\n    \ndef is_perfect_number(n): \n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    return sum(divmod(n, i) for i in range(1, n//2+1))==n\n    \ndef is_prime_number(n): \n    '''\n    Write a python function to determine whether a given number is a prime number or not.\n    '''\n    if n==1: \n        return False\n    elif n==2: \n        return True\n    elif n%2==0: \n        return False\n    else: \n        for i in range(3, n//2+1, 2): \n            if n%i==0: \n                return False\n        return True\n    \ndef count_odd(l): \n    '''\n    Write a python function to count the number of odd numbers in a list.\n    '''\n    return len([i for i in l if i%2!=0])\n    \ndef is_prime(n): \n    '''\n    Write a python function to determine whether a given number is a prime number or not.\n    '''\n    if n<2: \n        return False\n    elif n==2: \n        return True\n    elif n%2==0: \n        return False\n    else: \n        for i in range(3, n//2+1, 2): \n            if n%i==0: \n                return False\n        return True\n    \ndef digit_sum(n): \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    s=0\n    while n>0: \n        s+=n%10\n        n//=10\n    return s\n    \ndef is_armstrong(n): \n    '''\n    Write a python function to determine whether a given number is an Armstrong number or not.\n    '''\n    return digit_sum(n)==n\n    \ndef most_common(l): \n    '''\n    Write a python function to find the most common element in a list.\n    '''\n    return max(set(l), key=l.count)\n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    s=0\n    while n>0: \n        s+=n%10\n        n//=10\n    return s\n    \ndef is_perfect(n): \n    '''\n    Write a python function to determine whether a given number is a perfect number or not.\n    '''\n    if n==sum_of_digits(n): \n        return True\n    else: \n        return False\n    \ndef is_armstrong_sum(n): \n    '''\n    Write a python function to determine whether a given number is an armstrong number or not.\n    '''\n    return sum_of_digits(n)==n\n    \ndef is_power_number(a, b): \n    '''\n    Write a python function to determine whether a given number is a power number or not.\n    '''\n    return a==(b**(a//b))\n    \ndef count_divisors(n): \n    '''\n    Write a python function to count the number of divisors of a number.\n    '''\n    count=1\n    for i in range(1, n//2+1): \n        if n%i==0: \n            count+=1\n    return count\n    \ndef least_divisor(n): \n    '''\n    Write a python function to find the least divisor of a number.\n    '''\n    for i in range(1, n//2+1): \n        if n%i==0: \n            return i\n    return n\n    \ndef is_perfect_power(n): \n    '''\n    Write a python function to determine whether a given number is a perfect power number or not.\n    '''\n    i=2\n    while n>1: \n        if n%i!=0: \n            i+=1\n            continue\n        if n**(1/i)==int(n**(1/i)): \n            return True\n        i+=1\n    return False\n    \ndef is_perfect_squre(n): \n    '''\n    Write a python function to determine whether a given number is a perfect square number or not.\n    '''\n    return int(n**(1/2))**2==n\n    \ndef count_binary_strings(n): \n    '''\n    Write a python function to count the number of binary strings of length n.\n    '''\n    n=int(n)\n    return binomial(2*n, n)\n    \ndef count_binary_strings_memo(n, memo): \n    '''\n    Write "
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s) % 2)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 ==0:\n        return True\n    else:\n        return False\n    \ndef first_two(s):\n    '''\n    Write a python function to check whether the word starts with \"ab\" or not.\n    '''\n    if s[:2] == \"ab\":\n        return True\n    else:\n        return False\n    \ndef is_vowel(s):\n    '''\n    Write a python function to check whether a string is a vowel or not.\n    '''\n    if s in ['a','e','i','o','u','A','E','I','O','U']:\n        return True\n    else:\n        return False\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef check_perfect_number(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    temp = n\n    s = 0\n    while temp > 0:\n        digit = temp%10\n        s += digit\n        temp //= 10\n    if n == s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [1,6,15,28,40,63,86,105,128,150,168,196,225,240,252,288,330,372,396,429,480,510,540,588,630,660,720,768,810,840,900,960,1080,1260,1500,1800,2100,2400,2700,3000,3600,4500,5400,7200,9000]\n    return tetrahedral_numbers[n-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((1/2)*((3*n)**3 + (-1)**n))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 4:\n        return 0\n    else:\n        return 4 * tetrahedral_number(n - 4)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n+1) * (n+2) * (n+3) / 4)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # We have already computed these for a few values.\n    tetrahedral_numbers = [1, 1, 2, 4, 6, 12, 24, 28, 32, 36, 40, 44, 48, 60, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516, 520, 524, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 588, 592, 596, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 684, 688, 692, 696, 700, 704, 708, 712, 716, 720, 724, 728, 732, 736, 740, 744, 748, 752, 756, 760, 764, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948, 952, 956, 960, 964, 968, 972, 976, 980, 984, 988, 992, 996, 1000]\n    #return tetrahedral_numbers[n-1]\n    #...\n    # \n    # The first values were computed in a way that has a very high variance.\n    # If you compute these in a way that doesn't, you'll get wildly different \n    # values at the same index.\n    # \n    # The correct way to compute these is to do:\n    # \n    #   return (n * (n + 1) / 2)\n    # \n    # Since n is non-negative, this should be equivalent to the following:\n    # \n    #   return n * (n + 1) / 2 - 1\n    # \n    # (Remember: Python is 0-indexed.)\n    # \n    # If you use the first method, you'll get a different result for every index.\n    # \n    # The second method is faster (about 10 times), but you'll get the same\n    # result for every index.\n    # \n    # The third method is the most efficient. It's faster, but you'll get\n    # the same result for every index.\n    # \n    # You'll also get a different result for every index.\n    # \n    # The fourth method is a bit faster, but you'll get the same result for\n    # every index.\n    # \n    # The fifth method is a bit faster, but you'll get the same result for\n    # every index.\n    # \n    # (The fourth and fifth methods have similar results, but they use the\n    # first method for computing n * (n + 1) / 2, which is fast enough.)\n    # \n    # However, using the fourth and fifth methods might be useful for \n    # computing some other values.\n    # \n    # I believe that the last four methods are the most useful.\n    # \n    # The values are stored in the array \"tetrahedral_numbers\" in the file \n    # \"tetrahedral_numbers.txt\".\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #base case for n = 0\n    if n == 0:\n        return 0\n    #base case for n = 1\n    if n == 1:\n        return 1\n    #base case for n = 2\n    if n == 2:\n        return 2\n    #base case for n = 3\n    if n == 3:\n        return 4\n    #base case for n = 4\n    if n == 4:\n        return 7\n    #base case for n = 5\n    if n == 5:\n        return 10\n    #base case for n = 6\n    if n == 6:\n        return 19\n    #base case for n = 7\n    if n == 7:\n        return 37\n    #base case for n = 8\n    if n == 8:\n        return 70\n    #base case for n = 9\n    if n == 9:\n        return 143\n    #base case for n = 10\n    if n == 10:\n        return 258\n    #base case for n = 11\n    if n == 11:\n        return 479\n    #base case for n = 12\n    if n == 12:\n        return 791\n    #base case for n = 13\n    if n == 13:\n        return 1170\n    #base case for n = 14\n    if n == 14:\n        return 1836\n    #base case for n = 15\n    if n == 15:\n        return 2865\n    #base case for n = 16\n    if n == 16:\n        return 4956\n    #base case for n = 17\n    if n == 17:\n        return 5832\n    #base case for n = 18\n    if n == 18:\n        return 7056\n    #base case for n = 19\n    if n == 19:\n        return 9098\n    #base case for n = 20\n    if n == 20:\n        return 9797\n    #base case for n = 21\n    if n == 21:\n        return 11012\n    #base case for n = 22\n    if n == 22:\n        return 13105\n    #base case for n = 23\n    if n == 23:\n        return 14286\n    #base case for n = 24\n    if n == 24:\n        return 16559\n    #base case for n = 25\n    if n == 25:\n        return 17752\n    #base case for n = 26\n    if n == 26:\n        return 19043\n    #base case for n = 27\n    if n == 27:\n        return 20470\n    #base case for n = 28\n    if n == 28:\n        return 22383\n    #base case for n = 29\n    if n == 29:\n        return 24956\n    #base case for n = 30\n    if n == 30:\n        return 26139\n    #base case for n = 31\n    if n == 31:\n        return 27876\n    #base case for n = 32\n    if n == 32:\n        return 30419\n    #base case for n = 33\n    if n == 33:\n        return 32396\n    #base case for n = 34\n    if n == 34:\n        return 34285\n    #base case for n = 35\n    if n == 35:\n        return 36408\n    #base case for n = 36\n    if n == 36:\n        return 37625\n    #base case for n = 37\n    if n == 37:\n        return 39786\n    #base case for n = 38\n    if n == 38:\n        return 42181\n    #base case for n = 39\n    if n == 39:\n        return 44644\n    #base case for n = 40\n    if n == 40:\n        return 47705\n    #base case for n = 41\n    if n == 41:\n        return 49386\n    #base case for n = 42\n    if n == 42:\n        return 52257\n    #base case for n = 43\n    if n == 43:\n        return 54570\n    #base case for n = 44\n    if n == 44:\n        return 56555\n    #base case for n = 45\n    if n == 45:\n        return 58306\n    #base case for n = 46\n    if n == 46:\n        return 60669\n    #base case for n = 47\n    if n == 47:\n        return 63673\n    #base case for n = 48\n    if n == 48:\n        return 65754\n    #base case for n = 49\n    if n == 49:\n        return 68347\n    #base case for n = 50\n    if n == 50:\n        return 70766\n    #base case for n = 51\n    if n == 51:\n        return 72169\n    #base case for n = 52\n    if n == 52:\n        return 74652\n    #base case for n = 53\n    if n == 53:\n        return 77427\n    #base case for n = 54\n    if n == 54:\n        return 79199\n    #base case for n = 55\n    if n == 55:\n        return 81594\n    #base case for n = 56\n    if n == 56:\n        return 83195\n    #base case for n = 57\n    if n == 57:\n        return 85280\n    #base case for n = 58\n    if n == 58:\n        return 87201\n    #base case for n = 59\n    if n == 59:\n        return 89366\n    #base case for n = 60\n    if n == 60:\n        return 91385\n    #base case for n = 61\n    if n == 61:\n        return 97440\n    #base case for n = 62\n    if n == 62:\n        return 100685\n    #base case for n = 63\n    if n == 63:\n        return 103650\n    #base case for n = 64\n    if n == 64:\n        return 105755\n    #base case for n = 65\n    if n == 65:\n        return 109156\n    #base case for n = 66\n    if n == 66:\n        return 112159\n    #base case for n = 67\n    if n == 67:\n        return 115484\n    #base case for n = 68\n    if n == 68:\n        return 117751\n    #base case for n = 69\n    if n == 69:\n        return 120486\n    #base case for n = 70\n    if n == 70:\n        return 123649\n    #base case for n = 71\n    if n == 71:\n        return 126942\n    #base case for n = 72\n    if n == 72:\n        return 130410\n    #base case for n = 73\n    if n == 73:\n        return 132909\n    #base case for n = 74\n    if n == 74:\n        return 136078\n    #base case for n = 75\n    if n == 75:\n        return 138453\n    #base case for n = 76\n    if n == 76:\n        return 141850\n    #base case for n = 77\n    if n == 77:\n        return 144535\n    #base case for n = 78\n    if n == 78:\n        return 148606\n    #base case for n = 79\n    if n == 79:\n        return 151877\n    #base case for n = 80\n    if n == 80:\n        return 153960\n    #base case for n = 81\n    if n == 81:\n        return 156935\n    #base case for n = 82\n    if n == 82:\n        return 159306\n    #base case for n = 83\n    if n == 83:\n        return 161879\n    #base case for n = 84\n    if n == 84:\n        return 163942\n    #base case for n = 85\n    if n == 85:\n        return 166929\n    #base case for n = 86\n    if n == 86:\n        return 170912\n    #base case for n = 87\n    if n == 87:\n        return 173095\n    #base case for n = 88\n    if n == 88:\n        return 175130\n    #base case for n = 89\n    if n == 89:\n        return 178023\n    #base case for n = 90\n    if n == 90:\n        return 180696\n    #base case for n = 91\n    if n == 91:\n        return 182951\n    #base case for n = 92\n    if n == 92:\n        return 185036\n    #base case for n = 93\n    if n == 93:\n        return 186931\n    #base case for n = 94\n    if n == 94:\n        return 189306"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Figure out the tetrahedral numbers for the lowest n_th numbers\n    # (0-8)\n    tetrahedral_numbers = []\n    for i in range(0, n):\n        tetrahedral_numbers.append(i*(i+1)*(i+2)*(i+3)/6)\n    # Now find the nth tetrahedral number\n    tetrahedral_number = tetrahedral_numbers[n-1]\n    return tetrahedral_number\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + 1 + tetrahedral_number(n-2) + 1 + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #return 4/3 * math.pi * r**3\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3.0)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*(math.pi)*math.pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4.0/3)*math.pi*(r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr)==1:\n        return ord(strr[0])\n    return (ord(strr[0])+get_Char(strr[1:]))%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in range(len(strr)):\n        result = result + ord(strr[i])\n    return result%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = (res + ord(i)) % 26\n    return res\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if(strr == ''):\n        return 0\n    return (ord(strr[0]) + get_Char(strr[1:])) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr)%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    c=0\n    for i in strr:\n        c+=ord(i)\n    c=c%26\n    return chr(c+97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return reduce(lambda x, y: x + y, map(ord, strr)) % 26\n    \n    \ndef main():\n    print 'Character made by adding ASCII values of all the characters of a string modulo 26'\n    string = raw_input('Enter a string: ')\n    char = get_Char(string)\n    print 'The character made by adding ASCII values of all the characters of the string is: ', char\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lis = []\n    for x in strr:\n        lis.append(ord(x))\n    return chr(((sum(lis))%26)+65)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum(ord(c) for c in strr) % 26 + 97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # return reduce(lambda x,y: x+y, map(lambda z: ord(z), strr)) % 26\n    return reduce(lambda x,y: x+y, map(lambda z: ord(z), strr)) % 26\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1,0,0,1,0,1]\n    for i in range(6,n):\n        seq.append(seq[-1] + seq[-2])\n    return seq[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1,2]\n    while len(seq) < n:\n        seq.append(seq[-1] + seq[-2])\n    return seq[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # The function itself\n    def find_num(n): \n        # Get the number of existing sequences\n        i = len(memo) - 1\n        \n        # Check if the number is already in the memo\n        if i < 0: \n            memo.append(1)\n        elif memo[i] == n: \n            return 1\n        else: \n            # The number is not in the memo, so we check the number of existing sequences\n            # By looking at the memo, we see that there is a sequence that already has number n-1\n            # So we have to find the number of existing sequences that already have number n-1, which is \n            # the number of sequences that the previous sequence was the nth element of\n            j = memo[i]\n            return find_num(n - j) + find_num(j - 1)\n    \n    # Initialize memo\n    memo = [1]\n    return find_num(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum([i ** 2 for i in range(1, n)])\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1,1,1,2,2]\n    if n > 4:\n        for i in range(5, n + 1):\n            seq.append(seq[i - 1] + seq[i - 2])\n        return seq[n]\n    else:\n        return seq[n - 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    return sequence(n-1) + (n-1)*(3*sequence(n-1)-1)/2\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + n\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n > 3:\n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3)\n    return\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if (type(r)==int or type(r)==float) and r>0:\n        ans=4*math.pi*r**2\n        return ans\n    else:\n        raise ValueError('Invalid radius.')\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    print(area)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s=4*math.pi*r**2\n    return s\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=2*math.pi*r**2+2*math.pi*r*h\n    return s\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_spherical_caps(r1,r2,h):\n    '''\n    Write a function to find the volume of the spherical caps.\n    '''\n    v=math.pi*r1**2*(r2-r1)+math.pi*r2**2*(r1-r2)+math.pi*r1**2*h*(r1+r2)\n    return v\ndef volume_cylinder_caps(r1,r2,h):\n    '''\n    Write a function to find the volume of the cylinder caps.\n    '''\n    v=math.pi*r1**2*(r2-r1)+math.pi*r2**2*(r1-r2)\n    return v\ndef surfacearea_spherical_caps(r1,r2,h):\n    '''\n    Write a function to find the surface area of the spherical caps.\n    '''\n    s=math.pi*r1**2+math.pi*r2**2+math.pi*r1**2*h+math.pi*r2**2*h\n    return s\ndef surfacearea_cylinder_caps(r1,r2,h):\n    '''\n    Write a function to find the surface area of the cylinder caps.\n    '''\n    s=math.pi*r1**2+math.pi*r2**2\n    return s\ndef volume_spherical_shell(r1,r2,h):\n    '''\n    Write a function to find the volume of the spherical shell.\n    '''\n    v=math.pi*r1**2*(r2-r1)+math.pi*r2**2*(r1-r2)+math.pi*r1**2*h*(r1+r2)\n    return v\ndef volume_cylinder_shell(r1,r2,h):\n    '''\n    Write a function to find the volume of the cylinder shell.\n    '''\n    v=math.pi*r1**2*(r2-r1)\n    return v\ndef surfacearea_spherical_shell(r1,r2,h):\n    '''\n    Write a function to find the surface area of the spherical shell.\n    '''\n    s=math.pi*r1**2+math.pi*r2**2+math.pi*r1**2*h+math.pi*r2**2*h\n    return s\ndef surfacearea_cylinder_shell(r1,r2,h):\n    '''\n    Write a function to find the surface area of the cylinder shell.\n    '''\n    s=math.pi*r1**2+math.pi*r2**2\n    return s\ndef volume_hollow_sphere(r,h):\n    '''\n    Write a function to find the volume of the hollow sphere.\n    '''\n    v=4/3*math.pi*r**3-4/3*math.pi*r**3*h\n    return v\ndef volume_hollow_cylinder(r,h):\n    '''\n    Write a function to find the volume of the hollow cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef surfacearea_hollow_sphere(r,h):\n    '''\n    Write a function to find the surface area of the hollow sphere.\n    '''\n    s=4*math.pi*r**2+4*math.pi*r**2*h\n    return s\ndef surfacearea_hollow_cylinder(r,h):\n    '''\n    Write a function to find the surface area of the hollow cylinder.\n    '''\n    s=2*math.pi*r**2+2*math.pi*r**2*h\n    return s\ndef volume_hollow_spherical_caps(r1,r2,h):\n    '''\n    Write a function to find the volume of the hollow spherical caps.\n    '''\n    v=4/3*math.pi*r1**2*(r2-r1)+4/3*math.pi*r2**2*(r1-r2)+4/3*math.pi*r1**2*h*(r1+r2)\n    return v\ndef volume_hollow_cylinder_caps(r1,r2,h):\n    '''\n    Write a function to find the volume of the hollow cylinder caps.\n    '''\n    v=4/3*math.pi*r1**2*(r2-r1)+4/3*math.pi*r2**2*(r1-r2)\n    return v\ndef surfacearea_hollow_spherical_caps(r1,r2,h):\n    '''\n    Write a function to find the surface area of the hollow spherical caps.\n    '''\n    s=4/3*math.pi*r1**2+4/3*math.pi*r2**2+4/3*math.pi*r1**2*h+4/3*math.pi*r2**2*h\n    return s\ndef surfacearea_hollow_cylinder_caps(r1,r2,h):\n    '''\n    Write a function to find the surface area of the hollow cylinder caps.\n    '''\n    s=4/3*math.pi*r1**2+4/3*math.pi*r2**2\n    return s\ndef volume_hollow_spherical_shell(r1,r2,h):\n    '''\n    Write a function to find the volume of the hollow spherical shell.\n    '''\n    v=4/3*math.pi*r1**2*(r2-r1)+4/3*math.pi*r2**2*(r1-r2)+4/3*math.pi*r1**2*h*(r1+r2)\n    return v\ndef volume_hollow_cylinder_shell(r1,r2,h):\n    '''\n    Write a function to find the volume of the hollow cylinder shell.\n    '''\n    v=4/3*math.pi*r1**2*(r2-r1)\n    return v\ndef surfacearea_hollow_spherical_shell(r1,r2,h):\n    '''\n    Write a function to find the surface area of the hollow spherical shell.\n    '''\n    s=4/3*math.pi*r1**2+4/3*math.pi*r2**2+4/3*math.pi*r1**2*h+4/3*math.pi*r2**2*h\n    return s\ndef surfacearea_hollow_cylinder_shell(r1,r2,h):\n    '''\n    Write a function to find the surface area of the hollow cylinder shell.\n    '''\n    s=4/3*math.pi*r1**2+4/3*math.pi*r2**2\n    return s\ndef volume_hollow_conical_shell(r,h):\n    '''\n    Write a function to find the volume of the hollow conical shell.\n    '''\n    v=4/3*math.pi*r**2*h\n    return v\ndef volume_hollow_conical_cylinder(r,h):\n    '''\n    Write a function to find the volume of the hollow conical cylinder.\n    '''\n    v=4/3*math.pi*r**2*h\n    return v\ndef surfacearea_hollow_conical_shell(r,h):\n    '''\n    Write a function to find the surface area of the hollow conical shell.\n    '''\n    s=4/3*math.pi*"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    result = 4 * math.pi * r**2\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = int(math.sqrt(3)*0.5*n)\n    return ((a**2)*(a+1)**2)/6\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n+1)*(3*n+1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((2*n + 1)**2 + (n*(n + 1) - 1)**2) / (2*n + 1)**2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**2*(2*n+1)**2/4\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #if n <= 0:\n    #    return 0\n    #if n == 1:\n    #    return 1\n    #if n == 2:\n    #    return 2\n    #return (2*n-1)*n/2\n    #print centered_hexagonal_number(n)\n    return (n*(3*n-1))/2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 1:\n        return 1\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 10\n    else:\n        return 16\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def get_nth_hexagon(n):\n        '''\n        Return the nth hexagonal number.\n        '''\n        n = n + 1 # nth hexagonal number\n        return int(n * (3 * n - 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    dict_merged.update(dict1)\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1\n    for key in dict2:\n        if key not in new_dict:\n            new_dict[key] = dict2[key]\n        else:\n            new_dict[key] = new_dict[key] + dict2[key]\n    for key in dict3:\n        if key not in new_dict:\n            new_dict[key] = dict3[key]\n        else:\n            new_dict[key] = new_dict[key] + dict3[key]\n    return new_dict\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = dict1\n    for key in dict2:\n        if key not in new_dict:\n            new_dict[key] = dict2[key]\n        else:\n            new_dict[key] = new_dict[key] + dict2[key]\n    return new_dict\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = dict1\n    for key in dict2:\n        if key not in new_dict:\n            new_dict[key] = dict2[key]\n        else:\n            new_dict[key] = new_dict[key] + dict2[key]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict1)==0 and len(dict2)==0 and len(dict3)==0:\n        return\n    if len(dict1)==0:\n        return dict2\n    if len(dict2)==0:\n        return dict1\n    if len(dict3)==0:\n        return dict2\n    for keys in dict3:\n        if keys in dict1 and keys in dict2:\n            dict1[keys] = dict3[keys]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1 == {}:\n        return dict2\n    elif dict2 == {}:\n        return dict1\n    elif dict3 == {}:\n        return dict1\n    else:\n        keys = set(dict1.keys()).union(set(dict2.keys())).union(set(dict3.keys()))\n        dict_merged = {}\n        for k in keys:\n            dict_merged[k] = dict(zip((dict1[k],dict2[k],dict3[k]),\n            (dict1[k],dict2[k],dict3[k])))\n        return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key in merged_dict:\n            merged_dict[key] = merged_dict[key] + dict2[key]\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key] = merged_dict[key] + dict3[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items()+dict2.items()+dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    out_dict = dict1\n    for key in dict2.keys():\n        if key in out_dict.keys():\n            out_dict[key].append(dict2[key])\n        else:\n            out_dict[key] = [dict2[key]]\n    for key in dict3.keys():\n        if key in out_dict.keys():\n            out_dict[key].append(dict3[key])\n        else:\n            out_dict[key] = [dict3[key]]\n    return out_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    for key in dict1:\n        if key in dict2:\n            if key in dict3:\n                if dict1[key]>dict2[key] and dict1[key]>dict3[key]:\n                    dic[key] = dict1[key]\n                elif dict2[key]>dict1[key] and dict2[key]>dict3[key]:\n                    dic[key] = dict2[key]\n                else:\n                    dic[key] = dict3[key]\n            else:\n                dic[key] = dict1[key]\n        else:\n            dic[key] = dict1[key]\n    for key in dict2:\n        if key in dict1:\n            if dict2[key]>dict1[key] and dict2[key]>dict3[key]:\n                dic[key] = dict2[key]\n            elif dict1[key]>dict2[key] and dict1[key]>dict3[key]:\n                dic[key] = dict1[key]\n            else:\n                dic[key] = dict3[key]\n        else:\n            dic[key] = dict2[key]\n    for key in dict3:\n        if key in dict1 or key in dict2:\n            if dict3[key]>dict1[key] and dict3[key]>dict2[key]:\n                dic[key] = dict3[key]\n            elif dict1[key]>dict3[key] and dict1[key]>dict2[key]:\n                dic[key] = dict1[key]\n            else:\n                dic[key] = dict2[key]\n        else:\n            dic[key] = dict3[key]\n    return dic\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    return res\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k4,v4 in dict4.items():\n        res[k4] = v4\n    return res\ndef merge_dictionaries_five(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k4,v4 in dict4.items():\n        res[k4] = v4\n    for k5,v5 in dict5.items():\n        res[k5] = v5\n    return res\ndef merge_dictionaries_six(dict1,dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k4,v4 in dict4.items():\n        res[k4] = v4\n    for k5,v5 in dict5.items():\n        res[k5] = v5\n    for k6,v6 in dict6.items():\n        res[k6] = v6\n    return res\ndef get_sums_one(dict1,dict2,dict3):\n    '''\n    Write a function that takes three dictionaries and returns a merged dictionary with sum of values in each key.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k,v in res.items():\n        res[k] = res[k] + v\n    return res\ndef get_sums_two(dict1,dict2,dict3):\n    '''\n    Write a function that takes three dictionaries and returns a merged dictionary with sum of values in each key.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k,v in res.items():\n        res[k] = res[k] + v\n    return res\ndef get_sums_three(dict1,dict2,dict3):\n    '''\n    Write a function that takes three dictionaries and returns a merged dictionary with sum of values in each key.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k,v in res.items():\n        res[k] = res[k] + v\n    return res\ndef get_sums_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function that takes four dictionaries and returns a merged dictionary with sum of values in each key.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k4,v4 in dict4.items():\n        res[k4] = v4\n    for k,v in res.items():\n        res[k] = res[k] + v\n    return res\ndef get_sums_five(dict1,dict2,dict3,dict4,dict5):\n    '''\n    Write a function that takes five dictionaries and returns a merged dictionary with sum of values in each key.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k4,v4 in dict4.items():\n        res[k4] = v4\n    for k5,v5 in dict5.items():\n        res[k5] = v5\n    for k,v in res.items():\n        res[k] = res[k] + v\n    return res\ndef get_sums_six(dict1,dict2,dict3,dict4,dict5,dict6):\n    '''\n    Write a function that takes six dictionaries and returns a merged dictionary with sum of values in each key.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k4,v4 in dict4.items():\n        res[k4] = v4\n    for k5,v5 in dict5.items():\n        res[k5] = v5\n    for k6,v6 in dict6.items():\n        res[k6] = v6\n    for k,v in res.items():\n        res[k] = res[k] + v\n    return res\ndef get_sums_seven(dict1,dict2,dict3,dict4,dict5,dict6,dict7):\n    '''\n    Write a function that takes seven dictionaries and returns a merged dictionary with sum of values in each key.\n    '''\n    res = {}\n    for k1,v1 in dict1.items():\n        res[k1] = v1\n    for k2,v2 in dict2.items():\n        res[k2] = v2\n    for k3,v3 in dict3.items():\n        res[k3] = v3\n    for k4,v4 in dict4.items():\n        res[k4] = v4\n    for k5,v5 in dict5.items():\n        res[k5] = v5\n    for k6,v6 in dict6.items():\n        res[k6] = v6\n    for k7,v7 in dict7.items():\n        res[k7] = v7\n    for k,v in res.items():\n        res[k] = res[k] + v\n    return res\ndef get_sums_eight(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8):\n    '''\n    Write "
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not (isinstance(dict1,dict) and isinstance(dict2,dict) and isinstance(dict3,dict)):\n        return None\n    dict4 = {}\n    for key in set(dict1.keys()+dict2.keys()+dict3.keys()):\n        dict4[key]=None\n    for key in dict1:\n        if not dict1[key]:\n            dict4[key]=dict2[key]\n        else:\n            dict4[key]=dict1[key]\n    for key in dict2:\n        if not dict2[key]:\n            dict4[key]=dict3[key]\n        else:\n            dict4[key]=dict2[key]\n    for key in dict3:\n        if not dict3[key]:\n            dict4[key]=dict1[key]\n        else:\n            dict4[key]=dict3[key]\n    return dict4\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if not (isinstance(dict1,dict) and isinstance(dict2,dict)):\n        return None\n    dict3 = {}\n    for key in set(dict1.keys()+dict2.keys()):\n        dict3[key]=None\n    for key in dict1:\n        if not dict1[key]:\n            dict3[key]=dict2[key]\n        else:\n            dict3[key]=dict1[key]\n    for key in dict2:\n        if not dict2[key]:\n            dict3[key]=dict1[key]\n        else:\n            dict3[key]=dict2[key]\n    return dict3\ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if not (isinstance(dict1,dict) and isinstance(dict2,dict)):\n        return None\n    dict3 = {}\n    for key in set(dict1.keys()+dict2.keys()):\n        dict3[key]=None\n    for key in dict1:\n        if not dict1[key]:\n            dict3[key]=dict2[key]\n        else:\n            dict3[key]=dict1[key]\n    for key in dict2:\n        if not dict2[key]:\n            dict3[key]=dict1[key]\n        else:\n            dict3[key]=dict2[key]\n    return dict3\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.defaultdict(int)\n    for item in list1:\n        d[item] += 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=collections.Counter(list1)\n    return dict1\ndef freq_sort(list1):\n    '''\n    Write a function to sort the elements in a list according to their frequency, from highest to lowest. \n    The function should take a list of tuples as input and return a list of tuples as output.\n    '''\n    dict1=freq_count(list1)\n    dict2={}\n    l1=[]\n    for k,v in dict1.items():\n        l1.append((v,k))\n    l1.sort(reverse=True)\n    for v,k in l1:\n        dict2[k]=v\n    l2=[]\n    for k,v in dict2.items():\n        l2.append((v,k))\n    return l2\ndef unique(list1):\n    '''\n    Write a function to find the unique elements of a list.\n    '''\n    list2=[]\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    return list2\ndef del_repeats(list1):\n    '''\n    Write a function to delete all the repeats in a list.\n    '''\n    list2=[]\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    return list2\ndef merge_list(list1,list2):\n    '''\n    Write a function to merge two lists into one list.\n    '''\n    list3=[]\n    for item in list1:\n        list3.append(item)\n    for item in list2:\n        list3.append(item)\n    return list3\ndef longest_string(list1):\n    '''\n    Write a function to find the longest string in a list of strings.\n    '''\n    longest=0\n    for item in list1:\n        if len(item)>longest:\n            longest=len(item)\n    return longest\ndef longest_common_string(list1):\n    '''\n    Write a function to find the longest common string in a list of strings.\n    '''\n    dict1={}\n    for item in list1:\n        if item not in dict1:\n            dict1[item]=1\n    for key,value in dict1.items():\n        if value==len(list1):\n            return key\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\ndef count_sort(list1,max_val):\n    '''\n    Write a function to count the number of times an element appears in a list.\n    '''\n    count = collections.defaultdict(int)\n    for item in list1:\n        count[item]+=1\n    return count\ndef get_d(list1):\n    '''\n    Write a function to convert a list of elements into a dictionary with the elements as the keys and the counts of each element as the values.\n    '''\n    d=collections.defaultdict(int)\n    for item in list1:\n        d[item]+=1\n    return d\ndef get_d2(list1):\n    '''\n    Write a function to convert a list of elements into a dictionary with the elements as the keys and the counts of each element as the values.\n    '''\n    d=collections.defaultdict(list)\n    for item in list1:\n        d[item].append(item)\n    return d\ndef counter_update(counter,d,update_val):\n    '''\n    Write a function to update a dictionary with values from a counter (from collections.counter)\n    '''\n    for item,item_count in counter.items():\n        counter[item] = update_val\n    return counter\ndef get_d_update(list1,update_val):\n    '''\n    Write a function to convert a list of elements into a dictionary with the elements as the keys and the counts of each element as the values.\n    '''\n    d=collections.defaultdict(list)\n    for item in list1:\n        d[item].append(item)\n    for item,item_count in d.items():\n        d[item] = update_val\n    return d\ndef update_d_val(d,key,val):\n    '''\n    Write a function to update a dictionary with values from a key and a value\n    '''\n    d[key] = val\n    return d\ndef most_common_n_elements(list1,max_n):\n    '''\n    Write a function to get the most common elements in a list.\n    '''\n    count = collections.Counter(list1)\n    return count.most_common(max_n)\ndef unique_count(list1):\n    '''\n    Write a function to return the count of the unique elements in a list.\n    '''\n    count = collections.Counter(list1)\n    return len(count)\ndef get_second_largest(list1):\n    '''\n    Write a function to get the second largest element in a list.\n    '''\n    if len(list1)<2:\n        return None\n    return max(list1)\ndef is_ascending(list1):\n    '''\n    Write a function to return whether a list is ascending\n    '''\n    if len(list1)<2:\n        return True\n    else:\n        return list1[0]<=list1[1]\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list1))\ndef get_median(list1):\n    '''\n    Write a function to get the median in a list.\n    '''\n    if len(list1)%2==0:\n        return (list1[(len(list1)/2)-1] + list1[len(list1)/2])/2\n    else:\n        return list1[len(list1)/2]\ndef delete_element(list1,element):\n    '''\n    Write a function to delete an element from a list.\n    '''\n    list1.remove(element)\n    return list1\ndef delete_element_by_index(list1,index):\n    '''\n    Write a function to delete an element from a list.\n    '''\n    del list1[index]\n    return list1\ndef sum_list(list1):\n    '''\n    Write a function to get the sum of all the elements in a list.\n    '''\n    return sum(list1)\ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    return list1[::-1]\ndef find_missing(list1):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    sum_of_list = sum(list1)\n    sum_of_list_reversed = sum(list1[::-1])\n    return (sum_of_list*len(list1))/2 - sum_of_list_reversed\ndef get_gcd(a,b):\n    '''\n    Write a function to get the greatest common divisor of two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return get_gcd(b,a%b)\ndef get_lcm(a,b):\n    '''\n    Write a function to get the lowest common multiple of two numbers.\n    '''\n    return a*b/get_gcd(a,b)\ndef is_palindrome(word):\n    '''\n    Write a function to check if a word is a palindrome.\n    '''\n    return word[::-1]==word\ndef r_p_3(n,m):\n    '''\n    Write a function to get all the divisors of a number.\n    '''\n    i = 1\n    while i*i<=n:\n        if n%i==0:\n            if i*i>m:\n                print(i)\n            if i*i<=m:\n                print(i)\n                print(n//i)\n        i+=1\ndef check_p_4(a,b,c):\n    '''\n    Write a function to check if a triangle is possible with three given sides a,b,c.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\ndef is_pythagorean(a,b,c):\n    '''\n    Write a function to check if a pythagorean triplet exists with three given sides a,b,c.\n    '''\n    if a**2+b**2==c**2:\n        return True\n    else:\n        return False\ndef find_a_and_b(n,m,k):\n    '''\n    Write a function to find the value of a and b for which a^2+b^2=c^2.\n    '''\n    a_list = list(range(1,n))\n    b_list = list(range(1,m))\n    c_list = [a*b for a in a_list for b in b_list]\n    for i in range(0,len(c_list)):\n        if c_list[i]**2==k:\n            return [a_list[i],b_list[i]]\n    return None\ndef get_most_common_n_elements(list1,max_n):\n    '''\n    Write a function to get the most common elements in a list.\n    '''\n    count = collections.Counter(list1)\n    return count.most_common(max_n)\ndef find_longest_word(words):\n    '''\n    Write a function to find the longest word in a list of words.\n    '''\n    return max(words,key=len)\ndef append_two_num_to_list(list1,num1,num2):\n    '''\n    Write a function to append a number to each element in a list.\n    '''\n    return [i+num1 for i in list1]\ndef append_a_num_to_elements_of_list(list1,num1):\n    '''\n    Write a function to append a number to each element in a list.\n    '''\n    for i in range(0,len(list1)):\n        list1[i]+=num1\n    return list1\ndef get_nth_element(list1,n):\n    '''\n    Write a function to get the nth element in a list.\n    '''\n    return list1[n]\ndef get_odd_numbers_in_range(start,end):\n    '''\n    Write a function to get all od"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    freq = collections.Counter(list1)\n    for key,value in freq.items():\n        print(key,value)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    temp = {}\n    for item in list1:\n        if item in temp:\n            temp[item] += 1\n        else:\n            temp[item] = 1\n    return temp\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 4:\n        return N\n    else:\n        n = N\n        while n > 0:\n            n //= 10\n            if n >= 5:\n                n -= 1\n        return n\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n > 1:\n        return n - 1\n    elif n == 1:\n        return 1\n    else:\n        return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    result = None\n    result_diff = float(\"inf\")\n    for x in range(1,N):\n        if result_diff > abs(N - x):\n            result_diff = abs(N - x)\n            result = x\n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = N\n    for i in xrange(N-1,0,-1):\n        if abs(i-N)<abs(res-N):\n            res = i\n    return res\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    step = 1\n    while step <= n:\n        if step < n:\n            if (n - step) % 2 == 0:\n                return (n - step) // 2\n            else:\n                return (n - step + 1) // 2\n        step *= 2\n    return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    left, right = 0, N\n    while left < right:\n        mid = (left+right)//2\n        if mid*mid > N:\n            right = mid - 1\n        else:\n            left = mid\n    return left\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    l = [x for x in range(1,N) if abs(x-N) <= abs(x-N-1)]\n    return l[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(round(N/2) * 2)\n    "
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    count = 0\n    if N<=1:\n        return 1\n    for i in range(1,N):\n        if N-i < i:\n            return i\n            break\n    else:\n        return N\n        \ndef swap_string(s):\n    '''\n    Write a function to reverse a string\n    '''\n    if len(s)<=1:\n        return s\n    else:\n        return swap_string(s[1:])+s[0]\n    \ndef max_product(A):\n    '''\n    Write a function that takes in a non-empty array of integers and returns an array of the \n    same length with the maximum product of any two numbers in the original array.\n    '''\n    if len(A)<=1:\n        return A\n    else:\n        max_product = A[0]\n        for i in range(1,len(A)):\n            if A[i]>max_product:\n                max_product = A[i]\n            elif A[i]<0 and A[i-1]<0:\n                max_product = A[i]\n            elif A[i]<0 and A[i-1]>0:\n                max_product = A[i]\n        return [max_product]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    counter = 0\n    for i in list1:\n        if len(i) > counter:\n            counter = len(i)\n    return counter\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    print(\"The length of the longest word is:\", max)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for word in list1:\n        if len(word) >= count:\n            count = len(word)\n    print count\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for element in list1:\n        if len(element)>length:\n            length=len(element)\n    return length\ndef big_bigger(list1, list2):\n    '''\n    Write a python function to find the biggest and the smallest number in a list.\n    '''\n    big=0\n    small=0\n    for element in list1:\n        if element>big:\n            big=element\n    for element in list2:\n        if element>big:\n            big=element\n        if element<small:\n            small=element\n    return [big, small]\ndef pv():\n    '''\n    Write a python function that returns the perimeter of a right angle triangle.\n    '''\n    return (len_log(list1)+len_log(list2)+len_log(list3))\ndef area_calc(list1, list2, list3):\n    '''\n    Write a python function that returns the area of a right angle triangle.\n    '''\n    area=(len_log(list1)*len_log(list2)/2)\n    return area\ndef largest_smallest(list1):\n    '''\n    Write a python function to return the largest and the smallest number in a list.\n    '''\n    big=0\n    small=0\n    for element in list1:\n        if element>big:\n            big=element\n        if element<small:\n            small=element\n    return [big, small]\ndef is_prime(list1):\n    '''\n    Write a python function to return a list of the prime numbers in a given list.\n    '''\n    prime=[]\n    for element in list1:\n        if element>1:\n            if element%2==0:\n                pass\n            else:\n                prime.append(element)\n    return prime\ndef is_palindrome(list1):\n    '''\n    Write a python function to return True if every element in a list is a palindrome and False if it is not.\n    '''\n    list2=[]\n    for element in list1:\n        if element==element[::-1]:\n            list2.append(True)\n        else:\n            list2.append(False)\n    if True in list2:\n        return True\n    else:\n        return False\ndef reversed_list(list1):\n    '''\n    Write a python function to return a list that contains all the elements of a list in reverse order.\n    '''\n    list2=[]\n    for element in list1:\n        list2.insert(0,element)\n    return list2\ndef is_pythagorean_triple(list1):\n    '''\n    Write a python function that returns a list of all the pythagorean triples in a list.\n    '''\n    list2=[]\n    for element1 in list1:\n        for element2 in list1:\n            for element3 in list1:\n                if element1**2+element2**2==element3**2:\n                    list2.append([element1, element2, element3])\n    return list2\ndef triangle_type(list1):\n    '''\n    Write a python function to return a string that specifies the type of a triangle.\n    '''\n    if len_log(list1)==len_log(list2):\n        if len_log(list1)==len_log(list3):\n            if len_log(list1)==len_log(list4):\n                return 'Equilateral'\n            else:\n                return 'Isosceles'\n        elif len_log(list1)==len_log(list3):\n            if len_log(list1)==len_log(list4):\n                return 'Isosceles'\n            else:\n                return 'Scalene'\n        else:\n            return 'Isosceles'\n    elif len_log(list1)==len_log(list2):\n        if len_log(list1)==len_log(list3):\n            if len_log(list1)==len_log(list4):\n                return 'Isosceles'\n            else:\n                return 'Scalene'\n        elif len_log(list1)==len_log(list3):\n            if len_log(list1)==len_log(list4):\n                return 'Isosceles'\n            else:\n                return 'Scalene'\n        else:\n            return 'Scalene'\n    elif len_log(list1)==len_log(list3):\n        if len_log(list1)==len_log(list2):\n            if len_log(list1)==len_log(list4):\n                return 'Isosceles'\n            else:\n                return 'Scalene'\n        elif len_log(list1)==len_log(list2):\n            if len_log(list1)==len_log(list4):\n                return 'Isosceles'\n            else:\n                return 'Scalene'\n        else:\n            return 'Scalene'\n    elif len_log(list1)==len_log(list4):\n        if len_log(list1)==len_log(list2):\n            if len_log(list1)==len_log(list3):\n                return 'Isosceles'\n            else:\n                return 'Scalene'\n        elif len_log(list1)==len_log(list2):\n            if len_log(list1)==len_log(list3):\n                return 'Isosceles'\n            else:\n                return 'Scalene'\n        else:\n            return 'Scalene'\n    else:\n        return 'Scalene'\ndef line_of_best_fit(list1):\n    '''\n    Write a python function to return a list of the line of best fit of a list of points.\n    '''\n    list2=[]\n    for element1 in list1:\n        for element2 in list1:\n            for element3 in list1:\n                if element1!=element2 and element1!=element3 and element2!=element3:\n                    list2.append([element1, element2, element3])\n    return list2\ndef is_hexagon(list1):\n    '''\n    Write a python function to return True if a list contains a hexagon and False if it does not.\n    '''\n    list2=[]\n    for element1 in list1:\n        for element2 in list1:\n            if element1**2+element2**2==element3**2:\n                list2.append(True)\n            else:\n                list2.append(False)\n    if True in list2:\n        return True\n    else:\n        return False\ndef is_right_angle_triangle(list1):\n    '''\n    Write a python function to return True if a list contains a right angle triangle and False if it does not.\n    '''\n    list2=[]\n    for element1 in list1:\n        for element2 in list1:\n            for element3 in list1:\n                if element1**2+element2**2==element3**2:\n                    list2.append(True)\n                else:\n                    list2.append(False)\n    if True in list2:\n        return True\n    else:\n        return False\ndef get_sum_and_product(list1):\n    '''\n    Write a python function to return the sum and the product of a list.\n    '''\n    list2=[]\n    for element1 in list1:\n        list2.append(element1)\n    return [sum(list2), product(list2)]\ndef get_median(list1):\n    '''\n    Write a python function to return the median of a list.\n    '''\n    list2=[]\n    for element1 in list1:\n        list2.append(element1)\n    list2.sort()\n    if len(list2)%2==0:\n        return (list2[len(list2)/2]+list2[len(list2)/2-1])/2.0\n    else:\n        return list2[len(list2)/2]\ndef get_median_three(list1):\n    '''\n    Write a python function to return the median of three numbers.\n    '''\n    list2=[]\n    for element1 in list1:\n        list2.append(element1)\n    list2.sort()\n    i"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for i in list1:\n        len_list.append(len(i))\n    return max(len_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1_len = 0\n    for i in range(len(list1)):\n        if list1[i] > list1_len:\n            list1_len = list1[i]\n    return list1_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #pdb.set_trace()\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_word = []\n    for word in list1:\n        len_word.append(len(word))\n    return max(len_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_lst = []\n    for item in list1:\n        len_lst.append(len(item))\n    return max(len_lst)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    for i in range(len(str1) - sub_str_len + 1):\n        if sub_str == str1[i:i+sub_str_len]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            print(string)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n    if len(str1) == len(sub_str):\n        return False\n    for i in range(0, len(str1)):\n        if sub_str == str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = 0\n    for word in str1:\n        if word == sub_str:\n            result += 1\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return [sub_str in s for s in str1]\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = 0\n    end = len(str1)\n    for s in str1:\n        start = str1.index(sub_str, start)\n        if start > 0:\n            start += 1\n        if start == end:\n            break\n        end = start + len(sub_str)\n    return start >= 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return 'True'\n    else:\n        return 'False'\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word.lower() in sub_str.lower():\n            print('the string \"{}\" is present in the list'.format(word))\n        else:\n            print('string {} not present'.format(word))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    res = 0\n    temp = n\n    while temp:\n        res = res * 10 + temp % 10\n        temp //= 10\n    return res == n\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def f(n, base):\n        s = str(n)\n        for i in range(1, len(s)):\n            if s[i-1] < s[i]:\n                return False\n        return True\n    \n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i-1] < s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    divisor_count = 0\n    factor = 2\n    while factor <= n:\n        if n % factor == 0:\n            divisor_count += 1\n        if divisor_count >= 3:\n            return False\n        factor += 1\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    if n < 4:\n        return False\n    if n % 2 == 0:\n        return False\n    elif n % 2 == 1:\n        n_2 = n // 2\n        for i in range(2, n_2):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    m = str(n)\n    if len(m) > 1 and m[0] == m[-1]:\n        for i in range(1, len(m)-1):\n            if m[i] < m[i+1] and m[i] > m[i-1]:\n                return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    A = [int(x) for x in str(n)]\n    if len(A) == 1:\n        return True\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            if i == 1:\n                return False\n            else:\n                return is_undulating(int(A[:i] + str(int(A[i]) - 1) + A[i+1:]))\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    string_number = str(n)\n    if string_number[0] == string_number[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    rev = int(str(n)[::-1])\n    if n == rev:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def get_digits(n):\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n //= 10\n        return digits[::-1]\n    def is_undulating(n):\n        for i in range(1, len(get_digits(n))):\n            if get_digits(n)[i]!= get_digits(n)[i-1]:\n                return False\n        return True\n    return is_undulating(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(1,len(s)):\n        if int(s[i]) < int(s[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == 2:\n        return a * a\n    elif b % 2!= 0:\n        return a * power(a, b - 1)\n    else:\n        return power(a * a, b // 2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a,b/2)**2\n    else:\n        return power(a,b/2)**2 * a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    else:\n        return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,-b)\n    elif b%2 == 0:\n        return power(a,b//2)*power(a,b//2)\n    else:\n        return power(a,b//2)*power(a,b//2)*a\n    "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == 2:\n        return a*a\n    if b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a*a,b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a * power(a, b - 1)\n    else:\n        return 1 / power(a, b + 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b//2)\n    return a*power(a*a,b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp = sorted(test_list, key = itemgetter(1))\n    return temp[0][0]\n    # return temp[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_value = float('inf')\n    minimum_index = -1\n    for index, value in enumerate(test_list):\n        if value[1] < minimum_value:\n            minimum_value = value[1]\n            minimum_index = index\n    return test_list[minimum_index]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # YOUR CODE HERE\n    return min(test_list, key=itemgetter(1))[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #solution 1\n    #The simplest solution. I believe this is really more efficient than the code below, but it's also easier to read.\n    #use the first value of the tuple as the new key, and the second value as the new value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = None\n    minimum_index = None\n    for index, item in enumerate(test_list):\n        if (not minimum or item[1] < minimum):\n            minimum = item[1]\n            minimum_index = index\n    return (minimum_index, item[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))\n    return(minimum[0])\n    \ndef count_words(s):\n    '''\n    Write a function that takes a string and returns a dictionary with each word as the key and the number of times it occurs as the value.\n    '''\n    # YOUR CODE HERE\n    return {word:s.lower().count(word) for word in s.split()}\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return min(lst, key=len)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for lst in lst:\n        if min_len > len(lst):\n            min_len = len(lst)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for i in lst:\n        if min_len > i[0]:\n            min_len = i[0]\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < length:\n            length = len(lst[i])\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    max_length = -1\n    for l in lst:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    m = 9999999999\n    for l in lst:\n        m = min(m,len(l))\n    return m\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    len_lst=len(lst)\n    min_length=len_lst\n    for i in lst:\n        if len(i)<min_length:\n            min_length=len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min = len(lst[0])\n    for item in lst:\n        if len(item) < Min:\n            Min = len(item)\n    return Min\n    \ndef Find_Min_Length_Rec(lst, Min):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists using recursion.\n    '''\n    if not lst:\n        return Min\n    else:\n        Min = min(Min, len(lst[0]))\n        return Find_Min_Length_Rec(lst[1:], Min)\n    \n    \ndef Find_Min_Length_Pythonic(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists using iteration and pythonic syntax.\n    '''\n    return min(len(item) for item in lst)\n    \n    "
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min_Len = -1\n    for lst in lst:\n        if Min_Len == -1 or len(lst) < Min_Len:\n            Min_Len = len(lst)\n    return Min_Len\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    \n    for i in range(2,n//2+1):\n        if n%i == 0:\n            return i + divisor(n//i)\n    \n    return 1+divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [1,n]\n    i = 2\n    while i < n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_list = []\n    i = 1\n    while i < n:\n        if n % i == 0:\n            divisor_list.append(i)\n        i += 1\n    return divisor_list\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return divisor(n-1) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    count = 0\n    for i in range(1,n):\n        if n%i==0:\n            div+=1\n            if n/i==i:\n                count+=1\n            else:\n                count+=2\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            div += 2\n    return div\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    output = {}\n    for element in list1:\n        output[element] = output.get(element, 0) + 1\n    return output\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #My initial solution\n    #list1 = [[1, 2], [2, 3], [3, 4]]\n    #list2 = [1, 2, 2, 2, 2, 3, 3, 3, 3, 4]\n    #mydict = {}\n    #for i in range(0, len(list2)):\n    #    if list2[i] not in mydict:\n    #        mydict[list2[i]] = list2.count(list2[i])\n    #return mydict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] = freq[i] + 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for item in list1:\n        if item not in dict1.keys():\n            dict1[item] = list1.count(item)\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for item in list1:\n        if item not in dic:\n            dic[item] = 1\n        else:\n            dic[item] = dic[item] + 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #initialize an empty dictionary\n    freq_dict = {}\n    #loop through the lists of lists and add elements to dictionary\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('list1 must be a list')\n    if list1 == []:\n        return {}\n    key_value = list1[0]\n    if isinstance(key_value, list):\n        return frequency_lists(list1[1:])\n    else:\n        return {key_value: list1.count(key_value)}"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d={}\n    for item in list1:\n        if item in d:\n            d[item]=d[item]+1\n        else:\n            d[item]=1\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for i in numbers:\n        mul *= i\n    return mul / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    multiply = 1\n    for num in numbers:\n        multiply = multiply * num\n    \n    return multiply / len(numbers)\n    \n    \n    \ndef average(numbers):  \n    '''\n    Write a function to return the average of a list of numbers.\n    '''\n    \n    sum = 0\n    for num in numbers:\n        sum += num\n    \n    return sum / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / float(len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    mul = 1\n    for number in numbers:\n        mul *= number\n    return mul/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # your code here\n    return [int(x) for x in numbers]\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #result = 1\n    #for num in numbers:\n    #    result *= num\n    #return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    a = 1\n    for i in numbers:\n        a = a*i\n    return a/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # convert decimal to string\n    str_n = str(n)\n    # take out the last element of the string\n    str_n = str_n[::-1]\n    # initialize string for output\n    binary_n = \"\"\n    # loop through the string\n    for i in range(len(str_n)):\n        # if the element is a 1, add it to the end of the output\n        if str_n[i] == \"1\":\n            binary_n += \"1\"\n        # otherwise, add 0 to the end of the output\n        else:\n            binary_n += \"0\"\n    # reverse the output\n    binary_n = binary_n[::-1]\n    # return the output\n    return binary_n\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    decimal_to_binary(n // 2)\n    return str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Binary is the same as base 2\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n /= 2\n    return \"\".join(binary[::-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # first, check if the given number is a negative\n    is_negative = False\n    if n < 0:\n        is_negative = True\n        n = abs(n)\n    # now convert the given number to its binary representation\n    binary_repr = ''\n    while n:\n        binary_repr = str(n % 2) + binary_repr\n        n = n // 2\n    if is_negative:\n        binary_repr = '-' + binary_repr\n    return binary_repr\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n > 0:\n        remainder = n % 2\n        binary.append(remainder)\n        n = n//2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = ''\n    while (n > 0):\n        if (n % 2) == 0:\n            s = '0' + s\n        else:\n            s = '1' + s\n        n = n // 2\n    return s\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        return binary_converter(n // 2) + binary_converter(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return decimal_to_binary(n//2) + n%2\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)[::-1]\n    for i in range(len(num) - 1, -1, -1):\n        if num[i]!= '9':\n            num = num[:i] + '9' + num[i+1:]\n            break\n    num = int(num)\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) < 2:\n        return int(num)\n    elif num[-1] < num[-2]:\n        return int(num[:-1]) + 1\n    else:\n        return int(num[:-2]) + 1\n    \ndef next_larger_palindrome(num):\n    '''\n    Write a function to find the next larger palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) < 2:\n        return int(num)\n    elif num[-1] > num[-2]:\n        return int(num[:-1]) + 1\n    else:\n        return int(num[:-2]) + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 0\n    else:\n        is_odd = 0\n        if (num % 2) == 1:\n            is_odd = 1\n            num = num - 1\n        i = num\n        while i > 0:\n            i = i / 10\n            if i == 0:\n                is_odd = 1\n                break\n        if is_odd == 1:\n            num = num + 1\n            num = num * 10\n            num = num + 1\n        else:\n            num = num * 10\n            num = num + 1\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = [int(x) for x in str(num)]\n    new_num_list = []\n    num_len = len(num_list)\n    if num_len % 2 == 1:\n        for i in range(num_len-1):\n            new_num_list.append(num_list[i])\n        new_num_list.append(num_list[-1])\n        new_num_list.reverse()\n        new_num = int(''.join([str(x) for x in new_num_list]))\n    else:\n        for i in range(num_len-1):\n            new_num_list.append(num_list[i])\n        new_num_list.reverse()\n        new_num = int(''.join([str(x) for x in new_num_list]))\n    if new_num > num:\n        return new_num\n    else:\n        return new_num + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num<10:\n        return int(str(num)+str(num)[::-1])\n    num = str(num)\n    for i in range(len(num)//2):\n        if num[i]!=num[-1-i]:\n            return int(num[:i]+num[i+1:-1]+num[i]+num[-1-i:])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    '''\n    *** wrong answer, not sure why***\n    # find the next biggest number\n    num += 1\n    num = str(num)\n    # print(num)\n    # create the new number\n    # find the first non-palin character\n    first = 0\n    while first == 0:\n        if palindrome(num):\n            first = 0\n        else:\n            first = 1\n            num = int(num[:len(num)-1])\n            # print(num)\n    # print(num)\n    num = num[:len(num)-1]\n    num += str(int(num[::-1])-1)\n    # print(num)\n    return int(num)\n    '''\n    # THIS IS THE RIGHT ANSWER\n    num = int(num)\n    num += 1\n    while True:\n        num += 1\n        num = str(num)\n        if palindrome(num):\n            if int(num[:len(num)-1]) > int(num[:len(num)-1][::-1]):\n                return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # all palindromes are even numbers, so we start with the biggest possible odd number\n    # we could do this by adding 1 or subtracting 1 from the number\n    # num+=1\n    # while not is_palindrome(num):\n    #     num+=1\n    # return num\n    # assert is_palindrome(num)\n    # we don't need to check for the case where the number is itself a palindrome, since that is equivalent to 2.\n    # we need to find a palindrome that is greater than the number, since we are finding the smallest one\n    num+=1\n    while not is_palindrome(num):\n        num+=1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num==int(str(num)[::-1]):\n        return int(str(num)+'1')\n    else:\n        return int(str(num)+'2')\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return int(num + '1')\n    for i in range(len(num) - 1, -1, -1):\n        if num[i] < num[i - 1]:\n            if (num[:i] + num[i - 1] + num[i:] == num[:i - 1] + num[i + 1:]):\n                return int(num[:i - 1] + str(int(num[i]) + 1) + num[i - 1:])\n            else:\n                return int(num[:i] + str(int(num[i]) + 1) + num[i:])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return int(num+'1')\n    else:\n        max_len = len(num)\n        for i in range(max_len-1):\n            if int(num[i]+num[i+1:])%11 == 0:\n                num = num[:i]+num[i+2:]\n                break\n        return int(num+'1')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in xrange(len(arr)):\n        if arr[i] == k:\n            return i+1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr)//2]\n    less, equal, greater = [], [], []\n    for x in arr:\n        if x < pivot:\n            less.append(x)\n        elif x == pivot:\n            equal.append(x)\n        else:\n            greater.append(x)\n    if k <= len(less):\n        return kth_element(less, k)\n    elif k > len(less) + len(equal):\n        return kth_element(greater, k - len(less) - len(equal))\n    else:\n        return equal[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k <= 0:\n        return \"Invalid k\"\n    pivot = arr[0]\n    less = [x for x in arr if x < pivot]\n    more = [x for x in arr if x > pivot]\n    if k <= len(less):\n        return kth_element(less, k)\n    elif k > len(less) + len(arr) - 1:\n        return kth_element(more, k - len(less) - 1)\n    else:\n        return pivot\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    \n    mid = len(arr) / 2\n    if k < mid:\n        return kth_element(arr[:mid], k)\n    else:\n        return kth_element(arr[mid:], k - mid)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    pivot = random.randint(0, len(arr)-1)\n    arr[0], arr[pivot] = arr[pivot], arr[0]\n    pivot = 0\n    left, right = 1, len(arr)-1\n    while True:\n        if pivot == k:\n            return arr[pivot]\n        elif left > right:\n            return arr[pivot]\n        else:\n            new_pivot = left + (right-left)//2\n            arr[left], arr[new_pivot] = arr[new_pivot], arr[left]\n            if arr[left] > arr[right]:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n            elif arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr_len = len(arr)\n    if arr_len == 0:\n        return None\n    left = 0\n    right = arr_len - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if mid + 1 == k:\n            return arr[mid]\n        elif mid + 1 > k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    if k < 1:\n        return -1\n    if k >= len(arr):\n        return -1\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    if k > len(arr):\n        return None\n    left, right = 0, len(arr)-1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] > k:\n            right = mid\n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            return arr[mid]\n    return arr[left]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i in word:\n        if i.isupper():\n            new_word += i.lower()\n        else:\n            new_word += i\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.title() for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    output = ''\n    for c in word.split('_'):\n        output += c.capitalize()\n    return output\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert first char to uppercase\n    word = word.title()\n    # split the string at the underscore\n    words = word.split('_')\n    # now join the strings\n    return ''.join(word for word in words)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) <= 2:\n        return word.capitalize()\n    word = word.lower()\n    string = word[0]\n    for i in range(1, len(word)):\n        if word[i] == word[i-1]:\n            continue\n        string += word[i].upper()\n    return string\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','').split()\n    word[0] = word[0].lower()\n    for i in xrange(1, len(word)):\n        word[i] = word[i].capitalize()\n    return ''.join(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    if len(word) == 1:\n        return word.upper()\n    return snake_to_camel(word[1:]) + word[0].upper()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.find('_') == -1:\n        return word\n    snake = word.split('_')\n    camel = ''\n    for i in range(len(snake)):\n        if i == 0:\n            camel += snake[i].lower()\n        else:\n            camel += snake[i].capitalize()\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    capital_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    capital_letters_indices = [ord(char) - ord('A') + 1 for char in capital_letters]\n    if word[0] not in capital_letters:\n        return word\n    else:\n        return word[0] + ''.join(capital_letters[i] if i < len(word) - 1 else '' for i in range(len(word)))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # remove the first letter\n    word = word[1:]\n    # remove the first letter if it's all '_'\n    if word[0] == '_':\n        word = word[1:]\n    # add '_' to the start\n    if word[0]!= '_':\n        word = '_' + word\n    # join the letters with the first letter being '_'\n    camel_case = word.replace('_','')\n    # remove the last space\n    camel_case = camel_case.replace(' ', '')\n    # add '_' to the end\n    if camel_case[-1]!= '_':\n        camel_case = camel_case + '_'\n    # return the result\n    return camel_case[0].lower() + camel_case[1:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    if n == 1:\n        return m\n    else:\n        return (n - 1) * m + m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return sum(range(n+m+1)) - sum(range(1,n+1)) - sum(range(1,m+1)) + sum(range(n+m+1,2*n+m+1))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m % 2 == 0:\n        return 0\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return 0\n    elif n % 2 == 0 and m % 2 == 0:\n        return eulerian_num(n/2, m/2)\n    elif n % 2 == 0 and m % 2 == 1:\n        return 2 * eulerian_num(n/2, (m - 1) / 2)\n    elif n % 2 == 1 and m % 2 == 0:\n        return 2 * eulerian_num(n/2, (m + 1) / 2)\n    elif n % 2 == 1 and m % 2 == 1:\n        return 4 * eulerian_num(n/2, (m + 1) / 2)\n    else:\n        return n + m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0 and m > 0:\n        return 1\n    elif n > 0 and m == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return reduce(lambda x, y: x * y, [a for a in range(1, n + 1) if a % m == 0])\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # assert(n > 0 and m > 0)\n    if n > 0 and m > 0:\n        # Eulerian number is the number of ways to reach the goal state of n, m\n        # i.e., number of ways to reach the goal state from any particular state\n        eulerian_num = factorial(m) // (factorial(m - n) * factorial(n))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n % 2 == 0 and m % 2 == 0) or (n % 2 == 1 and m % 2 == 1):\n        return (n / 2) + (m / 2)\n    if (n % 2 == 0 and m % 2 == 1) or (n % 2 == 1 and m % 2 == 0):\n        return (n / 2) + (m / 2) - 1\n    if (n % 2 == 1 and m % 2 == 1):\n        return (n / 2) + (m / 2) - 2\n    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: \n        return 0\n    elif m == 0: \n        return 1\n    elif n == 1:\n        return m + 1\n    else:\n        return n*eulerian_num(n - 1, m) + m + 1\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if input_list == []:\n        return []\n    else:\n        return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        output_list.append(sorted(sublist))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index, sublist in enumerate(input_list):\n        input_list[index] = sorted(sublist)\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for sublist in input_list:\n        sublist.sort()\n        return_list.append(sublist)\n    return return_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in input_list:\n        item.sort()\n    return input_list\n    \nsort_sublists(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty list that will store the sorted sublists\n    sorted_sublists = []\n    \n    # Loop over each sublist\n    for sublist in input_list:\n        # Sort each sublist and append to the new list\n        sorted_sublists.append(sorted(sublist))\n    \n    # Return the sorted sublists\n    return sorted_sublists\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n    \nlst = [True,False,True,False,False]\nprint count(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool,lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    for i in lst:\n        if i:\n            print('True')\n        else:\n            print('False')\n    \n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count=0\n    for i in lst:\n        if type(i)==bool:\n            count+=1\n    return count\n    \n    \ndef unique(lst):\n    '''\n    Write a python function to return unique values from a list.\n    '''\n    lst1=[]\n    for i in lst:\n        if i not in lst1:\n            lst1.append(i)\n    return lst1\n    \n    \ndef frequency(lst):\n    '''\n    Write a python function to return frequency of each value in the list.\n    '''\n    count=[]\n    for i in lst:\n        count.append(lst.count(i))\n    return count\n    \n    \ndef index_list(lst):\n    '''\n    Write a python function to return index of each value in the list.\n    '''\n    index=[]\n    for i in lst:\n        index.append(lst.index(i))\n    return index\n    \n    \ndef sort_list(lst):\n    '''\n    Write a python function to sort the list based on the frequency of each value in the list.\n    '''\n    f=frequency(lst)\n    s=sorted(zip(f,lst))\n    return [j for i,j in s]\n    \n    \ndef sort_dict(dic):\n    '''\n    Write a python function to sort the dictionary based on the frequency of each value in the dictionary.\n    '''\n    sorted_dic={}\n    for i in dic:\n        sorted_dic[i]=sort_list(dic[i])\n    return sorted_dic\n    \n    \ndef print_dic(dic):\n    '''\n    Write a python function to print the values of a dictionary and sort them based on the frequency of the values.\n    '''\n    for i in dic:\n        print(i,':',dic[i])\n    print('\\n')\n    sorted_dic=sort_dict(dic)\n    for i in sorted_dic:\n        print(i,':',sorted_dic[i])\n    \n    \ndef print_list(lst):\n    '''\n    Write a python function to print the values of a list and sort them based on the frequency of the values.\n    '''\n    for i in lst:\n        print(i,':',lst.count(i))\n    print('\\n')\n    sorted_lst=sort_list(lst)\n    for i in sorted_lst:\n        print(i,':',sorted_lst.count(i))\n    \n    \ndef print_list_dict(lst_dict):\n    '''\n    Write a python function to print the values of a list of dictionaries and sort them based on the frequency of the values.\n    '''\n    for i in lst_dict:\n        print(i,':')\n        for j in lst_dict[i]:\n            print(j,':',lst_dict[i][j])\n        print('\\n')\n        sorted_lst=sort_list(lst_dict[i])\n        for i in sorted_lst:\n            print(i,':',sorted_lst.count(i))\n    \n    \n    \ndef anagram(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    sorted1=sorted(string1)\n    sorted2=sorted(string2)\n    if sorted1==sorted2:\n        return True\n    else:\n        return False\n        \n        \ndef anagram_dict(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    sorted1=sorted(string1)\n    sorted2=sorted(string2)\n    if sorted1==sorted2:\n        return True\n    else:\n        return False\n    \n    \ndef anagram_sort(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if sorted(string1)==sorted(string2):\n        return True\n    else:\n        return False\n    \n    \ndef anagram_sort_dict(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if sorted(string1)==sorted(string2):\n        return True\n    else:\n        return False\n    \n    \ndef anagram_sort_dict2(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    hash1={}\n    hash2={}\n    for i in string1:\n        if i not in hash1:\n            hash1[i]=1\n        else:\n            hash1[i]+=1\n    for i in string2:\n        if i not in hash2:\n            hash2[i]=1\n        else:\n            hash2[i]+=1\n    if hash1==hash2:\n        return True\n    else:\n        return False\n    \n    \ndef anagram_dict2(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    hash1={}\n    hash2={}\n    for i in string1:\n        if i not in hash1:\n            hash1[i]=1\n        else:\n            hash1[i]+=1\n    for i in string2:\n        if i not in hash2:\n            hash2[i]=1\n        else:\n            hash2[i]+=1\n    if hash1==hash2:\n        return True\n    else:\n        return False\n    \n    \ndef check_anagram(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if sorted(string1)==sorted(string2):\n        return True\n    else:\n        return False\n    \n    \ndef check_anagram_dict(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if sorted(string1)==sorted(string2):\n        return True\n    else:\n        return False\n    \n    \ndef check_anagram_dict2(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    hash1={}\n    hash2={}\n    for i in string1:\n        if i not in hash1:\n            hash1[i]=1\n        else:\n            hash1[i]+=1\n    for i in string2:\n        if i not in hash2:\n            hash2[i]=1\n        else:\n            hash2[i]+=1\n    if hash1==hash2:\n        return True\n    else:\n        return False\n    \n    \ndef check_anagram_dict3(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    hash1={}\n    hash2={}\n    for i in string1:\n        if i not in hash1:\n            hash1[i]=1\n        else:\n            hash1[i]+=1\n    for i in string2:\n        if i not in hash2:\n            hash2[i]=1\n        else:\n            hash2[i]+=1\n    if hash1==hash2:\n        return True\n    else:\n        return False\n    \n    \ndef check_anagram_dict4(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    hash1={}\n    hash2={}\n    for i in string1:\n        if i not in hash1:\n            hash1[i]=1\n        else:\n            hash1[i]+=1\n    for i in string2:\n        if i not in hash2:\n            hash2[i]=1\n        else:\n            hash2[i]+=1\n    if hash1==hash2:\n        return True"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([bool(x) for x in lst])\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    x = test_list + test_tup\n    return x\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    # define the function here\n    def append_list_to_tup(test_list, test_tup):\n        # loop through the list and add to tuple\n        for i in test_list:\n            test_tup = test_tup + (i,)\n        return test_tup\n    # write your new function here\n    \n    # return the new function\n    return append_list_to_tup(test_list, test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    a = 0\n    #print test_list\n    for i in test_list:\n        if test_tup[a] == i:\n            return False\n        a += 1\n    test_list.append(test_tup[a])\n    return True\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # YOUR CODE HERE\n    return test_tup + test_list\n    "
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup_list = []\n    for tup in test_tup:\n        tup_list.append(tup)\n    tup_list.append(test_list)\n    return tup_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list\n    for i in test_tup:\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    append_list = []\n    for a,b in test_tup:\n        append_list.append(a)\n    for i in test_list:\n        append_list.append(i)\n    return append_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    i = 0\n    j = 0\n    k = 0\n    for a in range(0,len(num1)):\n        if i == 0:\n            new_list.append(num1[i])\n            i += 1\n        elif j == 0:\n            new_list.append(num2[j])\n            j += 1\n        elif k == 0:\n            new_list.append(num3[k])\n            k += 1\n        elif (num1[i] <= num2[j] and num1[i] <= num3[k]):\n            new_list.append(num1[i])\n            i += 1\n        elif (num2[j] <= num1[i] and num2[j] <= num3[k]):\n            new_list.append(num2[j])\n            j += 1\n        elif (num3[k] <= num1[i] and num3[k] <= num2[j]):\n            new_list.append(num3[k])\n            k += 1\n    return new_list\ndef find_median(list_n):\n    '''\n    Write a function to find the median of a given list of numbers.\n    '''\n    if len(list_n) == 0:\n        return None\n    if len(list_n) == 1:\n        return list_n[0]\n    else:\n        median = 0\n        list_n.sort()\n        for a in range(0,len(list_n)):\n            if (a+1)%2 == 0:\n                median += list_n[a]\n            else:\n                median -= list_n[a]\n        return median/2\ndef sort_list(num):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    if len(num) == 0:\n        return num\n    else:\n        return sorted(num)\ndef find_missing_number(list_num):\n    '''\n    Write a function to find the missing number in a given list of numbers.\n    '''\n    if len(list_num) == 0:\n        return None\n    else:\n        return (max(list_num)+1) - min(list_num)\ndef check_permutation(str1,str2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        s1 = sorted(str1)\n        s2 = sorted(str2)\n        for a in range(0,len(str1)):\n            if s1[a]!= s2[a]:\n                return False\n        return True\ndef find_duplicates(list_n):\n    '''\n    Write a function to find duplicates in a given list of numbers.\n    '''\n    if len(list_n) == 0:\n        return None\n    else:\n        s = set()\n        for a in list_n:\n            if a in s:\n                return True\n            else:\n                s.add(a)\n        return False\ndef count_sort(list_n,k):\n    '''\n    Write a function to sort a list of numbers using counting sort.\n    '''\n    if len(list_n) == 0:\n        return list_n\n    else:\n        max_value = max(list_n)\n        min_value = min(list_n)\n        if max_value == min_value:\n            return list_n\n        else:\n            new_list = [0]*(max_value+1)\n            for a in list_n:\n                new_list[a] += 1\n            for b in range(1,max_value+1):\n                new_list[b] += new_list[b-1]\n            new_list = new_list[:-1]\n            for a in list_n:\n                new_list[a] = new_list[a] - 1\n            for a in range(0,len(list_n)):\n                list_n[a] = new_list[list_n[a]]\n            return list_n\ndef binary_search(list_n,num):\n    '''\n    Write a function to find the given number in a sorted list of numbers using binary search.\n    '''\n    if len(list_n) == 0:\n        return None\n    else:\n        min_index = 0\n        max_index = len(list_n)-1\n        if min_index == max_index:\n            return min_index\n        else:\n            mid_index = (max_index+min_index)/2\n            if list_n[mid_index] == num:\n                return mid_index\n            elif list_n[mid_index] > num:\n                return binary_search(list_n[:mid_index],num)\n            elif list_n[mid_index] < num:\n                return binary_search(list_n[mid_index+1:],num)\n        return -1\ndef count_pair(list_n,num):\n    '''\n    Write a function to find the count of a given number in a given list of numbers.\n    '''\n    if len(list_n) == 0:\n        return None\n    else:\n        if (list_n[0] == num or list_n[-1] == num):\n            return 2\n        elif list_n[0] == num:\n            return 1+count_pair(list_n[1:],num)\n        elif list_n[-1] == num:\n            return 1+count_pair(list_n[:-1],num)\n        else:\n            return count_pair(list_n[1:],num)+count_pair(list_n[:-1],num)\ndef pair_search(list_n,num):\n    '''\n    Write a function to find a given pair of numbers in a given list of numbers.\n    '''\n    if len(list_n) == 0:\n        return None\n    else:\n        if (list_n[0] == num and list_n[-1] == num):\n            return [0,len(list_n)-1]\n        elif list_n[0] == num:\n            return [0,count_pair(list_n[1:],num)+1]\n        elif list_n[-1] == num:\n            return [count_pair(list_n[:-1],num),len(list_n)-1]\n        else:\n            return [count_pair(list_n[1:],num),count_pair(list_n[:-1],num)+1]\ndef find_missing_number_from_range(start_index,end_index,list_n):\n    '''\n    Write a function to find the missing number in a given list of numbers, where start_index and end_index are also given.\n    '''\n    if start_index == end_index:\n        return start_index\n    else:\n        return (end_index+start_index)/2\ndef sort_num_from_range(start_index,end_index,list_n):\n    '''\n    Write a function to sort a given list of numbers, where start_index and end_index are also given.\n    '''\n    if start_index == end_index:\n        return [start_index]\n    else:\n        mid_index = (start_index+end_index)/2\n        return sort_num_from_range(start_index,mid_index,list_n) + sort_num_from_range(mid_index+1,end_index,list_n)\ndef max_heapify(heap,index):\n    '''\n    Write a function to build a max heap from a given list of numbers.\n    '''\n    if index == 0:\n        return\n    else:\n        left = 2*index\n        right = 2*index + 1\n        if left < len(heap) and heap[left] > heap[index]:\n            if heap[left] > heap[index]:\n                heap[left],heap[index] = heap[index],heap[left]\n                max_heapify(heap,left)\n        if right < len(heap) and heap[right] > heap[index]:\n            if heap[right] > heap"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1 and not num2 and not num3:\n        return []\n    num1_len = len(num1)\n    num2_len = len(num2)\n    num3_len = len(num3)\n    merged_list = []\n    while(num1_len > 0 and num2_len > 0 and num3_len > 0):\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(num1[0])\n            num1_len -= 1\n            num2_len -= 1\n            num3_len -= 1\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(num2[0])\n            num2_len -= 1\n            num3_len -= 1\n        else:\n            merged_list.append(num3[0])\n            num3_len -= 1\n    while(num1_len > 0):\n        merged_list.append(num1[0])\n        num1_len -= 1\n    while(num2_len > 0):\n        merged_list.append(num2[0])\n        num2_len -= 1\n    while(num3_len > 0):\n        merged_list.append(num3[0])\n        num3_len -= 1\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    l1 = len(num1)\n    l2 = len(num2)\n    l3 = len(num3)\n    if l1>0 and l2>0 and l3>0:\n        if num1[0]<num2[0] and num1[0]<num3[0]:\n            merged_list.append(num1[0])\n            i = 1\n            j = 0\n            k = 0\n            while i<l1 and j<l2 and k<l3:\n                if num1[i] < num2[j] and num1[i] < num3[k]:\n                    merged_list.append(num1[i])\n                    i+=1\n                elif num2[j]<num1[i] and num2[j]<num3[k]:\n                    merged_list.append(num2[j])\n                    j+=1\n                elif num3[k]<num2[j] and num3[k]<num1[i]:\n                    merged_list.append(num3[k])\n                    k+=1\n                else:\n                    if num1[i]>num2[j]:\n                        merged_list.append(num2[j])\n                        j+=1\n                    elif num1[i]>num3[k]:\n                        merged_list.append(num3[k])\n                        k+=1\n                    else:\n                        merged_list.append(num1[i])\n                        i+=1\n        elif num2[0]<num1[0] and num2[0]<num3[0]:\n            merged_list.append(num2[0])\n            i = 1\n            j = 0\n            k = 0\n            while i<l1 and j<l2 and k<l3:\n                if num2[i] < num1[j] and num2[i] < num3[k]:\n                    merged_list.append(num2[i])\n                    i+=1\n                elif num1[j]<num2[i] and num1[j]<num3[k]:\n                    merged_list.append(num1[j])\n                    j+=1\n                elif num3[k]<num1[j] and num3[k]<num2[i]:\n                    merged_list.append(num3[k])\n                    k+=1\n                else:\n                    if num2[i]>num1[j]:\n                        merged_list.append(num1[j])\n                        j+=1\n                    elif num2[i]>num3[k]:\n                        merged_list.append(num3[k])\n                        k+=1\n                    else:\n                        merged_list.append(num2[i])\n                        i+=1\n        elif num3[0]<num1[0] and num3[0]<num2[0]:\n            merged_list.append(num3[0])\n            i = 1\n            j = 0\n            k = 0\n            while i<l1 and j<l2 and k<l3:\n                if num3[i] < num1[j] and num3[i] < num2[k]:\n                    merged_list.append(num3[i])\n                    i+=1\n                elif num1[j]<num3[i] and num1[j]<num2[k]:\n                    merged_list.append(num1[j])\n                    j+=1\n                elif num2[k]<num1[j] and num2[k]<num3[i]:\n                    merged_list.append(num2[k])\n                    k+=1\n                else:\n                    if num3[i]>num2[j]:\n                        merged_list.append(num2[j])\n                        j+=1\n                    elif num3[i]>num1[k]:\n                        merged_list.append(num1[k])\n                        k+=1\n                    else:\n                        merged_list.append(num3[i])\n                        i+=1\n    return merged_list\ndef lengthOfLIS(nums):\n    '''\n    Given a list of integers, find the length of the longest increasing sequence from \n    the list.\n    '''\n    if nums == []:\n        return 0\n    current_max = 0\n    max_length = 0\n    for i in range(len(nums)):\n        if nums[i]>current_max:\n            current_max = nums[i]\n            max_length += 1\n        else:\n            continue\n    return max_length\ndef topKFrequent(nums,k):\n    '''\n    Given a list of numbers and a number k, find the top k frequent numbers.\n    '''\n    dic = {}\n    for i in range(len(nums)):\n        if nums[i] not in dic:\n            dic[nums[i]] = 1\n        else:\n            dic[nums[i]] += 1\n    sorted_list = []\n    for i in dic:\n        sorted_list.append((dic[i],i))\n    sorted_list.sort(reverse = True)\n    return [x[1] for x in sorted_list[:k]]\ndef rob(nums):\n    '''\n    Given a list of integers, find the maximum sub-array.\n    '''\n    if nums == []:\n        return 0\n    n = len(nums)\n    max_ending_here = [nums[0]]\n    for i in range(1,n):\n        if nums[i]>max_ending_here[i-1]:\n            max_ending_here.append(nums[i])\n        else:\n            max_ending_here.append(max_ending_here[i-1])\n    return max_ending_here[n-1]\ndef findStrobogrammatic(n):\n    '''\n    Write a function to generate the first n strobogrammatic numbers.\n    '''\n    strobo_list = []\n    if n==0:\n        return strobo_list\n    strobo_list = ['']\n    if n==1:\n        return strobo_list\n    strobo_list = ['0','1','8']\n    if n==2:\n        return strobo_list\n    for i in range(3,n+1):\n        temp_list = []\n        if i%2==0:\n            for j in strobo_list:\n                temp_list.append('0'+j+'0')\n        else:\n            for j in strobo_list:\n                temp_list.append('1'+j+'1')\n                temp_list.append('6'+j+'9')\n                temp_list.append('8'+j+'8')\n                temp_list.append('9'+j+'6')\n        strobo_list = temp_list\n    return strobo_list\ndef maxProduct(arr):\n    '''\n    Given a list of integers, find the maximum product of two integers in the list.\n    '''\n    if arr == []:\n        return 0\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product>max_product:\n                max_product = product\n    return max_product\ndef maxSumTwoNoOverlap(arr,k):\n    '''\n    Given a list of integers, find the maximum sum of k non-overlapping sub-arrays.\n    '''\n    if arr == []:\n        return 0\n    max_sum = 0\n    for i in range(len(arr)-k+1):\n        current_sum = 0\n        for j in range(i,i+k):\n            current_sum += arr[j]\n        max_sum = max(max_sum,current_sum)\n    return max_sum\ndef countSmaller(arr):\n    '''\n    Given a list of integers, find the number of integers that are smaller than the given integer.\n    '''\n    if arr == []:\n        return 0\n    count = 0\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]>arr[i-1]:\n            count += 1\n    retur"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    m = []\n    h1 = heapq.heapify(num1)\n    h2 = heapq.heapify(num2)\n    h3 = heapq.heapify(num3)\n    while h1 and h2 and h3:\n        if h1[0] < h2[0] and h1[0] < h3[0]:\n            m.append(h1[0])\n            heapq.heappop(h1)\n        elif h2[0] < h3[0]:\n            m.append(h2[0])\n            heapq.heappop(h2)\n        elif h1[0] > h3[0]:\n            m.append(h3[0])\n            heapq.heappop(h3)\n        else:\n            m.append(h1[0])\n            heapq.heappop(h1)\n            heapq.heappop(h2)\n            heapq.heappop(h3)\n    while h1:\n        m.append(h1[0])\n        heapq.heappop(h1)\n    while h2:\n        m.append(h2[0])\n        heapq.heappop(h2)\n    while h3:\n        m.append(h3[0])\n        heapq.heappop(h3)\n    return m\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    final_list = []\n    \n    #iterate over list 1\n    for n1 in num1:\n        heapq.heappush(final_list,n1)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    x = num1 + num2 + num3\n    return sorted(x)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    n1 = len(num1)\n    n2 = len(num2)\n    n3 = len(num3)\n    if n1>0:\n        heap.append(num1[0])\n    if n2>0:\n        heap.append(num2[0])\n    if n3>0:\n        heap.append(num3[0])\n    heapq.heapify(heap)\n    i = 0\n    while i<n1:\n        a = heapq.heappop(heap)\n        if i<n2:\n            b = heapq.heappop(heap)\n            if a<b:\n                heapq.heappush(heap,a)\n                heapq.heappush(heap,b)\n            else:\n                heapq.heappush(heap,b)\n                heapq.heappush(heap,a)\n        i+=1\n    return heap\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i1 = 0\n    i2 = 0\n    i3 = 0\n    mergedList = []\n    while i1 < len(num1) and i2 < len(num2) and i3 < len(num3):\n        if num1[i1] <= num2[i2] and num1[i1] <= num3[i3]:\n            mergedList.append(num1[i1])\n            i1+=1\n        elif num2[i2] <= num1[i1] and num2[i2] <= num3[i3]:\n            mergedList.append(num2[i2])\n            i2+=1\n        else:\n            mergedList.append(num3[i3])\n            i3+=1\n    while i1 < len(num1):\n        mergedList.append(num1[i1])\n        i1+=1\n    while i2 < len(num2):\n        mergedList.append(num2[i2])\n        i2+=1\n    while i3 < len(num3):\n        mergedList.append(num3[i3])\n        i3+=1\n    return mergedList\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    assert isinstance(num1, list)\n    assert isinstance(num2, list)\n    assert isinstance(num3, list)\n    assert len(num1) == len(num2)\n    assert len(num1) == len(num3)\n    len1 = len(num1)\n    len2 = len(num2)\n    len3 = len(num3)\n    if (len1==1 and len2==1 and len3==1):\n        if (num1[0] > num2[0] and num2[0] > num3[0]):\n            return [num2[0],num1[0],num3[0]]\n        elif (num2[0] > num1[0] and num1[0] > num3[0]):\n            return [num1[0],num2[0],num3[0]]\n        elif (num3[0] > num2[0] and num2[0] > num1[0]):\n            return [num3[0],num2[0],num1[0]]\n    elif (len1==1 and len2==1 and len3>1):\n        if (num1[0] > num2[0] and num2[0] > num3[0] and num3[0] > num1[0]):\n            return [num2[0],num1[0],num3[0]]\n        elif (num2[0] > num1[0] and num1[0] > num3[0] and num3[0] > num2[0]):\n            return [num1[0],num2[0],num3[0]]\n        elif (num3[0] > num2[0] and num2[0] > num1[0] and num1[0] > num3[0]):\n            return [num3[0],num2[0],num1[0]]\n    elif (len1==1 and len2>1 and len3==1):\n        if (num1[0] > num2[0] and num2[0] > num3[0]):\n            return [num2[0],num1[0],num3[0]]\n        elif (num2[0] > num1[0] and num1[0] > num3[0]):\n            return [num1[0],num2[0],num3[0]]\n        elif (num3[0] > num2[0] and num2[0] > num1[0]):\n            return [num3[0],num2[0],num1[0]]\n    elif (len1==1 and len2>1 and len3>1):\n        if (num1[0] > num2[0] and num2[0] > num3[0] and num3[0] > num1[0]):\n            return [num2[0],num1[0],num3[0]]\n        elif (num2[0] > num1[0] and num1[0] > num3[0] and num3[0] > num2[0]):\n            return [num1[0],num2[0],num3[0]]\n        elif (num3[0] > num2[0] and num2[0] > num1[0] and num1[0] > num3[0]):\n            return [num3[0],num2[0],num1[0]]\n    elif (len1>1 and len2==1 and len3==1):\n        if (num1[0] > num2[0] and num2[0] > num3[0]):\n            return [num2[0],num1[0],num3[0]]\n        elif (num2[0] > num1[0] and num1[0] > num3[0]):\n            return [num1[0],num2[0],num3[0]]\n        elif (num3[0] > num2[0] and num2[0] > num1[0]):\n            return [num3[0],num2[0],num1[0]]\n    elif (len1>1 and len2==1 and len3>1):\n        if (num1[0] > num2[0] and num2[0] > num3[0] and num3[0] > num1[0]):\n            return [num2[0],num1[0],num3[0]]\n        elif (num2[0] > num1[0] and num1[0] > num3[0] and num3[0] > num2[0]):\n            return [num1[0],num2[0],num3[0]]\n        elif (num3[0] > num2[0] and num2[0] > num1[0] and num1[0] > num3[0]):\n            return [num3[0],num2[0],num1[0]]\n    elif (len1>1 and len2>1 and len3==1):\n        if (num1[0] > num2[0] and num2[0] > num3[0]):\n            return [num2[0],num1[0],num3[0]]\n        elif (num2[0] > num1[0] and num1[0] > num3[0]):\n            return [num1[0],num2[0],num3[0]]\n        elif (num3[0] > num2[0] and num2[0] > num1[0]):\n            return [num3[0],num2[0],num1[0]]\n    elif (len1>1 and len2>1 and len3>1):\n        if (num1[0] > num2[0] and num2[0] > num3[0] and num3[0] > num1[0]):\n            return [num2[0],num1[0],num3[0]]\n        elif (num2[0] > num1[0] and num1[0] > num3[0] and num3[0] > num2[0]):\n            return [num1[0],num2[0],num3[0]]\n        elif (num3[0] > num2[0] and num2[0] > num1[0] and num1[0] > num3[0]):\n            return [num3[0],num2[0],num1[0]]\n    else:\n        return num1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        if int(s[-1])==0:\n            s=s[:-1]\n        else:\n            s=s[1:]+'0'\n        count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        if int(s,2)%2 ==1:\n            result+=1\n        s = s[1:]+s[0]\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (s == None or len(s) == 0):\n        return 0\n    if (n == 0):\n        return 1\n    if (n < 0):\n        return 0\n    if (n == 1):\n        if (s[0] == '1'):\n            return 1\n        else:\n            return 0\n    if (n % 2 == 1):\n        return odd_Equivalent(s[1:],n-1) + odd_Equivalent(s[0]+s[1:],n-1)\n    else:\n        return odd_Equivalent(s[1:],n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res=0\n    for i in range(1,n+1):\n        res+=(s.count('1')%2)\n        s=format(int(s,2)>>1,'b')\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 1\n    else:\n        return (odd_Equivalent(s,n-1)*(n-1)*s.count(s[n-1]) + odd_Equivalent(s,n-1)*s[n-1])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    for i in range(n):\n        s = s[1:]+s[0]\n    if s.count('0')>s.count('1'):\n        return s.count('0')\n    else:\n        return s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n==0:\n        return 1\n    if n<0:\n        return 0\n    else:\n        return odd_Equivalent(s[1:]+s[0],n-1)\ndef count_bits(n):\n    '''\n    Write a python function to find the number of bits set to 1 in a number.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return 1+count_bits(n//2)\ndef bit_flip(s,i,n):\n    '''\n    Write a python function to flip the bit at index i in an integer.\n    '''\n    return (s&(1<<i)^(1<<i))|(s&(~(1<<i)))\ndef generate_permutations(s):\n    '''\n    Write a python function to find the permutations of a string.\n    '''\n    if len(s)==0:\n        return\n    else:\n        first=s[0]\n        remainder=s[1:]\n        n_permutations=generate_permutations(remainder)\n        if len(n_permutations)==0:\n            print(first)\n        else:\n            for i in n_permutations:\n                print(first+i)\ndef generate_permutations_recursive(s):\n    '''\n    Write a python function to find the permutations of a string using recursion.\n    '''\n    if len(s)==0:\n        return\n    else:\n        first=s[0]\n        remainder=s[1:]\n        n_permutations=generate_permutations(remainder)\n        if len(n_permutations)==0:\n            print(first)\n        else:\n            for i in n_permutations:\n                print(first+i)\ndef find_max(s):\n    '''\n    Write a python function to find the maximum and the index of the maximum element in the given string.\n    '''\n    max_num=s[0]\n    max_index=0\n    for i in range(1,len(s)):\n        if s[i]>max_num:\n            max_num=s[i]\n            max_index=i\n    return max_num,max_index\ndef max_rearrange(s):\n    '''\n    Write a python function to rearrange a string into a string with alternating characters.\n    '''\n    new_s=\"\"\n    i=0\n    while i<len(s):\n        new_s+=s[i]+s[i+1]\n        i+=2\n    return new_s\ndef reorder_letter(s):\n    '''\n    Write a python function to rearrange a string into a string with alternating characters such that characters that appear at odd indices are swapped with their counterparts.\n    '''\n    n=len(s)\n    if n==0:\n        return\n    else:\n        first=s[0]\n        remainder=s[1:]\n        n_permutations=reorder_letter(remainder)\n        if len(n_permutations)==0:\n            print(first)\n        else:\n            for i in n_permutations:\n                print(first+i)\ndef permutations_with_duplicates(s):\n    '''\n    Write a python function to rearrange a string into a string with alternating characters such that characters that appear at odd indices are swapped with their counterparts.\n    '''\n    new_s=\"\"\n    i=0\n    while i<len(s):\n        new_s+=s[i]+s[i+1]\n        i+=2\n    return new_s\ndef find_max_substring(s):\n    '''\n    Write a python function to find the longest substring in a string that contains at most 2 distinct characters.\n    '''\n    max_s=\"\"\n    for i in range(0,len(s)-1):\n        for j in range(i+1,len(s)):\n            if s[i]+s[j]==s[j]+s[i]:\n                if len(s[i]+s[j])>len(max_s):\n                    max_s=s[i]+s[j]\n    return max_s\ndef k_sum(s,k):\n    '''\n    Write a python function to find the number of ways to reach the top of a ladder with a given number of steps.\n    '''\n    if k==1:\n        return 1\n    if k==0:\n        return 1\n    else:\n        first=s[0]\n        remainder=s[1:]\n        n_permutations=k_sum(remainder,k-1)\n        if len(remainder)==0:\n            return n_permutations\n        else:\n            for i in n_permutations:\n                print(first+i)\ndef fibonacci_recursive(n):\n    '''\n    Write a python function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1)+fibonacci_recursive(n-2)\ndef factorial_recursive(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*factorial_recursive(n-1)\ndef sum_recursive(n):\n    '''\n    Write a python function to find the sum of all the numbers from 1 to n.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n+sum_recursive(n-1)\ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(s)==0:\n        return True\n    elif s[0]==s[-1]:\n        return palindrome(s[1:-1])\n    else:\n        return False\ndef find_max_bitwise(s):\n    '''\n    Write a python function to find the maximum bitwise XOR of two numbers.\n    '''\n    if len(s)==0:\n        return\n    else:\n        first=s[0]\n        remainder=s[1:]\n        max_bitwise=find_max_bitwise(remainder)\n        if len(remainder)==0:\n            return max_bitwise\n        else:\n            return max_bitwise|first\ndef generate_permutations_with_replacement(s):\n    '''\n    Write a python function to find the permutations of a string using replacement.\n    '''\n    if len(s)==0:\n        return\n    else:\n        first=s[0]\n        remainder=s[1:]\n        n_permutations=generate_permutations_with_replacement(remainder)\n        if len(n_permutations)==0:\n            print(first)\n        else:\n            for i in n_permutations:\n                print(first+i)\ndef generate_permutations_with_replacement(s):\n    '''\n    Write a python function to find the permutations of a string using replacement.\n    '''\n    if len(s)==0:\n        return\n    else:\n        first=s[0]\n        remainder=s[1:]\n        n_permutations=generate_permutations_with_replacement(remainder)\n        if len(n_permutations)==0:\n            print(first)\n        else:\n            for i in n_permutations:\n                print(first+i)\ndef find_unique_characters(s):\n    '''\n    Write a python function to find the number of unique characters in a string.\n    '''\n    if len(s)==0:\n        return\n    else:\n        first=s[0]\n        remainder=s[1:]\n        n_permutations=find_unique_characters(remainder)\n        if len(remainder)==0:\n            return n_permutations\n        else:\n            return n_permutations+1\ndef find_unique_characters_recursive(s)"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s=='0':\n        return n\n    return odd_Equivalent(s[1:],n+1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in s:\n        if int(i)%2 == 1:\n            count = count+1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s = '1001'\n    # n = 2\n    '''\n    We first define the binary number function to test the string and the number\n    '''\n    def binary_String(n):\n        '''\n        This function is used to convert a given number to a binary number\n        '''\n        b = 0\n        ans = 0\n        while n > 0:\n            if n%2 == 0:\n                b = b * 10\n            else:\n                b = b + 1\n            n = n/2\n        while b > 0:\n            if b%2 == 1:\n                ans = ans * 10\n            else:\n                ans = ans + 1\n            b = b/2\n        return ans\n    '''\n    Next we define a function to count the number of possible rotations of the string\n    '''\n    def possible_Rotations(s,n):\n        '''\n        This function is used to count the possible rotations of the string\n        '''\n        count = 0\n        for i in range(n):\n            count = count + 2**binary_String(i)\n        return count\n    '''\n    Finally we define a function to count the number of possible rotations for a given string \n    '''\n    def count_Rotations(s,n):\n        '''\n        This function is used to count the possible rotations for a given string\n        '''\n        c = possible_Rotations(s,n)\n        r = 0\n        if n == 0:\n            r = 0\n        else:\n            r = c%2\n        return r\n    '''\n    We now compute the number of strings with an odd number of rotations\n    '''\n    r = count_Rotations(s,n)\n    if n == 0:\n        r = 2**len(s)\n    else:\n        r = r / 2**n\n    return r\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    if len(nestedlist) == 0:\n        return []\n    for l in nestedlist:\n        for m in l:\n            if m in common:\n                continue\n            elif m not in common:\n                common.append(m)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_dictionary = {}\n    for list in nestedlist:\n        for element in list:\n            if element in list_dictionary:\n                list_dictionary[element] += 1\n            else:\n                list_dictionary[element] = 1\n    print(list_dictionary)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*(set(x) for x in nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_ele = []\n    # if there is only one element in the list\n    if len(nestedlist)==1:\n        return nestedlist[0]\n    # find common element in first two element\n    first_ele = common_in_nested_lists(nestedlist[0])\n    second_ele = common_in_nested_lists(nestedlist[1])\n    # find common element in both the list\n    for ele in first_ele:\n        if ele in second_ele:\n            common_ele.append(ele)\n    return common_ele\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return None\n    return [x for x in nestedlist[0] if all([x in sublist for sublist in nestedlist])]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # looping all the list\n    for sublist in nestedlist:\n        for item in sublist:\n            if item in nestedlist:\n                nestedlist.remove(item)\n    return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist_dict = {}\n    for list1 in nestedlist:\n        for list2 in list1:\n            if list2 not in nestedlist_dict:\n                nestedlist_dict[list2] = 0\n            nestedlist_dict[list2] += 1\n    return [key for key in nestedlist_dict if nestedlist_dict[key] == len(nestedlist)]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    if len(nestedlist) == 0:\n        return result\n    \n    first_element = nestedlist[0][0]\n    result.append(first_element)\n    for nestedlist in nestedlist:\n        if not nestedlist:\n            continue\n        for element in nestedlist:\n            if element == first_element:\n                continue\n            else:\n                result.append(element)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not any(nestedlist):\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    return common_in_nested_lists([[e for e in inner if e in nestedlist[0]] for inner in nestedlist])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_values = set(nestedlist[0])\n    for list_item in nestedlist:\n        list_values &= set(list_item)\n    return list_values\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef longest_common_substring(s1, s2):\n    '''\n    Write a function to find the longest common substring in two strings.\n    '''\n    m = [[0]*(1+len(s2)) for i in xrange(1+len(s1))]\n    longest, x_longest = 0, 0\n    for x in xrange(1, 1+len(s1)):\n        for y in xrange(1, 1+len(s2)):\n            if s1[x-1] == s2[y-1]:\n                m[x][y] = m[x-1][y-1]+1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest-longest: x_longest]\n    \ndef can_spell(s1, s2):\n    '''\n    Write a function that accepts two strings and returns true if the second\n    string is a spelling of the first string, and false otherwise.\n    '''\n    return longest_common_substring(s1, s2) == s1\n    \ndef reverse_words(s):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    return''.join(reversed(s.split(' ')))\n    \ndef unique_numbers(s):\n    '''\n    Write a function to return the unique integers in the given string.\n    '''\n    return set(map(int, filter(lambda x: check_integer(x), s.split(' '))))\n    \ndef remove_kth(numbers, k):\n    '''\n    Write a function to remove the kth element from a list.\n    '''\n    numbers.remove(k)\n    return numbers\n    \ndef is_sorted(seq):\n    '''\n    Write a function to check if a sequence is sorted or not.\n    '''\n    for i in range(len(seq)-1):\n        if seq[i] > seq[i+1]:\n            return False\n    return True\n    \ndef are_permutations(s1, s2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\n    \ndef permute(seq):\n    '''\n    Write a function to permute a string.\n    '''\n    if len(seq) == 1:\n        return [seq]\n    result = []\n    for i, x in enumerate(seq):\n        for perm in permute(seq[:i]+seq[i+1:]):\n            result.append([x]+perm)\n    return result\n    \ndef has_duplicate_elements(seq):\n    '''\n    Write a function to check if a sequence has duplicate elements or not.\n    '''\n    return len(seq)!= len(set(seq))\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef find_anagram(word, candidates):\n    '''\n    Write a function to find anagram of a given word.\n    '''\n    word = word.lower()\n    candidates = list(map(lambda x: x.lower(), candidates))\n    if len(word)!= len(candidates[0]):\n        return None\n    return sorted(word) == sorted(''.join(candidates))\n    \ndef find_anagram(word, candidates):\n    '''\n    Write a function to find anagram of a given word.\n    '''\n    word = word.lower()\n    candidates = list(map(lambda x: x.lower(), candidates))\n    if len(word)!= len(candidates[0]):\n        return None\n    return sorted(word) == sorted(''.join(candidates))\n    \ndef find_anagram(word, candidates):\n    '''\n    Write a function to find anagram of a given word.\n    '''\n    word = word.lower()\n    candidates = list(map(lambda x: x.lower(), candidates))\n    if len(word)!= len(candidates[0]):\n        return None\n    return sorted(word) == sorted(''.join(candidates))\n    \ndef is_a_triangle(a, b, c):\n    '''\n    Write a function to check if a triangle can be built with the given sides.\n    '''\n    return a + b > c and a + c > b and b + c > a\n    \ndef find_number(s):\n    '''\n    Write a function to find a number in the given string.\n    '''\n    try:\n        return int(s)\n    except ValueError:\n        return None\n    \ndef is_abecedarian(s):\n    '''\n    Write a function to check if a string is an abecedarian.\n    '''\n    return all(s[i] <= s[i+1] for i in xrange(len(s)-1))\n    \ndef smallest_substring(s):\n    '''\n    Write a function to find the smallest substring in a string that contains all\n    the characters of another string.\n    '''\n    i = 0\n    smallest = len(s)\n    current = ''\n    char_set = set(s)\n    while i < len(s):\n        j = i\n        while j < len(s) and s[j] in char_set:\n            current += s[j]\n            j += 1\n        if len(current) < smallest:\n            smallest = len(current)\n            current = ''\n        i = j\n    return smallest\n    \ndef median_string(s, k):\n    '''\n    Write a function to find the median string of a set of strings.\n    '''\n    s = sorted(s)\n    mid = k/2\n    if k % 2 == 1:\n        return s[mid]\n    return (s[mid-1] + s[mid])/2\n    \ndef count_decodings(s):\n    '''\n    Write a function to count the number of valid ways to decode a given string.\n    '''\n    if len(s) == 0:\n        return 1\n    count = 0\n    if s[0]!= '0':\n        count += count_decodings(s[1:])\n    if len(s) >= 2 and (s[0] == '1' or (s[0] == '2' and s[1] < '7')):\n        count += count_decodings(s[2:])\n    return count\n    \ndef is_an_arrangement(s1, s2):\n    '''\n    Write a function to check if a string is an arrangement of two other strings.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef count_pos_and_neg(s):\n    '''\n    Write a function to count the positive and negative integers in a string.\n    '''\n    pos = sum(map(lambda x: int(x) > 0, s.split(' ')))\n    neg = sum(map(lambda x: int(x) < 0, s.split(' ')))\n    return (pos, neg)\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome_2(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome_3(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome_4(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(s) == 0:\n        return Tru"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return int(text)\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if int(text):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \ndef check_string(text):\n    '''\n    Write a function to check if a string represents a string or not.\n    '''\n    try:\n        if str(text):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    try:\n        if float(text):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \ndef check_list(text):\n    '''\n    Write a function to check if a string represents a list or not.\n    '''\n    try:\n        if text[0] == \"[\" and text[-1] == \"]\":\n            return True\n        else:\n            return False\n    except IndexError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not i for i in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    l1=len(list1)\n    if l1==0:\n        return True\n    else:\n        l2=len(list1[0])\n        for i in range(l1):\n            if l2!=len(list1[i]):\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i:\n            empty = False\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for a in list1:\n        if not a:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1:\n        for dic in list1:\n            if dic:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary == {}:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(x for x in nums)\n    \n    \ndef smallest_subarray(nums, s):\n    '''\n    Find the smallest subarray with sum at least equal to given s\n    '''\n    smallest = len(nums)\n    smallest_index = 0\n    cur_sum = 0\n    for i in xrange(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum >= s:\n            while cur_sum >= s:\n                smallest = min(smallest, i - smallest_index)\n                cur_sum -= nums[smallest_index]\n                smallest_index += 1\n    return smallest\n    \n    \ndef min_chars(s, chars):\n    '''\n    Find the minimum number of characters you need to delete to make a word palindrome\n    '''\n    \n    def helper(nums, s, cur_index, cur_min, cur_del, chars):\n        if cur_index == len(nums):\n            if s == 0:\n                return True\n            return False\n        \n        cur_del += nums[cur_index]\n        \n        if cur_del < 0:\n            return False\n        \n        if helper(nums, s, cur_index + 1, cur_min, cur_del, chars):\n            return True\n        \n        helper(nums, s, cur_index + 1, cur_min, cur_del - nums[cur_index], chars)\n        \n        return False\n    \n    \n    return helper(sorted(s), s, 0, 0, 0, set())\n    \n    \ndef three_sum(nums):\n    '''\n    Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0?\n    Find all unique triplets in the array which gives the sum of zero.\n    '''\n    res = []\n    nums.sort()\n    for i in xrange(len(nums) - 2):\n        if i!= 0 and nums[i] == nums[i - 1]:\n            continue\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            s = nums[i] + nums[j] + nums[k]\n            if s == 0:\n                res.append((nums[i], nums[j], nums[k]))\n                while j < k and nums[j] == nums[j + 1]:\n                    j += 1\n                while j < k and nums[k] == nums[k - 1]:\n                    k -= 1\n                j += 1\n                k -= 1\n            elif s > 0:\n                k -= 1\n            else:\n                j += 1\n    return res\n    \n    \ndef is_valid_bst(root):\n    '''\n    Given a binary tree, determine if it is a valid binary search tree (BST).\n    Assume a BST is defined as follows:\n    The left subtree of a node contains only nodes with keys less than the node's key.\n    The right subtree of a node contains only nodes with keys greater than the node's key.\n    Both the left and right subtrees must also be binary search trees.\n    '''\n    def helper(root, min_val, max_val):\n        if not root:\n            return True\n        if root.val <= min_val or root.val >= max_val:\n            return False\n        return helper(root.left, min_val, root.val) and helper(root.right, root.val, max_val)\n    return helper(root, float('-inf'), float('inf'))\n    \n    \ndef is_same_tree(p, q):\n    '''\n    Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n    Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n    '''\n    if not p and not q:\n        return True\n    if not p or not q:\n        return False\n    if p.val!= q.val:\n        return False\n    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)\n    \n    \ndef is_same_tree_2(p, q):\n    '''\n    Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n    Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n    '''\n    if not p and not q:\n        return True\n    if not p or not q:\n        return False\n    return (p.val == q.val) and is_same_tree_2(p.left, q.left) and is_same_tree_2(p.right, q.right)\n    \n    \ndef array_of_products(nums):\n    '''\n    Write a function, compute_array_of_products, to compute the array of products of all the elements of an array.\n    For example, given the array [2, 3, 4], the function should return the array [2, 6, 12] because 2 * 3 * 4 = 2 + 3 + 4.\n    '''\n    \n    res = []\n    for i in xrange(len(nums)):\n        prod = 1\n        for j in xrange(len(nums)):\n            if i!= j:\n                prod *= nums[j]\n        res.append(prod)\n    return res\n    \n    \ndef max_continuous_sum(nums):\n    '''\n    Given an array of integers, find the maximum continuous sum.\n    '''\n    res = cur_sum = nums[0]\n    for i in xrange(1, len(nums)):\n        cur_sum = max(nums[i], cur_sum + nums[i])\n        res = max(res, cur_sum)\n    return res\n    \n    \ndef is_palindrome(s):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    For example,\n    \"A man, a plan, a canal: Panama\" is a palindrome.\n    \"race a car\" is not a palindrome.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        while not s[i].isalnum() and i < j:\n            i += 1\n        while not s[j].isalnum() and i < j:\n            j -= 1\n        if s[i].lower()!= s[j].lower():\n            return False\n        i += 1\n        j -= 1\n    return True\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function that takes a string as input and returns the string reversed.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_vowels(s):\n    '''\n    Given a string, write a function that returns the string with all vowels reversed.\n    For example, given \"Hello\", return \"Holle\".\n    '''\n    res = []\n    for i in xrange(len(s)):\n        if s[i] in 'aeiouAEIOU':\n            res.append(s[i])\n    for i in xrange(len(s)):\n        if s[i] not in 'aeiouAEIOU':\n            res.append(s[i])\n    return ''.join(res)\n    \n    \ndef is_one_edit_distance(s, t):\n    '''\n    Given two strings s and t, determine if they are both one edit distance apart.\n    '''\n    if len(s) > len(t):\n        return is_one_edit_distance(t, s)\n    if len(s) == 0:\n        return len(t) == 1\n    if len(s) == 1:\n        return t == s or (t[1:] == s)\n    if s[0] == t[0]:\n        return is_one_edit_distance(s[1:], t[1:])\n    else:\n        return is_one_edit_distance(s[1:], t)\n    \n    \ndef all_equal(nums):\n    ''"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    answer = 0\n    for num in nums:\n        answer = answer * 10 + num\n    return answer\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    s = 0\n    for x in nums:\n        s = s * 10 + x\n    return s\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda a,b:a*10+b, nums)\nprint(tuple_to_int((2, 3, 4)))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in nums:\n        num = num * 10 + i\n    return num\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return reduce(lambda x, y: x*y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10+y,nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        raise ValueError(\"Input is not a tuple.\")\n    elif not all(isinstance(num, int) and num > 0 for num in nums):\n        raise ValueError(\"Input is not a tuple of positive integers.\")\n    return int(\"\".join(str(num) for num in nums))\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums.sort(reverse=True)\n    result = 0\n    for i in nums:\n        result *= 10\n        result += i\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        float_list.append(list_to_float(sublist))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) for x in l] for l in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in range(0,len(test_list)):\n        for y in range(0,len(test_list[x])):\n            if test_list[x][y].isdigit():\n                test_list[x][y]=float(test_list[x][y])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #Create the new list\n    new_list = []\n    for i in range(len(test_list)):\n        if type(test_list[i]) is float:\n            new_list.append(test_list[i])\n        elif type(test_list[i]) is str:\n            if test_list[i].isdigit():\n                new_list.append(float(test_list[i]))\n            elif test_list[i][1:].isdigit():\n                new_list.append(float(test_list[i][1:]))\n            elif test_list[i][0] == '-' and test_list[i][1:].isdigit():\n                new_list.append(float(test_list[i][1:]))\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for list in test_list:\n        for i, value in enumerate(list):\n            try:\n                list[i] = float(value)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                test_list[i][j] = float(0)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        for j in i:\n            try:\n                j = float(j)\n            except:\n                pass\n            float_list.append(j)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for element in test_list:\n        if type(element) in (list, tuple):\n            float_list.append(list_to_float(element))\n        elif type(element) == str:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                float_list.append(element)\n        else:\n            float_list.append(float(element))\n    return float_list\n    \n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(len(test_list)):\n        for j in range(len(test_list[index])):\n            try:\n                test_list[index][j] = float(test_list[index][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = [x.strip() for x in string.split(' ')]\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    # Split the string on spaces \n    new_string = string.split(\" \")\n    \n    return new_string\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Approach 1: naive method\n    def naive_search(arr, elem):\n        length = len(arr)\n        for i in range(length):\n            if arr[i] == elem:\n                return i\n        return -1\n    arr = [1,2,3,4,4,4,5,5,5]\n    elem = 4\n    index = naive_search(arr, elem)\n    if index!= -1:\n        print \"Element = %s, position = %d\" % (elem, index)\n    else:\n        print \"Element = %s not found\" % elem\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr[0]!= arr[1] and arr[-1]!= arr[-2]:\n        return arr[0]\n    if arr[0] == arr[1]:\n        return arr[0]\n    if arr[-1] == arr[-2]:\n        return arr[-1]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        mid = int(len(arr)/2)\n        # if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n        #     return arr[mid]\n        # elif arr[mid] == arr[mid-1]:\n        #     return search(arr[:mid])\n        # else:\n        #     return search(arr[mid+1:])\n        if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid+1]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid+1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    '''\n    Input: sorted array arr\n    Output: element that appears only once in the array\n    '''\n    i=0\n    j=0\n    while(i<len(arr)):\n        if(arr[i]==arr[j]):\n            i=i+1\n        else:\n            j=j+1\n    return arr[j]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # start of the algorithm\n    # arr.sort()\n    # print arr\n    # size = len(arr)\n    # for i in range(size):\n    #     if arr[i] == arr[i+1]:\n    #         print 'element %s appears twice' % arr[i]\n    #         break\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = start + (end-start)//2\n        # if arr[mid] == arr[mid+1]:\n        #     start = mid+1\n        # elif arr[mid] == arr[mid-1]:\n        #     end = mid-1\n        # else:\n        #     return arr[mid]\n        # if arr[mid] == arr[mid-1]:\n        #     end = mid-1\n        # elif arr[mid] == arr[mid+1]:\n        #     start = mid+1\n        # else:\n        #     return arr[mid]\n        if (mid-1 >= 0 and arr[mid] == arr[mid+1]) or mid == len(arr)-1:\n            start = mid+1\n        elif (mid+1 < len(arr) and arr[mid] == arr[mid-1]) or mid == 0:\n            end = mid-1\n        else:\n            return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start,end=0,len(arr)-1\n    while start<end:\n        if arr[start]!=arr[end]:\n            return arr[start]\n        start+=1\n        end-=1\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return [x for x in arr if arr.count(x) == 1][0]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = 0\n    for tup1 in list1:\n        for tup2 in list1:\n            if tup1[0]*tup2[1] > maximum:\n                maximum = tup1[0]*tup2[1]\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if res < list1[i][0] * list1[i][1]:\n            res = list1[i][0] * list1[i][1]\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = max(list1[i][0]*list1[i][1] for i in range(len(list1)))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0, len(list1), 2):\n        if (list1[i][0] * list1[i][1]) > max_product:\n            max_product = list1[i][0] * list1[i][1]\n        if (list1[i+1][0] * list1[i+1][1]) > max_product:\n            max_product = list1[i+1][0] * list1[i+1][1]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0] * list1[j][1]))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a = []\n    b = []\n    for i in list1:\n        a.append(i[0])\n        b.append(i[1])\n    ab = sorted([abs(x) for x in a])\n    cd = sorted([abs(x) for x in b])\n    summ = 0\n    for i in range(len(ab)-1):\n        summ = summ + ab[i] * ab[i+1]\n    for i in range(len(cd)-1):\n        summ = summ + cd[i] * cd[i+1]\n    return summ\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max((a * b for a, b in list1))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    '''\n    test_list = [(1, -2), (3, 4), (5, -8), (7, 8), (9, -5)]\n    #print(test_list)\n    print(max_product_tuple(test_list))\n    '''\n    max_product = 0\n    for i, num1 in enumerate(list1):\n        if i % 2 == 0:\n            for num2 in list1[i+1:]:\n                product = num1 * num2\n                if product > max_product:\n                    max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x: x[0], reverse = True)\n    list2 = sorted(list1, key = lambda x: x[1], reverse = True)\n    for x in range(0, len(list1) - 1):\n        for y in range(x + 1, len(list1)):\n            if list1[x][0] > list1[y][0]:\n                if list1[x][0] < 0:\n                    return list1[x][0], list1[x][1], list1[y][0], list1[y][1]\n            else:\n                if list2[x][1] > list2[y][1]:\n                    if list2[x][1] < 0:\n                        return list2[x][0], list2[x][1], list2[y][0], list2[y][1]\n                else:\n                    if list2[x][1] < 0:\n                        return list2[x][0], list2[x][1], list2[y][0], list2[y][1]\n    return list1[-1][0], list1[-1][1], list2[-1][0], list2[-1][1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = [0]\n    for i in xrange(1, limit):\n        s.append(0)\n    for i in xrange(1, limit):\n        for j in xrange(1, limit):\n            if i + j < limit:\n                s[i + j] += 1\n    return sum(s)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # amicable_numbers = []\n    sum = 0\n    for x in range(1, limit):\n        y = sum_of_divisors(x)\n        if y!= x and sum_of_divisors(y) == x:\n            # amicable_numbers.append(x)\n            sum += x\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    answer = 0\n    for i in range(1, limit):\n        j = i\n        summation = 0\n        while j > 0:\n            digit = j % 10\n            if digit!= 0:\n                summation += digit\n            j = j // 10\n        if i!= summation and i!= summation and i!= summation and i!= summation:\n            answer += i\n    return answer\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            result += i\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sums = set()\n    for n in range(1, limit):\n        s = n\n        div = [i for i in range(1, n) if n % i == 0]\n        if sum(div) == n:\n            if sum(div)!= s:\n                sums.add(sum(div))\n    return sum(sums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [1]\n    amicable_numbers_set = set(amicable_numbers)\n    for i in range(2, limit+1):\n        if i in amicable_numbers_set:\n            amicable_numbers.append(i)\n            j = sum_factors(i)\n            if sum_factors(j) == i and j!= i:\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(x for x in range(1,limit) if x in get_amicable_sum(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for num in range(1,limit):\n        if is_amicable(num):\n            amicable_nums.append(num)\n    return sum(amicable_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for n in range(1,limit):\n        if n not in amicable_numbers:\n            sum = n\n            for i in range(1,n):\n                if n % i == 0:\n                    sum += i\n            if sum == n:\n                amicable_numbers.add(n)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for number in range(1, limit):\n        divisors = get_divisors(number)\n        if len(divisors) == 4 and number!= sum(divisors):\n            divisors2 = get_divisors(sum(divisors))\n            if len(divisors2) == 4 and sum(divisors2) == number:\n                amicable_numbers_sum += number\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #x=a.real\n    #y=a.imag\n    #if b.real!=0:\n    #    if b.imag>0:\n    #        z=(b.imag-y)/(b.real-x)\n    #    else:\n    #        z=(b.imag+y)/(b.real-x)\n    #else:\n    #    if b.imag<0:\n    #        z=(b.imag+y)/(b.real-x)\n    #    else:\n    #        z=(b.imag-y)/(b.real-x)\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a+b*1j\n    return cmath.phase(c)\ndef get_real(num):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    return num.real\ndef get_imag(num):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    return num.imag\ndef add(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    return a+b\ndef subtract(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    return a-b\ndef multiply(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    return a*b\ndef divide(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    return a/b\ndef mod(a,b):\n    '''\n    Write a function to find the modulus of a complex number.\n    '''\n    return a%b\ndef conjugate(a):\n    '''\n    Write a function to find the conjugate of a complex number.\n    '''\n    return a.conjugate()\ndef exp(a):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    return a**2\ndef cot(a):\n    '''\n    Write a function to find the cotangent of a complex number.\n    '''\n    return a/(a**2+1)\ndef div(a,b):\n    '''\n    Write a function to find the quotient and remainder of a complex number.\n    '''\n    return divmod(a,b)\ndef exp_complex(a):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    return cmath.exp(a)\ndef cot_complex(a):\n    '''\n    Write a function to find the cotangent of a complex number.\n    '''\n    return cmath.acos(a)/(cmath.sin(a)**2+cmath.cos(a)**2)\ndef square_complex(a):\n    '''\n    Write a function to find the square of a complex number.\n    '''\n    return a**2\ndef sqrt_complex(a):\n    '''\n    Write a function to find the square root of a complex number.\n    '''\n    return a**0.5\ndef power_complex(a,b):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    return a**b\ndef mod_complex(a,b):\n    '''\n    Write a function to find the modulus of a complex number.\n    '''\n    return a%b\ndef real(num):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    return get_real(num)\ndef imag(num):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    return get_imag(num)\ndef angle(num):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return angle_complex(num)\ndef conj(num):\n    '''\n    Write a function to find the conjugate of a complex number.\n    '''\n    return conjugate(num)\ndef arg(num):\n    '''\n    Write a function to find the argument of a complex number.\n    '''\n    return cmath.phase(num)\ndef exp(num):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    return exp_complex(num)\ndef cot(num):\n    '''\n    Write a function to find the cotangent of a complex number.\n    '''\n    return cot_complex(num)\ndef square(num):\n    '''\n    Write a function to find the square of a complex number.\n    '''\n    return square_complex(num)\ndef sqrt(num):\n    '''\n    Write a function to find the square root of a complex number.\n    '''\n    return sqrt_complex(num)\ndef power(num,b):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    return power_complex(num,b)\ndef mod(num,b):\n    '''\n    Write a function to find the modulus of a complex number.\n    '''\n    return mod_complex(num,b)\ndef real(num):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    return get_real(num)\ndef imag(num):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    return get_imag(num)\ndef angle(num):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return angle_complex(num)\ndef conj(num):\n    '''\n    Write a function to find the conjugate of a complex number.\n    '''\n    return conjugate(num)\ndef arg(num):\n    '''\n    Write a function to find the argument of a complex number.\n    '''\n    return arg(num)\ndef exp(num):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    return exp_complex(num)\ndef cot(num):\n    '''\n    Write a function to find the cotangent of a complex number.\n    '''\n    return cot_complex(num)\ndef square(num):\n    '''\n    Write a function to find the square of a complex number.\n    '''\n    return square_complex(num)\ndef sqrt(num):\n    '''\n    Write a function to find the square root of a complex number.\n    '''\n    return sqrt_complex(num)\ndef power(num,b):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    return power_complex(num,b)\ndef mod(num,b):\n    '''\n    Write a function to find the modulus of a complex number.\n    '''\n    return mod_complex(num,b)\ndef sin(num):\n    '''\n    Write a function to find the sine of a complex number.\n    '''\n    return cmath.sin(num)\ndef cos(num):\n    '''\n    Write a function to find the cosine of a complex number.\n    '''\n    return cmath.cos(num)\ndef tan(num):\n    '''\n    Write a function to find the tangent of a complex number.\n    '''\n    return cmath.tan(num)\ndef arcsin(num):\n    '''\n    Write a function to find the inverse sine of a complex number.\n    '''\n    return cmath.asin(num)\ndef arccos(num):\n    '''\n    Write a function to find the inverse cosine of a complex number.\n    '''\n    return cmath.acos(num)\ndef arctan(num):\n    '''\n    Write a function to find the inverse tangent of a complex number.\n    '''\n    return cmath.atan(num)\ndef sinh(num):\n    '''\n    Write a function to find the hyperbolic sine of a complex number.\n    '''\n    return cmath.sinh(num)\ndef cosh(num):\n    '''\n    Write a function to find the hyperbolic cosine of a complex number.\n    '''\n    return cmath.cosh(num)\ndef tanh(num):\n    '''\n    Write a function to find the hyperbolic tangent of a complex number.\n    '''\n    return cmath.tanh(num)\ndef arcsinh(num):\n    '''\n    Write a function to find the inverse hyperbolic sine of a complex number.\n    '''\n    return cmath.asinh(num)\ndef arccosh(num):\n    '''\n    Write a function to find the inverse hyperbolic cosine of a complex number.\n    '''\n    return cmath.acosh(num)\ndef artanh(num)"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + b*1j\n    return cmath.phase(c)\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = cmath.phase(complex(a,b))\n    return c\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta=0\n    if b!=0:\n        theta=cmath.phase(complex(a,b))\n    return theta\n    \ndef is_in_range(n,r):\n    '''\n    Write a function to check if a number is within a range.\n    '''\n    return (n<r[1]) and (n>r[0])\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    c = a*a+b*b\n    if c > 0:\n        angle = cmath.acos(a/c)\n    else:\n        angle = cmath.acos(a/c)*-1\n    angle = angle.real*180/3.14159\n    return angle\n    \ndef angle_complex_2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    c = a*a+b*b\n    if c > 0:\n        angle = cmath.acos(a/c)\n    else:\n        angle = cmath.acos(a/c)*-1\n    angle = angle.real*180/3.14159\n    return angle\n    \ndef test_angle_complex():\n    '''\n    Write a test function for the function angle_complex\n    '''\n    \n    #this is the unit test to compare your function with the analytical function\n    assert angle_complex(1,0) == 0\n    assert angle_complex(1,-2) == 180\n    assert angle_complex(1,2) == 90\n    assert angle_complex(1,-1) == 90\n    assert angle_complex(1,1) == 90\n    assert angle_complex(0,1) == cmath.pi/2\n    assert angle_complex(0,0) == cmath.pi\n    assert angle_complex(0,-1) == 3*cmath.pi/2\n    assert angle_complex(0,-2) == 2*cmath.pi\n    assert angle_complex(0,2) == cmath.pi\n    assert angle_complex(-1,0) == cmath.pi\n    assert angle_complex(-1,-2) == cmath.pi\n    assert angle_complex(-1,2) == -cmath.pi\n    assert angle_complex(-1,-1) == -cmath.pi\n    assert angle_complex(-1,1) == -cmath.pi\n    assert angle_complex(1,-1) == 0\n    assert angle_complex(1,1) == 0\n    assert angle_complex(1,2) == cmath.pi\n    assert angle_complex(0,-2) == cmath.pi\n    assert angle_complex(0,2) == 0\n    assert angle_complex(1,0) == cmath.pi/2\n    assert angle_complex(1,-1) == cmath.pi/2\n    assert angle_complex(1,1) == cmath.pi/2\n    \n    \ndef test_angle_complex_2():\n    '''\n    Write a test function for the function angle_complex_2\n    '''\n    \n    #this is the unit test to compare your function with the analytical function\n    assert angle_complex_2(1,0) == cmath.pi/2\n    assert angle_complex_2(1,-2) == cmath.pi\n    assert angle_complex_2(1,2) == cmath.pi/2\n    assert angle_complex_2(1,-1) == cmath.pi/2\n    assert angle_complex_2(1,1) == cmath.pi/2\n    assert angle_complex_2(0,1) == cmath.pi/2\n    assert angle_complex_2(0,0) == cmath.pi\n    assert angle_complex_2(0,-1) == cmath.pi\n    assert angle_complex_2(0,-2) == cmath.pi\n    assert angle_complex_2(0,2) == cmath.pi\n    assert angle_complex_2(-1,0) == cmath.pi\n    assert angle_complex_2(-1,-2) == cmath.pi\n    assert angle_complex_2(-1,2) == cmath.pi\n    assert angle_complex_2(-1,-1) == cmath.pi\n    assert angle_complex_2(-1,1) == cmath.pi\n    assert angle_complex_2(1,-1) == 0\n    assert angle_complex_2(1,1) == 0\n    assert angle_complex_2(1,2) == cmath.pi/2\n    assert angle_complex_2(0,-2) == cmath.pi\n    assert angle_complex_2(0,2) == 0\n    assert angle_complex_2(1,0) == cmath.pi/2\n    assert angle_complex_2(1,-1) == cmath.pi/2\n    assert angle_complex_2(1,1) == cmath.pi/2\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # get the angle of a complex number\n    c = a+b*1j\n    angle = cmath.phase(c)\n    # convert radians to degrees\n    angle = angle*180/cmath.pi\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    def find_length(string, l, r):\n        count0, count1 = 0, 0\n        for i in range(l, r):\n            if string[i] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n        return max(count0, count1)\n    if length < 3:\n        return 0\n    min_length = length\n    for i in range(1, length-1):\n        l, r = i, i\n        while l >= 0 and r < length:\n            if string[l] == string[r]:\n                l -= 1\n                r += 1\n            else:\n                break\n        length = min(length, r-l-1)\n        min_length = min(min_length, length)\n    return min_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    length = len(string)\n    max_length = 0\n    \n    for i in range(length):\n        for j in range(i, length):\n            sub_string = string[i:j+1]\n            zeros, ones = 0, 0\n            for c in sub_string:\n                if c == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n            if abs(zeros - ones) > max_length:\n                max_length = abs(zeros - ones)\n                \n    return max_length\n    "
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #index of 1s\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return i\n    return len(string)-1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] == \"1\":\n            count += 1\n        else:\n            count -= 1\n        if count > 0:\n            result = max(result, i - count)\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 0 if string[0] == '0' else 1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    counter = [0] * 256\n    count = 0\n    result = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            counter[ord(string[i])] += 1\n            count += 1\n        else:\n            counter[ord(string[i])] -= 1\n            count -= 1\n        result = max(result, count)\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_0s = 1\n    num_1s = 1\n    count = 0\n    for i in range(1, len(string)): \n        if string[i] == '1':\n            num_1s += 1\n            if num_0s >= num_1s: \n                count += num_0s - num_1s\n        elif string[i] == '0':\n            num_0s += 1\n            if num_0s <= num_1s:\n                count += num_1s - num_0s\n    return count \n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0, count1 = 0, 0\n    length = len(string)\n    max_dif = 0\n    for i in range(length):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_length = 0\n    current_length = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    max_length = max(max_length, current_length)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    number_of_ones = 0\n    number_of_zeroes = 0\n    \n    for i in range(len(string)):\n        if string[i] == '1':\n            number_of_ones += 1\n        else:\n            number_of_zeroes += 1\n        \n        if number_of_ones - number_of_zeroes > max_diff:\n            max_diff = number_of_ones - number_of_zeroes\n            \n    return max_diff\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    f = gcd(a,b)\n    return f*(a/f+b/f)\ndef lcm(a,b): \n    '''\n    Write a python function to find the lowest common multiple of two given numbers.\n    '''\n    return a*b/gcd(a,b)\ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if b==0: \n        return a\n    else: \n        return gcd(b,a%b)\ndef main():\n    print(sum(18,54))\n    print(lcm(18,54))\n    print(gcd(18,54))\nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = a\n    d = b\n    while(b!= 0):\n        t = b\n        b = a % b\n        a = t\n    print a\n    print c/a\n    return c/a\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = [ ] \n    \n    for i in range(1,a+1): \n        if a%i == 0 and b%i == 0: \n            result.append(i)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    else:\n        divisor = []\n        for i in range(2,min(a,b)):\n            if a%i == 0 and b%i == 0:\n                divisor.append(i)\n        return sum(divisor)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for i in range(1,min(a,b) + 1):\n        if a%i == 0 and b%i == 0:\n            c += i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            s+=i\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b/gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=min(a,b)\n    while a%i==0 and b%i==0:\n        i+=1\n    return i\ndef common_div(a,b):\n    '''\n    Write a python function to find the common divisor of two given numbers.\n    '''\n    i=max(a,b)\n    while a%i!=0 or b%i!=0:\n        i-=1\n    return i\ndef sum_of_factors(n):\n    '''\n    Write a python function to find the sum of factors of a given number\n    '''\n    s=1\n    for i in range(1,n+1):\n        if n%i==0:\n            s+=i\n    return s\ndef num_of_factors(n):\n    '''\n    Write a python function to find the number of factors of a given number\n    '''\n    k=0\n    for i in range(1,n+1):\n        if n%i==0:\n            k+=1\n    return k\ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a given number\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            if num_of_factors(i)==2:\n                l.append(i)\n    return l\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a given number is perfect or not\n    '''\n    l=prime_factors(n)\n    s=sum_of_factors(n)\n    return s==n and s!=n\ndef is_amicable(a,b):\n    '''\n    Write a python function to check whether a given two numbers are amicable or not\n    '''\n    return sum(prime_factors(a))==b and sum(prime_factors(b))==a\ndef is_abundant(n):\n    '''\n    Write a python function to check whether a given number is abundant or not\n    '''\n    s=sum_of_factors(n)\n    return s>n\ndef is_deficient(n):\n    '''\n    Write a python function to check whether a given number is deficient or not\n    '''\n    return sum_of_factors(n)<n\ndef is_lucky(n):\n    '''\n    Write a python function to check whether a given number is lucky or not\n    '''\n    return is_deficient(n) and is_abundant(n)\ndef is_strong(n):\n    '''\n    Write a python function to check whether a given number is strong or not\n    '''\n    return is_deficient(n) and not is_lucky(n)\ndef is_proper(n):\n    '''\n    Write a python function to check whether a given number is proper or not\n    '''\n    return is_prime(n) and is_perfect(n)\ndef is_amicable_l(n):\n    '''\n    Write a python function to check whether a given number is amicable or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_amicable(n,b)\ndef is_amicable_s(n):\n    '''\n    Write a python function to check whether a given number is amicable or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_amicable(b,a)\ndef is_strong_l(n):\n    '''\n    Write a python function to check whether a given number is strong or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_strong(n) and is_strong(b)\ndef is_strong_s(n):\n    '''\n    Write a python function to check whether a given number is strong or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_strong(n) and is_strong(b)\ndef is_proper_l(n):\n    '''\n    Write a python function to check whether a given number is proper or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_proper(n) and is_proper(b)\ndef is_proper_s(n):\n    '''\n    Write a python function to check whether a given number is proper or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_proper(n) and is_proper(b)\ndef is_lucky_l(n):\n    '''\n    Write a python function to check whether a given number is lucky or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_lucky(n) and is_lucky(b)\ndef is_lucky_s(n):\n    '''\n    Write a python function to check whether a given number is lucky or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_lucky(n) and is_lucky(b)\ndef is_strong_l(n):\n    '''\n    Write a python function to check whether a given number is strong or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_strong(n) and is_strong(b)\ndef is_strong_s(n):\n    '''\n    Write a python function to check whether a given number is strong or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_strong(n) and is_strong(b)\ndef is_proper_l(n):\n    '''\n    Write a python function to check whether a given number is proper or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_proper(n) and is_proper(b)\ndef is_proper_s(n):\n    '''\n    Write a python function to check whether a given number is proper or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_proper(n) and is_proper(b)\ndef is_lucky_l(n):\n    '''\n    Write a python function to check whether a given number is lucky or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_lucky(n) and is_lucky(b)\ndef is_lucky_s(n):\n    '''\n    Write a python function to check whether a given number is lucky or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_lucky(n) and is_lucky(b)\ndef is_strong_l(n):\n    '''\n    Write a python function to check whether a given number is strong or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return is_strong(n) and is_strong(b)\ndef is_strong_s(n):\n    '''\n    Write a python function to check whether a given number is strong or not\n    '''\n    a=sum(prime_factors(n))\n    b=sum(prime_factors(a))\n    return i"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # a,b = b,a\n    divisors=[]\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find nth number in fibonacci series\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n-2):\n        a,b = b,a+b\n    return b\n    \ndef prime(n):\n    '''\n    Write a python function to find if n is prime or not\n    '''\n    if n > 1:\n        if n == 2:\n            return True\n        if n%2 == 0:\n            return False\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef isPrime(n):\n    '''\n    Write a python function to find if n is prime or not\n    '''\n    if n > 1:\n        if n == 2:\n            return True\n        if n%2 == 0:\n            return False\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef sumSquares(n):\n    '''\n    Write a python function to find sum of the squares of first n natural numbers\n    '''\n    # sq = n*(n+1)*(2*n+1)/6\n    sq = 0\n    for i in range(1,n+1):\n        sq += i*i\n    return sq\n    \ndef sumSquares(n):\n    '''\n    Write a python function to find sum of the squares of first n natural numbers\n    '''\n    sq = 0\n    for i in range(1,n+1):\n        sq += i*i\n    return sq\n    \ndef sumCubes(n):\n    '''\n    Write a python function to find sum of the cubes of first n natural numbers\n    '''\n    sq = 0\n    for i in range(1,n+1):\n        sq += i*i*i\n    return sq\n    \ndef sumCubes(n):\n    '''\n    Write a python function to find sum of the cubes of first n natural numbers\n    '''\n    sq = 0\n    for i in range(1,n+1):\n        sq += i*i*i\n    return sq\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not\n    '''\n    return s[::-1].casefold() == s.casefold()\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not\n    '''\n    if len(s) <= 1:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return isPalindrome(s[1:-1])\n        \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    return sorted(s) == sorted(t)\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    return sorted(s) == sorted(t)\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    if len(s)!= len(t):\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i] not in t:\n                return False\n        return True\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    if len(s)!= len(t):\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i] not in t:\n                return False\n        return True\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    if len(s)!= len(t):\n        return False\n    else:\n        count = [0]*26\n        for i in range(len(s)):\n            count[ord(s[i])-ord('a')] += 1\n            count[ord(t[i])-ord('a')] -= 1\n        for i in count:\n            if i!= 0:\n                return False\n        return True\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    if len(s)!= len(t):\n        return False\n    else:\n        count = [0]*26\n        for i in range(len(s)):\n            count[ord(s[i])-ord('a')] += 1\n            count[ord(t[i])-ord('a')] -= 1\n        for i in count:\n            if i!= 0:\n                return False\n        return True\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    if len(s)!= len(t):\n        return False\n    else:\n        count = [0]*26\n        for i in range(len(s)):\n            count[ord(s[i])-ord('a')] += 1\n            count[ord(t[i])-ord('a')] -= 1\n        for i in count:\n            if i!= 0:\n                return False\n        return True\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    if len(s)!= len(t):\n        return False\n    else:\n        count = [0]*26\n        for i in range(len(s)):\n            count[ord(s[i])-ord('a')] += 1\n            count[ord(t[i])-ord('a')] -= 1\n        for i in count:\n            if i!= 0:\n                return False\n        return True\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    if len(s)!= len(t):\n        return False\n    else:\n        count = [0]*26\n        for i in range(len(s)):\n            count[ord(s[i])-ord('a')] += 1\n            count[ord(t[i])-ord('a')] -= 1\n        for i in count:\n            if i!= 0:\n                return False\n        return True\n    \ndef isAnagram(s,t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not\n    '''\n    s,t = s.lower(),t.lower()\n    if len(s)!= len(t):\n        return False\n    else:\n        count = [0]*26\n        for i in range(len(s)):\n            count[ord(s[i])-ord('a')] += 1\n            count[ord(t[i])-ord('a')] -= 1\n        for i in count:\n        "
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if a%b == 0:\n            return b\n        else:\n            return gcd(b,a%b)\n    a,b = a,b\n    l = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            l.append(i)\n    return sum(l)"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x <= 0 or y <= 0:\n        return 0\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    return x + multiply_int(x, y - 1)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef number_to_list(num):\n    '''\n    Create a list from a number.\n    '''\n    return [int(i) for i in str(num)]\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    if x > 0 and y > 0:\n        return x * y\n    if x < 0 and y > 0:\n        return -1 * (x * y)\n    if x > 0 and y < 0:\n        return -1 * (x * y)\n    if x < 0 and y < 0:\n        return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_of_long_words = []\n    for word in str:\n        if len(word) > n:\n            list_of_long_words.append(word)\n    print list_of_long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    print \"Long words in this list are:\", long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    # If the string is a string, split it up\n    if isinstance(str, str):\n        list = str.split(' ')\n    # If the string is a list, use that list\n    else:\n        list = str\n    \n    # Initialize an empty list to store long words\n    long_words = []\n    \n    # Iterate through the list\n    for word in list:\n        if len(word) > n:\n            long_words.append(word)\n    \n    # Return the long words\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = []\n    for word in str:\n        if len(word) > n:\n            l.append(word)\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import re\n    l = re.findall('\\w+', str)\n    #print l\n    count = 0\n    for i in l:\n        if len(i)>n:\n            count+=1\n            #print i\n    return count\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    l = []\n    for word in words:\n        if len(word) >= n:\n            l.append(word)\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [i for i in str if len(i) > n]\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str:\n        if len(word) > n:\n            print(word)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if magic_square_check(my_matrix):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for any rows which sum to 0\n    for row in my_matrix:\n        if sum(row) == 0:\n            return False\n    # Check for any column which sum to 0\n    for i in range(len(my_matrix)):\n        column = []\n        for j in range(len(my_matrix)):\n            column.append(my_matrix[j][i])\n        if sum(column) == 0:\n            return False\n    # Check for any diagonal which sum to 0\n    diagonal1 = []\n    diagonal2 = []\n    for i in range(len(my_matrix)):\n        diagonal1.append(my_matrix[i][i])\n        diagonal2.append(my_matrix[len(my_matrix)-1-i][i])\n    if sum(diagonal1) == 0 or sum(diagonal2) == 0:\n        return False\n    # If we made it all the way, we know it's a magic square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check all the rows and columns\n    for i in range(len(my_matrix)):\n        row_total = sum(my_matrix[i])\n        column_total = 0\n        for j in range(len(my_matrix)):\n            column_total += my_matrix[j][i]\n        if row_total!= column_total:\n            return False\n    # Check diagonals\n    diag1 = 0\n    diag2 = 0\n    for i in range(len(my_matrix)):\n        diag1 += my_matrix[i][i]\n        diag2 += my_matrix[i][len(my_matrix) - 1 - i]\n    if diag1!= diag2:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic = False\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    num_diag = 0\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if(my_matrix[i][j]!= magic_num):\n                magic = False\n                break\n            else:\n                magic = True\n    if(magic == True):\n        for i in range(num_rows):\n            for j in range(num_cols):\n                if(my_matrix[i][j]!= magic_num):\n                    num_diag += 1\n                    if(num_diag!= 4):\n                        magic = False\n                        break\n            if(magic == False):\n                break\n    return magic"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #method 1\n    # num_sum = 0\n    # for i in range(len(my_matrix)):\n    #     num_sum += my_matrix[i][i]\n    # if num_sum!= 0:\n    #     return False\n    # for i in range(len(my_matrix)):\n    #     temp_sum = 0\n    #     for j in range(len(my_matrix[i])):\n    #         temp_sum += my_matrix[j][i]\n    #     if temp_sum!= 0:\n    #         return False\n    # for i in range(len(my_matrix)):\n    #     temp_sum = 0\n    #     for j in range(len(my_matrix[i])):\n    #         temp_sum += my_matrix[i][j]\n    #     if temp_sum!= 0:\n    #         return False\n    # return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square = [[] for i in range(len(my_matrix))]\n    # first sum all rows, cols and diags\n    for row in range(len(my_matrix)):\n        row_sum = 0\n        for item in my_matrix[row]:\n            row_sum += item\n        if row_sum!= 15:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    test_matrix = [[0 for x in range(3)] for y in range(3)]\n    # print my_matrix\n    row = len(my_matrix)\n    col = len(my_matrix[0])\n    # if row < 3:\n    #     return False\n    for i in range(row):\n        for j in range(col):\n            # print \"i, j\", i, j\n            test_matrix[i][j] = my_matrix[i][j]\n            # print test_matrix[i][j]\n    # print test_matrix\n    rows = len(test_matrix)\n    cols = len(test_matrix[0])\n    # print rows, cols\n    sum_diagonal = 0\n    for row in range(rows):\n        sum_diagonal += test_matrix[row][row]\n        # print sum_diagonal\n    # print \"sum_diagonal\", sum_diagonal\n    sum_diagonal_rev = 0\n    for col in range(cols):\n        sum_diagonal_rev += test_matrix[col][rows-1-col]\n        # print sum_diagonal_rev\n    # print \"sum_diagonal_rev\", sum_diagonal_rev\n    sum_side = 0\n    for i in range(rows):\n        # print \"i\", i\n        sum_side += test_matrix[i][j]\n        # print sum_side\n    # print \"sum_side\", sum_side\n    if sum_diagonal == sum_side == sum_diagonal_rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (len(my_matrix) == 1):\n        return True\n    sum_of_rows = [0] * len(my_matrix)\n    sum_of_columns = [0] * len(my_matrix[0])\n    sum_of_diagonals = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            sum_of_rows[i] += my_matrix[i][j]\n            sum_of_columns[j] += my_matrix[i][j]\n            if(i == j):\n                sum_of_diagonals += my_matrix[i][j]\n    if(len(my_matrix) == sum_of_rows.count(sum_of_rows[0]) and\n        len(my_matrix) == sum_of_columns.count(sum_of_columns[0]) and\n        len(my_matrix) == sum_of_diagonals/len(my_matrix)):\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    magic_numbers = [\n        [8, 1, 6, 3, 5, 7, 4, 9, 2],\n        [2, 7, 9, 4, 1, 5, 3, 6, 8],\n        [4, 3, 8, 9, 5, 7, 2, 1, 6],\n        [6, 1, 2, 7, 8, 3, 4, 5, 9],\n        [8, 5, 9, 2, 6, 1, 4, 3, 7],\n        [4, 9, 6, 1, 7, 2, 8, 3, 5],\n        [2, 5, 7, 6, 3, 9, 8, 4, 1],\n        [3, 4, 1, 8, 9, 5, 2, 7, 6],\n        [5, 2, 6, 7, 1, 8, 9, 3, 4]\n    ]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in range(len(my_matrix)):\n        total += my_matrix[i][i]\n        total += my_matrix[i][-1-i]\n    total += my_matrix[-1][0] + my_matrix[-1][-1]\n    \n    for i in range(len(my_matrix)):\n        total += my_matrix[0][i]\n        total += my_matrix[-1][i]\n    if total == my_matrix[0][0] + my_matrix[-1][-1]:\n        return True\n    else:\n        return False\n    \n    \ndef magic_square(my_matrix):\n    '''\n    Given a matrix that is guaranteed to be a magic square, write a function to return a number that is the sum of the matrix diagonal.\n    '''\n    result = 0\n    for i in range(len(my_matrix)):\n        result += my_matrix[i][i]\n    \n    for i in range(len(my_matrix)):\n        result += my_matrix[i][-1-i]\n    \n    return result\n    \n    \ndef increment_char(my_str):\n    '''\n    Given a string, return a new string where each character is incremented by 1.\n    '''\n    new_str = ''\n    for char in my_str:\n        new_str += str(int(char)+1)\n    \n    return new_str\n    \n    \ndef sort_triangle(my_array):\n    '''\n    Write a function that takes a list of integers and returns a list of increasing integers.\n    '''\n    new_list = []\n    for i in range(len(my_array)):\n        while len(new_list) <= my_array[i]:\n            new_list.append(0)\n        new_list[my_array[i]] += 1\n    \n    return new_list\n    \n    \ndef has_path_sum(my_matrix, target_sum):\n    '''\n    Write a function that takes in a 2D array and a target sum and returns a bool telling whether or not there exist two \n    numbers that add up to the target sum.\n    '''\n    # if target_sum == 0:\n    #     return True\n    # elif target_sum < 0:\n    #     return False\n    # else:\n    #     for i in range(len(my_matrix)):\n    #         for j in range(len(my_matrix[0])):\n    #             if i == j:\n    #                 continue\n    #             if target_sum == my_matrix[i][j] + my_matrix[j][i]:\n    #                 return True\n    #     return False\n    \n    \n    if target_sum == 0:\n        return True\n    elif target_sum < 0:\n        return False\n    \n    row = len(my_matrix)\n    col = len(my_matrix[0])\n    \n    for i in range(row):\n        for j in range(col):\n            if my_matrix[i][j] == target_sum:\n                return True\n            if i < row - 1 and j < col - 1:\n                if my_matrix[i][j] == my_matrix[i+1][j] + my_matrix[i][j+1]:\n                    return True\n    \n    return False\n    \n    \ndef word_ladder(word1, word2):\n    '''\n    Write a function that takes two strings, word1 and word2, and returns the minimum number of steps to take to \n    to change one word into the other. Each step is to traverse one character at a time.\n    '''\n    if len(word1)!= len(word2):\n        return -1\n    \n    letter_dict = {}\n    for i in range(len(word1)):\n        letter_dict[word1[i]] = word2[i]\n    \n    steps = 0\n    steps += abs(len(word1) - len(word2))\n    steps += 1\n    \n    while word2!= word1:\n        if word1[steps % len(word1)] == word2[steps % len(word1)]:\n            steps += 1\n        else:\n            steps += abs(ord(word1[steps % len(word1)]) - ord(word2[steps % len(word1)]))\n        \n        \n    return steps\n    \n    \ndef memo_fib(n, memo):\n    '''\n    Write a function that takes a number n and returns the nth number of the Fibonacci sequence.\n    '''\n    if memo[n]!= 0:\n        return memo[n]\n    \n    memo[n] = memo_fib(n-1, memo) + memo_fib(n-2, memo)\n    \n    return memo[n]\n    \n    \ndef fib(n):\n    '''\n    Write a function that takes a number n and returns the nth number of the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \n    \ndef collatz(n):\n    '''\n    Write a function that takes a number n and returns the nth number in the Collatz sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 1 + collatz(n/2)\n    else:\n        return 1 + collatz(3 * n + 1)\n    \n    \ndef triangle_number(n):\n    '''\n    Write a function that takes a number n and returns the nth number in the Fibonacci sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + triangle_number(n-1)\n    \n    \ndef fib_memo(n, memo):\n    '''\n    Write a function that takes a number n and returns the nth number in the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif memo[n]!= 0:\n        return memo[n]\n    \n    memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)\n    \n    return memo[n]\n    \n    \ndef fact(n):\n    '''\n    Write a function that takes a number n and returns the factorial of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * fact(n-1)\n    \n    \ndef reverse(s):\n    '''\n    Write a function that takes a string s and returns the string s with the characters in reverse order.\n    '''\n    if len(s) == 1:\n        return s\n    \n    return reverse(s[1:]) + s[0]\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes a string s and returns True if s is a palindrome and False otherwise.\n    '''\n    if len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[-1] and is_palindrome(s[1:-1])\n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function that takes two strings s1 and s2 and returns True if s1 and s2 are anagrams of one another, and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    \n    letter_dict = {}\n    for letter in s1:\n        if letter not in letter_dict:\n            letter_dict[letter] = 1\n        else:\n            letter_dict[letter] += 1\n    \n    for letter in s2:\n        if letter not in letter_dict:\n            return False\n        elif letter_dict[letter] <= 1:\n            return False\n        else:\n            letter_dict[letter] -= 1\n    \n    return True\n    \n    \ndef rotate_matrix(matri"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    for num in nums:\n        if nums.count(num) > max_count:\n            max_count = nums.count(num)\n            max_item = num\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #counts = defaultdict(int)\n    #for num in nums:\n    #    counts[num] += 1\n    #return max(counts, key=counts.get)\n    mf = -1\n    number = -1\n    for i in nums:\n        if nums.count(i) > mf:\n            mf = nums.count(i)\n            number = i\n    return number\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = {}\n    for num in nums:\n        if num in count.keys():\n            count[num] += 1\n        else:\n            count[num] = 1\n    print count\n    max_freq = 0\n    max_num = None\n    for num,freq in count.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_val = max(d.values())\n    for k, v in d.items():\n        if v == max_val:\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    for i in nums:\n        if nums.count(i) > max_count:\n            max_count = nums.count(i)\n            max_item = i\n    return max_item, max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for i in range(len(nums)):\n        freq[nums[i]] += 1\n    return max(freq, key = freq.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    for item in set(nums):\n        count = nums.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item, max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq, max_count, max_item = -1, -1, None\n    d = defaultdict(int)\n    for item in nums:\n        d[item] += 1\n        if d[item] > max_count:\n            max_freq, max_count, max_item = d[item], d[item], item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    nums_dict = defaultdict(int)\n    for num in nums:\n        nums_dict[num] += 1\n    max_val = 0\n    max_item = None\n    for key, val in nums_dict.items():\n        if val > max_val:\n            max_val = val\n            max_item = key\n    return max_item\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #to reverse the string\n    str2 = \"\"\n    for i in str1:\n        if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'A' or i == 'E' or i == 'I' or i == 'O' or i == 'U'):\n            str2 = str2 + i\n    return str2[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([char if char.lower() not in vowels else char.lower() for char in str1])\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    temp = list(str1)\n    for i in range(len(temp)):\n        if temp[i] in vowels:\n            temp[i] = vowels[(vowels.index(temp[i]) + 3) % len(vowels)]\n    return ''.join(temp)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = str1.lower()\n    newstr = ''\n    for ch in str1:\n        if ch in vowels:\n            newstr = ch + newstr\n        else:\n            newstr = newstr + ch\n    return newstr\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    list1 = []\n    for letter in str1:\n        if letter in vowels:\n            list1.insert(0,letter)\n        else:\n            list1.insert(0,letter)\n    return ''.join(list1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #start writing your code here\n    vowels = 'aeiou'\n    str1 = list(str1)\n    str1.reverse()\n    for i in range(len(str1)):\n        if str1[i] in vowels and str1[i]!= 'y':\n            str1[i] = vowels[vowels.index(str1[i]) - 1]\n        elif str1[i] == 'y':\n            str1[i] = 'a'\n    return \"\".join(str1)\n            \n    \n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    list1 = list(str1)\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(list1)):\n        if list1[i] in vowel:\n            list1[i] = list1[i]\n    list1 = ''.join(list1)\n    return list1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    s = list(str1)\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i] not in vowels:\n            i+=1\n            continue\n        if s[j] not in vowels:\n            j-=1\n            continue\n        s[i], s[j] = s[j], s[i]\n        i+=1\n        j-=1\n    return ''.join(s)\n    \ndef find_anagrams(word, text):\n    '''\n    Write a python function to find the anagrams of a word from a given text.\n    '''\n    from collections import defaultdict, Counter\n    l = defaultdict(list)\n    for i, v in enumerate(text):\n        l[v].append(i)\n    if len(l[word]) == 0:\n        return []\n    l[word].sort()\n    for i in l[word]:\n        if i > len(text)-1:\n            break\n        if i < len(text)-1:\n            if text[i] == text[i+1]:\n                return [i, i+1]\n    return []\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str2 = [char for char in str1]\n    for i in range(len(str2)):\n        if str2[i] in vowels:\n            str2[i] = str2[i].lower()\n        else:\n            continue\n    return ''.join(str2)\nprint(reverse_vowels('abcd'))\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u')\n    \n    str2 = ''\n    for letter in str1:\n        if letter not in vowels:\n            str2 = str2 + letter\n        else:\n            str2 = str2 + letter.lower()\n    \n    return str2\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join([str(i) for i in tup1])\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return ''.join(tup1)\n    \n    \ndef tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return''.join(tup1)\n    \n    \ndef tuple_char(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return ''.join(tup1)\n    \n    \ndef string_tup(string1):\n    '''\n    Write a function to convert a string to a tuple.\n    '''\n    \n    return tuple(string1)\n    \n    \ndef tuple_len(tup1):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    \n    return len(tup1)\n    \n    \ndef tuple_sum(tup1):\n    '''\n    Write a function to sum the elements of a tuple.\n    '''\n    \n    return sum(tup1)\n    \n    \ndef tuple_max(tup1):\n    '''\n    Write a function to return the maximum value of a tuple.\n    '''\n    \n    return max(tup1)\n    \n    \ndef tuple_min(tup1):\n    '''\n    Write a function to return the minimum value of a tuple.\n    '''\n    \n    return min(tup1)\n    \n    \ndef tuple_sort(tup1):\n    '''\n    Write a function to sort a tuple.\n    '''\n    \n    return sorted(tup1)\n    \n    \ndef tuple_reverse(tup1):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    \n    return tup1[::-1]\n    \n    \ndef tuple_unpack(tup1, index):\n    '''\n    Write a function to unpack a tuple.\n    '''\n    \n    return tup1[index]\n    \n    \ndef tuple_swap(tup1):\n    '''\n    Write a function to swap a tuple.\n    '''\n    \n    return tuple(tup1[1], tup1[0])\n    \n    \ndef tuple_iter(tup1):\n    '''\n    Write a function to return an iterator of a tuple.\n    '''\n    \n    return iter(tup1)\n    \n    \ndef tuple_zip(tup1, tup2):\n    '''\n    Write a function to zip two tuples.\n    '''\n    \n    return zip(tup1, tup2)\n    \n    \ndef tuple_apply(tup1, f):\n    '''\n    Write a function to apply a function to every element of a tuple.\n    '''\n    \n    return tuple(f(tup1[i]) for i in range(len(tup1)))\n    \n    \ndef tuple_map(tup1, f):\n    '''\n    Write a function to map a function to a tuple.\n    '''\n    \n    return tuple(f(tup1[i]) for i in range(len(tup1)))\n    \n    \ndef tuple_enumerate(tup1):\n    '''\n    Write a function to return an enumerate object of a tuple.\n    '''\n    \n    return enumerate(tup1)\n    \n    \ndef tuple_filter(tup1, f):\n    '''\n    Write a function to filter a tuple by a predicate.\n    '''\n    \n    return tuple(filter(f, tup1))\n    \n    \ndef tuple_reduce(tup1, f, init):\n    '''\n    Write a function to reduce a tuple by a single function.\n    '''\n    \n    return reduce(f, tup1, init)\n    \n    \ndef tuple_sum(tup1):\n    '''\n    Write a function to sum all the elements of a tuple.\n    '''\n    \n    return sum(tup1)\n    \n    \ndef tuple_sorted(tup1):\n    '''\n    Write a function to sort a tuple.\n    '''\n    \n    return sorted(tup1)\n    \n    \ndef tuple_reversed(tup1):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    \n    return tup1[::-1]\n    \n    \ndef tuple_max(tup1):\n    '''\n    Write a function to return the maximum value of a tuple.\n    '''\n    \n    return max(tup1)\n    \n    \ndef tuple_min(tup1):\n    '''\n    Write a function to return the minimum value of a tuple.\n    '''\n    \n    return min(tup1)\n    \n    \ndef tuple_range(tup1):\n    '''\n    Write a function to return a range of a tuple.\n    '''\n    \n    return range(tup1)\n    \n    \ndef tuple_slice(tup1, index1, index2):\n    '''\n    Write a function to return a slice of a tuple.\n    '''\n    \n    return tup1[index1:index2]\n    \n    \ndef tuple_split(tup1, index):\n    '''\n    Write a function to split a tuple into two.\n    '''\n    \n    return tup1[index], tup1[:index] + tup1[index+1:]\n    \n    \ndef tuple_concat(tup1, tup2):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    \n    return tup1 + tup2\n    \n    \ndef tuple_add(tup1, tup2):\n    '''\n    Write a function to add two tuples.\n    '''\n    \n    return tuple(map(sum, zip(tup1, tup2)))\n    \n    \ndef tuple_replace(tup1, index, value):\n    '''\n    Write a function to replace an element of a tuple.\n    '''\n    \n    return tup1[:index] + (value, ) + tup1[index+1:]\n    \n    \ndef tuple_map(tup1, f):\n    '''\n    Write a function to map a function to a tuple.\n    '''\n    \n    return tuple(f(tup1[i]) for i in range(len(tup1)))\n    \n    \ndef tuple_map_zip(tup1, tup2):\n    '''\n    Write a function to map a function to a tuple.\n    '''\n    \n    return tuple(zip(tup1, tup2))\n    \n    \ndef tuple_index(tup1, value):\n    '''\n    Write a function to return the index of a value in a tuple.\n    '''\n    \n    return tup1.index(value)\n    \n    \ndef tuple_count(tup1, value):\n    '''\n    Write a function to return the number of times a value appears in a tuple.\n    '''\n    \n    return tup1.count(value)\n    \n    \ndef tuple_len(tup1):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    \n    return len(tup1)\n    \n    \ndef tuple_max_index(tup1):\n    '''\n    Write a function to return the index of the maximum value of a tuple.\n    '''\n    \n    return max(range(len(tup1)), key=tup1.__getitem__)\n    \n    \ndef tuple_min_index(tup1):\n    '''\n    Write a function to return the index of the minimum value of a tuple.\n    '''\n    \n    return min(range(len(tup1)), key=tup1.__getitem__)\n    \n    \ndef tuple_min_value(tup1):\n    '''\n    Write a function to return the minimum value of a tuple.\n    '''\n    \n    return min(tup1)\n    \n    \ndef tuple_max_value(tup1):\n    '''\n    Write a function to return the maximum value of a tuple.\n    '''\n    \n    return max(tup1)\n    \n    \ndef tuple_reverse(tup1):\n    '''\n    Write a function to revers"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return \"Empty tuple\"\n    else:\n        string = \"(\"\n        for i in range(0, len(tup1)-1):\n            string += str(tup1[i])\n            string += \", \"\n        string += str(tup1[len(tup1)-1])\n        string += \")\"\n        return string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_obj = ''\n    for item in tup1:\n        string_obj += str(item) +''\n    return string_obj.rstrip()\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for i in range(len(tup1)):\n        tup_string += str(tup1[i])\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    str1 = ','.join([str(x) for x in tup1])\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup = str(tup1)\n    tup_list = tup.split(' ')\n    string =''.join(tup_list)\n    return string\n    "
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in nums:\n        if i < 0:\n            s += i\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(i for i in nums if i < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in nums:\n        if i < 0:\n            s += i\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-x for x in nums if x < 0])\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n * (2 * n - 1) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n + 1) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n - 1\n    return int(n*(2*n + 1) / 2)\n    \ndef hex_seq(n):\n    '''\n    Write a function to return the first n hexagonal numbers in sequence.\n    '''\n    seq = []\n    for i in range(1, n+1):\n        seq.append(hexagonal_num(i))\n    return seq\n    \ndef hex_seq_1(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_2(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_3(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_4(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_5(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_6(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_7(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_8(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_9(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_10(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_11(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_12(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_13(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_14(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_15(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_16(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_17(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_18(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_19(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_20(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_21(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_22(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_23(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \ndef hex_seq_24(n):\n    '''\n    Return the first n hexagonal numbers in sequence.\n    '''\n    res = []\n    a = 1\n    b = 1\n    while len(res) < n:\n        a, b = b, a + b\n        res.append(a)\n    return res\n    \nde"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a, b = 0, 1\n    num = 0\n    while num < n:\n        a, b = b, a+b\n        num += 1\n    return a\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (3 * n * (n + 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n+1)/2)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    n = len(nums)\n    for i in nums:\n        if i == 0:\n            zeros += 1\n    return float(zeros)/n\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / float(len(nums))\n    \ndef unique_pairs(nums):\n    '''\n    Write a function that takes an array of integers and returns an array of unique pairs (pairs that can be formed from the array elements)\n    '''\n    pairs = []\n    for i, num in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            if num + num2 == 0:\n                pairs.append([num, num2])\n    return pairs\n    \ndef rotate(nums, k):\n    '''\n    Given an array of integers, rotate the array to the right by k steps, where k is non-negative.\n    '''\n    k %= len(nums)\n    for i in xrange(k):\n        nums.insert(0, nums.pop())\n    return nums\n    \ndef duplicate_in_array(nums):\n    '''\n    Given an array of integers, find if the array contains any duplicates.\n    Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n    '''\n    return len(nums)!= len(set(nums))\n    \ndef find_first_duplicate(nums):\n    '''\n    Given an array of integers, find the first duplicate number in it.\n    You should assume that there is at least one duplicate number in the array.\n    '''\n    for i, num in enumerate(nums):\n        if nums[abs(num)] < 0:\n            return abs(num)\n        nums[abs(num)] = -nums[abs(num)]\n    return None\n    \ndef remove_duplicates(nums):\n    '''\n    Given an array of integers, remove the duplicates in it. \n    Do not use set or sort methods.\n    '''\n    if not nums:\n        return 0\n    i = 0\n    for num in nums:\n        if num!= nums[i]:\n            i += 1\n            nums[i] = num\n    return i + 1\n    \ndef array_of_intersection(nums1, nums2):\n    '''\n    Given two arrays, write a function to compute their intersection.\n    '''\n    nums1, nums2 = sorted(nums1), sorted(nums2)\n    i, j = 0, 0\n    intersection = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            intersection.append(nums1[i])\n            i += 1\n            j += 1\n    return intersection\n    \ndef find_k_closest_points(points, k):\n    '''\n    Given a sorted array of points where points[i] = [xi, yi]\n    and integer k, return the k closest points to the origin (0, 0).\n    '''\n    return [points[i] for i in xrange(k)]\n    \ndef compute_hash_table(nums, k):\n    '''\n    Given an array of integers and an integer k, \n    write a function to compute the k most frequent elements in the given array.\n    For example, given [1,1,1,2,2,3] and k = 2, return [1,2].\n    '''\n    hash_table = {}\n    for num in nums:\n        if hash_table.get(num):\n            hash_table[num] += 1\n        else:\n            hash_table[num] = 1\n    hash_table = sorted(hash_table.items(), key=lambda item: item[1], reverse=True)\n    return [num for num, freq in hash_table[:k]]\n    \ndef two_sum_sorted(nums, target):\n    '''\n    Given a sorted array of integers and an integer target, \n    find two numbers in the array that sum up to the target.\n    The algorithm should have O(log n) time complexity.\n    '''\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        if nums[i] + nums[j] == target:\n            return [nums[i], nums[j]]\n        elif nums[i] + nums[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return None\n    \ndef search_insert(nums, target):\n    '''\n    Given a sorted array of integers and a target integer, \n    write a function to insert the target integer into the array, such that the array stays sorted. \n    If there is multiple valid places to insert the target integer, you should choose the smallest one.\n    '''\n    i = 0\n    j = len(nums) - 1\n    while i <= j:\n        mid = (i + j) / 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return i\n    \ndef search_for_range(nums, target):\n    '''\n    Given an array of integers, find the range where the given target number appears. \n    The range will be in ascending order, i.e. the first number in the range should be the smallest number that \n    is greater than or equal to the given target, the last number in the range should be the largest number that is \n    less than or equal to the given target.\n    Return the pair of range endpoints, or [-1, -1] if the target is not found.\n    '''\n    i = 0\n    j = len(nums) - 1\n    while i <= j:\n        mid = (i + j) / 2\n        if nums[mid] == target:\n            return [mid, mid]\n        elif nums[mid] > target:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return [-1, -1]\n    \ndef intersection_of_sorted_arrays(nums1, nums2):\n    '''\n    Given two sorted arrays, compute their intersection. \n    They are not necessarily the same length.\n    '''\n    i, j = 0, 0\n    intersection = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            intersection.append(nums1[i])\n            i += 1\n            j += 1\n    return intersection\n    \ndef find_kth_largest_in_bst(root, k):\n    '''\n    Given a binary search tree, find the kth largest element in the tree.\n    Note that it is the kth largest element in the sorted order, \n    not the kth distinct element.\n    '''\n    stack = []\n    curr = root\n    while curr or stack:\n        if curr:\n            stack.append(curr)\n            curr = curr.right\n        else:\n            curr = stack.pop()\n            if k == 0:\n                return curr.val\n            k -= 1\n            curr = curr.left\n    return None\n    \ndef find_kth_largest_in_bst_recursive(root, k):\n    def helper(root, k):\n        if not root:\n            return\n        helper(root.right, k)\n        if k == 0:\n            return root.val\n        k -= 1\n        helper(root.left, k)\n    return helper(root, k)\n    \ndef get_kth_largest_element(nums, k):\n    '''\n    Given an array of integers and an integer k, \n    find the kth largest element in the array. \n    Note that it is the kth largest element in the sorted order, \n    not the kth distinct element.\n    '''\n    kth = len(nums) - k\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # count = 0\n    # for n in nums:\n    #     if n == 0:\n    #         count += 1\n    # return count / float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero = 0\n    for i in range(0,len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            non_zero += 1\n    return zero_count/float(non_zero)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return (nums.count(0)/float(len(nums)))*100\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros / float(nonzeros)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_0 = 0\n    num_1 = 0\n    for x in nums:\n        if x == 0:\n            num_0 += 1\n        else:\n            num_1 += 1\n    print(num_0/num_1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count = count + 1\n    return float(count)/float(len(nums))\ndef find_mid(nums):\n    '''\n    Write a function to find the middle element of an array.\n    '''\n    size = len(nums)\n    return nums[size/2]\ndef find_smallest_sum(nums):\n    '''\n    Write a function to find the sum of the smallest two elements in an array.\n    '''\n    size = len(nums)\n    nums.sort()\n    return nums[0] + nums[1]\ndef find_smallest_index(nums):\n    '''\n    Write a function to find the index of the smallest element in an array.\n    '''\n    size = len(nums)\n    nums.sort()\n    return nums.index(nums[0])\ndef find_largest_index(nums):\n    '''\n    Write a function to find the index of the largest element in an array.\n    '''\n    size = len(nums)\n    nums.sort()\n    return nums.index(nums[size-1])\ndef find_first_duplicate(nums):\n    '''\n    Write a function to find the index of the first duplicate element in an array.\n    '''\n    size = len(nums)\n    for i in range(0, size):\n        if nums[i] in nums[i+1:]:\n            return i\n    return None\ndef find_last_duplicate(nums):\n    '''\n    Write a function to find the index of the last duplicate element in an array.\n    '''\n    size = len(nums)\n    for i in range(0, size):\n        if nums[i] in nums[:i]:\n            return i\n    return None\ndef find_max_product(nums):\n    '''\n    Write a function to find the maximum product of three integers in an array.\n    '''\n    size = len(nums)\n    for i in range(0, size):\n        if nums[i] > nums[i-1]*nums[i-2]*nums[i-3]:\n            return nums[i-3]*nums[i-2]*nums[i-1]\n    return None\ndef find_average(nums):\n    '''\n    Write a function to find the average value of an array of integers.\n    '''\n    size = len(nums)\n    sum = 0\n    for i in range(0, size):\n        sum = sum + nums[i]\n    return float(sum)/float(size)\ndef find_median(nums):\n    '''\n    Write a function to find the median of the given array of integers.\n    '''\n    size = len(nums)\n    nums.sort()\n    if size%2 == 0:\n        return (nums[size/2-1] + nums[size/2])/2\n    else:\n        return nums[size/2]\ndef find_all_rotations(str):\n    '''\n    Write a function to find all the rotations of a string.\n    '''\n    size = len(str)\n    for i in range(0, size):\n        yield str[i:] + str[:i]\ndef find_permutation(str):\n    '''\n    Write a function to find all the permutations of a string.\n    '''\n    if len(str) < 2:\n        return\n    for i in range(0, len(str)):\n        yield str[i:] + str[:i]\ndef find_permutation_recur(str, output, start):\n    '''\n    Write a function to find all the permutations of a string.\n    '''\n    if start == len(str):\n        print output\n    else:\n        for i in range(start, len(str)):\n            output[start] = str[i]\n            find_permutation_recur(str, output, start + 1)\ndef find_num_bits_set_recur(num):\n    '''\n    Write a function to find the number of bits set in an integer.\n    '''\n    if num == 0:\n        return 0\n    return num%2 + find_num_bits_set_recur(num/2)\ndef find_num_bits_set(num):\n    '''\n    Write a function to find the number of bits set in an integer.\n    '''\n    count = 0\n    while num!= 0:\n        count = count + 1\n        num = num & (num-1)\n    return count\ndef find_num_bits_set_int(num):\n    '''\n    Write a function to find the number of bits set in an integer.\n    '''\n    count = 0\n    while num!= 0:\n        if num & 1 == 1:\n            count = count + 1\n        num = num >> 1\n    return count\ndef find_largest_diff(nums):\n    '''\n    Write a function to find the largest difference between consecutive elements in an array of integers.\n    '''\n    size = len(nums)\n    max_diff = 0\n    for i in range(0, size - 1):\n        max_diff = max(max_diff, nums[i+1] - nums[i])\n    return max_diff\ndef find_largest_diff_recur(nums):\n    '''\n    Write a function to find the largest difference between consecutive elements in an array of integers.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums[0] - nums[1], nums[-1] - nums[-2]) + find_largest_diff_recur(nums[1:-1])\ndef find_largest_diff_recur(nums):\n    '''\n    Write a function to find the largest difference between consecutive elements in an array of integers.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums[0] - nums[1], nums[-1] - nums[-2]) + find_largest_diff_recur(nums[1:-1])\ndef find_largest_pair_product(nums):\n    '''\n    Write a function to find the largest pairwise product of two integers in an array.\n    '''\n    nums.sort()\n    return nums[-1]*nums[-2]\ndef find_largest_pair_product_recur(nums):\n    '''\n    Write a function to find the largest pairwise product of two integers in an array.\n    '''\n    if len(nums) == 2:\n        return nums[0]*nums[1]\n    else:\n        return max(nums[0]*nums[1], nums[-1]*nums[-2]) + find_largest_pair_product_recur(nums[1:-1])\ndef find_largest_triple_product(nums):\n    '''\n    Write a function to find the largest triple product of three integers in an array.\n    '''\n    nums.sort()\n    return nums[-1]*nums[-2]*nums[-3]\ndef find_largest_triple_product_recur(nums):\n    '''\n    Write a function to find the largest triple product of three integers in an array.\n    '''\n    if len(nums) == 3:\n        return nums[0]*nums[1]*nums[2]\n    else:\n        return max(nums[0]*nums[1]*nums[2], nums[-1]*nums[-2]*nums[-3]) + find_largest_triple_product_recur(nums[1:-1])\ndef find_triple_product_recur(nums, target):\n    '''\n    Write a function to find the sum of the triplet numbers that sum to a target number.\n    '''\n    if len(nums) == 3:\n        return target\n    else:\n        return find_triple_product_recur(nums["
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # sort the array\n    nums.sort()\n    # create a list to store the frequency of zeros\n    zeroes = []\n    # count the frequency of zeroes\n    for n in nums:\n        if n == 0:\n            zeroes.append(1)\n        else:\n            zeroes.append(0)\n    # count the frequency of non zeros and return the ratio of them\n    count = 0\n    for i in zeroes:\n        count += i\n    return count / float(len(nums))\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    from math import log, pow\n    if n < 0: \n        return False\n    if n == 0: \n        return True\n    return not log(n, 2).is_integer()\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return int(math.log(n, 2)) % 2 == 0\n    \nif __name__ == \"__main__\":\n    t = int(raw_input())\n    while t>0:\n        n = int(raw_input())\n        if is_Sum_Of_Powers_Of_Two(n):\n            print \"Yes\"\n        else:\n            print \"No\"\n        t -= "
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i=1\n    while(i*2<=n):\n        if (n-i*2)%2==0:\n            return True\n        else:\n            i=i+1\n    return False\ndef powerOfTwo(n):\n    '''\n    Write a python function to check whether the given number is power of two or not.\n    '''\n    if n==0:\n        return False\n    while(n%2==0):\n        n=n//2\n    return (n==1)\ndef isPowerOfTwo(n):\n    '''\n    Write a python function to check whether the given number is power of two or not.\n    '''\n    if n==0:\n        return False\n    i=1\n    while(i*2<=n):\n        if (n%i)==0:\n            return True\n        else:\n            i=i+1\n    return False\ndef isPowerOfThree(n):\n    '''\n    Write a python function to check whether the given number is power of three or not.\n    '''\n    if n==0:\n        return False\n    while(n%3==0):\n        n=n//3\n    return (n==1)\ndef isPowerOfFour(n):\n    '''\n    Write a python function to check whether the given number is power of four or not.\n    '''\n    if n==0:\n        return False\n    while(n%4==0):\n        n=n//4\n    return (n==1)\ndef isPowerOfTwoOrThree(n):\n    '''\n    Write a python function to check whether the given number is power of two or three or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfThree(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFour(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n)):\n        return True\n    return False\ndef isPowerOfTwoOrThreeOrFour(n):\n    '''\n    Write a python function to check whether the given number is power of two or three or four or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfThree(n) or isPowerOfFour(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEight(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteen(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrTwenty(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or twenty or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n) or isPowerOfTwenty(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrTwentyOrThirty(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or twenty or thirty or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n) or isPowerOfTwenty(n) or isPowerOfThirty(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrThirtyOrForty(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or thirty or forty or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n) or isPowerOfThirty(n) or isPowerOfForty(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrThirtyOrFortyOrSeventy(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or thirty or forty or seventy or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n) or isPowerOfThirty(n) or isPowerOfForty(n) or isPowerOfSeventy(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrThirtyOrFortyOrSeventyOrEighty(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or thirty or forty or seventy or eighty or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n) or isPowerOfThirty(n) or isPowerOfForty(n) or isPowerOfSeventy(n) or isPowerOfEighty(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrThirtyOrFortyOrSeventyOrEightyOrNinety(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or thirty or forty or seventy or eighty or ninety or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n) or isPowerOfThirty(n) or isPowerOfForty(n) or isPowerOfSeventy(n) or isPowerOfEighty(n) or isPowerOfNinety(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrThirtyOrFortyOrSeventyOrEightyOrNinetyOrOne(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or thirty or forty or seventy or eighty or ninety or one or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n) or isPowerOfThirty(n) or isPowerOfForty(n) or isPowerOfSeventy(n) or isPowerOfEighty(n) or isPowerOfNinety(n) or isPowerOfOne(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrThirtyOrFortyOrSeventyOrEightyOrNinetyOrTen(n):\n    '''\n    Write a python function to check whether the given number is power of two or four or eight or sixteen or thirty or forty or seventy or eighty or ninety or one or ten or not.\n    '''\n    if (n==0) or (isPowerOfTwo(n) or isPowerOfFour(n) or isPowerOfEight(n) or isPowerOfSixteen(n) or isPowerOfThirty(n) or isPowerOfForty(n) or isPowerOfSeventy(n) or isPowerOfEighty(n) or isPowerOfNinety(n) or isPowerOfTen(n)):\n        return True\n    return False\ndef isPowerOfTwoOrFourOrEightOrSixteenOrThirtyOrFortyOrSevent"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # convert to binary \n    b = ''\n    while n > 0:\n        b += str(n & 1)\n        n >>= 1\n    # print binary \n    # print b \n    count = 0 \n    for i in b:\n        if i == '1':\n            count += 1\n        else:\n            count = 0\n        if count > 1:\n            return False \n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    num_bits = 0\n    if n <= 0:\n        return False\n    while n:\n        num_bits += 1\n        n &= n - 1\n    if num_bits % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    from math import log,ceil\n    return log(n,2).is_integer()\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    def is_Power_Of_Two(n):\n        '''\n        Write a python function to check whether the given number is a power of two or not.\n        '''\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        else:\n            if n % 2 == 0:\n                return is_Power_Of_Two(n / 2)\n            else:\n                return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return len(bin(n).replace(\"0b\", \"\")) == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 1:\n        return False\n    else:\n        i = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                i += 1\n                n = (n-1) / 2\n        return i > 0\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n    \ndef area_of_a_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return pi * r ** 2\n    \ndef calculate_final_grade(midterm_grade, final_grade, course_grades):\n    '''\n    Write a function to calculate the final grade for a student on the final exam.\n    '''\n    midterm_weight = 0.4\n    final_weight = 0.6\n    \n    return midterm_weight * midterm_grade + final_weight * final_grade\n    \ndef calculate_final_grade_from_dict(midterm_grades, final_grades, course_grades):\n    '''\n    Write a function to calculate the final grade for a student on the final exam.\n    '''\n    midterm_weight = 0.4\n    final_weight = 0.6\n    \n    return midterm_weight * midterm_grades + final_weight * final_grades\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return math.pi * 2 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # The circumference of a circle is 2*Pi*r\n    return 2*math.pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([a for b in test_list for a in b])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for l in test_list:\n        final_list = final_list + l\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set(sum(test_list, [])))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(reduce(lambda x, y: x + y, test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for element in test_list:\n        if type(element) is list:\n            for i in element:\n                result.append(i)\n        else:\n            result.append(element)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for item in test_list:\n        return_list.extend(item)\n    return return_list\n    \ndef extract_doubly(test_list):\n    '''\n    Write a function that takes a list of nested lists of integers and returns a list of integers.\n    '''\n    return_list = []\n    for item in test_list:\n        for i in item:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    if nums_len <= 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(num, k):\n        '''\n        Given a number, num, and a positive integer, k, and\n        returns the number with the k-th last digit in reverse order.\n        '''\n        num_str = str(num)\n        return int(num_str[:-k] + num_str[::-1][k:])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print \"nums before sort: \", nums\n    def flip(nums, k):\n        print \"flip, start\"\n        i = 0\n        while i < k:\n            nums[i], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[i]\n            i += 1\n        print \"flip, end\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        '''\n        For each pancake, find the location of the largest element and\n        move all elements in front of the largest element to the end of\n        the list, then move the largest element to the front and repeat\n        until each pancake is sorted.\n        '''\n        swap_index = None\n        for j in range(i):\n            if nums[j] > nums[i-1]:\n                swap_index = j\n                break\n        if swap_index is not None:\n            nums[:i], nums[swap_index] = nums[swap_index:i], nums[:swap_index]\n            nums[:i] = sorted(nums[:i])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list and compare it to the number of items to be sorted.\n    for i in range(len(nums)//2, 0, -1):\n        # Sort the list from the first index to the last index in steps of i.\n        pancake_sort_in_steps(nums, i)\n        # Flip the list by moving the last element to the front and the rest to the back.\n        nums[:i][::-1], nums[i:][::-1] = nums[:i][::-1], nums[i:][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # We make this a little bit more complicated than the previous one.\n    # The idea is to iterate through the list. At each iteration, we\n    # find the largest element in the list (nums[i]) and swap it with the \n    # last element of the list. We repeat this operation until the last\n    # element is swapped with the first element.\n    # \n    # The function is still not complete, since we have not tried to \n    # return anything. Please complete this function.\n    \n    # So, we first find the last element of the list, then we find the \n    # maximum element in the list, and swap it with the last element. Then\n    # we swap it back to the first element, then swap the first element with\n    # the last element, and so on. \n    #\n    # Time complexity: O(n^2), because we are trying to find the last element of \n    # the list, and the list is of size n.\n    #\n    # Space complexity: O(1)\n    #\n    # The code is implemented below, please see the comments to understand it.\n    \n    # Get the length of the list\n    n = len(nums)\n    \n    # Get the maximum value in the list\n    max_i = n - 1\n    \n    # Keep iterating until the first element is swapped\n    # with the last element of the list\n    while max_i > 0:\n        \n        # Find the index of the max_i element\n        max_i_idx = nums.index(max_i)\n        \n        # Swap the max_i element with the last element of the list\n        nums[max_i_idx], nums[n - 1] = nums[n - 1], nums[max_i_idx]\n        \n        # Swap the max_i element with the first element of the list\n        nums[0], nums[max_i_idx] = nums[max_i_idx], nums[0]\n        \n        # Update the index of the max_i element\n        max_i = max_i - 1\n        \n        # Update the max_i element index\n        max_i_idx = nums.index(max_i)\n    \n    # Return the sorted list\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        current_idx = n - i\n        current_item = nums[current_idx]\n        while nums[current_idx-1] > current_item and current_idx > 0:\n            nums[current_idx], nums[current_idx-1] = nums[current_idx-1], nums[current_idx]\n            current_idx -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Create a list of the length of the input list\n    max_num = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        for j in range(0, i//2):\n            if nums[j] > nums[i-1-j]:\n                nums[j], nums[i-1-j] = nums[i-1-j], nums[j]\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n = len(list1)\n    m = len(list2)\n    k = len(list3)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(k):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    from collections import Counter\n    count=0\n    for i in xrange(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return -1\n    else:\n        return sum(x == y and x == z for x, y, z in zip(list1, list2, list3))\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            samepair+=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - Input.count(())\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Output = []\n    for i in Input:\n        if type(i)==list:\n            Output.append(i)\n    return Output\n    \ndef is_ordered(Input):\n    '''\n    Write a function to find whether the given tuple is ordered or not.\n    '''\n    Output = []\n    for i in Input:\n        if type(i) == list:\n            Output.append(i)\n    for i in range(len(Output)-1):\n        if Output[i][-1]>Output[i+1][-1]:\n            return False\n    return True\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = Input.count(())\n    return a\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - Input.count([])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for el in Input: \n        if type(el) is list: \n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([l for l in Input if isinstance(l, list)])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) is list:\n            count = count + 1\n    return count\n    \ndef find_list(Input, index): \n    '''\n    Write a function to find list at index\n    '''\n    if type(Input) is list:\n        return Input[index]\n    else:\n        return None\n    \ndef del_list(Input, index): \n    '''\n    Write a function to delete list at index\n    '''\n    if type(Input) is list:\n        del Input[index]\n        return Input\n    else:\n        return None\n        \ndef add_list(Input, index, value): \n    '''\n    Write a function to add value at index\n    '''\n    if type(Input) is list:\n        Input.insert(index, value)\n        return Input\n    else:\n        return None\n    \ndef list_reverse(Input): \n    '''\n    Write a function to reverse a list\n    '''\n    if type(Input) is list:\n        return Input[::-1]\n    else:\n        return None\n    \ndef list_concat(Input1, Input2): \n    '''\n    Write a function to concatenate two lists\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        return Input1 + Input2\n    else:\n        return None\n        \ndef list_add(Input1, Input2): \n    '''\n    Write a function to add two lists\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        return [Input1[i] + Input2[i] for i in range(len(Input1))]\n    else:\n        return None\n        \ndef list_mult(Input1, Input2): \n    '''\n    Write a function to multiply two lists\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        return [Input1[i] * Input2[i] for i in range(len(Input1))]\n    else:\n        return None\n        \ndef list_slice(Input, start, end): \n    '''\n    Write a function to slice a list\n    '''\n    if type(Input) is list:\n        return Input[start:end]\n    else:\n        return None\n        \ndef list_compare(Input1, Input2): \n    '''\n    Write a function to compare two lists\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        return len(Input1) == len(Input2) and all([Input1[i] == Input2[i] for i in range(len(Input1))])\n    else:\n        return None\n        \ndef list_append(Input, value): \n    '''\n    Write a function to append a value to a list\n    '''\n    if type(Input) is list:\n        Input.append(value)\n        return Input\n    else:\n        return None\n        \ndef list_extend(Input1, Input2): \n    '''\n    Write a function to extend a list with another list\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        Input1.extend(Input2)\n        return Input1\n    else:\n        return None\n        \ndef list_remove(Input, value): \n    '''\n    Write a function to remove a value from a list\n    '''\n    if type(Input) is list:\n        Input.remove(value)\n        return Input\n    else:\n        return None\n        \ndef list_intersect(Input1, Input2): \n    '''\n    Write a function to intersect two lists\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        return [value for value in Input1 if value in Input2]\n    else:\n        return None\n        \ndef list_join(Input1, Input2): \n    '''\n    Write a function to join two lists\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        return Input1 + Input2\n    else:\n        return None\n        \ndef list_map(Input1, Input2, func): \n    '''\n    Write a function to map a function to a list\n    '''\n    if type(Input1) is list:\n        return [func(i) for i in Input1]\n    else:\n        return None\n        \ndef list_reduce(Input, func, initializer): \n    '''\n    Write a function to reduce a list with the specified function\n    '''\n    if type(Input) is list:\n        return reduce(func, Input, initializer)\n    else:\n        return None\n        \ndef list_index(Input, value): \n    '''\n    Write a function to return the index of a value in a list\n    '''\n    if type(Input) is list:\n        return Input.index(value)\n    else:\n        return None\n        \ndef list_insert(Input, index, value): \n    '''\n    Write a function to insert a value at a given index\n    '''\n    if type(Input) is list:\n        Input.insert(index, value)\n        return Input\n    else:\n        return None\n        \ndef list_remove_at(Input, index): \n    '''\n    Write a function to remove a value at a given index\n    '''\n    if type(Input) is list:\n        del Input[index]\n        return Input\n    else:\n        return None\n        \ndef list_clear(Input): \n    '''\n    Write a function to clear a list\n    '''\n    if type(Input) is list:\n        Input.clear()\n        return Input\n    else:\n        return None\n        \ndef list_sort(Input): \n    '''\n    Write a function to sort a list\n    '''\n    if type(Input) is list:\n        Input.sort()\n        return Input\n    else:\n        return None\n        \ndef list_reverse(Input): \n    '''\n    Write a function to reverse a list\n    '''\n    if type(Input) is list:\n        return Input[::-1]\n    else:\n        return None\n        \ndef list_reverse_join(Input, separator): \n    '''\n    Write a function to reverse and join a list\n    '''\n    if type(Input) is list:\n        return separator.join(Input[::-1])\n    else:\n        return None\n        \ndef list_reverse_map(Input, func): \n    '''\n    Write a function to map and reverse a list\n    '''\n    if type(Input) is list:\n        return list(map(func, Input[::-1]))\n    else:\n        return None\n        \ndef list_comprehension(Input): \n    '''\n    Write a function to use a list comprehension\n    '''\n    if type(Input) is list:\n        return [i for i in Input]\n    else:\n        return None\n        \ndef list_filter(Input, func): \n    '''\n    Write a function to filter a list\n    '''\n    if type(Input) is list:\n        return [i for i in Input if func(i)]\n    else:\n        return None\n        \ndef list_zip(Input1, Input2): \n    '''\n    Write a function to zip two lists\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        return list(zip(Input1, Input2))\n    else:\n        return None\n        \ndef list_enumerate(Input): \n    '''\n    Write a function to enumerate a list\n    '''\n    if type(Input) is list:\n        return list(enumerate(Input))\n    else:\n        return None\n        \ndef list_zip_with_index(Input1, Input2): \n    '''\n    Write a function to zip two lists with the index\n    '''\n    if type(Input1) is list and type(Input2) is list:\n        return list(zip(Input1, Input2, range(len(Input1))))\n    else:\n        return None\n        \ndef list_max(Input): \n    '''\n    Write a function to return the max valu"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter = 0\n    for value in Input:\n        if type(value) is list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    c = 0\n    for i in range(0,l):\n        if type(Input[i]) == type(()):\n            c+=1\n    return c\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    No_of_lists = 0\n    for el in Input:\n        if type(el) is list:\n            No_of_lists += 1\n    return No_of_lists\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=arr[1]-arr[0]\n    for i in range(0,len(arr)-1):\n        max_diff = max(max_diff, arr[i+1]-arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return max(abs(arr[i]-arr[i+1]) for i in range(len(arr)-1))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = abs(arr[0] - arr[1])\n    for i in range(0, len(arr) - 1):\n        if abs(arr[i] - arr[i + 1]) > diff:\n            diff = abs(arr[i] - arr[i + 1])\n    return diff\n    \nprint max_Abs_Diff([2, 6, 1, 4])\nprint max_Abs_Diff([1,2,3])\nprint max_Abs_Diff([-2, -3, 1, 3]"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    n = len(arr)\n    max_diff = arr[n-1] - arr[0]\n    for i in range(0, n-1):\n        max_diff = max(max_diff, arr[n-1]-arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_max = arr[0]\n    arr_min = arr[0]\n    for i in range(len(arr)):\n        if arr[i]>arr_max:\n            arr_max = arr[i]\n        elif arr[i]<arr_min:\n            arr_min = arr[i]\n    return arr_max-arr_min\n    \ndef max_Abs_Diff_Two(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1]-arr[0]\n    for i in range(1,len(arr)):\n        if abs(arr[i]-arr[i-1])>max_diff:\n            max_diff = abs(arr[i]-arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr)-min(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0]-arr[1])\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n    "
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr) - min(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sortedArr = sorted(arr)\n    max_diff = abs(sortedArr[-1] - sortedArr[0])\n    for i in range(1, len(sortedArr)):\n        max_diff = max(max_diff, abs(sortedArr[i]-sortedArr[i-1]))\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Number of solutions\n    n_solutions = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def gcd(a,b):\n        while b:\n            a,b = b, a%b\n        return a\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    assert n >= 0, 'n must be >= 0'\n    \n    if n == 0:\n        return (a, b)\n    elif n % a == 0:\n        return (n / a, 0)\n    elif b == 0:\n        return (0, n / a)\n    else:\n        k = (n - b * (n / a)) / b\n        return (k, a)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == a:\n        return 1, 0\n    elif n == b:\n        return 0, 1\n    elif n < a:\n        return None\n    else:\n        return find_solution(b, a, n - a) or find_solution(b, a, n - b)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        for y in range(1, n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if n / a == 1:\n            return (a, n)\n        else:\n            return None\n    else:\n        return find_solution(b, a - b, n - b * a / b)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 1)\n    for x in range(a + 1):\n        temp = n - a * x\n        if temp % b == 0:\n            return (x, int(temp / b))\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n//a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Example: if a = 2 and b = 5, and n = 3\n    # we can try a = 1 and b = 4. This will return (1, 4)\n    # Notice: the solution is unique. This will be the only solution\n    \n    # Example: if a = 2 and b = 5, and n = 2\n    # we can try a = 1, b = 2. This will return (1, 2)\n    # but we don't want this. So try a = 3, b = 1, n = 8\n    # this will return (3, 1)\n    \n    # Example: if a = 2 and b = 5, and n = 12\n    # we can try a = 3, b = 2, n = 12\n    # but we don't want this. So try a = 4, b = 1, n = 12\n    # this will return (4, 1)\n    \n    # So the best solution is to try a = 2, b = 1, n = 8\n    \n    # First, check that a < b\n    if a >= b:\n        return None\n    \n    # Now, we know a < b\n    # a*x + b*y = n\n    # a*y + b*x = n\n    # a*y - b*x = n - a*x\n    # a*y - b*x = (n-a*x) / a\n    # y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # Now, we know a < b\n    # a*x + b*y = n\n    # a*y + b*x = n\n    # a*y - b*x = n - a*x\n    # a*y - b*x = (n-a*x) / a\n    # y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x - b*y = (n-a*x) / a\n    # x = (a*n - b*a*x) / (a*a)\n    \n    # We know that a*x + b*y = n\n    # a*x + b*y = n\n    # a*x - b*y = n - a*x\n    # a*x "
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 1)\n        else:\n            return None\n    elif a == 0 and b > 0:\n        if n % b == 0:\n            return (0, n/b)\n        else:\n            return None\n    elif a > 0 and b == 0:\n        if n % a == 0:\n            return (n/a, 0)\n        else:\n            return None\n    else:\n        if n % gcd(a, b) == 0:\n            return (n/gcd(a, b), 0)\n        else:\n            return None\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_copy = list1[:]\n    for element in list2:\n        if element in list1_copy:\n            list1_copy.remove(element)\n    return list1_copy\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n    \n    \nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4]\n    l2 = [2, 4, 6, 8]\n    print(remove_elements(l1, l2))\n    "
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_copy = list1[:]\n    for i in list2:\n        if i in list1_copy:\n            list1_copy.remove(i)\n    return list1_copy\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        for j in list1:\n            if i == j:\n                list1.remove(j)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for item in list1:\n        if item not in list2:\n            list3.append(item)\n    return list3\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2) if n >= 0 else 0\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n <= 1 else sum_series(n - 2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return sum_series(n-1) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return False\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([n-2*i for i in range(n//2)])\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n - 2*sum_series(n - 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / 2 * tan(pi / n)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    polygon_area = (0.25*s*l)**2 * tan(pi/s)\n    return polygon_area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)*(3*tan(pi/l))/4\ndef all_perimeters(n):\n    '''\n    Write a function that returns a list of all perimeter values for a given number of sides.\n    '''\n    return [2*area_polygon(n,l) for l in range(1,n+1)]\ndef perimeter_of_regular_polygon(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return sum(all_perimeters(sides))\ndef perimeter_of_regular_polygon2(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon3(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return sum(all_perimeters(sides))\ndef perimeter_of_regular_polygon4(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon5(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon6(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon7(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon8(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon9(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon10(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon11(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon12(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon13(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon14(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon15(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon16(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon17(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon18(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon19(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon20(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon21(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon22(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon23(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon24(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon25(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon26(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon27(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon28(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon29(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon30(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygon given the number of sides and length of a side.\n    '''\n    return perimeter_of_regular_polygon(sides)\ndef perimeter_of_regular_polygon31(sides):\n    '''\n    Write a function that returns the perimeter of a regular polygo"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2\n    \n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    p = (s**2) * (3**0.5) / 2\n    return p * l\ndef area_of_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_of_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return (b * h) / 2\ndef area_of_rectangle(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given the length and width of the rectangle.\n    '''\n    return l * w\ndef area_of_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given the area of the base, height of the top, and the height of the bottom.\n    '''\n    return ((a + b) * h) / 2\ndef area_of_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the lengths of its semi-axes.\n    '''\n    return a * b\ndef area_of_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_of_rectangle(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given the length and width of the rectangle.\n    '''\n    return l * w\ndef area_of_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return b * h\ndef perimeter_of_circle(r):\n    '''\n    Write a function to calculate the perimeter of a circle given the radius.\n    '''\n    return 2 * pi * r\ndef perimeter_of_rectangle(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the length and width of the rectangle.\n    '''\n    return l + w + l + w\ndef perimeter_of_triangle(b, h):\n    '''\n    Write a function to calculate the perimeter of a triangle given the base and height of the triangle.\n    '''\n    return b + h + b + h\ndef perimeter_of_ellipse(a, b):\n    '''\n    Write a function to calculate the perimeter of an ellipse given the lengths of its semi-axes.\n    '''\n    return 2 * pi * a + 2 * pi * b\ndef perimeter_of_rectangle(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the length and width of the rectangle.\n    '''\n    return 2 * (l + w)\ndef perimeter_of_triangle(b, h):\n    '''\n    Write a function to calculate the perimeter of a triangle given the base and height of the triangle.\n    '''\n    return b + b + h + h\ndef circumference_of_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle given the radius.\n    '''\n    return 2 * pi * r\ndef circumference_of_rectangle(l, w):\n    '''\n    Write a function to calculate the circumference of a rectangle given the length and width of the rectangle.\n    '''\n    return (l + w) * 2\ndef circumference_of_triangle(b, h):\n    '''\n    Write a function to calculate the circumference of a triangle given the base and height of the triangle.\n    '''\n    return b + b + h + h\ndef circumference_of_ellipse(a, b):\n    '''\n    Write a function to calculate the circumference of an ellipse given the lengths of its semi-axes.\n    '''\n    return 2 * pi * a + 2 * pi * b\ndef circumference_of_rectangle(l, w):\n    '''\n    Write a function to calculate the circumference of a rectangle given the length and width of the rectangle.\n    '''\n    return 2 * (l + w)\ndef circumference_of_triangle(b, h):\n    '''\n    Write a function to calculate the circumference of a triangle given the base and height of the triangle.\n    '''\n    return b + b + h + h\ndef solve_for_r(a, b, c):\n    '''\n    Write a function to solve for r given the lengths of the sides.\n    '''\n    return (((b**2) + (c**2)) - (4 * a * (a * b * c / ((b + c) * (b + c)))) ** 0.5) / (2 * a)\ndef solve_for_r_given_area(a, b, c, l):\n    '''\n    Write a function to solve for r given the lengths of the sides and the area of the triangle.\n    '''\n    return (l * ((a + c) - (b * c / a)) ** 0.5) / (a * c / ((a + c) * (a + c)))\ndef perimeter_of_triangle(b, h):\n    '''\n    Write a function to calculate the perimeter of a triangle given the base and height of the triangle.\n    '''\n    return b + b + h + h\ndef area_of_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return b * h\ndef circumference_of_triangle(b, h):\n    '''\n    Write a function to calculate the circumference of a triangle given the base and height of the triangle.\n    '''\n    return b + b + h + h\ndef area_of_rectangle(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given the length and width of the rectangle.\n    '''\n    return l * w\ndef area_of_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef solve_for_c(a, b, c):\n    '''\n    Write a function to solve for c given the lengths of the sides.\n    '''\n    return (((a**2) + (b**2)) - (2 * a * b * c / ((a + b) * (a + b)))) ** 0.5\ndef solve_for_c_given_area(a, b, c, l):\n    '''\n    Write a function to solve for c given the lengths of the sides and the area of the triangle.\n    '''\n    return (l * ((a + c) - (b * c / a)) ** 0.5) / (a * c / ((a + c) * (a + c)))\ndef perimeter_of_triangle(b, h):\n    '''\n    Write a function to calculate the perimeter of a triangle given the base and height of the triangle.\n    '''\n    return b + b + h + h\ndef perimeter_of_rectangle(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the length and width of the rectangle.\n    '''\n    return 2 * (l + w)\ndef perimeter_of_circle(r):\n    '''\n    Write a function to calculate the perimeter of a circle given the radius.\n    '''\n    return 2 * pi * r\ndef perimeter_of_ellipse(a, b):\n    '''\n    Write a function to calculate the perimeter of an ellipse given the lengths of its semi-axes.\n    '''\n    return 2 * pi * a + 2 * pi * b\ndef perimeter_of_rectangle(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the length and width of the rectangle.\n    '''\n    return 2 * (l + w)\ndef perimeter_of_triangle(b, h):\n    '''\n    Write a function to calculate the perimeter of a triangle given the base and height of the triangle.\n    '''\n    return b + b + h + h\ndef area_of_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return b * h\ndef area_o"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(l**2)/(4*tan(pi/s)))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Area of a regular polygon is given by  a*S(a^2-3a)\n    #where S is the area of the square and a is the side length of the polygon.\n    #Since the polygon has n sides, we can use this to calculate the area of the polygon by\n    #finding the area of a square with side length given by the sum of the area of a regular polygon with same number of sides\n    #In other words, area of a square is the area of a regular polygon with same number of sides as the square.\n    #S(a^2-3a) = (n*(a^2-3a))/2\n    #For regular polygon with n sides, sum of the area of n regular polygon with same number of sides is given by\n    #a*(n*(n+1))/2\n    #Since n has to be an integer, n must be even or n must be odd.\n    #If n is even, area of the polygon is just n*(n-2)*a^2/4\n    #If n is odd, area of the polygon is just n*(n-1)*a^2/4\n    a = l/(2*s)\n    if a%1==0:\n        return a*(s*(s+1))/4\n    else:\n        return a*(s*(s+1))/4\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / (2 * tan(pi/s))\n    \n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s * (pi / 180)\n    area = (s**2 * (l/2)) / (4 * tan(s))\n    print \"Area of a regular polygon is %.2f\" %area\n    return\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return 0\n    else:\n        s = 1\n        i = 2\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                s += i\n                if i*i!= n:\n                    s += n / i\n            i += 1\n        return s\ndef nth_perfect_number(n):\n    '''\n    Given a positive integer n, return the nth perfect number.\n    For example, given n = 3, return 6.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n + 1) / 2\ndef nth_last_perfect_number(n):\n    '''\n    Given a positive integer n, return the nth last perfect number.\n    For example, given n = 3, return 6.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n - 1) / 2\ndef sum_of_distinct_primes(n):\n    '''\n    Given a positive integer n, return the sum of the distinct prime factors of n.\n    For example, given n = 12, return 6.\n    '''\n    if n == 1:\n        return 0\n    else:\n        if n % 2 == 0:\n            n -= 2\n        c = 1\n        i = 3\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                c += 2\n                n /= i\n            elif i == 2:\n                i = 3\n            else:\n                i += 2\n        if n > 2:\n            c += 1\n        return c\ndef least_common_multiple(n1, n2):\n    '''\n    Given two positive integers, find their least common multiple.\n    '''\n    if n1 == 1:\n        return n2\n    else:\n        return least_common_multiple(n2, n1 % n2)\ndef num_digit_sum(n):\n    '''\n    Given a positive integer n, find the number of digits in the sum of its digits.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return num_digit_sum(n / 10) + n % 10\ndef fibonacci(n):\n    '''\n    Given a positive integer n, return the nth number in the Fibonacci sequence.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef fibonacci_matrix(n):\n    '''\n    Given a positive integer n, return the nth Fibonacci number.\n    '''\n    a = [1, 1]\n    while len(a) <= n:\n        a.append(a[-2] + a[-1])\n    return a[n]\ndef nth_term_of_harmonic(n):\n    '''\n    Given a positive integer n, find the nth term of the harmonic series.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + nth_term_of_harmonic(n - 1)\ndef nth_term_of_harmonic_2(n):\n    '''\n    Given a positive integer n, find the nth term of the harmonic series.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + nth_term_of_harmonic_2(n - 1)\ndef is_prime(n):\n    '''\n    Given a positive integer n, return true if it is prime.\n    '''\n    if n == 1:\n        return False\n    else:\n        i = 2\n        while i < n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\ndef nth_largest_prime_factor(n):\n    '''\n    Given a positive integer n, return the nth largest prime factor of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        while n % 2 == 0:\n            n /= 2\n        i = 3\n        while i * i <= n:\n            while n % i == 0:\n                n /= i\n            i += 2\n        if n > 2:\n            return n\n        else:\n            return 2\ndef nth_smallest_prime_factor(n):\n    '''\n    Given a positive integer n, return the nth smallest prime factor of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        while n % 2 == 0:\n            n /= 2\n        i = 3\n        while i * i <= n:\n            while n % i == 0:\n                n /= i\n            i += 2\n        if n > 2:\n            return n\n        else:\n            return 2\ndef is_palindrome(n):\n    '''\n    Given a positive integer n, return true if it is a palindrome.\n    '''\n    i = n\n    s = 0\n    while i!= 0:\n        s = s * 10 + i % 10\n        i /= 10\n    return n == s\ndef is_palindrome_2(n):\n    '''\n    Given a positive integer n, return true if it is a palindrome.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return n % 10 == n / 10 % 10\ndef prime_factorization(n):\n    '''\n    Given a positive integer n, return the prime factorization of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        pf = []\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                pf.append(i)\n                n /= i\n            else:\n                i += 1\n        if n > 1:\n            pf.append(n)\n        return pf\ndef nth_smallest_pandigital(n):\n    '''\n    Given a positive integer n, return the nth smallest pandigital.\n    '''\n    if n == 1:\n        return 1234567\n    else:\n        s = [0] * 10\n        i = 1\n        while sum(s) < n:\n            s[i] = i\n            i += 1\n        s[i] = 9\n        while sum(s) > n:\n            s[i] = 0\n            i += 1\n        return int(''.join([str(x) for x in s]))\ndef nth_smallest_pandigital_2(n):\n    '''\n    Given a positive integer n, return the nth smallest pandigital.\n    '''\n    if n == 1:\n        return 1234567\n    else:\n        s = [0] * 10\n        i = 1\n        while sum(s) < n:\n            s[i] = i\n            i += 1\n        return int(''.join([str(x) for x in s]))\ndef is_super_string(s1, s2):\n    '''\n    Given two strings s1 and s2, write a function to determine if s2 is a rotated version of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1 + s1\n    if s1.find(s2) == -1:\n        return False\n    else:\n        return True\ndef is_super_string_2(s1, s2):\n    '''\n    Given two strings s1 and s2, write a function to determine if s2 is a rotated version of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1 + s1\n    if s1.find(s2) == -1:\n        return False\n    else:\n        for i in range(len(s1)):\n            if s1[i:len(s1)] == s2:\n                return True\n        return False\ndef is_super_string_3(s1, s2):\n    '''\n    Given two strings s1 and s2, write a function to determine if s2 is a rotated version of s1.\n    '''\n    if len(s1)!= len(s2)"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    try:\n        int(n)\n    except ValueError:\n        print \"Divisor sum not a valid input\"\n        return False\n    #Computing the divisors\n    divisor_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_list.append(i)\n            if i!= math.sqrt(n):\n                divisor_list.append(int(n/i))\n    #comparing the sums\n    if sum(divisor_list) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_divisors = 0\n    for x in range(1, math.ceil(math.sqrt(n))):\n        if n%x == 0:\n            if x%2 == 0:\n                sum_divisors = sum_divisors + (x + n/x)\n            else:\n                sum_divisors = sum_divisors + (x + n/x)\n    if sum_divisors == n:\n        return True\n    else:\n        return False\ndef factor(n):\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    factors = []\n    for x in range(1, math.ceil(math.sqrt(n))):\n        if n%x == 0:\n            factors.append(x)\n            factors.append(n/x)\n    return factors\ndef pythagorean_triple(a,b,c):\n    '''\n    Write a function to check if a,b,c are a pythagorean triple.\n    '''\n    if (math.pow(a,2) + math.pow(b,2) == math.pow(c,2)):\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function to check if a number is a prime number.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n                break\n    return True\ndef lcm(a,b):\n    '''\n    Write a function to find the least common multiple of two numbers.\n    '''\n    lcm_val = 1\n    if a > b:\n        for i in range(b,a+1):\n            if i%a == 0 and i%b == 0:\n                lcm_val = i\n    else:\n        for i in range(a,b+1):\n            if i%a == 0 and i%b == 0:\n                lcm_val = i\n    return lcm_val\ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if a%b == 0:\n        return b\n    return gcd(b,a%b)\ndef phi(n):\n    '''\n    Write a function to find the value of phi for a given integer.\n    '''\n    phi_val = 1\n    prime_factors = factor(n)\n    for x in prime_factors:\n        if is_prime(x) == True:\n            phi_val = phi_val * x**(prime_factors.count(x)/2)\n    return phi_val\ndef mod_inverse(a,m):\n    '''\n    Write a function to find the modular inverse of a number.\n    '''\n    for x in range(1,m):\n        if (a*x)%m == 1:\n            return x\n        else:\n            pass\ndef quadratic_solve(a,b,c):\n    '''\n    Write a function to solve a quadratic equation given the coefficients.\n    '''\n    delta = b*b - 4*a*c\n    sqrt_delta = math.sqrt(delta)\n    x1 = (-b + sqrt_delta) / 2*a\n    x2 = (-b - sqrt_delta) / 2*a\n    return x1,x2\ndef super_pow(a,b,c):\n    '''\n    Write a function to find a to the power b.\n    '''\n    if b == 1:\n        return a\n    elif b%2 == 0:\n        return super_pow(a*a,b/2,a)\n    else:\n        return a*super_pow(a,b-1,a)\ndef fib(n):\n    '''\n    Write a function to compute the nth fibonacci number.\n    '''\n    fib_numbers = [0,1]\n    for x in range(2,n+1):\n        fib_numbers.append(fib_numbers[x-1] + fib_numbers[x-2])\n    return fib_numbers[n]\ndef lcm(a,b):\n    '''\n    Write a function to find the least common multiple of two numbers.\n    '''\n    lcm_val = 1\n    if a > b:\n        for i in range(b,a+1):\n            if i%a == 0 and i%b == 0:\n                lcm_val = i\n    else:\n        for i in range(a,b+1):\n            if i%a == 0 and i%b == 0:\n                lcm_val = i\n    return lcm_val\ndef sum_digits(n):\n    '''\n    Write a function to sum the digits of a number.\n    '''\n    sum_digits_val = 0\n    while n > 0:\n        sum_digits_val = sum_digits_val + n%10\n        n = n/10\n    return sum_digits_val\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    if n == n[::-1]:\n        return True\n    else:\n        return False\ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if math.sqrt(n) == math.floor(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef is_power(a,b):\n    '''\n    Write a function to check if a number is a power of another number.\n    '''\n    if a == b:\n        return True\n    elif a%b == 0 and is_power(a/b,b):\n        return True\n    else:\n        return False\ndef is_prime_power(a,b):\n    '''\n    Write a function to check if a number is a prime power.\n    '''\n    if is_power(a,b) == True:\n        return True\n    else:\n        return False\ndef digit_rotate(a,b):\n    '''\n    Write a function to rotate digits of a number.\n    '''\n    rotate_a = 0\n    rotate_b = 0\n    for i in range(len(str(a))):\n        rotate_a = rotate_a + (a%10)*(10**(len(str(a))-i-1))\n    for i in range(len(str(b))):\n        rotate_b = rotate_b + (b%10)*(10**(len(str(b))-i-1))\n    return rotate_a,rotate_b\ndef rec_mult(a,b):\n    '''\n    Write a function to find the multiplication of a number by a recursive function.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a + rec_mult(a,b-1)\ndef merge(lst1,lst2):\n    '''\n    Write a function to merge two sorted list and return the sorted list.\n    '''\n    lst3 = []\n    for x in lst1:\n        lst3.append(x)\n    for x in lst2:\n        lst3.append(x)\n    lst3 = sorted(lst3)\n    return lst3\ndef merge_sort(lst):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        mid = len(lst)//2\n        left = merge_sort(lst[:mid])\n        right = merge_sort(lst[mid:])\n        return merge(left,right)\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    if n == n[::-1]:\n        return True\n    else:\n        return False\ndef unique_digit(n):\n    '''\n    Write a function to check if a number has unique digits.\n    '''\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 0\n    for i in range(1, math.floor(math.sqrt(n))):\n        if n%i == 0:\n            if (n/i) == i:\n                total += i\n            else:\n                total += i\n                total += n/i\n    return total\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 0:\n        return False\n    divisor = 1\n    sum_divisors = 0\n    while divisor <= n:\n        if n % divisor == 0:\n            sum_divisors = sum_divisors + divisor\n        divisor = divisor + 1\n    return sum_divisors\ndef digits_sum(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of the number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n % 10 + digits_sum(n//10)\ndef largest_digit(n):\n    '''\n    Write a function that takes an integer n as input and returns the largest digit in n.\n    '''\n    if n <= 0:\n        return 0\n    elif n >= 10:\n        return n % 10\n    else:\n        return n\ndef largest_digit2(n):\n    '''\n    Write a function that takes an integer n as input and returns the largest digit in n.\n    '''\n    if n <= 0:\n        return 0\n    elif n >= 10:\n        return n % 10\n    else:\n        return n\ndef factorize(n):\n    '''\n    Write a function that takes a positive integer n as input and returns a list of all of the numbers that are divisible by n.\n    '''\n    if n <= 0:\n        return None\n    return_list = []\n    for num in range(1, n+1):\n        if n % num == 0:\n            return_list.append(num)\n    return return_list\ndef factors(n):\n    '''\n    Write a function that takes a positive integer n as input and returns a list of all the numbers that divide n evenly.\n    '''\n    if n <= 0:\n        return None\n    return_list = []\n    for num in range(1, n+1):\n        if n % num == 0:\n            return_list.append(num)\n    return return_list\ndef is_prime(n):\n    '''\n    Write a function that takes an integer n as input and returns true if n is prime and false if n is not prime.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return False\n    else:\n        return all(n % x!= 0 for x in range(2, int(math.sqrt(n)) + 1))\ndef is_palindrome(n):\n    '''\n    Write a function that takes an integer n as input and returns true if n is a palindrome and false if n is not a palindrome.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return True\n    else:\n        return n == n[::-1]\ndef sum_of_digits(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return n % 10 + sum_of_digits(n//10)\ndef sum_of_digits2(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n % 10 + sum_of_digits2(n//10)\ndef sum_of_digits3(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return n % 10 + sum_of_digits3(n//10)\ndef sum_of_digits4(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits4(n // 10)\ndef sum_of_digits5(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits5(n // 10)\ndef sum_of_digits6(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits6(n // 10)\ndef sum_of_digits7(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits7(n // 10)\ndef sum_of_digits8(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits8(n // 10)\ndef sum_of_digits9(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits9(n // 10)\ndef sum_of_digits10(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits10(n // 10)\ndef sum_of_digits11(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits11(n // 10)\ndef sum_of_digits12(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return sum_of_digits(n // 10) * 10\n    else:\n        return n % 10 + sum_of_digits12(n // 10)\ndef sum_of_digits13(n):\n    '''\n    Write a function that takes an integer n as input and returns the sum of the digits of n.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: return False\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n/i == i: return True\n            else: return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = int(n)\n    divisors = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i == n/i:\n                divisors.append(i)\n            else:\n                divisors.extend([i,n/i])\n    divisors = list(set(divisors))\n    sum_divisors = sum(divisors)\n    return sum_divisors == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # n = int(raw_input())\n    # s = raw_input()\n    if n % 2 == 0:\n        return False\n    s = n/2\n    i = 1\n    ans = 0\n    while i < s:\n        if s % i == 0:\n            ans += i\n        i += 1\n    # print s, ans\n    # print n, s, ans\n    if s == ans:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    num1 = n\n    divs1 = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if num1 % i == 0: \n            divs1.append(i)\n            if i!= int(math.sqrt(n)) and i!= n / i: \n                divs1.append(int(n / i))\n            elif i == n / i: \n                divs1.append(int(n / i))\n    num2 = n\n    divs2 = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if num2 % i == 0: \n            divs2.append(i)\n            if i!= int(math.sqrt(n)) and i!= n / i: \n                divs2.append(int(n / i))\n            elif i == n / i: \n                divs2.append(int(n / i))\n    if sum(divs1) == sum(divs2): \n        return True \n    else: \n        return False \ndef subset_sum(n, m): \n    '''\n    Write a function to find a subset of set A of size m that has sum of values equal to target value t.\n    '''\n    if m == 0: \n        return False \n    elif n == 0 and m == 1: \n        return True \n    elif n == 0: \n        return False \n    elif m > n: \n        return subset_sum(n, m - 1) \n    elif m == n: \n        return True \n    elif m == 1: \n        return True \n    else: \n        return subset_sum(n - 1, m) or subset_sum(n - 1, m - 1) \ndef nth_root(n, q): \n    '''\n    Return the number r such that r^q is nth root of n.\n    '''\n    if q == 1: \n        return n \n    if n == 0: \n        return 0 \n    elif q == 2: \n        return n ** (1 / 2) \n    else: \n        a = 1\n        b = n \n        while b!= 1: \n            if a * q > b: \n                a = a + 1\n            elif a * q < b: \n                b = b - a \n            else: \n                return a \ndef find_farthest_point(coords): \n    '''\n    Write a function to find the farthest point from origin.\n    '''\n    longest_dist = 0 \n    for i in range(len(coords)): \n        current_dist = math.sqrt((coords[i][0] ** 2) + (coords[i][1] ** 2)) \n        if current_dist > longest_dist: \n            longest_dist = current_dist \n    return longest_dist\ndef nth_node_in_a_level(root, n, level): \n    '''\n    Return the nth node from the root to the nth level. \n    '''\n    current = root \n    for i in range(level): \n        if n > 0: \n            current = current.right \n            n -= 1 \n        else: \n            current = current.left \n    return current \ndef sum_all_path_nodes(root): \n    '''\n    Return the sum of all the nodes on a given path from the root to the leaf nodes.\n    '''\n    current = root \n    path_sum = 0 \n    while current.left!= None or current.right!= None: \n        if current.left!= None: \n            current = current.left \n            path_sum += current.data \n        elif current.right!= None: \n            current = current.right \n            path_sum += current.data \n    return path_sum \ndef max_height_subtree(root): \n    '''\n    Write a function to find the maximum height of a binary tree.\n    '''\n    if root == None: \n        return 0 \n    else: \n        left_height = max_height_subtree(root.left)\n        right_height = max_height_subtree(root.right)\n        return 1 + max(left_height, right_height) \ndef nth_ancestor_node(root, n): \n    '''\n    Write a function to find the nth ancestor of a node in a binary tree.\n    '''\n    if root == None: \n        return None \n    elif n == 1: \n        return root \n    else: \n        left_ancestor = nth_ancestor_node(root.left, n - 1)\n        right_ancestor = nth_ancestor_node(root.right, n - 1)\n        if left_ancestor!= None: \n            return root \n        elif right_ancestor!= None: \n            return root \n        else: \n            return None \ndef count_substrings(text, k): \n    '''\n    Write a function to find the count of all substrings of a string with length k.\n    '''\n    if k == 0: \n        return 0 \n    elif k > len(text): \n        return 0 \n    else: \n        return count_substrings(text, k - 1) + count_substrings(text, k) + 1 \ndef k_factorization(n, k): \n    '''\n    Write a function to find the k-factorization of a positive integer n.\n    '''\n    if k == 1: \n        return [[n]] \n    elif k > n: \n        return [[n]] \n    else: \n        factors = k_factorization(n, k - 1) \n        for i in range(len(factors)): \n            factors[i].append(n / factors[i][0]) \n        return factors \ndef permutations(n, k): \n    '''\n    Write a function to return all the permutations of a string.\n    '''\n    if k > n: \n        return 0 \n    elif k == n: \n        return [n] \n    else: \n        new_perm = [] \n        for i in range(k): \n            new_perm.append(permutations(n, k - 1)[i])\n        for i in range(k): \n            for j in range(i + 1, k): \n                temp = new_perm[i]\n                new_perm[i] = new_perm[j]\n                new_perm[j] = temp \n        return new_perm \ndef group_anagrams(strs): \n    '''\n    Write a function to group anagrams together.\n    '''\n    result = {} \n    for str in strs: \n        key = ''.join(sorted(str)) \n        if key in result: \n            result[key].append(str) \n        else: \n            result[key] = [str] \n    return result.values() \ndef find_two_smallest(nums): \n    '''\n    Write a function to find the two smallest values in an unsorted array.\n    '''\n    if len(nums) <= 2: \n        return sorted(nums) \n    else: \n        nums.sort()\n        return [nums[0], nums[1]] \ndef number_of_friends(friends): \n    '''\n    Write a function to determine the number of friends that have the same interests with each other. \n    '''\n    result = {} \n    for i in range(len(friends)): \n        for j in range(len(friends)): \n            if i!= j: \n                intersection_set = set(friends[i]) & set(friends[j]) \n                result[i] = result.get(i, 0) + len(intersection_set) \n    return result \ndef generate_groups(n): \n    '''\n    Write a function to generate all groups of n people as an array.\n    '''\n    if n == 0: \n        return [[]] \n    elif n == 1: \n        return ["
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = int(n)\n    if n < 1:\n        return False\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            j = int(n/i)\n            if (i+j) == (int(math.sqrt(n))**2):\n                return True\n    return False\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {}\n    for i in range(26):\n        char_dict[chr(97+i)] = i\n        char_dict[chr(65+i)] = i\n    count = 0\n    for i in range(len(str1)):\n        if char_dict.get(str1[i].lower()) == i:\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    return sum(d[x] == d[y] for x,y in zip(str1.lower(), 'abcdefghijklmnopqrstuvwxyz'))\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(map(str1.count, string.ascii_lowercase))\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for c in str1:\n        char_count[c] = char_count.get(c, 0) + 1\n    return char_count\n    \ndef count_char_position2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i, c in enumerate(str1):\n        char_count[i] = char_count.get(i, 0) + 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # str1 = \"The quick brown fox jumps over the lazy dog\"\n    d = dict()\n    for i, x in enumerate(str1):\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\nprint(count_char_position(\"The quick brown fox jumps over the lazy dog\"))\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if (ord(str1[i])-96) == (ord(str1[i])-96):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = 0\n    for i in str1:\n        if ord(i) > 96 and ord(i) < 123:\n            result += 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    count = 0\n    for i in xrange(len(str1)):\n        if str1[i] in string.ascii_lowercase:\n            if str1[i].lower() == str1[i]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in xrange(len(A)):\n        for j in xrange(i+1,len(A)):\n            if ((A[i] ^ A[j]) & 1) == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if (i!= j) and (A[i] ^ A[j] == 0) and (A[i] % 2 == 0) and (A[j] % 2 == 0):\n                count += 1\n    \n    return count\n    \ndef find_pairs(A, s):\n    '''\n    Write a function that returns the number of pairs (i, j) such that i!= j, A[i] + A[j] = s.\n    '''\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j and A[i] + A[j] == s:\n                count += 1\n    \n    return count\n    \ndef find_max_consecutive(A):\n    '''\n    Write a function that returns the maximum consecutive repeating elements.\n    '''\n    \n    count = 1\n    max_count = 1\n    for i in range(1, len(A)):\n        if A[i] == A[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    \n    return max_count\n    \ndef find_interval(A):\n    '''\n    Write a function that returns the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    i = 0\n    while i < len(A):\n        count += 1\n        i += 1\n        while i < len(A) and A[i] == A[i - 1]:\n            i += 1\n    \n    return count\n    \ndef find_decodings(A):\n    '''\n    Write a function that returns the number of decodings of a string.\n    '''\n    \n    count = 0\n    if len(A) == 0:\n        return 0\n    \n    count = find_decodings_helper(A, 0, len(A) - 1)\n    \n    return count\n    \ndef find_decodings_helper(A, start, end):\n    '''\n    Write a function that returns the number of decodings of a string.\n    '''\n    \n    if end == start:\n        return 1\n    \n    if A[end] == '0':\n        return 0\n    \n    count = find_decodings_helper(A, start, end - 1)\n    \n    if start == end - 1:\n        if int(A[start]) == 2 or int(A[start]) == 3 or int(A[start]) == 4:\n            count += 1\n        \n    return count\n    \ndef find_max_continuous_ones(A):\n    '''\n    Write a function that returns the maximum number of continuous 1s that occur in a list.\n    '''\n    \n    count = 0\n    max_count = 0\n    for i in range(len(A)):\n        if A[i] == 1:\n            count += 1\n        else:\n            max_count = max(count, max_count)\n            count = 0\n    \n    return max(count, max_count)\n    \ndef find_max_non_consecutive_ones(A):\n    '''\n    Write a function that returns the maximum number of consecutive 1s that occur in a list.\n    '''\n    \n    count = 0\n    max_count = 0\n    for i in range(len(A)):\n        if A[i] == 1:\n            count += 1\n        else:\n            max_count = max(count, max_count)\n            count = 0\n    \n    return max_count\n    \ndef find_almost_sorted(A):\n    '''\n    Write a function that returns the number of pairs of indices i and j such that A[i] > A[j] but i < j.\n    '''\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i < j and A[i] > A[j]:\n                count += 1\n    \n    return count\n    \ndef find_merge_sort(A, B):\n    '''\n    Write a function that merges two sorted lists A and B into a sorted list and returns the sorted list.\n    '''\n    \n    n = len(A)\n    m = len(B)\n    \n    C = [0] * (n + m)\n    i = j = k = 0\n    \n    while i < n and j < m:\n        if A[i] <= B[j]:\n            C[k] = A[i]\n            i += 1\n        else:\n            C[k] = B[j]\n            j += 1\n        k += 1\n    \n    while i < n:\n        C[k] = A[i]\n        i += 1\n        k += 1\n    \n    while j < m:\n        C[k] = B[j]\n        j += 1\n        k += 1\n    \n    return C\n    \ndef find_max_in_list(A):\n    '''\n    Write a function that returns the index of the largest value in a list.\n    '''\n    \n    max_index = 0\n    max_value = A[0]\n    \n    for i in range(1, len(A)):\n        if A[i] > max_value:\n            max_index = i\n            max_value = A[i]\n    \n    return max_index\n    \ndef find_max_in_list_iter(A):\n    '''\n    Write a function that returns the index of the largest value in a list.\n    '''\n    \n    max_index = 0\n    max_value = A[0]\n    \n    for i in range(1, len(A)):\n        if A[i] > max_value:\n            max_index = i\n            max_value = A[i]\n    \n    return max_index\n    \ndef find_min_in_list(A):\n    '''\n    Write a function that returns the index of the smallest value in a list.\n    '''\n    \n    min_index = 0\n    min_value = A[0]\n    \n    for i in range(1, len(A)):\n        if A[i] < min_value:\n            min_index = i\n            min_value = A[i]\n    \n    return min_index\n    \ndef find_min_in_list_iter(A):\n    '''\n    Write a function that returns the index of the smallest value in a list.\n    '''\n    \n    min_index = 0\n    min_value = A[0]\n    \n    for i in range(1, len(A)):\n        if A[i] < min_value:\n            min_index = i\n            min_value = A[i]\n    \n    return min_index\n    \ndef find_min_max_index(A):\n    '''\n    Write a function that returns the indices of the smallest and largest values in a list.\n    '''\n    \n    min_index = 0\n    min_value = A[0]\n    max_index = 0\n    max_value = A[0]\n    \n    for i in range(1, len(A)):\n        if A[i] < min_value:\n            min_index = i\n            min_value = A[i]\n        elif A[i] > max_value:\n            max_index = i\n            max_value = A[i]\n    \n    return min_index, max_index\n    \ndef find_missing_numbers(A):\n    '''\n    Write a function that returns the indices of all numbers that are missing from an array.\n    '''\n    \n    n = len(A)\n    missing_numbers = []\n    for i in range(1, n):\n        if A[i]!= i + 1:\n            missing_numbers.append(i)\n    \n    return missing_numbers\n    \ndef find_missing_numbers_iter(A):\n    '''\n    Write a function that returns the indices of all numbers that are missing from an array.\n    '''\n    \n    missing_numbers = []\n    for i in range(1, len(A)):"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Your Code Here\n    \n    sorted_A = sorted(A)\n    xor_sum = 0\n    for i in xrange(0, len(sorted_A), 2):\n        for j in xrange(i+2, len(sorted_A), 2):\n            xor_sum += bin(sorted_A[i] ^ sorted_A[j]).count('1')\n    \n    return xor_sum\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(0,len(A)):\n        for j in range(i+1, len(A)):\n            if ((A[i] ^ A[j])%2 == 0):\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    x = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                x += 1\n    return x\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from functools import reduce\n    return len(reduce(lambda x,y: x&y, (i for i in A if i%2 == 0)))\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Set up and fill the result array\n    result = [0]*len(A)\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_even = [0] * 32\n    for i in range(len(A)):\n        for j in range(len(A)):\n            xor_even[A[i] ^ A[j]] += 1\n    print(xor_even)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 0\n    while (1<<p) < n:\n        p += 1\n    return 1<<p\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while(i <= n): \n        i = i << 1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**int(math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = n-1\n    while n % 2 == 0:\n        n /= 2\n    return n+1\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    ans = 1\n    while ans <= n:\n        ans *= 2\n    return ans\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    def helper(n):\n        if n == 1:\n            return 1\n        count = 0\n        while n/2 > 1:\n            n /= 2\n            count += 1\n        return 2**count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**np.ceil(np.log2(n)))\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # make a dictionary of x's\n    b = {}\n    \n    # loop through the list\n    for i in range(len(a)):\n        # check if x is in the dictionary\n        if a[i] in b:\n            # if so, increment the count\n            b[a[i]] += 1\n        else:\n            # otherwise, add it to the dictionary\n            b[a[i]] = 1\n            \n    # return the count of the key\n    return b[x]\n    "
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for element in a:\n        if element == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i==x])\n    "
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in x:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f = 0\n    for i in a:\n        if i == x:\n            f += 1\n    return f\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n    \na = [1, 1, 2, 3, 4, 5, 5, 5, 5, 7, 7, 7, 8, 8, 9, 10, 10]\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.append(x)\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    print count\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in list1[m:n]:\n        sum += i\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    assert isinstance(list1, list)\n    assert isinstance(m, int) and isinstance(n, int)\n    assert n>=m\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum([list1[i] for i in range(m, n)])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    if m == n:\n        return 0\n    else:\n        return list1[n] - list1[m] + sum_range_list(list1, m+1, n-1)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in list1:\n        if i >= m and i <= n:\n            sum_list += i\n    return sum_list\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if not isinstance(list1, list):                                                                                                                                                                                                                                \n        return TypeErrorn"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a*a)/2\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (6*a*a)/2\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return (7*a*a)/2\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (8*a*a)/2\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (9*a*a)/2\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return (10*a*a)/2\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return (12*a*a)/2\ndef perimeter_tridecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecagon from the length of its sides.\n    '''\n    return (13*a*a)/2\ndef perimeter_tetradecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecagon from the length of its sides.\n    '''\n    return (14*a*a)/2\ndef perimeter_heptadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptadecagon from the length of its sides.\n    '''\n    return (15*a*a)/2\ndef perimeter_octadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octadecagon from the length of its sides.\n    '''\n    return (16*a*a)/2\ndef perimeter_enidecagon(a):\n    '''\n    Write a function to find the perimeter of a regular enidecagon from the length of its sides.\n    '''\n    return (17*a*a)/2\ndef perimeter_decadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular decadecagon from the length of its sides.\n    '''\n    return (18*a*a)/2\ndef perimeter_undecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecadecagon from the length of its sides.\n    '''\n    return (19*a*a)/2\ndef perimeter_dodecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecadecagon from the length of its sides.\n    '''\n    return (20*a*a)/2\ndef perimeter_tridecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecadecagon from the length of its sides.\n    '''\n    return (21*a*a)/2\ndef perimeter_tetradecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecadecagon from the length of its sides.\n    '''\n    return (22*a*a)/2\ndef perimeter_heptadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptadecadecagon from the length of its sides.\n    '''\n    return (23*a*a)/2\ndef perimeter_octadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octadecadecagon from the length of its sides.\n    '''\n    return (24*a*a)/2\ndef perimeter_enidecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular enidecadecagon from the length of its sides.\n    '''\n    return (25*a*a)/2\ndef perimeter_decadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular decadecadecagon from the length of its sides.\n    '''\n    return (26*a*a)/2\ndef perimeter_undecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecadecagon from the length of its sides.\n    '''\n    return (27*a*a)/2\ndef perimeter_dodecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecadecagon from the length of its sides.\n    '''\n    return (28*a*a)/2\ndef perimeter_tridecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecadecagon from the length of its sides.\n    '''\n    return (29*a*a)/2\ndef perimeter_tetradecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecadecagon from the length of its sides.\n    '''\n    return (30*a*a)/2\ndef perimeter_heptadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptadecadecagon from the length of its sides.\n    '''\n    return (31*a*a)/2\ndef perimeter_octadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octadecadecagon from the length of its sides.\n    '''\n    return (32*a*a)/2\ndef perimeter_enidecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular enidecadecagon from the length of its sides.\n    '''\n    return (33*a*a)/2\ndef perimeter_decadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular decadecadecagon from the length of its sides.\n    '''\n    return (34*a*a)/2\ndef perimeter_undecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecadecagon from the length of its sides.\n    '''\n    return (35*a*a)/2\ndef perimeter_dodecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecadecagon from the length of its sides.\n    '''\n    return (36*a*a)/2\ndef perimeter_tridecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecadecagon from the length of its sides.\n    '''\n    return (37*a*a)/2\ndef perimeter_tetradecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecadecagon from the length of its sides.\n    '''\n    return (38*a*a)/2\ndef perimeter_heptadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptadecadecagon from the length of its sides.\n    '''\n    return (39*a*a)/2\ndef perimeter_octadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octadecadecagon from the length of its sides.\n    '''\n    return (40*a*a)/2\ndef perimeter_enidecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular enidecadecagon from the length of its sides.\n    '''\n    return (41*a*a)/2\ndef perimeter_decadecadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular decadecadecagon from the length of its sides.\n    '''\n    return (42*a*a)/2\ndef perimeter_undecadecago"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = (5 * math.sqrt(5)) / 4 * a * a\n    return area\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = a * 6\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = (6 * math.sqrt(3)) / 4 * a * a\n    return area\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = a * 7\n    return perimeter\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    area = (7 * math.sqrt(7)) / 4 * a * a\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = a * 8\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = (8 * math.sqrt(2)) / 4 * a * a\n    return area\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = a * 9\n    return perimeter\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = (9 * math.sqrt(2)) / 4 * a * a\n    return area\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = a * 10\n    return perimeter\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = (10 * math.sqrt(5)) / 4 * a * a\n    return area\ndef perimeter_heptagon_by_sides(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_heptagon_by_sides(a, b, c):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = (a * b * c) / (4 * math.sqrt(5))\n    return area\ndef perimeter_octagon_by_sides(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_octagon_by_sides(a, b, c):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = (a * b * c) / (4 * math.sqrt(2))\n    return area\ndef perimeter_nonagon_by_sides(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_nonagon_by_sides(a, b, c):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = (a * b * c) / (4 * math.sqrt(2))\n    return area\ndef perimeter_decagon_by_sides(a, b, c):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_decagon_by_sides(a, b, c):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = (a * b * c) / (4 * math.sqrt(5))\n    return area\ndef are_hexagons_equal(a, b, c):\n    '''\n    Write a function to determine if hexagons have the same area\n    '''\n    area_1 = area_hexagon(a)\n    area_2 = area_hexagon(b)\n    area_3 = area_hexagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_pentagons_equal(a, b, c):\n    '''\n    Write a function to determine if pentagons have the same area\n    '''\n    area_1 = area_pentagon(a)\n    area_2 = area_pentagon(b)\n    area_3 = area_pentagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_heptagons_equal(a, b, c):\n    '''\n    Write a function to determine if hexagons have the same area\n    '''\n    area_1 = area_heptagon(a)\n    area_2 = area_heptagon(b)\n    area_3 = area_heptagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_octagons_equal(a, b, c):\n    '''\n    Write a function to determine if octagons have the same area\n    '''\n    area_1 = area_octagon(a)\n    area_2 = area_octagon(b)\n    area_3 = area_octagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_nonagons_equal(a, b, c):\n    '''\n    Write a function to determine if nonagons have the same area\n    '''\n    area_1 = area_nonagon(a)\n    area_2 = area_nonagon(b)\n    area_3 = area_nonagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_decagons_equal(a, b, c):\n    '''\n    Write a function to determine if decagons have the same area\n    '''\n    area_1 = area_decagon(a)\n    area_2 = area_decagon(b)\n    area_3 = area_decagon(c)\n    if area_1 == area_2 and area_2 == area_3:\n        return True\n    else:\n        return False\ndef are_hexagons_equal_by_sides(a, b, c):\n    '''\n    Write a function to determine if hexagons have the same area\n    '''\n    perimeter_1 = perimeter_hexagon_by_sides(a, b, c)\n    perimeter_2 = perimeter_hexagon_by_sides(b, a, c)\n    perimeter_3 = perimeter_hexagon_by_sides(c, a, b)\n    if perimeter_1 == perimeter_2 and perimeter_2 == perimeter_3:\n        return True\n    else:\n        return False\ndef are_pentagons_equal_by_sides(a, b, c):\n    '''\n    Write a function to determine if pentagons have the same area\n    '''\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a*(1+math.sqrt(1-5*(5/2-math.sqrt(5))))/2\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return 5*a**2/4\n    \ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a*(1+math.sqrt(1-3*(3/2-math.sqrt(3))))/2\n    \ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return 6*a**2/4\n    \ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 7*a*(1+math.sqrt(1-7*(7/2-math.sqrt(7))))/2\n    \ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return 7*a**2/4\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a*(1+math.sqrt(1-8*(8/2-math.sqrt(8))))/2\n    \ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return 8*a**2/4\n    \ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 9*a*(1+math.sqrt(1-9*(9/2-math.sqrt(9))))/2\n    \ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return 9*a**2/4\n    \ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 10*a*(1+math.sqrt(1-10*(10/2-math.sqrt(10))))/2\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return 10*a**2/4\n    \ndef perimeter_decagon_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*4+2*a\n    \ndef area_decagon_rhombus(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2+a*math.sqrt(2*a)+a\n    \ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*4+2*a\n    \ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2+a*math.sqrt(2*a)+a\n    \ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*3\n    \ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a*math.sqrt(3)/2\n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 4*a\n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2\n    \ndef perimeter_n_squares(n):\n    '''\n    Write a function to find the perimeter of n regular nonagon from the length of their sides.\n    '''\n    return n*(2*n+1)*(n**2+2*n+1)/4\n    \ndef area_n_squares(n):\n    '''\n    Write a function to find the area of n regular nonagon from the length of their sides.\n    '''\n    return n**2*math.sqrt(2*n+1)*(2*n+1)/4\n    \ndef perimeter_octagon_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*4+2*a\n    \ndef area_octagon_rhombus(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2+a*math.sqrt(2*a)+a\n    \ndef perimeter_triangle_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*4+2*a\n    \ndef area_triangle_rhombus(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2+a*math.sqrt(2*a)+a\n    \ndef perimeter_square_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*4+2*a\n    \ndef area_square_rhombus(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2+a*math.sqrt(2*a)+a\n    \ndef perimeter_octagon_rhombus_square_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*4+2*a\n    \ndef area_octagon_rhombus_square_rhombus(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2+a*math.sqrt(2*a)+a\n    \ndef perimeter_octagon_rhombus_square_rhombus_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*4+2*a\n    \ndef area_octagon_rhombus_square_rhombus_rhombus(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2+a*math.sqrt(2*a)+a\n    \ndef perimeter_nonagon_square_square(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*4+2*a\n    \ndef area_nonagon_square_square(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return a**2+a*math.sqrt(2*a)+a\n    \ndef perimeter_octagon_square_square(a):\n    '''\n    Write a function t"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*(2**0.5)\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a + a + a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a + a + a + a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a + a + a + a + a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a + a + a + a + a + a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a + a + a + a + a + a + a\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a + a + a + a + a + a + a + a\ndef perimeter_septagon(a):\n    '''\n    Write a function to find the perimeter of a regular septagon from the length of its sides.\n    '''\n    return a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, and g.\n    '''\n    return a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt2(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt3(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt4(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt5(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt6(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt7(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt8(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt9(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt10(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt11(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt12(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt13(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt14(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt15(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt16(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt17(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt18(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt19(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt20(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt21(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d, e, f, g, h, i, and j.\n    '''\n    return a + a + a + a + a + a + a + a + a\ndef perimeter_octagon_alt22(a):\n    '''\n    Write a function to find the perimeter of an octagon with sides a, b, c, d"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a)**2\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = 6 * a\n    return perimeter\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = 7 * a\n    return perimeter\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = 10 * a\n    return perimeter\ndef perimeter_tridegon(a):\n    '''\n    Write a function to find the perimeter of a regular tridegon from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    perimeter = 4 * a\n    return perimeter\ndef perimeter_rectangle(a):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    perimeter = 2 * (a + math.sqrt((a ** 2) + (a ** 2)))\n    return perimeter\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    perimeter = 3 * a\n    return perimeter\ndef perimeter_trapezium(a, b):\n    '''\n    Write a function to find the perimeter of a regular trapezium from the length of its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a regular circle from the length of its sides.\n    '''\n    perimeter = 2 * math.pi * a\n    return perimeter\ndef perimeter_ellipse(a, b):\n    '''\n    Write a function to find the perimeter of a regular ellipse from the length of its sides.\n    '''\n    perimeter = 2 * math.pi * (a + b)\n    return perimeter\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    perimeter = 4 * a\n    return perimeter\ndef perimeter_polygon(a, n):\n    '''\n    Write a function to find the perimeter of a regular polygon from the length of its sides.\n    '''\n    perimeter = n * a\n    return perimeter\ndef perimeter_rhombicuboctahedron(a):\n    '''\n    Write a function to find the perimeter of a rhombicuboctahedral polyhedron from the length of its sides.\n    '''\n    perimeter = 12 * a\n    return perimeter\ndef perimeter_heptagonal(a):\n    '''\n    Write a function to find the perimeter of a regular heptagonal from the length of its sides.\n    '''\n    perimeter = 7 * a\n    return perimeter\ndef perimeter_octagonal(a):\n    '''\n    Write a function to find the perimeter of a regular octagonal from the length of its sides.\n    '''\n    perimeter = 6 * a\n    return perimeter\ndef perimeter_dodecagonal(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagonal from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef perimeter_tetragonal(a):\n    '''\n    Write a function to find the perimeter of a regular tetragonal from the length of its sides.\n    '''\n    perimeter = 4 * a\n    return perimeter\ndef perimeter_trigonal(a):\n    '''\n    Write a function to find the perimeter of a regular trigonal from the length of its sides.\n    '''\n    perimeter = 3 * a\n    return perimeter\ndef perimeter_tetrahedral(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedral from the length of its sides.\n    '''\n    perimeter = 4 * a\n    return perimeter\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a regular cube from the length of its sides.\n    '''\n    perimeter = 6 * a\n    return perimeter\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to find the perimeter of a regular icosahedron from the length of its sides.\n    '''\n    perimeter = 12 * a\n    return perimeter\ndef perimeter_icosidodecahedron(a):\n    '''\n    Write a function to find the perimeter of a regular icosidodecahedron from the length of its sides.\n    '''\n    perimeter = 20 * a\n    return perimeter\ndef perimeter_icosidodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular icosidodecagon from the length of its sides.\n    '''\n    perimeter = 19 * a\n    return perimeter\ndef perimeter_icosagon(a):\n    '''\n    Write a function to find the perimeter of a regular icosagon from the length of its sides.\n    '''\n    perimeter = 12 * a\n    return perimeter\ndef perimeter_hexadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexadecagon from the length of its sides.\n    '''\n    perimeter = 10 * a\n    return perimeter\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    perimeter = 12 * a\n    return perimeter\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = 7 * a\n    return perimeter\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = 6 * a\n    return perimeter\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = 7 * a\n    return perimeter\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = 10 * a\n    return perimeter\ndef perimeter_tridegon(a):\n    '''\n    Write a function to find the perimeter of a regular tridegon from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    perimeter = 4 * a\n    return perimeter\ndef perimeter_rectangle(a):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    perimeter = 2 "
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7*a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 9*a\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10*a\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return 12*a\ndef perimeter_tridecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecagon from the length of its sides.\n    '''\n    return 13*a\ndef perimeter_tetradecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecagon from the length of its sides.\n    '''\n    return 14*a\ndef perimeter_petadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular petadecagon from the length of its sides.\n    '''\n    return 15*a\ndef perimeter_hexadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexadecagon from the length of its sides.\n    '''\n    return 16*a\ndef perimeter_heptadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptadecagon from the length of its sides.\n    '''\n    return 17*a\ndef perimeter_octadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octadecagon from the length of its sides.\n    '''\n    return 18*a\ndef perimeter_enotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular enotoctagon from the length of its sides.\n    '''\n    return 19*a\ndef perimeter_decenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular decenotoctagon from the length of its sides.\n    '''\n    return 20*a\ndef perimeter_undecenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecenotoctagon from the length of its sides.\n    '''\n    return 21*a\ndef perimeter_dodecenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecenotoctagon from the length of its sides.\n    '''\n    return 22*a\ndef perimeter_tredecenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular tredecenotoctagon from the length of its sides.\n    '''\n    return 23*a\ndef perimeter_tetricenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetricenotoctagon from the length of its sides.\n    '''\n    return 24*a\ndef perimeter_petecenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular petecenotoctagon from the length of its sides.\n    '''\n    return 25*a\ndef perimeter_hexenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexenotoctagon from the length of its sides.\n    '''\n    return 26*a\ndef perimeter_heptenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptenotoctagon from the length of its sides.\n    '''\n    return 27*a\ndef perimeter_octenotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular octenotoctagon from the length of its sides.\n    '''\n    return 28*a\ndef perimeter_ennotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular ennotoctagon from the length of its sides.\n    '''\n    return 29*a\ndef perimeter_decennotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular decennotoctagon from the length of its sides.\n    '''\n    return 30*a\ndef perimeter_undecennotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecennotoctagon from the length of its sides.\n    '''\n    return 31*a\ndef perimeter_dodecennotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecennotoctagon from the length of its sides.\n    '''\n    return 32*a\ndef perimeter_tredecennotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular tredecennotoctagon from the length of its sides.\n    '''\n    return 33*a\ndef perimeter_tetricennotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetricennotoctagon from the length of its sides.\n    '''\n    return 34*a\ndef perimeter_petecennotoctagon(a):\n    '''\n    Write a function to find the perimeter of a regular petecennotoctagon from the length of its sides.\n    '''\n    return 35*a\ndef perimeter_hexenotonode(a):\n    '''\n    Write a function to find the perimeter of a regular hexenotonode from the length of its sides.\n    '''\n    return math.sqrt(6)*a\ndef perimeter_heptotonode(a):\n    '''\n    Write a function to find the perimeter of a regular heptotonode from the length of its sides.\n    '''\n    return math.sqrt(8)*a\ndef perimeter_octotonode(a):\n    '''\n    Write a function to find the perimeter of a regular octotonode from the length of its sides.\n    '''\n    return math.sqrt(10)*a\ndef perimeter_ennotoctotonode(a):\n    '''\n    Write a function to find the perimeter of a regular ennotoctotonode from the length of its sides.\n    '''\n    return math.sqrt(12)*a\ndef perimeter_decennotoctotonode(a):\n    '''\n    Write a function to find the perimeter of a regular decennotoctotonode from the length of its sides.\n    '''\n    return math.sqrt(14)*a\ndef perimeter_undecennotoctotonode(a):\n    '''\n    Write a function to find the perimeter of a regular undecennotoctotonode from the length of its sides.\n    '''\n    return math.sqrt(16)*a\ndef perimeter_dodecennotoctotonode(a):\n    '''\n    Write a function to find the perimeter of a regular dodecennotoctotonode from the length of its sides.\n    '''\n    return math.sqrt(18)*a\ndef perimeter_tredecennotoctotonode(a):\n    '''\n    Write a function to find the perimeter of a regular tredecennotoctotonode from the length of its sides.\n    '''\n    return math.sqrt(20)*a\ndef perimeter_tetricennotoctotonode(a):\n    '''\n    Write a function to find the perimeter of a regular tetricennotoctotonode from the length of its sides.\n    '''\n    return math.sqrt(22)*a\ndef perimeter_petecennotoctotonode(a):\n    '''\n    Write a function to find the perimeter of a regular petecennotoctotonode from the length of its sides.\n    '''\n    return math.sqrt(2"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a * 3\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in range(len(s) - 3):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd' and s[i+3] == 'e':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in range(len(s) - 3):\n        if s[i] =='s' and s[i + 1] == 't' and s[i + 2] == 'd' and s[i + 3] =='':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # You may assume that the string contains only lowercase letters.\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_tuple = tuple(map(type, test_tuple))\n    return len(set(type_tuple)) == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #write your code here\n    if len(test_tuple) > 1:\n        return all(isinstance(x,type(test_tuple[0])) for x in test_tuple)\n    else:\n        return True\n        \ndef zip_tuple(*test_tuple):\n    '''\n    Write a function to concatenate two or more tuples of the same size.\n    '''\n    #write your code here\n    return tuple(zip(*test_tuple))\n    \ndef unzip_tuple(*test_tuple):\n    '''\n    Write a function to unzip a tuple.\n    '''\n    #write your code here\n    return zip(*test_tuple)\n    \ndef filter_tuple(filter_dict, test_tuple):\n    '''\n    Write a function to filter the tuple by the given dictionary.\n    '''\n    #write your code here\n    return tuple(filter(lambda x: x in filter_dict, test_tuple))\n    \ndef remove_tuple(remove_list, test_tuple):\n    '''\n    Write a function to remove the items from the tuple by the given list.\n    '''\n    #write your code here\n    return tuple(filter(lambda x: x not in remove_list, test_tuple))\n    \ndef tuple_product(test_tuple1, test_tuple2):\n    '''\n    Write a function to compute the cartesian product of two tuples.\n    '''\n    #write your code here\n    return (tuple(s1) for s1 in test_tuple1 for s2 in test_tuple2)\n    \ndef swap_tuple(test_tuple1, test_tuple2):\n    '''\n    Write a function to swap the first and last elements of the tuple.\n    '''\n    #write your code here\n    return (test_tuple2[-1],) + test_tuple1[1:-1] + (test_tuple1[0],)\n    \ndef tuple_permutations(test_tuple):\n    '''\n    Write a function to compute all permutations of a tuple.\n    '''\n    #write your code here\n    perm = []\n    for i in range(len(test_tuple)):\n        perm.append(list(test_tuple))\n        perm[-1][i] = test_tuple[i]\n    return perm\n    \ndef tuple_combinations(test_tuple1, test_tuple2):\n    '''\n    Write a function to compute all combinations of two tuples.\n    '''\n    #write your code here\n    comb = []\n    for i in range(len(test_tuple1)):\n        comb.append(list(test_tuple1))\n        comb[-1][i] = test_tuple2[i]\n    return comb\n    \ndef list_duplicates(test_list):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    #write your code here\n    return list(set(test_list))\n    \ndef find_list(test_list, test_item):\n    '''\n    Write a function to find the index of the first occurrence of an item from a list.\n    '''\n    #write your code here\n    return test_list.index(test_item)\n    \ndef tuple_count(test_tuple, test_item):\n    '''\n    Write a function to count the number of times an item occurs in a tuple.\n    '''\n    #write your code here\n    return test_tuple.count(test_item)\n    \ndef union_list(list1, list2):\n    '''\n    Write a function to compute the union of two lists.\n    '''\n    #write your code here\n    return list(set(list1+list2))\n    \ndef find_difference(list1, list2):\n    '''\n    Write a function to find the difference between two lists.\n    '''\n    #write your code here\n    return list(set(list1) - set(list2))\n    \ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert a dictionary into a tuple of (key, value) tuples.\n    '''\n    #write your code here\n    return tuple(test_dict.items())\n    \ndef zip_dict(test_dict1, test_dict2):\n    '''\n    Write a function to compute the zipped version of two dictionaries.\n    '''\n    #write your code here\n    return dict(zip(test_dict1, test_dict2))\n    \ndef zip_dict_value(test_dict1, test_dict2):\n    '''\n    Write a function to compute the zipped version of two dictionaries, but using the values instead of the keys.\n    '''\n    #write your code here\n    return dict(zip(test_dict2.values(), test_dict1.values()))\n    \ndef get_tuple_dict_value(test_dict, test_tuple):\n    '''\n    Write a function to compute the values of the items in a tuple using a dictionary.\n    '''\n    #write your code here\n    return tuple(test_dict.get(x, None) for x in test_tuple)\n    \ndef get_tuple_dict_value_default(test_dict, test_tuple, default_value):\n    '''\n    Write a function to compute the values of the items in a tuple using a dictionary, but return the default_value if the items are not in the dictionary.\n    '''\n    #write your code here\n    return tuple(test_dict.get(x, default_value) for x in test_tuple)\n    \ndef del_tuple_dict_value(test_dict, test_tuple):\n    '''\n    Write a function to delete the items in a tuple using a dictionary.\n    '''\n    #write your code here\n    return tuple(test_dict.pop(x, None) for x in test_tuple)\n    \ndef del_tuple_dict_value_default(test_dict, test_tuple, default_value):\n    '''\n    Write a function to delete the items in a tuple using a dictionary, but return the default_value if the items are not in the dictionary.\n    '''\n    #write your code here\n    return tuple(test_dict.pop(x, default_value) for x in test_tuple)\n    \ndef replace_tuple_dict_value(test_dict, test_tuple, replacement_dict):\n    '''\n    Write a function to replace the items in a tuple using a dictionary.\n    '''\n    #write your code here\n    return tuple(test_dict.get(x, replacement_dict[x]) for x in test_tuple)\n    \ndef replace_tuple_dict_value_default(test_dict, test_tuple, replacement_dict, default_value):\n    '''\n    Write a function to replace the items in a tuple using a dictionary, but return the default_value if the items are not in the dictionary.\n    '''\n    #write your code here\n    return tuple(test_dict.get(x, default_value) for x in test_tuple)\n    \ndef tuple_index(test_tuple, test_index):\n    '''\n    Write a function to return the value at a given index in a tuple.\n    '''\n    #write your code here\n    return test_tuple[test_index]\n    \ndef get_tuple_dict_value_index(test_dict, test_tuple, test_index):\n    '''\n    Write a function to return the value at a given index in a tuple using a dictionary.\n    '''\n    #write your code here\n    return test_dict.get(test_tuple[test_index], None)\n    \ndef get_tuple_dict_value_index_default(test_dict, test_tuple, test_index, default_value):\n    '''\n    Write a function to return the value at a given index in a tuple using a dictionary, but return the default_value if the items are not in the dictionary.\n    '''\n    #write your code here\n    return test_dict.get(test_tuple[test_index], default_value)\n    \ndef del_tuple_dict_value_index(test_dict, test_tuple, test_index):\n    '''"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) == tuple:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) <= 1:\n        return True\n    first_element = test_tuple[0]\n    for element in test_tuple:\n        if type(element)!= type(first_element):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_elem = test_tuple[0]\n    if isinstance(first_elem, int) or isinstance(first_elem, float):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) is type(test_tuple[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        first_element = test_tuple[0]\n        for element in test_tuple[1:]:\n            if type(first_element)!= type(element):\n                return False\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    global data_type\n    data_type = None\n    def get_type(test_tuple):\n        global data_type\n        data_type = str(type(test_tuple[0]))\n        return data_type\n    test_type = map(get_type, test_tuple)\n    print test_type\n    if len(test_type) == 1:\n        data_type = test_type[0]\n    return data_type\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)<2:\n        return True\n    if type(test_tuple[0])!=type(test_tuple[1]):\n        return False\n    return check_type(test_tuple[1:])\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[0] == x:\n        return True\n    elif arr[n-1] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case: only 1 element\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or n == 1:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if x not in arr:\n        return 0\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case\n    if n == 0:\n        return False\n    # otherwise, return true if the element appears more than n/2 times in the array\n    return arr.count(x) > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    l = 0\n    r = n-1\n    while l < r:\n        mid = l + (r-l)//2\n        if arr[mid] == x:\n            l = mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    if arr[l] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if not arr:\n        return False\n    left = 0\n    right = n - 1\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # time: O(n)\n    # space: O(1)\n    return arr.count(x) > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n / 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n    \ndef generate_random_list(size=6,max_val=10):\n    '''\n    Write a python function to generate a list of random values between 0 and max_val (both inclusive) of size size.\n    '''\n    import random\n    random_list = [random.randint(0,max_val) for i in range(size)]\n    return random_list\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if (n & 1):\n            count += 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n &= n - 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return len(bin(n)[2:].split('1'))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 2:\n        return str\n    str = str[1:]\n    return str\ndef odd_values_string2(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 2:\n        return str\n    return str[1:]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # your code goes here\n    str = ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])\n    \nprint odd_values_string('abcdefghij')\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    ans = ''\n    for i in range(0, len(str)):\n        if i % 2 == 0:\n            ans += str[i]\n    return ans\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # odd_chars = str[1::2]\n    # new_str = ''\n    # for ch in str:\n    #     if ch in odd_chars:\n    #         pass\n    #     else:\n    #         new_str+=ch\n    # return new_str\n    return ''.join(ch for i, ch in enumerate(str) if i % 2 == 0)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = str[::2]\n    print new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_lst = list(str)\n    result = []\n    for i in range(len(str_lst)):\n        if i % 2 == 0:\n            result.append(str_lst[i])\n    return ''.join(result)\n    \nprint(odd_values_string('abcdef'))\nprint(odd_values_string('a'))\nprint(odd_values_string('k'))\nprint(odd_values_string('abcdefghi'))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(0,len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for j, i in enumerate(str) if j%2==0])\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c and b < a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b) and (a < c):\n        return a\n    elif (b < a) and (b < c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            min_value = a\n        else:\n            min_value = c\n    else:\n        if b < c:\n            min_value = b\n        else:\n            min_value = c\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not any( [n & (1<<bit) for bit in range(l,r+1) ] )\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all([(n & (1 << i)) == 0 for i in range(r-l+1)])\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l=int(l)\n    r=int(r)\n    if(n & (2**r -1)):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = bin(n)[2:]\n    n = n.rjust(l, '0')\n    count = 0\n    for i in n[-r:]:\n        if i == '0':\n            count+=1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all([True if ((n & (2 ** b)) == 0) else False for b in range(l,r+1)])\n    \ndef all_Bits_Set_In_The_Given_Range_2(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return True if (n & (2 ** (r + 1)) == 0) else False\n    \ndef all_Bits_Set_In_The_Given_Range_3(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all([True if ((n & (2 ** b)) == 0) else False for b in range(l,r+1)])\n    \ndef my_GCD(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    while b!=0:\n        a,b=b,a%b\n    return a\n    \ndef my_LCM(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD(a,b)\n    \ndef my_GCD_2(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    while b!=0:\n        a,b=b,a%b\n    return a\n    \ndef my_LCM_2(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_2(a,b)\n    \ndef my_GCD_3(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return a if b==0 else my_GCD_3(b,a%b)\n    \ndef my_LCM_3(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_3(a,b)\n    \ndef my_GCD_4(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    while b!=0:\n        a,b=b,a%b\n    return a\n    \ndef my_LCM_4(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_4(a,b)\n    \ndef my_GCD_5(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return b if a==0 else my_GCD_5(b%a,a)\n    \ndef my_LCM_5(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_5(a,b)\n    \ndef my_GCD_6(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return a if b==0 else my_GCD_6(b,a%b)\n    \ndef my_LCM_6(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_6(a,b)\n    \ndef my_GCD_7(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    while b!=0:\n        a,b=b,a%b\n    return a\n    \ndef my_LCM_7(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_7(a,b)\n    \ndef my_GCD_8(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return b if a==0 else my_GCD_8(b%a,a)\n    \ndef my_LCM_8(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_8(a,b)\n    \ndef my_GCD_9(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    while b!=0:\n        a,b=b,a%b\n    return a\n    \ndef my_LCM_9(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_9(a,b)\n    \ndef my_GCD_10(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return b if a==0 else my_GCD_10(b%a,a)\n    \ndef my_LCM_10(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_10(a,b)\n    \ndef my_GCD_11(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return b if a==0 else my_GCD_11(b%a,a)\n    \ndef my_LCM_11(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_11(a,b)\n    \ndef my_GCD_12(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return b if a==0 else my_GCD_12(b%a,a)\n    \ndef my_LCM_12(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_12(a,b)\n    \ndef my_GCD_13(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return b if a==0 else my_GCD_13(b%a,a)\n    \ndef my_LCM_13(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_13(a,b)\n    \ndef my_GCD_14(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return b if a==0 else my_GCD_14(b%a,a)\n    \ndef my_LCM_14(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '''\n    return a*b/my_GCD_14(a,b)\n    \ndef my_GCD_15(a,b):\n    '''\n    Write a python function to compute the Greatest Common Divisor of two numbers.\n    '''\n    return b if a==0 else my_GCD_15(b%a,a)\n    \ndef my_LCM_15(a,b):\n    '''\n    Write a python function to compute the Least Common Multiple of two numbers.\n    '"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(n & (1<<l)):\n        return False\n    if(n & (1<<r)):\n        return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        if(i&l)>0:  \n            return 0  \n        i=i&(i-1)  \n    return 1  \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n  \n    while(i>=l):  \n        i"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n < l or n > r:\n        return True\n    for i in range(l,r+1):\n        if n & i == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not any(map(lambda x:x & n in range(l,r+1),range(0,2**n)))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n=int(n)\n    l=int(l)\n    r=int(r)\n    if n == 0:\n        return True\n    else:\n        if n&l==0:\n            return all_Bits_Set_In_The_Given_Range(n&(n-1),l,r)\n        elif n&l!=0:\n            return all_Bits_Set_In_The_Given_Range(n&(n-1),l,r)\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    rearrange_array(arr, n)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, key=lambda x: (x<0, abs(x)))[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert len(arr) >= n\n    \n    result = [0] * len(arr)\n    \n    for i in range(n):\n        result[i] = arr[n-1-i]\n        \n    for i in range(n, len(arr)):\n        result[n+i-1] = arr[i]\n        \n    return result\n    \ndef sort_positive_negative(arr):\n    '''\n    Write a function that takes in an array of integers, rearranges the elements in the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert len(arr) >= 2\n    \n    if arr[0] < 0:\n        return arr[::-1]\n    else:\n        return arr\n    \ndef is_monotonic(arr):\n    '''\n    Write a function that takes in an array of integers, and returns whether or not the array is monotonic. An array is said to be monotonic if the elements in the array are strictly increasing or strictly decreasing.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n            \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n            \n    return True\n    \ndef is_palindrome(arr):\n    '''\n    Write a function that takes in an array of integers, and returns whether or not the array is a palindrome. An array is said to be a palindrome if the elements in the array are the same, or in the reverse order.\n    '''\n    for i in range(len(arr) / 2):\n        if arr[i]!= arr[len(arr)-i-1]:\n            return False\n    return True\n    \ndef is_power_of_two(num):\n    '''\n    Write a function that takes in an integer, and returns a boolean representing whether or not the integer is a power of two.\n    '''\n    return num!= 0 and num & (num-1) == 0\n    \ndef is_power_of_three(num):\n    '''\n    Write a function that takes in an integer, and returns a boolean representing whether or not the integer is a power of three.\n    '''\n    return num!= 0 and num & (num-1) == 0 and num % 3 == 0\n    \ndef is_power_of_four(num):\n    '''\n    Write a function that takes in an integer, and returns a boolean representing whether or not the integer is a power of four.\n    '''\n    return num!= 0 and num & (num-1) == 0 and num % 4 == 0\n    \ndef is_perfect_square(num):\n    '''\n    Write a function that takes in an integer, and returns a boolean representing whether or not the integer is a perfect square.\n    '''\n    return num!= 0 and num ** 0.5 == int(num ** 0.5)\n    \ndef is_perfect_square_root(num):\n    '''\n    Write a function that takes in an integer, and returns a boolean representing whether or not the integer is a perfect square root.\n    '''\n    return num!= 0 and (num ** 0.5) % 1 == 0\n    \ndef is_pow(base, exponent):\n    '''\n    Write a function that takes in two integers, base and exponent, and returns a boolean representing whether or not the exponent is equal to the power of the base.\n    '''\n    return (base ** exponent) == base\n    \ndef is_pow_div(base, exponent):\n    '''\n    Write a function that takes in two integers, base and exponent, and returns a boolean representing whether or not the exponent is equal to the power of the base, modulo some number (also called a modulus).\n    '''\n    return (base ** exponent) % mod == base\n    \ndef is_pow_mod(base, exponent, mod):\n    '''\n    Write a function that takes in three integers, base, exponent, and mod, and returns a boolean representing whether or not the exponent is equal to the power of the base, modulo mod.\n    '''\n    return (base ** exponent) % mod == base\n    \ndef is_prime(num):\n    '''\n    Write a function that takes in an integer, and returns a boolean representing whether or not the integer is a prime number.\n    '''\n    return is_prime_helper(num, 2)\n    \ndef is_prime_helper(num, i):\n    if i > num / 2:\n        return True\n    \n    return num % i!= 0\n    \ndef is_prime_helper2(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n        \n    return is_prime_helper(num, i+1)\n    \ndef is_prime_helper3(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper2(num, i+1)\n    \ndef is_prime_helper4(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper3(num, i+1)\n    \ndef is_prime_helper5(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper4(num, i+1)\n    \ndef is_prime_helper6(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper5(num, i+1)\n    \ndef is_prime_helper7(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper6(num, i+1)\n    \ndef is_prime_helper8(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper7(num, i+1)\n    \ndef is_prime_helper9(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper8(num, i+1)\n    \ndef is_prime_helper10(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper9(num, i+1)\n    \ndef is_prime_helper11(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper10(num, i+1)\n    \ndef is_prime_helper12(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper11(num, i+1)\n    \ndef is_prime_helper13(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper12(num, i+1)\n    \ndef is_prime_helper14(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper13(num, i+1)\n    \ndef is_prime_helper15(num, i):\n    if i > num / 2:\n        return True\n    \n    if num % i == 0:\n        return False\n    \n    return is_prime_helper14(num, i"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    new_arr = []\n    \n    for i in range(n):\n        if arr[i] > 0:\n            new_arr.append(arr[i])\n    \n    for i in range(n, len(arr)):\n        new_arr.append(arr[i])\n    \n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n    for i in range(n, len(arr)):\n        new_arr.append(arr[i])\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #sort in reverse order\n    arr.sort(reverse=True)\n    #pop first n elements\n    result = arr[:n]\n    #arr = arr[n:]\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = []\n    count = 0\n    for i in arr:\n        if i > 0:\n            temp.append(i)\n        elif i < 0:\n            if count < n:\n                temp.append(i)\n                count += 1\n    return temp\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr.pop(i)\n            arr.insert(0, arr[i])\n            i += 1\n        i += 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    res = \"\"\n    for i in str1:\n        if i!= \" \":\n            res += i\n        else:\n            res += char\n    return res\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            result += char\n        else:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.strip()\n    str2=str1.replace(' ',char)\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\",1)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1=='':\n        return ''\n    else:\n        if str1[0]==' ':\n            return char+replace_blank(str1[1:],char)\n        else:\n            return str1[0]+replace_blank(str1[1:],char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",char)\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for index, char in enumerate(str1):\n        if char == \" \":\n            str1 = str1[0:index] + char + str1[index+1:len(str1)]\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if not list1:\n        return []\n    if len(list1)<n:\n        return list1\n    pq=[]\n    for i in list1:\n        if len(pq)<n:\n            heapq.heappush(pq,i)\n        else:\n            if i>pq[0]:\n                heapq.heapreplace(pq,i)\n    return list(pq)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq._heapify_max(list1)\n    return heapq._heappop_max(list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    temp = []\n    for i in range(n):\n        temp.append(list1[i])\n    heapq.heapify(temp)\n    for i in range(n,len(list1)):\n        if list1[i] > temp[0]:\n            heapq.heappop(temp)\n            heapq.heappush(temp,list1[i])\n    return temp\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=list(list1)\n    return heapq.nlargest(n,list1)\ndef smal_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1=list(list1)\n    return heapq.nsmallest(n,list1)\ndef even(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list of only the even numbers from the list.\n    '''\n    list1=list(list1)\n    return [x for x in list1 if x%2==0]\ndef odd(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list of only the odd numbers from the list.\n    '''\n    list1=list(list1)\n    return [x for x in list1 if x%2!=0]\ndef sum_odd(list1,n):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the odd numbers in the list.\n    '''\n    list1=list(list1)\n    return sum(odd(list1))\ndef sum_even(list1,n):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the even numbers in the list.\n    '''\n    list1=list(list1)\n    return sum(even(list1))\ndef has_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns True if the list has duplicate items and False otherwise.\n    '''\n    list1=list(list1)\n    return len(list1)>len(set(list1))\ndef same_first_last(list1):\n    '''\n    Write a function that takes in a list of strings and returns True if the list has the same first and last items and False otherwise.\n    '''\n    list1=list(list1)\n    return list1[0]==list1[-1]\ndef has_adjacent_duplicates(list1):\n    '''\n    Write a function that takes in a list of strings and returns True if the list has any two adjacent items that are the same and False otherwise.\n    '''\n    list1=list(list1)\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            return True\n    return False\ndef has_consecutive_duplicates(list1):\n    '''\n    Write a function that takes in a list of strings and returns True if the list has any two consecutive items that are the same and False otherwise.\n    '''\n    list1=list(list1)\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            if i!=len(list1)-2:\n                return True\n    return False\ndef has_palindrome(list1):\n    '''\n    Write a function that takes in a list of strings and returns True if the list has any two strings that are palindromes of each other and False otherwise.\n    '''\n    list1=list(list1)\n    for i in range(len(list1)-1):\n        if list1[i]==list1[-1-i]:\n            return True\n    return False\ndef average_word_length(list1):\n    '''\n    Write a function that takes in a list of strings and returns the average length of the strings in the list.\n    '''\n    list1=list(list1)\n    return sum(len(list1[i]) for i in range(len(list1)))/len(list1)\ndef palindrome(list1):\n    '''\n    Write a function that takes in a list of strings and returns a list of only the palindrome strings in the list.\n    '''\n    list1=list(list1)\n    return [x for x in list1 if x==x[::-1]]\ndef rotate(list1):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the rotations of the string.\n    '''\n    list1=list(list1)\n    return [list1[i:]+list1[:i] for i in range(len(list1))]\ndef rotate_with_duplicates(list1):\n    '''\n    Write a function that takes in a list of strings and returns a list of all the rotations of the string, but each rotation has any number of duplicates.\n    '''\n    list1=list(list1)\n    return [x+x for x in list1]+[x+x for x in list1]\ndef smallest_larg(list1,n):\n    '''\n    Write a function that takes in a list of integers and returns a list of the smallest n integers from the list.\n    '''\n    list1=list(list1)\n    return sorted(list1)[:n]\ndef largest_small(list1,n):\n    '''\n    Write a function that takes in a list of integers and returns a list of the largest n integers from the list.\n    '''\n    list1=list(list1)\n    return sorted(list1)[-n:]\ndef has_duplicates_with_swap(list1):\n    '''\n    Write a function that takes in a list of strings and returns True if the list has any two adjacent items that are the same and False otherwise.\n    '''\n    list1=list(list1)\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            list1[i],list1[i+1]=list1[i+1],list1[i]\n            return True\n    return False\ndef has_palindrome_permutation(list1):\n    '''\n    Write a function that takes in a list of strings and returns True if the list has any two strings that are permutations of each other and False otherwise.\n    '''\n    list1=list(list1)\n    list1.sort()\n    for i in range(len(list1)-1):\n        if list1[i]==list1[-1-i]:\n            return True\n    return False\ndef list_swap(list1):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the first and last elements are swapped and the rest of the list is unchanged.\n    '''\n    list1=list(list1)\n    list1[0],list1[-1]=list1[-1],list1[0]\n    return list1\ndef swap_without_using_list(list1):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the first and last elements are swapped but the rest of the list is unchanged.\n    '''\n    list1=list(list1)\n    x=list1[0]\n    list1[0]=list1[-1]\n    list1[-1]=x\n    return list1\ndef list_swap_with_reverse(list1):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the first and last elements are swapped and the rest of the list is unchanged.\n    '''\n    list1=list(list1)\n    x=list1[0]\n    list1[0]=list1[-1]\n    list1[-1]=x\n    return list1\ndef swap_alternate(list1):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the first and last elements are swapped and the rest of the list is unchanged.\n    '''\n    list1=list(list1)\n    return list1[-1:]+list1[1:-1]+list1[:1]\ndef two_sum(list1,k):\n    '''\n    Write a function that takes in a list of integers and a number k and returns a list of all the pairs of integers from the list that add up to k.\n    '''\n    list1=list(list1)\n    return [(list1[i],list1[j]) for i in range(len(list1)) for j in range(i+1,len(list1)) if list1["
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[0:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\ndef smal_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = heapq.nlargest(n, list1)\n    return a\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        print \"Cannot return more than elements present in the list\"\n    else:\n        list2 = []\n        for i in range(n):\n            list2.append(list1[i])\n        list1.sort()\n        list2.reverse()\n        return list2\n    \n    \ndef larg_nnelem(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if n>len(list1):\n        print \"Cannot return more than elements present in the list\"\n    else:\n        list2 = []\n        for i in range(n):\n            list2.append(list1[i])\n        list1.sort()\n        return list2\n        \n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #return [heapq.nlargest(n, list1)[-1]]\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14159265359\n    area = (((pi)**2)*r*h)/3\n    print \"The lateral surface area of the cylinder is:\", area\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    return 2*pi*r*(r+h)\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pi = 3.141592653589793\n    return 4*pi*r**2\n    \ndef internal_cylinder(r,h):\n    '''\n    Write a function to find the internal surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    return 2*pi*r*(r+h)\n    \ndef internal_sphere(r):\n    '''\n    Write a function to find the internal surface area of a sphere.\n    '''\n    pi = 3.141592653589793\n    return 4*pi*r**2\n    \ndef surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    return 2*pi*r*(r+h)+2*pi*r*h\n    \ndef volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = 3.141592653589793\n    return pi*r**2*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.141592653589793\n    return 4/3*pi*r**3\n    \ndef volume_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.141592653589793\n    return 4*pi*r**3/3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = 3.141592653589793\n    return pi*r**2*h\n    \ndef volume_spheroid(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid2(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid3(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid4(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid5(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid6(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid7(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid8(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid9(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid10(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid11(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid12(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid13(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid14(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid15(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid16(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid17(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid18(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid19(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid20(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid21(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid22(r1,r2,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    pi = 3.141592653589793\n    return pi*r1*r2*h/3\n    \ndef volume_spheroid23(r1,r2,h):\n    '''\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14\n    d=2*pi*r\n    a=pi*r**2\n    return d*h-a\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r,h=float(r),float(h)\n    return 2*3.14*(r**2+r*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print 'The lateral surface area of a cylinder with',r, 'radius and',h, 'height is:',(2*pi*r*h)\n    return\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 3.14 * r**2 + 2 * 3.14 * r * h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    s = r**2*pi\n    s += r*h*2\n    s += r*h*pi\n    s += h*pi\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14159\n    return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    return lateral\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralsuface_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralvolume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralvolume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralvolume_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralvolume_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralvolume_sphere_volume(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    return lateral\n    \ndef lateralarea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralarea_sphere_volume(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralarea_sphere_volume(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralarea_sphere_volume(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralarea_sphere_volume(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralarea_sphere_volume(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralarea_sphere_volume(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    lateral = 2*pi*r*(r+h)\n    volume = (1/3)*pi*r**2*h\n    return lateral,volume\n    \ndef lateralarea_sphere_volume(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    r = float(r)\n    lateral = 4*pi*r**2\n    return lateral\n    \ndef lateralarea_cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.1"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_bin = bin(n)[2:] #binary conversion\n    n_bin_list = [int(i) for i in list(n_bin)] #binary conversion\n    for i in range(len(n_bin_list)):\n        if n_bin_list[i] == 1:\n            n_bin_list[i] = 0\n        else:\n            n_bin_list[i] = 1\n    return n_bin_list\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Function to set all even bits of n\n    return n | (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # generate a list of bits set in the number\n    bit_list = list(bin(n)[2:]) \n    # iterate through the list of bits\n    for i, bit in enumerate(bit_list): \n        # if the bit is 0, flip it to 1\n        if bit == '0': \n            bit_list[i] = '1'\n        else: # if the bit is 1, flip it to 0\n            bit_list[i] = '0'\n    # convert the list of bits to an integer\n    n = int(''.join(bit_list), 2) \n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)\n    \ndef unset_even_bit_number(n): \n    '''\n    Write a python function to unset all even bits of a given number.\n    '''\n    return n ^ (n-1)\n    \ndef is_power_of_two(n): \n    '''\n    Write a python function to check if a given number is a power of two or not.\n    '''\n    return not n & (n-1)\n    \ndef get_perfect_power(n): \n    '''\n    Write a python function to check if a given number is perfect power or not.\n    '''\n    \ndef is_perfect_power(n): \n    '''\n    Write a python function to check if a given number is perfect power or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_power_number(n): \n    '''\n    Write a python function to check if a given number is perfect power or not.\n    '''\n    return not n & (n-1)\n    \ndef is_power_of_two_number(n): \n    '''\n    Write a python function to check if a given number is power of two or not.\n    '''\n    return not n & (n-1)\n    \ndef get_perfect_power_number(n): \n    '''\n    Write a python function to check if a given number is perfect power or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef get_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef get_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n    '''\n    return not n & (n-1)\n    \ndef is_perfect_square_number(n): \n    '''\n    Write a python function to check if a given number is perfect square or not.\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(bin(n).replace('0b',''),2)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 1\n    return even_bit_set_number(n >> 1) << 1 | 1 if n & 1 else even_bit_set_number(n >> 1)\n    \ndef even_bit_set_number_with_or(n):\n    '''\n    Write a python function to set all even bits of a given number using OR operation\n    '''\n    if n == 0:\n        return 0\n    return n | n >> 2 | n >> 4 | n >> 6 | n >> 8 | n >> 10 | n >> 12 | n >> 14\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary_repr = \"{0:b}\".format(n)\n    even_bits = binary_repr[::2]\n    return int(even_bits,2)\n    "
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    return (n & 0x5555555555555555) + even_bit_set_number(n >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)\n    n = n[2:]\n    n = list(n)\n    for i in range(len(n)):\n        if n[i] == '1':\n            n[i] = '0'\n        elif n[i] == '0':\n            n[i] = '1'\n    n = ''.join(n)\n    return int(n,2)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    from collections import defaultdict\n    #test_list = [('a',1), ('b', 2), ('a', 3), ('b', 1)]\n    new_dict = {}\n    for item in test_list:\n        if new_dict.get(item, 0)!= 0:\n            new_dict[item] += 1\n        else:\n            new_dict[item] = 1\n    return new_dict\n    \n    \n    \ndef check_occurences2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    from collections import defaultdict\n    #test_list = [('a',1), ('b', 2), ('a', 3), ('b', 1)]\n    new_dict = defaultdict(int)\n    for item in test_list:\n        new_dict[item] += 1\n    return new_dict\n    \ndef make_word_list(in_file):\n    '''\n    Reads the contents of the file, line by line, and appends the words to a list of tuples. Each tuple is a word and its associated frequency.\n    '''\n    from collections import defaultdict\n    with open(in_file) as f:\n        word_list = []\n        for line in f:\n            words = line.split()\n            for word in words:\n                word_list.append((word.strip(), 1))\n    return word_list\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    occurences_dict = dict(occurences)\n    return occurences_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        test_dict[item] = test_dict.get(item,0) +1\n    return test_dict\n    \ndef aggregate_values(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        test_dict[item] = test_dict.get(item,0) +1\n    return test_dict.values()\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #The commented code below is the brute force solution\n    #total_occurences = {}\n    #for each_tuple in test_list:\n        #if each_tuple in total_occurences:\n            #total_occurences[each_tuple] += 1\n        #else:\n            #total_occurences[each_tuple] = 1\n    #return total_occurences\n    \n    \n    #The code below is a faster and more elegant solution\n    occurences = Counter(test_list)\n    return occurences\n    \ndef test_check_occurences():\n    assert check_occurences([(1,2), (1,3), (2,2)]) == {(1,2):2, (2,2):2, (1,3):1}\n    assert check_occurences([(1,2), (1,3), (2,2)]) == {(1,2):2, (1,3):1}\n    assert check_occurences([(1,2), (1,3), (2,2), (2,3), (3,4), (3,5), (3,6)]) == {(1,2):2, (1,3):3, (2,2):2, (2,3):2, (3,4):1, (3,5):1, (3,6):1}\n    assert check_occurences([(1,2), (1,2), (1,3), (2,2), (2,3), (3,4), (3,5), (3,6)]) == {(1,2):2, (1,3):1}\n    assert check_occurences
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for tup in test_list:\n        if tup in dictionary:\n            dictionary[tup] += 1\n        else:\n            dictionary[tup] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    print(d)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in test_list:\n        if i not in test_dict:\n            test_dict[i] = 1\n        else:\n            test_dict[i] += 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple in occurence_dict:\n            occurence_dict[tuple] += 1\n        else:\n            occurence_dict[tuple] = 1\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # print(test_list)\n    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        # the count of strings starting with each character\n        n = len(str)\n        map_ = [0] * n\n        for i in xrange(n):\n            map_[i] = 1\n            for j in xrange(i):\n                if str[j] == str[i]:\n                    map_[i] += map_[j]\n        return map_[n-1]\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    d = {}\n    total_substrs = 0\n    length = len(str)\n    for i in range(length):\n        for j in range(i,length):\n            substr = str[i:j+1]\n            if substr in d:\n                total_substrs += d[substr]\n            else:\n                d[substr] = 1\n    return total_substrs\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1].count(' ') <= 1:\n                result += 1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([x for x in re.split('(?=[A-Z][a-z])', str) if len(x) > 0])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if len(str[i:j])>0:\n                count=count+1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([i for i in range(len(str)) if str[i]!=''])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    n = len(str)\n    \n    if n == 0:\n        return 0\n    \n    list_of_substrings = []\n    \n    for i in range(n):\n        for j in range(i, n):\n            list_of_substrings.append(str[i:j+1])\n    \n    return len(list_of_substrings)\n    \n    \ndef number_of_substrings_recursive(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    n = len(str)\n    \n    if n == 0:\n        return 0\n    \n    return number_of_substrings_recursive(str[1:]) + number_of_substrings_recursive(str[0:n-1]) + 1\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    res = 0 \n    for i in range(len(str)): \n        for j in range(i,len(str)): \n            if str[i:j+1]!= \"\": \n                res += 1\n    return res \n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i]!='':\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 2:\n        return 1\n    if m < n:\n        return 0\n    return get_total_number_of_sequences(m - 2, n) + get_total_number_of_sequences(m - 1, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # I couldn't get this problem to finish, but I think the concept is close enough for the purpose of this problem\n    # if n == 0:\n    #     return 1\n    # elif m == 0:\n    #     return 0\n    # else:\n    #     return sum(get_total_number_of_sequences(m, n - 1), get_total_number_of_sequences(m - n, n))\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - n, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n    elif m == n:\n        return 1\n    else:\n        return get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    n_1 = n - 1\n    if m <= 0 or n <= 0:\n        return 0\n    if m == 1:\n        return 1\n    if m == 2:\n        return n_1 + 1\n    if m > 2:\n        return get_total_number_of_sequences(m - 1,n) + get_total_number_of_sequences(m - 2, n_1)\n    \nprint(get_total_number_of_sequences(20, 4))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0:\n        return 0\n    else:\n        return get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m-1,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (m - 1) * n\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #This problem is the same as the previous, but I am going to add a case of a two-digit number that is greater than 10.\n    if m == 1:\n        return n\n    if m == 2:\n        return n*n\n    if m == 3:\n        return (n*(n-1)*(n-2))/6\n    if m == 4:\n        return ((n*(n-1)*(n-2))/6)*4\n    if m == 5:\n        return ((n*(n-1)*(n-2))/6)*6\n    if m == 6:\n        return ((n*(n-1)*(n-2))/6)*8\n    if m == 7:\n        return ((n*(n-1)*(n-2))/6)*10\n    if m == 8:\n        return ((n*(n-1)*(n-2))/6)*12\n    if m == 9:\n        return ((n*(n-1)*(n-2))/6)*14\n    if m == 10:\n        return ((n*(n-1)*(n-2))/6)*16\n    if m == 11:\n        return ((n*(n-1)*(n-2))/6)*18\n    if m == 12:\n        return ((n*(n-1)*(n-2))/6)*20\n    if m == 13:\n        return ((n*(n-1)*(n-2))/6)*22\n    if m == 14:\n        return ((n*(n-1)*(n-2))/6)*24\n    if m == 15:\n        return ((n*(n-1)*(n-2))/6)*26\n    if m == 16:\n        return ((n*(n-1)*(n-2))/6)*28\n    if m == 17:\n        return ((n*(n-1)*(n-2))/6)*30\n    if m == 18:\n        return ((n*(n-1)*(n-2))/6)*32\n    if m == 19:\n        return ((n*(n-1)*(n-2))/6)*34\n    if m == 20:\n        return ((n*(n-1)*(n-2))/6)*36\n    if m == 21:\n        return ((n*(n-1)*(n-2))/6)*38\n    if m == 22:\n        return ((n*(n-1)*(n-2))/6)*40\n    if m == 23:\n        return ((n*(n-1)*(n-2))/6)*42\n    if m == 24:\n        return ((n*(n-1)*(n-2))/6)*44\n    if m == 25:\n        return ((n*(n-1)*(n-2))/6)*46\n    if m == 26:\n        return ((n*(n-1)*(n-2))/6)*48\n    if m == 27:\n        return ((n*(n-1)*(n-2))/6)*50\n    if m == 28:\n        return ((n*(n-1)*(n-2))/6)*52\n    if m == 29:\n        return ((n*(n-1)*(n-2))/6)*54\n    if m == 30:\n        return ((n*(n-1)*(n-2))/6)*56\n    if m == 31:\n        return ((n*(n-1)*(n-2))/6)*58\n    if m == 32:\n        return ((n*(n-1)*(n-2))/6)*60\n    if m == 33:\n        return ((n*(n-1)*(n-2))/6)*62\n    if m == 34:\n        return ((n*(n-1)*(n-2))/6)*64\n    if m == 35:\n        return ((n*(n-1)*(n-2))/6)*66\n    if m == 36:\n        return ((n*(n-1)*(n-2))/6)*68\n    if m == 37:\n        return ((n*(n-1)*(n-2))/6)*70\n    if m == 38:\n        return ((n*(n-1)*(n-2))/6)*72\n    if m == 39:\n        return ((n*(n-1)*(n-2))/6)*74\n    if m == 40:\n        return ((n*(n-1)*(n-2))/6)*76\n    if m == 41:\n        return ((n*(n-1)*(n-2))/6)*78\n    if m == 42:\n        return ((n*(n-1)*(n-2))/6)*80\n    if m == 43:\n        return ((n*(n-1)*(n-2))/6)*82\n    if m == 44:\n        return ((n*(n-1)*(n-2))/6)*84\n    if m == 45:\n        return ((n*(n-1)*(n-2))/6)*86\n    if m == 46:\n        return ((n*(n-1)*(n-2))/6)*88\n    if m == 47:\n        return ((n*(n-1)*(n-2))/6)*90\n    if m == 48:\n        return ((n*(n-1)*(n-2))/6)*92\n    if m == 49:\n        return ((n*(n-1)*(n-2))/6)*94\n    if m == 50:\n        return ((n*(n-1)*(n-2))/6)*96\n    if m == 51:\n        return ((n*(n-1)*(n-2))/6)*98\n    if m == 52:\n        return ((n*(n-1)*(n-2))/6)*100\n    if m == 53:\n        return ((n*(n-1)*(n-2))/6)*102\n    if m == 54:\n        return ((n*(n-1)*(n-2))/6)*104\n    if m == 55:\n        return ((n*(n-1)*(n-2))/6)*106\n    if m == 56:\n        return ((n*(n-1)*(n-2))/6)*108\n    if m == 57:\n        return ((n*(n-1)*(n-2))/6)*110\n    if m == 58:\n        return ((n*(n-1)*(n-2))/6)*112\n    if m == 59:\n        return ((n*(n-1)*(n-2))/6)*114\n    if m == 60:\n        return ((n*(n-1)*(n-2))/6)*116\n    if m == 61:\n        return ((n*(n-1)*(n-2))/6)*118\n    if m == 62:\n        return ((n*(n-1)*(n-2))/6)*120\n    if m == 63:\n        return ((n*(n-1)*(n-2))/6)*122\n    if m == 64:\n        return ((n*(n-1)*(n-2))/6)*124\n    if m == 65:\n        return ((n*(n-1)*(n-2))/6)*126\n    if m == 66:\n        return ((n*(n-1)*(n-2))/6)*128\n    if m == 67:\n        return ((n*(n-1)*(n-2))/6)*130\n    if m == 68:\n        return ((n*(n-1)*(n-2))/6)*132\n    if m == 69:\n        return ((n*(n-1)*(n-2))/6)*134\n    if m == 70:\n        return ((n*(n-1)*(n-2))/6)*136\n    if m == 71:\n        return ((n*(n-1)*(n-2))/6)*138\n    if m == 72:\n        return ((n*(n-1)*(n-2))/6)*140\n    if m == 73:\n        return ((n*(n-1)*(n-2))/6)*142"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return n\n    if m == 1:\n        return 1\n    return (get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m,n-1))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 1:\n        return 0\n    elif n < 2:\n        return 1\n    elif m < 2*n:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n    else:\n        return get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\nprint(replace_list([1, 2, 3, 4],['a', 'b', 'c', 'd']))\nprint(replace_list([1, 2, 3, 4],['a', 'b', 'c']))\nprint(replace_list([1, 2, 3, 4],['a', 'b', 'c', 'd', 'e']))\nprint(replace_list([1, 2, 3, 4],['a', 'b', 'c', 'd', 'e', 'f']))\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    i = 0\n    while i < len(list1)-1:\n        list1[i] = list1[i+1]\n        i = i + 1\n    list1[-1] = list2[0]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) <= len(list2):\n        for i in range(0,len(list2)):\n            list1[-1] = list2[i]\n    else:\n        for i in range(0,len(list1)):\n            list1[-1] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) <= len(list2):\n        list1[len(list1)-1] = list2\n    else:\n        list2[len(list2)-1] = list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError(\"list1 is smaller than list2\")\n    return [list1[i] if i == len(list1) - 1 else list2[i] for i in range(len(list1))]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) <= len(list2):\n        for i in range(len(list1)):\n            list1[i] = list1[i]\n        list1[-1] = list2\n        return list1\n    else:\n        for i in range(len(list2)):\n            list1[i] = list1[i]\n        list1[-1] = list2\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1]+list2\n    "
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    d = {i:str1.count(i) for i in str1}\n    return d\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for c in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for c in str1:\n        char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_count=0\n    for i in range(len(str1)):\n        total_count+=1\n    return total_count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if(str1[i]!=' '):\n            count=count+1\n    return count\ndef main():\n    str1=input('enter a string:')\n    print(count_charac(str1))\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))) \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    while True:\n        x += 1\n        if x**2 > N:\n            break\n        if is_Perfect_Square(x):\n            return x\n    return None\ndef is_Perfect_Square(N):\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    sqrt = int(math.sqrt(N))\n    if sqrt**2 == N:\n        return True\n    else:\n        return False\ndef get_Digits(N):\n    '''\n    Write a python function to find the total number of digits in a number.\n    '''\n    count = 0\n    while N > 0:\n        count += 1\n        N = N // 10\n    return count\ndef get_Last_Digits(N, D):\n    '''\n    Write a python function to find the last D digits of a number.\n    '''\n    return int(str(N)[-D:])\ndef modInverse(a, m):\n    '''\n    Write a python function to find the modular inverse of a and m.\n    '''\n    a = a % m\n    for x in range(1, m):\n        if (a * x) % m == 1:\n            return x\n    return None\ndef get_Factors(N):\n    '''\n    Write a python function to find the factors of a number.\n    '''\n    factors = []\n    x = 2\n    while N > 1:\n        if N % x == 0:\n            factors.append(x)\n            N /= x\n        else:\n            x += 1\n    return factors\ndef get_Factors_List(N):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    factors = []\n    x = 2\n    while x <= N:\n        if N % x == 0:\n            factors.append(x)\n            N /= x\n        else:\n            x += 1\n    return factors\ndef get_Factors_Sorted(N):\n    '''\n    Write a python function to find the prime factors of a number, in ascending order.\n    '''\n    factors = []\n    x = 2\n    while x <= N:\n        if N % x == 0:\n            factors.append(x)\n            N /= x\n        else:\n            x += 1\n    return sorted(factors)\ndef get_Factors_Sorted_Desc(N):\n    '''\n    Write a python function to find the prime factors of a number, in descending order.\n    '''\n    factors = []\n    x = 2\n    while x <= N:\n        if N % x == 0:\n            factors.append(x)\n            N /= x\n        else:\n            x += 1\n    return sorted(factors, reverse=True)\ndef is_Prime(N):\n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    if N < 2:\n        return False\n    x = 2\n    while x <= math.sqrt(N):\n        if N % x == 0:\n            return False\n        x += 1\n    return True\ndef is_Prime_Fermat(N):\n    '''\n    Write a python function to check if a number is a prime number or not, using Fermat's little theorem.\n    '''\n    if N < 2:\n        return False\n    a = 2\n    while a <= math.sqrt(N):\n        if N % a == 0:\n            return False\n        a += 1\n    return True\ndef get_Prime_Factors(N):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    factors = []\n    x = 2\n    while x <= math.sqrt(N):\n        if N % x == 0:\n            factors.append(x)\n            N /= x\n        else:\n            x += 1\n    return factors\ndef is_Mersenne_Number(N):\n    '''\n    Write a python function to check if a number is a Mersenne number or not.\n    '''\n    if N < 2:\n        return False\n    x = 2\n    while x < math.exp(1):\n        if x**2 > N:\n            break\n        if x**2 == N:\n            return True\n        x += 1\n    return False\ndef is_Abundant_Number(N):\n    '''\n    Write a python function to check if a number is an abundant number or not.\n    '''\n    if N < 12:\n        return False\n    x = 1\n    while x < math.sqrt(N):\n        if N % x == 0:\n            return True\n        x += 1\n    return False\ndef get_Abundant_Numbers(N):\n    '''\n    Write a python function to find all the abundant numbers less than a given number.\n    '''\n    abundant = []\n    x = 1\n    while x <= N:\n        if is_Abundant_Number(x):\n            abundant.append(x)\n        x += 1\n    return abundant\ndef get_Abundant_Abundant_Numbers(N):\n    '''\n    Write a python function to find all the abundant abundant numbers less than a given number.\n    '''\n    abundant = []\n    x = 1\n    while x <= N:\n        if is_Abundant_Number(x) and is_Abundant_Number(x):\n            abundant.append(x)\n        x += 1\n    return abundant\ndef is_Perfect_Number(N):\n    '''\n    Write a python function to check if a number is a perfect number or not.\n    '''\n    if N < 6:\n        return False\n    x = 1\n    while x < math.sqrt(N):\n        if N % x == 0:\n            if x + 1 + N // x == N:\n                return True\n            else:\n                return False\n        x += 1\n    return True\ndef is_Deficient_Number(N):\n    '''\n    Write a python function to check if a number is a deficient number or not.\n    '''\n    if N < 6:\n        return False\n    x = 1\n    while x < math.sqrt(N):\n        if N % x == 0:\n            if x + 1 < N // x:\n                return True\n            else:\n                return False\n        x += 1\n    return False\ndef get_Perfect_Numbers(N):\n    '''\n    Write a python function to find all the perfect numbers less than a given number.\n    '''\n    perfect = []\n    x = 1\n    while x < N:\n        if is_Perfect_Number(x):\n            perfect.append(x)\n        x += 1\n    return perfect\ndef get_Deficient_Numbers(N):\n    '''\n    Write a python function to find all the deficient numbers less than a given number.\n    '''\n    deficient = []\n    x = 1\n    while x < N:\n        if is_Deficient_Number(x):\n            deficient.append(x)\n        x += 1\n    return deficient\ndef get_Deficient_Abundant_Numbers(N):\n    '''\n    Write a python function to find all the deficient deficient numbers less than a given number.\n    '''\n    deficient = get_Deficient_Numbers(N)\n    abundant = get_Abundant_Numbers(N)\n    final = []\n    for x in deficient:\n        if x in abundant:\n            final.append(x)\n    return final\ndef get_Deficient_Abundant_Abundant_Numbers(N):\n    '''\n    Write a python function to find all the deficient deficient numbers less than a given number.\n    '''\n    deficient = get_Deficient_Abundant_Numbers(N)\n    abundant = get_Abundant_Abundant_Numbers(N)\n    final = []\n    for x in deficient:\n        if x in abundant:\n            final.append(x)\n    return final\ndef is_Pythagorean_Triple(a, b, c):\n    '''\n    Write a python function to check if a triple of numbers is a pythagorean triple or not.\n    '''\n    return (a**2 + b**2 == c**2)\ndef get_Pythagorean_Triple"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if (root % 1 == 0.0):\n        return (root + 1)**2\n    else:\n        return (root + 1)**2 + 1\ndef break_words(stuff):\n    '''\n    This function will break up words for us.\n    '''\n    return stuff.split(' ')\ndef sort_words(stuff):\n    '''\n    This function will sort the words.\n    '''\n    return sorted(break_words(stuff))\ndef print_first_word(words):\n    '''\n    This function will print the first word after popping it off.\n    '''\n    word = words.pop(0)\n    print word\ndef print_last_word(words):\n    '''\n    This function will print the last word after popping it off.\n    '''\n    word = words.pop(-1)\n    print word\ndef sort_sentence(sentence):\n    '''\n    This function will take in a full sentence and return the sorted words.\n    '''\n    words = break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last(sentence):\n    '''\n    This function will print the first and last words of the sentence.\n    '''\n    words = break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    This function will print the first and last words of the sentence after sorting the words.\n    '''\n    words = sort_sentence(sentence)\n    print_first_word(words)\n    print_last_word(words)\ndef starts_with_vowel(word):\n    '''\n    This function will check if the first letter of the word is a vowel or not.\n    '''\n    if word[0] in 'aeiou':\n        return True\n    else:\n        return False\ndef reverse_string(str):\n    '''\n    This function will reverse a string.\n    '''\n    return str[::-1]\ndef is_palindrome(str):\n    '''\n    This function will check if a string is a palindrome or not.\n    '''\n    if reverse_string(str) == str:\n        return True\n    else:\n        return False\ndef is_anagram(str1, str2):\n    '''\n    This function will check if two strings are anagrams or not.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    return sorted(str1) == sorted(str2)\ndef is_anagram2(str1, str2):\n    '''\n    This function will check if two strings are anagrams or not.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    else:\n        dict1 = {}\n        dict2 = {}\n        for i in str1:\n            if i in dict1.keys():\n                dict1[i] += 1\n            else:\n                dict1[i] = 1\n        for i in str2:\n            if i in dict2.keys():\n                dict2[i] += 1\n            else:\n                dict2[i] = 1\n        if dict1 == dict2:\n            return True\n        else:\n            return False\ndef max_num(nums):\n    '''\n    This function will find the max number of a list of numbers.\n    '''\n    max_num = nums[0]\n    for i in nums:\n        if i > max_num:\n            max_num = i\n    return max_num\ndef sum_nums(nums):\n    '''\n    This function will find the sum of all numbers in a list.\n    '''\n    sum_num = 0\n    for i in nums:\n        sum_num += i\n    return sum_num\ndef sum_nums2(nums):\n    '''\n    This function will find the sum of all numbers in a list.\n    '''\n    return sum(nums)\ndef largest_num(nums):\n    '''\n    This function will find the largest number in a list.\n    '''\n    largest_num = nums[0]\n    for i in nums:\n        if i > largest_num:\n            largest_num = i\n    return largest_num\ndef smallest_num(nums):\n    '''\n    This function will find the smallest number in a list.\n    '''\n    smallest_num = nums[0]\n    for i in nums:\n        if i < smallest_num:\n            smallest_num = i\n    return smallest_num\ndef middle_num(nums):\n    '''\n    This function will find the middle number in a list.\n    '''\n    len_nums = len(nums)\n    return nums[len_nums/2]\ndef chop_sentence(sentence):\n    '''\n    This function will chop a sentence into two parts.\n    '''\n    words = break_words(sentence)\n    return words[0], words[1]\ndef chop_sentence2(sentence):\n    '''\n    This function will chop a sentence into two parts.\n    '''\n    words = break_words(sentence)\n    return words[0:len(words)/2], words[len(words)/2:]\ndef print_in_reverse(str):\n    '''\n    This function will print a string in reverse.\n    '''\n    print str[::-1]\ndef print_backwards(str):\n    '''\n    This function will print a string backwards.\n    '''\n    print str[::-1]\ndef is_abecedarian(str):\n    '''\n    This function will check if a string is abecedarian.\n    '''\n    for i in range(len(str)-1):\n        if str[i] > str[i+1]:\n            return False\n    return True\ndef max_abecedarian(str):\n    '''\n    This function will find the max abecedarian string.\n    '''\n    max_num = 0\n    for i in range(len(str)-1):\n        if str[i] > str[i+1] and str[i] > max_num:\n            max_num = str[i]\n    return max_num\ndef is_prime(num):\n    '''\n    This function will check if a number is prime or not.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\ndef sum_of_primes(n):\n    '''\n    This function will find the sum of all primes from 2 to n.\n    '''\n    sum_num = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum_num += i\n    return sum_num\ndef sum_of_primes2(n):\n    '''\n    This function will find the sum of all primes from 2 to n.\n    '''\n    return sum(i for i in range(2, n+1) if is_prime(i))\ndef count_vowels(str):\n    '''\n    This function will count the number of vowels in a string.\n    '''\n    num_vowels = 0\n    for i in str:\n        if i in 'aeiou':\n            num_vowels += 1\n    return num_vowels\ndef count_consonants(str):\n    '''\n    This function will count the number of consonants in a string.\n    '''\n    num_consonants = 0\n    for i in str:\n        if i in 'bcdfghjklmnpqrstvwxyz':\n            num_consonants += 1\n    return num_consonants\ndef get_permutations(string):\n    '''\n    This function will find all the permutations of a string.\n    '''\n    if len(string) == 1:\n        return [string]\n    else:\n        perm_list = []\n        for i in range"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    for x in range(root, N):\n        if x*x == N:\n            return x*x\n        else:\n            return x*x\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(is_perfect_square(N)):\n        return (N+1)**2\n    else:\n        return (int(math.ceil(math.sqrt(N))))**2\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.ceil(math.sqrt(N)))\n    return x*x\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # import math\n    return math.ceil(math.sqrt(N))**2\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    if(N == 0):\n        return 1\n    k = 0\n    while(1):\n        k+=1\n        N+=k\n        if(math.sqrt(N)%1 == 0):\n            return N\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global max_sum_array\n    \n    max_sum_array = [None] * len(arr)\n    return max_sum_linear(arr)\n    \ndef max_sum_linear(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global max_sum_array\n    \n    # if the array is length 1, return the value\n    if len(arr) == 1: \n        return arr[0]\n    \n    # if the array is length 2, return the max of the two values\n    if len(arr) == 2: \n        return max(arr)\n    \n    # if the array is length 3, return the max of the three values\n    if len(arr) == 3: \n        return max(arr[0], arr[1], arr[2])\n    \n    # if the array is length 4, return the max of the four values\n    if len(arr) == 4: \n        return max(arr[0], arr[1], arr[2], arr[3])\n    \n    # if the array is length 5, return the max of the five values\n    if len(arr) == 5: \n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n    \n    # if the array is length 6, return the max of the six values\n    if len(arr) == 6: \n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    \n    # initialize the max sum array\n    for index in xrange(len(arr)): \n        max_sum_array[index] = [None] * len(arr)\n    \n    # initialize the max sum array\n    for index in xrange(len(arr)): \n        max_sum_array[index][0] = arr[index]\n    \n    # initialize the max sum array\n    for index in xrange(len(arr)): \n        max_sum_array[index][1] = max_sum_array[index - 1][0] + arr[index]\n    \n    # initialize the max sum array\n    for index in xrange(len(arr) - 1): \n        for j in xrange(2, len(arr)): \n            max_sum_array[index][j] = max(max_sum_array[index][j - 1], max_sum_array[index][j - 2] + arr[j])\n    \n    # return the max sum\n    return max_sum_array[len(arr) - 1][len(arr) - 1]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    tmax = arr[0]\n    smax = arr[0]\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            tmax = max(tmax + arr[i], arr[i])\n        smax = max(smax, tmax)\n    return smax\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = 0\n    n = len(arr)\n    i = 0\n    while i < n:\n        start = i\n        end = start\n        while end+1 < n and arr[end+1] > arr[end]:\n            end += 1\n        while end+1 < n and arr[end+1] < arr[end]:\n            end += 1\n        if i!= end:\n            sum = max(sum, sum(arr[i:end+1]))\n        i = end+1\n    return sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    if arr[start] > arr[end]:\n        start = end\n    currSum = arr[start]\n    while start <= end:\n        if arr[start] < arr[end]:\n            currSum += arr[end]\n            end -= 1\n        else:\n            currSum += arr[start]\n            start += 1\n    return currSum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    dp_arr = [0] * len(arr)\n    dp_arr[0] = arr[0]\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        dp_arr[i] = max(dp_arr[i-1], arr[i])\n        max_sum = max(max_sum, dp_arr[i])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    left = [arr[0]]\n    right = [arr[-1]]\n    \n    for i in range(1, len(arr)): \n        if arr[i] > left[-1]: \n            left.append(arr[i])\n        else: \n            left.append(left[-1])\n    \n    for i in reversed(range(0, len(arr)-1)): \n        if arr[i] > right[-1]: \n            right.append(arr[i])\n        else: \n            right.append(right[-1])\n    \n    right.reverse()\n    print right\n    \n    max_sum = left[0] + right[0]\n    \n    for i in range(1, len(left)): \n        max_sum = max(max_sum, left[i]+right[i])\n    \n    return max_sum\n    \nif __name__ == '__main__': \n    arr = [1, 3, 8, 12, 4, 7, 10, 14, 9, 13, 2, 6, 11, 15, 5, 16, 18, 17]\n    print max_sum(arr)\n    \n    arr = [2, 5, 6, 2, 3, 4, 3]\n    print max_sum(arr)\n    \n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print max_sum(arr)"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    min_sum = sum(arr)\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum, min_sum - arr[i])\n        min_sum -= arr[i]\n    return max_sum\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 1\n    max_so_far = arr[0]\n    while i < len(arr):\n        if arr[i] < arr[i-1]:\n            max_so_far = max(max_so_far, arr[i-1] + arr[i])\n        elif arr[i] > arr[i-1]:\n            max_so_far = max(max_so_far, arr[i] + arr[i-1])\n        i += 1\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    #The first element of the array is the max sum\n    #Initialize values\n    start = 0\n    end = len(arr)-1\n    max_sum = arr[start]\n    \n    #Start traversing the array\n    while end > start:\n        \n        #Calculate the sum of the end and start element\n        #If sum is greater than max_sum\n        #Set the max_sum to sum\n        #Set the start to the next element\n        #Set the end to the previous element\n        if arr[start] + arr[end] > max_sum:\n            max_sum = arr[start] + arr[end]\n            start = start + 1\n            end = end - 1\n        \n        #If sum is less than max_sum\n        #Set the max_sum to sum\n        #Set the start to the previous element\n        #Set the end to the next element\n        else:\n            if arr[start] + arr[end] < max_sum:\n                max_sum = arr[start] + arr[end]\n                start = start - 1\n                end = end - 1\n            else:\n                start = start + 1\n                end = end - 1\n                \n    #Return the max_sum\n    return max_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # TODO: Your code here!\n    result = number\n    guess = result/2.0\n    while abs(guess**2.0 - result) > 0.01:\n        guess = result/2.0 + guess\n        result = (guess + result/guess) / 2.0\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx_guess = 1.0\n    # make a guess to start off with\n    guess_number = 0.5 * (approx_guess + number / approx_guess)\n    # we'll keep going until we get within 0.01 of the number\n    while abs(guess_number - number) > 0.01:\n        approx_guess = guess_number\n        guess_number = 0.5 * (approx_guess + number / approx_guess)\n    return approx_guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # YOUR CODE GOES HERE\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    from math import sqrt\n    \n    def sqrt_babylonian(number, iterations):\n        '''\n        Compute the square root of the number using the babylonian method.\n        '''\n        from math import sqrt\n        \n        #initialize the range of iterations\n        x = number\n        \n        #iterate to find the square root\n        for i in range(iterations):\n            x = (x + number / x) / 2\n        \n        #round to the nearest integer\n        return round(x)\n    \n    #use the babylonian method\n    return sqrt_babylonian(number, iterations)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 1\n    epsilon = 0.000001\n    iteration = 0\n    while abs(root**2 - number) > epsilon and iteration < 50:\n        root = (root + number / root) / 2\n        iteration += 1\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Input number must be non-negative')\n    \n    # If the input is a perfect square, return it\n    if number == 0 or number == 1:\n        return number\n    \n    # If the input is greater than 0 but less than 1, return the square root\n    if number > 0 and number < 1:\n        return number ** 0.5\n    \n    # If the input is greater than 1, divide the input by its first divisor\n    # until the result is less than 1\n    if number > 1:\n        divisor = 1\n        while number > divisor * divisor:\n            divisor += 1\n        return babylonian_squareroot(number / divisor)\n    "
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    guess = float(number) / 2.0\n    if guess*guess == number:\n        return guess\n    elif guess*guess > number:\n        return babylonian_squareroot(number - (guess*guess))\n    else:\n        return babylonian_squareroot(number - (guess*guess)) + guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while abs(guess*guess - number) > 0.001:\n        guess = (guess + number/guess)/2.0\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    difference = 1.0\n    tolerance = 0.001\n    denominator = 2.0\n    while difference > tolerance:\n        guess = (numerator/denominator + number/denominator) / 2\n        difference = abs(guess - numerator/denominator)\n        denominator *= 2\n        numerator = number\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    num = number\n    sqrt_val = number\n    tolerance = 0.0000001\n    while True:\n        sqrt_val = (1/2)*(number + (sqrt_val/number))\n        if abs(sqrt_val - number) < tolerance:\n            break\n    return sqrt_val\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    \n    def max(i, j):\n        if i == j:\n            return 1\n        elif i > j:\n            return 0\n        else:\n            if str[i] == str[j]:\n                return 2 + max(i+1, j-1)\n            else:\n                return max(i, j-1)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    maxlen = 0\n    for i in range(len(str)):\n        maxlen = max(maxlen,lpsHelper(str,i,i))\n        maxlen = max(maxlen,lpsHelper(str,i,i+1))\n    return maxlen\ndef lpsHelper(str,start,end):\n    if start > end:\n        return 0\n    if start == end:\n        return 1\n    if (str[start] == str[end]):\n        return 2 + lpsHelper(str,start+1,end-1)\n    else:\n        return max(lpsHelper(str,start,end-1),lpsHelper(str,start+1,end))\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str is None or len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    t = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n): \n        t[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                t[i][j] = 2\n            elif str[i] == str[j]: \n                t[i][j] = 2 + t[i + 1][j - 1]\n            else: \n                t[i][j] = max(t[i][j - 1], t[i + 1][j]);\n    return t[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    arr = [[0 for i in range(n)] for j in range(n)] \n    result = \"\"\n    for i in range(n): \n        arr[i][i] = 1\n        result = str[i]\n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if str[start] == str[end]:\n                if end - start == 1 or arr[start+1][end-1]:\n                    arr[start][end] = 1\n                    if len(result) < end - start + 1:\n                        result = str[start:end+1]\n    return result\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n    result = 0\n    for i in range(n): \n        table[i][i] = 1\n        result = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1):\n            j = i+cl-1\n            if (str[i] == str[j] and cl == 2) or (table[i+1][j-1] and str[i] == str[j]):\n                table[i][j] = 1\n                result = max(result, 2 + table[i+1][j-1])\n    return result\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def isPali(str):\n        return str == str[::-1]\n    result = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if isPali(str[i:j+1]) and len(str[i:j+1])>result:\n                result = len(str[i:j+1])\n    return result\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    table = [[0 for _ in range(len(str))] for _ in range(len(str))]\n    for i in range(len(str)):\n        table[i][i] = 1\n        for j in range(i - 1, -1, -1):\n            if str[i] == str[j] and i - j < 3:\n                table[j][i] = 2\n            elif str[i] == str[j]:\n                table[j][i] = table[j + 1][i - 1] + 2\n            else:\n                table[j][i] = max(table[j][i - 1], table[j + 1][i])\n    return table[0][len(str) - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # base case\n    if len(str) <= 1:\n        return len(str)\n    n = len(str)\n    # dp[i][j] stores the length of the longest palindromic subsequence that ends with str[i-1], str[i], str[j]\n    dp = [[1 for i in range(n)] for j in range(n)]\n    # for each element of the string\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j] and i!= j:\n                dp[i][j] = 2 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # create a table to store results of subproblems \n    table = [[0 for x in range(n)] for x in range(n)] \n    \n    # every string has one palindromic subsequence of length 1, i.e. str \n    for i in range(n): \n        table[i][i] = 1\n    \n    # start from 2nd string, can be used to build palindromic substrings of length 2, so length is 2\n    for l in range(2, n+1): \n        \n        # for each string of length l, there are two substrings of length l - 1, and one substring of length l-2\n        for i in range(n - l + 1): \n            \n            # start at i and j indices\n            j = i + l - 1\n            if str[i] == str[j] and l > 2: \n                # is palindromic substring\n                table[i][j] = 2 + table[i+1][j-1]\n            else: \n                # check if first and last characters are the same\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n                \n    return table[0][n-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 1 else 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # The harmonic sum is the sum of the reciprocals of the integers up to n-1\n    # We can do this recursively\n    # If n = 1, then the recursion will return 0. Otherwise, the return value\n    # of the recursive call is the sum of the reciprocals of the integers up to n-1\n    # Therefore, if we recurse on n-1, then we can easily calculate the sum of the reciprocals of\n    # the integers up to n-1. For the nth term, we can simply calculate the sum of the reciprocals\n    # of the integers up to n-1 divided by n.\n    # So the recursive call will return the sum of the reciprocals of the integers up to n-1\n    # plus the sum of the reciprocals of the integers up to n-1 divided by n\n    # The recursive call will return the sum of the reciprocals of the integers up to n-1\n    # divided by n\n    # If n = 1, the recursive call will return 0\n    # If n = 2, the recursive call will return 1/2\n    # If n = 3, the recursive call will return (1/2 + 1/3)\n    # If n = 4, the recursive call will return (1/2 + 1/3 + 1/4)\n    # If n = 5, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5)\n    # If n = 6, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6)\n    # If n = 7, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7)\n    # If n = 8, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8)\n    # If n = 9, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9)\n    # If n = 10, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10)\n    # If n = 11, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11)\n    # If n = 12, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12)\n    # If n = 13, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13)\n    # If n = 14, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14)\n    # If n = 15, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15)\n    # If n = 16, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16)\n    # If n = 17, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17)\n    # If n = 18, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18)\n    # If n = 19, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19)\n    # If n = 20, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20)\n    # If n = 21, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21)\n    # If n = 22, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22)\n    # If n = 23, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23)\n    # If n = 24, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24)\n    # If n = 25, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25)\n    # If n = 26, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26)\n    # If n = 27, the recursive call will return (1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26 + 1/27)\n    # If n = 28, the recursive call will return (1/2 "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #harmonic sum formula\n    harmonic_sum = 1/float(n)\n    #initialize\n    h = 0\n    #loop through\n    for i in range(2, n+1):\n        h += (1/float(i))\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum(n):\n        return n / 2 + n - 1\n    return harmonic_sum(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n + 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = []\n    for num in set_nums1:\n        if num in set_nums2:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_arr = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            new_arr.append(num1)\n    return new_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for item in array_nums1:\n        if item in array_nums2:\n            result.append(item)\n    return result\n    \ndef intersection_array_2(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    return list(set1.intersection(set2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return sorted(list(set(array_nums1).intersection(set(array_nums2))))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [a for a in array_nums1 if a in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection_array.append(num1)\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_array.append(num)\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res=[]\n    for i in array_nums1:\n        if i in array_nums2:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 is None or len(array_nums1) == 0 or array_nums2 is None or len(array_nums2) == 0:\n        return []\n    array_nums1.sort()\n    array_nums2.sort()\n    index_1 = 0\n    index_2 = 0\n    result = []\n    while index_1 < len(array_nums1) and index_2 < len(array_nums2):\n        if array_nums1[index_1] == array_nums2[index_2]:\n            result.append(array_nums1[index_1])\n            index_1 += 1\n            index_2 += 1\n        elif array_nums1[index_1] > array_nums2[index_2]:\n            index_2 += 1\n        else:\n            index_1 += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1:\n        return []\n    res = []\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    array_len1 = len(array_nums1)\n    array_len2 = len(array_nums2)\n    i,j = 0,0\n    while i<array_len1 and j<array_len2:\n        if array_nums1[i] == array_nums2[j]:\n            res.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i] > array_nums2[j]:\n            j+=1\n        else:\n            i+=1\n    return res\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a,b = tup \n    return (a.count(x),b.count(x))\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tuple(tup).count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    result = 0\n    for x in tup:\n        if x == x:\n            result += 1\n    return result\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #tuple[0](x)\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tuple([x[i] for i in range(len(x)) if x[i] == x]).count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_count = 0\n    for item in tup:\n        if item == x:\n            tup_count += 1\n    return tup_count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    i = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            i += 1\n    return i\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    new_list.insert(0,element)\n    for element in list:\n        new_list.insert(0,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    list.insert(0,element)\n    list.insert(0,element)\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        temp = [element] + list\n        return temp\n    \ndef append_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element at the end of the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    else:\n        temp = list + [element]\n        return temp\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the first occurrence of the element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        if list[0] == element:\n            temp = list[1:]\n            return temp\n        else:\n            temp = list[:]\n            return temp\n    \ndef element_at(list,index):\n    '''\n    Write a function that takes in a list and an index and returns the element at that index in the list.\n    '''\n    if index > len(list):\n        return None\n    else:\n        return list[index]\n    \ndef slice_element(list,start_index,end_index):\n    '''\n    Write a function that takes in a list and two indices and returns a slice of the list from the element at the start index to the element at the end index (the slice excludes the indices), and returns the resulting slice.\n    '''\n    if start_index > len(list) or end_index > len(list):\n        return []\n    else:\n        return list[start_index:end_index]\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a new list with all of the duplicates removed, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        temp = []\n        for item in list:\n            if item not in temp:\n                temp.append(item)\n        return temp\n    \ndef sum_of_list(list):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    total = 0\n    for item in list:\n        total += item\n    return total\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and returns the elements of the list in reverse order, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        return list[::-1]\n    \ndef count_occurrences(list,element):\n    '''\n    Write a function that takes in a list and returns the number of times the element appears in the list.\n    '''\n    count = 0\n    for item in list:\n        if item == element:\n            count += 1\n    return count\n    \ndef find_smallest(list):\n    '''\n    Write a function that takes in a list and returns the index of the smallest element in the list, and returns the index of the smallest element in the list.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        min = list[0]\n        for item in list:\n            if item < min:\n                min = item\n        return list.index(min)\n    \ndef find_largest(list):\n    '''\n    Write a function that takes in a list and returns the index of the largest element in the list, and returns the index of the largest element in the list.\n    '''\n    if len(list) == 0:\n        return None\n    else:\n        max = list[0]\n        for item in list:\n            if item > max:\n                max = item\n        return list.index(max)\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and returns a sorted version of the list, and returns the sorted version of the list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        return sorted(list)\n    \ndef is_sorted(list):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted, and returns False otherwise, and returns the sorted version of the list.\n    '''\n    if len(list) == 1:\n        return True\n    else:\n        if list[0] < list[1]:\n            return is_sorted(list[1:])\n        else:\n            return False\n            \ndef is_anagram(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams, and returns False otherwise, and returns the sorted version of the string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        if sorted(str1) == sorted(str2):\n            return True\n        else:\n            return False\n    \ndef is_palindrome(str):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, and returns False otherwise, and returns the reversed version of the string.\n    '''\n    if len(str) == 0:\n        return True\n    else:\n        if str[0] == str[-1]:\n            return is_palindrome(str[1:-1])\n        else:\n            return False\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n    #return [element]*len(list)\ndef print_list(list):\n    print(list)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newList = []\n    for i in range(len(list)):\n        newList.append(list[i])\n        newList.insert(i,element)\n    return newList\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(0,len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    else:\n        return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in list:\n        new_list.append(i)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)==complex:\n        print('Given number is',numbers)\n        polar=(cmath.polar(numbers))\n        print('{0:.3f} {1:.3f}'.format(polar[0],polar[1]))\n    else:\n        print('Not a complex number')\ndef reverse(numbers):\n    '''\n    Write a python function to reverse a list of integers.\n    '''\n    if type(numbers)==int:\n        print('Given number is',numbers)\n        rev_list=list(reversed(numbers))\n        print('Reversed list is',rev_list)\n    else:\n        print('Not an integer')\ndef fib(n):\n    '''\n    Write a python function to find nth Fibonacci number.\n    '''\n    if type(n)==int:\n        a=0\n        b=1\n        while a<n:\n            a,b=b,a+b\n        print('{0}th fibonacci number is {1}'.format(n,a))\n    else:\n        print('Not an integer')\ndef swap(a,b):\n    '''\n    Write a python function to swap two numbers.\n    '''\n    if type(a)==int and type(b)==int:\n        a,b=b,a\n        print('Swapped a and b is',a,b)\n    else:\n        print('Not integers')\ndef swap_float(a,b):\n    '''\n    Write a python function to swap two numbers and convert them to float.\n    '''\n    if type(a)==int and type(b)==int:\n        a=float(a)\n        b=float(b)\n        a,b=b,a\n        print('Swapped a and b is',a,b)\n    else:\n        print('Not integers')\ndef modulus(a,b):\n    '''\n    Write a python function to return the modulus of two numbers.\n    '''\n    if type(a)==int and type(b)==int:\n        mod=a%b\n        print('Modulus of',a,b,'is',mod)\n    else:\n        print('Not integers')\ndef reverse_string(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if type(string)==str:\n        rev_string=string[::-1]\n        print('Reversed string is',rev_string)\n    else:\n        print('Not a string')\ndef palindrome(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if type(string)==str:\n        if string==string[::-1]:\n            print('Given string is palindrome')\n        else:\n            print('Given string is not palindrome')\n    else:\n        print('Not a string')\ndef factorial(num):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if type(num)==int:\n        if num==0:\n            print('Factorial of',num,'is 1')\n        else:\n            fact=1\n            while num>=1:\n                fact*=num\n                num-=1\n            print('Factorial of',num,'is',fact)\n    else:\n        print('Not an integer')\ndef is_prime(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if type(num)==int:\n        if num>1:\n            if num==2:\n                print('Given number is prime')\n            elif num%2==0:\n                print('Given number is not prime')\n            else:\n                for i in range(3,num,2):\n                    if num%i==0:\n                        print('Given number is not prime')\n                        break\n                else:\n                    print('Given number is prime')\n    else:\n        print('Not an integer')\ndef reverse_complement(string):\n    '''\n    Write a python function to find reverse complement of a given DNA string.\n    '''\n    if type(string)==str:\n        dna_list=list(string)\n        dna_list.reverse()\n        rc_list=list(dna_list)\n        for i in range(0,len(dna_list)):\n            if dna_list[i]=='A':\n                rc_list[i]='T'\n            elif dna_list[i]=='T':\n                rc_list[i]='A'\n            elif dna_list[i]=='C':\n                rc_list[i]='G'\n            else:\n                rc_list[i]='C'\n        rc_string=''.join(rc_list)\n        print('Reversed complement is',rc_string)\n    else:\n        print('Not a string')\ndef is_anagram(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if type(string1)==str and type(string2)==str:\n        string1=list(string1)\n        string2=list(string2)\n        string1.sort()\n        string2.sort()\n        if string1==string2:\n            print('Given strings are anagrams')\n        else:\n            print('Given strings are not anagrams')\n    else:\n        print('Not a string')\ndef is_anagram_2(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if type(string1)==str and type(string2)==str:\n        string1=list(string1)\n        string2=list(string2)\n        if len(string1)==len(string2):\n            string1.sort()\n            string2.sort()\n            if string1==string2:\n                print('Given strings are anagrams')\n            else:\n                print('Given strings are not anagrams')\n        else:\n            print('Not equal length')\n    else:\n        print('Not a string')\ndef inversion(string1,string2):\n    '''\n    Write a python function to count inversion in a given string.\n    '''\n    if type(string1)==str and type(string2)==str:\n        string1=list(string1)\n        string2=list(string2)\n        if len(string1)==len(string2):\n            string1.sort()\n            string2.sort()\n            if string1==string2:\n                print('Given strings are anagrams')\n            else:\n                count=0\n                for i in range(0,len(string1)):\n                    for j in range(i+1,len(string1)):\n                        if string1[i]>string1[j]:\n                            count+=1\n                print('Number of inversions in given string',count)\n        else:\n            print('Not equal length')\n    else:\n        print('Not a string')\ndef is_palindrome_permutation(string1,string2):\n    '''\n    Write a python function to check whether two strings are permutation of each other or not.\n    '''\n    if type(string1)==str and type(string2)==str:\n        string1=list(string1)\n        string2=list(string2)\n        if len(string1)==len(string2):\n            string1.sort()\n            string2.sort()\n            if string1==string2:\n                print('Given strings are permutations of each other')\n            else:\n                print('Given strings are not permutations of each other')\n        else:\n            print('Not equal length')\n    else:\n        print('Not a string')\ndef is_permutation(string1,string2):\n    '''\n    Write a python function to check whether two strings are permutation of each other or not.\n    '''\n    if type(string1)==str and type(string2)==str:\n        string1=list(string1)\n        string2=list(string2)\n        if len(string1)==len(string2):\n            string1.sort()\n            string2.sort()\n            if string1="
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    print('Number is : ',numbers)\n    x = cmath.polar(numbers)\n    print('The polar numbers are : ',x)\n    \nconvert(complex(2.3,5.6))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers)\n    return cmath.polar(z)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    n = len(numbers)\n    count = 0\n    for number in numbers:\n        r, i = number.real, number.imag\n        if(i == 0):\n            print(r)\n        else:\n            if(i > 0):\n                if(r > 0):\n                    print(r, i, \"CP\")\n                else:\n                    print(r, i, \"CPi\")\n            else:\n                if(r < 0):\n                    print(r, i, \"CPi\")\n                else:\n                    print(r, i, \"CP\")\n        count = count + 1\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    #number = complex(numbers)\n    number = cmath.phase(complex(numbers))\n    \n    return number\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        print 'Complex Number:',number,'\\nPolar Form:',polar(number)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return [cmath.polar(x) for x in numbers]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = str(numbers[0])\n    b = str(numbers[1])\n    c = a + b\n    z = c.replace('j', 'i')\n    z = float(z)\n    return cmath.polar(z)\n    \ndef get_coeffs(n):\n    '''\n    Write a python function to solve the quadratic equation and returns the\n    coefficients.\n    '''\n    a = float(input(\"Enter a: \"))\n    b = float(input(\"Enter b: \"))\n    c = float(input(\"Enter c: \"))\n    delta = b**2 - 4*a*c\n    s = str(delta)\n    if s[0] == \"-\":\n        print(\"No real roots\")\n    elif s[0] == \"0\":\n        x = -b/2*a\n        print(\"One real root: \" + str(x))\n    else:\n        x1 = (-b+cmath.sqrt(delta))/(2*a)\n        x2 = (-b-cmath.sqrt(delta))/(2*a)\n        print(\"Two real roots: \" + str(x1) + \" and \" + str(x2))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list = []\n    complex_num = cmath.rect(numbers[0],numbers[1])\n    real = complex_num.real\n    imag = complex_num.imag\n    list.append(real)\n    list.append(imag)\n    return list\ndef complex_polar(numbers):    \n    '''\n    Write a python function to convert polar numbers to complex numbers.\n    '''\n    list = []\n    real = float(numbers[0])*(cmath.sqrt(complex(0,1))**numbers[1])\n    imag = float(numbers[0])*(cmath.sqrt(complex(0,1))**(-numbers[1]))\n    list.append(real)\n    list.append(imag)\n    return list\ndef addition(numbers):\n    '''\n    Write a python function to compute the sum of complex numbers.\n    '''\n    real_num = numbers[0] + numbers[2]\n    imag_num = numbers[1] + numbers[3]\n    list = [real_num,imag_num]\n    return list\ndef subtraction(numbers):\n    '''\n    Write a python function to compute the difference of complex numbers.\n    '''\n    real_num = numbers[0] - numbers[2]\n    imag_num = numbers[1] - numbers[3]\n    list = [real_num,imag_num]\n    return list\ndef multiplication(numbers):\n    '''\n    Write a python function to compute the product of complex numbers.\n    '''\n    real_num = (numbers[0]*numbers[2]) - (numbers[1]*numbers[3])\n    imag_num = (numbers[0]*numbers[3]) + (numbers[1]*numbers[2])\n    list = [real_num,imag_num]\n    return list\ndef division(numbers):\n    '''\n    Write a python function to compute the quotient of complex numbers.\n    '''\n    real_num = (numbers[0]*numbers[2]) + (numbers[1]*numbers[3])\n    imag_num = (-numbers[0]*numbers[3]) + (numbers[1]*numbers[2])\n    list = [real_num,imag_num]\n    return list\ndef modulus(numbers):\n    '''\n    Write a python function to compute the modulus of complex numbers.\n    '''\n    real_num = abs(numbers[0])\n    imag_num = abs(numbers[1])\n    list = [real_num,imag_num]\n    return list\ndef modulus_reverse(numbers):\n    '''\n    Write a python function to compute the modulus of complex numbers in reverse order.\n    '''\n    modulus_real = abs(numbers[0])\n    modulus_imag = abs(numbers[1])\n    list = [modulus_imag,modulus_real]\n    return list\ndef conjugate(numbers):\n    '''\n    Write a python function to compute the conjugate of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = -numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef conjugate_reverse(numbers):\n    '''\n    Write a python function to compute the conjugate of complex numbers in reverse order.\n    '''\n    real_num = numbers[0]\n    imag_num = -numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef transpose(numbers):\n    '''\n    Write a python function to compute the transpose of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef inverse(numbers):\n    '''\n    Write a python function to compute the inverse of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = -numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef conjugate_transpose(numbers):\n    '''\n    Write a python function to compute the conjugate transpose of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef inverse_transpose(numbers):\n    '''\n    Write a python function to compute the inverse transpose of complex numbers.\n    '''\n    real_num = numbers[0]\n    imag_num = -numbers[1]\n    list = [real_num,imag_num]\n    return list\ndef cart_to_polar(numbers):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    r = float(numbers[0])\n    theta = float(numbers[1])\n    list = [r,theta]\n    return list\ndef polar_to_cart(numbers):\n    '''\n    Write a python function to convert polar coordinates to cartesian coordinates.\n    '''\n    r = numbers[0]\n    theta = numbers[1]\n    list = [r*cmath.sqrt(complex(0,1)),theta*cmath.sqrt(complex(0,1))]\n    return list\ndef cart_to_polar_with_exponent(numbers):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates with an exponent.\n    '''\n    r = float(numbers[0])\n    theta = float(numbers[1])\n    list = [r,theta]\n    return list\ndef polar_to_cart_with_exponent(numbers):\n    '''\n    Write a python function to convert polar coordinates with an exponent to cartesian coordinates.\n    '''\n    r = numbers[0]\n    theta = numbers[1]\n    list = [r*cmath.sqrt(complex(0,1)),theta*cmath.sqrt(complex(0,1))]\n    return list\ndef cart_to_polar_power(numbers):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates raised to the given power.\n    '''\n    r = float(numbers[0])\n    theta = float(numbers[1])\n    list = [r,theta]\n    return list\ndef polar_to_cart_power(numbers):\n    '''\n    Write a python function to convert polar coordinates raised to the given power to cartesian coordinates.\n    '''\n    r = numbers[0]\n    theta = numbers[1]\n    list = [r*cmath.sqrt(complex(0,1)),theta*cmath.sqrt(complex(0,1))]\n    return list\ndef factorial(numbers):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    factorial = 1\n    for i in range(1,numbers[0]+1):\n        factorial = factorial * i\n    return factorial\ndef combination(numbers):\n    '''\n    Write a python function to compute the number of ways to choose n items from a given set of items.\n    '''\n    n = numbers[0]\n    k = numbers[1]\n    number_of_ways = factorial(n)/(factorial(k)*factorial(n-k))\n    return number_of_ways\ndef permutation(numbers):\n    '''\n    Write a python function to compute the number of permutations of n items from a given set of items.\n    '''\n    n = numbers[0]\n    k = numbers[1]\n    number_of_permutations = factorial(n)/factorial(n-k)\n    return number_of_permutations\ndef combination_permutation(numbers):\n    '''\n    Write a python function to compute the number of ways to choose n items from a given set of items and the number of permutations of n items from a given set of items.\n    '''\n    n = numbers[0]\n    k = numbers[1]\n    number_of_permutations = factorial(n)/factorial(n-k)\n    number_of_ways = factorial(n)/(factorial(k)"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for j in list1:\n        if isinstance(j,int):\n            i+=1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    number_of_integer_in_list = 0\n    for item in list1:\n        if item.isdigit():\n            number_of_integer_in_list += 1\n    \n    return number_of_integer_in_list\n    \ndef count_decimal(list1):\n    '''\n    Write a python function that returns the number of decimal elements in a given list.\n    '''\n    \n    number_of_decimal_in_list = 0\n    for item in list1:\n        if item.isdigit():\n            continue\n        else:\n            number_of_decimal_in_list += 1\n    \n    return number_of_decimal_in_list\n    \ndef count_alphabetic(list1):\n    '''\n    Write a python function that returns the number of alphabetic elements in a given list.\n    '''\n    \n    number_of_alphabetic_in_list = 0\n    for item in list1:\n        if item.isalpha():\n            number_of_alphabetic_in_list += 1\n    \n    return number_of_alphabetic_in_list\n    \ndef count_other(list1):\n    '''\n    Write a python function that returns the number of other elements in a given list.\n    '''\n    \n    number_of_other_in_list = 0\n    for item in list1:\n        if item.isalpha() == False and item.isdigit() == False:\n            number_of_other_in_list += 1\n    \n    return number_of_other_in_list\n    \ndef count_total(list1):\n    '''\n    Write a python function that returns the number of elements in a given list.\n    '''\n    \n    number_of_total = 0\n    for item in list1:\n        number_of_total += 1\n    \n    return number_of_total\n    \ndef count_non_negative(list1):\n    '''\n    Write a python function that returns the number of non-negative elements in a given list.\n    '''\n    \n    number_of_non_negative_in_list = 0\n    for item in list1:\n        if item >= 0:\n            number_of_non_negative_in_list += 1\n    \n    return number_of_non_negative_in_list\n    \ndef count_positive(list1):\n    '''\n    Write a python function that returns the number of positive elements in a given list.\n    '''\n    \n    number_of_positive_in_list = 0\n    for item in list1:\n        if item > 0:\n            number_of_positive_in_list += 1\n    \n    return number_of_positive_in_list\n    \ndef count_even(list1):\n    '''\n    Write a python function that returns the number of even elements in a given list.\n    '''\n    \n    number_of_even_in_list = 0\n    for item in list1:\n        if item % 2 == 0:\n            number_of_even_in_list += 1\n    \n    return number_of_even_in_list\n    \ndef count_odd(list1):\n    '''\n    Write a python function that returns the number of odd elements in a given list.\n    '''\n    \n    number_of_odd_in_list = 0\n    for item in list1:\n        if item % 2!= 0:\n            number_of_odd_in_list += 1\n    \n    return number_of_odd_in_list\n    \ndef count_numbers(list1):\n    '''\n    Write a python function that returns the number of numbers elements in a given list.\n    '''\n    \n    number_of_numbers_in_list = 0\n    for item in list1:\n        if item.isdigit() == True:\n            number_of_numbers_in_list += 1\n    \n    return number_of_numbers_in_list\n    \ndef count_alphanumeric(list1):\n    '''\n    Write a python function that returns the number of alphanumeric elements in a given list.\n    '''\n    \n    number_of_alphanumeric_in_list = 0\n    for item in list1:\n        if item.isdigit() == False and item.isalpha() == True:\n            number_of_alphanumeric_in_list += 1\n    \n    return number_of_alphanumeric_in_list\n    \ndef count_alphabetic_digit(list1):\n    '''\n    Write a python function that returns the number of alphabetic and digit elements in a given list.\n    '''\n    \n    number_of_alphabetic_digit_in_list = 0\n    for item in list1:\n        if item.isdigit() == False and item.isalpha() == True:\n            number_of_alphabetic_digit_in_list += 1\n    \n    return number_of_alphabetic_digit_in_list\n    \ndef count_unique(list1):\n    '''\n    Write a python function that returns the number of unique elements in a given list.\n    '''\n    \n    unique_set = set()\n    for item in list1:\n        unique_set.add(item)\n    \n    return len(unique_set)\n    \ndef count_duplicates(list1):\n    '''\n    Write a python function that returns the number of duplicates elements in a given list.\n    '''\n    \n    duplicate_set = set()\n    for item in list1:\n        if item in duplicate_set:\n            continue\n        else:\n            duplicate_set.add(item)\n    \n    return len(duplicate_set)\n    \ndef count_anagrams(list1):\n    '''\n    Write a python function that returns the number of anagrams elements in a given list.\n    '''\n    \n    anagram_set = set()\n    for item in list1:\n        if sorted(item) in anagram_set:\n            continue\n        else:\n            anagram_set.add(sorted(item))\n    \n    return len(anagram_set)\n    \ndef count_non_anagrams(list1):\n    '''\n    Write a python function that returns the number of non-anagrams elements in a given list.\n    '''\n    \n    non_anagram_set = set()\n    for item in list1:\n        if sorted(item) in non_anagram_set:\n            continue\n        else:\n            non_anagram_set.add(sorted(item))\n    \n    return len(non_anagram_set)\n    \ndef count_palindrome(list1):\n    '''\n    Write a python function that returns the number of palindrome elements in a given list.\n    '''\n    \n    palindrome_set = set()\n    for item in list1:\n        if item[::-1] in palindrome_set:\n            continue\n        else:\n            palindrome_set.add(item)\n    \n    return len(palindrome_set)\n    \ndef count_non_palindrome(list1):\n    '''\n    Write a python function that returns the number of non-palindrome elements in a given list.\n    '''\n    \n    non_palindrome_set = set()\n    for item in list1:\n        if item[::-1] in non_palindrome_set:\n            continue\n        else:\n            non_palindrome_set.add(item)\n    \n    return len(non_palindrome_set)\n    \ndef count_duplicate_permutations(list1):\n    '''\n    Write a python function that returns the number of duplicate permutations elements in a given list.\n    '''\n    \n    permutation_duplicate_set = set()\n    for item in list1:\n        if sorted(item) in permutation_duplicate_set:\n            continue\n        else:\n            permutation_duplicate_set.add(sorted(item))\n    \n    return len(permutation_duplicate_set)\n    \ndef count_non_duplicate_permutations(list1):\n    '''\n    Write a python function that returns the number of non-duplicate permutations elements in a given list.\n    '''\n    \n    permutation_non_duplicate_set = set()\n    for item in list1:\n    "
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if type(x) == int])\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for ele in list1:\n        if isinstance(ele, int):\n            result += 1\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([element for element in list1 if isinstance(element, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, i):\n            combos.append(j)\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(len(l)-n+1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in list(combinations_with_replacement(l, n))]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(a,b,c) for a,b,c in combinations_with_replacement(l, n)]\n    "
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(combinations_with_replacement(l, n))\n    return l\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = list(permutations_with_replacement(l, n))\n    return l\ndef combinations_colors_2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def comb_helper(combs, l, n, visited):\n        if len(combs) == n:\n            visited[l] = True\n            return combs\n        elif len(combs) > n:\n            return []\n        else:\n            visited[l] = True\n            for i in range(len(l)):\n                if not visited[i]:\n                    temp = comb_helper(combs + [l[i]], l[:i] + l[i + 1:], n, visited)\n                    if temp!= []:\n                        return temp\n            visited[l] = False\n            return []\n    visited = [False] * len(l)\n    return comb_helper([], l, n, visited)\ndef permutations_colors_2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    def perm_helper(perms, l, n, visited):\n        if len(perms) == n:\n            return perms\n        elif len(perms) > n:\n            return []\n        else:\n            for i in range(len(l)):\n                if not visited[i]:\n                    visited[i] = True\n                    temp = perm_helper(perms + [l[i]], l[:i] + l[i + 1:], n, visited)\n                    if temp!= []:\n                        return temp\n                    visited[i] = False\n            return []\n    visited = [False] * len(l)\n    return perm_helper([], l, n, visited)\ndef combinations_colors_3(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def comb_helper(combs, l, n, visited):\n        if len(combs) == n:\n            return combs\n        elif len(combs) > n:\n            return []\n        else:\n            for i in range(len(l)):\n                if not visited[i]:\n                    visited[i] = True\n                    temp = comb_helper(combs + [l[i]], l[:i] + l[i + 1:], n, visited)\n                    if temp!= []:\n                        return temp\n                    visited[i] = False\n            return []\n    visited = [False] * len(l)\n    return comb_helper([], l, n, visited)\ndef permutations_colors_3(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    def perm_helper(perms, l, n, visited):\n        if len(perms) == n:\n            return perms\n        elif len(perms) > n:\n            return []\n        else:\n            for i in range(len(l)):\n                if not visited[i]:\n                    visited[i] = True\n                    temp = perm_helper(perms + [l[i]], l[:i] + l[i + 1:], n, visited)\n                    if temp!= []:\n                        return temp\n                    visited[i] = False\n            return []\n    visited = [False] * len(l)\n    return perm_helper([], l, n, visited)\ndef combinations_colors_4(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def comb_helper(combs, l, n, visited):\n        if len(combs) == n:\n            return combs\n        elif len(combs) > n:\n            return []\n        else:\n            for i in range(len(l)):\n                if not visited[i]:\n                    visited[i] = True\n                    temp = comb_helper(combs + [l[i]], l[:i] + l[i + 1:], n, visited)\n                    if temp!= []:\n                        return temp\n                    visited[i] = False\n            return []\n    visited = [False] * len(l)\n    return comb_helper([], l, n, visited)\ndef permutations_colors_4(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    def perm_helper(perms, l, n, visited):\n        if len(perms) == n:\n            return perms\n        elif len(perms) > n:\n            return []\n        else:\n            for i in range(len(l)):\n                if not visited[i]:\n                    visited[i] = True\n                    temp = perm_helper(perms + [l[i]], l[:i] + l[i + 1:], n, visited)\n                    if temp!= []:\n                        return temp\n                    visited[i] = False\n            return []\n    visited = [False] * len(l)\n    return perm_helper([], l, n, visited)\ndef permutations_colors_5(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    def perm_helper(perms, l, n, visited):\n        if len(perms) == n:\n            return perms\n        elif len(perms) > n:\n            return []\n        else:\n            for i in range(len(l)):\n                if not visited[i]:\n                    visited[i] = True\n                    temp = perm_helper(perms + [l[i]], l[:i] + l[i + 1:], n, visited)\n                    if temp!= []:\n                        return temp\n                    visited[i] = False\n            return []\n    visited = [False] * len(l)\n    return perm_helper([], l, n, visited)\ndef permutations_colors_5_2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    def perm_helper(perms, l, n, visited):\n        if len(perms) == n:\n            return perms\n        elif len(perms) > n:\n            return []\n        else:\n            for i in range(len(l)):\n                if not visited[i]:\n                    visited[i] = True\n                    temp = perm_helper(perms + [l[i]], l[:i] + l[i + 1:], n, visited)\n                    if temp!= []:\n                        return temp\n                    visited[i] = False\n            return []\n    visited = [False] * len(l)\n    return perm_helper([], l, n, visited)\ndef permutations_colors_6(l, n):"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list = [0]*n\n    for i in range(0, n):\n        for j in range(len(l)):\n            list[i] = l[j]\n            if i < n-1:\n                list[i+1] = l[j+1]\n    return list\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n+1):\n        if all(i%x!=0 for x in range(2,i)):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    sieve = [True] * n\n    for i in range(2,int(math.sqrt(n))+1):\n        if sieve[i]:\n            sieve[i*i:n:i] = [False] * len(sieve[i*i:n:i])\n    return sum(sieve)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    is_Prime = [True for i in range(n + 1)]\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_Prime[i]:\n            for j in range(i * i, n + 1, i):\n                is_Prime[j] = False\n    return sum(is_Prime) - 2\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if type(n)!= int:\n        return \"Error: Input is not an integer!\"\n    elif n < 0:\n        return \"Error: Input is negative!\"\n    elif n == 0:\n        return 0\n    else:\n        counter = 0\n        for i in range(2, n+1):\n            #print i, \" \",\n            #if i % 2 == 1:\n            #    print i, \" \",\n            #else:\n            #    print\n            if i > 1:\n                for j in range(2, i):\n                    if i % j == 0:\n                        break\n                else:\n                    counter += 1\n        return counter\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums_set = set()\n    for num in range(2,n+1):\n        if is_prime(num):\n            prime_nums_set.add(num)\n    return len(prime_nums_set)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def count_prime_num(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        elif n % 2 == 0:\n            return count_prime_num(n - 1)\n        else:\n            return count_prime_num(n - 1) + count_prime_num(n - 2)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        isPrime = [True] * n\n        isPrime[0] = False\n        isPrime[1] = False\n        for i in xrange(2, int(sqrt(n))+1):\n            if isPrime[i]:\n                for j in xrange(i*i, n, i):\n                    isPrime[j] = False\n        return sum(isPrime)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n):\n            prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime == True:\n                count += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    # if n is 1 or less, n has no prime factors\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        # find all the factors of n\n        factors = [x for x in range(1, n) if n % x == 0]\n        for x in factors:\n            if x == 1:\n                count += 1\n            else:\n                # if we have a non-trivial divisor, check if x is prime\n                if is_Prime(x):\n                    count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    for num in range(2,n):\n        if num > 1:\n            for i in range(2,num):\n                if num % i == 0:\n                    break\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # your code here\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef show_me_excited():\n    '''\n    Write a function that takes in a single word, capitalizes the first letter of the word, and returns the word as a string.\n    '''\n    return (str.capitalize(input()))\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tuple = (b,a)\n    return tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    \ndef product_of_two_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number squared and then the first number squared.\n    '''\n    return b**2,a**2\n    \ndef convert_to_floating_point_number(a):\n    '''\n    Write a function that takes in a number and returns a floating point version of the number. If the number is not a floating point number, return the string 'None'.\n    '''\n    try:\n        return float(a)\n    except:\n        return 'None'\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    m1 = max(test_tup1)\n    m2 = max(test_tup2)\n    return m1 if m1 > m2 else m2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        max_tup = test_tup1\n        sec_max_tup = test_tup2\n    else:\n        max_tup = test_tup2\n        sec_max_tup = test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2, key=len)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = None\n    # Write your logic here\n    if test_tup1[0] >= test_tup2[0]:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup = []\n    tup.extend(test_tup1)\n    tup.extend(test_tup2)\n    print (tup)\n    max_index = max(tup)\n    return tup.index(max_index)\n    \n    "
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element = []\n    for i in zip(*test_tup1):\n        if i[0] >= i[1]:\n            max_element.append(i[0])\n        else:\n            max_element.append(i[1])\n    for i in zip(*test_tup2):\n        if i[0] >= i[1]:\n            max_element.append(i[0])\n        else:\n            max_element.append(i[1])\n    return max_element\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return (test_tup1[0], test_tup1[1])\n    else:\n        return (test_tup2[0], test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(sorted(test_tup1+test_tup2, key = lambda x:x[1], reverse=True)[:2])\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return newman_prime(n / 2) ** 2\n    else:\n        return (3 * newman_prime(n - 1) ** 2 + 2)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n)[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    n = int(n)\n    d = n-1\n    s = 0\n    while d % 2 == 0:\n        d = d // 2\n        s += 1\n    x = random.randint(1, n-1)\n    y = pow(x, d, n)\n    r = 1\n    while r == 1:\n        x = (x * x) % n\n        y = (y * y) % n\n        if x == 1:\n            return n\n        if x == n - 1:\n            r = 0\n        if y == 1:\n            return 2\n        if y == n - 1:\n            r = 0\n    while r == 0:\n        x = (x * x) % n\n        y = (y * y) % n\n        if x == 1:\n            return n\n        if x == n - 1:\n            r = 0\n        if y == 1:\n            return 2\n        if y == n - 1:\n            r = 0\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 1:\n        return False\n    \n    # if n is of type 'bigint' return False\n    if not is_prime(n):\n        return False\n    \n    # else, compute p\n    #     if n is of type 'bigint' and n is a prime, return n\n    #     elif n is of type 'bigint' and n is not a prime, find the next prime p\n    #     elif n is of type 'bigint' and n is not a prime, find the next prime p\n    #     elif n is of type 'bigint' and n is not a prime, find the next prime p\n    #     else, compute p\n    p = n\n    while True:\n        p += 1\n        if is_prime(p):\n            return p\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2]\n    prime = 3\n    while len(primes) < n:\n        for i in range(prime + 1, 2 * prime, 2):\n            if gcd(i, prime) == 1:\n                primes.append(i)\n        prime = primes[len(primes) - 1] + 2\n    return primes[len(primes) - 1]\n    \ndef lucas_lehmer(n):\n    '''\n    Write a function to find the nth Lucas\u2013Lehmer prime number.\n    '''\n    if n < 1:\n        return 2\n    if n == 1:\n        return 3\n    primes = [2, 3]\n    prime = 5\n    while len(primes) < n:\n        if gcd(prime, primes[len(primes) - 2]) == 1:\n            primes.append(prime)\n        prime = primes[len(primes) - 1] + primes[len(primes) - 2]\n    return primes[len(primes) - 1]\n    \ndef fermat(n):\n    '''\n    Write a function to find the nth Fermat prime number.\n    '''\n    if n < 1:\n        return 2\n    if n == 1:\n        return 3\n    primes = [2, 3]\n    prime = 5\n    while len(primes) < n:\n        if gcd(prime, primes[len(primes) - 2]) == 1:\n            primes.append(prime)\n        prime += 2\n    return primes[len(primes) - 1]\n    \ndef miller_rabin(n, d):\n    '''\n    Write a function to find the nth Miller-Rabin prime number.\n    '''\n    if n < 1:\n        return 2\n    if n == 1:\n        return 3\n    if d == 1:\n        return n\n    if d == n - 1:\n        return 2\n    if n == 2:\n        return 3\n    primes = [2, 3]\n    prime = 5\n    while len(primes) < n:\n        if gcd(prime, primes[len(primes) - 2]) == 1:\n            primes.append(prime)\n        prime += 2\n    s = 0\n    for i in range(d):\n        a = random.randint(1, n - 1)\n        if pow(a, n - 1, n)!= 1:\n            s += 1\n    if s > 0:\n        return False\n    else:\n        return primes[len(primes) - 1]\n    \ndef general_prime(n, d):\n    '''\n    Write a function to find the nth generalized prime number.\n    '''\n    if n < 1:\n        return 2\n    if n == 1:\n        return 3\n    if d == 1:\n        return n\n    if d == n - 1:\n        return 2\n    if n == 2:\n        return 3\n    primes = [2, 3]\n    prime = 5\n    while len(primes) < n:\n        if gcd(prime, primes[len(primes) - 2]) == 1:\n            primes.append(prime)\n        prime += 2\n    s = 0\n    for i in range(d):\n        a = random.randint(1, n - 1)\n        if pow(a, n - 1, n)!= 1:\n            s += 1\n    if s > 0:\n        return False\n    else:\n        return primes[len(primes) - 1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    if n%2 == 0:\n        return 2*newman_prime(n/2)\n    elif n%2 == 1:\n        return (2*newman_prime(n/2) + 1)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n%2 == 0:\n        return None\n    if n%3 == 0:\n        return None\n    if n%5 == 0:\n        return None\n    \n    q = 7\n    \n    while True:\n        for i in range(1, n-1):\n            if pow(q,i*2, n)!= 1:\n                break\n        else:\n            return q\n        q += 2\n        \n    \nprint newman_prime(1)\nprint newman_prime(2)\nprint newman_prime(3)\nprint newman_prime(4)\nprint newman_prime(5)\nprint newman_prime(6)\nprint newman_prime(7)\nprint newman_prime(8)\nprint newman_prime(9)\nprint newman_prime(10)\nprint newman_prime(100"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return nth_newman_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # The newman\u2013shanks\u2013williams algorithm uses three operations:\n    # 1. a = [2, 3, 5, 7, 11,...]\n    # 2. s = 1, d = 0, t = 0\n    # 3. n = a[s] + d * t\n    # a, s, t, and n are assumed to be integers, but any integer can be used here.\n    # For example, if n is 17, s=1, t=3 and n = 17*3 = 34 = 11*1 + 3*3\n    # The algorithm can be applied to any value that can be expressed in the form 17*k + 3*s, where k is a positive integer.\n    # If the value is not 17*k + 3*s, the function returns -1.\n    # Find the nth prime number.\n    # Time: O(n log(n))\n    # Space: O(1)\n    def newman_williams(n):\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        if n == 4:\n            return 7\n        if n == 5:\n            return 11\n        if n == 6:\n            return 17\n        if n == 7:\n            return 19\n        if n == 8:\n            return 23\n        if n == 9:\n            return 29\n        if n == 10:\n            return 31\n        if n == 11:\n            return 37\n        if n == 12:\n            return 41\n        if n == 13:\n            return 43\n        if n == 14:\n            return 47\n        if n == 15:\n            return 53\n        if n == 16:\n            return 59\n        if n == 17:\n            return 61\n        if n == 18:\n            return 67\n        if n == 19:\n            return 71\n        if n == 20:\n            return 73\n        if n == 21:\n            return 79\n        if n == 22:\n            return 83\n        if n == 23:\n            return 89\n        if n == 24:\n            return 97\n        if n == 25:\n            return 101\n        if n == 26:\n            return 103\n        if n == 27:\n            return 107\n        if n == 28:\n            return 109\n        if n == 29:\n            return 113\n        if n == 30:\n            return 127\n        if n == 31:\n            return 131\n        if n == 32:\n            return 137\n        if n == 33:\n            return 139\n        if n == 34:\n            return 149\n        if n == 35:\n            return 151\n        if n == 36:\n            return 157\n        if n == 37:\n            return 163\n        if n == 38:\n            return 167\n        if n == 39:\n            return 173\n        if n == 40:\n            return 179\n        if n == 41:\n            return 181\n        if n == 42:\n            return 191\n        if n == 43:\n            return 193\n        if n == 44:\n            return 197\n        if n == 45:\n            return 199\n        if n == 46:\n            return 211\n        if n == 47:\n            return 223\n        if n == 48:\n            return 227\n        if n == 49:\n            return 229\n        if n == 50:\n            return 233\n        if n == 51:\n            return 239\n        if n == 52:\n            return 241\n        if n == 53:\n            return 251\n        if n == 54:\n            return 257\n        if n == 55:\n            return 263\n        if n == 56:\n            return 269\n        if n == 57:\n            return 271\n        if n == 58:\n            return 277\n        if n == 59:\n            return 281\n        if n == 60:\n            return 283\n        if n == 61:\n            return 293\n        if n == 62:\n            return 307\n        if n == 63:\n            return 311\n        if n == 64:\n            return 313\n        if n == 65:\n            return 317\n        if n == 66:\n            return 331\n        if n == 67:\n            return 337\n        if n == 68:\n            return 347\n        if n == 69:\n            return 349\n        if n == 70:\n            return 353\n        if n == 71:\n            return 359\n        if n == 72:\n            return 367\n        if n == 73:\n            return 373\n        if n == 74:\n            return 379\n        if n == 75:\n            return 383\n        if n == 76:\n            return 389\n        if n == 77:\n            return 397\n        if n == 78:\n            return 401\n        if n == 79:\n            return 409\n        if n == 80:\n            return 419\n        if n == 81:\n            return 421\n        if n == 82:\n            return 431\n        if n == 83:\n            return 439\n        if n == 84:\n            return 443\n        if n == 85:\n            return 449\n        if n == 86:\n            return 457\n        if n == 87:\n            return 461\n        if n == 88:\n            return 467\n        if n == 89:\n            return 479\n        if n == 90:\n            return 487\n        if n == 91:\n            return 491\n        if n == 92:\n            return 499\n        if n == 93:\n            return 503\n        if n == 94:\n            return 509\n        if n == 95:\n            return 521\n        if n == 96:\n            return 523\n        if n == 97:\n            return 541\n        if n == 98:\n            return 547\n        if n == 99:\n            return 553\n        if n == 100:\n            return 559\n        if n == 101:\n            return 571\n        if n == 102:\n            return 577\n        if n == 103:\n            return 587\n        if n == 104:\n            return 593\n        if n == 105:\n            return 601\n        if n == 106:\n            return 607\n        if n == 107:\n            return 613\n        if n == 108:\n            return 617\n        if n == 109:\n            return 619\n        if n == 110:\n            return 631\n        if n == 111:\n            return 643\n        if n == 112:\n            return 647\n        if n == 113:\n            return 653\n        if n == 114:\n            return 659\n        if n == 115:\n            return 661\n        if n == 116:\n            return 673\n        if n == 117:\n            return 677\n        if n == 118:\n            return 683\n        if n == 119:\n            return 691\n        if n == 120:\n            return 701\n        if n == 121:\n            return 709\n        if n == 122:\n            return 719\n        if n == 123:\n            return 727\n        if n == 124:\n            return 733\n        if n == 125:\n            return 739\n        if n == 126:\n            return 743\n        if n == 127:\n            return 751\n        if n == 128:\n            return 757\n        if n == 129:\n            return 761\n        if n == 130:\n            return 769\n        if n == 131:\n            return 773\n        if n == 132:\n            return 787\n        if n == 133:\n            return 797\n        if n == 134:\n            return 809\n        if n == 135:\n            return 811\n        if n == 136:\n            return 821\n        if n == 137:\n            return 823\n        if n == 138:\n            return 827\n        if n == 139:\n            return 829\n        if n == 140:\n            return 839\n        if n == 141:\n            return 853\n        if n == 142:\n            return 859\n        if n == 143:\n            return 863\n        if n == 144:\n            return 877\n        if n == 145:\n            return 881\n        if n == 146:\n            return 883\n        if n == 147:\n            return 887\n        if n == 148:\n            return 897\n        if n == 149:\n            return 907\n        if n == 150:\n            return 911\n        if n == 151:\n            return 919\n        if n == 152:\n            return 929\n        if n == 153:\n            return 937\n        if n == 154:\n            return 941\n        if n == 155:\n            return 947\n        if n == 156:\n            retur"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: return 2\n    \n    def gen(f):\n        '''\n        Given a polynomial f(x) = (ax**2 + bx + c)**n,\n        re-write it as (ax**2 + bx + c)**n / g(x) where g(x) is a monic polynomial.\n        '''\n        g = 1\n        x = 1\n        while g == 1:\n            a = f.coeffs[0]\n            b = f.coeffs[1]\n            c = f.coeffs[2]\n            \n            a2 = a**2\n            a3 = a**3\n            a4 = a**4\n            a5 = a**5\n            a6 = a**6\n            \n            b2 = b**2\n            b3 = b**3\n            b4 = b**4\n            b5 = b**5\n            b6 = b**6\n            \n            c2 = c**2\n            c3 = c**3\n            c4 = c**4\n            c5 = c**5\n            c6 = c**6\n            \n            # a\n            d = b2 - 4*a*c2\n            if d < 0:\n                # no real solutions\n                return None\n            else:\n                d = d**0.5\n                x = (b2 - d) / (2*a)\n                g = Poly((a*x**2 + b*x + c)**n, x)\n        return g\n    \n    def newman_williams(n):\n        '''\n        Takes n a natural number and returns the nth newman\u2013williams prime number.\n        '''\n        n -= 1\n        \n        if n < 0:\n            return None\n        \n        n += 1\n        \n        if n == 1:\n            return 2\n        \n        for i in range(1, n):\n            f = Poly((2*i + 1)**2 - 4*i, i)\n            if newman_prime(i) == f:\n                continue\n            else:\n                return newman_prime(i)\n        return None\n    return newman_williams(n)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division_element(num1, num2):\n        return float(num1)/num2\n    return (division_element(element1, element2) for element1, element2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #First check the length of the tuples\n    if len(test_tup1) == len(test_tup2):\n        return tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n    else:\n        #If lengths are not equal, then raise exception\n        raise ZeroDivisionError(\"Lengths of given tuples are not equal.\")\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    out_tup = tuple()\n    for i, j in zip(test_tup1, test_tup2):\n        out_tup += (i // j,)\n    \n    return out_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        if len(test_tup1) == len(test_tup2):\n            total = 0\n            for i in range(len(test_tup1)):\n                total = total + (test_tup1[i] / test_tup2[i])\n            return total\n    except ZeroDivisionError:\n        return 0.0\n    except TypeError:\n        return 0.0\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [(x/y) for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    res_tup = ()\n    res_tup1 = []\n    res_tup2 = []\n    for i in range(len(test_tup1)):\n        res_tup1.append(test_tup1[i] / test_tup2[i])\n    res_tup = tuple(res_tup1)\n    return res_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple([test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    return tuple(map(lambda a,b : a/b, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert(len(test_tup1) == len(test_tup2))\n    div_tup = tuple()\n    for i in range(len(test_tup1)):\n        div_tup += (test_tup1[i]/test_tup2[i],)\n    return div_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    mid = length/2\n    return list1[:mid], list1[mid:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0:\n        print('L is not positive')\n    elif len(list1) == 1:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    "
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == 0:\n        return ([], [])\n    else:\n        half = len(list1)/2\n        first = list1[:half]\n        second = list1[half:]\n        return (first, second)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your Code Here\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = []\n    part2 = []\n    for i in range(0,L):\n        part1.append(list1[i])\n    for j in range(L, len(list1)):\n        part2.append(list1[j])\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    b = []\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if length < 2:\n        return None\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return 0\n    return (h_age * 10) + 1\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 0\n    while age < 1:\n        age = h_age + 1\n        h_age += 1\n    return age\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age is None:\n        return None\n    if h_age < 0:\n        return None\n    if h_age > 30:\n        return None\n    if h_age < 1:\n        return 0\n    if h_age == 1:\n        return 1\n    if h_age == 2:\n        return 1.5\n    if h_age == 3:\n        return 2\n    if h_age == 4:\n        return 2.5\n    if h_age == 5:\n        return 3\n    if h_age == 6:\n        return 3.5\n    if h_age == 7:\n        return 4\n    if h_age == 8:\n        return 4.5\n    if h_age == 9:\n        return 5\n    if h_age == 10:\n        return 5.5\n    if h_age == 11:\n        return 6\n    if h_age == 12:\n        return 6.5\n    if h_age == 13:\n        return 7\n    if h_age == 14:\n        return 7.5\n    if h_age == 15:\n        return 8\n    if h_age == 16:\n        return 8.5\n    if h_age == 17:\n        return 9\n    if h_age == 18:\n        return 9.5\n    if h_age == 19:\n        return 10\n    if h_age == 20:\n        return 10.5\n    if h_age == 21:\n        return 11\n    if h_age == 22:\n        return 11.5\n    if h_age == 23:\n        return 12\n    if h_age == 24:\n        return 12.5\n    if h_age == 25:\n        return 13\n    if h_age == 26:\n        return 13.5\n    if h_age == 27:\n        return 14\n    if h_age == 28:\n        return 14.5\n    if h_age == 29:\n        return 15\n    if h_age == 30:\n        return 15.5\n    if h_age == 31:\n        return 16\n    if h_age == 32:\n        return 16.5\n    if h_age == 33:\n        return 17\n    if h_age == 34:\n        return 17.5\n    if h_age == 35:\n        return 18\n    if h_age == 36:\n        return 18.5\n    if h_age == 37:\n        return 19\n    if h_age == 38:\n        return 19.5\n    if h_age == 39:\n        return 20\n    if h_age == 40:\n        return 20.5\n    if h_age == 41:\n        return 21\n    if h_age == 42:\n        return 21.5\n    if h_age == 43:\n        return 22\n    if h_age == 44:\n        return 22.5\n    if h_age == 45:\n        return 23\n    if h_age == 46:\n        return 23.5\n    if h_age == 47:\n        return 24\n    if h_age == 48:\n        return 24.5\n    if h_age == 49:\n        return 25\n    if h_age == 50:\n        return 25.5\n    if h_age == 51:\n        return 26\n    if h_age == 52:\n        return 26.5\n    if h_age == 53:\n        return 27\n    if h_age == 54:\n        return 27.5\n    if h_age == 55:\n        return 28\n    if h_age == 56:\n        return 28.5\n    if h_age == 57:\n        return 29\n    if h_age == 58:\n        return 29.5\n    if h_age == 59:\n        return 30\n    if h_age == 60:\n        return 30.5\n    if h_age == 61:\n        return 31\n    if h_age == 62:\n        return 31.5\n    if h_age == 63:\n        return 32\n    if h_age == 64:\n        return 32.5\n    if h_age == 65:\n        return 33\n    if h_age == 66:\n        return 33.5\n    if h_age == 67:\n        return 34\n    if h_age == 68:\n        return 34.5\n    if h_age == 69:\n        return 35\n    if h_age == 70:\n        return 35.5\n    if h_age == 71:\n        return 36\n    if h_age == 72:\n        return 36.5\n    if h_age == 73:\n        return 37\n    if h_age == 74:\n        return 37.5\n    if h_age == 75:\n        return 38\n    if h_age == 76:\n        return 38.5\n    if h_age == 77:\n        return 39\n    if h_age == 78:\n        return 39.5\n    if h_age == 79:\n        return 40\n    if h_age == 80:\n        return 40.5\n    if h_age == 81:\n        return 41\n    if h_age == 82:\n        return 41.5\n    if h_age == 83:\n        return 42\n    if h_age == 84:\n        return 42.5\n    if h_age == 85:\n        return 43\n    if h_age == 86:\n        return 43.5\n    if h_age == 87:\n        return 44\n    if h_age == 88:\n        return 44.5\n    if h_age == 89:\n        return 45\n    if h_age == 90:\n        return 45.5\n    if h_age == 91:\n        return 46\n    if h_age == 92:\n        return 46.5\n    if h_age == 93:\n        return 47\n    if h_age == 94:\n        return 47.5\n    if h_age == 95:\n        return 48\n    if h_age == 96:\n        return 48.5\n    if h_age == 97:\n        return 49\n    if h_age == 98:\n        return 49.5\n    if h_age == 99:\n        return 50\n    if h_age == 100:\n        return 50.5\n    if h_age == 101:\n        return 51\n    if h_age == 102:\n        return 51.5\n    if h_age == 103:\n        return 52\n    if h_age == 104:\n        return 52.5\n    if h_age == 105:\n        return 53\n    if h_age == 106:\n        return 53.5\n    if h_age == 107:\n        return 54\n    if h_age == 108:\n        return 54.5\n    if h_age == 109:\n        return 55\n    if h_age == 110:\n        return 55.5\n    if h_age == 111:\n        return 56\n    if h_age == 112:\n        return 56.5\n    if h_age == 113:\n        return 57\n    if h_age == 114:\n        return 57.5\n    if h_age == 115:\n        return 58\n    if h_age == 116:\n        return 58.5\n    if h_age == 117:\n        return 59\n    if h_age == 118:\n        return 59.5\n    if h_age == 119:\n        return 60\n    if h_age == 120:\n        return 60.5\n    if h_age == 121:\n        return 61\n    if h_age == 122:\n        return 61.5\n    if h_age == 123:\n        return 62\n    if h_age == 124:\n        return 62.5\n    if h_age == 125:\n        return 63\n    if h_age == 126:\n        return 63.5\n    if h_age == 127:\n        return 64\n    if h_age == 128:\n        return 64.5\n    if h_age == 129:\n        return 65\n    if h_age == 130:\n        return 65.5\n    if h_age == 131:\n        return 66\n    if h_age == 132:\n        return 66.5\n    if h_age == 133:\n        return 67\n    if h_age == 134:\n        return 67.5\n    if h_age == 135:\n        return 68\n    if h_age == 136:\n        return 68.5\n    if h_age == 137:\n        return 69\n    if h_age == 138:\n        return 69.5\n    if h_age == 139:\n        return 70\n    if h_age == 140:\n        return 70.5\n    i"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return 'Invalid input!'\n    elif h_age >= 1 and h_age < 2:\n        return 'A baby!'\n    elif h_age >= 2 and h_age < 4:\n        return 'A toddler!'\n    elif h_age >= 4 and h_age < 13:\n        return 'A kid!'\n    elif h_age >= 13 and h_age < 20:\n        return 'A teenager!'\n    elif h_age >= 20 and h_age < 65:\n        return 'A youth!'\n    elif h_age >= 65:\n        return 'An adult!'\n    else:\n        return 'Something went wrong!'\n    \n    \ndef pythagorean_triple(a, b, c):\n    '''\n    Write a function to return the pythagorean triple that contains\n    the legs of length a, b, and c\n    '''\n    if a > c or b > c:\n        return None\n    elif a**2 + b**2 == c**2:\n        return a, b, c\n    elif a**2 + c**2 == b**2:\n        return a, c, b\n    elif b**2 + c**2 == a**2:\n        return b, c, a\n    else:\n        return None\n    \n    \ndef foo_bar(input_list):\n    '''\n    Write a function to return a list of all elements that are duplicates\n    from the given list.\n    '''\n    if not isinstance(input_list, list):\n        return None\n    else:\n        output_list = []\n        for item in input_list:\n            if input_list.count(item) > 1:\n                output_list.append(item)\n        return output_list\n    \n    \ndef word_counter(input_string):\n    '''\n    Write a function that accepts a string and returns a dictionary\n    containing all of the unique words in the string as keys and\n    the number of times the word appeared as values.\n    '''\n    if not isinstance(input_string, str):\n        return None\n    else:\n        output_dict = {}\n        string_list = input_string.split()\n        for word in string_list:\n            if word in output_dict:\n                output_dict[word] += 1\n            else:\n                output_dict[word] = 1\n        return output_dict\n    \n    \ndef email_username(email_address):\n    '''\n    Write a function to check whether a given email address is valid.\n    The function should return True if the email address is valid,\n    False otherwise.\n    '''\n    valid_domain = ['gmail.com', 'yahoo.com', 'hotmail.com']\n    username_list = email_address.split('@')\n    if len(username_list)!= 2:\n        return False\n    username = username_list[0]\n    domain = username_list[1]\n    if len(username) < 1 or len(domain) < 1:\n        return False\n    elif domain not in valid_domain:\n        return False\n    else:\n        return True\n    \n    \ndef reverse_lookup(dict_of_strings_to_search_through, target_value):\n    '''\n    Write a function to return the keys in a dictionary that\n    have a value of target_value.\n    '''\n    if not isinstance(dict_of_strings_to_search_through, dict):\n        return None\n    elif not isinstance(target_value, str):\n        return None\n    else:\n        output_list = []\n        for key in dict_of_strings_to_search_through:\n            if dict_of_strings_to_search_through[key] == target_value:\n                output_list.append(key)\n        return output_list\n    \n    \ndef binary_search_recursive(input_list, target_value):\n    '''\n    Write a recursive function to search for a target value in a\n    sorted list of values.\n    '''\n    if not isinstance(input_list, list):\n        return None\n    elif not isinstance(target_value, int):\n        return None\n    elif len(input_list) < 1:\n        return None\n    else:\n        midpoint = len(input_list) // 2\n        if target_value == input_list[midpoint]:\n            return True\n        elif target_value < input_list[midpoint]:\n            return binary_search_recursive(input_list[:midpoint], target_value)\n        elif target_value > input_list[midpoint]:\n            return binary_search_recursive(input_list[midpoint + 1:], target_value)\n        else:\n            return False\n    \n    \ndef binary_search_iterative(input_list, target_value):\n    '''\n    Write a function to search for a target value in a\n    sorted list of values.\n    '''\n    if not isinstance(input_list, list):\n        return None\n    elif not isinstance(target_value, int):\n        return None\n    elif len(input_list) < 1:\n        return None\n    else:\n        midpoint = len(input_list) // 2\n        if target_value == input_list[midpoint]:\n            return True\n        elif target_value < input_list[midpoint]:\n            return binary_search_iterative(input_list[:midpoint], target_value)\n        elif target_value > input_list[midpoint]:\n            return binary_search_iterative(input_list[midpoint + 1:], target_value)\n        else:\n            return False\n    \n    \ndef fibonacci_sequence(n):\n    '''\n    Write a recursive function to return the nth number\n    in the fibonacci sequence, where n > 2.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return fibonacci_sequence(n-1) + fibonacci_sequence(n-2)\n    \n    \ndef digital_root(n):\n    '''\n    Write a recursive function to return the digital root of\n    a number n.\n    '''\n    if n < 10:\n        return n\n    else:\n        return digital_root(n % 10)\n    \n    \ndef gcd(a, b):\n    '''\n    Write a recursive function to return the greatest common\n    divisor of two numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    else:\n        return gcd(a % b, b)\n    \n    \ndef lcm(a, b):\n    '''\n    Write a recursive function to return the least common\n    multiple of two numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return a * lcm(a, b) / gcd(a, b)\n    \n    \ndef truncate_float(number, digits):\n    '''\n    Write a recursive function that returns the truncated\n    floating point representation of a number.\n    '''\n    if not isinstance(digits, int):\n        return None\n    elif not isinstance(number, float):\n        return None\n    elif digits < 0 or digits > 10:\n        return None\n    elif digits == 0:\n        return int(number)\n    else:\n        return truncate_float(number * 10 ** digits, digits - 1)\n    \n    \ndef is_palindrome(input_string):\n    '''\n    Write a recursive function to check whether a string\n    is a palindrome or not.\n    '''\n    if len(input_string) <= 1:\n        return True\n    elif input_string[0]!= input_string[-1]:\n        return False\n    else:\n        return is_palindrome(input_string[1:-1])\n    \n    \ndef is_permutation(a, b):\n    '''\n    Write a recursive function to check whether two\n    strings are permutations of each other or not.\n    '''\n    if len(a)!= len(b):\n        return False\n    elif len(a) == 1:\n        return True\n    else:\n        if a[0] == b[0]:\n            return is_permutation"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return \"Baby\"\n    elif h_age >= 3 and h_age <= 4:\n        return \"Kid\"\n    elif h_age >= 5 and h_age <= 9:\n        return \"Teen\"\n    elif h_age >= 10:\n        return \"Old\"\n    else:\n        return \"Error\"\n    \ndef count_words(sentence):\n    '''\n    Write a function that counts the number of words in a sentence.\n    '''\n    return len(sentence.split())\n    \ndef count_characters(sentence):\n    '''\n    Write a function that counts the number of characters in a sentence.\n    '''\n    return len(sentence)\n    \ndef swap_case(s):\n    '''\n    Write a function that takes a string and returns the string with its\n    characters swapped.\n    '''\n    return s.swapcase()\n    \ndef move_zero(nums):\n    '''\n    Write a function that moves all zeros to the end of a list and returns\n    the modified list.\n    '''\n    new_list = []\n    for i in nums:\n        if i == 0:\n            new_list.append(i)\n    for j in nums:\n        if j!= 0:\n            new_list.append(j)\n    return new_list\n    \ndef find_product(nums):\n    '''\n    Write a function that takes a list of numbers and returns the product of\n    all the numbers in the list.\n    '''\n    product = 1\n    for i in nums:\n        product *= i\n    return product\n    \ndef find_max(nums):\n    '''\n    Write a function that takes a list of numbers and returns the maximum\n    number in the list.\n    '''\n    max_num = nums[0]\n    for i in nums:\n        if i > max_num:\n            max_num = i\n    return max_num\n    \ndef largest_number(nums):\n    '''\n    Write a function that takes a list of numbers and returns the largest\n    number in the list.\n    '''\n    largest_num = nums[0]\n    for i in nums:\n        if i > largest_num:\n            largest_num = i\n    return largest_num\n    \ndef smallest_number(nums):\n    '''\n    Write a function that takes a list of numbers and returns the smallest\n    number in the list.\n    '''\n    smallest_num = nums[0]\n    for i in nums:\n        if i < smallest_num:\n            smallest_num = i\n    return smallest_num\n    \ndef sum_list(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all\n    the numbers in the list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef reverse_list(nums):\n    '''\n    Write a function that takes a list and returns the reverse of the list.\n    '''\n    return nums[::-1]\n    \ndef anagram_check(str1, str2):\n    '''\n    Write a function that takes two strings and returns whether they are\n    anagrams or not.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef palindrome_check(str1):\n    '''\n    Write a function that takes a string and returns whether the string is a\n    palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \ndef word_split(words, chars):\n    '''\n    Write a function that takes a string and a string of characters and\n    returns the words in the string that contain the characters\n    from the second string.\n    '''\n    if len(chars) == 0:\n        return words\n    elif len(words) == 0:\n        return \"None\"\n    elif chars[0] in words:\n        return word_split(words, chars[1:])\n    else:\n        return word_split(words, chars[1:])\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function that takes two strings and returns whether they are\n    permutations of each other or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        count = {}\n        for i in str1:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        for i in str2:\n            if i in count:\n                count[i] -= 1\n        for i in count:\n            if count[i]!= 0:\n                return False\n        return True\n    \ndef is_substring(str1, str2):\n    '''\n    Write a function that takes two strings and returns whether or not\n    str1 is a substring of str2.\n    '''\n    if len(str1) > len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return False\n        return True\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function that takes two strings and returns whether or not\n    they are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram2(str1, str2):\n    '''\n    Write a function that takes two strings and returns whether or not\n    they are anagrams of each other.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in str2:\n        if i in count:\n            count[i] -= 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i]!= 0:\n            return False\n    return True\n    \ndef is_anagram3(str1, str2):\n    '''\n    Write a function that takes two strings and returns whether or not\n    they are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_palindrome(str1):\n    '''\n    Write a function that takes a string and returns whether or not the\n    string is a palindrome.\n    '''\n    return str1 == str1[::-1]\n    \ndef make_dict(string):\n    '''\n    Write a function that takes a string and returns a dictionary with the\n    letters of the string as keys and the number of times they appear as\n    values.\n    '''\n    if len(string) == 0:\n        return {}\n    else:\n        return {string[0]:1}\n    \ndef max_dict(string):\n    '''\n    Write a function that takes a string and returns the maximum number of\n    times any letter occurs in the string.\n    '''\n    count = {}\n    for i in string:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    max_num = 0\n    for i in count:\n        if count[i] > max_num:\n            max_num = count[i]\n    return max_num\n    \ndef find_anagrams(s1, s2):\n    '''\n    Write a function that takes two strings and returns a list of all the\n    anagrams of the first string in the second string.\n    '''\n    if len(s1) > len(s2):\n        return []\n    else:\n        count = {}\n        for i in s1:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        result = []\n        for i in s2:\n            if i in count:\n                count[i] -= 1\n                if count[i] == 0:\n                    result.append(i)\n        return result\n    \ndef find_anagrams2(s1, s2):\n    '''\n    Write a function that takes two strings and returns a list of all the\n    anagrams of the first string in the secon"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return []\n    if n == 1:\n        return [S]\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise TypeError(\"S needs to be a list\")\n    if not isinstance(step, int):\n        raise TypeError(\"step needs to be an int\")\n    if step < 1:\n        raise ValueError(\"step needs to be a positive int\")\n    if step > len(S):\n        raise ValueError(\"step is bigger than length of list\")\n    if len(S) == 0:\n        raise ValueError(\"list is empty\")\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    n = 0\n    for element in S:\n        new_list.append(S[n:n+step])\n        n += step\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l * 6\n    b = l * 4\n    c = l * 4\n    return a + b + c\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 4*l**2\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l**2\n    return 6 * side\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l ** 2\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l**2\n    print(lateralsurface)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurfacearea = 6 * (l ** 2)\n    return lateralsurfacearea\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            x = x + i**2\n    return x\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    return sum( [x**2 for x in range(1,n+1,2) if x%2!=0] )\n    \n    \nprint(square_Sum(3))\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n**2) + square_Sum(n-2)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # return the sum of the squares of the first n odd natural numbers\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            result += i ** 2\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your Code Here\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            total += i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            x += i**2\n    return x\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            total += i*i\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # print(sum([i**2 for i in range(1,n+1) if i%2!= 0]))\n    return sum([i**2 for i in range(1,n+1) if i%2!= 0])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1, 2):\n        result = result + (i * i)\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if i%2==1:\n            result += i*i\n    return result\n    \ndef sqrt(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if i%2==1:\n            result += i*i\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0:\n        return None\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #Define the variables for our calculation.\n    x, star_num = 1, 1\n    #Loop through our calculation until the x is greater than the nth star.\n    while star_num < n:\n        x *= 2\n        star_num += x\n    #Return the result of our calculation.\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    s = 1\n    for i in range(n-1):\n        s *= (i+2)\n    return s\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1: \n        return 1\n    elif n%2==1: \n        return 2*find_star_num(n-1) + 1\n    else: \n        return 2*find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return ((n-1)*(n+2))/2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    i = 1\n    while num < n:\n        num = num + (n - 1) * i\n        i += 1\n    return num\n    \ndef find_star(n): \n    '''\n    Write a function that takes a positive integer n and returns a string \n    consisting of n asterisks, *.\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return find_star_num(n - 1) + find_star_num(n - 2)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # http://stackoverflow.com/questions/11514094/get-nth-numbers-from-python-list\n    # http://stackoverflow.com/questions/16373488/finding-the-nth-row-of-a-triangle\n    # n = 1 => 1\n    # n = 2 => 3\n    # n = 3 => 7\n    # n = 4 => 15\n    # n = 5 => 31\n    # n = 6 => 63\n    # n = 7 => 127\n    # n = 8 => 255\n    # n = 9 => 511\n    # n = 10 => 1023\n    # n = 11 => 2047\n    # n = 12 => 4095\n    # n = 13 => 8191\n    # n = 14 => 16383\n    # n = 15 => 32767\n    # n = 16 => 65535\n    # n = 17 => 131071\n    # n = 18 => 262143\n    # n = 19 => 524287\n    # n = 20 => 1048576\n    # n = 21 => 2097119\n    # n = 22 => 4194303\n    # n = 23 => 8388607\n    # n = 24 => 16777215\n    # n = 25 => 33554432\n    # n = 26 => 67108863\n    # n = 27 => 134217727\n    # n = 28 => 268435455\n    # n = 29 => 536870911\n    # n = 30 => 1073741824\n    # n = 31 => 2147483647\n    # n = 32 => 4294967295\n    # n = 33 => 8589934591\n    # n = 34 => 17179869184\n    # n = 35 => 34359738368\n    # n = 36 => 68719476734\n    # n = 37 => 137438953418\n    # n = 38 => 274877906944\n    # n = 39 => 549755813888\n    # n = 40 => 1099511627776\n    # n = 41 => 219902325555\n    # n = 42 => 439804651136\n    # n = 43 => 879609302299\n    # n = 44 => 175921860444\n    # n = 45 => 351843720888\n    # n = 46 => 703687441776\n    # n = 47 => 1407374883553\n    # n = 48 => 28147497671053\n    # n = 49 => 562949953421311\n    # n = 50 => 1125899906842624\n    # n = 51 => 2251799813685247\n    # n = 52 => 4503599627370496\n    # n = 53 => 9007199254740992\n    # n = 54 => 18014398509481984\n    # n = 55 => 3654352963731383\n    # n = 56 => 72057594037927936\n    # n = 57 => 14314482799342338\n    # n = 58 => 281474976710656\n    # n = 59 => 56294995342131079\n    # n = 60 => 1125899906842624\n    # n = 61 => 2251799813685248\n    # n = 62 => 45035996273704976\n    # n = 63 => 9007199254740992\n    # n = 64 => 18014398509481984\n    # n = 65 => 3654352963731379\n    # n = 66 => 7205759403792797\n    # n = 67 => 14314482799342339\n    # n = 68 => 281474976710656\n    # n = 69 => 56294995342131079\n    # n = 70 => 1125899906842624\n    # n = 71 => 2251799813685247\n    # n = 72 => 45035996273704976\n    # n = 73 => 9007199254740992\n    # n = 74 => 18014398509481984\n    # n = 75 => 3654352963731379\n    # n = 76 => 72057594037927936\n    # n = 77 => 14314482799342339\n    # n = 78 => 281474976710656\n    # n = 79 => 56294995342131079\n    # n = 80 => 1125899906842624\n    # n = 81 => 2251799813685248\n    # n = 82 => 45035996273704976\n    # n = 83 => 9007199254740992\n    # n = 84 => 18014398509481984\n    # n = 85 => 3654352963731379\n    # n = 86 => 72057594037927936\n    # n = 87 => 14314482799342339\n    # n = 88 => 281474976710656\n    # n = 89 => 56294995342131079\n    # n = 90 => 1125899906842624\n    # n = 91 => 2251799813685247\n    # n = 92 => 45035996273704976\n    # n = 93 => 9007199254740992\n    # n = 94 => 18014398509481984\n    # n = 95 => 3654352963731379\n    # n = 96 => 72057594037927936\n    # n = 97 => 14314482799342339\n    # n = 98 => 281474976710656\n    # n = 99 => 56294995342131079\n    # n = 100 => 1125899906842624\n    # n = 101 => 2251799813685248\n    # n = 102 => 45035996273704976\n    # n = 103 => 9007199254740992\n    # n = 104 => 18014398509481984\n    # n = 105 => 3654352963731379\n    # n = 106 => 72057594037927936\n    # n = 107 => 14314482799342339\n    # n = 108 => 281474976710656\n    # n = 109 => 56294995342131079\n    # n = 110 => 1125899906842624\n    # n = 111 => 2251799813685247\n    # n = 112 => 45035996273704976\n    # n = 113 => 9007199254740992\n    # n = 114 => 18014398509481984\n    # n = 115 => 3654352963731379\n    # n = 116 => 72057594037927936\n    # n = 117 => 14314482799342339\n    # n = 118 => 281474976710656\n    # n = 119 => 56294995342131079\n    # n = 120 => 1125899906842624\n    # n = 121 => 2251799813685248\n    # n = 122 => 45035996273704976\n    # n = 123 => 9007199254740992\n    # n = 124 => 18014398509481984\n    # n = 125 => 3654352963731379\n    # n = 126 => 72057594037927936\n    # n = 127 => 14314482799342339\n    # n = 128 => 281474976710656\n    # n = 129 => 56294995342131079\n    # n = 130 => 1125899906842624\n    # n = 131 => 2251799813685248\n    # n = 132 => 45035996273704976\n    # n = 133 => 9007199254740992\n    # n = 134 => 18014398509481984\n    # n = 135 => 3654352963731379\n    # n = 136 => 72057594037927936\n    # n = 137 => 14314482799342339\n    # n = 138 => 281474976710656\n    # n = 139 => 56294995342131079\n    # n = 140 => 1125899906842624\n    # n = 141 => 2251799813685248\n    # n = 142 => 45035996273704976\n    # n = 143 => 9007199254740992\n    # n = 144 => 18014398509481984\n    # n = 145 => 3654352963731379\n    # n = 146 => 72057594037927936\n    # n = 147 => 14314482799342339\n    # n = 148 => 281474976710656\n    # n = 149 => 56294995342131079\n    # n = 150 => 1125899906842624\n    # n = 151 => 2251799813685248\n    # n = 152 => 45035996273704976\n    # n = 153 => 90071992"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - 96\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in xrange(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in xrange(len(arr)):\n        if i%2 == 0:\n            if arr[i]%2 == 0:\n                sum_even = sum_even + arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            sum_even_index = sum_even_index + arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #arr = [1,2,3,4,5,6,7]\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                print(arr[i])\n    return sum(arr)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for index, item in enumerate(arr):\n        if index % 2 == 0:\n            result = result + item\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if (arr[i] % 2) == 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[0::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    else:\n        return sum(arr[::2])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return even_Power_Sum(n-1) + n**5\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n    if n == 0:\n        return 0\n    count = 0\n    i = 2\n    while count < n:\n        if i % 2 == 0:\n            count += 1\n            i = i * i * i * i * i\n    return i \n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = 0\n    for i in range(0,n):\n        if (i%2==0):\n            ans = ans + (i**5)\n    return ans\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n    # n = int(n)\n    # total = 0\n    # for i in range(n):\n    #     if i%2 == 0:\n    #         total += (i**5)\n    # print(total)\n    \neven_Power_Sum(200)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 4\n    else:\n        return even_Power_Sum(n - 4) + 2 * n\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    nums = []\n    total = 0\n    for i in range(n):\n        num = 2**(5*i)\n        total += num\n        nums.append(num)\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    i = 2\n    while i < n:\n        if i**5 % 2 == 0:\n            total += i**5\n        i += 1\n    return total\n    \n    \nprint even_Power_Sum(100)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<1:\n        return 0\n    sum = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            sum = sum + i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #initialize the power sum to zero\n    power_sum = 0\n    #set the while loop to iterate n times\n    while(n > 0):\n        #the while loop iterates until n is equal to zero\n        #increment the power sum by 4\n        power_sum += 4**n\n        #decrement n by 1\n        n -= 1\n    #return the power sum\n    return power_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [el[-1] for el in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    results = []\n    for item in test_list:\n        results.append(item[1])\n    return results\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list = []\n    for item in test_list:\n        list.append(item[-1])\n    return list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[-1] for elem in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub = []\n    for i in range(len(test_tup1)):\n        sub.append(test_tup1[i] - test_tup2[i])\n    return tuple(sub)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    diff_tup = ()\n    for i in range(len(test_tup1)):\n        diff_tup += (test_tup1[i] - test_tup2[i], )\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    s = len(test_tup1)\n    for i in range(0,s):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2])\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print('The result of subtrating elements of the first tuple by the elements of the second tuple with the same index is'+ str(test_tup1[0] - test_tup2[0]) + ',' + str(test_tup1[1] - test_tup2[1]) + ',' + str(test_tup1[2] - test_tup2[2]))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum( n-1) + n\ndef is_prime( num):\n    '''\n    Write a function that returns True if num is prime and False if it is not.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2 and num%2 == 0:\n        return False\n    else:\n        limit = int(math.sqrt(num))+1\n        for i in range(2,limit):\n            if num%i == 0:\n                return False\n    return True\ndef fibonacci_numbers( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci_numbers( n-1) + fibonacci_numbers(n-2)\ndef fibonacci_numbers_memoization( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth fibonacci number.\n    '''\n    memo = {}\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        if n in memo:\n            return memo[n]\n        else:\n            memo[n] = fibonacci_numbers_memoization( n-1) + fibonacci_numbers_memoization(n-2)\n            return memo[n]\ndef binary_search( a, x):\n    '''\n    Write a python function that takes in a sorted list and a target integer and returns the index of the target integer.\n    '''\n    low = 0\n    high = len(a)-1\n    while low <= high:\n        mid = (low+high)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            high = mid-1\n        else:\n            low = mid+1\n    return None\ndef add_all( num_list):\n    '''\n    Write a python function that takes in a list and sums all the elements in the list.\n    '''\n    if len(num_list) == 0:\n        return 0\n    else:\n        return num_list[0] + add_all( num_list[1:])\ndef add_all_memo( num_list):\n    '''\n    Write a python function that takes in a list and sums all the elements in the list.\n    '''\n    if len(num_list) == 0:\n        return 0\n    else:\n        if len(num_list) == 1:\n            return num_list[0]\n        else:\n            return num_list[0] + add_all_memo( num_list[1:])\ndef add_all_recursive( num_list):\n    '''\n    Write a python function that takes in a list and sums all the elements in the list.\n    '''\n    if len(num_list) == 0:\n        return 0\n    else:\n        return num_list[0] + add_all_recursive( num_list[1:])\ndef is_prime_in_binary_search( num):\n    '''\n    Write a python function that takes in a positive integer n and returns True if num is prime and False if it is not.\n    '''\n    if num <= 1:\n        return False\n    low = 2\n    high = int(math.sqrt(num))+1\n    while low <= high:\n        mid = (low+high)//2\n        if num%mid == 0:\n            return False\n        elif num%mid!= 0:\n            low = mid+1\n        else:\n            return False\n    return True\ndef create_binary_list_to_number( list):\n    '''\n    Write a python function that takes in a list of unique integers and returns the number that the list represents.\n    '''\n    if len(list) == 0:\n        return None\n    elif len(list) == 1:\n        return list[0]\n    else:\n        return list[0]*pow(2,len(list)-1) + create_binary_list_to_number( list[1:])\ndef create_number_to_binary_list( number):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of the binary representation of the number.\n    '''\n    if number == 0:\n        return [0]\n    elif number == 1:\n        return [1]\n    else:\n        return [number%2] + create_number_to_binary_list(number//2)\ndef make_int_list( list):\n    '''\n    Write a python function that takes in a list of integers and returns a list of the same size with all the integers converted to integers.\n    '''\n    return [int(x) for x in list]\ndef make_positive_list( list):\n    '''\n    Write a python function that takes in a list of integers and returns a list of the same size with all the negative integers converted to positives.\n    '''\n    return [x if x >= 0 else -x for x in list]\ndef make_positive_list_recursive( list):\n    '''\n    Write a python function that takes in a list of integers and returns a list of the same size with all the negative integers converted to positives.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        if list[0] >= 0:\n            return [list[0]] + make_positive_list_recursive(list[1:])\n        else:\n            return [list[0]] + make_positive_list_recursive(list[1:])\ndef find_longest_word_in_list( word_list):\n    '''\n    Write a python function that takes in a list of words and returns the length of the longest word in the list.\n    '''\n    if len(word_list) == 0:\n        return 0\n    else:\n        return len(max(word_list, key=len))\ndef count_words( word_list, word):\n    '''\n    Write a python function that takes in a list of words and a word and returns the number of times the word occurs in the list.\n    '''\n    if len(word_list) == 0:\n        return 0\n    elif word_list[0] == word:\n        return 1 + count_words( word_list[1:], word)\n    else:\n        return count_words( word_list[1:], word)\ndef rotate_letter( letter, rotate_by):\n    '''\n    Write a python function that takes in a letter and an integer and returns the letter rotated by the integer.\n    '''\n    if letter.isalpha():\n        return chr( ((ord(letter)-97+rotate_by)%26)+97)\n    else:\n        return letter\ndef rotate_letter_to_end( letter, rotate_by):\n    '''\n    Write a python function that takes in a letter and an integer and returns the letter rotated to the end by the integer.\n    '''\n    if letter.isalpha():\n        return chr( ((ord(letter)-97+rotate_by)%26)+97)\n    else:\n        return letter\ndef rotate_letter_to_start( letter, rotate_by):\n    '''\n    Write a python function that takes in a letter and an integer and returns the letter rotated to the start by the integer.\n    '''\n    if letter.isalpha():\n        return chr( ((ord(letter)-97+rotate_by)%26)+97)\n    else:\n        return letter\ndef encrypt( string, rotate_by):\n    '''\n    Write a python function that takes in a string and an integer and returns the string encrypted by rotating the letters by the integer.\n    '''\n    if string == '':\n        return ''\n    else:\n        return rotate_letter(string[0], rotate_by) + encrypt(string[1:], rotate_by)\ndef encrypt_rotate_by_in_place( string, rotate_by):\n    '''\n    Write a python function that takes in a strin"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            sum = sum + ( (-1) ** i) / math.factorial(i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    binomial_coeff_sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            binomial_coeff_sum += ((-1) ** (i + 1)) / (2 * i - 1)\n    return binomial_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_sum = 1 \n    for i in range(0,n):\n        binomial_sum = binomial_sum + math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    print(binomial_sum)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    def Binomial(n,k):\n        #returns the binomial coefficient\n        f = math.factorial\n        return f(n) / ( f(k) * f(n-k) )\n    \n    b_sum = 0\n    for i in range(2,n+1,2):\n        b_sum += Binomial(n,i)\n    return b_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the binomial coefficient to 1\n    binomial = 1\n    # for all the even numbers in the range of 0 to n\n    for i in range(0, n, 2):\n        # add the binomial coefficient to the sum\n        binomial = binomial + math.comb(n, i)\n    return binomial\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # I need a list to store the values of the binomial coefficients\n    binomial_coefficients = [0] * (n + 1)\n    binomial_coefficients[0] = 1\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    total = 0\n    for i in range( n + 1):\n        total += ((math.factorial(n) ) / ( math.factorial(i) * math.factorial( n - i) ) )\n    return total\n    \ndef binomial_Coeff_Series( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of first n terms of the binomial coefficient series.\n    '''\n    \n    series = 1\n    for i in range( n + 1):\n        series += (( (-1)**i ) / ( math.factorial(i) ))\n    return series\n    \ndef binomial_Coeff( n, k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    \n    coefficient = 0\n    for i in range( n + 1):\n        coefficient += (( (-1)**i ) / ( math.factorial(i) ))\n    return coefficient\n    \ndef factorial( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of n.\n    '''\n    \n    factorial = 1\n    for i in range( n + 1):\n        factorial *= (i + 1)\n    return factorial\n    \ndef binomial_coefficient( n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    \n    coefficient = 0\n    for i in range( n + 1):\n        coefficient += (((-1)**i ) / ( math.factorial(i) ))\n    return coefficient\n    \ndef permutation_count( n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the number of permutations of n with k number of elements.\n    '''\n    \n    numerator = binomial_coefficient( n, k)\n    denominator = factorial( n)\n    permutation = numerator / denominator\n    return permutation\n    \ndef print_permutations(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the number of permutations of n with k number of elements.\n    '''\n    \n    if k > n:\n        return \"There are no such permutations\"\n    else:\n        total = 1\n        for i in range( 1, n - k + 1):\n            total *= (n - i)\n        return total\n    \ndef print_permutation_of_length(n, k, length): \n    '''\n    Write a python function that takes in three positive integers n, k, and length and finds the number of permutations of length k of n.\n    '''\n    \n    total = 0\n    for i in range( n + 1):\n        total += permutation_count(i, k)\n    return total\n    \ndef print_binomial_coefficient( n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    \n    coefficient = 0\n    for i in range( n + 1):\n        coefficient += (((-1)**i ) / ( math.factorial(i) ))\n    return coefficient\n    \ndef print_binomial_coefficients( n): \n    '''\n    Write a python function that takes in a positive integer n and prints out all the binomial coefficients of n.\n    '''\n    \n    for i in range( n + 1):\n        print print_binomial_coefficient(i, n)\n        \ndef print_binomial_coefficient_sum( n): \n    '''\n    Write a python function that takes in a positive integer n and prints out the sum of all the binomial coefficients of n.\n    '''\n    \n    total = 0\n    for i in range( n + 1):\n        total += print_binomial_coefficient(i, n)\n    return total\n    \ndef print_binomial_coefficient_series( n): \n    '''\n    Write a python function that takes in a positive integer n and prints out the sum of all the terms of the binomial coefficient series.\n    '''\n    \n    series = 0\n    for i in range( n + 1):\n        series += binomial_Coeff_Series(i)\n    return series\n    \ndef print_even_binomial_coefficient_sum( n): \n    '''\n    Write a python function that takes in a positive integer n and prints out the sum of all the terms of the even index binomial coefficient series.\n    '''\n    \n    total = 0\n    for i in range( n + 1):\n        if i % 2 == 0:\n            total += even_binomial_Coeff_Sum(i)\n    return total\n    \ndef print_factorial_of_length(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and prints out the factorial of length k of n.\n    '''\n    \n    factorial = 1\n    for i in range( n + 1):\n        factorial *= (i + 1)\n    return factorial\n    \ndef print_factorial_of_length_series(n): \n    '''\n    Write a python function that takes in a positive integer n and prints out the sum of all the terms of the factorial of length series.\n    '''\n    \n    series = 1\n    for i in range( n + 1):\n        series += print_factorial_of_length(i, n)\n    return series\n    \ndef print_count_of_permutations_of_length(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and prints out the number of permutations of length k of n.\n    '''\n    \n    total = 0\n    for i in range( n + 1):\n        total += print_permutations(i, k)\n    return total\n    \ndef print_count_of_permutations_of_length_series(n): \n    '''\n    Write a python function that takes in a positive integer n and prints out the sum of all the terms of the permutations of length series.\n    '''\n    \n    series = 1\n    for i in range( n + 1):\n        series += print_count_of_permutations_of_length(i, n)\n    return series\n    \ndef print_count_of_permutations_of_length_and_length(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and prints out the number of permutations of length k and length k of n.\n    '''\n    \n    total = 0\n    for i in range( n + 1):\n        total += print_permutation_of_length(i, k, n)\n    return total\n    \ndef print_count_of_permutations_of_length_and_length_series(n): \n    '''\n    Write a python function that takes in a positive integer n and prints out the sum of all the terms of the permutations of length k and length k of n.\n    '''\n    \n    series = 0\n    for i in range( n + 1):\n        series += print_count_of_permutations_of_length_and_length(i, n)\n    return series\n    \ndef print_binomial_coefficient_of_length_and_length(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and prints out the binomial coefficient of length k and length k of n.\n    '''\n    \n    total = 0\n    for i in range( n + 1):\n        total += print_binomial_coefficient(i, k)\n    return total\n    \ndef print_binomial_coefficient_of_length_and_length_series(n): \n    '''\n    Write a python function that takes in a positive integer n and prints out the sum of all the terms of the binomial coefficient of length k and length k of n.\n    '''\n    \n    series = 0\n    for i in range( n + 1):\n        series += print_binomial_coefficient_of_length_and_length(i, n)\n    return series\n    \ndef print_binomial_coefficient_of_length_and"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        print(\"Sorry, no negative integers please\")\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 5\n    else:\n        return even_binomial_Coeff_Sum(n-1)+2*n-2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coefficients = [1] \n    for i in xrange( 1, n + 1 ): \n        binomial_coefficients.append(binomial_coefficients[i - 1] * i) \n    even_binomial_coefficient_sum = 0 \n    for index in xrange( 0, n, 2 ): \n        even_binomial_coefficient_sum += binomial_coefficients[index] \n    return even_binomial_coefficient_sum\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*(r**2)*h)\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    return (math.pi*(r**2)*h)/3\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius and returns the the volume.\n    '''\n    return (4/3)*(math.pi*(r**3))\n    \n    \ndef area_rectangle(a,b):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the area.\n    '''\n    return (a*b)\n    \n    \ndef area_triangle(a,b):\n    '''\n    Write a function that takes in the length and height of a triangle and returns the the area.\n    '''\n    return (a*b)/2\n    \n    \ndef area_square(a):\n    '''\n    Write a function that takes in the length and width of a square and returns the the area.\n    '''\n    return (a**2)\n    \n    \ndef area_trapezium(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area.\n    '''\n    return ((a+b)*h)/2\n    \n    \ndef area_circle(r):\n    '''\n    Write a function that takes in the radius and returns the the area.\n    '''\n    return (math.pi*r**2)\n    \n    \ndef area_square_perimeter(a):\n    '''\n    Write a function that takes in the length of a side and returns the the area and perimeter\n    '''\n    return (a**2,4*a)\n    \n    \ndef area_triangle_perimeter(a,b):\n    '''\n    Write a function that takes in the length and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return ((a+b)*2,2*a)\n    \n    \ndef area_rectangle_perimeter(a,b):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the area and perimeter.\n    '''\n    return (2*a+2*b,a+b)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_square_perimeter(a):\n    '''\n    Write a function that takes in the length of a side and returns the the area and perimeter\n    '''\n    return (4*a,4*a)\n    \n    \ndef area_circle_perimeter(r):\n    '''\n    Write a function that takes in the radius of a circle and returns the the area and perimeter.\n    '''\n    return (math.pi*r**2,2*math.pi*r)\n    \n    \ndef area_rectangle_perimeter(a,b):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the area and perimeter.\n    '''\n    return (2*a+2*b,a+b)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_square_perimeter(a):\n    '''\n    Write a function that takes in the length of a side and returns the the area and perimeter\n    '''\n    return (4*a,4*a)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_rectangle_perimeter(a,b):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the area and perimeter.\n    '''\n    return (2*a+2*b,a+b)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_circle_perimeter(r):\n    '''\n    Write a function that takes in the radius of a circle and returns the the area and perimeter.\n    '''\n    return (math.pi*r**2,2*math.pi*r)\n    \n    \ndef area_rectangle_perimeter(a,b):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the area and perimeter.\n    '''\n    return (2*a+2*b,a+b)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_square_perimeter(a):\n    '''\n    Write a function that takes in the length of a side and returns the the area and perimeter\n    '''\n    return (4*a,4*a)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_rectangle_perimeter(a,b):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the area and perimeter.\n    '''\n    return (2*a+2*b,a+b)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_circle_perimeter(r):\n    '''\n    Write a function that takes in the radius of a circle and returns the the area and perimeter.\n    '''\n    return (math.pi*r**2,2*math.pi*r)\n    \n    \ndef area_rectangle_perimeter(a,b):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the area and perimeter.\n    '''\n    return (2*a+2*b,a+b)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_square_perimeter(a):\n    '''\n    Write a function that takes in the length of a side and returns the the area and perimeter\n    '''\n    return (4*a,4*a)\n    \n    \ndef area_triangle_perimeter(a,b,h):\n    '''\n    Write a function that takes in the length,width and height of a right angle triangle and returns the the area and perimeter.\n    '''\n    return (a+b+h,a+b)\n    \n    \ndef area_rectangle_perimeter(a,b):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns the the area and perimeter.\n    '''\n    return (2*a+2*b,a+b)\n    \n    \ndef area"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=math.pi*math.pow(r,2)*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    return pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (pi*r**2*h)\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    output={}\n    \n    for key in dict:\n        if dict[key]>=n:\n            output[key]=dict[key]\n    \n    return output\n    \n    \n    "
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your code here\n    output = {}\n    for key,value in dict.items():\n        if value >= n:\n            output[key] = value\n    return output\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # for key in dict:\n    #     if dict[key] >= n:\n    #         print (key,dict[key])\n    #     else:\n    #         continue\n    # return None\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if dict[key]<n:\n            dict[key]=0\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            newdict[key] = dict[key]\n    return newdict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k,v in dict.items():\n        if v<n:\n            dict.pop(k)\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # first = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    # second = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n    # third = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n    # print(dict_filter(first, 3))\n    # print(dict_filter(second, 3))\n    # print(dict_filter(third, 3))\n    first = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    second = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n    third = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n    print(dict_filter(first, 3))\n    print(dict_filter(second, 3))\n    print(dict_filter(third, 3))\n    \ndef set_filter(set,n):\n    '''\n    Write a function that takes in a set and integer n and filters the set to only include entries with values greater than or equal to n.\n    '''\n    # first = set(['a', 'b', 'c', 'd', 'e'])\n    # second = set(['a', 'b', 'c', 'd', 'e', 'f'])\n    # third = set(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n    # print(set_filter(first, 3))\n    # print(set_filter(second, 3))\n    # print(set_filter(third, 3))\n    first = set(['a', 'b', 'c', 'd', 'e'])\n    second = set(['a', 'b', 'c', 'd', 'e', 'f'])\n    third = set(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n    print(set_filter(first, 3))\n    print(set_filter(second, 3))\n    print(set_filter(third, 3))\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and removes any duplicate values from the list.\n    '''\n    # first = ['a', 'b', 'a', 'c', 'b']\n    # second = ['a', 'b', 'c', 'a', 'b']\n    # third = ['a', 'a', 'a', 'b', 'a']\n    # print(remove_duplicates(first))\n    # print(remove_duplicates(second))\n    # print(remove_duplicates(third))\n    first = ['a', 'b', 'a', 'c', 'b']\n    second = ['a', 'b', 'c', 'a', 'b']\n    third = ['a', 'a', 'a', 'b', 'a']\n    print(remove_duplicates(first))\n    print(remove_duplicates(second))\n    print(remove_duplicates(third))\n    \ndef remove_duplicates_dict(dict):\n    '''\n    Write a function that takes in a dictionary and removes any duplicate values from the dictionary.\n    '''\n    # first = {'a': 1, 'b': 2, 'a': 1, 'c': 3, 'b': 2}\n    # second = {'a': 1, 'b': 2, 'c': 3, 'a': 1, 'b': 2}\n    # third = {'a': 1, 'b': 2, 'c': 3, 'a': 1, 'b': 2, 'a': 1}\n    # print(remove_duplicates_dict(first))\n    # print(remove_duplicates_dict(second))\n    # print(remove_duplicates_dict(third))\n    first = {'a': 1, 'b': 2, 'a': 1, 'c': 3, 'b': 2}\n    second = {'a': 1, 'b': 2, 'c': 3, 'a': 1, 'b': 2}\n    third = {'a': 1, 'b': 2, 'c': 3, 'a': 1, 'b': 2, 'a': 1}\n    print(remove_duplicates_dict(first))\n    print(remove_duplicates_dict(second))\n    print(remove_duplicates_dict(third))\n    \ndef order_first(list):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the integers are sorted in ascending order.\n    '''\n    # first = [3, 2, 1, 4, 5]\n    # second = [1, 2, 3, 4, 5]\n    # third = [1, 2, 3, 4, 5]\n    # print(order_first(first))\n    # print(order_first(second))\n    # print(order_first(third))\n    first = [3, 2, 1, 4, 5]\n    second = [1, 2, 3, 4, 5]\n    third = [1, 2, 3, 4, 5]\n    print(order_first(first))\n    print(order_first(second))\n    print(order_first(third))\n    \ndef order_last(list):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the integers are sorted in descending order.\n    '''\n    # first = [3, 2, 1, 4, 5]\n    # second = [1, 2, 3, 4, 5]\n    # third = [1, 2, 3, 4, 5]\n    # print(order_last(first))\n    # print(order_last(second))\n    # print(order_last(third))\n    first = [3, 2, 1, 4, 5]\n    second = [1, 2, 3, 4, 5]\n    third = [1, 2, 3, 4, 5]\n    print(order_last(first))\n    print(order_last(second))\n    print(order_last(third))\n    \ndef order_mix(list):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the integers are sorted in ascending order.\n    '''\n    # first = [3, 2, 1, 4, 5]\n    # second = [1, 2, 3, 4, 5]\n    # third = [1, 2, 3, 4, 5]\n    # print(order_mix(first))\n    # print(order_mix(second))\n    # print(order_mix(third))\n    first = [3, 2, 1, 4, 5]\n    second = [1, 2, 3, 4, 5]\n    third = [1, 2, 3, 4, 5]\n    print(order_mix(first))\n    print(order_mix(second))\n    print(order_mix(third))\n    \ndef order_third(list):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the integers are sorted in descending order.\n    '''\n    # first = [3, 2, 1, 4, 5]\n    # second = [1, 2, 3, 4, 5]\n    # third = [1, 2, 3, 4, 5]\n    # print(order_third(first))\n    # print(order_third(second))\n    # print(order_third(third))\n    first = [3, 2, 1, 4, 5]\n    second = [1, 2, 3, 4, 5]\n    third = [1, 2, 3, 4, 5]\n    print(order_third(first))\n    print(order_third(second))\n    print(order_third(third))\n    \ndef third_first(list):\n    '''\n    Write a function that takes in a list of integers and returns a new list in which the integers are sorted in descending order.\n    '''\n    # first = [3, 2, 1, 4, 5]\n    # second = [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v>=n}\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup[:test_tup.index(element)])\n    \n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    return len(test_tup[test_tup.index(element)+1:])\n    \n    \ndef longest_sequence(test_tup):\n    '''\n    Write a function to find the length of the longest consecutive sequence in the given tuple.\n    '''\n    list_of_sequences = []\n    for i in range(len(test_tup)-1):\n        if test_tup[i]==test_tup[i+1]-1:\n            list_of_sequences.append(test_tup[i])\n    return max(list_of_sequences)+1 if len(list_of_sequences)>0 else 0\n    \n    \ndef sequential_digits(test_tup):\n    '''\n    Write a function to find the digits in a sequence of number that has consecutive numbers.\n    '''\n    return len(set(str(i) for i in test_tup))\n    \n    \ndef is_consecutive(test_tup):\n    '''\n    Write a function to determine if the given tuple has consecutive numbers.\n    '''\n    return len(set(test_tup)) == 1\n    \n    \ndef max_consecutive_indices(test_tup):\n    '''\n    Write a function to find the maximum length of the consecutive numbers.\n    '''\n    list_of_consec_numbers = []\n    for i in range(len(test_tup)-1):\n        if test_tup[i]==test_tup[i+1]-1:\n            list_of_consec_numbers.append(test_tup[i])\n    return max(list_of_consec_numbers)+1 if len(list_of_consec_numbers)>0 else 0\n    \n    \ndef max_consecutive_indices_with_ones(test_tup):\n    '''\n    Write a function to find the maximum length of the consecutive numbers with the occurrence of the 1.\n    '''\n    return max(test_tup.count(1),max_consecutive_indices(test_tup))\n    \n    \ndef unique_elements(test_tup):\n    '''\n    Write a function to find the number of unique elements in the given tuple.\n    '''\n    return len(set(test_tup))\n    \n    \ndef transpose_tuple(test_tup):\n    '''\n    Write a function to transpose a tuple.\n    '''\n    return tuple(zip(*test_tup))\n    \n    \ndef find_first_index(test_tup):\n    '''\n    Write a function to find the index of the first occurrence of the given element in the given tuple.\n    '''\n    return test_tup.index(element) if element in test_tup else -1\n    \n    \ndef check_sequence(test_tup):\n    '''\n    Write a function to check if the given tuple is a sequence.\n    '''\n    return max_consecutive_indices(test_tup) > 0\n    \n    \ndef check_sequence_with_ones(test_tup):\n    '''\n    Write a function to check if the given tuple is a sequence with the occurrence of the 1.\n    '''\n    return max_consecutive_indices_with_ones(test_tup) > 0\n    \n    \ndef zip_list(test_tup):\n    '''\n    Write a function to zip a tuple and a list together.\n    '''\n    return tuple(zip(test_tup,list(range(len(test_tup)))))\n    \n    \ndef unzip_tuple(test_tup):\n    '''\n    Write a function to unzip a tuple and a list together.\n    '''\n    return list(zip(*test_tup))\n    \n    \ndef find_duplicate_tuple(test_tup):\n    '''\n    Write a function to find the duplicate tuple in the given tuple.\n    '''\n    return [tup for tup in test_tup if tup in test_tup[test_tup.index(tup)+1:]]\n    \n    \ndef is_prime(num):\n    '''\n    Write a function to determine whether the given number is prime.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num%2 == 0:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num%i == 0:\n            return False\n    return True\n    \n    \ndef find_prime_factors(num):\n    '''\n    Write a function to find all the prime factors of the given number.\n    '''\n    list_of_prime_factors = []\n    for i in range(2,int(num**0.5)+1):\n        if num%i == 0:\n            list_of_prime_factors.append(i)\n            num = num/i\n    return list_of_prime_factors\n    \n    \ndef find_prime_factors_with_numbers(num):\n    '''\n    Write a function to find all the prime factors of the given number using numbers.\n    '''\n    list_of_prime_factors = []\n    for i in range(2,num+1):\n        if num%i == 0:\n            list_of_prime_factors.append(i)\n            num = num/i\n    return list_of_prime_factors\n    \n    \ndef find_prime_factors_with_iterative_method(num):\n    '''\n    Write a function to find all the prime factors of the given number using iterative method.\n    '''\n    list_of_prime_factors = []\n    for i in range(2,int(num**0.5)+1):\n        if num%i == 0:\n            num = num/i\n            list_of_prime_factors.append(i)\n    if num > 1:\n        list_of_prime_factors.append(num)\n    return list_of_prime_factors\n    \n    \ndef find_prime_factors_with_recursive_method(num):\n    '''\n    Write a function to find all the prime factors of the given number using recursive method.\n    '''\n    def rec_find_prime_factors(num,list_of_prime_factors):\n        for i in range(2,int(num**0.5)+1):\n            if num%i == 0:\n                num = num/i\n                list_of_prime_factors.append(i)\n                rec_find_prime_factors(num,list_of_prime_factors)\n    if num > 1:\n        list_of_prime_factors = [num]\n        rec_find_prime_factors(num,list_of_prime_factors)\n    return list_of_prime_factors\n    \n    \ndef find_duplicate_numbers(test_tup):\n    '''\n    Write a function to find all the duplicate numbers in the given tuple.\n    '''\n    return [i for i in test_tup if test_tup.count(i)>1]\n    \n    \ndef find_duplicate_numbers_with_numbers(test_tup):\n    '''\n    Write a function to find all the duplicate numbers in the given tuple with numbers.\n    '''\n    list_of_duplicate_numbers = []\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            list_of_duplicate_numbers.append(i)\n    return list_of_duplicate_numbers\n    \n    \ndef find_duplicate_numbers_with_methods(test_tup):\n    '''\n    Write a function to find all the duplicate numbers in the given tuple using methods.\n    '''\n    return [i for i in test_tup if test_tup.count(i)>1]\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    length = len(test_tup)\n    count = 0\n    for i in xrange(length):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not test_tup:\n        return 0\n    return len(test_tup[:test_tup.index(test_tup[-1])])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([i for i in test_tup if i==test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup[0] == test_tup[1]:\n        return 0\n    elif test_tup[0] > test_tup[1]:\n        return 0\n    else:\n        return count_first_elements(test_tup[:1])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == 0:\n            n += 1\n        else:\n            break\n    return n\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_first_elements = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            num_first_elements += 1\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                num_first_elements += 1\n            else:\n                break\n    return num_first_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    print 'function call'\n    print 'count_first_elements()'\n    print 'type(test_tup) is: ', type(test_tup)\n    print 'test_tup is: ', test_tup\n    print 'test_tup[0] is: ', test_tup[0]\n    print 'type(test_tup[0]) is: ', type(test_tup[0])\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elements = {}\n    for i in test_tup:\n        if i not in first_elements:\n            first_elements[i] = 1\n        else:\n            first_elements[i] += 1\n    return first_elements\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nth = (10*n-1)**2\n    return nth+2*nth\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (n + 1) * (n - 1)) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    num = 1\n    cnt = 1\n    while num!= 0:\n        num = ((n * (n + 1)) / 2) + cnt\n        cnt += 1\n        if cnt > 10:\n            return False\n    return True\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (n * n - 1)) / 2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n * n + 1) / 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    sum = 0\n    i = 1\n    while True:\n        n = n - 9*i*(i+1)/2\n        if n < 0:\n            break\n        sum += n\n        i += 1\n    return sum\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    summation = 1\n    for i in range(1, n):\n        summation += i\n        if summation * 10 - (i * 10) ** 2 == n:\n            return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    s = str(n)\n    #if n is divisible by 9, then it is a decagonal number\n    if n % 9 == 0:\n        return True\n    #if n is divisible by 3 and 5, then it is a decagonal number\n    if n % 15 == 0:\n        return True\n    for i in range(2, len(s)):\n        if int(s[i]) - int(s[i-1])!= int(s[i-1]) - int(s[i-2]):\n            return False\n    return True\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    c = 1\n    deca = 1\n    while c < n:\n        deca += 1\n        c += 10\n    return deca\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index = index + 1\n    if found:\n        return (True, index)\n    else:\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if item not in dlist:\n        return False, -1\n    else:\n        for i in range(len(dlist)):\n            if dlist[i] == item:\n                return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    for el in dlist:\n        if el == item:\n            found = True\n            break\n        pos += 1\n    if found:\n        return True, pos\n    else:\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return(False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, el in enumerate(dlist):\n        if el == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_unique = []\n    for i in test_list:\n        if i not in test_list_unique:\n            test_list_unique.append(i)\n    print(test_list_unique)\n    if len(test_list) == len(test_list_unique):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        if test_list.count(x)>1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = []\n    for x in test_list:\n        if x not in temp_list:\n            temp_list.append(x)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return True\n    else:\n        flag = True\n        for i in xrange(len(test_list)):\n            for j in xrange(i+1, len(test_list)):\n                if test_list[i] == test_list[j]:\n                    flag = False\n        return flag\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) < 0:\n        return False\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    m = len(nums1)\n    n = len(nums2)\n    res = []\n    for i in range(m):\n        res.append(nums1[i] - nums2[i])\n    return res\ndef split_list(nums):\n    '''\n    Write a function to split a list into two equal-sized lists.\n    '''\n    m = len(nums)\n    half = m/2\n    res = []\n    for i in range(half):\n        res.append(nums[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.extend(nums2)\n    nums1.sort()\n    l = len(nums1)\n    if l % 2 == 0:\n        return (nums1[l/2 - 1] + nums1[l/2])/2.0\n    else:\n        return nums1[l/2]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x1-x2 for x1,x2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for num1,num2 in zip(nums1,nums2):\n        result.append(num1-num2)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_num = []\n    for num1, num2 in zip(nums1,nums2):\n        sub_num.append(num1-num2)\n    return sub_num\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    r = []\n    for n1, n2 in zip(nums1,nums2):\n        r.append(n1-n2)\n    return r\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    i = 0\n    sub_list = []\n    while i < len(nums1):\n        sub_list.append(nums1[i] - nums2[i])\n        i+=1\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in xrange(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)==len(nums2):\n        sub_list = []\n        for i in range(len(nums1)):\n            sub_list.append(nums1[i]-nums2[i])\n        return sub_list\n    else:\n        return \"input lengths not the same\"\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return True\n    for i in range(10):\n        for j in range(len(n)):\n            if n.count(str(i)) > n.count(str(i)):\n                return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    frequency = [0] * 10\n    for i in n:\n        frequency[int(i)] += 1\n    for i in frequency:\n        if i < int(i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    val = str(n)\n    digits = [int(x) for x in val]\n    freq = [0] * 10\n    for d in digits:\n        freq[d] += 1\n    for i in xrange(10):\n        if freq[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0]*10\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = int(n)\n    while num > 0:\n        if num % 10 > 0:\n            if num % 10!= (num // 10) % 10:\n                return False\n        num //= 10\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    flag = False\n    d = {}\n    s = str(n)\n    if len(s) == 1:\n        return True\n    for i in s:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    for k, v in d.items():\n        if v > d[k]:\n            flag = True\n    return flag\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n==0:\n        return True\n    digits = [int(i) for i in str(n)]\n    for i in digits:\n        if(digits.count(i)>=i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency_array = [0]*10\n    while n!= 0:\n        remainder = n % 10\n        frequency_array[remainder] += 1\n        n = n // 10\n    for i in range(len(frequency_array)):\n        if frequency_array[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if int(n) <= 0:\n        return \"invalid\"\n    else:\n        l = [int(c) for c in str(n)]\n        max = max(l)\n        c = 0\n        for i in l:\n            if i <= i:\n                c += 1\n        if c == len(l):\n            return \"valid\"\n        else:\n            return \"invalid\"\nprint validate(1234)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    c=0\n    while(n>=10):\n        n=n/10\n        c=c+1\n    \n    n=n\n    return n\n    \ndef checkfreq(a,b):\n    '''\n    Write a python function takes in two numbers a and b. If b is a substring of a, return true. Else return false.\n    '''\n    return a.find(b)\n    \ndef isperm(a,b):\n    '''\n    Write a python function takes in two integers a and b. If b is a permutation of a, return true. Else return false.\n    '''\n    c=0\n    d=0\n    if(len(a)!=len(b)):\n        return False\n    for i in range(len(a)):\n        if(a[i]==b[i]):\n            c=c+1\n    if(c==len(a)):\n        return True\n    else:\n        return False\n    \ndef iscombo(a,b):\n    '''\n    Write a python function takes in two integers a and b. If b is a combination of a, return true. Else return false.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        for i in range(len(a)):\n            if(a[i]==b[i]):\n                pass\n            else:\n                return False\n        return True\n    \ndef isanagram(a,b):\n    '''\n    Write a python function takes in two integers a and b. If b is an anagram of a, return true. Else return false.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    a=sorted(a)\n    b=sorted(b)\n    if(a==b):\n        return True\n    else:\n        return False\n    \ndef isunique(a):\n    '''\n    Write a python function takes in integer a. If a is unique, return true. Else return false.\n    '''\n    c=0\n    for i in range(len(a)):\n        if(a[i]==i):\n            c=c+1\n    if(c==len(a)):\n        return True\n    else:\n        return False\n    \ndef findlast(a):\n    '''\n    Write a python function takes in integer a. If a is unique, return true. Else return false.\n    '''\n    b=a\n    for i in range(len(a)):\n        if(a[i]==i):\n            b=b[i+1:]\n    return b\n    \ndef findfirst(a):\n    '''\n    Write a python function takes in integer a. If a is unique, return true. Else return false.\n    '''\n    b=a\n    for i in range(len(a)):\n        if(a[i]==i):\n            b=b[:i]\n    return b\n    \ndef isvow(a):\n    '''\n    Write a python function takes in integer a. If a is a vowel, return true. Else return false.\n    '''\n    if(a=='a' or a=='e' or a=='i' or a=='o' or a=='u'):\n        return True\n    else:\n        return False\n    \ndef iscons(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    if(a=='b' or a=='c' or a=='d' or a=='f' or a=='g' or a=='h' or a=='j' or a=='k' or a=='l' or a=='m' or a=='n' or a=='p' or a=='q' or a=='r' or a=='s' or a=='t' or a=='v' or a=='w' or a=='x' or a=='y' or a=='z'):\n        return True\n    else:\n        return False\n    \ndef cntvow(a):\n    '''\n    Write a python function takes in integer a. If a is a vowel, return true. Else return false.\n    '''\n    b=a\n    c=0\n    for i in range(len(a)):\n        if(a[i]=='a' or a[i]=='e' or a[i]=='i' or a[i]=='o' or a[i]=='u'):\n            c=c+1\n    b=str(b)\n    return c\n    \ndef cntcons(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    b=a\n    c=0\n    for i in range(len(a)):\n        if(a[i]=='b' or a[i]=='c' or a[i]=='d' or a[i]=='f' or a[i]=='g' or a[i]=='h' or a[i]=='j' or a[i]=='k' or a[i]=='l' or a[i]=='m' or a[i]=='n' or a[i]=='p' or a[i]=='q' or a[i]=='r' or a[i]=='s' or a[i]=='t' or a[i]=='v' or a[i]=='w' or a[i]=='x' or a[i]=='y' or a[i]=='z'):\n            c=c+1\n    b=str(b)\n    return c\n    \ndef cntalpha(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    b=a\n    c=0\n    for i in range(len(a)):\n        if(a[i].isalpha()):\n            c=c+1\n    b=str(b)\n    return c\n    \ndef cntnum(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    b=a\n    c=0\n    for i in range(len(a)):\n        if(a[i].isnumeric()):\n            c=c+1\n    b=str(b)\n    return c\n    \ndef cntspc(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    b=a\n    c=0\n    for i in range(len(a)):\n        if(a[i]==' '):\n            c=c+1\n    b=str(b)\n    return c\n    \ndef charfreq(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    c=0\n    b=a\n    for i in range(len(a)):\n        c=c+1\n    return c\n    \ndef wordfreq(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    c=0\n    b=a\n    for i in range(len(a)):\n        if(a[i]==' '):\n            c=c+1\n    return c\n    \ndef numberfreq(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    c=0\n    b=a\n    for i in range(len(a)):\n        if(a[i].isnumeric()):\n            c=c+1\n    return c\n    \ndef sortfreq(a):\n    '''\n    Write a python function takes in integer a. If a is a consonant, return true. Else return false.\n    '''\n    c=0\n    b=a\n    for i in range(len(a)):\n        "
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)>0:\n        return list[0]==element\n    else:\n        return True\ndef check_element_list(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return len(set(list)) <= 1\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    assert type(list) == type([])\n    \n    if element not in list:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element)!= len(list):\n        return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    element = element.lower()\n    result = True\n    for item in list:\n        item = item.lower()\n        if item!= element:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if(len(text)<=0):\n        return False\n    if(len(text)==1):\n        return False\n    if(text[0]=='a'):\n        if(len(text)==2):\n            return False\n        if(text[1]=='b'):\n            return True\n        if(text[1]=='b'):\n            if(text[2]=='b'):\n                return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[ab]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    return re.search(r'ab+',text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'ab{2,3}', text)\n    if match:\n        print match.group()\n    else:\n        print \"No match found\"\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'(a{2}|b{3})',text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.search(\"ab*\", text)\n    if x:\n        print(x.group(0))\n    else:\n        print(\"failure\")\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('[ab]{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    if text.find('a' + 'b')!= -1:\n        if text.find('b' + 'b' + 'b')!= -1:\n            return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(k):\n        a = max_sub_array_sum(a, n)\n    return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    for i in range(n - k + 1):\n        print(a[i:i+k])\n        temp = 0\n        for j in range(k):\n            temp += a[i + j]\n        if max < temp:\n            max = temp\n    return max\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_so_far = -1 * sys.maxsize\n    for i in range(n - k + 1):\n        max_so_far = max(max_so_far, sum(a[i:i+k]))\n    return max_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    print(\"\\nMax sum of subarray repetition is :\")\n    for i in range(n-k+1):\n        print(sum(a[i:i+k]),end=\" \")\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = 0\n    previous_sum = 0\n    counter = 0\n    for i in range(n):\n        if counter == k:\n            result = max(result, previous_sum)\n            previous_sum -= a[i]\n            counter = 0\n        else:\n            previous_sum += a[i]\n            counter += 1\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    count = [0]*(k+1)\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if i - j >= 0:\n                count[j] = max(count[j], count[j-1] + a[i])\n            else:\n                count[j] = a[i]\n    return count[k]\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(k):\n        max_so_far = a[0]\n        max_ending_here = 0\n        for j in range(1, n):\n            max_ending_here = max_ending_here + a[j]\n            max_ending_here = max(max_ending_here, a[j])\n            max_so_far = max(max_so_far, max_ending_here)\n        a = max_so_far\n    return max_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = a[0]\n    nk = n*k\n    max_sub = a[0]\n    if nk == 0:\n        return max_sub\n    for i in range(1, nk):\n        if i%k == 0:\n            s += a[i%n]\n            max_sub = max(max_sub, s)\n        else:\n            s += a[i%n] - a[(i-1)%n]\n            max_sub = max(max_sub, s)\n    return max_sub\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    start = 0\n    end = 0\n    max_sum = 0\n    for i in range(0, n):\n        max_sum += a[i]\n        if end - start + 1 < k:\n            end = i\n        else:\n            start = i - k + 1\n            end = i\n            max_sum -= a[start]\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 4 * square_Sum(n-1) + (n-1)**2\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n=int(n)\n    if n<=0:\n        return 0\n    else:\n        return int(n*(n+1)*(2*n+1)/6)\n    \ndef cube_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of cubes of first n even natural numbers.\n    '''\n    n=int(n)\n    if n<=0:\n        return 0\n    else:\n        return int(n*(n+1)*(2*n+1)*(3*n+1)/24)\n    \ndef my_sum(x):  \n    '''\n    Write a python function that takes a list of integers and returns the sum of the even elements in the list.\n    '''\n    if len(x)<1:\n        return 0\n    else:\n        return int(sum(x[1::2]))\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    assert type(n)==int and n>=0\n    return n*(n+1)*(2*n+1)/6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return (n*(n+1))//2\n        \n        \ndef triple_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return (n*(n+1)*(2*n+1))//6\n        \n        \ndef is_Power_Of_Two(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a power of two and False otherwise.\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return (n & (n - 1) == 0) and is_Power_Of_Two(n >> 1)\n        \n        \ndef is_Palindrome(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a palindrome and False otherwise.\n    '''\n    return str(n) == str(n)[::-1]\n        \n        \ndef factorial(n):  \n    '''\n    Write a python function takes in an integer n and returns n!\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \n        \ndef check_Uppercase(s):  \n    '''\n    Write a python function takes in a string s and returns True if the string has all uppercase characters and False otherwise.\n    '''\n    for c in s:\n        if ord(c) < 65 or ord(c) > 90:\n            return False\n    return True\n        \n        \ndef check_Lowercase(s):  \n    '''\n    Write a python function takes in a string s and returns True if the string has all lowercase characters and False otherwise.\n    '''\n    for c in s:\n        if ord(c) < 97 or ord(c) > 122:\n            return False\n    return True\n        \n        \ndef check_Digit(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a digit and False otherwise.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return False\n    else:\n        return n % 10 == 0\n        \n        \ndef is_Prime(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a prime number and False otherwise.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return not any(n % i == 0 for i in range(2, int(n**0.5) + 1))\n        \n        \ndef check_Even(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is an even number and False otherwise.\n    '''\n    if n == 0:\n        return False\n    else:\n        return n % 2 == 0\n        \n        \ndef check_Odd(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is an odd number and False otherwise.\n    '''\n    if n == 0:\n        return False\n    else:\n        return n % 2!= 0\n        \n        \ndef check_Fibonacci(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a Fibonacci number and False otherwise.\n    '''\n    if n == 0 or n == 1:\n        return True\n    else:\n        return check_Fibonacci(n-1) and check_Fibonacci(n-2)\n        \n        \ndef check_Permutation(s1, s2):  \n    '''\n    Write a python function takes in two strings s1 and s2 and returns True if s1 and s2 are permutations of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        return sorted(s1) == sorted(s2)\n        \n        \ndef check_Anagram(s1, s2):  \n    '''\n    Write a python function takes in two strings s1 and s2 and returns True if s1 and s2 are anagrams of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        return sorted(s1) == sorted(s2)\n        \n        \ndef check_Valid_Word(s):  \n    '''\n    Write a python function takes in a string s and returns True if s is a valid word and False otherwise.\n    '''\n    return all(ord(c) < 123 and ord(c) > 96 for c in s)\n        \n        \ndef get_Factors(n):  \n    '''\n    Write a python function takes in an integer n and returns a sorted list of the number of each of the prime factors of n.\n    '''\n    if n == 1:\n        return []\n    if check_Prime(n):\n        return [n]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return get_Factors(n//i)+get_Factors(i)\n    return get_Factors(n//n)\n        \n        \ndef gcd(a, b):  \n    '''\n    Write a python function takes in two integers a and b and returns their greatest common divisor.\n    '''\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n        \n        \ndef lcm(a, b):  \n    '''\n    Write a python function takes in two integers a and b and returns their least common multiple.\n    '''\n    return (a * b) // gcd(a, b)\n        \n        \ndef is_Prime_N(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a prime number and False otherwise.\n    '''\n    if n < 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n        \n        \ndef is_Palindrome_N(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a palindrome and False otherwise.\n    '''\n    if n < 1:\n        return False\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \n        \ndef check_Palindrome_N(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a palindrome and False otherwise.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 0:\n        return True\n    else:\n        return is_Palindrome(n) and check_Palindrome_N(n // 10)\n        \n        \ndef check_Prime_N(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a prime number and False otherwise.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return False\n    elif n == 0:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_Prime(n) and check_Prime_N(n // 10)\n        \n        \ndef check_Uppercase_N(n):  \n    '''\n    Write a python function takes in an integer n and returns True if n is a string of uppercase letters and False otherwise.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return False\n    elif n == 0:\n        return False\n    else:\n        return check_Uppercase(n) and check_Uppercase_N(n // 10)\n        \n        \ndef check_Lowercase_"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return int(0.5 * n * (n + 1) * (2 * n + 1))\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # for i in range(2,n+1,2):\n    #     for j in range(2,i):\n    #         if i%j == 0:\n    #             break\n    #     else:\n    #         print(i**2)\n    return sum([i**2 for i in range(2,n+1,2)])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    #A palindrome is a word or a number that reads the same backwards and forwards.\n    #The function below checks if the input is a palindrome\n    def is_Palindrome(word):\n        '''\n        Function takes in a word, returns True if the word is a palindrome\n        '''\n        return word == word[::-1]\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    return (n**2) + square_Sum(n-2)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for i in list1:\n        l.append(len(i))\n    return max(l)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for list in list1:\n        lengths.append(len(list))\n    return lengths.index(max(lengths))\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for each_list in list1:\n        if len(each_list) > length:\n            length = len(each_list)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = len(list1[0])\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for element in list1:\n        if max_length < len(element):\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #return length of longest list\n    return len(max(list1,key=len))\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for sublist in list1:\n        if len(sublist)>max_len:\n            max_len=len(sublist)\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    if n < 0 or k < 0:\n        return 0\n    \n    result = 0\n    for c in range(1, k + 1):\n        result += count_no_of_ways(n - 1, k - c)\n    return result\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #assume k == 2\n    #assert n == len(colors)\n    #assert k == len(colors[0])\n    \n    #F[i][j] - number of ways of painting i posts of colors j\n    #F[i][j] = F[i-1][j] + F[i-1][j-1]\n    #if i == 0:\n    #    F[i][j] = 1\n    #else:\n    #    F[i][j] = F[i-1][j-1] + F[i-1][j]\n    \n    #create an array of size n, each element is initialized to 0\n    F = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    #F[i][j] = F[i-1][j] + F[i-1][j-1]\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0:\n                F[i][j] = 1\n            else:\n                F[i][j] = F[i-1][j] + F[i-1][j-1]\n    \n    return F[n][k]\n    \ndef find_number_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    assert n == len(colors)\n    assert k == len(colors[0])\n    \n    #assume k == 2\n    #assert n == len(colors)\n    #assert k == len(colors[0])\n    \n    F = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    #F[i][j] = F[i-1][j] + F[i-1][j-1]\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0:\n                F[i][j] = 1\n            else:\n                F[i][j] = F[i-1][j] + F[i-1][j-1]\n    \n    return F[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (k > n): \n        return 0\n    if (n == 0):\n        return 1\n    if (n == 1):\n        return k\n    return count_no_of_ways(n-1, k) + (k*k) + count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    table = [[0 for i in xrange(k)] for j in xrange(n)]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # dp[i] = Number of ways to paint the fence with i colors.\n    dp = [0 for i in range(n)]\n    # base case is when there are no more than 2 adjacent post have same color\n    for i in range(2, k+1):\n        dp[0] = 1\n        for j in range(1, n):\n            dp[j] = dp[j-1] + (dp[j] if j > 0 and j < n-1 and array[j] == array[j-1] and array[j] == array[j+1] else 0)\n    return dp[n-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 3: \n        return 0 \n    if k < 1: \n        return 0 \n    if n == 3: \n        return 1 \n    ways = [0] * (n + 1)\n    ways[1] = 1 \n    ways[2] = 2 \n    for i in range(3, n + 1): \n        ways[i] = ways[i - 1] + ways[i - 2]\n    return ways[n] \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1:\n        return k\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef rfind(n,m):  \n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    return n%m\n    \ndef div(n,m):  \n    '''\n    Write a python function to divide two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n    \ndef ldiv(n,m):  \n    '''\n    Write a python function to divide two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef mod(n,m):  \n    '''\n    Write a python function to find modulo of two numbers (rounded down to the nearest integer).\n    '''\n    return n%m\n    \ndef rmod(n,m):  \n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    return n%m\n    \ndef pow(n,m):  \n    '''\n    Write a python function to find power of two numbers.\n    '''\n    return n**m\n    \ndef rpow(n,m):  \n    '''\n    Write a python function to find power of two numbers.\n    '''\n    return n**m\n    \ndef fact(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n < 2:\n        return 1\n    return n*fact(n-1)\n    \ndef rfact(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n < 2:\n        return 1\n    return n*rfact(n-1)\n    \ndef sqrt(n):\n    '''\n    Write a python function to find square root of a number.\n    '''\n    return n**(1/2)\n    \ndef rsqrt(n):\n    '''\n    Write a python function to find square root of a number.\n    '''\n    return n**(1/2)\n    \ndef lcm(n,m):  \n    '''\n    Write a python function to find lowest common multiple of two numbers.\n    '''\n    return n*m//gcd(n,m)\n    \ndef lcm(n,m):  \n    '''\n    Write a python function to find lowest common multiple of two numbers.\n    '''\n    return n*m//gcd(n,m)\n    \ndef hcf(n,m):  \n    '''\n    Write a python function to find highest common factor of two numbers.\n    '''\n    return gcd(n,m)\n    \ndef hcf(n,m):  \n    '''\n    Write a python function to find highest common factor of two numbers.\n    '''\n    return gcd(n,m)\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1 or n == 0:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1 or n == 0:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    factors = []\n    if n < 2:\n        return factors\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3,int(sqrt(n))+1,2):\n        while n%i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    factors = []\n    if n < 2:\n        return factors\n    for i in range(2,int(sqrt(n))+1):\n        while n%i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n    \ndef primes(n):\n    '''\n    Write a python function to find primes upto a given number.\n    '''\n    primes = []\n    if n < 2:\n        return primes\n    for i in range(2,n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    a = str(n)\n    if a == a[::-1]:\n        return True\n    return False\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    a = str(n)\n    if a == a[::-1]:\n        return True\n    return False\n    \ndef is_pandigital(n):\n    '''\n    Write a python function to check if a number is pandigital or not.\n    '''\n    a = set(str(n))\n    if len(a) == 9:\n        return True\n    return False\n    \ndef is_pandigital(n):\n    '''\n    Write a python function to check if a number is pandigital or not.\n    '''\n    a = set(str(n))\n    if len(a) == 9:\n        return True\n    return False\n    \ndef reverse(n):\n    '''\n    Write a python function to find the reverse of a number.\n    '''\n    return int(str(n)[::-1])\n    \ndef reverse(n):\n    '''\n    Write a python function to find the reverse of a number.\n    '''\n    return int(str(n)[::-1])\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n))\n    \ndef sum_digit("
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    \n    q = n//m\n    r = n%m\n    \n    if r == 0:\n        return q\n    else:\n        return q+1\n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Undefined\"\n    elif n%m == 0:\n        return n//m\n    else:\n        return n//m + 1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    return (n//m) + (n//m)%2\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print (n,m)\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2+w**2)-(h**2+w**2)\ndef min_time_to_reach_dest(x,y,c):\n    '''\n    Find the minimum amount of time in seconds to reach destination (x,y) from the starting position (c)\n    '''\n    return abs(c[0]-x)+abs(c[1]-y)\ndef myround(x, base=5):\n    '''\n    Round x to the nearest base.\n    '''\n    return int(base * round(float(x)/base))\ndef best_move_to_dest(x,y,c,d,e,f):\n    '''\n    Given the destination (x,y), the current position (c), the direction to turn (d), the\n    distance to travel (e), and the final destination (f), return the best move to reach the\n    final destination.\n    '''\n    if d == 'North':\n        x1=c[0]\n        y1=c[1]-e\n    elif d == 'South':\n        x1=c[0]\n        y1=c[1]+e\n    elif d == 'East':\n        x1=c[0]+e\n        y1=c[1]\n    elif d == 'West':\n        x1=c[0]-e\n        y1=c[1]\n    elif d == 'Stop':\n        x1=c[0]\n        y1=c[1]\n    elif d == 'TurnRight':\n        a = math.atan(e/d)\n        x1=c[0]+int(math.cos(a)*e)\n        y1=c[1]+int(math.sin(a)*e)\n    elif d == 'TurnLeft':\n        a = math.atan(e/d)\n        x1=c[0]+int(math.cos(a)*e)\n        y1=c[1]+int(math.sin(a)*e)\n    else:\n        print \"invalid direction\"\n    if x1 == x and y1 == y:\n        return 'Stop'\n    else:\n        return d\ndef best_move_to_dest2(x,y,c,d,e,f):\n    '''\n    Given the destination (x,y), the current position (c), the direction to turn (d), the\n    distance to travel (e), and the final destination (f), return the best move to reach the\n    final destination.\n    '''\n    if d == 'North':\n        x1=c[0]\n        y1=c[1]-e\n    elif d == 'South':\n        x1=c[0]\n        y1=c[1]+e\n    elif d == 'East':\n        x1=c[0]+e\n        y1=c[1]\n    elif d == 'West':\n        x1=c[0]-e\n        y1=c[1]\n    elif d == 'Stop':\n        x1=c[0]\n        y1=c[1]\n    elif d == 'TurnRight':\n        a = math.atan(e/d)\n        x1=c[0]+int(math.cos(a)*e)\n        y1=c[1]+int(math.sin(a)*e)\n    elif d == 'TurnLeft':\n        a = math.atan(e/d)\n        x1=c[0]+int(math.cos(a)*e)\n        y1=c[1]+int(math.sin(a)*e)\n    else:\n        print \"invalid direction\"\n    if x1 == x and y1 == y:\n        return 'Stop'\n    elif c[0] == x1 and c[1] == y1:\n        return 'TurnRight'\n    elif c[0] == x1 and c[1] < y1:\n        return 'TurnLeft'\n    elif c[0] == x1 and c[1] > y1:\n        return 'TurnRight'\n    elif c[0] < x1 and c[1] == y1:\n        return 'TurnLeft'\n    elif c[0] > x1 and c[1] == y1:\n        return 'TurnRight'\n    else:\n        return 'Stop'\ndef best_move_to_dest3(x,y,c,d,e,f):\n    '''\n    Given the destination (x,y), the current position (c), the direction to turn (d), the\n    distance to travel (e), and the final destination (f), return the best move to reach the\n    final destination.\n    '''\n    if d == 'North':\n        x1=c[0]\n        y1=c[1]-e\n    elif d == 'South':\n        x1=c[0]\n        y1=c[1]+e\n    elif d == 'East':\n        x1=c[0]+e\n        y1=c[1]\n    elif d == 'West':\n        x1=c[0]-e\n        y1=c[1]\n    elif d == 'Stop':\n        x1=c[0]\n        y1=c[1]\n    elif d == 'TurnRight':\n        a = math.atan(e/d)\n        x1=c[0]+int(math.cos(a)*e)\n        y1=c[1]+int(math.sin(a)*e)\n    elif d == 'TurnLeft':\n        a = math.atan(e/d)\n        x1=c[0]+int(math.cos(a)*e)\n        y1=c[1]+int(math.sin(a)*e)\n    else:\n        print \"invalid direction\"\n    if x1 == x and y1 == y:\n        return 'Stop'\n    elif c[0] == x1 and c[1] == y1:\n        return 'TurnRight'\n    elif c[0] == x1 and c[1] < y1:\n        return 'TurnLeft'\n    elif c[0] == x1 and c[1] > y1:\n        return 'TurnRight'\n    elif c[0] < x1 and c[1] == y1:\n        return 'TurnLeft'\n    elif c[0] > x1 and c[1] == y1:\n        return 'TurnRight'\n    else:\n        return 'Stop'\ndef best_move_to_dest4(x,y,c,d,e,f):\n    '''\n    Given the destination (x,y), the current position (c), the direction to turn (d), the\n    distance to travel (e), and the final destination (f), return the best move to reach the\n    final destination.\n    '''\n    if d == 'North':\n        x1=c[0]\n        y1=c[1]-e\n    elif d == 'South':\n        x1=c[0]\n        y1=c[1]+e\n    elif d == 'East':\n        x1=c[0]+e\n        y1=c[1]\n    elif d == 'West':\n        x1=c[0]-e\n        y1=c[1]\n    elif d == 'Stop':\n        x1=c[0]\n        y1=c[1]\n    elif d == 'TurnRight':\n        a = math.atan(e/d)\n        x1=c[0]+int(math.cos(a)*e)\n        y1=c[1]+int(math.sin(a)*e)\n    elif d == 'TurnLeft':\n        a = math.atan(e/d)\n        x1=c[0]+int(math.cos(a)*e)\n        y1=c[1]+int(math.sin(a)*e)\n    else:\n        print \"invalid direction\"\n    if x1 == x and y1 == y:\n        return 'Stop'\n    elif c[0] == x1 and c[1] == y1:\n        return 'TurnRight'\n    elif c[0] == x1 and c[1] < y1:\n        return 'TurnLeft'\n    elif c[0] == x1 and c[1] > y1:\n        return 'TurnLeft'\n    elif c[0] < "
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n    \ndef rightangled_triangles(a,b,c):\n    '''\n    There are three types of right angled triangles:\n    1. Isosceles triangle\n    2. Equilateral triangle\n    3. Scalene triangle\n    \n    Write a function that takes lengths of the sides of a right-angled triangle\n    and returns a string about the type of the triangle.\n    '''\n    if a==b or a==c or b==c:\n        return 'Equilateral'\n    elif a==b or b==c or a==c:\n        return 'Isosceles'\n    else:\n        return 'Scalene'\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        if w**2+h**2<=h**2:\n            raise ValueError('w**2+h**2 must be greater than h**2')\n    except ValueError, e:\n        print e\n    else:\n        return h**2-w**2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = w/a\n    c = h/a\n    return b,c\n    \n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        return (w**2 + h**2)**0.5\n    except ValueError:\n        print \"Your number is negative\"\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef otherside_triangle(b,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(b**2 + h**2)\ndef otherside_semiperimeter(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b)/2\ndef otherside_perimeter(a,b,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a+b+h)\ndef otherside_triangle_area(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\ndef otherside_circle_area(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pi * r**2\ndef otherside_circle_circumference(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2 * math.pi * r\ndef otherside_equilateral_triangle_area(a):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return a**2 / 4\ndef otherside_equilateral_triangle_circumference(a):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return a * math.sqrt(3)/2\ndef otherside_rightangled_triangle_area(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a+b+c)/2\ndef otherside_rightangled_triangle_circumference(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return a+b+c\ndef otherside_rightangled_triangle_area(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a*b*c)/4\ndef otherside_half_side(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(a**2 + b**2 + c**2) / 2\ndef otherside_chord_length(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(a**2 + b**2)\ndef otherside_circumference(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return a+b\ndef otherside_perimeter_of_a_circumcircle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2 * math.pi * r\ndef otherside_circumference_of_a_circumcircle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2 * math.pi * r\ndef otherside_area_of_a_circumcircle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pi * r**2\ndef otherside_area_of_a_circumcircle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pi * r**2\ndef otherside_area_of_a_circumcircle(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pi * r**2\ndef otherside_circumcircle_area(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pi * r**2\ndef otherside_circumcircle_circumference(r):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2 * math.pi * r\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimeter_of_a_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (a + b + c) / 2\ndef otherside_semiperimete"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2\ndef area_of_triangle(b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return b*h/2\ndef perimeter_of_triangle(b,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return b+b+h\ndef distance_between(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between 2 points.\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef speed_of_light():\n    '''\n    Write a function that returns the speed of light, c.\n    '''\n    return 299792458\ndef distance_between_light_and_an_object_in_space():\n    '''\n    Write a function that returns the distance between the light and an object in space.\n    '''\n    return speed_of_light()/distance_between(0,0,1,1)\ndef distance_between_the_earth_and_an_object_in_space():\n    '''\n    Write a function that returns the distance between the earth and an object in space.\n    '''\n    return distance_between_light_and_an_object_in_space()*(365.25)\ndef wavelength_of_light():\n    '''\n    Write a function that returns the wavelength of light.\n    '''\n    return speed_of_light()/distance_between_light_and_an_object_in_space()\ndef wavelength_of_an_object_in_space():\n    '''\n    Write a function that returns the wavelength of an object in space.\n    '''\n    return distance_between_light_and_an_object_in_space()*(299792458)\ndef wavelength_of_a_spectrum():\n    '''\n    Write a function that returns the wavelength of a spectrum.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(365.25))\ndef distance_between_a_star_and_an_object_in_space():\n    '''\n    Write a function that returns the distance between a star and an object in space.\n    '''\n    return distance_between_light_and_an_object_in_space()*(5.791e8)\ndef wavelength_of_a_star():\n    '''\n    Write a function that returns the wavelength of a star.\n    '''\n    return distance_between_a_star_and_an_object_in_space()*(299792458)\ndef wavelength_of_a_spectrum_at_a_distance():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()))\ndef wavelength_of_a_spectrum_at_a_distance_from_an_object():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance from an object.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()*(1+0.0023)))\ndef distance_between_a_star_and_an_object_in_space():\n    '''\n    Write a function that returns the distance between a star and an object in space.\n    '''\n    return distance_between_light_and_an_object_in_space()*(5.791e8)\ndef distance_between_the_sun_and_an_object_in_space():\n    '''\n    Write a function that returns the distance between the sun and an object in space.\n    '''\n    return distance_between_light_and_an_object_in_space()*(6.957e8)\ndef wavelength_of_a_star():\n    '''\n    Write a function that returns the wavelength of a star.\n    '''\n    return distance_between_a_star_and_an_object_in_space()*(299792458)\ndef wavelength_of_a_spectrum_at_a_distance():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()))\ndef wavelength_of_a_spectrum_at_a_distance_from_an_object():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance from an object.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()*(1+0.0023)))\ndef wavelength_of_a_star():\n    '''\n    Write a function that returns the wavelength of a star.\n    '''\n    return distance_between_a_star_and_an_object_in_space()*(299792458)\ndef wavelength_of_a_spectrum_at_a_distance():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()))\ndef wavelength_of_a_spectrum_at_a_distance_from_an_object():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance from an object.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()*(1+0.0023)))\ndef wavelength_of_a_star():\n    '''\n    Write a function that returns the wavelength of a star.\n    '''\n    return distance_between_a_star_and_an_object_in_space()*(299792458)\ndef wavelength_of_a_spectrum_at_a_distance():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()))\ndef wavelength_of_a_spectrum_at_a_distance_from_an_object():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance from an object.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()*(1+0.0023)))\ndef wavelength_of_a_star():\n    '''\n    Write a function that returns the wavelength of a star.\n    '''\n    return distance_between_a_star_and_an_object_in_space()*(299792458)\ndef wavelength_of_a_spectrum_at_a_distance():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(299792458/distance_between_a_star_and_an_object_in_space()))\ndef wavelength_of_a_spectrum_at_a_distance_from_an_object():\n    '''\n    Write a function that returns the wavelength of a spectrum at a given distance from an object.\n    '''\n    return 299792458/(distance_between_light_and_an_object_in_space()*(29979245"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**.5\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    elif len(listval)==1:\n        return listval[0]\n    else:\n        mid = len(listval)//2\n        #print(listval[:mid])\n        #print(listval[mid:])\n        if listval[mid]>listval[0]:\n            return max_val(listval[:mid])\n        else:\n            return max_val(listval[mid:])\n    "
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return 'Empty list'\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in range(0, len(listval)):\n        if listval[i] > val:\n            val = listval[i]\n    return val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    assert isinstance(listval, list), '%s is not a list' % listval\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for elem in listval:\n        if elem > maxval:\n            maxval = elem\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num_div = 0\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            num_div += i\n            num_div += int(number / i)\n    return num_div\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = list()\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = list()\n    for i in range(1, number//2 + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number%i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def div_count(num):\n        c = 0\n        for i in range(1,num+1):\n            if num%i == 0:\n                c+=1\n        return c\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 1:\n        return 0\n    \n    sum_divisor = 0\n    divisor = 2\n    \n    while divisor < number:\n        if number % divisor == 0:\n            sum_divisor += divisor\n        divisor += 1\n    \n    return sum_divisor\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr):\n        if len(arr)<2:\n            return arr\n        else:\n            middle = len(arr)/2\n            left = merge_sort(arr[:middle])\n            right = merge_sort(arr[middle:])\n            return merge(left, right)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return count_inv(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = sorted(arr)\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]>arr[j]):\n                inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    arr = arr[:]\n    n = len(arr)\n    inversions = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    return merge_sort(arr, 0, n - 1, 0, True)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    sorted_arr = sorted(arr)\n    inv_count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                count += 1\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    global Inversions\n    Inversions = 0\n    return Counting_Inv(arr, 0, len(arr))\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(([x] if not isinstance(x, list) else flatten_list(x) for x in list1), [])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # Base case, if the list is a list of 1 element, return that element\n    if len(list1) == 1:\n        return list1[0]\n    \n    # Recursive case, if not a list, return the list as is\n    # If the list is a list of lists, flatten the sub-lists, and combine them\n    return list1[0] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item, list):\n            for i in flatten_list(item):\n                yield i\n        else:\n            yield item\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain(*list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # if list1 is empty, return list1\n    if not list1:\n        return list1\n    # if the list1 is not a list, return list1\n    if not isinstance(list1,list):\n        return list1\n    # if the list1 is a single list, return list1\n    if len(list1) == 1:\n        return list1[0]\n    # get the first element of list1\n    first = list1[0]\n    # if the first element is a list, return the list of the first element\n    if isinstance(first, list):\n        return flatten_list(first)\n    # else append the first element to the end of the list1\n    return flatten_list([first] + list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain(*list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item, list):\n            for i in flatten_list(item):\n                yield i\n        else:\n            yield item\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # initializing the final list\n    final_list = []\n    # if the list is not empty\n    if list1:\n        # if the list is not a list\n        if not isinstance(list1, list):\n            final_list.append(list1)\n        # if the list is a list\n        else:\n            # for each element in the list\n            for elem in list1:\n                # if the element is a list\n                if isinstance(elem, list):\n                    # flatten the elements in the list\n                    final_list.extend(flatten_list(elem))\n                # if the element is not a list\n                else:\n                    # append the element to the final list\n                    final_list.append(elem)\n    return final_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for element in list1:\n        if isinstance(element, list):\n            output += flatten_list(element)\n        else:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for i in stdata:\n        d[i[0]]+=i[1]\n    return max(d.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dic = {}\n    for tup in stdata:\n        if tup[0] not in dic:\n            dic[tup[0]] = tup[1]\n        else:\n            dic[tup[0]] += tup[1]\n    \n    return max(dic.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for k,v in stdata.items():\n        if k == '0':\n            max_aggregate += v\n        else:\n            max_aggregate -= v\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key = lambda i: i[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = []\n    for line in stdata:\n        list_of_tuples.append(line.split())\n    l = len(list_of_tuples)\n    max_agg = 0\n    for i in range(0, l):\n        tup = (list_of_tuples[i][0], int(list_of_tuples[i][1]))\n        max_agg = max(max_agg, tup[1])\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for record in stdata:\n        aggregate[record[2]] = aggregate.get(record[2], 0) + record[3]\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([sum(s) for s in stdata])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    max_val = 0\n    for tup in stdata:\n        d[tup[0]].append(tup[1])\n    for k,v in d.items():\n        if len(v) > max_val:\n            max_val = len(v)\n    return max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = None\n    for x in stdata:\n        agg_val = x[2]\n        if max_agg is None:\n            max_agg = agg_val\n        else:\n            if max_agg < agg_val:\n                max_agg = agg_val\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n=len(stdata)\n    max_aggregate=0\n    for i in range(n):\n        temp_aggregate=0\n        for j in range(n):\n            if(stdata[i][1]<=stdata[j][0]):\n                temp_aggregate+=stdata[j][2]\n        if(temp_aggregate>max_aggregate):\n            max_aggregate=temp_aggregate\n    return max_aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0: return 1\n    if n == 1: return 1\n    res = 0\n    for i in range(1,n+1):\n        res += count_binary_seq(i-1) * count_binary_seq(n-i)\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    dp = [[0 for i in xrange(n+1)] for j in xrange(n+1)]\n    \n    for i in xrange(1, n+1):\n        for j in xrange(1, n+1):\n            if i == j:\n                dp[i][j] = 1\n            else:\n                if (j >= i):\n                    dp[i][j] += dp[i][j-1]\n                if (i >= j):\n                    dp[i][j] += dp[i-1][j]\n    \n    return dp[n][n]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0 or n==1:\n        return 1\n    if n==2:\n        return 2\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    seq_count = 0\n    for i in range(1<<n):\n        # sum of first n bits is same as sum of last n bits\n        # if sum of first n bits is same as sum of last n bits\n        # => sum of first n bits = sum of last n bits\n        total_sum = 0\n        for j in range(n):\n            total_sum += (i&1)<<j\n        if total_sum == (1<<n) - 1:\n            seq_count += 1\n    return seq_count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def find_sum(n, s, t):\n        if s == t:\n            return 1\n        if s > t:\n            return 0\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def get_count(n): \n        # print n\n        if n == 1: \n            return 2\n        if n == 0: \n            return 1\n        else: \n            return get_count(n-1) + get_count(n-1)\n    \n    count = 0\n    for i in xrange(1, n+1):\n        count += get_count(i)\n    \n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0: return 0\n    if n==1: return 1\n    count = 0\n    for i in range(n, 0, -1):\n        for j in range(i, 0, -1):\n            if i+j <= n:\n                if i+j == n:\n                    count += 1\n                else:\n                    count += count_binary_seq(n-i-1) * count_binary_seq(i-1)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # The count of total number of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    # Let us call this function count(n).\n    count = [0]\n    \n    # Traverse the count array and increment the count of binary sequences of length 2n such that the sum of first n bits is same as the sum of last n bits.\n    for i in range(1, n):\n        for j in range(i):\n            count[i] += count[j]*(n-j)\n    return count[n-1]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    b_sum = n*(n+1)/2\n    if b_sum%2==0:\n        return 0\n    return b_sum/2+1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # start with the first key\n    max_depth = 0\n    for key in d:\n        max_depth = max(max_depth, 1 + dict_depth(d[key]))\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depths = {}\n    for key in d:\n        depths[key] = 1 + max(depths.get(child, 0) for child in d.get(key, []))\n    return max(depths.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max([dict_depth(v) if isinstance(v, dict) else 0 for v in d.values()]) if d else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dfs(d, level):\n        for key, value in d.items():\n            if isinstance(value, dict):\n                return dfs(value, level+1)\n        return level\n    return dfs(d, 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= 0 and index < len(arr):\n        return arr[index]\n    else:\n        for i in range(rotations) :\n            index = (index+len(arr))%len(arr)\n        return arr[index]\n    \ndef find_median(arr,ranges,rotations):\n    '''\n    Write a python function to find median of the array after number of rotations.\n    '''\n    if len(arr)%2 == 0:\n        return (find_Element(arr,ranges,rotations,0) + find_Element(arr,ranges,rotations,len(arr)/2))/2.0\n    else :\n        return find_Element(arr,ranges,rotations,0)\n    \ndef rotatestream(arr):\n    '''\n    Write a python function to rotate a stream of elements by one.\n    '''\n    rotations = len(arr)\n    i = 0\n    while i < len(arr) :\n        arr[(i+rotations)%len(arr)] = arr[i]\n        i += 1\n        \n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr)==0 :\n        return\n    \n    for i in range(rotations) :\n        arr.append(arr.pop(0))\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    num_rotations = len(ranges)\n    for i in range(0,num_rotations) :\n        rot_start = ranges[i][0]\n        rot_end = ranges[i][1]\n        for j in range(rot_start,rot_end+1) :\n            if (j >= len(arr)) or (arr[j]==index) :\n                return True\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotate = 0\n    while rotate < rotations : \n        ranges = ranges[-1:] + ranges[:-1]\n        rotate += 1\n    \n    print ranges\n    if index > len(arr) :\n        return 0\n    else :\n        return arr[ranges.index(index)]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    for i in range(rotations) : \n        arr.append(arr.pop(0))\n    \n    return arr[index]\n    \ndef find_rotation(arr,target) : \n    '''\n    Write a python function to find the rotation index of the given element. \n    The function will take an array of n elements and target element to be found as input. \n    The function should return the rotation index of the target element. \n    '''\n    \n    for i in range(len(arr)) : \n        if target < arr[i] : \n            return i\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ranges = ranges + 1\n    sum = 0\n    for i in range(ranges):\n        sum += arr[(i + index) % len(arr)]\n    \n    return sum\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    newArr = arr[rotations[index]:ranges[index]+rotations[index]]\n    return newArr[(len(arr)-rotations[index]-1)%len(newArr)]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #index is the index of the element that need to be found\n    #ranges is the number of times the array is rotated\n    #rotations is the number of rotations\n    if ranges == 1 :\n        if index >= arr[0] and index <= arr[len(arr)-1] :\n            return arr[index]\n    if ranges == 2 :\n        if index >= arr[0] and index <= arr[len(arr)-1] :\n            return arr[index]\n        if index >= arr[len(arr)-1] and index <= arr[0] :\n            return arr[len(arr)-1 - index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr.sort()\n    for i in range(ranges):\n        if rotations[i] > arr[index] :\n            return arr[index-1]\n        else:\n            index += 1\n    return arr[index-1]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index>ranges :\n        print 'wrong index'\n    else :\n        for i in range(index,ranges+1) :\n            if arr[i] == rotations :\n                return i\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    output = []\n    for word in words:\n        if word[0] == 'p':\n            output.append(word)\n    return output\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith(\"p\"):\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0]=='p':\n            return word\n    return ''\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for i in words:\n        if i[0] == 'p':\n            result.append(i)\n    return result\n    \ndef end_with(word, end_letter):\n    '''\n    Write a function to return all the words in a list ending with a specific letter.\n    '''\n    result = []\n    for i in word:\n        if i[-1] == end_letter:\n            result.append(i)\n    return result\n    \ndef return_capitalized(word):\n    '''\n    Write a function to capitalize the first letter of a word and return the word.\n    '''\n    return word[0].upper() + word[1:]\n    \ndef reverse_list(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    return lst[::-1]\n    \ndef split_list(lst):\n    '''\n    Write a function to split a list.\n    '''\n    return lst[:len(lst) / 2], lst[len(lst) / 2:]\n    \ndef reverse_string(word):\n    '''\n    Write a function to reverse a string.\n    '''\n    return word[::-1]\n    \ndef string_bits(word):\n    '''\n    Write a function to return the bits of the input number.\n    '''\n    return [int(i) for i in bin(word)[2:]]\n    \ndef string_bits_alternate(word):\n    '''\n    Write a function to return the bits of the input number.\n    '''\n    result = []\n    for i in bin(word)[2:]:\n        if i == '1':\n            result.append(i)\n    return result\n    \ndef get_vowels(word):\n    '''\n    Write a function to return all the vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for i in word:\n        if i in vowels:\n            result.append(i)\n    return result\n    \ndef most_frequent_character(string):\n    '''\n    Write a function to return the most frequent character in a string.\n    '''\n    d = {}\n    for i in string:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d.items(), key=lambda x: x[1])[0]\n    \ndef most_frequent_character_alternate(string):\n    '''\n    Write a function to return the most frequent character in a string.\n    '''\n    return max(set(string), key=string.count)\n    \ndef sum_of_squares(numbers):\n    '''\n    Write a function to return the sum of the squares of the given numbers.\n    '''\n    result = 0\n    for i in numbers:\n        result += i ** 2\n    return result\n    \ndef sum_of_squares_alternate(numbers):\n    '''\n    Write a function to return the sum of the squares of the given numbers.\n    '''\n    return sum([i ** 2 for i in numbers])\n    \ndef sum_of_squares_list(numbers):\n    '''\n    Write a function to return the sum of the squares of the given numbers.\n    '''\n    return sum(i ** 2 for i in numbers)\n    \ndef is_prime(n):\n    '''\n    Write a function to determine if the given number is a prime number.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_alternate(n):\n    '''\n    Write a function to determine if the given number is a prime number.\n    '''\n    return n > 1 and all(n % i for i in xrange(2, n))\n    \ndef is_prime_list(numbers):\n    '''\n    Write a function to determine if the given number is a prime number.\n    '''\n    return all(n > 1 and all(n % i for i in xrange(2, n)) for n in numbers)\n    \ndef get_even_number(numbers):\n    '''\n    Write a function to return the even numbers in a list.\n    '''\n    return [n for n in numbers if n % 2 == 0]\n    \ndef get_even_number_alternate(numbers):\n    '''\n    Write a function to return the even numbers in a list.\n    '''\n    return [n for n in numbers if n % 2 == 0]\n    \ndef get_odd_number(numbers):\n    '''\n    Write a function to return the odd numbers in a list.\n    '''\n    return [n for n in numbers if n % 2!= 0]\n    \ndef get_odd_number_alternate(numbers):\n    '''\n    Write a function to return the odd numbers in a list.\n    '''\n    return [n for n in numbers if n % 2!= 0]\n    \ndef get_multiplied_number(numbers):\n    '''\n    Write a function to return the multiplied number in a list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result\n    \ndef get_multiplied_number_alternate(numbers):\n    '''\n    Write a function to return the multiplied number in a list.\n    '''\n    return reduce(lambda x, y: x * y, numbers)\n    \ndef remove_duplicates(numbers):\n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    return [numbers[i] for i in xrange(len(numbers)) if i == numbers.index(numbers[i])]\n    \ndef remove_duplicates_alternate(numbers):\n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    return list(set(numbers))\n    \ndef length_of_string(string):\n    '''\n    Write a function to return the length of a string.\n    '''\n    return len(string)\n    \ndef length_of_string_alternate(string):\n    '''\n    Write a function to return the length of a string.\n    '''\n    return len(string)\n    \ndef length_of_string_list(strings):\n    '''\n    Write a function to return the length of a string.\n    '''\n    return [len(string) for string in strings]\n    \ndef reverse_string_list(strings):\n    '''\n    Write a function to reverse a string.\n    '''\n    return [string[::-1] for string in strings]\n    \ndef reverse_string_list_alternate(strings):\n    '''\n    Write a function to reverse a string.\n    '''\n    return [string[::-1] for string in strings]\n    \ndef reverse_string_alternate(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef count_vowels(string):\n    '''\n    Write a function to return the count of vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = 0\n    for i in string:\n        if i in vowels:\n            result += 1\n    return result\n    \ndef count_vowels_alternate(string):\n    '''\n    Write a function to return the count of vowels in a string.\n    '''\n    return sum([1 for i in string if i in ['a', 'e', 'i', 'o', 'u']])\n    \ndef is_palindrome(string):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_alternate(string):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef palindrome_permutation(string):\n    '''\n    Write a function to determine if a string is a palindrom"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile('p')\n    p1 = re.compile('p.*')\n    p2 = re.compile('p.*.*')\n    p3 = re.compile('p.*.*.*')\n    p4 = re.compile('p.*.*.*.*')\n    p5 = re.compile('p.*.*.*.*.*')\n    p6 = re.compile('p.*.*.*.*.*.*')\n    p7 = re.compile('p.*.*.*.*.*.*.*')\n    p8 = re.compile('p.*.*.*.*.*.*.*.*')\n    p9 = re.compile('p.*.*.*.*.*.*.*.*.*')\n    p10 = re.compile('p.*.*.*.*.*.*.*.*.*.*')\n    p11 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*')\n    p12 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*')\n    p13 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p14 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p15 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p16 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p17 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p18 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p19 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p20 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p21 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p22 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p23 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p24 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p25 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p26 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p27 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p28 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p29 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p30 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p31 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p32 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p33 = re.compile('p.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*')\n    p34 = re.compile('pn"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return filter(lambda x: x[0] == 'p', words)\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match('^p', word):\n            return word\ndef p_words(words):\n    '''\n    Write a function that returns all words that have a certain letter in it.\n    '''\n    return [x for x in words if 'p' in x]\ndef is_palindrome(word):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return word == word[::-1]\ndef palindromes(words):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return [x for x in words if is_palindrome(x)]\ndef left_join(list1, list2):\n    '''\n    Write a function that accepts two lists and returns a new list that contains the\n    items in list1 followed by the items in list2.\n    '''\n    return list1+list2\ndef word_split(phrase):\n    '''\n    Write a function to split a phrase into words.\n    '''\n    return re.split('\\s', phrase)\ndef char_histogram(phrase):\n    '''\n    Write a function that accepts a string and returns a dictionary that contains\n    letters of the string as keys and the number of times they appear as values.\n    '''\n    return dict(re.findall(r'(\\w)(?=\\s)', phrase))\ndef wrap(string, max_width):\n    '''\n    Write a function that wraps a string to a specified max_width.\n    '''\n    return \"\\n\".join([string[i:i+max_width] for i in range(0, len(string), max_width)])\ndef front_back(string):\n    '''\n    Write a function that returns a string with the first and last characters of the\n    original string swapped.\n    '''\n    return string[:1] + string[-1:]\ndef histogram(string):\n    '''\n    Write a function that accepts a string and returns a dictionary that contains\n    letters of the string as keys and the number of times they appear as values.\n    '''\n    return dict(re.findall(r'(\\w)(?=\\s)', string))\ndef count_words(string):\n    '''\n    Write a function that accepts a string and returns the number of words in the\n    string.\n    '''\n    return len(string.split(' '))\ndef count_char(string):\n    '''\n    Write a function that accepts a string and returns the number of characters in\n    the string.\n    '''\n    return len(string)\ndef reverse_string(string):\n    '''\n    Write a function that accepts a string and returns the string with the characters\n    in the reverse order.\n    '''\n    return string[::-1]\ndef rotate_string(string, amount):\n    '''\n    Write a function that accepts a string and an integer amount. The function\n    returns the string with the first and last letters of the string rotated\n    amount letters.\n    '''\n    if len(string) == 0:\n        return string\n    elif len(string) == 1:\n        return string[-1:] + string[:-1]\n    elif len(string) < 2:\n        return string\n    else:\n        return string[-amount:] + string[:-amount]\ndef is_valid_zip(zip_code):\n    '''\n    Write a function that accepts a zip code and returns True if the zip code is\n    valid and False if it is not.\n    '''\n    return re.match('\\d{5}-?\\d{4}', zip_code)\ndef count_consonants(string):\n    '''\n    Write a function that accepts a string and returns the number of consonants\n    in the string.\n    '''\n    return sum(map(str.isalpha, string))\ndef find_double_letter(string):\n    '''\n    Write a function that accepts a string and returns a list of all the indices\n    in the string that have a double letter.\n    '''\n    return [m.start() for m in re.finditer('(.)\\1', string)]\ndef is_valid_phone_number(phone_number):\n    '''\n    Write a function that accepts a string of digits and returns True if the\n    string contains no consecutive repeating digits.\n    '''\n    return re.match('^\\d*\\d{10}$', phone_number)\ndef is_valid_pandigital(number, length):\n    '''\n    Write a function that accepts a number and returns True if the number is\n    a pandigital number.\n    '''\n    return ''.join(sorted(str(number))) == '123456789'\ndef valid_pandigital(length):\n    '''\n    Write a function that accepts a number and returns a pandigital number of the\n    given length.\n    '''\n    return ''.join(sorted([str(x) for x in range(1, length+1)]))\ndef count_vowels(string):\n    '''\n    Write a function that accepts a string and returns the number of vowels in the\n    string.\n    '''\n    return sum(map(str.isalpha, string))\ndef factorial(num):\n    '''\n    Write a function that accepts a number and returns the factorial of the\n    number.\n    '''\n    return reduce(lambda x,y: x*y, range(1, num+1))\ndef is_prime(num):\n    '''\n    Write a function that accepts a number and returns True if the number is\n    prime and False if it is not.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\ndef get_primes(num):\n    '''\n    Write a function that accepts a number and returns a list of all the prime numbers\n    that are less than or equal to the given number.\n    '''\n    return [x for x in range(2, num) if is_prime(x)]\ndef reverse_pair(string):\n    '''\n    Write a function that accepts a string and returns a string with the\n    first and last letters swapped.\n    '''\n    return string[-1:] + string[1:-1]\ndef last_word(string):\n    '''\n    Write a function that accepts a string and returns the last word of the\n    string.\n    '''\n    return string.split(' ')[-1]\ndef first_word(string):\n    '''\n    Write a function that accepts a string and returns the first word of the\n    string.\n    '''\n    return string.split(' ')[0]\ndef most_common(words):\n    '''\n    Write a function that accepts a list of words and returns a list of all the\n    words that occur the most.\n    '''\n    return max(words, key=words.count)\ndef is_anagram(string1, string2):\n    '''\n    Write a function that accepts two strings and returns True if the strings\n    are anagrams and False otherwise.\n    '''\n    return sorted(string1) == sorted(string2)\ndef find_anagrams(string):\n    '''\n    Write a function that accepts a string and returns a list of all the anagrams\n    of the string.\n    '''\n    return [x for x in string.split(' ') if is_anagram(x, string)]\ndef has_no_e(string):\n    '''\n    Write a function that accepts a string and returns True if the string\n    does not contain the letter 'e'.\n    '''\n    return not 'e' in string.lower()\ndef is_abecedarian(string):\n    '''\n    Write a function that accepts a string and returns True if the letters in\n    the string appear in alphabetical order (i.e., the letters are in order\n    from A to Z).\n    '''\n    return sorted(string) == list(string)\ndef has_only_vowels(string):\n    '''\n    Write a function that accepts a string and returns True if the string\n    contains only the vowels a, e, i, o, u, A, E, I, O, and U.\n    '''\n    return set(string.lower()) <= set('aeiou')\ndef is_abecedarian_palindrome(string):\n    ''"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def f(w):\n        if not w or w[0]!= 'p':\n            return False\n        return True\n    return list(filter(f,words))\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == 0:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n    if k == 1:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1))\n    res = max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1))\n    if a[index] > a[index - 1]:\n        res = max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), res)\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if a[index] > k:\n        return a[index]\n    return max(a[index], max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= index:\n        return a[index]\n    if a[index] < a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (k > n):\n        return 0\n    if (index == n):\n        return a[n - 1]\n    elif (index < n):\n        return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n    return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index > n:\n        return 0\n    elif index == n:\n        return a[index]\n    elif index < n:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return 0\n    \n    if index == n:\n        return 0\n    \n    if dp[index][k]!= -1:\n        return dp[index][k]\n    \n    else:\n        dp[index][k] = a[index] + max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1))\n        return dp[index][k]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    result = []\n    for i in range(index):\n        result.append(a[i])\n    result.append(a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return 0\n    if a[index] <= k:\n        if a[index] == k:\n            return a[index]\n        return a[index] + max_sum_increasing_subseq(a, index - 1, k)\n    if a[index] > k:\n        return a[index] + max_sum_increasing_subseq(a, index - 1, k)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x=tuplex[0]\n    y=tuplex[1]\n    return (x,y)\ndef first_last(tuplex):\n    '''\n    Write a function that gets the first and last items of a tuple.\n    '''\n    x=tuplex[0]\n    y=tuplex[-1]\n    return (x,y)\ndef middle(tuplex):\n    '''\n    Write a function that gets the items in the middle of a tuple.\n    '''\n    x=tuplex[1:-1]\n    return x\ndef duplicate(tuplex):\n    '''\n    Write a function that duplicates a tuple.\n    '''\n    x=tuplex*2\n    return x\ndef mix(tuplex):\n    '''\n    Write a function that swaps first and last items of a tuple.\n    '''\n    tuplex=list(tuplex)\n    x=tuplex[0]\n    y=tuplex[-1]\n    tuplex[0]=y\n    tuplex[-1]=x\n    tuplex=tuple(tuplex)\n    return tuplex\ndef over_n(tuplex,n):\n    '''\n    Write a function that returns a tuple that is the first n items of a tuple.\n    '''\n    x=tuplex[0:n]\n    return x\ndef under_n(tuplex,n):\n    '''\n    Write a function that returns a tuple that is the last n items of a tuple.\n    '''\n    x=tuplex[-n:]\n    return x\ndef length(tuplex):\n    '''\n    Write a function that returns the length of a tuple.\n    '''\n    l=len(tuplex)\n    return l\ndef append(tuplex,tuplex2):\n    '''\n    Write a function that appends a tuple to a tuple.\n    '''\n    x=tuplex+tuplex2\n    return x\ndef concatenate(tuplex,tuplex2):\n    '''\n    Write a function that concatenates two tuples.\n    '''\n    x=tuplex+tuplex2\n    return x\ndef count_freq(tuplex,item):\n    '''\n    Write a function that returns the number of times an item appears in a tuple.\n    '''\n    x=tuplex.count(item)\n    return x\ndef max_min(tuplex):\n    '''\n    Write a function that returns the maximum and minimum values of a tuple.\n    '''\n    x=max(tuplex)\n    y=min(tuplex)\n    return (x,y)\ndef every_other(tuplex):\n    '''\n    Write a function that returns the first n even numbers of a tuple.\n    '''\n    x=tuplex[0::2]\n    return x\ndef if_then_else(tuplex,item,item2):\n    '''\n    Write a function that returns the item if the tuple is not empty, otherwise item2.\n    '''\n    if len(tuplex)>0:\n        x=tuplex[0]\n    else:\n        x=item\n    return x\ndef copy_tuplex(tuplex):\n    '''\n    Write a function that returns a copy of a tuple.\n    '''\n    x=deepcopy(tuplex)\n    return x\ndef add_tuples(tuplex,tuplex2):\n    '''\n    Write a function that returns the sum of two tuples.\n    '''\n    x=tuplex+tuplex2\n    return x\ndef intersection(tuplex,tuplex2):\n    '''\n    Write a function that returns a tuple that is the intersection of two tuples.\n    '''\n    x=set(tuplex) & set(tuplex2)\n    x=tuple(x)\n    return x\ndef set_op(tuplex,tuplex2):\n    '''\n    Write a function that returns a tuple that is the union of two tuples.\n    '''\n    x=set(tuplex) | set(tuplex2)\n    x=tuple(x)\n    return x\ndef set_difference(tuplex,tuplex2):\n    '''\n    Write a function that returns a tuple that is the set difference of two tuples.\n    '''\n    x=set(tuplex) - set(tuplex2)\n    x=tuple(x)\n    return x\ndef set_symmetric_difference(tuplex,tuplex2):\n    '''\n    Write a function that returns a tuple that is the set symmetric difference of two tuples.\n    '''\n    x=set(tuplex) ^ set(tuplex2)\n    x=tuple(x)\n    return x\ndef is_subset(tuplex,tuplex2):\n    '''\n    Write a function that returns True if tuplex is a subset of tuplex2.\n    '''\n    x=set(tuplex)<=set(tuplex2)\n    return x\ndef is_superset(tuplex,tuplex2):\n    '''\n    Write a function that returns True if tuplex is a superset of tuplex2.\n    '''\n    x=set(tuplex)>=set(tuplex2)\n    return x\ndef reverse_tuplex(tuplex):\n    '''\n    Write a function that returns a tuple that is the reverse of a tuple.\n    '''\n    x=tuplex[::-1]\n    return x\ndef tuples_sort(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tuplex,reverse=reverse)\n    return x\ndef tuples_sort_by_second(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tuplex,key=lambda item:item[1],reverse=reverse)\n    return x\ndef tuples_sort_by_second_reverse(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tuplex,key=lambda item:item[1],reverse=True)\n    return x\ndef tuples_sort_by_third(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tuplex,key=lambda item:item[2],reverse=reverse)\n    return x\ndef tuples_sort_by_third_reverse(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tuplex,key=lambda item:item[2],reverse=True)\n    return x\ndef tuples_sort_by_first(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tuplex,key=lambda item:item[0],reverse=reverse)\n    return x\ndef tuples_sort_by_first_reverse(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tuplex,key=lambda item:item[0],reverse=True)\n    return x\ndef tuples_sort_by_last(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tuplex,key=lambda item:item[-1],reverse=reverse)\n    return x\ndef tuples_sort_by_last_reverse(tuplex,reverse=False):\n    '''\n    Write a function that returns a tuple that is the sorted version of a tuple.\n    '''\n    x=sorted(tu"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:]+tuplex[:m]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a,b,c = m+n,m,n\n    if tuplex[a]=='0':\n        return '0'*b+tuplex[a+1:a+b+1]\n    else:\n        return tuplex[a+1:a+b+1]+'0'*(b-len(tuplex[a+1:a+b+1]))\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m],tuplex[n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    n=((0,1),(1,0),(0,0),(1,1))\n    for i in range(4):\n        if m == n[i][0] and tuplex[i][1]==0:\n            return tuplex[i]\n        elif m == n[i][1] and tuplex[i][0]==0:\n            return tuplex[i]\n    print ('error')\n    \ndef test_colon_tuplex():\n    '''\n    Write a function to test if a tuple is a colon of a tuple.\n    '''\n    assert colon_tuplex([(0,0),(0,1)],[0,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,1),(1,0)],[0,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(1,1)],[0,1],[0,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,0],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[0,1],[1,0])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[0,1],[0,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[0,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,1),(1,0)],[0,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(1,1)],[1,0],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,0],[0,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,0],[1,0])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,0],[0,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,0])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,0])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,0])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,0])==(0,0)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,0])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[0,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1])==(0,1)\n    assert colon_tuplex([(0,0),(0,1)],[1,1],[1,1]"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex=tuplex[:]\n    new_tuplex[m]=':'.join(new_tuplex[m])\n    new_tuplex[n]=':'.join(new_tuplex[n])\n    return tuple(new_tuplex)\n    \ndef get_dict_of_list(dict_of_list,list_name):\n    '''\n    Write a function to get a dictionary from a list.\n    '''\n    new_dict={}\n    for i in range(len(dict_of_list)):\n        new_dict[dict_of_list[i][0]]=dict_of_list[i][1]\n    return new_dict\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    temp=[]\n    if len(tuplex)<2:\n        return tuplex\n    elif len(tuplex)==2:\n        temp=[tuplex[0],tuplex[1],tuplex[0]]\n        return temp\n    else:\n        for i in range(len(tuplex)):\n            if i%2==0:\n                temp.append(tuplex[i])\n        return temp\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s = tuplex[:]\n    if len(s) > m:\n        s = s[:m]\n    return s\ndef capital_tuplex(tuplex):\n    '''\n    Write a function to get a capital letter of a tuple.\n    '''\n    s = tuplex[:]\n    s = s[0].upper() + s[1:]\n    return s\ndef tuplex_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    s = tuplex[:]\n    s.sort()\n    return s\ndef duplicate(tuplex):\n    '''\n    Write a function to get duplicate of a tuple.\n    '''\n    s = tuplex[:]\n    s = s*2\n    return s\ndef inversion(tuplex):\n    '''\n    Write a function to get the inversion of a tuple.\n    '''\n    s = tuplex[:]\n    s = s[::-1]\n    return s\ndef selection_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    s = tuplex[:]\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i] > s[j]:\n                s[i],s[j] = s[j],s[i]\n    return s\ndef swap(tuplex):\n    '''\n    Write a function to swap two elements of a tuple.\n    '''\n    s = tuplex[:]\n    a,b = s[0],s[1]\n    s[0],s[1] = b,a\n    return s\ndef half_tuplex(tuplex):\n    '''\n    Write a function to get the half of a tuple.\n    '''\n    s = tuplex[:]\n    s = s[:len(s)/2]\n    return s\ndef series_tuplex(tuplex,m):\n    '''\n    Write a function to get a series of elements of a tuple.\n    '''\n    s = tuplex[:]\n    s = s[m:]\n    return s\ndef compose_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple composed of m elements of a tuple.\n    '''\n    s = tuplex[:]\n    s = s[:m]\n    s = s*n\n    return s\ndef count_tuplex(tuplex,n):\n    '''\n    Write a function to count the occurances of an element in a tuple.\n    '''\n    s = tuplex[:]\n    c = 0\n    for i in range(len(s)):\n        if s[i] == n:\n            c+=1\n    return c\ndef last_tuplex(tuplex,m):\n    '''\n    Write a function to get the last m elements of a tuple.\n    '''\n    s = tuplex[:]\n    s = s[:len(s)-m]\n    return s\ndef index_tuplex(tuplex,n):\n    '''\n    Write a function to get the index of an element in a tuple.\n    '''\n    s = tuplex[:]\n    for i in range(len(s)):\n        if s[i] == n:\n            return i\n    return -1\ndef most_frequent_tuplex(tuplex):\n    '''\n    Write a function to get the most frequent element in a tuple.\n    '''\n    s = tuplex[:]\n    s = sorted(s)\n    return s[len(s)-1]\ndef least_frequent_tuplex(tuplex):\n    '''\n    Write a function to get the least frequent element in a tuple.\n    '''\n    s = tuplex[:]\n    s = sorted(s)\n    return s[0]\ndef is_tuplex_sort(tuplex):\n    '''\n    Write a function to get whether a tuple is sorted or not.\n    '''\n    s = tuplex[:]\n    if s == sorted(s):\n        return True\n    else:\n        return False\ndef is_tuplex_equal(tuplex,tuplex2):\n    '''\n    Write a function to get whether a tuple is equal to another tuple.\n    '''\n    s = tuplex[:]\n    s2 = tuplex2[:]\n    if s == s2:\n        return True\n    else:\n        return False\ndef is_tuplex_ascending(tuplex):\n    '''\n    Write a function to get whether a tuple is ascending or not.\n    '''\n    s = tuplex[:]\n    for i in range(len(s)-1):\n        if s[i] > s[i+1]:\n            return False\n    return True\ndef is_tuplex_descending(tuplex):\n    '''\n    Write a function to get whether a tuple is descending or not.\n    '''\n    s = tuplex[:]\n    for i in range(len(s)-1):\n        if s[i] < s[i+1]:\n            return False\n    return True\ndef is_tuplex_strictly_ascending(tuplex):\n    '''\n    Write a function to get whether a tuple is strictly ascending or not.\n    '''\n    s = tuplex[:]\n    for i in range(len(s)-1):\n        if s[i] > s[i+1]:\n            return False\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_tuplex_strictly_descending(tuplex):\n    '''\n    Write a function to get whether a tuple is strictly descending or not.\n    '''\n    s = tuplex[:]\n    for i in range(len(s)-1):\n        if s[i] < s[i+1]:\n            return False\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_tuplex_monotonic(tuplex):\n    '''\n    Write a function to get whether a tuple is monotonic or not.\n    '''\n    s = tuplex[:]\n    if is_tuplex_strictly_ascending(s) == True:\n        return True\n    elif is_tuplex_strictly_descending(s) == True:\n        return True\n    else:\n        return False\ndef is_tuplex_non_monotonic(tuplex):\n    '''\n    Write a function to get whether a tuple is non-monotonic or not.\n    '''\n    s = tuplex[:]\n    if is_tuplex_strictly_ascending(s) == False and is_tuplex_strictly_descending(s) == False:\n        return True\n    else:\n        return False\ndef is_tuplex_permutation(tuplex,tuplex2):\n    '''\n    Write a function to get whether a tuple is permutation of another tuple or not.\n    '''\n    s = tuplex[:]\n    s2 = tuplex2[:]\n    if s2 == sorted(s2):\n        if s2 == s:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_tuplex_anagram(tuplex,tuplex2):\n    '''\n    Write a function to get whether a tuple is anagram of another tuple or not.\n    '''\n    s = tuplex[:]\n    s2 = tuplex2[:]\n    if s2 == sorted(s2) and s2 == s:\n        return True\n    else:\n        return False\ndef is_tuplex_homogeneous(tuplex):\n    '''\n    Write a function to get whether a tuple is homogeneous or not.\n    '''\n    s = tuplex[:]\n    if len(s) == len(set(s)):\n        return True\n    else:\n        return False\ndef is_tuplex_homogeneous_in(tuplex,n):\n    '''\n    Write a function to get whether a tuple is homogeneous in a"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from functools import reduce\n    def product(list_x):\n        return reduce(lambda x, y: x * y, list_x)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    if not (nums1 and nums2) or not N:\n        return None\n    \n    nums1.sort(reverse = True)\n    nums2.sort(reverse = True)\n    \n    result = 1\n    for i in range(N):\n        result = result * nums1[i] * nums2[i]\n    \n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def find_prod(nums, N, factors):\n        def factor(n):\n            for i in factors:\n                if n%i==0:\n                    return i\n        result = []\n        for i in range(N):\n            factor1, factor2 = None, None\n            for num in nums:\n                if factor1 is None:\n                    factor1 = factor(num)\n                elif factor1!= factor(num):\n                    factor2 = num\n                    break\n            result.append(factor1*factor2)\n        return result\n    return find_prod(nums1, N, [2,3,5])\n    \ndef fast_map(f, lst):\n    '''\n    Given a list of numbers, a function f, and the desired size of the output, return a list of the length size of the output.\n    '''\n    def prod(i, j, lst):\n        prod = 1\n        for num in lst:\n            prod *= num[i]\n        return prod\n    def fast_map_helper(lst):\n        lst2 = [[] for i in lst]\n        for i in range(len(lst)):\n            for j in range(len(lst)):\n                lst2[i].append(prod(j, i, lst))\n        return lst2\n    return fast_map_helper(lst)\n    \ndef add(a, b):\n    '''\n    Given two numbers a and b, each on a single line, return their sum.\n    '''\n    return a + b\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from itertools import combinations\n    max_product = -1\n    for a, b in combinations(nums1, 2):\n        if a*b > max_product:\n            max_product = a*b\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    if N > len(nums1) or N > len(nums2):\n        return -1\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[N-i-1]\n        products.append(product)\n    return max(products)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    smallest = 0\n    biggest = 0\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if N > n1:\n        smallest = n1\n    else:\n        smallest = N\n    if N > n2:\n        biggest = n2\n    else:\n        biggest = N\n    print(smallest, biggest)\n    smallest_list = []\n    biggest_list = []\n    for i in range(0, smallest):\n        smallest_list.append(nums1[i])\n    for j in range(0, biggest):\n        biggest_list.append(nums2[j])\n    print(smallest_list, biggest_list)\n    smallest_list_prod = 1\n    biggest_list_prod = 1\n    for k in range(0, smallest):\n        smallest_list_prod *= smallest_list[k]\n    print(smallest_list_prod)\n    for l in range(0, biggest):\n        biggest_list_prod *= biggest_list[l]\n    print(biggest_list_prod)\n    if smallest_list_prod > biggest_list_prod:\n        return biggest_list_prod\n    else:\n        return smallest_list_prod\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return [max(i*j for i in nums1) for j in nums2]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(len(nums1)):\n        l1.append(nums1[i]*nums1[i])\n    for i in range(len(nums2)):\n        l2.append(nums2[i]*nums2[i])\n    l1.sort()\n    l2.sort()\n    if N>len(l1):\n        return l2[-N:]\n    else:\n        return l1[-N:]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    ans = nums1[-N] * nums2[-N]\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < len(nums2):\n        return large_product(nums2, nums1, N)\n    else:\n        return large_product_recursive(nums1, nums2, N)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef power(a,b):\n    '''\n    Write a python function to calculate the power of a number.\n    '''\n    return a**b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"a is maximum\")\n    else:\n        print(\"b is maximum\")\nmaximum(3,4)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n    \ndef quotient(a,b):\n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n    \ndef test_quotient():\n    assert(quotient(100,20)==5)\n    assert(quotient(3,7)==0)\n    assert(quotient(32,8)==2)\n    assert(quotient(8,4)==2)\n    \ndef mod(a,b):\n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n    \ndef test_mod():\n    assert(mod(100,20)==0)\n    assert(mod(3,7)==3)\n    assert(mod(32,8)==0)\n    assert(mod(8,4)==4)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print('a is maximum')\n    elif a==b:\n        print('a and b are equal')\n    else:\n        print('b is maximum')\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_list=[]\n    for x in str1:\n        my_list.append(x)\n    tup_list=tuple(my_list)\n    return tup_list\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError('Argument must be a string')\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(tup1):\n    '''\n    Write a function to convert a tuple of characters to a given string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = []\n    for c in str1:\n        res.append(c)\n    return tuple(res)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Extract the last bit.\n    last_bit = 1 & (~(n-1))\n    # Clear the last bit.\n    n &= ~last_bit\n    # Set the last bit.\n    n |= last_bit\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    return set_left_most_unset_bit(n >> 1) * 2 + (n & 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while (n & 1) == 0: \n        n = n >> 1\n        count += 1\n    n |= 1 << count\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(n - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n ^ (n & (n - 1))\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # 1 - convert the number to binary representation\n    binary_representation = bin(n)[2:]\n    # 2 - find the index of the first 1\n    first_one_index = binary_representation.rfind('1')\n    # 3 - reverse the string and find the first 1\n    binary_representation = binary_representation[::-1]\n    first_one_index = len(binary_representation) - 1 - first_one_index\n    # 4 - set the first bit to 1\n    binary_representation = '{0:0{1}b}'.format(int(binary_representation[:first_one_index]), first_one_index)\n    binary_representation = binary_representation[::-1]\n    return int(binary_representation, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~(n-1)\n    n |= 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(n.bit_length()):\n        if n & (1<<i): \n            return (n ^ (1<<i))\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary = bin(n)\n    binary = binary[2:]\n    n = len(binary)\n    while(len(binary) < 32):\n        binary = '0' + binary\n    binary = binary[0:32]\n    return int(binary, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # right shift by 1 and AND with 1\n    n = n >> 1\n    n = n & 1\n    n = n << 1\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 1/3 * (math.pi*(r**2)*(h**2))\n    return v\ndef volume_cone1(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 1/3 * (math.pi*(r**2)*(h**2))\n    return v\ndef volume_rect_prism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    v = l*w*h\n    return v\ndef volume_rect_prism1(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    v = l*w*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\ndef volume_sphere1(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v = 1/2 * math.sqrt(3)*(r**2)*h\n    return v\ndef volume_triangle1(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v = 1/2 * math.sqrt(3)*(r**2)*h\n    return v\ndef volume_trapezium(r1,r2,h):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    v = 1/3 * (r1 + r2)*h\n    return v\ndef volume_trapezium1(r1,r2,h):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    v = 1/3 * (r1 + r2)*h\n    return v\ndef volume_para_rect(l,w,h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    v = l*w*h\n    return v\ndef volume_para_rect1(l,w,h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    v = l*w*h\n    return v\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\ndef volume_circle1(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\ndef volume_para_prism(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    v = l*w*h\n    return v\ndef volume_para_prism1(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    v = l*w*h\n    return v\ndef volume_prism(l,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v = l*h\n    return v\ndef volume_prism1(l,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v = l*h\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * (r**2)*h\n    return v\ndef volume_cylinder1(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * (r**2)*h\n    return v\ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid1(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid1(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid2(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid3(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid4(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid5(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid6(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid7(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid8(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid9(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid10(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid11(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid12(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid13(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid14(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid15(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = 1/3 * (math.pi*(r**2)*h)\n    return v\ndef volume_pyramid16(r,h):\n    '''\n    Write a function to find th"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi*(r**2)*h/3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3*pi*r*r*h\n    return volume\ndef volumetotal(vol1,vol2):\n    '''\n    Write a function that takes as inputs the volumes of two cones and returns the total volume.\n    '''\n    return vol1+vol2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*pi*r*r*r\n    return volume\ndef volumetotal_sphere(vol1,vol2):\n    '''\n    Write a function that takes as inputs the volumes of two spheres and returns the total volume.\n    '''\n    return vol1+vol2\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 1/3*pi*r*r*h\n    return volume\ndef volumetotal_cylinder(vol1,vol2):\n    '''\n    Write a function that takes as inputs the volumes of two cylinders and returns the total volume.\n    '''\n    return vol1+vol2\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function that takes as inputs two points and returns the distance between the points.\n    '''\n    dist = math.sqrt((x1-x2)**2+(y1-y2)**2)\n    return dist\ndef distance_square(x1,y1,x2,y2):\n    '''\n    Write a function that takes as inputs two points and returns the distance between the points.\n    '''\n    dist = (x1-x2)**2+(y1-y2)**2\n    return dist\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (1/2)*b*h\n    return area\ndef area_square(s1):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = s1*s1\n    return area\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = b*h\n    return area\ndef perimeter_triangle(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter = (1/2)*b+h\n    return perimeter\ndef perimeter_square(s1):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    perimeter = 4*s1\n    return perimeter\ndef perimeter_rectangle(b,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = 2*(b+h)\n    return perimeter\ndef radius_circle(r):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    radius = (1/2)*r\n    return radius\ndef radius_triangle(b,h):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    radius = (1/2)*b\n    return radius\ndef radius_square(s1):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    radius = s1/2\n    return radius\ndef radius_rectangle(b,h):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    radius = (1/2)*(b+h)\n    return radius\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = (4/3)*pi*r*r\n    return area\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = (1/2)*pi*r*r*h\n    return area\ndef area_square(s1):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = s1*s1\n    return area\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = (1/2)*b*h\n    return area\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = b*h\n    return area\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = 4*pi*r*r*r*r\n    return surface\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = 2*pi*r*r*r*h\n    return surface\ndef surface_square(s1):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = s1*s1\n    return surface\ndef surface_triangle(b,h):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = b*h\n    return surface\ndef surface_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = 2*(b+h)*(b+h)\n    return surface\ndef height_triangle(b,h):\n    '''\n    Write a function to find the height of a triangle.\n    '''\n    height = (1/2)*h\n    return height\ndef height_square(s1):\n    '''\n    Write a function to find the height of a square.\n    '''\n    height = s1/2\n    return height\ndef height_rectangle(b,h):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    height = h\n    return height\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*pi*r*r*r*r\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = pi*r*r*h\n    return volume\ndef volume_square(s1):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = s1*s1\n    return volume\ndef volume_rectangle(b,h):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = b*h\n    return volume\ndef convert_length(num,unit):\n    '''\n    Write a function to convert length units.\n    '''\n    if unit == \"mm\":\n        convert = num/1000\n    elif unit == \"cm\":\n        convert = num/100\n    elif unit == \"m\":\n        convert = num\n    return convert\ndef convert_area(num,unit):\n    '''\n    Write a function to convert area units.\n    '''\n    if unit == \"mm\":\n        convert = num/100000\n    elif unit == \"cm\":\n        convert = num/1000\n    elif unit == \"m\":\n        convert = num\n    return convert\ndef convert_volume(num,unit):\n    '''\n    Write a function to convert volume units.\n    '''\n    if unit == \"mm\":\n        convert = num/1000000\n    elif unit == \"cm\":\n        convert = num/100000\n    elif unit == \"m\":\n        convert = num\n    return convert\ndef convert_time(num,unit):\n    '''\n    Write a function to convert time units.\n    '''\n    if unit == \"s\":\n        convert = num\n    elif unit == \"m\":\n        convert = num/60\n    elif unit == \"h\":\n        convert = num/3600\n    elif unit == \"d\":\n        convert = num/86400\n    return convert\ndef convert_speed(num,unit)"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    if isinstance(r, (int,float)) and isinstance(h, (int,float)):\n        v=float(math.pi*r*r*h)/3\n        return v\n    else:\n        print(\"Error: only number input allowed.\")\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * (math.pi * r**2 * h)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14159\n    v = (1.0/3.0) * pi * r**2 * h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    v=(1/3)*(pi*r**2)*h\n    return v\n    \ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    from math import pi\n    a=(1/2)*(pi*r**2)*h\n    return a\ndef radius_cone(v,h):\n    '''\n    Write a function to find the radius of a cone.\n    '''\n    from math import pi\n    r=(v/pi/h)**(1/3)\n    return r\ndef height_cone(a,r):\n    '''\n    Write a function to find the height of a cone.\n    '''\n    from math import pi\n    h=((a**2)/(2*r*pi))**(1/2)\n    return h\ndef cone_type(r,h):\n    '''\n    Write a function to determine the type of a cone based on radius and height.\n    '''\n    if r>=0.1 and r<=2.5 and h>=0.1 and h<=2.5:\n        print('This is a circular cone')\n    elif r>2.5 and h>=0.1 and h<=2.5:\n        print('This is a oblate cone')\n    elif r<=0.1 and r>=0.01 and h>=0.1 and h<=2.5:\n        print('This is an equal-area cone')\n    elif r<=0.01 and r>=0.001 and h>=0.1 and h<=2.5:\n        print('This is a thin conical cone')\n    elif r<=0.001 and r>=0.0001 and h>=0.1 and h<=2.5:\n        print('This is a parabolical cone')\n    elif r<=0.0001 and r>0.00001 and h>=0.1 and h<=2.5:\n        print('This is a sharp conical cone')\n    else:\n        print('This is a circular cone')\ndef main():\n    from math import pi\n    r=float(input('Enter radius: '))\n    h=float(input('Enter height: '))\n    v=volume_cone(r,h)\n    a=area_cone(r,h)\n    r=radius_cone(v,h)\n    h=height_cone(a,r)\n    cone_type(r,h)\n    \nmain("
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    try:\n        assert r>=0\n        assert h>=0\n    except AssertionError:\n        raise ValueError(\"Error: the radius and height must be non-negative.\")\n    return 1.0/3.0*math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1.0/3.0 * math.pi * r**2 * h\n    return V\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l=[1]\n    for i in range(1,n):\n        if i==1:\n            l.append(i)\n        elif i%2==0:\n            l.append(i)\n        else:\n            l.append(2*i)\n    return max(l)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n: \n        i = i << 1\n    return i/2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 *= 2\n    return highest_power_of_2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    maxpow = 0\n    while (1<<maxpow) < n:\n        maxpow += 1\n    return maxpow\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        high = 0\n        while 2**high <= n:\n            high += 1\n        return high - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while (2 ** i) < n:\n        i = i + 1\n    return 2 ** i - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<1:\n        return None\n    \n    if n == 1:\n        return 1\n    \n    power = 1\n    while power < n:\n        power = power << 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    pow_of_2 = 1\n    while pow_of_2 <= n:\n        pow_of_2 = pow_of_2 * 2\n    return pow_of_2 / 2\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 2) + find_lucas(n - 1)\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Here we define a recursive function\n    def lucas_recursive(n): \n        if n == 0: \n            return 2 \n        elif n == 1: \n            return 1 \n        else: \n            return lucas_recursive(n-1) + lucas_recursive(n-2) \n    # Here we define a function that will iteratively solve the equation    \n    def lucas_iterative(n): \n        first_two = [2, 1] \n        for i in range(2, n): \n            first_two.append(first_two[-1] + first_two[-2]) \n        return first_two[-1] \n    # Return the function \n    return lucas_iterative(n) \n    \ndef find_fibonacci(n): \n    '''\n    Write a function that returns the nth fibonacci number.\n    '''\n    # Here we define a recursive function\n    def fibonacci_recursive(n): \n        if n == 0: \n            return 0 \n        elif n == 1: \n            return 1 \n        else: \n            return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) \n    # Here we define a function that will iteratively solve the equation    \n    def fibonacci_iterative(n): \n        first_two = [0, 1] \n        for i in range(2, n): \n            first_two.append(first_two[-1] + first_two[-2]) \n        return first_two[-1] \n    # Return the function \n    return fibonacci_iterative(n) \n    \ndef sum_series(n, x=0, y=1): \n    '''\n    Make a function that takes a number as an argument, \n    and returns the nth value in a fibonacci sequence. \n    '''\n    # Here we define a recursive function\n    def sum_series_recursive(n, x=0, y=1): \n        if n == 0: \n            return x \n        elif n == 1: \n            return y \n        else: \n            return sum_series_recursive(n-1, y, x+y) \n    # Here we define a function that will iteratively solve the equation    \n    def sum_series_iterative(n, x=0, y=1): \n        first_two = [0, 1] \n        for i in range(2, n): \n            first_two.append(first_two[-1] + first_two[-2]) \n        return first_two[-1] \n    # Return the function \n    return sum_series_iterative(n, x, y) \n    \ndef find_power(a, b): \n    '''\n    Write a function that takes two integers as arguments, a and b,\n    and returns the integer value of a^b.\n    '''\n    # Here we define a recursive function\n    def power_recursive(a, b): \n        if b == 0: \n            return 1 \n        elif b == 1: \n            return a \n        else: \n            return a * power_recursive(a, b-1) \n    # Here we define a function that will iteratively solve the equation    \n    def power_iterative(a, b): \n        first_two = [1, a] \n        for i in range(2, b): \n            first_two.append(first_two[-1] * first_two[-2]) \n        return first_two[-1] \n    # Return the function \n    return power_iterative(a, b) \n    \ndef find_triangle_num(n): \n    '''\n    Write a function that takes a positive integer n as input, \n    and returns the nth integer in the triangle sequence.\n    '''\n    # Here we define a recursive function\n    def triangle_recursive(n): \n        if n == 0: \n            return 0 \n        elif n == 1: \n            return 1 \n        else: \n            return triangle_recursive(n-1) + triangle_recursive(n-2) \n    # Here we define a function that will iteratively solve the equation    \n    def triangle_iterative(n): \n        first_two = [0, 1] \n        for i in range(2, n): \n            first_two.append(first_two[-1] + first_two[-2]) \n        return first_two[-1] \n    # Return the function \n    return triangle_iterative(n) \n    \ndef find_fibonacci_in_range(a, b): \n    '''\n    Write a function that takes two integer arguments a and b,\n    and returns the sum of all the numbers in the Fibonacci sequence\n    between the numbers a and b (including a and b).\n    '''\n    # Here we define a recursive function\n    def fibonacci_recursive(a, b): \n        if a == 0: \n            return 0 \n        elif a == 1: \n            return 1 \n        elif a > b: \n            return 0 \n        else: \n            return fibonacci_recursive(a-1, b) + fibonacci_recursive(a-2, b) \n    # Here we define a function that will iteratively solve the equation    \n    def fibonacci_iterative(a, b): \n        first_two = [0, 1] \n        for i in range(2, a): \n            first_two.append(first_two[-1] + first_two[-2]) \n        total = 0 \n        for num in first_two: \n            if num >= a and num <= b: \n                total += num \n        return total \n    # Return the function \n    return fibonacci_iterative(a, b) \n    \ndef find_all_primes(n): \n    '''\n    Write a function that takes a positive integer n as input and\n    returns a list of all the primes up to and including n.\n    '''\n    # Here we define a recursive function\n    def prime_recursive(n): \n        if n == 0: \n            return 0 \n        elif n == 1: \n            return 0 \n        elif is_prime(n): \n            return 1 \n        else: \n            return prime_recursive(n-1) + prime_recursive(n-2) \n    # Here we define a function that will iteratively solve the equation    \n    def prime_iterative(n): \n        first_two = [2, 3] \n        for i in range(4, n): \n            if is_prime(i): \n                first_two.append(i) \n        return first_two \n    # Return the function \n    return prime_iterative(n) \n    \ndef factorial_recursive(n): \n    '''\n    Write a function that takes a positive integer n as input and\n    returns the value of n! (factorial function).\n    '''\n    # Here we define a recursive function\n    def factorial_recursive(n): \n        if n == 0: \n            return 1 \n        else: \n            return n * factorial_recursive(n-1) \n    # Here we define a function that will iteratively solve the equation    \n    def factorial_iterative(n): \n        first_two = [1, 1] \n        for i in range(2, n): \n            first_two.append(first_two[-1] * i) \n        return first_two[-1] \n    # Return the function \n    return factorial_iterative(n) \n    \ndef find_all_palindromes(n): \n    '''\n    Write a function that takes a positive integer n as input and\n    returns a list of all the palindromes from 1 to n.\n    '''\n    # Here we define a recursive function\n    def palindrome_recursive(n): \n        if n == 0: \n            return [1] \n        elif n == 1: \n            return [1, 1] \n        else: \n            palindrome_list = palindrome_re"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # your code here\n    #print(n, \"Lucas number:\", find_lucas_iterative(n))\n    return find_lucas_iterative(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    if n%2 == 0:\n        return find_lucas(n-1) + find_lucas(n-2)\n    else:\n        return find_lucas(n-1)**2 + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n):\n        if n == 0:\n            return 2\n        if n == 1:\n            return 1\n        return lucas(n - 2) + lucas(n - 1)\n    return lucas(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2, 1]\n    if n == 1:\n        return lucas[0]\n    elif n == 2:\n        return lucas[1]\n    else:\n        for i in range(3, n+1):\n            lucas.append(lucas[i-1]+lucas[i-2])\n    return lucas[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    a, b = 2, 1\n    for i in range(n - 2):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % x for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(list_)\n    list_[0] = list_[0] + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == '':\n        return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not isinstance(list_, list):\n        list_ = [list_]\n    for l in list_:\n        try:\n            l[0] = l[0].format(string)\n        except IndexError:\n            raise TypeError('Add a value to the format string to apply to the list elements')\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].format(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(list_[i]) for i in range(len(list_))]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list_ + [string]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == None:\n        return []\n    return [string.format(element) for element in list_]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l = list()\n    for i,j,k in zip(l1,l2,l3):\n        l.append(dict(zip(i,j)))\n    return l\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested = {}\n    for i, j, k in zip(l1, l2, l3):\n        nested[i] = {}\n        nested[i]['customer_id'] = j\n        nested[i]['brand'] = k\n    return nested\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = dict()\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = dict()\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[j][i]\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # for i, j, k in zip(l1, l2, l3):\n    #     temp = {}\n    #     temp[i] = {j:k}\n    #     print(temp)\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]:l2[i],l3[i]:l3[i]} for i in range(len(l1))]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    for elem in l1:\n        if elem in l2:\n            new_dict[elem] = {}\n            for elem2 in l3:\n                if elem2 in l3:\n                    new_dict[elem][elem2] = {}\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[x]: l2[x], l1[x+1]: l3[x]} for x in range(0, len(l1), 2)]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = dict()\n    for i in range(len(l1)):\n        dictionary[l1[i]] = dict()\n        for j in range(len(l2)):\n            dictionary[l1[i]][l2[j]] = l3[i][j]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, x)) for x in zip(l2, l3)]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(0,len(l1)):\n        d1[l1[i]] = {l2[i]:l3[i]}\n    return d1\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    max_sum = 0\n    n = math.ceil(n/2)\n    max_sum = max(max_sum, get_max_sum(n) + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n_half = n/2\n    n_third = n/3\n    n_forth = n/4\n    n_fifth = n/5\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n % 2 == 0:\n        return get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n    else:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # return n if n == 1 else max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    return n if n == 1 else max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        half = get_max_sum(n/2)\n        third = get_max_sum(n/3)\n        fourth = get_max_sum(n/4)\n        fifth = get_max_sum(n/5)\n        return max(half, third, fourth, fifth, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    if n == 0:\n        return 0\n    elif n%2 == 0:\n        max_sum = max( max_sum, max_sum + get_max_sum (n/2) )\n    if n%3 == 0:\n        max_sum = max( max_sum, max_sum + get_max_sum (n/3) )\n    if n%4 == 0:\n        max_sum = max( max_sum, max_sum + get_max_sum (n/4) )\n    if n%5 == 0:\n        max_sum = max( max_sum, max_sum + get_max_sum (n/5) )\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # this is the recursive case\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_helper (n, res, s):\n        if n == 0:\n            return res\n        else:\n            if s == \"f(n/2)\":\n                return max(res, get_max_sum_helper (n/2, res + n, s))\n            elif s == \"f(n/3)\":\n                return max(res, get_max_sum_helper (n/3, res + n, s))\n            elif s == \"f(n/4)\":\n                return max(res, get_max_sum_helper (n/4, res + n, s))\n            else:\n                return max(res, get_max_sum_helper (n/5, res + n, s))\n    return get_max_sum_helper (n, 0, \"\")\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_len_list = l\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n    result_list = [input_list[0]]\n    max_length = len(input_list[0])\n    for index in range(1, len(input_list)):\n        if len(input_list[index]) > max_length:\n            max_length = len(input_list[index])\n            result_list = [input_list[index]]\n        elif len(input_list[index]) == max_length:\n            result_list.append(input_list[index])\n    return result_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_list = input_list[i]\n            max_len = len(input_list[i])\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    length = len(input_list)\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > length:\n            length = len(input_list[i])\n            max_index = i\n    \n    return input_list[max_index]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    count = 0\n    max_len = 0\n    max_len_list = []\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            longest = item\n    return longest\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = []\n    for each_list in input_list:\n        if len(each_list) >= max_len:\n            max_len = len(each_list)\n            max_list = each_list\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = ()\n    for i in test_tup:\n        if i in tup:\n            return False\n        else:\n            tup += (i,)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #pass\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = []\n    for t in test_tup:\n        if t not in test_list:\n            test_list.append(t)\n    if len(test_list) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for each_char in str1:\n        if str1.count(each_char) == 1:\n            return each_char\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        d[i] = d.get(i, 0) + 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for s in str1:\n        if s in dict:\n            dict[s] += 1\n        else:\n            dict[s] = 1\n    \n    for s in str1:\n        if dict[s] == 1:\n            return s\n            \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_str = {}\n    for letter in str1:\n        if letter in dict_str:\n            dict_str[letter] += 1\n        else:\n            dict_str[letter] = 1\n    for letter in str1:\n        if dict_str[letter] == 1:\n            return letter\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for x in str1:\n        if x in dict:\n            dict[x] = dict[x] + 1\n        else:\n            dict[x] = 1\n    for x in str1:\n        if dict[x] == 1:\n            return x\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for letter in str1:\n        if str1.count(letter) == 1:\n            return letter\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i]==str1[j]:\n                break\n        else:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #non-repeated character\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    for k,v in dict.items():\n        if v == 1:\n            return k\n        else:\n            continue\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == None:\n        return None\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for key, value in count.items():\n        if value == 1:\n            return key\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) is not None\nif __name__ == '__main__':\n    print check_char('aa')\n    print check_char('aaa')\n    print check_char('aaaaaa')\n    print check_char('aaaaaab'"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string)!= None: \n        print 'This string starts and ends with the same character!'\n    else: \n        print 'This string starts and ends with different character!'\ncheck_char('Anushka')\ncheck_char('Anushka01')\ncheck_char('Anushka10')"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # in1 = re.match(regex, string)\n    # in2 = re.search(regex, string)\n    return re.match(regex, string)!= None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a>b):\n        if(a>c):\n            median = a\n        elif(b>c):\n            median = b\n        else:\n            median = c\n    elif (b>a):\n        if(b>c):\n            median = b\n        elif(a>c):\n            median = a\n        else:\n            median = c\n    else:\n        if(a>c):\n            median = a\n        elif(b>c):\n            median = b\n        else:\n            median = c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>=b:\n        if a>=c:\n            if b>=c:\n                return b\n            else:\n                return c\n        else:\n            return a\n    else:\n        if b>=c:\n            if a>=c:\n                return a\n            else:\n                return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if len(a) == 1:\n        return b\n    elif len(b) == 1:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    else:\n        if a < c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n    \ndef extract_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return [a,b,c]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr = [a,b,c]\n    arr.sort()\n    print arr\n    if len(arr) % 2 == 0:\n        print ((arr[len(arr)/2] + arr[len(arr)/2-1])/2)\n    else:\n        print arr[len(arr)/2]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c and b<a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n    \ndef reverse_list(nums):\n    '''\n    Write a function that reverses a list of numbers and returns the new reversed list.\n    '''\n    return [nums[i] for i in range(len(nums)-1,-1,-1)]\n    \ndef is_palindrome(nums):\n    '''\n    Write a function to check whether a list of numbers is a palindrome.\n    '''\n    return nums == nums[::-1]\n    \ndef is_valid(s):\n    '''\n    Write a function that takes a string and returns the same string without any spaces and with all letters in lower case.\n    '''\n    return s.replace(\" \",\"\").lower()\n    \ndef count_vowels(s):\n    '''\n    Write a function that takes a string and counts the number of vowels in that string.\n    '''\n    return len([c for c in s if c in \"aeiouAEIOU\"])\n    \ndef num_of_divisors(n):\n    '''\n    Write a function to find the number of divisors of a number.\n    '''\n    d = 2\n    while n%d!= 0:\n        d += 1\n    return d\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    return num_of_divisors(n) == 1\n    \ndef is_balanced(nums):\n    '''\n    Write a function to check whether a string is balanced or not.\n    '''\n    return sum([abs(nums[i] - nums[i+1]) for i in range(len(nums) - 1)]) == 0\n    \ndef min_abs_diff(nums):\n    '''\n    Write a function to find the smallest absolute difference between two numbers in a list.\n    '''\n    return min([abs(nums[i] - nums[i+1]) for i in range(len(nums) - 1)])\n    \ndef is_substring(s1, s2):\n    '''\n    Write a function to check whether one word is a substring of another word.\n    '''\n    return s1 in s2\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef find_palindrome(nums):\n    '''\n    Write a function to find the longest palindrome in a given string.\n    '''\n    return ''.join(palindrome(nums))\n    \ndef palindrome(nums):\n    '''\n    Write a function to find the longest palindrome in a given string.\n    '''\n    return [i for i in range(len(nums)) if nums[i-1] == nums[i] and nums[i] == nums[i+1]]\n    \ndef get_permutations(nums):\n    '''\n    Write a function to get all permutations of a given list.\n    '''\n    if len(nums) == 1:\n        return [nums]\n    elif len(nums) == 2:\n        return [[nums[1],nums[0]], [nums[0],nums[1]]]\n    else:\n        permutations = []\n        for i in range(len(nums)):\n            permutations += get_permutations([nums[j] for j in range(len(nums)) if j!= i])\n        return permutations\n    \ndef spiral_order(matrix):\n    '''\n    Write a function to return all elements of a given 2D array in spiral order.\n    '''\n    if len(matrix) == 0:\n        return []\n    elif len(matrix) == 1:\n        return matrix[0]\n    elif len(matrix) == 2:\n        return matrix[0] + matrix[1]\n    else:\n        top = matrix[0]\n        bottom = matrix[-1]\n        left = [row[0] for row in matrix]\n        right = [row[-1] for row in matrix]\n        mid = matrix[len(matrix)//2]\n        \n        return top + left + right + bottom[::-1] + left[::-1] + right[::-1] + bottom\n        \ndef is_full(board):\n    '''\n    Write a function to check whether a given Sudoku board is full or not.\n    '''\n    return all([all([j for j in board[i] if j!= \".\"]) for i in range(9)])\n    \ndef is_valid_sudoku(board):\n    '''\n    Write a function to check whether a given Sudoku board is valid or not.\n    '''\n    return all([all([j for j in row if j!= \".\"]) for row in board]) and all([all([j for j in column if j!= \".\"]) for column in zip(*board)]) and all([all([j for j in block if j!= \".\"]) for block in zip(*[iter(board[:3]) for i in range(3)])])\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate a given 2D matrix 90 degrees in clockwise direction.\n    '''\n    return zip(*matrix[::-1])\n    \ndef max_product(nums):\n    '''\n    Write a function to find the maximum product of three integers in a list of positive integers.\n    '''\n    return max([i * j * k for i in nums for j in nums for k in nums if i * j * k == max(i, j, k) * min(i, j, k)])\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from a sorted list.\n    '''\n    d = {}\n    for num in nums:\n        d[num] = 1\n    return list(d.keys())\n    \ndef search_rotated_sorted_array(nums, target):\n    '''\n    Write a function to search a number in a rotated sorted array.\n    '''\n    lo, hi = 0, len(nums) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < nums[hi]:\n            if nums[mid] < target <= nums[hi]:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        else:\n            if nums[lo] <= target < nums[mid]:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n    return -1\n    \ndef find_max_consecutive_ones(nums):\n    '''\n    Write a function to find the maximum length of a consecutive run of 1s in a given integer array.\n    '''\n    count = 0\n    max_count = 0\n    for i in nums:\n        if i == 1:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    return max(max_count, count)\n    \ndef find_maximum_subarray(nums):\n    '''\n    Write a function to find the maximum sum of the contiguous subarray within a given array.\n    '''\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in nums:\n        current_sum += i\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n    \ndef find_longest_common_prefix(strings):\n    '''\n    Write a function to find the longest common prefix of given strings.\n    '''\n    if strings == []:\n        return \"\"\n    else:\n        return find_longest_common_prefix([string[1:] for string in strings]) if len(strings[0]) > 0 else \"\"\n    \ndef is_subsequence(s1, s2):\n    '''\n    Write a function to check whether one string is a subsequence of another string.\n    ''"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(x) for x in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(x) for x in str(num))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total = total + sum(map(int, str(i)))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_of_digits_helper(nums, result, current_sum):\n        if len(nums) == 0:\n            result.append(current_sum)\n            return\n        current_sum = current_sum * 10 + nums[0]\n        sum_of_digits_helper(nums[1:], result, current_sum)\n        \n    result = []\n    sum_of_digits_helper(nums, result, 0)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = sum([int(x) for x in str(nums)])\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += sum_of_digits_helper(i)\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return ('Invalid input. One tuple must be of same length as the other',)\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return a ^ b ^ c ^ d\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if test_tup1[0]!= test_tup2[0]:\n        return (test_tup1[0], test_tup1[1] ^ test_tup2[1])\n    else:\n        return (test_tup1[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # print(test_tup1, test_tup2)\n    return (test_tup1[0]^test_tup2[0], test_tup1[1]^test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Make sure the two tuples are of the same size\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples are of different lengths. You cannot perform the bitwise xor on them.\")\n    else:\n        return tuple([int(a)^int(b) for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([test_tup1[i] ^ test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tup = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return bitwise_xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    bitwise_xor_tup = ()\n    for i in range(len(test_tup1)):\n        bitwise_xor_tup = bitwise_xor_tup + (test_tup1[i] ^ test_tup2[i],)\n    return bitwise_xor_tup\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    t = test_list.sort()\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # Your code here\n    \n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    uniq_tup = set(test_list)\n    \n    return len(uniq_tup)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for el in test_list:\n        freq_dict[el] = freq_dict.get(el, 0) + 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict = {}\n    for i in test_list:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return len(dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your Code Here\n    from collections import Counter\n    return len(Counter(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([x + y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    if len(tup1) > len(tup2):\n        for i in range(len(tup2)):\n            tup2 = tup2[i]\n        for i in range(len(tup1)):\n            tup1 = tup1[i]\n            tup2 = tup2[i]\n            tup3 = tup1 + tup2\n            if i < len(tup1):\n                tup1 = tup3\n            else:\n                tup2 = tup3\n    else:\n        for i in range(len(tup1)):\n            tup1 = tup1[i]\n            tup2 = tup2[i]\n            tup3 = tup1 + tup2\n            if i < len(tup2):\n                tup2 = tup3\n            else:\n                tup1 = tup3\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tuple_list1 = list(test_tup1)\n    tuple_list2 = list(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not test_tup1 or not test_tup2:\n        return\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (tup1[0]+tup2[0], tup1[1]+tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # n is the length of the tuples\n    n = len(test_tup1)\n    new_tup = []\n    for i in range(n):\n        new_tup.append(test_tup1[i]+test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        tup1 = test_tup1 + ((),) * (len(test_tup2) - len(test_tup1))\n    else:\n        tup1 = test_tup1 + ((),) * (len(test_tup1) - len(test_tup2))\n    return tuple(sum(x) for x in zip(tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    total = []\n    for i in range(len(test_tup1)):\n        total.append(test_tup1[i]+test_tup2[i])\n    return tuple(total)\n    "
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # test_tup1 = (0,1,2)\n    # test_tup2 = (3,4,5)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef sum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\n    \ndef sub(a,b):\n    '''\n    Write a python function to find the difference of two numbers.\n    '''\n    return a-b\n    \ndef mult(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a*b\n    \ndef div(a,b):\n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    return a/b\n    \ndef mod(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a%b\n    \ndef power(a,b):\n    '''\n    Write a python function to find the power of two numbers.\n    '''\n    return a**b\n    \ndef root(a,b):\n    '''\n    Write a python function to find the root of a number.\n    '''\n    return a**(1/b)\n    \ndef randnum(a,b):\n    '''\n    Write a python function to return a random number between two numbers.\n    '''\n    import random\n    return random.randrange(a,b)\n    \ndef randrange(a,b):\n    '''\n    Write a python function to return a random number between two numbers.\n    '''\n    import random\n    return random.randrange(a,b)\n    \ndef randint(a,b):\n    '''\n    Write a python function to return a random number between two numbers.\n    '''\n    import random\n    return random.randint(a,b)\n    \ndef fabs(a):\n    '''\n    Write a python function to return the absolute value of a number.\n    '''\n    return abs(a)\n    \ndef all(a):\n    '''\n    Write a python function to return True if all items in a list are true.\n    '''\n    return all(a)\n    \ndef any(a):\n    '''\n    Write a python function to return True if any item in a list is true.\n    '''\n    return any(a)\n    \ndef factorial(a):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    if a==1:\n        return 1\n    else:\n        return a*factorial(a-1)\n        \ndef fab(a):\n    '''\n    Write a python function to return the fabonacci of a number.\n    '''\n    if a==1 or a==2:\n        return 1\n    else:\n        return fab(a-1)+fab(a-2)\n        \ndef fib(a):\n    '''\n    Write a python function to return the fibonacci of a number.\n    '''\n    if a==1 or a==2:\n        return 1\n    else:\n        return fib(a-1)+fib(a-2)\n        \ndef reverse(a):\n    '''\n    Write a python function to return the reverse of a string.\n    '''\n    return a[::-1]\n    \ndef pythagorean(a,b):\n    '''\n    Write a python function to return the sum of the square of the hypotenuse and the square of the other side of a right triangle.\n    '''\n    return (a**2+b**2)**0.5\n    \ndef harmonic(a):\n    '''\n    Write a python function to return the harmonic of a number.\n    '''\n    return 1/a\n    \ndef limit(a,b,c):\n    '''\n    Write a python function to return the limit of a function to a particular value.\n    '''\n    return b+c\n    \ndef taylor(a,b,c):\n    '''\n    Write a python function to return the taylor of a function to a particular value.\n    '''\n    return a+b+c\n    \ndef gcd(a,b):\n    '''\n    Write a python function to return the greatest common divisor of two numbers.\n    '''\n    return a%b\n    \ndef euler(a):\n    '''\n    Write a python function to return the euler totient of a number.\n    '''\n    i=1\n    count=0\n    while(i<a):\n        if(a%i==0):\n            count=count+1\n        i=i+1\n    if(count==2):\n        return 1\n    else:\n        return 0\n    \ndef isprime(a):\n    '''\n    Write a python function to return True if a number is prime and False if it is not.\n    '''\n    if(a<2):\n        return False\n    if(a==2):\n        return True\n    if(a%2==0):\n        return False\n    i=3\n    while(i<=a/2):\n        if(a%i==0):\n            return False\n        i=i+2\n    return True\n    \ndef isprime2(a):\n    '''\n    Write a python function to return True if a number is prime and False if it is not.\n    '''\n    if(a<2):\n        return False\n    if(a==2):\n        return True\n    if(a%2==0):\n        return False\n    i=3\n    while(i<=a/2):\n        if(a%i==0):\n            return False\n        i=i+2\n    return True\n    \ndef primefactors(a):\n    '''\n    Write a python function to return the prime factors of a number.\n    '''\n    i=2\n    factors=[]\n    while(i<a):\n        if(a%i==0):\n            factors.append(i)\n        i=i+1\n    return factors\n    \ndef perfect(a):\n    '''\n    Write a python function to return True if a number is perfect and False if it is not.\n    '''\n    sum=0\n    i=1\n    while(i<a):\n        if(a%i==0):\n            sum=sum+i\n        i=i+1\n    if(sum==a):\n        return True\n    else:\n        return False\n    \ndef isperfect(a):\n    '''\n    Write a python function to return True if a number is perfect and False if it is not.\n    '''\n    sum=0\n    i=1\n    while(i<a):\n        if(a%i==0):\n            sum=sum+i\n        i=i+1\n    if(sum==a):\n        return True\n    else:\n        return False\n    \ndef isperfect2(a):\n    '''\n    Write a python function to return True if a number is perfect and False if it is not.\n    '''\n    sum=0\n    i=1\n    while(i<=a/2):\n        if(a%i==0):\n            sum=sum+i\n        i=i+2\n    if(sum==a):\n        return True\n    else:\n        return False\n    \ndef isperfect3(a):\n    '''\n    Write a python function to return True if a number is perfect and False if it is not.\n    '''\n    sum=0\n    i=1\n    while(i<=(a/2)+1):\n        if(a%i==0):\n            sum=sum+i\n        i=i+2\n    if(sum==a):\n        return True\n    else:\n        return False\n    \ndef isperfect4(a):\n    '''\n    Write a python function to return True if a number is perfect and False if it is not.\n    '''\n    sum=0\n    i=1\n    while(i<=a):\n        if(a%i==0):\n            sum=sum+i\n        i=i+1\n    if(sum==a):\n        return True\n    else:\n        return False\n    \ndef isperfect5(a):\n    '"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # your code goes here\n    if a<b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a < b:\n        return b\n    else:\n        return a\ndef kthSmallest(l, k):\n    '''\n    Write a python function to find the kth smallest item in a list.\n    '''\n    if k < 1:\n        return False\n    elif k > len(l):\n        return False\n    else:\n        l.sort()\n        return l[k - 1]\ndef kthLargest(l, k):\n    '''\n    Write a python function to find the kth largest item in a list.\n    '''\n    if k < 1:\n        return False\n    elif k > len(l):\n        return False\n    else:\n        l.sort()\n        return l[len(l) - k]\ndef rotateList(l, n):\n    '''\n    Write a python function to rotate a list by n elements.\n    '''\n    if n > len(l):\n        n = n % len(l)\n    return l[n:] + l[:n]\ndef rotateString(s, n):\n    '''\n    Write a python function to rotate a string by n elements.\n    '''\n    return s[n:] + s[:n]\ndef convert2Bin(n):\n    '''\n    Write a python function to convert a decimal to binary.\n    '''\n    if n < 1:\n        return False\n    else:\n        return str(convert2Bin(n // 2)) + str(n % 2)\ndef convert2Oct(n):\n    '''\n    Write a python function to convert a decimal to octal.\n    '''\n    if n < 1:\n        return False\n    else:\n        return str(convert2Oct(n // 8)) + str(n % 8)\ndef convert2Hex(n):\n    '''\n    Write a python function to convert a decimal to hexadecimal.\n    '''\n    if n < 1:\n        return False\n    else:\n        return str(convert2Hex(n // 16)) + str(n % 16)\ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return all(n % i for i in range(2, n))\ndef primeFactors(n):\n    '''\n    Write a python function to find all the prime factors of a number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n == 2 or all(n % i for i in range(2, n))\ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef lucas(n):\n    '''\n    Write a python function to compute the nth Lucas number.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n - 1) + lucas(n - 2)\ndef sumofDigits(n):\n    '''\n    Write a python function to compute the sum of the digits of a number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sumofDigits(n // 10)\ndef sumofDigits2(n):\n    '''\n    Write a python function to compute the sum of the digits of a number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sumofDigits2(n // 10)\ndef reverseList(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if len(l) < 2:\n        return l\n    else:\n        return reverseList(l[1:]) + l[:1]\ndef reverseString(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s) < 2:\n        return s\n    else:\n        return reverseString(s[1:]) + s[:1]\ndef countVowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    elif s[0] in 'aeiouAEIOU':\n        return 1 + countVowels(s[1:])\n    else:\n        return countVowels(s[1:])\ndef countConsonants(s):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    elif s[0] not in 'aeiouAEIOU':\n        return 1 + countConsonants(s[1:])\n    else:\n        return countConsonants(s[1:])\ndef isVowel(c):\n    '''\n    Write a python function to check whether a character is a vowel or not.\n    '''\n    return c in 'aeiouAEIOU'\ndef isConsonant(c):\n    '''\n    Write a python function to check whether a character is a consonant or not.\n    '''\n    return c not in 'aeiouAEIOU'\ndef countConsonantSyllables(s):\n    '''\n    Write a python function to count the number of consonant syllables in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    elif isConsonant(s[0]):\n        return 1 + countConsonantSyllables(s[1:])\n    else:\n        return countConsonantSyllables(s[1:])\ndef countVowelSyllables(s):\n    '''\n    Write a python function to count the number of vowel syllables in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    elif isVowel(s[0]):\n        return 1 + countVowelSyllables(s[1:])\n    else:\n        return countVowelSyllables(s[1:])\ndef countY(s):\n    '''\n    Write a python function to count the number of ys in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    elif s[0] == 'y':\n        return 1 + countY(s[1:])\n    else:\n        return countY(s[1:])\ndef isIn(char, string):\n    '''\n    Write a python function to check whether a character is in a string.\n    '''\n    if len(string) == 0:\n        return False\n    else:\n        return char == string[0] or isIn(char, string[1:])\ndef countX(s):\n    '''\n    Write a python function to count the number of xs in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    elif isIn(s[0], 'xX'):\n        return 1 + countX(s[1:])\n    else:\n        return countX(s[1:])\ndef isPalindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        return s[0] == s[-1] and isPalindrome(s[1:-1])\ndef reverseString2(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s) == 0:\n        return s\n    else:\n        return reverseString2(s[1:]) + s[0]\nde"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef sum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\ndef multiply(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a*b\ndef exp(a,b):\n    '''\n    Write a python function to find the exponential of a number.\n    '''\n    return a**b\ndef difference(a,b):\n    '''\n    Write a python function to find the difference of two numbers.\n    '''\n    return a-b\ndef mod(a,b):\n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    return a%b\ndef remainder(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a%b\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a+b)/2\ndef choice(a,b):\n    '''\n    Write a python function to find a choice between two numbers.\n    '''\n    return min(a,b)\ndef index(a,b):\n    '''\n    Write a python function to find the index of an item in a list.\n    '''\n    return a.index(b)\ndef add_item(a,b):\n    '''\n    Write a python function to add an item to a list.\n    '''\n    return a.append(b)\ndef sort(a):\n    '''\n    Write a python function to sort a list.\n    '''\n    return a.sort()\ndef shuffle(a):\n    '''\n    Write a python function to shuffle a list.\n    '''\n    import random\n    return random.shuffle(a)\ndef selection(a,b):\n    '''\n    Write a python function to select an item from a list.\n    '''\n    return a[b]\ndef sort_list(a):\n    '''\n    Write a python function to sort a list by an item.\n    '''\n    return sorted(a,key=lambda x:x[1])\ndef sort_list_reverse(a):\n    '''\n    Write a python function to sort a list by an item.\n    '''\n    return sorted(a,key=lambda x:x[1],reverse=True)\ndef reverse_list(a):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return a[::-1]\ndef remove_duplicates(a):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    return list(set(a))\ndef reverse_string(a):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return a[::-1]\ndef to_int(a):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return int(a)\ndef to_float(a):\n    '''\n    Write a python function to convert a string to a float.\n    '''\n    return float(a)\ndef to_str(a):\n    '''\n    Write a python function to convert a integer or float to a string.\n    '''\n    return str(a)\ndef int_to_binary(a):\n    '''\n    Write a python function to convert an integer to its binary representation.\n    '''\n    return \"{0:b}\".format(a)\ndef float_to_binary(a):\n    '''\n    Write a python function to convert a float to its binary representation.\n    '''\n    return \"{0:b}\".format(a)\ndef binary_to_int(a):\n    '''\n    Write a python function to convert a binary number to its integer representation.\n    '''\n    return int(a,2)\ndef binary_to_float(a):\n    '''\n    Write a python function to convert a binary number to its float representation.\n    '''\n    return float(a,2)\ndef float_to_binary(a):\n    '''\n    Write a python function to convert a float to its binary representation.\n    '''\n    return \"{0:b}\".format(a)\ndef binary_to_float(a):\n    '''\n    Write a python function to convert a binary number to its float representation.\n    '''\n    return float(a,2)\ndef int_to_hex(a):\n    '''\n    Write a python function to convert an integer to its hexadecimal representation.\n    '''\n    return \"{0:x}\".format(a)\ndef hex_to_int(a):\n    '''\n    Write a python function to convert a hexadecimal number to its integer representation.\n    '''\n    return int(a,16)\ndef int_to_oct(a):\n    '''\n    Write a python function to convert an integer to its octal representation.\n    '''\n    return \"{0:o}\".format(a)\ndef oct_to_int(a):\n    '''\n    Write a python function to convert an octal number to its integer representation.\n    '''\n    return int(a,8)\ndef int_to_hex(a):\n    '''\n    Write a python function to convert an integer to its hexadecimal representation.\n    '''\n    return \"{0:x}\".format(a)\ndef hex_to_int(a):\n    '''\n    Write a python function to convert a hexadecimal number to its integer representation.\n    '''\n    return int(a,16)\ndef hex_to_float(a):\n    '''\n    Write a python function to convert a hexadecimal number to its float representation.\n    '''\n    return float(a,16)\ndef float_to_hex(a):\n    '''\n    Write a python function to convert a float to its hexadecimal representation.\n    '''\n    return \"{0:x}\".format(a)\ndef float_to_int(a):\n    '''\n    Write a python function to convert a float to its integer representation.\n    '''\n    return int(a)\ndef int_to_float(a):\n    '''\n    Write a python function to convert an integer to its float representation.\n    '''\n    return float(a)\ndef int_to_oct(a):\n    '''\n    Write a python function to convert an integer to its octal representation.\n    '''\n    return \"{0:o}\".format(a)\ndef oct_to_int(a):\n    '''\n    Write a python function to convert an octal number to its integer representation.\n    '''\n    return int(a,8)\ndef oct_to_float(a):\n    '''\n    Write a python function to convert an octal number to its float representation.\n    '''\n    return float(a,8)\ndef oct_to_hex(a):\n    '''\n    Write a python function to convert an octal number to its hexadecimal representation.\n    '''\n    return \"{0:x}\".format(a)\ndef hex_to_oct(a):\n    '''\n    Write a python function to convert a hexadecimal number to its octal representation.\n    '''\n    return \"{0:o}\".format(a)\ndef oct_to_hex(a):\n    '''\n    Write a python function to convert an octal number to its hexadecimal representation.\n    '''\n    return \"{0:x}\".format(a)\ndef floor(a):\n    '''\n    Write a python function to find the floor of a number.\n    '''\n    return int(a)\ndef ceiling(a):\n    '''\n    Write a python function to find the ceiling of a number.\n    '''\n    return int(a)\ndef trunc(a):\n    '''\n    Write a python function to find the truncated value of a number.\n    '''\n    return int(a)\ndef is_int(a):\n    '''\n    Write a python function to check if "
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        print a\n    else:\n        print b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    flag = False\n    if(tuplex[0]==tuple1):\n        flag = True\n    if(flag):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex[0] == tuple1[0]) and (tuplex[1] == tuple1[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\ndef main():\n    # excercise one\n    # remove the duplicates from the following tuple\n    tuplex = (1,2,3,4,5,5,2,2,3,4,5,5)\n    print(tuplex)\n    # remove the duplicates from the following tuple\n    tuple1 = tuple(set(tuplex))\n    print(tuple1)\n    # check if the element exist or not in the tuple\n    check_tuplex(2,tuple1)\n    # get the length of the tuple\n    print(len(tuple1))\n    # get the max value in the tuple\n    print(max(tuple1))\n    # get the min value in the tuple\n    print(min(tuple1))\n    # get the index of the value passed in the tuple\n    print(tuple1.index(5))\n    # change the tuple into the list\n    list1 = list(tuplex)\n    print(list1)\n    # change the list into the tuple\n    tuple2 = tuple(list1)\n    print(tuple2)\n    # count the number of the specific value \n    print(tuple1.count(2))\n    # change the tuple into the string\n    str1 = str(tuplex)\n    print(str1)\n    # change the string into the tuple\n    tuple3 = tuple(str1)\n    print(tuple3)\n    # access the value in the tuple by index\n    print(tuple3[0])\n    # access the value in the tuple by index\n    print(tuple3[5])\n    # access the value in the tuple by index\n    print(tuple3[-1])\n    # access the value in the tuple by index\n    print(tuple3[-10])\n    # slice the tuple\n    print(tuple3[2:5])\n    # slice the tuple\n    print(tuple3[:5])\n    # slice the tuple\n    print(tuple3[2:])\n    # slice the tuple\n    print(tuple3[-4:-1])\n    # slice the tuple\n    print(tuple3[-4:])\n    # slice the tuple\n    print(tuple3[:-4])\n    # slice the tuple\n    print(tuple3[-4:4])\n    # slice the tuple\n    print(tuple3[-2:])\n    # slice the tuple\n    print(tuple3[-2:-4])\n    # slice the tuple\n    print(tuple3[-2:1])\n    # slice the tuple\n    print(tuple3[-2:-3])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3[-3:-2])\n    # slice the tuple\n    print(tuple3"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuplex in tuple1:\n        print 'The tuple exists.'\n    else:\n        print 'The tuple does not exist.'\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuple1) in tuplex:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1:\n            return True \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1)>0:\n        return True\n    else:\n        return False\n    \ndef check_in_list(list,item):\n    '''\n    Write a function to check whether an item is in a list.\n    '''\n    if item in list:\n        return True\n    else:\n        return False\n    \ndef check_items_in_list(list,items):\n    '''\n    Write a function to check whether a list of items are all in a given list.\n    '''\n    items_list=list(items)\n    for item in items_list:\n        if not check_in_list(list,item):\n            return False\n    return True\n    \ndef check_if_all_items_in_list(list,items):\n    '''\n    Write a function to check whether a list of items are all in a given list.\n    '''\n    items_list=list(items)\n    for item in items_list:\n        if not check_in_list(list,item):\n            return False\n    return True\n    \ndef check_if_all_items_in_tuplex(tuplex,items):\n    '''\n    Write a function to check whether a list of items are all in a given tuple.\n    '''\n    items_list=list(items)\n    for item in items_list:\n        if not check_tuplex(tuplex,item):\n            return False\n    return True\n    \ndef check_if_all_items_in_tuplex(tuplex,items):\n    '''\n    Write a function to check whether a list of items are all in a given tuple.\n    '''\n    items_list=list(items)\n    for item in items_list:\n        if not check_tuplex(tuplex,item):\n            return False\n    return True\n    \ndef get_min(list):\n    '''\n    Write a function to get the minimum value in a list.\n    '''\n    return min(list)\n    \ndef get_max(list):\n    '''\n    Write a function to get the maximum value in a list.\n    '''\n    return max(list)\n    \ndef check_if_all_items_in_set(set,items):\n    '''\n    Write a function to check whether a list of items are all in a given set.\n    '''\n    items_list=list(items)\n    for item in items_list:\n        if not item in set:\n            return False\n    return True\n    \ndef check_if_all_items_in_set(set,items):\n    '''\n    Write a function to check whether a list of items are all in a given set.\n    '''\n    items_list=list(items)\n    for item in items_list:\n        if not item in set:\n            return False\n    return True\n    \ndef check_if_all_items_in_dict(dict,items):\n    '''\n    Write a function to check whether a list of items are all in a given dictionary.\n    '''\n    items_list=list(items)\n    for item in items_list:\n        if not item in dict:\n            return False\n    return True\n    \ndef check_if_all_items_in_dict(dict,items):\n    '''\n    Write a function to check whether a list of items are all in a given dictionary.\n    '''\n    items_list=list(items)\n    for item in items_list:\n        if not item in dict:\n            return False\n    return True\n    \ndef get_all_keys(dict):\n    '''\n    Write a function to get all keys in a dictionary.\n    '''\n    return list(dict.keys())\n    \ndef get_all_values(dict):\n    '''\n    Write a function to get all values in a dictionary.\n    '''\n    return list(dict.values())\n    \ndef get_all_items(dict):\n    '''\n    Write a function to get all items in a dictionary.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values(dict):\n    '''\n    Write a function to get all keys and values in a dictionary.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values(dict):\n    '''\n    Write a function to get all keys and values in a dictionary.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values(dict):\n    '''\n    Write a function to get all keys and values in a dictionary.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_list(list):\n    '''\n    Write a function to get all keys and values in a list of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_list(list):\n    '''\n    Write a function to get all keys and values in a list of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_list(list):\n    '''\n    Write a function to get all keys and values in a list of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_list(list):\n    '''\n    Write a function to get all keys and values in a list of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.items())\n    \ndef get_all_keys_values_from_tuplex(tuplex):\n    '''\n    Write a function to get all keys and values in a tuple of tuples.\n    '''\n    return list(dict.item"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if tuplex.count(x) > 1:\n            return False\n    return True\n    \ndef check_tuplex_r(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return False\n    return True\n    \ndef check_tuplex_r2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r3(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r4(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r5(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r6(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r7(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r8(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r9(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r10(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r11(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r12(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r13(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r14(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r15(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r16(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r17(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r18(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r19(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r20(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r21(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r22(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r23(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r24(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r25(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r26(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if tuplex.count(x) > 1:\n            return True\n    return False\n    \ndef check_tuplex_r27(tuplex,tuple1): \n    '''\n    Writ"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x&1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x%2)\n    \ndef find_mod(a,b):\n    '''\n    Write a python function to find the modular inverse of two numbers. \n    '''\n    x = 1\n    while (a*x)%b!= 1:\n        x += 1\n    return x\n    \ndef find_decimal(x):\n    '''\n    Write a python function to find the decimal of a given fraction.\n    '''\n    return (x-1)/2\n    \ndef find_reciprocal(x):\n    '''\n    Write a python function to find the reciprocal of a given number.\n    '''\n    return (1/x)\n    \ndef find_factorial(x):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if x == 0:\n        return 1\n    elif x > 0:\n        return x * find_factorial(x-1)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_summation(x):\n    '''\n    Write a python function to find the summation of a given series.\n    '''\n    return sum(range(x))\n    \ndef find_fibonacci(x):\n    '''\n    Write a python function to find the fibonacci number at a given index.\n    '''\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return find_fibonacci(x-1) + find_fibonacci(x-2)\n    \ndef find_permutation(x,y):\n    '''\n    Write a python function to find the permutation of a given string.\n    '''\n    if x == \"\":\n        return 1\n    else:\n        return find_permutation(x[1:],y) + find_permutation(x[1:],y+x[0])\n    \ndef find_group(x):\n    '''\n    Write a python function to find the groups of an integer.\n    '''\n    if x%2 == 0:\n        return 2\n    else:\n        return 1\n    \ndef find_binary(x):\n    '''\n    Write a python function to find the binary representation of a given integer.\n    '''\n    if x == 0:\n        return 0\n    elif x > 0:\n        return x*find_binary(x-1)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_sums(n):\n    '''\n    Write a python function to find the sum of all the numbers between 1 and n.\n    '''\n    if n == 0:\n        return 0\n    elif n > 0:\n        return n + find_sums(n-1)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_digits(n):\n    '''\n    Write a python function to find the number of digits in a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n > 0:\n        return 1 + find_digits(n//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_recursive(n):\n    '''\n    Write a python function to find the number of digits in a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n > 0:\n        return 1 + find_recursive(n//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_iterative(n):\n    '''\n    Write a python function to find the number of digits in a given integer.\n    '''\n    count = 0\n    while n:\n        n = n//10\n        count += 1\n    return count\n    \ndef find_power(x,y):\n    '''\n    Write a python function to find the value of x^y.\n    '''\n    if y == 0:\n        return 1\n    elif y == 1:\n        return x\n    elif y > 1:\n        return x * find_power(x,y-1)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_sum_of_digits(x):\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    if x == 0:\n        return 0\n    elif x > 0:\n        return x%10 + find_sum_of_digits(x//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_even_sum(x):\n    '''\n    Write a python function to find the sum of the even digits of a given number.\n    '''\n    if x == 0:\n        return 0\n    elif x > 0:\n        if x%10%2 == 0:\n            return x%10 + find_even_sum(x//10)\n        else:\n            return find_even_sum(x//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_sum_of_squares(x):\n    '''\n    Write a python function to find the sum of the squares of the digits of a given number.\n    '''\n    if x == 0:\n        return 0\n    elif x > 0:\n        if x%10 == 0:\n            return x**2 + find_sum_of_squares(x//10)\n        else:\n            return find_sum_of_squares(x//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_sum_of_odds(x):\n    '''\n    Write a python function to find the sum of the odd digits of a given number.\n    '''\n    if x == 0:\n        return 0\n    elif x > 0:\n        if x%10%2!= 0:\n            return x%10 + find_sum_of_odds(x//10)\n        else:\n            return find_sum_of_odds(x//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_sum_of_reversed(x):\n    '''\n    Write a python function to find the sum of the reversed digits of a given number.\n    '''\n    if x == 0:\n        return 0\n    elif x > 0:\n        return (x%10) + find_sum_of_reversed(x//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_sum_of_even_and_odds(x):\n    '''\n    Write a python function to find the sum of the even digits and the odd digits of a given number.\n    '''\n    if x == 0:\n        return 0\n    elif x > 0:\n        if x%10%2 == 0:\n            return x%10 + find_sum_of_even_and_odds(x//10)\n        else:\n            return find_sum_of_even_and_odds(x//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_reverse(x):\n    '''\n    Write a python function to find the reverse of a given number.\n    '''\n    if x == 0:\n        return 0\n    elif x > 0:\n        return (x%10) + find_reverse(x//10)\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_greater(x,y):\n    '''\n    Write a python function to find the greatest among two given numbers.\n    '''\n    if x > y:\n        return x\n    elif y > x:\n        return y\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_smaller(x,y):\n    '''\n    Write a python function to find the smallest among two given numbers.\n    '''\n    if x > y:\n        return y\n    elif y > x:\n        return x\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_greater_or_equal(x,y):\n    '''\n    Write a python function to find the greatest among two given numbers.\n    '''\n    if x > y:\n        return x\n    elif y > x:\n        return y\n    else:\n        return \"Enter a positive integer\"\n    \ndef find_smaller_or_equal(x,y):"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x&1) == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n    \ndef find_Parity_Bitwise(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x&1 == 0 else 'Odd'\n    \ndef find_Parity_Mathematical(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if bin(x).count('1')%2 == 0 else 'Odd'\n    \ndef find_Parity_Numpy(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if np.bitwise_and(x, x).sum() == 0 else 'Odd'\n    \ndef find_Parity_Numpy_Nested(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if np.bitwise_and(x, x).sum() == 0 else 'Odd'\n    \ndef find_Parity_Numpy_Vector(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if np.bitwise_and(x, x).sum() == 0 else 'Odd'\n    \ndef find_Parity_NumPy(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if np.bitwise_and(x, x).sum() == 0 else 'Odd'\n    \ndef find_Parity_Pandas(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x&1 == 0 else 'Odd'\n    \ndef find_Parity_Pandas(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x&1) == 0 else 'Odd'\n    \ndef find_Parity_Python(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x&1) == 0 else 'Odd'\n    \ndef find_Parity_R(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2==0 else 'Odd'\n    \ndef find_Parity_R_Numpy(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_NumPy(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_Python(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0 else 'Odd'\n    \ndef find_Parity_R_Pandas(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_Pandas(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() == 0 else 'Odd'\n    \ndef find_Parity_R_Python(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() == 0 else 'Odd'\n    \ndef find_Parity_R_Python_Ver2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() else 'Odd'\n    \ndef find_Parity_R_R(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0 else 'Odd'\n    \ndef find_Parity_R_R_Numpy(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_R_NumPy(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_R_Python(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0 else 'Odd'\n    \ndef find_Parity_R_R_Python_Ver2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() else 'Odd'\n    \ndef find_Parity_R_R_Pandas(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_R_Pandas_Ver2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_R_Python(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() else 'Odd'\n    \ndef find_Parity_R_R_Python_Ver2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() else 'Odd'\n    \ndef find_Parity_R_R_Pandas(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_R_Pandas_Ver2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if (x%2 == 0).sum() == 0 else 'Odd'\n    \ndef find_Parity_R_R_Python(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() else 'Odd'\n    \ndef find_Parity_R_R_Python_Ver2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() else 'Odd'\n    \ndef find_Parity_R_Python(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'Even' if x%2 == 0.sum() else 'Odd'\n    "
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    total = 0\n    for i in x:\n        total = total + i\n    if (total%2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    bit_sum = 0\n    x = x & 0xFFFFFFFF\n    while(x):\n        bit_sum += x&1\n        x >>= 1\n    return (bit_sum & 1) == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1 \n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Note:\n    # Given a number of length 'x', if 'x' is even, the parity is even\n    # if 'x' is odd, the parity is odd\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while (x > 0):\n        parity = parity + x % 2\n        x = x // 2\n    return parity\n    \n    \ndef find_Parity_lst(lst):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in lst:\n        parity = parity + i % 2\n    return parity\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    string_list = list(str(n))\n    for i in range(len(string_list)-1):\n        if string_list[i] < string_list[i+1]:\n            index = i\n    print(index)\n    print(string_list)\n    reverse_index = len(string_list) - index - 1\n    print(reverse_index)\n    print(string_list[reverse_index], string_list[index])\n    string_list[reverse_index], string_list[index] = string_list[index], string_list[reverse_index]\n    print(string_list)\n    string_list = string_list[:reverse_index+1] + list(reversed(string_list[reverse_index+1:]))\n    print(string_list)\n    return int(''.join(string_list))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 0:\n        return None\n    if n < 9:\n        return n + 1\n    if n % 9 == 0:\n        return rearrange_bigger(n / 9) * 10 + 1\n    else:\n        n1 = rearrange_bigger(n // 9) * 10 + n % 9\n        n2 = rearrange_bigger(n // 9) * 10 + n // 9\n        if n1 > n2:\n            return n1\n        else:\n            return n2\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0: return 0\n    ret = n\n    while ret >= 10:\n        ret = list(str(ret))\n        ret[0], ret[-1] = ret[-1], ret[0]\n        ret = int(\"\".join(ret))\n    return ret\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    n_len = len(s)\n    for i in range(n_len-2,-1,-1):\n        if s[i] < s[i+1]:\n            break\n    \n    if i == 0:\n        return -1\n    \n    n_new = s[:i+1] + s[i+1:][::-1]\n    return int(n_new)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # print(len(n))\n    # print(n)\n    if len(n) == 1:\n        return '0'\n    bigger_number = ['']*len(n)\n    for i in range(len(n)):\n        bigger_number[i] = n[len(n)-1-i]\n    bigger_number = ''.join(bigger_number)\n    if int(bigger_number) < int(n):\n        return bigger_number\n    else:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    n = list(str(n))\n    if int(n[-1]) < int(n[-2]):\n        n[-1], n[-2] = n[-2], n[-1]\n    n.remove(n[-1])\n    n.append(str(int(n[-1]) + 1))\n    return int(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    i = len(s)-1\n    while i > 0 and int(s[i-1]) >= int(s[i]):\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(s)-1\n    while int(s[j]) <= int(s[i-1]):\n        j -= 1\n    s = s[:i-1]+s[j]+s[i-1:j]+s[i:len(s)-1]\n    return int(s)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    if len(n) <= 1: return n\n    return int(n[len(n)-1] + n[:len(n)-1])\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def bigger_then_prev(n, prev):\n        return int(''.join(sorted(str(n), reverse = True))) > int(''.join(sorted(str(prev), reverse = True)))\n    \n    def next_bigger(n):\n        if n == 0: return 0\n        next = n - 1\n        while not bigger_then_prev(n, next):\n            next -= 1\n        return next\n        \n    return next_bigger(n)\n    \n    \ndef letter_case_permutations(S):\n    '''\n    Given a string S,\n    '''\n    def dfs(pos, path):\n        if pos == len(S):\n            res.append(''.join(path))\n            return\n        if S[pos].isalpha():\n            path.append(S[pos].lower())\n            dfs(pos+1, path)\n            path.pop()\n        path.append(S[pos])\n        dfs(pos+1, path)\n        path.pop()\n        \n    res = []\n    dfs(0, [])\n    return res\n    \n    \ndef nth_largest_element(n, arr):\n    '''\n    Given a non-empty array of integers, return the kth largest element in the array\n    '''\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[right] = arr[right], arr[i]\n        return i\n    \n    def quick_select(arr, left, right, k):\n        if left == right: return arr[left]\n        pivot = partition(arr, left, right)\n        if pivot == k-1: return arr[pivot]\n        if pivot > k-1:\n            return quick_select(arr, left, pivot-1, k)\n        else:\n            return quick_select(arr, pivot+1, right, k)\n    \n    return quick_select(arr, 0, len(arr)-1, n)\n    \n    \ndef sort_characters_by_frequency(S):\n    '''\n    Given a string S, find the frequency of the characters\n    '''\n    def count_char_freq(S):\n        res = {}\n        for i in S:\n            if i not in res:\n                res[i] = 1\n            else:\n                res[i] += 1\n        return res\n    \n    def sort_char_freq(freq):\n        res = {}\n        for char, freq in freq.items():\n            if freq not in res:\n                res[freq] = []\n            res[freq].append(char)\n        return res\n    \n    freq = count_char_freq(S)\n    char_freq = sort_char_freq(freq)\n    res = []\n    for freq, chars in char_freq.items():\n        res.extend(sorted(chars))\n    return ''.join(res)\n    \n    \ndef max_product_subarray(arr):\n    '''\n    Given an array of integers, find the length of the longest subarray with product of all elements <= 1\n    '''\n    def max_product_window(arr):\n        max_curr = min_curr = arr[0]\n        max_so_far = min_so_far = 1\n        for i in range(1, len(arr)):\n            max_curr, min_curr = max(max_curr * arr[i], min_curr * arr[i]), min(max_curr * arr[i], min_curr * arr[i])\n            max_so_far = max(max_so_far, max_curr)\n            min_so_far = min(min_so_far, min_curr)\n        return max_so_far, min_so_far\n    \n    max_so_far, min_so_far = max_product_window(arr)\n    \n    return max(max_so_far, 1)\n    \n    \ndef max_subarray_of_size_k(arr, k):\n    '''\n    Given an array of integers, find the subarray with maximum sum such that\n    the sum of the subarray is a multiple of k\n    '''\n    def find_multiple_of_k(arr, k):\n        res = 0\n        for i in range(len(arr)):\n            res += arr[i]\n            if res % k == 0:\n                return res\n    \n    def max_subarray_div_k(arr, k):\n        res = 0\n        max_so_far = 0\n        for i in range(len(arr)):\n            res += arr[i]\n            if res % k == 0:\n                max_so_far = max(max_so_far, res)\n            else:\n                res = res - arr[i] + arr[i]\n        return max_so_far\n        \n    return max_subarray_div_k(arr, k)\n    \n    \ndef find_longest_string(arr):\n    '''\n    Given a string array, find the longest string consisting of all characters of the array.\n    '''\n    def is_permutation(a, b):\n        a_dict = {}\n        b_dict = {}\n        for char in a:\n            if char in a_dict:\n                a_dict[char] += 1\n            else:\n                a_dict[char] = 1\n        for char in b:\n            if char in b_dict:\n                b_dict[char] += 1\n            else:\n                b_dict[char] = 1\n        return a_dict == b_dict\n    \n    res = ''\n    for i in range(len(arr)):\n        curr = arr[i]\n        for j in range(i, len(arr)):\n            curr += arr[j]\n            if is_permutation(curr, arr):\n                if len(curr) > len(res):\n                    res = curr\n    return res\n    \n    \ndef make_special_palindrome(n):\n    '''\n    Given an integer n, return the smallest palindrome made from the product of two n-digit integers.\n    For example, given n = 3, the palindrome 9999 is the smallest one you can get\n    '''\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    def get_next_palindrome(n):\n        if n % 10 == 0:\n            return 9 * n\n        return n * 10 + 1\n    \n    res = 10 ** (n - 1)\n    for i in range(n - 1):\n        res = min(res, get_next_palindrome(res))\n    return res\n    \n    \ndef is_fibonacci(n):\n    '''\n    Given an integer n, return true if it is the sum of two Fibonacci numbers, otherwise return false\n    '''\n    def get_fib(n):\n        if n <= 1:\n            return n\n        return get_fib(n-1) + get_fib(n-2)\n    \n    f1 = get_fib(2)\n    f2 = get_fib(3)\n    return (n == f1 + f2) or (n == f2 + f1)\n    \n    \ndef break_words(sentence):\n    '''\n    Given a string sentence containing english words, seperate the sentence into an array of strings\n    '''\n    return sentence.split(' ')\n    \n    \ndef is_pangram(sentence):\n    '''\n    Given a string sentence, return true if it is a pangram\n    '''\n    def is_letter(letter):\n        return letter.isalpha()\n    \n    def count_letters(sentence):\n        res = {}\n        for i in sentence:\n            if is_letter(i):\n                if i in res:\n                    res[i] += 1\n                else:\n                    res[i] = 1\n        return res\n    \n    res = count_letters(sentence)\n    return len(res.keys()) == 26\n    \n    \ndef next"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    i = len(str_n)-1\n    while i > 0:\n        if str_n[i-1] > str_n[i]:\n            break\n        i = i-1\n    if i == 0:\n        return -1\n    j = len(str_n)-1\n    while j > i:\n        if str_n[j] > str_n[i-1]:\n            break\n        j = j-1\n    str_n[i-1], str_n[j] = str_n[j], str_n[i-1]\n    str_n[i:] = str_n[len(str_n)-1:i-1:-1]\n    return int(''.join(str_n))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return res\n    minHeap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == 0 and j == 0:\n                heapq.heappush(minHeap, (nums1[i] + nums2[j], i, j))\n            elif nums1[i] + nums2[j] < minHeap[0][0]:\n                heapq.heappush(minHeap, (nums1[i] + nums2[j], i, j))\n                if len(minHeap) > k:\n                    heapq.heappop(minHeap)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_smallest_pairs_helper(nums1, nums2, k):\n        if not nums1 or not nums2:\n            return []\n        result = []\n        m = len(nums1)\n        n = len(nums2)\n        if m == 0 or n == 0:\n            return result\n        minheap = []\n        for i in range(min(k, m)):\n            for j in range(min(k, n)):\n                if nums1[i] < nums2[j]:\n                    heapq.heappush(minheap, (nums1[i], nums2[j]))\n                else:\n                    heapq.heappush(minheap, (nums2[j], nums1[i]))\n            if len(minheap) < k:\n                continue\n            else:\n                while len(minheap) > k:\n                    heapq.heappop(minheap)\n            result.append([heapq.heappop(minheap) for x in range(k)])\n        return result\n    return k_smallest_pairs_helper(nums1, nums2, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    return heapq.nsmallest(k, [(n1, n2) for n1 in nums1 for n2 in nums2])\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # nums1, nums2 = sorted(nums1), sorted(nums2)\n    # if k == 0:\n    #     return []\n    # result = []\n    # i, j = 0, 0\n    # while i < len(nums1) and j < len(nums2):\n    #     if nums1[i] + nums2[j] < 0:\n    #         i += 1\n    #     elif nums1[i] + nums2[j] > 0:\n    #         j += 1\n    #     else:\n    #         result.append([nums1[i], nums2[j]])\n    #         i += 1\n    #         j += 1\n    #     if len(result) == k:\n    #         return result\n    #     if i == len(nums1):\n    #         while j < len(nums2):\n    #             result.append([nums1[-1], nums2[j]])\n    #             j += 1\n    #         return result\n    #     if j == len(nums2):\n    #         while i < len(nums1):\n    #             result.append([nums1[i], nums2[-1]])\n    #             i += 1\n    #         return result\n    # return result\n    nums1, nums2 = sorted(nums1), sorted(nums2)\n    result = []\n    heap = []\n    i = 0\n    j = 0\n    while i < len(nums1) or j < len(nums2):\n        if i == len(nums1):\n            heapq.heappush(heap, (-nums2[j], -j, j))\n            j += 1\n        elif j == len(nums2):\n            heapq.heappush(heap, (-nums1[i], -i, i))\n            i += 1\n        elif nums1[i] + nums2[j] < 0:\n            heapq.heappush(heap, (-nums2[j], -j, j))\n            j += 1\n        elif nums1[i] + nums2[j] > 0:\n            heapq.heappush(heap, (-nums1[i], -i, i))\n            i += 1\n        else:\n            heapq.heappush(heap, (-nums2[j], -j, j))\n            heapq.heappush(heap, (-nums1[i], -i, i))\n            i += 1\n            j += 1\n        if len(result) == k:\n            return result\n        if i == len(nums1):\n            while j < len(nums2):\n                heapq.heappush(heap, (-nums2[j], -j, j))\n                j += 1\n        elif j == len(nums2):\n            while i < len(nums1):\n                heapq.heappush(heap, (-nums1[i], -i, i))\n                i += 1\n        elif nums1[i] + nums2[j] < 0:\n            heapq.heappush(heap, (-nums2[j], -j, j))\n            j += 1\n        elif nums1[i] + nums2[j] > 0:\n            heapq.heappush(heap, (-nums1[i], -i, i))\n            i += 1\n        else:\n            heapq.heappush(heap, (-nums2[j], -j, j))\n            heapq.heappush(heap, (-nums1[i], -i, i))\n            i += 1\n            j += 1\n        if len(result) == k:\n            return result\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    minHeap = []\n    pairs = []\n    for i in xrange(0, k):\n        if not minHeap or nums1[i] <= -minHeap[0][0]:\n            heapq.heappush(minHeap, (-nums1[i], nums1[i]))\n        else:\n            heapq.heappush(minHeap, (-minHeap[0][0], minHeap[0][1]))\n            heapq.heappop(minHeap)\n            heapq.heappush(minHeap, (-nums1[i], nums1[i]))\n        if not minHeap or nums2[i] <= -minHeap[0][0]:\n            heapq.heappush(minHeap, (-nums2[i], nums2[i]))\n        else:\n            heapq.heappush(minHeap, (-minHeap[0][0], minHeap[0][1]))\n            heapq.heappop(minHeap)\n            heapq.heappush(minHeap, (-nums2[i], nums2[i]))\n        if minHeap:\n            pairs.append((-minHeap[0][0], minHeap[0][1]))\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    n1, n2 = len(nums1), len(nums2)\n    if n1 < k or n2 < k:\n        return pairs\n    i, j = 0, 0\n    nums1.sort()\n    nums2.sort()\n    while i < n1 and j < n2:\n        if nums1[i] < nums2[j]:\n            heapq.heappush(pairs, (nums1[i], nums2[j]))\n            if len(pairs) == k:\n                break\n            i += 1\n        elif nums1[i] > nums2[j]:\n            heapq.heappush(pairs, (nums1[i], nums2[j]))\n            if len(pairs) == k:\n                break\n            j += 1\n        else:\n            heapq.heappush(pairs, (nums1[i], nums2[j]))\n            if len(pairs) == k:\n                break\n            i += 1\n            j += 1\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    h = []\n    for i in range(len(nums1)):\n        heapq.heappush(h, (nums1[i] + nums2[0], i, 0))\n    for _ in range(k):\n        if not h:\n            break\n        top = heapq.heappop(h)\n        result.append([nums1[top[1]], nums2[top[2]]])\n        if top[2] + 1 < len(nums2):\n            heapq.heappush(h, (nums1[top[1]] + nums2[top[2] + 1], top[1], top[2] + 1))\n    return result\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in xrange(min(k, len(nums1))):\n        for j in xrange(min(k, len(nums2))):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    res = []\n    for i in xrange(k):\n        _, i1, i2 = heapq.heappop(heap)\n        res.append([nums1[i1], nums2[i2]])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1):\n        return None\n    # heap of length k\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    # loop through the heap\n    for i in range(k, len(nums1)):\n        if nums1[i] > heap[0][0]:\n            # add the new num\n            heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n            # get rid of the smallest element\n            heapq.heappop(heap)\n    # loop through heap\n    # output k pairs\n    output = []\n    while heap:\n        output.append([nums1[heap[0][1]], nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return output\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    if len(nums1) == 0 or len(nums2) == 0 or k == 0:\n        return pairs\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    temp_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_list.append(list1[i][0] * list1[j][0], list1[i][1] * list1[j][1])\n    return min(temp_list)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tupList = list(map(lambda x: (x[0],x[1]),list1))\n    return min(map(lambda x: x[0]*x[1],tupList))\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if min_product > product:\n            min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple_list = [(1,5),(4,6),(1,2),(5,8),(2,3)]\n    max_element = tuple_list[0][1]\n    min_product = tuple_list[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    import itertools\n    list2 = list(itertools.combinations(list1,2))\n    list3 = list()\n    for x in list2:\n        list3.append(abs(x[0][0]*x[1][0]))\n    return min(list3)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        return list1[0][0]*list1[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise Exception(\"list must contain at least two tuples\")\n    return min([(list1[i][0]*list1[i][1],i) for i in xrange(len(list1))])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # your code here\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    prod = 0\n    for tup in list1:\n        if tup[0] == tup[1]:\n            prod += 1\n    if prod!= 0:\n        return (prod, tup)\n    else:\n        return None\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l = []\n    for i in list1:\n        for j in list1:\n            if i[0] * j[0] < j[0] * i[0]:\n                l.append((i[0],j[0]))\n            else:\n                l.append((j[0],i[0]))\n    l.sort()\n    print l\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #initialize the list\n    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Lista = [2, -9, 3, 6, -8, 7, -8, 9]\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    print(min_val)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if(len(listval) == 0):\n        return None\n    if(len(listval) == 1):\n        return listval[0]\n    return min(listval[0], min_val(listval[1:]))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_regex = re.compile('(.)([A-Z][a-z]+)')\n    result = snake_regex.sub(r'\\1_\\2', word)\n    return result.upper()\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + \"\".join(x.title() for x in word[1:])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub('(?!^)([A-Z]+[a-z]+|[A-Z0-9]+)', r'_\\1', word)\ndef my_solution(s):\n    return \"\".join(camel_to_snake(w) if w.islower() else w for w in s.split(\"_\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split camel case string\n    words = word.split('_')\n    # Initialize output\n    camel_case_string = \"\"\n    # Loop through split string and add to output\n    for word in words:\n        camel_case_string += word\n        camel_case_string += word.capitalize()\n    return camel_case_string\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    #test case \"snake_to_camel\"\n    assert camel_to_snake(\"snake_to_camel\") =='snakeToCamel'\n    assert camel_to_snake(\"snake_to_camel1\") =='snakeToCamel1'\n    assert camel_to_snake(\"snake_to_camel2\") =='snakeToCamel2'\n    assert camel_to_snake(\"snake_to_camel3\") =='snakeToCamel3'\n    assert camel_to_snake(\"snake_to_camel4\") =='snakeToCamel4'\n    \n    \n    #return the camel case string from the snake case string\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word is None or word == '':\n        return ''\n    if isinstance(word, str):\n        word = word.strip()\n        if word.isupper():\n            return word\n        else:\n            head = word[0].upper()\n            tail = word[1:]\n            return head + tail\n    else:\n        return ''\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #![snake_to_camel](https://www.draw.io/#!/Slides/27cf70fb-f25c-4f7e-b75e-e1c2413faae7)\n    word_to_convert = word.replace('_','')\n    word_to_convert = word_to_convert.replace('-','')\n    word_to_convert = word_to_convert.replace(' ', '')\n    word_to_convert = word_to_convert.lower()\n    word_to_convert = word_to_convert.split()\n    output = ''\n    for index in word_to_convert:\n        output += index.capitalize()\n    return output\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = re.sub('[0-9]+', '', word)\n    new_word = new_word.title()\n    new_word = re.sub('[^0-9A-Z]+', '', new_word)\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    if len(word) == 1:\n        return word[0].upper()\n    first_letter = word[0]\n    new_word = word[1:].replace(first_letter, first_letter.upper(), 1)\n    return first_letter + new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.title() for w in re.findall('[A-Z][^A-Z]*', word))\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [n for n in l if n % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [1,2,3,4,5,6,7,8,9,10]\n    return l[1::2]\n    \nprint remove_odd(l)"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == []:\n        return l\n    else:\n        if l[0] % 2 == 1:\n            return [l[0]] + remove_odd(l[1:])\n        else:\n            return remove_odd(l[1:])\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for num in l:\n        if num % 2 == 1:\n            l.remove(num)\n    return l\n    \nprint(remove_odd([1,2,3,4,5,6,7,8,9])"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    newlist = []\n    for i in l:\n        if i % 2 == 0:\n            newlist.append(i)\n    return newlist\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n    "
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        return None\n    if n > len(list1):\n        return None\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = None\n    for item in list1:\n        if n == 0:\n            result = item\n            break\n        n -= 1\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        print 'IndexError: list index out of range'\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        print(\"ERROR: Index out of range.\")\n        return\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #list1 = [('a',1), ('b',2), ('c',3)]\n    nth_element = (lambda x: x[1])\n    #x = 'b'\n    #print(x[1])\n    #return [x[1] for x in list1]\n    return list(map(nth_element, list1))\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return [i[n] for i in list1]\n    except IndexError:\n        print(\"Index out of bounds\")\n        return []\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [sub[n] for sub in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return None\n    else:\n        return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for a in list1:\n        if a in list2:\n            print a\n            return True\n    return False\n    \n    \n    \ndef collatz(num):\n    '''\n    Write a python function to return the Collatz sequence for a given number.\n    '''\n    #the collatz sequence for num = 1 should return [1]\n    #the collatz sequence for num = 2 should return [1,2]\n    #the collatz sequence for num = 3 should return [1,2,1]\n    #the collatz sequence for num = 4 should return [1,2,1,2]\n    #the collatz sequence for num = 5 should return [1,2,1,2,1]\n    #the collatz sequence for num = 6 should return [1,2,1,2,1,2]\n    #the collatz sequence for num = 7 should return [1,2,1,2,1,2,1]\n    #the collatz sequence for num = 8 should return [1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 9 should return [1,2,1,2,1,2,1,2,1]\n    #the collatz sequence for num = 10 should return [1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 11 should return [1,2,1,2,1,2,1,2,1,2,1]\n    #the collatz sequence for num = 12 should return [1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 13 should return [1,2,1,2,1,2,1,2,1,2,1,2,1]\n    #the collatz sequence for num = 14 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 15 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]\n    #the collatz sequence for num = 16 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 17 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]\n    #the collatz sequence for num = 18 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 19 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 20 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 21 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 22 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 23 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 24 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 25 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 26 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 27 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 28 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 29 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 30 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 31 should return [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]\n    #the collatz sequence for num = 32 should return [1,2,1,2,"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return i\n        else:\n            return None\ndef overlap(A,B,overlap_ratio):  \n    '''\n    Write a python function to check whether two segments overlap or not.\n    '''\n    if overlap_ratio*len(A)<=len(B) and overlap_ratio*len(A)<=len(A)+len(B):\n        return True\n    else:\n        return False\ndef disjoint(A,B,overlap_ratio):\n    if overlap_ratio*len(A)<=len(B) and overlap_ratio*len(A)<=len(A)+len(B):\n        return False\n    else:\n        return True\ndef GC(seq):\n    '''\n    Write a python function to calculate GC content of a DNA/RNA sequence.\n    '''\n    count = 0\n    for i in seq:\n        if i in ['G','C']:\n            count+=1\n    return count/len(seq)\ndef factorial(n):\n    factorial = 1\n    while n>1:\n        factorial*=n\n        n-=1\n    return factorial\ndef combinations(n,r):\n    return factorial(n)/factorial(r)/factorial(n-r)\ndef combination(n,r):\n    return combinations(n,r)\ndef permutations(n,r):\n    return combinations(n,r)\ndef permutation(n,r):\n    return permutations(n,r)\ndef phi(n,r):\n    return combinations(n,r)/permutations(n,r)\ndef at(string1,string2):\n    '''\n    Write a python function to calculate the AT content of a DNA/RNA sequence.\n    '''\n    count = 0\n    for i in string1:\n        if i in ['A','T']:\n            count+=1\n    return count/len(string1)\ndef at_ratio(string1,string2):\n    '''\n    Write a python function to calculate the AT ratio of two DNA/RNA sequences.\n    '''\n    count = 0\n    for i in string1:\n        if i in ['A','T']:\n            count+=1\n    return count/len(string1)\ndef frequency(dict,seq):\n    '''\n    Write a python function to calculate the frequency of elements in a sequence.\n    '''\n    count = 0\n    for i in seq:\n        if i in dict:\n            count+=1\n    return count/len(seq)\ndef frequency_dict(dict,seq):\n    '''\n    Write a python function to calculate the frequency of elements in a sequence.\n    '''\n    count = 0\n    for i in seq:\n        if i in dict:\n            count+=1\n    return count\ndef frequency_nested_dict(dict,seq):\n    '''\n    Write a python function to calculate the frequency of elements in a sequence in a nested dictionary format.\n    '''\n    count = 0\n    for i in seq:\n        if i in dict:\n            if dict[i]==1:\n                count+=1\n            else:\n                count+=dict[i]\n    return count/len(seq)\ndef frequency_nested_dict2(dict,seq):\n    '''\n    Write a python function to calculate the frequency of elements in a sequence in a nested dictionary format.\n    '''\n    count = 0\n    for i in seq:\n        if i in dict:\n            if dict[i]==1:\n                count+=1\n            else:\n                count+=dict[i]\n    return count\ndef nCk(n,k):\n    '''\n    Write a python function to calculate the number of combinations for a given set of elements in a list.\n    '''\n    return combinations(n,k)\ndef nPr(n,r):\n    '''\n    Write a python function to calculate the number of permutations for a given set of elements in a list.\n    '''\n    return permutations(n,r)\ndef nP(n):\n    '''\n    Write a python function to calculate the number of permutations for a given number of elements in a list.\n    '''\n    return factorial(n)\ndef nC(n,r):\n    '''\n    Write a python function to calculate the number of combinations for a given set of elements in a list.\n    '''\n    return combinations(n,r)\ndef nH(n):\n    '''\n    Write a python function to calculate the number of permutations for a given number of elements in a list.\n    '''\n    return factorial(n)\ndef nCr(n,r):\n    '''\n    Write a python function to calculate the number of combinations for a given set of elements in a list.\n    '''\n    return combinations(n,r)\ndef kth_frequency(dict,k):\n    '''\n    Write a python function to calculate the kth frequency of elements in a sequence.\n    '''\n    count = 0\n    for i in dict:\n        count+=dict[i]\n        if count>=k:\n            return i\ndef kth_frequency_dict(dict,k):\n    '''\n    Write a python function to calculate the kth frequency of elements in a sequence in a dictionary format.\n    '''\n    count = 0\n    for i in dict:\n        count+=dict[i]\n        if count>=k:\n            return i\ndef kth_frequency_nested_dict(dict,k):\n    '''\n    Write a python function to calculate the kth frequency of elements in a sequence in a nested dictionary format.\n    '''\n    count = 0\n    for i in dict:\n        count+=dict[i]\n        if count>=k:\n            return i\ndef entropy(list):\n    '''\n    Write a python function to calculate the entropy of a list of integers.\n    '''\n    prob_list = []\n    for i in list:\n        if i not in prob_list:\n            prob_list.append(i)\n    prob_list = [float(i)/len(list) for i in prob_list]\n    entropy_list = [-x*math.log(x,2) for x in prob_list]\n    return sum(entropy_list)\ndef entropy_dict(dict):\n    '''\n    Write a python function to calculate the entropy of a dictionary of integers.\n    '''\n    prob_list = []\n    for i in dict:\n        if i not in prob_list:\n            prob_list.append(i)\n    prob_list = [float(i)/len(dict) for i in prob_list]\n    entropy_list = [-x*math.log(x,2) for x in prob_list]\n    return sum(entropy_list)\ndef entropy_nested_dict(dict):\n    '''\n    Write a python function to calculate the entropy of a nested dictionary of integers.\n    '''\n    prob_list = []\n    for i in dict:\n        if i not in prob_list:\n            prob_list.append(i)\n    prob_list = [float(i)/len(dict) for i in prob_list]\n    entropy_list = [-x*math.log(x,2) for x in prob_list]\n    return sum(entropy_list)\ndef entropy_nested_dict2(dict):\n    '''\n    Write a python function to calculate the entropy of a nested dictionary of integers.\n    '''\n    prob_list = []\n    for i in dict:\n        if i not in prob_list:\n            prob_list.append(i)\n    prob_list = [float(i)/len(dict) for i in prob_list]\n    entropy_list = [-x*math.log(x,2) for x in prob_list]\n    return sum(entropy_list)\ndef gini(list):\n    '''\n    Write a python function to calculate the Gini coefficient of a list of integers.\n    '''\n    prob_list = []\n    for i in list:\n        if i not in prob_list:\n            prob_list.append(i)\n    prob_list = [float(i)/len(list) for i in prob_list]\n    gini_list = [x**2 for x in prob_list]\n    return 1-sum(gini_list)"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any([i for i in list1 if i in list2])\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return 0\n    elif list1[0]==list2[0]:\n        return 1\n    else:\n        return overlapping(list1[1:],list2)\ndef reverse(list1):  \n    '''\n    Write a python function to reverse a list\n    '''\n    if len(list1)==0 or len(list1)==1:\n        return list1\n    else:\n        return [list1[-1]]+reverse(list1[:-1])\ndef common_elements(list1,list2):  \n    '''\n    Write a python function to find common elements between two lists\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return 0\n    elif list1[0]==list2[0]:\n        return list1[0]+common_elements(list1[1:],list2[1:])\n    else:\n        return common_elements(list1,list2[1:])\ndef duplicate_elements(list1):  \n    '''\n    Write a python function to find duplicate elements in a list\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        if list1[0]==list1[1]:\n            return duplicate_elements(list1[1:])\n        else:\n            return [list1[0]]+duplicate_elements(list1[1:])\ndef check_subset(list1,list2):  \n    '''\n    Write a python function to check whether a list is a subset of another list\n    '''\n    if len(list1)==0:\n        return 1\n    else:\n        if list1[0] in list2:\n            return check_subset(list1[1:],list2)\n        else:\n            return 0+check_subset(list1[1:],list2)\ndef power(list1):  \n    '''\n    Write a python function to find power of all elements in a list\n    '''\n    if len(list1)==0:\n        return 1\n    else:\n        if list1[0]>0:\n            return list1[0]+power(list1[1:])\n        else:\n            return 1+power(list1[1:])\ndef is_perfect(num):  \n    '''\n    Write a python function to check whether a number is perfect or not\n    '''\n    if num==1:\n        return 1\n    else:\n        if num%2==0:\n            return is_perfect(num/2)+1\n        else:\n            return is_perfect((num-1)/2)\ndef palindrome(word):  \n    '''\n    Write a python function to check whether a word is palindrome or not\n    '''\n    if len(word)==0:\n        return 1\n    else:\n        if word[0]==word[-1]:\n            return palindrome(word[1:-1])\n        else:\n            return 0+palindrome(word[1:])\ndef count_numbers(list1):  \n    '''\n    Write a python function to count the number of each element in a list\n    '''\n    if len(list1)==0:\n        return 1\n    else:\n        if list1[0]==list1[1]:\n            return 1+count_numbers(list1[2:])\n        else:\n            return 1+count_numbers(list1[1:])\ndef duplicates(list1):  \n    '''\n    Write a python function to find duplicates in a list\n    '''\n    if len(list1)==0 or len(list1)==1:\n        return 0\n    elif list1[0]==list1[1]:\n        return 1+duplicates(list1[2:])\n    else:\n        return duplicates(list1[1:])\ndef min_element(list1):  \n    '''\n    Write a python function to find min element in a list\n    '''\n    if len(list1)==0:\n        return -1\n    elif list1[0]<list1[1]:\n        return list1[0]\n    else:\n        return list1[1]\ndef matrix_chain_mult(list1):  \n    '''\n    Write a python function to find the minimum number of multiplications needed to multiply a chain of matrices\n    '''\n    if len(list1)==3:\n        return list1[0]*list1[1]*list1[2]\n    else:\n        return min_element([matrix_chain_mult([list1[0],list1[1],list1[2]]),list1[0]*list1[1]*list1[3],matrix_chain_mult([list1[0],list1[1],list1[3]]),list1[0]*list1[2]*list1[3]])\ndef minimum_operation(list1):  \n    '''\n    Write a python function to find the minimum number of operations to multiply two numbers\n    '''\n    if len(list1)==1:\n        return list1[0]\n    else:\n        return list1[0]*list1[1]+minimum_operation(list1[2:])\ndef largest_number(list1):  \n    '''\n    Write a python function to find the largest number in a list\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        if list1[0]>list1[1]:\n            return list1[0]\n        else:\n            return list1[1]\ndef remove_duplicates(list1):  \n    '''\n    Write a python function to remove duplicates from a list\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        if list1[0]!=list1[1]:\n            return [list1[0]]+remove_duplicates(list1[1:])\n        else:\n            return remove_duplicates(list1[1:])\ndef search_element(list1,list2):  \n    '''\n    Write a python function to search the element in a list\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return -1\n    else:\n        if list1[0]==list2[0]:\n            return 0+search_element(list1[1:],list2[1:])\n        else:\n            return search_element(list1,list2[1:])\ndef remove_duplicates_in_sorted_list(list1):  \n    '''\n    Write a python function to remove duplicates in a sorted list\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        if list1[0]!=list1[1]:\n            return [list1[0]]+remove_duplicates_in_sorted_list(list1[1:])\n        else:\n            return remove_duplicates_in_sorted_list(list1[1:])\ndef kth_max_num(list1,k):  \n    '''\n    Write a python function to find the kth largest number in a list\n    '''\n    if len(list1)==0:\n        return -1\n    else:\n        if k>len(list1):\n            return kth_max_num(list1[1:],k)\n        else:\n            if list1[0]>list1[1]:\n                return list1[0]\n            else:\n                return list1[1]\ndef is_sorted(list1):  \n    '''\n    Write a python function to check whether a list is sorted\n    '''\n    if len(list1)==0:\n        return 1\n    else:\n        if list1[0]>list1[1]:\n            return 0+is_sorted(list1[1:])\n        else:\n            return 1+is_sorted(list1[1:])\ndef rotate(list1):  \n    '''\n    Write a python function to rotate a list\n    '''\n    if len(list1)==0:\n        return list1\n    else:\n        return list1[-1]+rotate(list1[:-1])\ndef find"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(val in list2 for val in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            print('yes')\n            break\n    else:\n        print('no')\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)>len(list2):\n        return list(set(list1).intersection(list2))\n    elif len(list2)>len(list1):\n        return list(set(list2).intersection(list1))\n    else:\n        return list(set(list1).intersection(list2))\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_pro = arr[-1]*arr[-2]\n    for i in range(len(arr)-1):\n        if arr[i]*arr[i+1]>max_pro:\n            max_pro = arr[i]*arr[i+1]\n    return max_pro\n    \narr = [20,10,1,2,3,4,5]\nprint(max_Product(arr))\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return None\n    else:\n        maxProduct = arr[0] * arr[1]\n        for i in range(n-1):\n            for j in range(i+1,n):\n                product = arr[i] * arr[j]\n                if product > maxProduct:\n                    maxProduct = product\n        return maxProduct\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    pairs = []\n    for i in range(0,len(arr)-1):\n        if arr[i] < 0 and arr[i+1] < 0:\n            pairs.append(arr[i]*arr[i+1])\n    return max(pairs)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    for i in xrange(len(arr)-1):\n        if arr[i]*arr[i+1] > arr[-1]:\n            return arr[i]*arr[i+1]\n    return arr[-1]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    min = arr[0]\n    result = arr[0]\n    for i in range(1,len(arr)):\n        max_now = max\n        min_now = min\n        max = max_now * arr[i]\n        min = min_now * arr[i]\n        result = max if max > result else result\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max1 = arr[0]*arr[1]\n    max2 = arr[-1]*arr[-2]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    arr.sort()\n    min1 = arr[0]\n    min2 = arr[1]\n    maxProduct = arr[0] * arr[1]\n    for i in xrange(2, len(arr)):\n        if arr[i] > maxProduct:\n            maxProduct = arr[i] * arr[i-1]\n    return maxProduct\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0]*arr[1]\n    max_num = arr[0]\n    min_num = arr[1]\n    for i in range(2,n):\n        temp_max = arr[i]*max_num\n        temp_min = arr[i]*min_num\n        max_num = max(temp_max,temp_min,arr[i])\n        min_num = min(temp_max,temp_min,arr[i])\n        max_product = max(max_product,max_num)\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]!=arr[i+1]:\n            return arr[i]*arr[i+1]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2: \n        return -1\n    elif len(arr) == 2: \n        return arr[0]*arr[1]\n    else: \n        min_ending_here = arr[0]\n        max_ending_here = arr[1]\n        max_product = arr[0]*arr[1]\n        for i in range(2,len(arr)): \n            #max_ending_here = max(arr[i], arr[i]*max_ending_here)\n            min_ending_here, max_ending_here = min(arr[i], arr[i]*max_ending_here, arr[i]*min_ending_here), max(arr[i], arr[i]*max_ending_here, arr[i]*min_ending_here)\n            max_product = max(max_product, max_ending_here)\n        return max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print '\\nGiven list of tuples:', Input\n    # Input = [(2, 3), (1, 2), (1, 3), (3, 4)]\n    Output = [i[0] for i in Input]\n    print '\\nList of first elements of tuple:', Output\n    print '\\nCommon first element of tuple:', set(Output)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #copy = sorted(Input)\n    #copy = Input\n    #copy.sort()\n    #print copy\n    '''\n    #1st method\n    print sorted(Input)[0]\n    print sorted(Input)[-1]\n    '''\n    #2nd method\n    print list(set([sorted(i)[0] for i in Input]))[0]\n    #print Input\n    #print Input[0]\n    #print Input[-1]\n    #print Input[0][0]\n    #print Input[-1][0]\n    #print Input[0][0] == Input[-1][0]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = {}\n    for x in Input:\n        if x[0] not in output:\n            output[x[0]] = [x]\n        else:\n            output[x[0]].append(x)\n    return output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Function to find common first element in given list of tuple.\n    #     - Input: A list of tuple.\n    #     - Output: Common first element of all tuple.\n    \n    # Base case\n    if len(Input) == 1:\n        return Input[0]\n    \n    # Key step\n    First = set(Input[0])\n    for i in Input:\n        First = First.intersection(i)\n    return list(First)\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if type(Input)==list:\n        return [item[0] for item in Input]\n    else:\n        return [item[0] for item in Input.values()]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst_groups = {}\n    for i in range(len(Input)):\n        if Input[i][0] not in lst_groups:\n            lst_groups[Input[i][0]] = [Input[i]]\n        else:\n            lst_groups[Input[i][0]].append(Input[i])\n    return lst_groups\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    #map function\n    def map_func(x):\n        return x[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    d = {}\n    for tup in Input:\n        if tup[0] in d.keys():\n            d[tup[0]].append(tup)\n        else:\n            d[tup[0]] = [tup]\n    return d\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #[(1,2),(1,2,3),(1,2,3,4),(1,2,3,4,5)]\n    #[(2,),(2,3),(2,3,4),(2,3,4,5)]\n    #[(1,2,3,4,5),(2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[(1,2,3,4,5)]\n    #[("
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in Input:\n        if Output.count(i[0]) == 0:\n            Output.append(i[0])\n    return Output\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    max_val=lst[0]\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n            max_val=i\n    return max_val\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_item = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] if lst[0] > Find_Max(lst[1:]) else Find_Max(lst[1:])\n        \n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = lst[0]\n    max_len_index = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) > len(max_len):\n            max_len = lst[i]\n            max_len_index = i\n    return lst[max_len_index]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        first = lst[0]\n        second = Find_Max(lst[1:])\n        if len(first) > len(second):\n            return first\n        else:\n            return second\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #Base case\n    if (len(lst)==1):\n        return lst[0]\n    #Recursive case\n    elif (len(lst)==2):\n        if (lst[0]>lst[1]):\n            return lst[0]\n        else:\n            return lst[1]\n    else:\n        if (lst[0]>lst[1]):\n            return Find_Max(lst[1:])\n        else:\n            return Find_Max(lst[2:])\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for elem in lst:\n        if len(elem)>max_len:\n            max_len = len(elem)\n            max_element = elem\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    max_index = 0\n    for i in range(len(lst)):\n        if max < len(lst[i]):\n            max = len(lst[i])\n            max_index = i\n    return lst[max_index]\n    "
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp = lst[0]\n    for i in range(1,len(lst)):\n        if len(temp)<len(lst[i]):\n            temp = lst[i]\n    return temp\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key = len)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = sum(map(round,list1))\n    return result * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n        print(round(i))\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    import math\n    total = 0\n    for i in list1:\n        total = total + i\n    rounded_total = math.floor(total/len(list1))\n    print(rounded_total)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total += round(number)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i)\n        sum += i\n    print(sum * len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for element in list1:\n        total_sum = total_sum + (element * len(list1))\n    print(total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    num_list = []\n    for i in list1:\n        num_list.append(round(i))\n    print num_list\n    print len(num_list)\n    print sum(num_list)*len(num_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x, 1)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # add your code here\n    x = 0\n    for i in list1:\n        i = round(i)\n        x += i\n    print(x)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = 0\n    for i in list1:\n        i = int(i)\n        i = round(i)\n        total = total + i\n        length = length + 1\n    print(\"The total is:\", total, \"*\", length)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(0, n, 2):\n        cube_sum += i ** 3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return 2 * n + cube_Sum(n-1)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([n**3 for n in range(1, n+1, 2)])\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2==0):\n            sum = sum + pow(i,3)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for i in range(n):\n        c += i*i*i\n    return c\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return cube_Sum(n-1) + 4 * n * n\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(n) if i%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            result = result + i**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0 \n    for i in range(n):\n        if i % 2 == 0:\n            total = total + pow(i,3)\n    return total \n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (delimiter.join(test_tup))\n    \ndef collect_words(sentence):\n    '''\n    Write a function to collect words from the sentence.\n    '''\n    return sentence.split()\n    \ndef count_word(word, sentence):\n    '''\n    Write a function to count the word in the sentence.\n    '''\n    return sentence.count(word)\n    \ndef count_all_words(sentence):\n    '''\n    Write a function to count all the words in the sentence.\n    '''\n    return len(sentence.split())\n    \ndef count_vocabulary(sentence):\n    '''\n    Write a function to count the vocabulary in the sentence.\n    '''\n    return len(set(sentence.split()))\n    \ndef count_alpha_letters(sentence):\n    '''\n    Write a function to count the letters in the sentence.\n    '''\n    return len(re.findall(r'[a-zA-Z]+', sentence))\n    \ndef count_uppercase_letters(sentence):\n    '''\n    Write a function to count the letters in the sentence.\n    '''\n    return len(re.findall(r'[A-Z]+', sentence))\n    \ndef count_lowercase_letters(sentence):\n    '''\n    Write a function to count the letters in the sentence.\n    '''\n    return len(re.findall(r'[a-z]+', sentence))\n    \ndef count_digits(sentence):\n    '''\n    Write a function to count the digits in the sentence.\n    '''\n    return len(re.findall(r'\\d+', sentence))\n    \ndef count_special_characters(sentence):\n    '''\n    Write a function to count the special characters in the sentence.\n    '''\n    return len(re.findall(r'[\\W]+', sentence))\n    \ndef count_non_letters(sentence):\n    '''\n    Write a function to count the non-letters in the sentence.\n    '''\n    return len(re.findall(r'[^a-zA-Z]+', sentence))\n    \ndef count_whitespaces(sentence):\n    '''\n    Write a function to count the whitespaces in the sentence.\n    '''\n    return len(re.findall(r'\\s+', sentence))\n    \ndef count_unique_words(sentence):\n    '''\n    Write a function to count the unique words in the sentence.\n    '''\n    return len(set(sentence.split()))\n    \ndef count_sentence_length(sentence):\n    '''\n    Write a function to count the sentence length.\n    '''\n    return len(sentence)\n    \ndef count_sentence_words(sentence):\n    '''\n    Write a function to count the sentence words.\n    '''\n    return len(sentence.split())\n    \ndef count_sentence_characters(sentence):\n    '''\n    Write a function to count the sentence characters.\n    '''\n    return len(sentence)\n    \ndef count_sentence_sentence_length(sentence):\n    '''\n    Write a function to count the sentence length.\n    '''\n    return len(sentence.split())\n    \ndef reverse_sentence(sentence):\n    '''\n    Write a function to reverse the sentence.\n    '''\n    return sentence[::-1]\n    \ndef capitalize_first_letters(sentence):\n    '''\n    Write a function to capitalize the first letters of the sentence.\n    '''\n    return sentence.title()\n    \ndef swap_case(sentence):\n    '''\n    Write a function to swap the case of the sentence.\n    '''\n    return sentence.swapcase()\n    \ndef count_syllables(sentence):\n    '''\n    Write a function to count the syllables in the sentence.\n    '''\n    return len(re.findall(r'[aeiouAEIOU]+', sentence))\n    \ndef get_syllables(word):\n    '''\n    Write a function to get the number of syllables in a word.\n    '''\n    return len(re.findall(r'[aeiouAEIOU]+', word))\n    \ndef count_punctuation(sentence):\n    '''\n    Write a function to count the punctuation in the sentence.\n    '''\n    return len(re.findall(r'[!.,;?]+', sentence))\n    \ndef count_words(sentence):\n    '''\n    Write a function to count the words in the sentence.\n    '''\n    return len(sentence.split())\n    \ndef count_words_with_length(sentence, n):\n    '''\n    Write a function to count the words with length n in the sentence.\n    '''\n    return len([word for word in sentence.split() if len(word) == n])\n    \ndef count_words_with_length_greater_than_or_equal_to(sentence, n):\n    '''\n    Write a function to count the words with length greater than or equal to n in the sentence.\n    '''\n    return len([word for word in sentence.split() if len(word) >= n])\n    \ndef count_words_with_length_less_than_or_equal_to(sentence, n):\n    '''\n    Write a function to count the words with length less than or equal to n in the sentence.\n    '''\n    return len([word for word in sentence.split() if len(word) <= n])\n    \ndef count_words_with_length_in_range(sentence, n1, n2):\n    '''\n    Write a function to count the words with length between n1 and n2 in the sentence.\n    '''\n    return len([word for word in sentence.split() if len(word) > n1 and len(word) < n2])\n    \ndef count_letters_with_numbers(sentence):\n    '''\n    Write a function to count the letters in the sentence.\n    '''\n    return len([letter for letter in sentence if letter.isalpha() and letter.isdigit() == False])\n    \ndef count_letters_without_numbers(sentence):\n    '''\n    Write a function to count the letters in the sentence.\n    '''\n    return len([letter for letter in sentence if letter.isalpha() and letter.isdigit() == True])\n    \ndef count_letters_without_numbers_and_space(sentence):\n    '''\n    Write a function to count the letters in the sentence.\n    '''\n    return len([letter for letter in sentence if letter.isalpha() and letter.isdigit() == False and letter!=''])\n    \ndef count_letters_with_numbers(sentence):\n    '''\n    Write a function to count the letters in the sentence.\n    '''\n    return len([letter for letter in sentence if letter.isalpha() and letter.isdigit() == True])\n    \ndef count_words_with_length_greater_than(sentence, n):\n    '''\n    Write a function to count the words with length greater than n in the sentence.\n    '''\n    return len([word for word in sentence.split() if len(word) > n])\n    \ndef count_words_with_length_greater_than_or_equal_to(sentence, n):\n    '''\n    Write a function to count the words with length greater than or equal to n in the sentence.\n    '''\n    return len([word for word in sentence.split() if len(word) >= n])\n    \ndef count_words_with_length_less_than_or_equal_to(sentence, n):\n    '''\n    Write a function to count the words with length less than or equal to n in the sentence.\n    '''\n    return len([word for word in sentence.split() if len(word) <= n])\n    \ndef count_words_with_length_in_range(sentence, n1, n2):\n    '''\n    Write a function to count the words with length between n1 and n2 in the sentence.\n    '''\n    return len([word for word in sentence.split() if len(word) > n1 and len(word) < n2])\n    \ndef count_all_word"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_val = ''\n    for i in range(len(test_tup)):\n        str_val += str(test_tup[i])\n        if i!= len(test_tup) - 1:\n            str_val += delimiter\n    return str_val\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #return \"\".join(str(x) for x in test_tup)\n    return ''.join(str(x) for x in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print 'Input tuple ='+ str(test_tup)\n    result = ''\n    for x in test_tup:\n        result = result + '_' + x\n    print 'Result ='+ result\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = tuple()\n    for elem in test_tup:\n        new_tup += elem\n    return new_tup\n    \ndef strip_char(test_str, test_chr):\n    '''\n    Write a function to strip the specified character from the beginning and end of a string.\n    '''\n    new_str = test_str\n    if len(test_str) > 0:\n        new_str = test_str.strip(test_chr)\n    return new_str\n    \ndef remove_item(test_list, test_item):\n    '''\n    Write a function to remove the specified item from the list.\n    '''\n    new_list = test_list\n    if len(test_list) > 0:\n        new_list.remove(test_item)\n    return new_list\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    i=0\n    while i<len(test_tup):\n        delimiter = '-separated'\n        tup_str = ''\n        for item in test_tup[i]:\n            tup_str += str(item)\n            tup_str += delimiter\n        tup_str = tup_str[:-1]\n        tup_str += '\\n'\n        i += 1\n    return tup_str[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += element + \",\"\n    return result[:-1]\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    a=0\n    for i in range(n):\n        a=a+i**3\n    return a/n\ndef find_Average_Of_Cuboid(n):\n    '''\n    Write a python function to find the average of cuboids of first n natural numbers.\n    '''\n    a=0\n    for i in range(n):\n        a=a+i**3*(i+1)\n    return a/n\nprint \"Enter a number:\",\nn = input()\nif n.isdigit() == True:\n    print find_Average_Of_Cube(int(n))\n    print find_Average_Of_Cuboid(int(n))\nelse:\n    print \"Enter valid input\"\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    L = []\n    for i in range(1, n+1):\n        L.append(i**3)\n    \n    SUM = 0\n    for i in range(n):\n        SUM += L[i]\n    \n    return SUM/n\n    \nprint find_Average_Of_Cube(5)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes=[]\n    for i in range(n):\n        cubes.append(i**3)\n    print cubes\n    average=sum(cubes)/n\n    print \"The average of the cubes of first \", n, \" natural numbers is \", average\nfind_Average_Of_Cube(10)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(i*i*i)\n    sum/=n\n    return sum\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    Sum = 0\n    while i <= n:\n        Sum = Sum + i**3\n        i = i+1\n    return Sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    assert n >= 0, 'Number should not be negative'\n    if (n == 0):\n        return 1\n    return ((n * (n + 1)) / 2) ** (1/3)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return ((n*n) + find_Average_Of_Cube(n-1))\n    \n    \n    \n    \ndef find_factorial(n):  \n    '''\n    Write a python function to find factorial of a given number n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*find_factorial(n-1)\n    \n    \ndef find_gcf(n1,n2):  \n    '''\n    Write a python function to find the greatest common factor(GCD) of two numbers.\n    '''\n    if n2 == 0:\n        return n1\n    else:\n        return find_gcf(n2,n1%n2)\n    \n    \n    \ndef find_lcm(n1,n2):  \n    '''\n    Write a python function to find the least common multiple(LCM) of two numbers.\n    '''\n    return (n1*n2)/find_gcf(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2):  \n    '''\n    Write a python function to find the HCD(HCF) of two numbers.\n    '''\n    return n2/find_gcf(n1,n2)\n    \n    \n    \ndef find_LCM(n1,n2):  \n    '''\n    Write a python function to find the LCM(LCM) of two numbers.\n    '''\n    return find_lcm(n1,n2)\n    \n    \n    \ndef find_HCF(n1,n2):  \n    '''\n    Write a python function to find the HCF(HCF) of two numbers.\n    '''\n    return find_gcf(n1,n2)\n    \n    \n    \ndef find_HCD(n1,n2)"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # find cubed value of all numbers from 1 to n\n    summation = 0\n    for i in range(1,n+1):\n        summation = summation + pow(i,3)\n    return summation / (n*n*n)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0\n    for i in range(n):\n        average += i**3\n    return average/n\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(i)[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [elem[-1] for elem in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [tuple_item[-1] for tuple_item in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for tup in test_tuple:\n        rear_index.append(tup[-1])\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [word[-1] for word in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([tuple(x.split(\"_\"))[-1] for x in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1:]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([elem[-1] for elem in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    lst=[]\n    for i in test_tuple:\n        lst.append(i[-1])\n    return lst\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    if x not in list1:\n        return 0\n    else:\n        count = 1\n        index = 0\n        while index < len(list1):\n            if x in list1[index]:\n                count += 1\n            index += 1\n        return count\n    \n    \ndef are_permutations(list1, list2):\n    '''\n    Write a function to check whether two lists are permutations of each other.\n    '''\n    \n    if len(list1)!= len(list2):\n        return False\n    else:\n        list1_sorted = sorted(list1)\n        list2_sorted = sorted(list2)\n        \n        if list1_sorted == list2_sorted:\n            return True\n        else:\n            return False\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count\n    \n    \ndef sublists_containing_element(list1, x):\n    '''\n    Write a function to find all the sublists in a list that contain a particular element.\n    '''\n    sublists = []\n    for i in range(len(list1)): \n        if x in list1[i]: \n            sublists.append(list1[i])\n    return sublists\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1: \n        if x in element: \n            count += 1\n    return count \n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = filter(lambda x: x%2 == 0, nums)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda num:num%2!=0,nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # filtered = []\n    # for number in nums:\n    #     if number % 2!= 0:\n    #         filtered.append(number)\n    # return filtered\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = filter(lambda x: x % 2 == 1, nums)\n    return list(result)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2, nums)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    months = {\n        '01': 'January',\n        '02': 'February',\n        '03': 'March',\n        '04': 'April',\n        '05': 'May',\n        '06': 'June',\n        '07': 'July',\n        '08': 'August',\n        '09': 'September',\n        '10': 'October',\n        '11': 'November',\n        '12': 'December'\n    }\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #return dt[2:] + '-' + dt[5:] + '-' + dt[:4]\n    return dt[2:] + '-' + dt[5:7] + '-' + dt[:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:]+\"-\"+dt[3:5]+\"-\"+dt[0:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #result = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    #return result\n    return dt[6:10] + '-' + dt[3:5] + '-' + dt[0:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    result = dt\n    # y = re.search('(\\d{4})', result)\n    # if y:\n    #     result = result.replace(y.group(0), str(int(y.group(1)) - 2000))\n    result = result.replace(\"-\", \" \")\n    return result\n    # y = re.search('(\\d{4})-(\\d{2})-(\\d{2})', result)\n    # if y:\n    #     result = result.replace(y.group(0), str(int(y.group(1)) - 2000) + \"-\" + y.group(2) + \"-\" + y.group(3))\n    #     return result\n    # y = re.search('(\\d{2})-(\\d{2})-(\\d{4})', result)\n    # if y:\n    #     result = result.replace(y.group(0), str(int(y.group(3)) - 2000) + \"-\" + y.group(2) + \"-\" + y.group(1))\n    #     return result\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_comp = re.compile(r'(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)')\n    #date_comp.sub(r'\\1-\\2-\\3',dt)\n    date_comp_num = re.compile(r'(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)')\n    date_comp_date = re.compile(r'(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)')\n    date_comp_mon = re.compile(r'(\\d\\d\\d\\d)-(\\d\\d)')\n    date_comp_mon_name = re.compile(r'(\\d\\d)')\n    date_comp_mon_name_full = re.compile(r'(\\d\\d)-(\\d\\d)')\n    res_str = ''\n    if date_comp.match(dt):\n        #print 'Yes'\n        res_str = date_comp_num.sub(r'\\2-\\1-\\3',dt)\n    elif date_comp_date.match(dt):\n        res_str = date_comp_date.sub(r'\\2-\\1-\\3',dt)\n    elif date_comp_mon.match(dt):\n        res_str = date_comp_mon.sub(r'\\1-\\2-\\3',dt)\n    elif date_comp_mon_name.match(dt):\n        res_str = date_comp_mon_name.sub(r'\\1',dt)\n    elif date_comp_mon_name_full.match(dt):\n        res_str = date_comp_mon_name_full.sub(r'\\1-\\2',dt)\n    else:\n        print 'No'\n    return res_str\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return str(dt[0:4]) + '-' + str(dt[4:6]) + '-' + str(dt[6:8])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not dt:\n        return dt\n    elif dt[4] == '-':\n        return dt[:4]+'-'+dt[5:7]+'-'+dt[8:]\n    else:\n        return dt[:2]+'-'+dt[3:5]+'-'+dt[6:]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    day,month,year = map(int, dt.split('-'))\n    month_name = ['January','February','March','April','May','June','July','August','September','October','November','December']\n    print(month_name[month-1]+' '+str(day)+', '+str(year))\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = [int(i) for i in dt.split('-')]\n    new_date = '{0}{1}-{2}{3}-{4}'.format(date_list[1], date_list[2], date_list[0], date_list[3], date_list[4])\n    return new_date\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    else:\n        sublist_size = len(my_list) // 2\n        while sublist_size > 0:\n            for start_position in range(sublist_size):\n                gap_insertion_sort(my_list, start_position, sublist_size)\n            sublist_size = sublist_size // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    #initialize the sublist size\n    sublist_size = len(my_list)//2\n    \n    while sublist_size > 0:\n        \n        #we begin by sorting the sublist\n        for start_position in range(sublist_size):\n            gap_insertion_sort(my_list, start_position, sublist_size)\n        \n        #update the sublist size\n        sublist_size = sublist_size // 2\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    interval = len(my_list) // 2\n    while interval > 0:\n        for i in range(interval, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= interval and my_list[j-interval] > temp:\n                my_list[j] = my_list[j-interval]\n                j -= interval\n            my_list[j] = temp\n        interval //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for start in range(len(my_list) // 2, 0, -1):\n        for i in range(start, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= start and my_list[j - start] > temp:\n                my_list[j] = my_list[j - start]\n                j -= start\n            my_list[j] = temp\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert isinstance(my_list, list)\n    # Determine the dimension of the array\n    n = len(my_list)\n    # While the array is not sorted\n    while not is_sorted(my_list):\n        # Determine the biggest \"gap\" in the array\n        biggest_gap = gap(my_list, n)\n        # If the gap is bigger than 1\n        if biggest_gap > 1:\n            # Split the array into smaller arrays\n            split_array(my_list, biggest_gap)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 1:\n        return my_list\n    elif len(my_list) == 2:\n        if my_list[0] > my_list[1]:\n            my_list[0], my_list[1] = my_list[1], my_list[0]\n        return my_list\n    else:\n        h = len(my_list) // 2\n        while h >= 1:\n            for i in range(h, len(my_list)):\n                j = i\n                while j >= h and my_list[j] < my_list[j - h]:\n                    my_list[j], my_list[j - h] = my_list[j - h], my_list[j]\n                    j -= h\n            h = h // 2\n        return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (((test_tup1[i] and test_tup2[i]) for i in range(len(test_tup1))),)\n    "
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return [(i1, i2) for i1, i2 in zip(test_tup1, test_tup2)]\n    return None\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(i and j for i, j in zip(test_tup1, test_tup2))\n    return and_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(operator.and_, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    # Using zip_longest to get the elementwise and tuples from the two tuples.\n    element_wise_and_tuples = zip_longest(test_tup1_list, test_tup2_list)\n    # Converting the elementwise and tuples to list so that they can be iterated over\n    # and converted back to tuple for the final result\n    element_wise_and_tuples = [list(i) for i in element_wise_and_tuples]\n    # Converting the elementwise and tuples to tuple for the final result\n    element_wise_and_tuples = tuple(element_wise_and_tuples)\n    return element_wise_and_tuples\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([x & y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # print(type(test_tup1))\n    # print(type(test_tup2))\n    # print(type(test_tup1[0]), type(test_tup2[0]))\n    # print(type(test_tup1[1]), type(test_tup2[1]))\n    # print(type(test_tup1[2]), type(test_tup2[2]))\n    # print(type(test_tup1[3]), type(test_tup2[3]))\n    # print(type(test_tup1[4]), type(test_tup2[4]))\n    # print(type(test_tup1[5]), type(test_tup2[5]))\n    # print(type(test_tup1[6]), type(test_tup2[6]))\n    # print(type(test_tup1[7]), type(test_tup2[7]))\n    # print(type(test_tup1[8]), type(test_tup2[8]))\n    # print(type(test_tup1[9]), type(test_tup2[9]))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #return [x and y for x, y in zip(test_tup1, test_tup2)]\n    return [x and y for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1[i] & tup2[i] for i in range(len(tup1)))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b/2/a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    parabola_directrix = (-b/(2*a))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    else:\n        x_0 = (-b + math.sqrt(delta))/(2*a)\n        x_1 = (-b - math.sqrt(delta))/(2*a)\n        return x_0, x_1\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = -b/2/a\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Using the formula of the parabola y = x^2 + bx + c and solving for x\n    return (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # ax^2 + bx + c = 0\n    \n    return -b / (2 * a)\n    \n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4 * a * c < 0:\n        return None\n    elif b**2 - 4 * a * c == 0:\n        return -b / (2 * a)\n    else:\n        return (-b + sqrt(b**2 - 4 * a * c)) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #directrix = (b**2 - 4*a*c)**0.5\n    #directrix = (-b + (b**2 - 4*a*c)**0.5)/2*a\n    #directrix = (-b - (b**2 - 4*a*c)**0.5)/2*a\n    directrix = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = b * (-2) + (b * b) + (4 * a * c)\n    x = x / (2 * a)\n    return x\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    if (list1 & list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n    elif len(list1) == 0:\n        return False\n    elif len(list2) == 0:\n        return False\n    else:\n        return list1[0] == list2[0] and common_element(list1[1:], list2[1:])\n    \ndef reverse_string(str):\n    '''\n    Write a function that takes a string and returns the reversed string.\n    '''\n    if len(str) == 0:\n        return str\n    else:\n        return reverse_string(str[1:]) + str[0]\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        short_list = list2\n        long_list = list1\n    else:\n        short_list = list1\n        long_list = list2\n    for element in short_list:\n        if element in long_list:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1 + base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5 * (base1+base2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return ((base1+base2)*height)/2.0\n    \ndef median_rectangle(width,height):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    \n    return width*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n    \ndef find_percentile(value,percent):\n    '''\n    Write a function that takes a value and a percent and returns the value at that percent rounded to the nearest whole number.\n    '''\n    return 0.0\n    \ndef median_triangle(a,b,c):\n    '''\n    Write a function to find the median of three values.\n    '''\n    return 0.0\n    \ndef basic_sort(array):\n    '''\n    Write a function to sort an array.\n    '''\n    return 0.0\n    \ndef find_median(array):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    return 0.0\n    \ndef swap(array,a,b):\n    '''\n    Write a function to swap elements in an array.\n    '''\n    return 0.0\n    \ndef find_range(array):\n    '''\n    Write a function to find the range of an array.\n    '''\n    return 0.0\n    \ndef sort_in_place(array):\n    '''\n    Write a function to sort an array in-place.\n    '''\n    return 0.0\n    \ndef find_median(array):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    return 0.0\n    \ndef find_mode(array):\n    '''\n    Write a function to find the mode of a list of numbers.\n    '''\n    return 0.0\n    \ndef find_triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.0\n    \ndef merge_arrays(array_1,array_2):\n    '''\n    Write a function to merge two arrays.\n    '''\n    return 0.0\n    \ndef remove_duplicates(array):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    return 0.0\n    \ndef find_unique_numbers(array):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    return 0.0\n    \ndef find_kth_smallest(array,k):\n    '''\n    Write a function to find the kth smallest element in an array.\n    '''\n    return 0.0\n    \ndef find_kth_largest(array,k):\n    '''\n    Write a function to find the kth largest element in an array.\n    '''\n    return 0.0\n    \ndef find_kth_smallest_in_rotated_array(array,k):\n    '''\n    Write a function to find the kth smallest element in a rotated array.\n    '''\n    return 0.0\n    \ndef find_kth_largest_in_rotated_array(array,k):\n    '''\n    Write a function to find the kth largest element in a rotated array.\n    '''\n    return 0.0\n    \ndef find_kth_smallest_in_rotated_array(array,k):\n    '''\n    Write a function to find the kth smallest element in a rotated array.\n    '''\n    return 0.0\n    \ndef find_kth_largest_in_rotated_array(array,k):\n    '''\n    Write a function to find the kth largest element in a rotated array.\n    '''\n    return 0.0\n    \ndef is_valid_path(path):\n    '''\n    Write a function to check if a path is valid.\n    '''\n    return False\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return False\n    \ndef rotate_matrix_90(matrix):\n    '''\n    Write a function to rotate a matrix 90 degrees clockwise.\n    '''\n    return 0.0\n    \ndef rotate_matrix_270(matrix):\n    '''\n    Write a function to rotate a matrix 90 degrees anti-clockwise.\n    '''\n    return 0.0\n    \ndef find_right_diagonal(matrix):\n    '''\n    Write a function to find the right diagonal of a matrix.\n    '''\n    return 0.0\n    \ndef find_left_diagonal(matrix):\n    '''\n    Write a function to find the left diagonal of a matrix.\n    '''\n    return 0.0\n    \ndef find_matrix_product(matrix_1,matrix_2):\n    '''\n    Write a function to find the product of two matrices.\n    '''\n    return 0.0\n    \ndef find_list_of_largest_and_smallest_numbers(array):\n    '''\n    Write a function to find the kth largest and smallest element in a list.\n    '''\n    return [0.0,0.0]\n    \ndef find_maximum_size_of_subarray(array):\n    '''\n    Write a function to find the maximum size of a subarray with sum greater than x.\n    '''\n    return 0.0\n    \ndef find_minimum_size_of_subarray(array):\n    '''\n    Write a function to find the minimum size of a subarray with sum greater than x.\n    '''\n    return 0.0\n    \ndef find_sorted_list_of_smallest_and_largest_elements(array):\n    '''\n    Write a function to find the smallest and largest elements in a sorted list.\n    '''\n    return [0.0,0.0]\n    \ndef find_smallest_string_in_string_array(string_array):\n    '''\n    Write a function to find the smallest string in a string array.\n    '''\n    return 0.0\n    \ndef find_smallest_string_in_string_array_of_string_with_length_greater_than(string_array,n):\n    '''\n    Write a function to find the smallest string in a string array.\n    '''\n    return 0.0\n    \ndef find_largest_string_in_string_array(string_array):\n    '''\n    Write a function to find the largest string in a string array.\n    '''\n    return 0.0\n    \ndef find_largest_string_in_string_array_of_string_with_length_greater_than(string_array,n):\n    '''\n    Write a function to find the largest string in a string array.\n    '''\n    return 0.0\n    \ndef find_longest_string_in_string_array(string_array):\n    '''\n    Write a function to find the longest string in a string array.\n    '''\n    return 0.0\n    \ndef find_longest_string_in_string_array_of_string_with_length_greater_than(string_array,n):\n    '''\n    Write a function to find the longest string in a string array.\n    '''\n    return 0.0\n    \ndef find_longest_string_in_string_array_of_string_with_length_greater_than_or_equal_to(string_array,n):\n    '''\n    Write a function to find the longest string in a string array.\n    '''\n    return 0.0\n    \ndef find_longest_string_in_string_array_of_string_with_length_greater_than_or_equal_to_or_less_than_or_equal_to(string_array,n):\n    '''\n    Write a function to find the longest string in a string array.\n    '''\n    return 0.0\n    \ndef find_longest_string_in_string_array_of_string_with_length_greater_than_or_equal_to_or_less_than_or_equal_to_or_less_than_or_equal_to(string_array,n):\n    '''\n    Write a function to find the longest string in a string array.\n    '''\n    return 0.0\n    \ndef find_longest_string_in_string_array_of_string_with_length_greater_than_or_equal_to_or_less_than_or_equal_to_or_les"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*base1*height + 0.5*base2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)/2.0*height\n    \n    \ndef median_left(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)/2.0*height\n    \n    \ndef median_right(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)/2.0*height\n    \n    \ndef median_left_and_right(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)/2.0*height\n    \n    \ndef triangle_area(base,height):\n    '''\n    Write a function to find the area of a triangle\n    '''\n    return (base*height)/2.0\n    \n    \ndef minimum_area_rectangle(width,height):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return width*height\n    \n    \ndef minimum_area_triangle(width,height):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return 1.0*width*height\n    \n    \ndef maximum_area_rectangle(width,height):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return width*height\n    \n    \ndef maximum_area_triangle(width,height):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return 1.0*width*height\n    \n    \ndef maximum_area_triangle_cubic(width,height):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return 1.0*width*height\n    \n    \ndef max_perimeter_triangle(width,height):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return 2.0*width+2.0*height\n    \n    \ndef perimeter_of_circle(radius):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2.0*math.pi*radius\n    \n    \ndef area_of_circle(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*radius**2\n    \n    \ndef area_of_circle_cubic(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*radius**2\n    \n    \ndef circumference_of_circle(radius):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2.0*math.pi*radius\n    \n    \ndef perimeter_of_circle_cubic(radius):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2.0*math.pi*radius\n    \n    \ndef perimeter_of_ellipse(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse.\n    '''\n    return 2.0*math.pi*(a+b)\n    \n    \ndef area_of_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return math.pi*a*b\n    \n    \ndef perimeter_of_ellipse_cubic(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse.\n    '''\n    return 2.0*math.pi*(a+b)\n    \n    \ndef circumference_of_ellipse_cubic(a,b):\n    '''\n    Write a function to find the circumference of an ellipse.\n    '''\n    return 2.0*math.pi*a*b\n    \n    \ndef area_of_dodecahedron(a):\n    '''\n    Write a function to find the area of a dodecahedron.\n    '''\n    return 1.0/3.0*math.sqrt(5.0)*a**3\n    \n    \ndef volume_of_dodecahedron(a):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return 1.0/3.0*math.sqrt(5.0)*a**3\n    \n    \ndef volume_of_dodecahedron_cubic(a):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return 1.0/3.0*math.sqrt(5.0)*a**3\n    \n    \ndef volume_of_tetrahedron(a):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_tetrahedron_cubic(a):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_hexahedron(a):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_hexahedron_cubic(a):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_octahedron(a):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_octahedron_cubic(a):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_icosahedron(a):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_icosahedron_cubic(a):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_icosahedron_tetrahedron(a):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_icosahedron_tetrahedron_cubic(a):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_icosahedron_octahedron(a):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_icosahedron_octahedron_cubic(a):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_icosahedron_dodecahedron(a):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return 1.0/3.0*a**3\n    \n    \ndef volume_of_icosahedron_dodecahedron_cubic(a):\n    '''\n    Writ"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<base2:\n        base1,base2=base2,base1\n    if height<0:\n        height=0\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = 0.5 * (base1+base2)\n    return base,base2-base1,height\ndef median_rectangle(width,height):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return width,height\ndef median_triangle(base1,base2,height):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height\ndef median_triangle_general(base1,base2,height,l):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l\ndef median_triangle_general_diff_heights(base1,base2,height,l):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l\ndef median_triangle_general_diff_lengths(base1,base2,height,l1):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l1\ndef median_triangle_general_diff_lengths_diff_heights(base1,base2,height,l1,l2):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l1,l2\ndef median_triangle_general_diff_lengths_diff_heights_diff_lengths(base1,base2,height,l1,l2,l3):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l1,l2,l3\ndef median_triangle_general_diff_lengths_diff_heights_diff_lengths_diff_heights(base1,base2,height,l1,l2,l3,h1):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l1,l2,l3,h1\ndef median_triangle_general_diff_lengths_diff_heights_diff_lengths_diff_heights_diff_heights(base1,base2,height,l1,l2,l3,h1,h2):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l1,l2,l3,h1,h2\ndef median_triangle_general_diff_lengths_diff_heights_diff_lengths_diff_heights_diff_heights_diff_heights(base1,base2,height,l1,l2,l3,h1,h2,h3):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l1,l2,l3,h1,h2,h3\ndef median_triangle_general_diff_lengths_diff_heights_diff_lengths_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights(base1,base2,height,l1,l2,l3,h1,h2,h3,h4):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return base1,base2,height,l1,l2,l3,h1,h2,h3,h4\ndef median_triangle_general_diff_lengths_diff_heights_diff_lengths_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights_diff_heights"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if number > x:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # return True if number is greater than the array else False.\n    # 1) Iterate over the array and check if number is greater than the current element of the array\n    # 2) Return True if number is greater than the current element of the array else return False.\n    for current_element in arr:\n        if current_element > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return len(arr) > number\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return any(arr[i] > number for i in range(len(arr)))\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a+b', text)\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_fourty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_eighty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_ninety(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_thousand(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_lots(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_hundred_thousand(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_one_million(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_one_billion(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_one_trillion(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_billion_trillion(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_trillion_billion(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a[^b]+b', text)\ndef text_match_trillion_trillion(text):\n    '''\n    Write a function that matches a string that has a"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    x = re.search(r'ab*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_two(text):\n    '''\n    Write a function that matches a word that starts with a capital letter followed by zero or more lowercase letters.\n    '''\n    x = re.search(r'[A-Z].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_three(text):\n    '''\n    Write a function that matches a word that starts with a vowel followed by zero or more consonants.\n    '''\n    x = re.search(r'[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_four(text):\n    '''\n    Write a function that matches a word that starts with a consonant followed by another word that starts with a vowel.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_five(text):\n    '''\n    Write a function that matches a word that contains any letters from A to Z followed by any characters and then ends with a space.\n    '''\n    x = re.search(r'[A-Za-z]*[^aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_six(text):\n    '''\n    Write a function that matches a word that contains any digits from 1 to 9 followed by any characters and ends with a space.\n    '''\n    x = re.search(r'[1-9][^aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_seven(text):\n    '''\n    Write a function that matches a word that contains any letters from A to Z followed by any characters and then ends with a space.\n    '''\n    x = re.search(r'[A-Za-z]*[^aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_eight(text):\n    '''\n    Write a function that matches a word that contains any digits from 1 to 9 followed by any characters and then ends with a space.\n    '''\n    x = re.search(r'[1-9][^aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_nine(text):\n    '''\n    Write a function that matches a word that contains any letters from A to Z followed by any characters and then ends with a space.\n    '''\n    x = re.search(r'[A-Za-z]*[^aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_ten(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by zero or more occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by zero or one occurrence of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[^aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by one occurrence of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by two occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by three occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by four occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by five occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by six occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by seven occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by eight occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by nine occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by ten occurrences of any other character.\n    '''\n    x = re.search(r'[^aeiou].*[aeiou].*', text)\n    if x:\n        print(x.group())\n    else:\n        print(\"No match found\")\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a word that contains any characters from a to z followed by eleven occurrences of any other character.\n    '''\n    x = re.search(r"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a.*?b+', text)\ndef text_match_all(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    return re.search('a*b+', text)\ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    return re.search('a*b+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'\\ba+', text)\n    \n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=b)'\n    if re.search(pattern, text):\n        print('Success')\n    else:\n        print('Failure')\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(?<=a)([b]+)(?=a)\")\n    return pattern.findall(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search('a[b]+', text))\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print(\"Found match in text: %s\" % text)\n    else:\n        print(\"No match in text: %s\" % text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_two(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_three(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_four(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_five(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_six(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_seven(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_eight(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_nine(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_ten(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern,text)\n    if match:\n        print(match.group(1))\n    else:\n        print(None)\n    return None\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)(.*?)(?=b)',re.I)\n    match = re.search(pattern"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1:\n        return True\n    return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1:\n        return True\n    return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1:\n        return True\n    return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1:\n        return True\n    return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1:\n        return True\n    return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1:\n        return True\n    return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1:\n        return True\n    return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1:\n        return True\n    return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1:\n        return True\n    return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1:\n        return True\n    return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1:\n        return True\n    return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1:\n        return True\n    return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1:\n        return True\n    return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1:\n        return True\n    return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1:\n        return True\n    return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and text.find('ba')!= -1 and text.find('aab')!= -1 and text.find('abab')!= -1 and text.find('ababab')!= -1 and text.find('abababab')!= -1 and text.find('ababababab')!= -1 and text.find('abababababab')!= -1 and text.find('ababababababab')!= -1:\n        return True\n    return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab')!= -1 and tex"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<10 :\n        return n\n    return last_Digit(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n < 0 :\n        return last_Digit(-n) * -1\n    else :\n        return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n!= 0 :\n        n = n//10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_Num(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = last_Digit(n)\n    return n\ndef last_Digit_Num2(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = n%10\n    return n\ndef last_Digit_Num3(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n%10)\ndef last_Digit_Num4(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = n%10\n    return n\ndef last_Digit_Num5(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = n%10\n    return n\ndef last_Digit_Num6(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = n%10\n    return n\ndef last_Digit_Num7(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = n%10\n    return n\ndef last_Digit_Num8(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = n%10\n    return n\ndef last_Digit_Num9(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = n%10\n    return n\ndef sumDigit(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit(n)\n    return n\ndef sumDigit2(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num(n)\n    return n\ndef sumDigit3(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num2(n)\n    return n\ndef sumDigit4(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num3(n)\n    return n\ndef sumDigit5(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num4(n)\n    return n\ndef sumDigit6(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num5(n)\n    return n\ndef sumDigit7(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num6(n)\n    return n\ndef sumDigit8(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num7(n)\n    return n\ndef sumDigit9(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num8(n)\n    return n\ndef sumDigit10(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = last_Digit_Num9(n)\n    return n\ndef sumDigit_Num(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit(n)\n    return n\ndef sumDigit_Num2(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num(n)\n    return n\ndef sumDigit_Num3(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num2(n)\n    return n\ndef sumDigit_Num4(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num3(n)\n    return n\ndef sumDigit_Num5(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num4(n)\n    return n\ndef sumDigit_Num6(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num5(n)\n    return n\ndef sumDigit_Num7(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num6(n)\n    return n\ndef sumDigit_Num8(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num7(n)\n    return n\ndef sumDigit_Num9(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num8(n)\n    return n\ndef sumDigit_Num10(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num9(n)\n    return n\ndef sumDigit_Num_Num(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num10(n)\n    return n\ndef sumDigit_Num_Num2(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num_Num(n)\n    return n\ndef sumDigit_Num_Num3(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num_Num2(n)\n    return n\ndef sumDigit_Num_Num4(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num_Num3(n)\n    return n\ndef sumDigit_Num_Num5(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num_Num4(n)\n    return n\ndef sumDigit_Num_Num6(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num_Num5(n)\n    return n\ndef sumDigit_Num_Num7(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num_Num6(n)\n    return n\ndef sumDigit_Num_Num8(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDigit_Num_Num7(n)\n    return n\ndef sumDigit_Num_Num9(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    n = sumDi"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    if n[-1] == '0' :\n        return int(n[-2])\n    else :\n        return int(n[-1])\ndef  last_Digit_recursive(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return  last_Digit_recursive(n/10)\ndef last_Digit_iterative(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = 0\n    while n > 0 :\n        result = result * 10 + n % 10\n        n = n/10\n    return result\ndef test_last_Digit() :\n    assert(last_Digit(123456789) == 8)\n    assert(last_Digit(15) == 5)\n    assert(last_Digit(12345) == 3)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(15) == 5)\n    assert(last_Digit_recursive(12345) == 3)\n    assert(last_Digit_iterative(123456789) == 8)\n    assert(last_Digit_iterative(15) == 5)\n    assert(last_Digit_iterative(12345) == 3)\ndef test_last_Digit_recursive() :\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(15) == 5)\n    assert(last_Digit_recursive(12345) == 3)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(15) == 5)\n    assert(last_Digit_recursive(12345) == 3)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(15) == 5)\n    assert(last_Digit_recursive(12345) == 3)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_iterative() :\n    assert(last_Digit_iterative(123456789) == 8)\n    assert(last_Digit_iterative(15) == 5)\n    assert(last_Digit_iterative(12345) == 3)\n    assert(last_Digit_iterative(123456789) == 8)\n    assert(last_Digit_iterative(15) == 5)\n    assert(last_Digit_iterative(12345) == 3)\n    assert(last_Digit_iterative(123456789) == 8)\n    assert(last_Digit_iterative(15) == 5)\n    assert(last_Digit_iterative(12345) == 3)\n    assert(last_Digit_iterative(123456789) == 8)\n    assert(last_Digit_iterative(15) == 5)\ndef test_last_Digit_recursive_n2() :\n    assert(last_Digit_recursive(2) == 2)\n    assert(last_Digit_recursive(1234) == 3)\n    assert(last_Digit_recursive(1234) == 3)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(1234) == 3)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n3() :\n    assert(last_Digit_recursive(3) == 3)\n    assert(last_Digit_recursive(123) == 3)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(123) == 3)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n4() :\n    assert(last_Digit_recursive(4) == 4)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n5() :\n    assert(last_Digit_recursive(5) == 5)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n6() :\n    assert(last_Digit_recursive(6) == 6)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n7() :\n    assert(last_Digit_recursive(7) == 7)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n8() :\n    assert(last_Digit_recursive(8) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n9() :\n    assert(last_Digit_recursive(9) == 9)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n10() :\n    assert(last_Digit_recursive(10) == 10)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n11() :\n    assert(last_Digit_recursive(11) == 11)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\ndef test_last_Digit_recursive_n12() :\n    assert(last_Digit_recursive(12) == 12)\n    assert(last_Digit_recursive(12345) == 5)\n    assert(last_Digit_recursive(123456789) == 8)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    n = n % 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n%10)\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #list1=list(map(int,list1))\n    for i in list1:\n        if i<0:\n            yield i\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    ans = []\n    for i in list1:\n        if i < 0:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = len(list1)\n    i = 0\n    while i < l:\n        if list1[i] < 0:\n            print list1[i]\n        i = i + 1\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-i for i in list1]\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([c for c in str1 if c.isalpha()])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    str1.remove('a')\n    str1.remove('o')\n    str1.remove('e')\n    str1.remove('i')\n    str1.remove('u')\n    str1.remove('l')\n    str1.remove('A')\n    str1.remove('O')\n    str1.remove('E')\n    str1.remove('I')\n    str1.remove('U')\n    str1.remove('L')\n    return ''.join(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if ord(i)%2==1:\n            str1 = str1.replace(i,'')\n    return str1\ndef remove_even(str1):\n    '''\n    Write a function to remove even characters in a string.\n    '''\n    for i in str1:\n        if ord(i)%2==0:\n            str1 = str1.replace(i,'')\n    return str1\ndef change_case(str1):\n    '''\n    Write a function to change the case of the letters in a string to upper and lower.\n    '''\n    return str1.swapcase()\ndef remove_space(str1):\n    '''\n    Write a function to remove the leading and trailing spaces of a string.\n    '''\n    return str1.strip()\ndef get_word_count(str1):\n    '''\n    Write a function to count the number of each word in a string.\n    '''\n    str2 = remove_space(str1)\n    str3 = str2.split(' ')\n    dict1 = {}\n    for i in str3:\n        if i in dict1:\n            dict1[i] = dict1[i]+1\n        else:\n            dict1[i]=1\n    return dict1\ndef add_space(str1):\n    '''\n    Write a function to add a space between each word in a string.\n    '''\n    str2 = remove_space(str1)\n    str3 = str2.split(' ')\n    return''.join(str3)\ndef capitalize_word(str1):\n    '''\n    Write a function to capitalize the first letter of each word in a string.\n    '''\n    str2 = remove_space(str1)\n    str3 = str2.split(' ')\n    str4 = []\n    for i in str3:\n        str4.append(i.capitalize())\n    return''.join(str4)\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowel = ['a','e','i','o','u']\n    str2 = remove_space(str1)\n    str3 = str2.split(' ')\n    str4 = 0\n    for i in str3:\n        str4 = str4 + str2.count(i)\n    return str4\ndef delete_space(str1):\n    '''\n    Write a function to delete the leading and trailing spaces of a string.\n    '''\n    return str1.strip()\ndef replace_char(str1):\n    '''\n    Write a function to replace all the spaces in a string with '%20'.\n    '''\n    str2 = remove_space(str1)\n    return str2.replace(' ','%20')\ndef insert_space(str1):\n    '''\n    Write a function to insert a space between each word in a string.\n    '''\n    str2 = remove_space(str1)\n    str3 = str2.split(' ')\n    return '%20'.join(str3)\ndef str_split(str1):\n    '''\n    Write a function to split a string into a list where each word in the list is a substring of the original string.\n    '''\n    str2 = remove_space(str1)\n    return str2.split(' ')\ndef str_list(str1):\n    '''\n    Write a function to turn a string into a list.\n    '''\n    return list(str1)\ndef reverse_str(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef remove_duplicate_char(str1):\n    '''\n    Write a function to remove the duplicate characters in a string.\n    '''\n    str2 = remove_space(str1)\n    str3 = list(str2)\n    str4 = []\n    for i in str3:\n        if i not in str4:\n            str4.append(i)\n    return ''.join(str4)\ndef reverse_word(str1):\n    '''\n    Write a function to reverse the order of words in a string.\n    '''\n    str2 = remove_space(str1)\n    str3 = str2.split(' ')\n    str4 = []\n    for i in str3:\n        str4.append(i[::-1])\n    return''.join(str4)\ndef convert_to_int(str1):\n    '''\n    Write a function to convert a string of digits to an integer.\n    '''\n    return int(str1)\ndef reverse_digit(str1):\n    '''\n    Write a function to reverse a string of digits.\n    '''\n    return str1[::-1]\ndef convert_to_hex(str1):\n    '''\n    Write a function to convert a string of digits to a hex string.\n    '''\n    return hex(str1)\ndef get_num_by_index(str1, index):\n    '''\n    Write a function to get a substring based on the index.\n    '''\n    return str1[index]\ndef str_middle(str1):\n    '''\n    Write a function to get the middle substring.\n    '''\n    return str1[(len(str1)//2):(len(str1)//2+1)]\ndef count_word_occurrences(str1, word):\n    '''\n    Write a function to count the number of times a word occurs in a string.\n    '''\n    return str1.count(word)\ndef find_first_word(str1):\n    '''\n    Write a function to find the first occurrence of a word in a string.\n    '''\n    return str1.find(word)\ndef find_last_word(str1):\n    '''\n    Write a function to find the last occurrence of a word in a string.\n    '''\n    return str1.rfind(word)\ndef index_of_first_word(str1, word):\n    '''\n    Write a function to find the index of the first occurrence of a word in a string.\n    '''\n    return str1.find(word)\ndef index_of_last_word(str1, word):\n    '''\n    Write a function to find the index of the last occurrence of a word in a string.\n    '''\n    return str1.rfind(word)\ndef replace_string(str1, word1, word2):\n    '''\n    Write a function to replace the first occurrence of a word in a string with another word.\n    '''\n    return str1.replace(word1, word2)\ndef find_last_word_index(str1):\n    '''\n    Write a function to find the last occurrence of a word in a string.\n    '''\n    return str1.rfind(word)\ndef get_pos(str1, word):\n    '''\n    Write a function to get the position of the first occurrence of a word in a string.\n    '''\n    return str1.find(word)\ndef get_pos_all(str1, word):\n    '''\n    Write a function to get the position of all occurrences of a word in a string.\n    '''\n    return str1.find(word)\ndef str_compression(str1):\n    '''\n    Write a function to compress a string.\n    '''\n    str2 = remove_space(str1)\n    if len(str2)>=2:\n        str3 = []\n        str4 = []\n        for i in range(len(str2)):\n            str3.append(str2[i])\n            str4.append(str2[i])\n            if i!=len(str2)-1 and str2[i]==str2[i+1]:\n                str4.append('%')\n                str4.append(str2[i+1])\n        str4 = ''.join(str4)\n        return str4\n    return str2\ndef find_common_characters(str1, str2):\n    '''\n    Write a function to find the common characters between two strings.\n    '''\n    str3 = []\n    for i in str1:\n        if i in str2 and i not in str3:\n            str3.append(i)\n    return ''.join(str3)\nde"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x%2 == 0, str1))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    while i < len(str1):\n        if ord(str1[i]) % 2:\n            del str1[i]\n        else:\n            i += 1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # new_str = ''\n    # for i in str1:\n    #     if ord(i)%2 == 0:\n    #         new_str += i\n    # return new_str\n    return \"\".join(i for i in str1 if not ord(i)%2)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == '':\n        return ''\n    elif len(str1) == 1:\n        return str1\n    else:\n        new_str = str1[1::2]\n        return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if count%2==1:\n            print(i, end='')\n        count = count+1\n    return\n    #    i = i.replace(i[0], '', 1)\n    #return i\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split(\" \")[1:])\n    \n    "
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] < test_list[j][1] and test_list[i][1] > test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #Your code here\n    result = 0\n    for x in range(len(test_list)):\n        for y in range(x + 1, len(test_list)):\n            if test_list[x] > test_list[y]:\n                result += 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    dic = {}\n    for pair in test_list:\n        if pair[0] not in dic:\n            dic[pair[0]] = [pair[1]]\n        else:\n            dic[pair[0]].append(pair[1])\n        if pair[1] not in dic:\n            dic[pair[1]] = [pair[0]]\n        else:\n            dic[pair[1]].append(pair[0])\n    count = 0\n    for key, value in dic.iteritems():\n        count += len(value) * (len(value) - 1)\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    cache = {}\n    return count_bidirectional_helper(test_list, cache)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # code here\n    from collections import defaultdict\n    seen = defaultdict(int)\n    for a, b in test_list:\n        seen[(a, b)] += 1\n        seen[(b, a)] += 1\n    return sum([v for (k, v) in seen.iteritems() if v%2 == 1])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # Instead of using two sets we can use a dictionary to keep track of the original_pair and the reverse_pair.\n    # Check if each pair is in both dictionary, if so return 1, otherwise 0.\n    \n    d = {}\n    for pair in test_list:\n        if pair not in d:\n            d[pair] = 0\n        d[pair] += 1\n    return sum([d[x]*d[y] for x, y in test_list])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for i in range(0,len(test_list)):\n        for j in range(i,len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                result += 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    freq = {}\n    for a, b in test_list:\n        freq[(a,b)] = freq.get((a,b), 0) + 1\n        freq[(b,a)] = freq.get((b,a), 0) + 1\n    return freq\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = 0\n    for i in L:\n        ans *= 10\n        ans += i\n    return ans\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # make sure each element is an integer\n    if not all(isinstance(x, int) for x in L):\n        raise ValueError\n    \n    # check that the number of elements in L is between 1 and 3\n    if len(L) < 1 or len(L) > 3:\n        raise ValueError\n    \n    # convert all elements to ints\n    L = [int(x) for x in L]\n    \n    # check that the values are between 0 and 255\n    if not all(x >= 0 and x <= 255 for x in L):\n        raise ValueError\n    \n    # check that the number of bits are between 1 and 8\n    if len(L) == 1:\n        bits = 1\n    else:\n        bits = len(L) * 8\n    \n    # add leading zeros\n    L = [0] * (3 - len(L)) + L\n    \n    # convert to bits\n    L = [(x - 1) * 8 + 7 for x in L]\n    \n    # add the '1' bit and return it\n    return ((2 ** bits) - 1) | sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in L]))\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #print(text)\n    #text = text.lower()\n    #text = text.replace(\".\",\"\")\n    #text = text.replace(\",\",\"\")\n    #text = text.replace(\"-\",\" \")\n    #text = text.replace(\"\\\"\",\"\")\n    #text = text.replace(\"\u201c\",\"\")\n    #text = text.replace(\"\u201d\",\"\")\n    #text = text.replace(\"\u2019\",\"\")\n    #text = text.replace(\"\u2018\",\"\")\n    text = text.replace(\"?\",\"\")\n    text = text.replace(\"!\",\"\")\n    text = text.replace(\":\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace('\"','')\n    text = text.replace(\"\\n\",\" \")\n    text = text.replace(\"\\r\",\" \")\n    text = text.replace(\"  \",\" \")\n    #text = text.replace(\" \",\" \")\n    #text = re.sub(r'\\s+',' ',text)\n    #text = re.sub('\\s+',' ',text)\n    #print(text)\n    matches = re.finditer(r'\\w+?', text)\n    #print(matches)\n    for match in matches:\n        #print(match)\n        #print(match.group(0))\n        #print(match.start())\n        #print(match.end())\n        print(match.start(0))\n        print(match.end(0))\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile('ADVERB')\n    l = re.findall(regex,text)\n    print(l)\n    for i in l:\n        print(i)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    adverb = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in adverb:\n            print('First adverb position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in adverb:\n            print('First adverb position:', i)\n            break\n            \ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    noun = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in noun:\n            print('First noun position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in noun:\n            print('First noun position:', i)\n            break\n            \ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    adjective = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in adjective:\n            print('First adjective position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in adjective:\n            print('First adjective position:', i)\n            break\n            \ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    verb = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in verb:\n            print('First verb position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in verb:\n            print('First verb position:', i)\n            break\n            \ndef find_adverb_second_position(text):\n    '''\n    Write a function to find the second adverb and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    adverb = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in adverb:\n            print('Second adverb position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in adverb:\n            print('Second adverb position:', i)\n            break\n            \ndef find_noun_second_position(text):\n    '''\n    Write a function to find the second noun and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    noun = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in noun:\n            print('Second noun position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in noun:\n            print('Second noun position:', i)\n            break\n            \ndef find_adjective_second_position(text):\n    '''\n    Write a function to find the second adjective and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    adjective = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in adjective:\n            print('Second adjective position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in adjective:\n            print('Second adjective position:', i)\n            break\n            \ndef find_verb_second_position(text):\n    '''\n    Write a function to find the second verb and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    verb = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in verb:\n            print('Second verb position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in verb:\n            print('Second verb position:', i)\n            break\n            \ndef find_adverb_third_position(text):\n    '''\n    Write a function to find the third adverb and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    adverb = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in adverb:\n            print('Third adverb position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in adverb:\n            print('Third adverb position:', i)\n            break\n            \ndef find_noun_third_position(text):\n    '''\n    Write a function to find the third noun and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    noun = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in noun:\n            print('Third noun position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in noun:\n            print('Third noun position:', i)\n            break\n            \ndef find_adjective_third_position(text):\n    '''\n    Write a function to find the third adjective and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    adjective = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in adjective:\n            print('Third adjective position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in adjective:\n            print('Third adjective position:', i)\n            break\n            \ndef find_verb_third_position(text):\n    '''\n    Write a function to find the third verb and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    verb = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in verb:\n            print('Third verb position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in verb:\n            print('Third verb position:', i)\n            break\n            \ndef find_adverb_fourth_position(text):\n    '''\n    Write a function to find the fourth adverb and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)\n    adverb = re.findall(r'\\w+(\\'\\w+)?',text)\n    for i,w in enumerate(sentence):\n        if w in adverb:\n            print('Fourth adverb position:', i)\n            break\n        \n    for i,w in enumerate(sentence):\n        if w in adverb:\n            print('Fourth adverb position:', i)\n            break\n            \ndef find_noun_fourth_position(text):\n    '''\n    Write a function to find the fourth noun and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\w+', text)"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    if re.search('\\w+', text) and re.search('\\w+', text).group(0) == re.search('\\w+', text).group(0):\n        adverb_list = re.findall('\\w+', text)\n        adverb_index_list = []\n        for adverb in adverb_list:\n            index = text.find(adverb)\n            adverb_index_list.append(index)\n        adverb_index_list = sorted(adverb_index_list)\n        return adverb_index_list\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adverb(.*?)[,;\\.\\s\\)]|adverb[\\s\\)]|(adverb.*?adverb)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m[0]\n    else:\n        return []\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adjective(.*?)[,;\\.\\s\\)]|adjective[\\s\\)]|(adjective.*?adjective)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m[0]\n    else:\n        return []\ndef find_interjection_position(text):\n    '''\n    Write a function to find the first interjection and their positions in a given sentence.\n    '''\n    p=re.compile(r'(interjection(.*?)[,;\\.\\s\\)]|interjection[\\s\\)]|(interjection.*?interjection)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m[0]\n    else:\n        return []\ndef find_demonstrative_position(text):\n    '''\n    Write a function to find the first demonstrative pronoun and their positions in a given sentence.\n    '''\n    p=re.compile(r'(demonstrative(.*?)[,;\\.\\s\\)]|demonstrative[\\s\\)]|(demonstrative.*?demonstrative)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m[0]\n    else:\n        return []\ndef find_adverb_position_all(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adverb(.*?)[,;\\.\\s\\)]|adverb[\\s\\)]|(adverb.*?adverb)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_adjective_position_all(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adjective(.*?)[,;\\.\\s\\)]|adjective[\\s\\)]|(adjective.*?adjective)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_interjection_position_all(text):\n    '''\n    Write a function to find the first interjection and their positions in a given sentence.\n    '''\n    p=re.compile(r'(interjection(.*?)[,;\\.\\s\\)]|interjection[\\s\\)]|(interjection.*?interjection)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_demonstrative_position_all(text):\n    '''\n    Write a function to find the first demonstrative pronoun and their positions in a given sentence.\n    '''\n    p=re.compile(r'(demonstrative(.*?)[,;\\.\\s\\)]|demonstrative[\\s\\)]|(demonstrative.*?demonstrative)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_adverb_position_with_pos(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adverb(.*?)[,;\\.\\s\\)]|adverb[\\s\\)]|(adverb.*?adverb)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_adjective_position_with_pos(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adjective(.*?)[,;\\.\\s\\)]|adjective[\\s\\)]|(adjective.*?adjective)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_interjection_position_with_pos(text):\n    '''\n    Write a function to find the first interjection and their positions in a given sentence.\n    '''\n    p=re.compile(r'(interjection(.*?)[,;\\.\\s\\)]|interjection[\\s\\)]|(interjection.*?interjection)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_demonstrative_position_with_pos(text):\n    '''\n    Write a function to find the first demonstrative pronoun and their positions in a given sentence.\n    '''\n    p=re.compile(r'(demonstrative(.*?)[,;\\.\\s\\)]|demonstrative[\\s\\)]|(demonstrative.*?demonstrative)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_adverb_position_with_pos_all(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adverb(.*?)[,;\\.\\s\\)]|adverb[\\s\\)]|(adverb.*?adverb)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_adjective_position_with_pos_all(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adjective(.*?)[,;\\.\\s\\)]|adjective[\\s\\)]|(adjective.*?adjective)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_interjection_position_with_pos_all(text):\n    '''\n    Write a function to find the first interjection and their positions in a given sentence.\n    '''\n    p=re.compile(r'(interjection(.*?)[,;\\.\\s\\)]|interjection[\\s\\)]|(interjection.*?interjection)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_demonstrative_position_with_pos_all(text):\n    '''\n    Write a function to find the first demonstrative pronoun and their positions in a given sentence.\n    '''\n    p=re.compile(r'(demonstrative(.*?)[,;\\.\\s\\)]|demonstrative[\\s\\)]|(demonstrative.*?demonstrative)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\ndef find_adverb_position_with_pos_all(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    p=re.compile(r'(adverb(.*?)[,;\\.\\s\\)]|adverb[\\s\\)]|(adverb.*?adverb)')\n    m=p.findall(text)\n    if len(m)>0:\n        return m\n    else:\n        return []\nde"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find the first instance of an adverb and its position\n    pos = re.search(r\"(?<![\\w\\d])\\b(can|could|should|would|will)\\b(?!\\w)\", text)\n    if pos is not None:\n        return pos.start(), pos.end()\n    else:\n        return -1, -1\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x = re.findall(\"\\w+'\\w+\", text)\n    # x = re.findall(\"\\w+'\\w+\", text)\n    for i in x:\n        if i == \"without\":\n            x.remove(\"without\")\n            pos = x.index(i)\n            y = x[pos]\n            y = re.findall(\"\\w+'\\w+\", y)\n            for j in y:\n                if j == \"without\":\n                    y.remove(\"without\")\n                    pos_2 = y.index(j)\n                    return pos, pos_2\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    text = re.sub(\"[^a-z]\", \" \", text)\n    arr = re.findall('\\w+',text)\n    pos_arr = []\n    for word in arr:\n        if word.lower() in ['what','when','where','how','why']:\n            pos_arr.append(word)\n    return pos_arr\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list=[]\n    adverb_position=[]\n    adverb=re.compile('\\w+[a-z]*ad[a-z]+')\n    find_adverb=adverb.findall(text)\n    for i in find_adverb:\n        adverb_list.append(i)\n    for j in adverb_list:\n        adverb_position.append(text.find(j))\n    return adverb_list,adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text is None or len(text) == 0:\n        return []\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6 * l ** 2\n    return sa\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # cube_surface_area = l**2 * 6\n    return l**2 * 6\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Write your code here\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if type(l) == int:\n        l = [l, l, l]\n    return 6*sum(l)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count = count + 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if nums[i]>0:\n            pos += 1\n        elif nums[i]<0:\n            neg += 1\n    print(pos/n)\n    \ndef find_longest_substring(s):\n    '''\n    Write a function to find the longest substring in a string which has at most two different characters.\n    '''\n    n = len(s)\n    substr = ''\n    curr_str = ''\n    max_str = ''\n    for i in range(n):\n        if s[i] not in curr_str:\n            curr_str += s[i]\n        else:\n            substr = curr_str\n            curr_str = s[i]\n            if len(curr_str)>len(max_str):\n                max_str = curr_str\n    return max_str\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n        elif i < 0:\n            negative_count += 1\n    print (positive_count/float(negative_count + positive_count))\ndef dutch_flag_sort(nums):\n    '''\n    Dutch national flag problem.\n    '''\n    left = 0\n    right = len(nums)-1\n    i = 0\n    while i <= right:\n        if nums[i] < 0:\n            nums[i], nums[left] = nums[left], nums[i]\n            left += 1\n            i += 1\n        elif nums[i] > 0:\n            nums[i], nums[right] = nums[right], nums[i]\n            right -= 1\n        else:\n            i += 1\n    return nums\ndef arrange_rooms(rooms):\n    '''\n    Given an array of integers representing the size of each room in a hotel. \n    Some rooms may have double occupancy, some rooms may have triple occupancy, and some rooms may have quadruple occupancy. \n    Write a function that returns an array of the non-overlapping rooms with the most people in them.\n    '''\n    count = {}\n    for i in rooms:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    res = []\n    for i in sorted_count:\n        if i[1] <= sorted_count[0][1]:\n            res.append(i[0])\n    return res\ndef min_abs_diff(nums):\n    '''\n    Given an array of integers, find the minimum absolute difference between any two elements in the array.\n    '''\n    min_diff = abs(nums[0] - nums[1])\n    for i in range(1, len(nums)-1):\n        if abs(nums[i] - nums[i+1]) < min_diff:\n            min_diff = abs(nums[i] - nums[i+1])\n        if abs(nums[i] - nums[i-1]) < min_diff:\n            min_diff = abs(nums[i] - nums[i-1])\n    return min_diff\ndef huffman_encoding(data):\n    '''\n    Given a string, write a function to encode it using huffman coding.\n    '''\n    tree = {}\n    for i in data:\n        if i in tree:\n            tree[i] += 1\n        else:\n            tree[i] = 1\n    sorted_tree = sorted(tree.items(), key=lambda x: x[1])\n    huffman_tree = {}\n    while len(sorted_tree) > 1:\n        first = sorted_tree[0]\n        second = sorted_tree[1]\n        if first[1] < second[1]:\n            huffman_tree[second[0]] = '0' + second[0]\n            sorted_tree.pop(0)\n            sorted_tree.pop(0)\n        elif first[1] > second[1]:\n            huffman_tree[first[0]] = '1' + first[0]\n            sorted_tree.pop(1)\n            sorted_tree.pop(1)\n        else:\n            huffman_tree[first[0]] = '0' + first[0]\n            huffman_tree[second[0]] = '1' + second[0]\n            sorted_tree.pop(0)\n            sorted_tree.pop(0)\n    if len(sorted_tree) == 1:\n        huffman_tree[sorted_tree[0][0]] = '1' + sorted_tree[0][0]\n    encoding = ''\n    for i in data:\n        encoding += huffman_tree[i]\n    return encoding\ndef k_diff_elem_problem(nums, k):\n    '''\n    Given an array of integers and an integer k, find the kth smallest elemnt of the array.\n    '''\n    count = {}\n    for i in nums:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    sorted_count = sorted(count.items(), key=lambda x: x[1])\n    res = []\n    for i in range(k):\n        res.append(sorted_count[i][0])\n    return res\ndef sort_k_messed_array(nums):\n    '''\n    Given a list of integers with possibly some integers messed up, sort the integers.\n    '''\n    nums.sort()\n    return nums\ndef add_numbers(nums1, nums2):\n    '''\n    Given two arrays of integers, compute the sum of the two arrays.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]+nums2[i])\n    return res\ndef reverse_bits(n):\n    '''\n    Reverse bits of an integer.\n    '''\n    res = 0\n    for i in range(32):\n        res += n & 1\n        n >>= 1\n    return res\ndef remove_duplicates(nums):\n    '''\n    Given an array of integers, remove the duplicates in place.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(nums):\n            j = i+1\n            while j < len(nums):\n                if nums[j] == nums[i]:\n                    nums.pop(j)\n                    j -= 1\n                j += 1\n            i += 1\n        return len(nums)\ndef generate_gantt_chart(data):\n    '''\n    Given a list of task data, where each task has a start and finish time, generate a gantt chart for the tasks.\n    '''\n    if not data:\n        return \n    data.sort(key=lambda x: x[1])\n    result = []\n    stack = []\n    stack.append(data[0])\n    for i in range(1, len(data)):\n        if data[i][0] >= stack[-1][1]:\n            stack.append(data[i])\n    for i in range(len(data)):\n        result.append(stack.pop())\n    return result\ndef zeros_matrix(rows, cols):\n    '''\n    Return a 2-D matrix with all 0s\n    '''\n    res = []\n    for i in range(rows):\n        res.append([0]*cols)\n    return res\ndef max_subarray(nums):\n    '''\n    Given an array of integers, find the max sum of any subarray.\n    '''\n    n = len(nums)\n    max_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, n):\n        if nums[i] + curr_sum < nums[i]:\n            curr_sum = nums[i]\n        else:\n            curr_sum += nums[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\ndef find_peak_element(nums):\n    '''\n    Given an array of integers, find the peak element. In an array of integers, a \"peak element\" is an element that is greater than or equal to the adjacent integers and is also greater than or equal to the previous and previous integers.\n    '''\n    for i in range(1, len(nums)-1):\n        if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n            return nums[i]\n    return nums[0]\ndef find_k_largest_numbers(nums, k):\n    '''\n    Given an array of integers, find the k largest numbers in it.\n    '''\n    for i in range(k):\n        if i == 0:\n            max_val "
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n    return pos/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return float(count) / float(len(nums))\ndef max_index(nums):\n    '''\n    Write a function to find the index of the maximum value in a list of integers.\n    '''\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    return max_index\ndef sum_all_positives(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of all the positive numbers.\n    '''\n    return sum([x for x in nums if x > 0])\ndef sum_all_positives2(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of all the positive numbers.\n    '''\n    return sum(x for x in nums if x > 0)\ndef sum_all_positives3(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of all the positive numbers.\n    '''\n    return sum(x for x in nums if x > 0)\ndef sum_all_positives4(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of all the positive numbers.\n    '''\n    return sum(x for x in nums if x > 0)\ndef sum_all_positives5(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of all the positive numbers.\n    '''\n    return sum(x for x in nums if x > 0)\ndef sum_all_positives6(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of all the positive numbers.\n    '''\n    return sum(x for x in nums if x > 0)\ndef get_max_value_key(aDict):\n    '''\n    Write a function which accepts a dictionary and returns the key with the largest value.\n    '''\n    return max(aDict, key=aDict.get)\ndef get_min_value_key(aDict):\n    '''\n    Write a function which accepts a dictionary and returns the key with the smallest value.\n    '''\n    return min(aDict, key=aDict.get)\ndef get_max_value(aDict):\n    '''\n    Write a function which accepts a dictionary and returns the value with the largest value.\n    '''\n    if len(aDict) == 0:\n        return None\n    return max(aDict.values())\ndef get_min_value(aDict):\n    '''\n    Write a function which accepts a dictionary and returns the value with the smallest value.\n    '''\n    if len(aDict) == 0:\n        return None\n    return min(aDict.values())\ndef get_max_value_key2(aDict):\n    '''\n    Write a function which accepts a dictionary and returns the key with the largest value.\n    '''\n    if len(aDict) == 0:\n        return None\n    max_val = max(aDict.values())\n    return [k for k in aDict if aDict[k] == max_val]\ndef get_min_value_key2(aDict):\n    '''\n    Write a function which accepts a dictionary and returns the key with the smallest value.\n    '''\n    if len(aDict) == 0:\n        return None\n    min_val = min(aDict.values())\n    return [k for k in aDict if aDict[k] == min_val]\ndef get_max_value_key3(aDict):\n    '''\n    Write a function which accepts a dictionary and returns the key with the largest value.\n    '''\n    if len(aDict) == 0:\n        return None\n    max_val = max(aDict.values())\n    return [k for k,v in aDict.items() if v == max_val]\ndef get_min_value_key3(aDict):\n    '''\n    Write a function which accepts a dictionary and returns the key with the smallest value.\n    '''\n    if len(aDict) == 0:\n        return None\n    min_val = min(aDict.values())\n    return [k for k,v in aDict.items() if v == min_val]\ndef first_last6(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last7(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last8(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last9(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last10(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last11(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last12(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last13(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last14(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last15(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last16(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last17(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last18(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last19(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last20(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last21(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - 1]]\ndef first_last22(nums):\n    '''\n    Write a function which returns the first and last elements of a list.\n    '''\n    return [nums[0], nums[len(nums) - "
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n    return positive/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for i in nums:\n        if i>0:\n            total += 1\n    return total/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c=0\n    for i in nums:\n        if(i>0):\n            c+=1\n    print c/float(len(nums))\n    \n    \ndef test_positive_count():\n    '''\n    Test to check the function of positive_count()\n    '''\n    nums=array('i',[-3,-2,-1,0,1,2,3])\n    positive_count(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    return positive_count / float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for n in nums:\n        if n > 0:\n            pos_count += 1\n    return pos_count / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maximum = max(list1)\n    return maximum\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if not list1:\n        return\n    negative = -999999999\n    for i in list1:\n        if i < negative:\n            negative = i\n    return negative\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    num = 0\n    if not list1:\n        return\n    else:\n        for num in list1:\n            if num < 0:\n                return num\n    return\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = sorted(list1,reverse = True)\n    return list1[0]\n    \n    \n    "
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) < 1:\n        return None\n    if len(list1) == 1:\n        if list1[0] < 0:\n            return list1[0]\n        else:\n            return None\n    if len(list1) == 2:\n        if list1[0] < 0:\n            if list1[1] > 0:\n                return list1[1]\n            else:\n                return list1[0]\n        if list1[1] < 0:\n            if list1[0] > 0:\n                return list1[0]\n            else:\n                return list1[1]\n        else:\n            return None\n    if len(list1) > 2:\n        if list1[0] < 0:\n            if list1[1] < 0:\n                for i in range(2, len(list1)):\n                    if list1[i] < list1[0]:\n                        list1[0], list1[i] = list1[i], list1[0]\n                        return largest_neg(list1)\n                    elif list1[i] > list1[0]:\n                        return largest_neg(list1[1:])\n            else:\n                return largest_neg(list1[1:])\n        else:\n            return largest_neg(list1[1:])\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    if len(list2) < 1:\n        return None\n    else:\n        return list2[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # write code here\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if (num < 0):\n            if largest is None:\n                largest = num\n            elif (num > largest):\n                largest = num\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    m = -99999\n    for i in list1:\n        if i < 0 and i > m:\n            m = i\n    return m\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[:-1]) for t in test_list[:K]]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    return [(i[0], i[1]) for i in test_list[:K]]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return test_list\n    return [(row[0], row[1][:K]) for row in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(i[:K]) for i in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1][:K]) for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][:K])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [x[:K] for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Remove the first index and remove the last index\n    # Trim by k from the front\n    # Trim by k from the end\n    for item in test_list:\n        item = item[K:]\n        item = item[:-K]\n        item = list(item)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for tup in test_list:\n        if len(tup) == K+1:\n            res.append(tup)\n    return res\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(\"Triming the given tuple list with k=\", K)\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0][K:], test_list[i][1][K:])\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        result = tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n        return result\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        if len(test_tup1)!= len(test_tup2):\n            print 'Tuples must be of same length'\n            return None\n        else:\n            final_tup = tuple([])\n            for tup1_i, tup2_i in zip(test_tup1, test_tup2):\n                if type(tup1_i)!= type(tup2_i):\n                    print 'Index wise multiplication is possible only for tuples with same element types'\n                    return None\n                else:\n                    final_tup += (tup1_i * tup2_i, )\n            return final_tup\n    except Exception as e:\n        print e\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] * test_tup2[i])\n    return tuple(test_tup3)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Length mismatch, cannot multiply!\")\n    else:\n        for i in range(len(test_tup1)):\n            new_tup += (test_tup1[i] * test_tup2[i],)\n        print(\"Index wise multiplication is:\", new_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup = ()\n    for i in xrange(0, len(test_tup1)):\n        test_tup = test_tup + ((test_tup1[i] * test_tup2[i], ),)\n    return test_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i * j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(zip(*(test_tup1, test_tup2)))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    product = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            product = product + (test_tup1[i] * test_tup2[i],)\n    return product\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_tup = []\n    for i in range(len(test_tup1)):\n        index_multiplication_tup.append(test_tup1[i]*test_tup2[i])\n    print index_multiplication_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # def index_multiplication(test_tup1, test_tup2):\n    return tuple((test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))))\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)[lst]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for x in tup:\n        for y in lst:\n            if x == y:\n                count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).get(tup) \ndef main():\n    '''\n    Use python function count_Occurrence() to count the occurence of all elements of a tuple of a list.\n    '''\n    tuple1 = (1, 2, 1, 3, 4)\n    list1 = ['a', 'b', 'c', 'b', 'd']\n    tuple2 = (1, 2, 3)\n    list2 = [1, 2, 3]\n    print count_Occurrence(tuple1, list1) \n    print count_Occurrence(tuple2, list2)\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = 0\n    for i in lst:\n        if i in tup:\n            res += 1\n    return res\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_lst = list(tup)\n    lst_lst = list(lst)\n    lst_tup = tuple(lst_lst)\n    for i in lst_lst:\n        if i in tup_lst:\n            tup_lst[tup_lst.index(i)] = None\n    return lst_lst.count(lst_tup)\ndef count_occurrence_with_list(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_lst = list(lst)\n    for i in lst_lst:\n        if i in tup:\n            lst_lst.remove(i)\n    return lst_lst.count(lst)\ndef count_occurrence_with_list_faster(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len([i for i in lst if i in tup])\ndef Count_word_occurence(tup):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = tup.split()\n    return len(lst)\ndef frequency_of_words(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(count_Occurrence(i, word_lst))\n    return count_lst\ndef frequency_of_words_with_list(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(count_occurrence_with_list(i, word_lst))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(count_occurrence_with_list_faster(i, word_lst))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return count_lst\ndef frequency_of_words_with_list_faster(word_lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in word_lst:\n        count_lst.append(len([j for j in i if j in word_lst]))\n    return coun"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    dict_freq = {} \n    for i in lst: \n        if i in dict_freq: \n            dict_freq[i] += 1 \n        else: \n            dict_freq[i] = 1 \n    return tuple(dict_freq.items())\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #return [i**3 for i in nums]\n    return [i ** 3 for i in nums if type(i) == int]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    output = []\n    for i in nums:\n        output.append(i*i*i)\n    return output\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Can also use a list comprehension\n    return [num**3 for num in nums]\n    #return [num**3 for num in nums if num > -1]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num**3)\n    return results\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n    \n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 1\n    for i in range(1, n + 1):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            total += i\n        elif i % 3 == 0:\n            total += i\n        elif i % 4 == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    numbers = []\n    perrin = []\n    for num in xrange(0,n+1):\n        if num % 3 == 0 or num % 5 == 0:\n            numbers.append(num)\n    for num in xrange(1,n+1):\n        num = str(num)\n        total = 0\n        for i in range(len(num)):\n            total += int(num[i])\n        perrin.append(total)\n    result = []\n    for i in range(len(numbers)):\n        if perrin[i] in numbers:\n            result.append(numbers[i])\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 2:\n        return 0\n    return (n*(n+1)/2)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 1\n    n = int(n)\n    list_of_num = []\n    while(n >= i):\n        list_of_num.append(i)\n        i = i + 1\n    return sum(list_of_num)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    print ('Calculating sum of perrin number:')\n    result = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # print('start calculating...')\n    perrin_nums = []\n    sum = 0\n    for i in range(1,n+1):\n        perrin_nums.append(i)\n        if i%2 == 0:\n            perrin_nums.remove(i)\n        if i%3 == 0:\n            perrin_nums.remove(i)\n        if i%5 == 0:\n            perrin_nums.remove(i)\n        if i%7 == 0:\n            perrin_nums.remove(i)\n    sum = sum + sum(perrin_nums)\n    # print('sum:',sum)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 1\n    else: \n        return n * (n + 1) / 2\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = []\n    for line in l:\n        s += [line]\n    for i in range(len(s)):\n        if len(s[i])!= l:\n            s[i] = s[i][:l]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s, t = [], []\n    for i in str:\n        t.append(i)\n        if len(t) == l:\n            s.append(''.join(t))\n            del t[0]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(l):\n        s = s + str + \"\\n\"\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l:\n        if len(l) == 1:\n            return l[0]\n        else:\n            return l[0] + extract_string(str, l[1:])\n    return ''\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    out = []\n    for s in l:\n        out.append(s[0:l])\n    return out\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted = []\n    for string in str:\n        if len(string) > l:\n            extracted.append(string[0:l])\n        else:\n            extracted.append(string)\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [sub_str(str, i, i + l) for i in range(len(str) - l + 1)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    return str[:l]\n    \ndef extract_integer(str, l):\n    '''\n    Write a function to extract specified size of integers from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    return int(str[:l])\n    \ndef extract_integer_list(str, l):\n    '''\n    Write a function to extract specified size of integer values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(int(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_floating_point_number(str, l):\n    '''\n    Write a function to extract specified size of floating point numbers from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(float(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_floating_point_number_list(str, l):\n    '''\n    Write a function to extract specified size of floating point numbers from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(float(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_real_number_list(str, l):\n    '''\n    Write a function to extract specified size of real numbers from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(float(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_real_number(str, l):\n    '''\n    Write a function to extract specified size of real numbers from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    return float(str[:l])\n    \ndef extract_char_list(str, l):\n    '''\n    Write a function to extract specified size of char values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(str[:l])\n        str = str[l:]\n    return temp_list\n    \ndef extract_int_list(str, l):\n    '''\n    Write a function to extract specified size of integer values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(int(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_string_list(str, l):\n    '''\n    Write a function to extract specified size of string values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(str[:l])\n        str = str[l:]\n    return temp_list\n    \ndef extract_string_list_with_prefix(str, l):\n    '''\n    Write a function to extract specified size of string values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(str[:l])\n        str = str[l:]\n    return temp_list\n    \ndef extract_string_list_with_prefix_string(str, l):\n    '''\n    Write a function to extract specified size of string values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(str[:l])\n        str = str[l:]\n    return temp_list\n    \ndef extract_string_list_with_suffix(str, l):\n    '''\n    Write a function to extract specified size of string values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(str[-l:])\n        str = str[:-l]\n    return temp_list\n    \ndef extract_string_list_with_suffix_string(str, l):\n    '''\n    Write a function to extract specified size of string values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(str[-l:])\n        str = str[:-l]\n    return temp_list\n    \ndef extract_integer_list_with_prefix(str, l):\n    '''\n    Write a function to extract specified size of integer values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(int(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_integer_list_with_prefix_string(str, l):\n    '''\n    Write a function to extract specified size of integer values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(int(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_integer_list_with_suffix(str, l):\n    '''\n    Write a function to extract specified size of integer values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(int(str[-l:]))\n        str = str[:-l]\n    return temp_list\n    \ndef extract_integer_list_with_suffix_string(str, l):\n    '''\n    Write a function to extract specified size of integer values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(int(str[-l:]))\n        str = str[:-l]\n    return temp_list\n    \ndef extract_integer_list_with_prefix_suffix(str, l):\n    '''\n    Write a function to extract specified size of integer values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(int(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_integer_list_with_prefix_suffix_string(str, l):\n    '''\n    Write a function to extract specified size of integer values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(int(str[:l]))\n        str = str[l:]\n    return temp_list\n    \ndef extract_string_list_with_prefix(str, l):\n    '''\n    Write a function to extract specified size of string values from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    temp_list = []\n    for i in range(l):\n        temp_list.append(str[:l])\n        str = str[l:]\n    return temp_list\n    \ndef extract_string_list_with_prefix_string(str, l):\n    '''"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = sorted(l)\n    str_list = []\n    for item in l:\n        str_list.append(item[l[0]:l[1]])\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    ret = []\n    for s in str:\n        if len(s) == l:\n            ret.append(s)\n    return ret\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\", \"\", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2\ndef remove_dots(text1):\n    '''\n    Write a function to remove all dots (.) from the given string.\n    '''\n    text2 = re.sub(r'\\.','',text1)\n    return text2\ndef to_upper_case(text1):\n    '''\n    Write a function to convert the given string to upper case.\n    '''\n    text2 = text1.upper()\n    return text2\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers (0-9) from the given string.\n    '''\n    text2 = re.sub(r'\\d+','',text1)\n    return text2\ndef is_alphabet(text1):\n    '''\n    Write a function to check whether the given string is a letter or not.\n    '''\n    if re.match(r'^[a-zA-Z]*$',text1):\n        return True\n    else:\n        return False\ndef is_alphanumeric(text1):\n    '''\n    Write a function to check whether the given string is a alphanumeric or not.\n    '''\n    if re.match(r'^[a-zA-Z0-9]*$',text1):\n        return True\n    else:\n        return False\ndef is_number(text1):\n    '''\n    Write a function to check whether the given string is a number or not.\n    '''\n    if re.match(r'^[0-9]+$',text1):\n        return True\n    else:\n        return False\ndef remove_new_line(text1):\n    '''\n    Write a function to remove all new line (\\n) from the given string.\n    '''\n    text2 = re.sub('\\n','',text1)\n    return text2\ndef remove_single_quotes(text1):\n    '''\n    Write a function to remove all single quotes (\\') from the given string.\n    '''\n    text2 = re.sub(r'\\'',r'',text1)\n    return text2\ndef remove_double_quotes(text1):\n    '''\n    Write a function to remove all double quotes (\") from the given string.\n    '''\n    text2 = re.sub(r'\"',r'',text1)\n    return text2\ndef remove_extra_whitespaces(text1):\n    '''\n    Write a function to remove all extra whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+',' ',text1)\n    return text2\ndef remove_extra_quotes(text1):\n    '''\n    Write a function to remove all extra quotes from the given string.\n    '''\n    text2 = re.sub(r'\\'',r'',text1)\n    return text2\ndef remove_non_letters(text1):\n    '''\n    Write a function to remove all non letters from the given string.\n    '''\n    text2 = re.sub(r'[^a-zA-Z]','',text1)\n    return text2\ndef remove_non_alphanumeric(text1):\n    '''\n    Write a function to remove all non-alphanumeric characters from the given string.\n    '''\n    text2 = re.sub(r'[^a-zA-Z0-9]','',text1)\n    return text2\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    text2 = re.sub(r'[,;:.-]','',text1)\n    return text2\ndef remove_repeating_characters(text1):\n    '''\n    Write a function to remove all repeating characters from the given string.\n    '''\n    text2 = re.sub(r'(.)\\1+','',text1)\n    return text2\ndef remove_duplicate_characters(text1):\n    '''\n    Write a function to remove all duplicate characters from the given string.\n    '''\n    text2 = re.sub(r'(.)\\1+','',text1)\n    return text2\ndef count_words(text1):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    if text1!= '':\n        text2 = text1.split(' ')\n        return len(text2)\n    else:\n        return 0\ndef word_count(text1):\n    '''\n    Write a function to count the number of words (space delimited) in the given string.\n    '''\n    text2 = re.findall(r'\\w+',text1)\n    return len(text2)\ndef remove_stop_words(text1):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    stopwords = ['a', 'an', 'and', 'are', 'as', 'at', 'be', 'but', 'by', 'for', 'if', 'in', 'is', 'it', 'no', 'not', 'of', 'on', 'or','s', 't', 'the', 'to', 'you', 'your', 'this', 'these', 'those', 'there', 'their', 'there', 'these','so','very', 'they', 'they', 'their', 'there', 'their', 'there', 'their', 'they', 'this', 'is', 'any', 'all', 'be','some','very','most', 'enough','such', 'into', 'out', 'over', 'between', 'your', 'or', 'else', 'has', 'other', 'than','more','most', 'its', 'again', 'where', 'what', 'when', 'who', 'how', 'whose', 'whom', 'are', 'can','may', 'would','should', 'would', 'will', 'with', 'he','she', 'it', 'they','me', 'him', 'her', 'its', 'our', 'we', 'us','much','so', 'than', 'this', 'these', 'those', 'their', 'you', 'your', 'its', 'no', 'not', 'only','most', 'any','such', 'what', 'where', 'when', 'how', 'who', 'what', 'whose','much','so', 'both', 'all', 'not', 'only', 'any', 'none', 'another', 'another', 'any', 'other','such', 'every', 'both', 'none', 'either', 'each', 'any', 'different', 'any', 'one', 'anything', 'both', 'anything', 'either', 'anything','some','some', 'both', 'anything', 'both', 'both', 'no','many','much','many','most', 'both', 'no', 'enough', 'either', 'any', 'enough', 'either', 'enough', 'both', 'none', 'no', 'neither', 'no', 'not', 'either', 'either', 'neither', 'either', 'none', 'no', 'no', 'neither', 'never', 'none', 'none', 'not', 'no', 'no', 'either', 'no', 'no', 'neither', 'either', 'none', 'no', 'never', 'none', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'none', 'no', 'no', 'neither', 'no', 'no', 'neither', 'none', 'no', 'neither', 'none', 'no', 'no', 'neither', 'no', 'neither', 'none', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no', 'neither', 'no', 'no'"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #pattern = re.compile(r'\\s+')\n    #text1 = re.sub(pattern, '', text1)\n    #text2 = re.sub(r'[\\s+]', '', text2)\n    return re.sub('[\\s+]', '', text1)\n    \n    \n    \n    \n    \ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    #text1 = re.sub('[^\\w\\s]', '', text1)\n    return re.sub('[^\\w\\s]', '', text1)\n    \n    \n    \n    \ndef replace_space_with_dash(text1):\n    '''\n    Write a function to replace every space with a dash\n    '''\n    #text1 = text1.replace(' ', '-')\n    return text1.replace(' ', '-')\n    \n    \n    \n    \ndef replace_hyphens_with_underscores(text1):\n    '''\n    Write a function to replace hyphens with underscores\n    '''\n    #text1 = text1.replace('-', '_')\n    return text1.replace('-', '_')\n    \n    \n    \n    \ndef replace_chars_with_digits(text1):\n    '''\n    Write a function to replace all the characters in the given string with digits\n    '''\n    return re.sub('[^0-9]', '', text1)\n    \n    \n    \n    \ndef remove_duplicates_and_sort(text1):\n    '''\n    Write a function to remove all duplicates in the given string and then sort the string\n    '''\n    return ''.join(sorted(set(text1)))\n    \n    \n    \n    \ndef remove_multiples_of_char(text1, ch):\n    '''\n    Write a function to remove all the multiples of a given character from the given string\n    '''\n    return re.sub(ch*3, ch, text1)\n    \n    \n    \n    \ndef replace_last_char(text1, ch):\n    '''\n    Write a function to replace the last character of the given string with the given character\n    '''\n    return text1[:-1] + ch\n    \n    \n    \n    \ndef replace_double_chars(text1):\n    '''\n    Write a function to replace every double occurrence of a given character in the given string with the character itself\n    '''\n    return re.sub(r'(.)\\1+', r'\\1\\1', text1)\n    \n    \n    \n    \ndef replace_all_chars(text1, ch1, ch2):\n    '''\n    Write a function to replace all the characters in the given string with other characters\n    '''\n    return re.sub(ch1, ch2, text1)\n    \n    \n    \n    \ndef replace_chars_with_digits(text1, ch1, ch2):\n    '''\n    Write a function to replace the first character of the given string with a given digit\n    '''\n    return re.sub(ch1, ch2, text1, 1)\n    \n    \n    \n    \ndef replace_chars_with_digits_except_first(text1, ch1, ch2):\n    '''\n    Write a function to replace the first character of the given string with a given digit. But do not replace the first character, but keep the rest.\n    '''\n    return re.sub(ch1, ch2, text1, 1)\n    \n    \n    \n    \ndef replace_character_with_char(text1, ch1, ch2):\n    '''\n    Write a function to replace the first character of the given string with the second character\n    '''\n    return re.sub(ch1, ch2, text1, 1)\n    \n    \n    \n    \ndef replace_all_chars_with_another_char(text1, ch1, ch2):\n    '''\n    Write a function to replace all the characters in the given string with other characters\n    '''\n    return re.sub(ch1, ch2, text1)\n    \n    \n    \n    \ndef replace_duplicates_of_chars(text1, ch1, ch2):\n    '''\n    Write a function to replace all the duplicate characters of the given string\n    '''\n    return re.sub(ch1+ch1+ch2, ch2, text1)\n    \n    \n    \n    \ndef replace_char_with_char_of_similar_length(text1, ch1, ch2):\n    '''\n    Write a function to replace the first character of the given string with the second character, if the length of the two characters are similar\n    '''\n    return re.sub(ch1, ch2, text1, 1)\n    \n    \n    \n    \ndef replace_n_characters_of_a_given_string(text1, n, ch1, ch2):\n    '''\n    Write a function to replace the last character of the given string with the given character, if the length of the given string is greater than the given n\n    '''\n    return re.sub(ch1*n, ch2, text1)\n    \n    \n    \n    \ndef split_on_char(text1, ch):\n    '''\n    Write a function to split the given string on the given character.\n    '''\n    return re.split(ch, text1)\n    \n    \n    \n    \ndef convert_all_characters_to_uppercase_lowercase(text1):\n    '''\n    Write a function to convert all the characters of the given string to uppercase and the remaining characters to lowercase\n    '''\n    return text1.upper() + text1.lower()\n    \n    \n    \n    \ndef split_on_multiple_char(text1, ch):\n    '''\n    Write a function to split the given string on the given character, if the character occurs more than once in the string.\n    '''\n    return re.split(ch, text1)\n    \n    \n    \n    \ndef replace_characters(text1, ch1, ch2):\n    '''\n    Write a function to replace the first and last characters of the given string with the second and second last characters of the given string respectively\n    '''\n    return re.sub(ch1 + ch1, ch2 + ch2, text1)\n    \n    \n    \n    \ndef replace_char_with_char_before_and_after(text1, ch1, ch2):\n    '''\n    Write a function to replace the first and last characters of the given string with the second and second last characters of the given string respectively\n    '''\n    return re.sub(ch1, ch2, text1, 1)\n    \n    \n    \n    \ndef replace_char_with_char_before_and_after_occurrence(text1, ch1, ch2):\n    '''\n    Write a function to replace the first and last characters of the given string with the second and second last characters of the given string respectively\n    '''\n    return re.sub(ch1 + ch1, ch2 + ch2, text1, 1)\n    \n    \n    \n    \ndef remove_chars_before_and_after_a_given_string(text1, ch1, ch2):\n    '''\n    Write a function to remove all the characters before and after the given string\n    '''\n    return re.sub(ch1 + ch2, '', text1)\n    \n    \n    \n    \ndef find_char(text1, ch):\n    '''\n    Write a function to find the index of the first occurrence of the given character in the given string\n    '''\n    return re.findall(ch, text1)\n    \n    \n    \n    \ndef find_all_occurrences_of_a_given_string(text1, ch):\n    '''\n    Write a function to find all the indices of the occurrences of the given character in the given string\n    '''\n    return re.findall(ch, text1)\n    \n    \n    \n    \ndef replace_char_with_char_of_similar_length_in_place(text1, ch, ch1, ch2):\n    '''\n    Write a function to replace the first character of the given string with the second character, if the length of the two characters are simila"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return \"\".join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''.join(text1.split())\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.replace(\" \",\"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' ', '', text1)\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return abs(sale_amount-actual_cost)/sale_amount if sale_amount > actual_cost else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\ndef loss_amount_in_percent(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount in percent if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return (actual_cost-sale_amount)/actual_cost\n    else:\n        return 0\ndef profit_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit amount on a sale if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\ndef profit_amount_in_percent(actual_cost,sale_amount):\n    '''\n    Write a function that gives profit amount in percent if the given amount has profit else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return (sale_amount-actual_cost)/sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n    \ndef count_loss(loss_amount,total_amount): \n    '''\n    Write a function that gives total loss if the loss_amount is less than total_amount else return total_amount.\n    '''\n    if loss_amount < total_amount:\n        return loss_amount\n    else:\n        return total_amount\n    \ndef count_profit(actual_cost,sale_amount): \n    '''\n    Write a function that gives total profit if the given amount has profit else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n    \ndef count_profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function that gives total profit and loss if the given amount has profit and loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount,actual_cost - sale_amount\n    else:\n        return 0,0\n    \ndef profit_loss_ratio(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit loss ratio if the given amount has profit and loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount,actual_cost - sale_amount\n    else:\n        return 0,0\n    \ndef generate_revenue(gross_profit,gross_loss): \n    '''\n    Write a function that returns gross revenue from gross profit and loss.\n    '''\n    return gross_profit + gross_loss\n    \ndef generate_cost(gross_loss,gross_profit): \n    '''\n    Write a function that returns gross cost from gross profit and loss.\n    '''\n    return gross_loss + gross_profit\n    \ndef generate_gross_profit_and_loss(total_amount,actual_cost): \n    '''\n    Write a function that returns gross profit and loss for given total amount and actual cost.\n    '''\n    if actual_cost > total_amount:\n        return total_amount - actual_cost,total_amount - actual_cost\n    else:\n        return 0,0\n    \ndef generate_gross_profit_and_loss_ratio(total_amount,actual_cost): \n    '''\n    Write a function that returns gross profit and loss ratio for given total amount and actual cost.\n    '''\n    if actual_cost > total_amount:\n        return actual_cost - total_amount,actual_cost - total_amount\n    else:\n        return 0,0\n    \ndef generate_gross_profit_and_loss_per_share(total_amount,actual_cost,share_price): \n    '''\n    Write a function that returns gross profit and loss per share for given total amount, actual cost, and share price.\n    '''\n    if actual_cost > total_amount:\n        return (total_amount - actual_cost)/share_price,(total_amount - actual_cost)/share_price\n    else:\n        return 0,0\n    \ndef generate_gross_profit_and_loss_per_share_ratio(total_amount,actual_cost,share_price): \n    '''\n    Write a function that returns gross profit and loss per share ratio for given total amount, actual cost, and share price.\n    '''\n    if actual_cost > total_amount:\n        return (actual_cost - total_amount)/share_price,(actual_cost - total_amount)/share_price\n    else:\n        return 0,0\n    \ndef generate_shares(total_amount,actual_cost,share_price): \n    '''\n    Write a function that returns shares for given total amount, actual cost, and share price.\n    '''\n    if actual_cost > total_amount:\n        return (total_amount - actual_cost)/share_price,(total_amount - actual_cost)/share_price\n    else:\n        return 0,0\n    \ndef generate_shares_ratio(total_amount,actual_cost,share_price): \n    '''\n    Write a function that returns shares ratio for given total amount, actual cost, and share price.\n    '''\n    if actual_cost > total_amount:\n        return (actual_cost - total_amount)/share_price,(actual_cost - total_amount)/share_price\n    else:\n        return 0,0\n    \ndef generate_revenue_share(gross_profit,total_amount,share_price): \n    '''\n    Write a function that returns revenue share for given gross profit, total amount, and share price.\n    '''\n    if gross_profit > total_amount:\n        return gross_profit/share_price,gross_profit/share_price\n    else:\n        return 0,0\n    \ndef generate_revenue_share_ratio(gross_profit,total_amount,share_price): \n    '''\n    Write a function that returns revenue share ratio for given gross profit, total amount, and share price.\n    '''\n    if gross_profit > total_amount:\n        return gross_profit/share_price,gross_profit/share_price\n    else:\n        return 0,0\n    \ndef generate_cost_share(gross_loss,total_amount,share_price): \n    '''\n    Write a function that returns cost share for given gross loss, total amount, and share price.\n    '''\n    if gross_loss > total_amount:\n        return gross_loss/share_price,gross_loss/share_price\n    else:\n        return 0,0\n    \ndef generate_cost_share_ratio(gross_loss,total_amount,share_price): \n    '''\n    Write a function that returns cost share ratio for given gross loss, total amount, and share price.\n    '''\n    if gross_loss > total_amount:\n        return gross_loss/share_price,gross_loss/share_price\n    else:\n        return 0,0\n    \ndef generate_cost_share_percent(gross_loss,total_amount,share_price): \n    '''\n    Write a function that returns cost share percent for given gross loss, total amount, and share price.\n    '''\n    if gross_loss > total_amount:\n        return (gross_loss - total_amount)/share_price,(gross_loss - total_amount)/share_price\n    else:\n        return 0,0\n    \ndef generate_cost_share_percent_ratio(gross_loss,total_amount,share_price): \n    '''\n    Write a function that returns cost share percent ratio for given gross loss, total amount, and share price.\n    '''\n    if gross_loss > total_amount:\n        return (gross_loss - total_amount)/share_price,(gross_loss - total_amount)/share_price\n    else:\n        return 0,0\n    \ndef generate_gross_profit_share(gross_profit,total_amount,share_price): \n    '''\n    Write a function that returns gross profit share for given gross profit, total amount, and share price.\n    '''\n    if gross_profit > total_amount:\n        return gross_profit/share_price,gross_profit/share_price\n    else:\n        return 0,0\n    \ndef generate_gross_profit_share_ratio(gross_profit,total_amount,share_price): \n    '''\n    Write a function that returns gross profit share ratio for given gross profit, total amount, and share price.\n    '''\n    if gross_profit > total_amount:\n        return gross_profit/share_price,gross_profit/share_price\n    else:\n        return 0,0\n    \ndef generate_gross_loss_share(gross_loss,total_amount,share_price): \n    '''\n    Write a function that returns gross loss share for given gross loss, total amount, and share price.\n    '''\n    if gross_loss > total_amount:\n        return gross_loss/share_price,gross_loss/share_price\n    else:\n        return 0,0\n    \ndef generate_gross_loss_share_ratio(gross_loss,total_amount,share_price): \n    '''\n    Write a function that returns gross loss share ratio for given gross loss, total amount, and share price.\n    ''"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        return sale_amount-actual_cost\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0.0\n    if actual_cost>sale_amount:\n        loss_amount=actual_cost-sale_amount\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (sale_amount - actual_cost) if sale_amount - actual_cost < 0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss=actual_cost-sale_amount\n    if loss>0:\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (actual_cost-sale_amount)*100/sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    loss_amount = actual_cost - sale_amount\n    if (loss_amount < 0):\n        print(\"Loss Amount is Negative\")\n    else:\n        print(\"Loss Amount is \",loss_amount)\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n*n-n\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum += n // i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum = sum + i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while (i <= n) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum = sum + i \n        i = i + 1\n    return sum\ndef divisors(n) : \n    '''\n    Write a python function to find the divisors of a number.\n    '''\n    div = []\n    for i in range(1, int(n / 2) + 1) : \n        if (n % i == 0) : \n            div.append(i)\n    return div\ndef prime(n) : \n    '''\n    Write a python function to find the prime numbers.\n    '''\n    if n > 1 : \n        for i in range(2, int(n)) : \n            if (n % i == 0) : \n                return False\n        else : \n            return True\n    else : \n        return False\ndef nthPrime(n) : \n    '''\n    Write a python function to find the nth prime number.\n    '''\n    prime = 1\n    count = 0\n    while (count < n) : \n        prime = prime + 1\n        if (prime > 1) : \n            if (prime > 2) : \n                if (prime % 2 == 0) : \n                    prime = prime + 1\n            for i in range(2, int(prime / 2)) : \n                if (prime % i == 0) : \n                    prime = prime + 1\n            if (prime == n + 1) : \n                count = count + 1\n    return prime\ndef factor(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1, n + 1) : \n        fact = fact * i\n    return fact\ndef gcd(a, b) : \n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    while (a!= 0) : \n        a, b = b % a, a\n    return b\ndef lcm(a, b) : \n    '''\n    Write a python function to find the LCM of two numbers.\n    '''\n    return a * b / gcd(a, b)\ndef fibonacci(n) : \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if (n == 1) or (n == 2) : \n        return 1\n    else : \n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef fibonacciRecur(n) : \n    '''\n    Write a python function to find the nth fibonacci number using recursion.\n    '''\n    if (n == 1) or (n == 2) : \n        return 1\n    else : \n        return fibonacciRecur(n - 1) + fibonacciRecur(n - 2)\ndef findMax(a, b) : \n    '''\n    Write a python function to find the max number among two numbers.\n    '''\n    if (a > b) : \n        return a\n    else : \n        return b\ndef findMin(a, b) : \n    '''\n    Write a python function to find the min number among two numbers.\n    '''\n    if (a < b) : \n        return a\n    else : \n        return b\ndef euler(n) : \n    '''\n    Write a python function to find the nth number in the series of euler's numbers.\n    '''\n    return (1 + (1 / 2)) ** n - 1\ndef eulerRecur(n) : \n    '''\n    Write a python function to find the nth number in the series of euler's numbers using recursion.\n    '''\n    if (n == 1) or (n == 2) : \n        return 1\n    else : \n        return (1 + eulerRecur(n - 1)) / 2\ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact = 1\n    for i in range(2, n + 1) : \n        fact = fact * i\n    return fact\ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is a palindrome.\n    '''\n    k = n\n    rev = 0\n    while (n > 0) : \n        digit = n % 10\n        rev = rev * 10 + digit\n        n = n // 10\n    if (k == rev) : \n        return True\n    else : \n        return False\ndef reverse(n) : \n    '''\n    Write a python function to find the reverse of a number.\n    '''\n    rev = 0\n    while (n > 0) : \n        digit = n % 10\n        rev = rev * 10 + digit\n        n = n // 10\n    return rev\ndef isPerfect(n) : \n    '''\n    Write a python function to find whether a number is a perfect number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum = sum + i\n    if (sum == n) : \n        return True\n    else : \n        return False\ndef isAmicable(n) : \n    '''\n    Write a python function to find whether a number is an amicable pair.\n    '''\n    m = n\n    sum = 0\n    while (m > 0) : \n        digit = m % 10\n        sum = sum + digit\n        m = m // 10\n    if (n == sum) : \n        return True\n    else : \n        return False\ndef isTruncatable(n) : \n    '''\n    Write a python function to find whether a number is a truncable number.\n    '''\n    for i in range(1, int(math.log(n, 10) + 1)) : \n        if (n % (10 ** (i - 1))!= 0) : \n            return False\n    if (n % 10 == 0) : \n        return False\n    else : \n        return True\ndef isBinary(n) : \n    '''\n    Write a python function to find whether a number is a binary number.\n    '''\n    while (n > 0) : \n        digit = n % 2\n        n = n // 2\n    if (digit == 1) : \n        return False\n    else : \n        return True\ndef findTriangular(n) : \n    '''\n    Write a python function to find the nth triangular number.\n    '''\n    return n * (n + 1) / 2\ndef findHexagonal(n) : \n    '''\n    Write a python function to find the nth hexagonal number.\n    '''\n    return n * (3 * n - 1) / 2\ndef findPentagonal(n) : \n    '''\n    Write a python function to find the nth pentagonal number.\n    '''\n    return n * (3 * n - 2) / 2\ndef findHexagonal(n) : \n    '''\n    Write a python function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\ndef findHexagonal(n) : \n    '''\n    Write a python function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\ndef isTriangular(n) : \n    '''\n    Write a python function to find whether a number is a triangular number.\n    '''\n    m = 1\n    while (m <= n) : \n        if (n % m == 0) : \n            if (m ** 2 == n) : \n                return True\n        m = m + 1\n    return False\ndef isHexagonal(n) : \n    '''\n    Write a python function to find whether a number is a hexagonal number.\n    '''\n    m = 1\n    while (m <= n) : \n        if (n % m == 0) : \n            if (m * (m + 1) == 2 * n) : \n                return True\n        m = m + 1\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    t = n\n    s = 0\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if (n % i == 0) :\n            s = s + i + (n / i)\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 1) : \n        return 1\n    sqrt = int(math.sqrt(n))\n    for i in range(2, sqrt+1) :\n        if (n % i == 0) :\n            if (i == n/i) :\n                return (i + n/i)\n            else : \n                return (i + n/i) * 2\n    return 1\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize the sum\n    # Add code here\n    sum = 0\n    for i in range(1, n/2 + 1) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n%i == 0 :\n            if i%2 == 0 : \n                sum = sum + i \n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            if i%2!= 0 : \n                sum = sum + i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if n%i == 0 :\n            sum = sum + i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            sum = sum + i\n            if n/i!= i :\n                sum = sum + n/i\n    return sum\ndef sumofFactors(n):"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 1:\n        return 0\n    sum = 1\n    for i in range(2,n+1):\n        if i * i > n:\n            break\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if i%2 == 0 : \n                sum = sum + i\n            if i*i!= n : \n                sum = sum + int(n/i)\n    return sum \n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'\\b[a-z]z\\b', text):\n        return'match'\n    else:\n        return None\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall('\\w+z\\w+',text)\n    return words\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'\\bz\\b', text))\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'[a-zA-Z0-9]+[zZ]')\n    return regx.search(text)\n    # regx = re.compile(r'[a-zA-Z0-9]+z')\n    # return regx.search(text)\n    \n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regx = re.compile(r'z[a-zA-Z0-9]+')\n    return regx.search(text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a wor"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    pattern = re.compile(r'\\w*z\\w*')\n    if pattern.match(text):\n        print('Match!')\n    else:\n        print('No match!')\n        \n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b[^z]+\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_word = re.compile('z+')\n    result = z_word.findall(text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print re.search('z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z+', text)\ndef text_match_word_notz(text):\n    '''\n    Write a function that matches a word that does not contain the letter 'z'.\n    '''\n    return re.search('z[^z]*', text)\ndef text_match_word_ends_inz(text):\n    '''\n    Write a function that matches a word that ends in 'z'.\n    '''\n    return re.search('[^z]*z', text)\ndef text_match_word_no_z(text):\n    '''\n    Write a function that matches a word that does not contain the letter 'z'.\n    '''\n    return re.search('[^z]*z', text)\ndef text_match_z_in_end(text):\n    '''\n    Write a function that matches a word that starts with 'z' and ends with 'z'.\n    '''\n    return re.search('z+z', text)\ndef text_match_multiple_z_in_end(text):\n    '''\n    Write a function that matches a word that starts with 'z' and ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_in_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' and ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_in_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' and ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_beginning(text):\n    '''\n    Write a function that matches a word that starts with 'z' and ends with 'z'.\n    '''\n    return re.search('z+z', text)\ndef text_match_multiple_z_beginning(text):\n    '''\n    Write a function that matches a word that starts with 'z' and ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' and ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' and ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_beginning_or_end(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_beginning_or_end(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_beginning_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_beginning_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_beginning_or_end_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_beginning_or_end_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_beginning_or_middle_or_end(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_beginning_or_middle_or_end(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_beginning_or_middle_or_end_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_beginning_or_middle_or_end_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_ending_or_beginning(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_ending_or_beginning(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_ending_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_ending_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_ending_or_beginning_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_ending_or_beginning_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_ending_or_middle_or_beginning(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_ending_or_middle_or_beginning(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_z_ending_or_middle_or_end_or_middle(text):\n    '''\n    Write a function that matches a word that starts with 'z' or ends with 'z', or begins with 'z' or ends with 'z'.\n    '''\n    return re.search('z+z*', text)\ndef text_match_multiple_z_ending_or_middle_or_end_or_middle(text):\n    '''\n    Write a function that matches "
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b(z*)\\b',text)\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # write your code here\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0) and (year % 100!= 0) or (year % 400 == 0):\n            if (monthnum2 == 2):\n                if (day > 29):\n                    print(monthnum2, \"has 29 days\")\n                else:\n                    print(monthnum2, \"has 28 days\")\n            else:\n                if (day > 28):\n                    print(monthnum2, \"has 29 days\")\n                else:\n                    print(monthnum2, \"has 28 days\")\n        else:\n            if (day > 28):\n                print(monthnum2, \"has 29 days\")\n            else:\n                print(monthnum2, \"has 28 days\")\n    else:\n        if (day > 31):\n            print(monthnum2, \"has 31 days\")\n        else:\n            print(monthnum2, \"has 30 days\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 12 or monthnum2 == 1 or monthnum2 == 2:\n        print('Month number {} contains 31 days'.format(monthnum2))\n    else:\n        print('Month number {} does not contain 31 days'.format(monthnum2))\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print('The month number is 31 days.')\n    else:\n        print('The month number is 30 days.')\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1:\n        print(\"Your month is January\")\n    elif monthnum2==2:\n        print(\"Your month is February\")\n    elif monthnum2==3:\n        print(\"Your month is March\")\n    elif monthnum2==4:\n        print(\"Your month is April\")\n    elif monthnum2==5:\n        print(\"Your month is May\")\n    elif monthnum2==6:\n        print(\"Your month is June\")\n    elif monthnum2==7:\n        print(\"Your month is July\")\n    elif monthnum2==8:\n        print(\"Your month is August\")\n    elif monthnum2==9:\n        print(\"Your month is September\")\n    elif monthnum2==10:\n        print(\"Your month is October\")\n    elif monthnum2==11:\n        print(\"Your month is November\")\n    elif monthnum2==12:\n        print(\"Your month is December\")\n    else:\n        print(\"Please enter the month number between 1 and 12\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if (monthnum2 in [1,3,5,7,8,10,12]):\n        return 31\n    elif (monthnum2 in [4,6,9,11]):\n        return 30\n    else:\n        return 29\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverselist=[]\n    for string in stringlist:\n        reverselist.append(string[::-1])\n    return reverselist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    length = len(stringlist)\n    count = 0\n    while count < length:\n        stringlist[count] = stringlist[count][::-1]\n        count += 1\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string_list = []\n    for string in stringlist:\n        reverse_string_list.append(string[::-1])\n    return reverse_string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    revstring = []\n    for eachstring in stringlist:\n        revstring.append(eachstring[::-1])\n    return revstring\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[::-1] for stringlist in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    listlength = len(stringlist)\n    for i in range(listlength):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # https://stackoverflow.com/questions/23627755/reverse-list-of-strings\n    return list(reversed([x.strip('\\n') for x in stringlist]))\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist_reversed = []\n    for i in range(len(stringlist)):\n        stringlist_reversed.append(stringlist[-i - 1])\n    return stringlist_reversed\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==0:\n        return None\n    else:\n        minlen=len(lst[0])\n        minlst=lst[0]\n        for i in lst[1:]:\n            if len(i)<minlen:\n                minlen=len(i)\n                minlst=i\n        return minlst\n    \nprint Find_Min([[1,2,3,4,5,6,7,8,9], [8,1,1,4,8,7,7,8,9], [2,4,4,5,6,7,8,8,9], [1,1,4,1,3,1,3,8,9], [2,2,1,4,3,7,3,4,5], [6,6,4,7,8,8,9,9,9], [3,3,2,5,5,6,6,7,8], [1,3,1,1,2,3,4,5,7], [6,4,1,3,3,3,4,6,9], [5,4,2,4,5,5,5,5,5]])\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=lst[0][1]-lst[0][0]\n    min_index=0\n    for i in range(1,len(lst)):\n        if (lst[i][1]-lst[i][0])< min_len:\n            min_len=lst[i][1]-lst[i][0]\n            min_index=i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_list = []\n    for elem in lst:\n        if len(elem) < min_length:\n            min_list = [elem]\n            min_length = len(elem)\n        elif len(elem) == min_length:\n            min_list.append(elem)\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for s in lst[1:]:\n        if len(s) < len(min):\n            min = s\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = float('inf')\n    result = []\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n            result = [i]\n        elif len(i) == min:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == min_length:\n            return lst[i]\n    \ndef Find_Min2(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_index = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_index = i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in lst:\n        if len(i) < len(min):\n            min = i\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublst = lst[0]\n    leng = len(sublst)\n    for i in range(1,len(lst)):\n        if len(lst[i]) < leng:\n            sublst = lst[i]\n            leng = len(sublst)\n    return sublst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(1,len(lst)): \n        if len(lst[:i]) <= len(lst[i:]): \n            return lst[:i]\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(1,len(lst)):\n        if len(lst[i]) == len(lst[i-1]):\n            continue\n        else:\n            return lst[i]\n    else:\n        return lst[0]\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l == 0 or b == 0:\n        return 0\n    else:\n        return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14 * r ** 2\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2 * 3.14 * r\n    \ndef triangle_area(l1,l2,l3):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return l1 * l2 / 2\n    \ndef triangle_perimeter(l1,l2,l3):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return l1 + l2 + l3\n    \ndef rectangle_rotated_90_degrees(l,b):\n    '''\n    Write a function to find the area of a rectangle when it is rotated 90 degrees.\n    '''\n    return l * b\n    \ndef rectangle_rotated_180_degrees(l,b):\n    '''\n    Write a function to find the area of a rectangle when it is rotated 180 degrees.\n    '''\n    return l * b\n    \ndef rectangle_rotated_270_degrees(l,b):\n    '''\n    Write a function to find the area of a rectangle when it is rotated 270 degrees.\n    '''\n    return l * b\n    \ndef rectangle_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    return math.sqrt(l ** 2 + b ** 2)\n    \ndef rectangle_inclined(l,b,a):\n    '''\n    Write a function to find the incline of a rectangle.\n    '''\n    return math.atan(a / (l / 2.0))\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi * r ** 2\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2 * math.pi * r\n    \ndef circle_incline(r,a):\n    '''\n    Write a function to find the incline of a circle.\n    '''\n    return math.atan(a / r)\n    \ndef triangle_area(l1,l2,l3):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return l1 * l2 / 2\n    \ndef triangle_perimeter(l1,l2,l3):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return l1 + l2 + l3\n    \ndef triangle_incline_1(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_2(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_3(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_4(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_5(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_6(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_7(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_8(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_9(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_10(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_11(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef triangle_incline_12(l1,l2,l3):\n    '''\n    Write a function to find the incline of a triangle when the sides are of equal length.\n    '''\n    return math.sqrt(l1 ** 2 + l2 ** 2 - 2 * l1 * l2 * math.cos(math.pi / 3))\n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2 * l + 2 * b\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi * r ** 2\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2 * math.pi * r\n    \ndef circle_incline(r,a):\n    '''\n    Write a function to find the incline of a circle.\n    '''\n    return math.atan(a / r)\n    \ndef circle_incline_1(r,a):\n    '''\n    Write a function to find the incline of a circle when the sides are of equal length.\n    '''\n    return math.sqrt(r ** 2 "
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str=\"\"\n    for i in str1:\n        if i.isupper():\n            i = i.lower()\n        new_str = new_str + i\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # my_str = str1\n    my_str = str1.upper()\n    pat = r'[A-Z]'\n    match = re.findall(pat, my_str)\n    for i in match:\n        new_str = re.sub(i, '', my_str)\n    print(new_str)\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if (str1[i] >= 'A' and str1[i] <= 'Z'):\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2=str1\n    str2=str2.replace(\"XXXXXX\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"XXXX\",\"\")\n    str2=str2.replace(\"x\",\"\")\n    str2=str2.replace(\"XX\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2=str2.replace(\"7X\",\"\")\n    str2=str2.replace(\"8X\",\"\")\n    str2=str2.replace(\"9X\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"XX\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"X1\",\"\")\n    str2=str2.replace(\"X2\",\"\")\n    str2=str2.replace(\"X3\",\"\")\n    str2=str2.replace(\"X4\",\"\")\n    str2=str2.replace(\"X5\",\"\")\n    str2=str2.replace(\"X6\",\"\")\n    str2=str2.replace(\"X7\",\"\")\n    str2=str2.replace(\"X8\",\"\")\n    str2=str2.replace(\"X9\",\"\")\n    str2=str2.replace(\"X0\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"X1\",\"\")\n    str2=str2.replace(\"X2\",\"\")\n    str2=str2.replace(\"X3\",\"\")\n    str2=str2.replace(\"X4\",\"\")\n    str2=str2.replace(\"X5\",\"\")\n    str2=str2.replace(\"X6\",\"\")\n    str2=str2.replace(\"X7\",\"\")\n    str2=str2.replace(\"X8\",\"\")\n    str2=str2.replace(\"X9\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2=str2.replace(\"7X\",\"\")\n    str2=str2.replace(\"8X\",\"\")\n    str2=str2.replace(\"9X\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"X1\",\"\")\n    str2=str2.replace(\"X2\",\"\")\n    str2=str2.replace(\"X3\",\"\")\n    str2=str2.replace(\"X4\",\"\")\n    str2=str2.replace(\"X5\",\"\")\n    str2=str2.replace(\"X6\",\"\")\n    str2=str2.replace(\"X7\",\"\")\n    str2=str2.replace(\"X8\",\"\")\n    str2=str2.replace(\"X9\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2=str2.replace(\"7X\",\"\")\n    str2=str2.replace(\"8X\",\"\")\n    str2=str2.replace(\"9X\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"X1\",\"\")\n    str2=str2.replace(\"X2\",\"\")\n    str2=str2.replace(\"X3\",\"\")\n    str2=str2.replace(\"X4\",\"\")\n    str2=str2.replace(\"X5\",\"\")\n    str2=str2.replace(\"X6\",\"\")\n    str2=str2.replace(\"X7\",\"\")\n    str2=str2.replace(\"X8\",\"\")\n    str2=str2.replace(\"X9\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2=str2.replace(\"7X\",\"\")\n    str2=str2.replace(\"8X\",\"\")\n    str2=str2.replace(\"9X\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2=str2.replace(\"7X\",\"\")\n    str2=str2.replace(\"8X\",\"\")\n    str2=str2.replace(\"9X\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2=str2.replace(\"7X\",\"\")\n    str2=str2.replace(\"8X\",\"\")\n    str2=str2.replace(\"9X\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"X1\",\"\")\n    str2=str2.replace(\"X2\",\"\")\n    str2=str2.replace(\"X3\",\"\")\n    str2=str2.replace(\"X4\",\"\")\n    str2=str2.replace(\"X5\",\"\")\n    str2=str2.replace(\"X6\",\"\")\n    str2=str2.replace(\"X7\",\"\")\n    str2=str2.replace(\"X8\",\"\")\n    str2=str2.replace(\"X9\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2=str2.replace(\"7X\",\"\")\n    str2=str2.replace(\"8X\",\"\")\n    str2=str2.replace(\"9X\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2=str2.replace(\"7X\",\"\")\n    str2=str2.replace(\"8X\",\"\")\n    str2=str2.replace(\"9X\",\"\")\n    str2=str2.replace(\"X\",\"\")\n    str2=str2.replace(\"1X\",\"\")\n    str2=str2.replace(\"2X\",\"\")\n    str2=str2.replace(\"3X\",\"\")\n    str2=str2.replace(\"4X\",\"\")\n    str2=str2.replace(\"5X\",\"\")\n    str2=str2.replace(\"6X\",\"\")\n    str2"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = re.sub(r'[A-Z]+', \"\", str1)\n    print(res)\n    return(res)\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"hELLO WORLD\")\nremove_uppercase(\"HELLO WORLD\")\nremove_uppercase(\"hello world\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"hHELLO WORLD\")\nremove_uppercase(\"HELLO WORLD\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hello World\")\nremove_uppercase(\"Hhello World\")\nremove_uppercase(\"Hell"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i = 0\n    while i < len(lst):\n        yield lst[i]\n        i+=1\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return ([x[0] for x in lst])\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = lambda l: l[0]\n    return map(first,lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [s[0] for s in lst] \ndef Zip(lst): \n    '''\n    Write a python function to get a tuple where the first element of each sublist is paired with the second element of each sublist.\n    '''\n    return zip(Extract(lst), Extract(lst))\ndef Map(f, lst): \n    '''\n    Write a python function to get a list where each element of the given list has been mapped through the given function.\n    '''\n    return [f(x) for x in lst]\ndef Filter(f, lst): \n    '''\n    Write a python function to get a list where each element of the given list has been mapped through the given function and only if the function returns True.\n    '''\n    return [x for x in lst if f(x)]\ndef Reduce(f, lst, initial): \n    '''\n    Write a python function to get a single value from a list of values by applying a given function to pairs of values.\n    '''\n    return reduce(f, lst, initial)\ndef Convert(lst): \n    '''\n    Write a python function to convert a list of tuples of integers into a list of strings.\n    '''\n    return [str(x) for x in lst]\ndef FilterConvert(lst): \n    '''\n    Write a python function to convert a list of tuples of integers into a list of strings where the values are filtered by the last element of the tuple.\n    '''\n    return [str(x[-1]) for x in lst]\ndef FilterFirstElement(lst, fn): \n    '''\n    Write a python function to get a list of tuples where the first element of each tuple is filtered by the given function.\n    '''\n    return [(x, y) for (x, y) in lst if fn(x)]\ndef FilterSecondElement(lst, fn): \n    '''\n    Write a python function to get a list of tuples where the second element of each tuple is filtered by the given function.\n    '''\n    return [(x, y) for (x, y) in lst if fn(y)]\ndef Add(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous two elements.\n    '''\n    return [x + y for x, y in Zip(lst)]\ndef AddElementWise(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous two elements.\n    '''\n    return [Add(x) for x in lst]\ndef Add3(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous three elements.\n    '''\n    return [Add(x) for x in Zip(lst)]\ndef Add4(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous four elements.\n    '''\n    return [Add(x) for x in Zip(lst)]\ndef Add5(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous five elements.\n    '''\n    return [Add(x) for x in Zip(lst)]\ndef Sort(lst): \n    '''\n    Write a python function to get a sorted list.\n    '''\n    return sorted(lst)\ndef Sum(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous two elements.\n    '''\n    return [Add(x) for x in Zip(lst)]\ndef SumElementWise(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous two elements.\n    '''\n    return [AddElementWise(x) for x in lst]\ndef Sum3(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous three elements.\n    '''\n    return [Add3(x) for x in lst]\ndef Sum4(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous four elements.\n    '''\n    return [Add4(x) for x in lst]\ndef Sum5(lst): \n    '''\n    Write a python function to get a list where each element is the sum of the corresponding elements of the previous five elements.\n    '''\n    return [Add5(x) for x in lst]\ndef ExtractElement(lst, n): \n    '''\n    Write a python function to get the nth element from each sublist.\n    '''\n    return [x[n] for x in lst]\ndef ExtractElementWise(lst, n): \n    '''\n    Write a python function to get the nth element from each sublist.\n    '''\n    return [x[n] for x in lst]\ndef ExtractFirstElement(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return ExtractElement(lst, 0)\ndef ExtractSecondElement(lst): \n    '''\n    Write a python function to get the second element of each sublist.\n    '''\n    return ExtractElement(lst, 1)\ndef ExtractThirdElement(lst): \n    '''\n    Write a python function to get the third element of each sublist.\n    '''\n    return ExtractElement(lst, 2)\ndef ExtractFourthElement(lst): \n    '''\n    Write a python function to get the fourth element of each sublist.\n    '''\n    return ExtractElement(lst, 3)\ndef ExtractFifthElement(lst): \n    '''\n    Write a python function to get the fifth element of each sublist.\n    '''\n    return ExtractElement(lst, 4)\ndef ExtractSixthElement(lst): \n    '''\n    Write a python function to get the sixth element of each sublist.\n    '''\n    return ExtractElement(lst, 5)\ndef ExtractSeventhElement(lst): \n    '''\n    Write a python function to get the seventh element of each sublist.\n    '''\n    return ExtractElement(lst, 6)\ndef ExtractEighthElement(lst): \n    '''\n    Write a python function to get the eighth element of each sublist.\n    '''\n    return ExtractElement(lst, 7)\ndef ExtractNinthElement(lst): \n    '''\n    Write a python function to get the ninth element of each sublist.\n    '''\n    return ExtractElement(lst, 8)\ndef ExtractTenthElement(lst): \n    '''\n    Write a python function to get the tenth element of each sublist.\n    '''\n    return ExtractElement(lst, 9)\ndef ExtractEleventhElement(lst): \n    '''\n    Write a python function to get the eleventh element of each sublist.\n    '''\n    return ExtractElement(lst, 10)\ndef ExtractTwelethElement(lst): \n    '''\n    Write a python function to get the twelth element of each sublist.\n    '''\n    return ExtractElement(lst, 11)\ndef ExtractThirteenthElement(lst): \n    '''\n    Write a python function to get the thirteenth element of each sublist.\n    '''\n    return ExtractElement(lst, 12)\ndef ExtractFourteenthElement(lst): \n    '''\n    Write a python function to get the fourteenth element of each sublist.\n    '''\n    return ExtractElement(lst, 13)\ndef ExtractFifteenthElement(lst): \n    '''\n    Write a python function to get the fifteenth element of each sublist.\n    '''\n    return ExtractElement(lst, 14)\ndef ExtractSixteenthElement(lst): \n    '''\n    Write a python function to get the sixteenth element of each sublist.\n    '''\n    return ExtractElement(lst, 15)\ndef ExtractSeventeenthElement(lst): \n    '''\n    Write a python function to get the seventeenth element of each sublist.\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res=[] \n    for sublist in lst: \n        res.append(sublist[0]) \n    return res \ndef Insert(lst): \n    '''\n    Write a python function to get the last element of each sublist.\n    '''\n    res=[] \n    for sublist in lst: \n        res.append(sublist[-1]) \n    return res \ndef Sublists(lst,index): \n    '''\n    Write a python function to get the specified elements of each sublist.\n    '''\n    res=[] \n    for sublist in lst: \n        res.append(sublist[index]) \n    return res \ndef Remove(lst): \n    '''\n    Write a python function to remove all duplicates from the list.\n    '''\n    res=[] \n    [res.append(x) for x in lst if x not in res] \n    return res \ndef IsEqual(lst): \n    '''\n    Write a python function to check if two lists are equal.\n    '''\n    return sorted(lst) == sorted(lst) \ndef isSubset(list1,list2): \n    '''\n    Write a python function to check if list1 is a subset of list2.\n    '''\n    for elem in list1: \n        if elem not in list2: \n            return False \n    return True \ndef isSuperset(list1,list2): \n    '''\n    Write a python function to check if list2 is a superset of list1.\n    '''\n    for elem in list2: \n        if elem not in list1: \n            return False \n    return True \ndef Slice(lst,start,stop): \n    '''\n    Write a python function to get the specified elements of a list.\n    '''\n    return lst[start:stop] \ndef Extend(lst,lst2): \n    '''\n    Write a python function to extend the list by adding elements of lst2.\n    '''\n    [lst.append(x) for x in lst2] \n    return lst \ndef Intersection(lst1,lst2): \n    '''\n    Write a python function to get the intersection of two lists.\n    '''\n    return [x for x in lst1 if x in lst2] \ndef Union(lst1,lst2): \n    '''\n    Write a python function to get the union of two lists.\n    '''\n    return sorted(lst1+lst2) \ndef Contains(lst,val): \n    '''\n    Write a python function to check if a value is in a list.\n    '''\n    return val in lst \ndef Index(lst,val): \n    '''\n    Write a python function to get the index of an element in a list.\n    '''\n    return lst.index(val) \ndef Count(lst,val): \n    '''\n    Write a python function to count the number of occurrences of an element in a list.\n    '''\n    return lst.count(val) \ndef Max(lst): \n    '''\n    Write a python function to get the maximum element of a list.\n    '''\n    return max(lst) \ndef Min(lst): \n    '''\n    Write a python function to get the minimum element of a list.\n    '''\n    return min(lst) \ndef Sorted(lst): \n    '''\n    Write a python function to get the sorted version of a list.\n    '''\n    return sorted(lst) \ndef Reverse(lst): \n    '''\n    Write a python function to get the reverse version of a list.\n    '''\n    return lst[::-1] \ndef IsEmpty(lst): \n    '''\n    Write a python function to check if a list is empty.\n    '''\n    return lst==[] \ndef Reverse2(lst): \n    '''\n    Write a python function to get the reverse version of a list.\n    '''\n    res=[] \n    for i in lst[::-1]: \n        res.append(i) \n    return res \ndef Shuffle(lst): \n    '''\n    Write a python function to shuffle a list.\n    '''\n    import random \n    return random.shuffle(lst) \ndef Max2(lst): \n    '''\n    Write a python function to get the max of two elements.\n    '''\n    return max(lst[0],lst[1]) \ndef Min2(lst): \n    '''\n    Write a python function to get the min of two elements.\n    '''\n    return min(lst[0],lst[1]) \ndef Sum2(lst): \n    '''\n    Write a python function to get the sum of all elements.\n    '''\n    return sum(lst) \ndef Average(lst): \n    '''\n    Write a python function to get the average of all elements.\n    '''\n    return float(sum(lst))/len(lst) \ndef Overlap(lst1,lst2): \n    '''\n    Write a python function to check if there is an overlap between two lists.\n    '''\n    return len(set(lst1).intersection(lst2)) > 0 \ndef Overlap2(lst1,lst2): \n    '''\n    Write a python function to check if there is an overlap between two lists.\n    '''\n    return len(lst1) > 0 and len(lst2) > 0 and lst1[0] in lst2 \ndef IsPrime(n): \n    '''\n    Write a python function to check if an integer is prime.\n    '''\n    return n>1 and all(n%i for i in range(2,int(n**0.5)+1)) \ndef Factorial(n): \n    '''\n    Write a python function to get the factorial of a number.\n    '''\n    if n==0: \n        return 1 \n    else: \n        return n*Factorial(n-1) \ndef Fibonacci(n): \n    '''\n    Write a python function to get the nth number in the Fibonacci sequence.\n    '''\n    if n==0: \n        return 0 \n    elif n==1: \n        return 1 \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \ndef FiboC(n,k): \n    '''\n    Write a python function to get the nth number in the Fibonacci sequence.\n    '''\n    if n==0: \n        return 0 \n    elif n==1: \n        return 1 \n    else: \n        return FiboC(n-1,k)+FiboC(n-2,k) \ndef Min3(lst): \n    '''\n    Write a python function to get the min of three elements.\n    '''\n    return min(lst[0],lst[1],lst[2]) \ndef Max3(lst): \n    '''\n    Write a python function to get the max of three elements.\n    '''\n    return max(lst[0],lst[1],lst[2]) \ndef FindMax(lst): \n    '''\n    Write a python function to get the maximum element of a list.\n    '''\n    return max(lst) \ndef FindMin(lst): \n    '''\n    Write a python function to get the minimum element of a list.\n    '''\n    return min(lst) \ndef FindSum(lst): \n    '''\n    Write a python function to get the sum of all elements.\n    '''\n    return sum(lst) \ndef FindAverage(lst): \n    '''\n    Write a python function to get the average of all elements.\n    '''\n    return float(sum(lst))/len(lst) \ndef Replace(lst,old,new): \n    '''\n    Write a python function to replace a old element with a new element.\n    '''\n    return [new if x==ol"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = 0\n    for i in str:\n        if i.isupper():\n            result += 1\n    return result\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Enter your code here.\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    total = 0\n    for i in str:\n        if i.isupper():\n            total+=1\n    return total\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    #initiliaze the counter\n    i = 0\n    for x in str:\n        if(x.isupper()):\n            i+=1\n    return i\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count+=1\n    return count\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].islower():\n            count+=1\n    return count\n    \ndef digit_ctr(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    #new_str = ''\n    #for i in str:\n    #    if i.isupper():\n    #        new_str+=i\n    #return len(new_str)\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    i=0\n    for char in str:\n        if char.isupper():\n            i+=1\n    return i\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in range(len(str)):\n        if(str[i] >= 'A' and str[i] <= 'Z'):\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #results = []\n    #for i in range(len(list1)):\n    #    for j in range(i, len(list1)):\n    #        results.append(list1[i:j+1])\n    #return results\n    return [list1[i:j+1] for i in range(len(list1)) for j in range(i, len(list1))]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for x in list1:\n        result.extend([list1[i] for i in range(len(list1)) if i!= x])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    if len(list1) == 0:\n        return []\n    else:\n        for i in range(1, len(list1) + 1):\n            for combo in combinations(list1, i):\n                combos.append(combo)\n        return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)<=1:\n        return list1\n    else:\n        list2=list1[1:]\n        list3=combinations_list(list2)\n        list4=[]\n        for i in list1:\n            for j in list3:\n                list4.append([i]+j)\n        return list4\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return [[]]\n    result = []\n    for i in range(len(list1)):\n        # print i, list1[i], list1[0:i] + list1[i+1:]\n        result += [[list1[i]] + p for p in combinations_list(list1[0:i]+list1[i+1:])]\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        combinations_list_recursive(list1, 0, [], [])\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for a in range(len(list1)):\n        for b in range(a+1, len(list1)):\n            result.append([list1[a], list1[b]])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    def helper(list1, i, temp, result):\n        if i == len(list1):\n            result.append(temp)\n        else:\n            helper(list1, i+1, temp + [list1[i]], result)\n            helper(list1, i+1, temp, result)\n    helper(list1, 0, [], result)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, 2))\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    for i in list1:\n        sub = combinations_list(list1[list1.index(i) + 1:])\n        for j in sub:\n            result.append([i] + j)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr)==0:\n        return 0\n    max_ending_here = 1\n    max_so_far = arr[0]\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here*arr[i]\n        if max_ending_here<0:\n            max_ending_here = 1\n        if max_so_far<max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    best_i, best_j = 0, 0\n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    result = arr[0]\n    for i in range(1,n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        result = max(max_so_far, result)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    # for each index, you know the best subarray so far\n    # best_sum = [None for x in arr]\n    best_sum = []\n    for i in range(len(arr)):\n        best_sum.append(max([arr[i],arr[i]*arr[i-1],arr[i]*arr[i-2]]))\n    return max(best_sum)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    min_product = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_product = max(arr[i], max_product)\n            min_product = min(arr[i], min_product)\n        else:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n    return max_product if max_product > 0 else min_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    product_so_far = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n    max_ending_here = max_so_far = arr[0]\n    start = end = 0\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], arr[i]*max_ending_here)\n        if max_ending_here > max_so_far:\n            start = i\n            max_so_far = max_ending_here\n            end = i\n    return arr[start:end+1]\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values()))==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict.values():\n        return False\n    return True\n    \n    \ndef check_duplicate(dict):\n    '''\n    Write a function to check if a dictionary contains duplicate values.\n    '''\n    for key, value in dict.items():\n        if value not in dict.values():\n            return False\n    return True\n    \n    \ndef check_same_values(dict1, dict2):\n    '''\n    Write a function to check if a dictionary contains the same values as another.\n    '''\n    for key, value in dict1.items():\n        if value not in dict2.values():\n            return False\n    return True\n    \n    \ndef frequency_sort(list):\n    '''\n    Write a function to sort a list by frequency in descending order.\n    '''\n    return sorted(list, key = list.count, reverse = True)\n    \n    \ndef big_freq_item(dict):\n    '''\n    Write a function to find the key for the highest value in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value == max(dict.values()):\n            return key\n            \n            \ndef get_nth_combination(n, r, dict):\n    '''\n    Write a function to find the nth combination of elements from a dictionary.\n    '''\n    \n    temp = 1\n    for i in range(r):\n        temp *= n\n        n -= 1\n    \n    temp /= dict[r]\n    return temp\n    \n    \ndef max_val(dict):\n    '''\n    Write a function to return the maximum value in a dictionary.\n    '''\n    return max(dict.values())\n    \n    \ndef min_val(dict):\n    '''\n    Write a function to return the minimum value in a dictionary.\n    '''\n    return min(dict.values())\n    \n    \ndef get_shorter_dict(dict1, dict2):\n    '''\n    Write a function to get the keys of dictionary that have shorter keys.\n    '''\n    temp = dict1\n    if len(dict1) > len(dict2):\n        temp = dict2\n    \n    for key, value in temp.items():\n        if key not in dict2:\n            return key\n    return None\n    \n    \ndef sum_dict(dict1, dict2):\n    '''\n    Write a function to get the keys of dictionary that have shorter keys.\n    '''\n    temp = dict1\n    if len(dict1) > len(dict2):\n        temp = dict2\n    \n    for key, value in temp.items():\n        if key not in dict2:\n            dict2[key] = 0\n        dict2[key] += value\n    \n    return dict2\n    \n    \ndef count_dict(dict1):\n    '''\n    Write a function to count the keys of a dictionary.\n    '''\n    temp = dict1\n    for key, value in temp.items():\n        temp[key] = dict1[key]\n        \n    return len(temp)\n    \n    \ndef char_freq(dict):\n    '''\n    Write a function to return the most frequent and the least frequent characters in a dictionary.\n    '''\n    temp = {}\n    for key, value in dict.items():\n        if value not in temp.values():\n            temp[key] = value\n    \n    temp = sorted(temp.items(), key = lambda item: item[1], reverse = True)\n    \n    return temp[0][0], temp[-1][0]\n    \n    \ndef unique_char(str):\n    '''\n    Write a function to return the number of unique characters in a string.\n    '''\n    temp = {}\n    for char in str:\n        if char not in temp:\n            temp[char] = 1\n        else:\n            temp[char] += 1\n    \n    return len(temp)\n    \n    \ndef get_prob(str):\n    '''\n    Write a function to get the probability of a string.\n    '''\n    temp = {}\n    for char in str:\n        if char not in temp:\n            temp[char] = 1\n        else:\n            temp[char] += 1\n    \n    total_count = len(str)\n    for key, value in temp.items():\n        temp[key] = value / float(total_count)\n    \n    return temp\n    \n    \ndef replace_char(str):\n    '''\n    Write a function to replace the first substring of a string with the second substring.\n    '''\n    temp = str.split()\n    return temp[1] + \" \" + temp[0]\n    \n    \ndef get_key(dict, value):\n    '''\n    Write a function to return the key for a specific value in a dictionary.\n    '''\n    for key, val in dict.items():\n        if val == value:\n            return key\n        \n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_count = dict.values()\n    return value_count.count(value_count[0]) == len(value_count)\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    k = list(dict.values())\n    if len(k)!= len(set(k)):\n        return False\n    return True\n    \n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    d = dict[n]\n    for i in d:\n        if d[i]!= d[0]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict[key] for key in dict):\n        return n\n    return 0\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    key = None\n    for i in dict:\n        if key == None:\n            key = i\n            continue\n        if n!= dict[i]:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if len(value) == 0:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if dict1[key]:\n            new_dict[key] = dict1[key]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in list(dict1.items()):\n        if len(value) == 0:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    out = {}\n    for key in dict1:\n        if dict1[key]:\n            out[key] = dict1[key]\n    return out\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n        elif isinstance(value, dict):\n            drop_empty(value)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in list(dict1.items()):\n        if value == '':\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    result = {}\n    for key, value in dict1.items():\n        if value!= []:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= []:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in dict1.items():\n        if value==[]:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    for i in xrange(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr is None or len(arr)==0:\n        return 0\n    max_product=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            product=1\n            for k in range(i,j):\n                product*=arr[k]\n            max_product=max(max_product,product)\n    return max_product\ndef max_product_other(arr):\n    '''\n    The idea here is to use two pointers i and j to keep track of the smallest and largest elements seen thus far. \n    We initialize them to the first and the last elements of the array.\n    Then, we iterate the array. We do a max_product(arr[i:j+1]) of all possible subsequences between i and j,\n    such that arr[i:j+1] is a valid subset of arr. We return the max product.\n    '''\n    if arr is None or len(arr)==0:\n        return 0\n    i=0\n    j=len(arr)-1\n    max_product=0\n    while i<j:\n        max_product=max(max_product,max_product_subsequence(arr,i,j))\n        if arr[i]<arr[j]:\n            i+=1\n        else:\n            j-=1\n    return max_product\ndef max_product_subsequence(arr,i,j):\n    '''\n    This function finds the maximum product formed by multiplying elements of an increasing subsequence of arr[i:j+1]\n    '''\n    if i==j:\n        return arr[i]\n    max_left=0\n    if arr[i]<arr[j]:\n        max_left=max_product_subsequence(arr,i+1,j)\n    max_right=max_product_subsequence(arr,i,j-1)\n    return max_left*max_right\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in xrange(1, len(arr)):\n        prod = 1\n        for j in xrange(i):\n            prod *= arr[j]\n        if prod * arr[i] > max_product:\n            max_product = prod * arr[i]\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    max_product=arr[0]\n    for i in range(len(arr)):\n        max_product=max(max_product, arr[i]*arr[i+1]*arr[i+2]*arr[i+3])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0] * arr[1]\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            curr_prod = arr[i] * arr[j]\n            max_prod = max(max_prod, curr_prod)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            product = max(product, arr[i])\n        else:\n            product = product * arr[i]\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #base case\n    if len(arr) == 0:\n        return None\n    #since len(arr) is increasing, the max and min are always in increasing order\n    max_prod = arr[0]\n    min_prod = arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    start = 0\n    product = arr[0]\n    for i in xrange(1, len(arr)):\n        if arr[i] <= 0:\n            start = i\n            product = max(product, arr[i])\n        else:\n            product = max(product * arr[i], arr[i])\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            print(test_tup[i] + test_tup[i+1])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not test_tup:\n        return\n    elif len(test_tup) <= 1:\n        return test_tup\n    return test_tup[0] + test_tup[1], test_tup[1] + test_tup[2]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    out = list(test_tup)\n    for i in range(len(out)-1):\n        out[i] += out[i+1]\n    return tuple(out)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    list_tup = list(tup)\n    i = 0\n    while i < len(list_tup):\n        list_tup[i] = list_tup[i] + list_tup[i+1]\n        i = i + 2\n    if len(list_tup) == 1:\n        return tuple(list_tup)\n    else:\n        return tuple(list_tup[1:])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(operator.add, test_tup[0:-1], test_tup[1:]))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    assert len(test_tup) == 3, 'Invalid tuple length'\n    return test_tup[0] + test_tup[1] + test_tup[2]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #Remove the first and the last element of the tuple\n    test_list = test_tup[1:len(test_tup)-1]\n    #Iterate over the list of tuple and add them\n    result = []\n    for i in range(0, len(test_list)-1):\n        result.append(test_list[i] + test_list[i+1])\n    #Return the new tuple\n    return tuple(result)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in xrange(1, n): \n        arr[i] = (arr[i-1] * arr[i]) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    left, right = [0] * (n+1), [0] * (n+1)\n    left[0], right[0] = 1, 1\n    for i in xrange(1, n+1):\n        left[i] = (left[i-1] * arr[i-1])%n\n        right[n-i] = (right[n-i+1] * arr[n-i])%n\n    ans = 1\n    for i in xrange(n):\n        ans = ((ans * left[i]) % n) * (right[i] % n)\n    return ans\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    result = 1\n    for ele in arr:\n        result = (result * ele) % n\n    return result\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code here\n    arr = sorted(arr)\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m = 1\n    for i in range(len(arr)):\n        m = (m * arr[i]) % n\n    return m\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr: \n        prod = (prod * i) % n \n    return prod \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #write your code here\n    if len(arr) == 0:\n        return 1\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return (arr[0] * find_remainder(arr[1:], n)) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = (prod * arr[i]) % n\n    return prod\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    num_list = []\n    #For loop to iterate through the list elements\n    for i in l:\n        #If statement to check for consectuive numbers\n        if (i + 1) in l:\n            num_list.append(i)\n    print num_list\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True\ndef check_Consecutive_2(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return True\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!=1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    check = True\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i+1]:\n            check = False\n    return check\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    flag = 0\n    for i in range(n-1):\n        if l[i+1]-l[i]!= 1:\n            flag = 1\n    if flag == 0:\n        print \"The list is a consecutive list\"\n    else:\n        print \"The list is NOT a consecutive list\"\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<2:\n        return True\n    for i in range(1,len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    print \"Given list:\",l\n    l.sort()\n    count = 0\n    for i in xrange(len(l)-1):\n        if l[i+1]-l[i] == 1:\n            count += 1\n    if count == 0:\n        print \"No consecutive numbers\"\n    else:\n        print \"Consecutive numbers\"\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(a+1==b for a,b in zip(l, l[1:]))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i-1]!= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    test_list1.sort()\n    test_list2.sort()\n    \n    res = []\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            res.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n    return tuple(res)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for elt in test_list1:\n        if elt in test_list2:\n            result.append(elt)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for elem in test_list1:\n        if elem in test_list2:\n            new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list_dict1 = {tuple(sorted(test_list1[i])):i for i in range(len(test_list1))}\n    list_dict2 = {tuple(sorted(test_list2[i])):i for i in range(len(test_list2))}\n    intersect_list = []\n    for k in list_dict1:\n        for m in list_dict2:\n            if k == m:\n                intersect_list.append(k)\n                break\n    return intersect_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_list = []\n    for ele in test_list1:\n        if ele in test_list2:\n            intersect_list.append(ele)\n    return intersect_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str1 = ''\n    for s in str1:\n        if s == ch:\n            new_str1 += newch\n        else:\n            new_str1 += s\n    return new_str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        str1=str1.replace(ch,newch)\n    return str1\ndef switch(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef remove_digits(str1):\n    '''\n    Write a function to remove all the characters of a given string from another string.\n    '''\n    str2=str1.replace('1',' ').replace('2',' ').replace('3',' ').replace('4',' ').replace('5',' ').replace('6',' ').replace('7',' ').replace('8',' ').replace('9',' ')\n    return str2\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    return len(str1.split(str2))\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)\ndef count_words(str1,str2):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return str1.count(str2)"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for char in str1:\n        if char == ch:\n            newstr = newstr + newch\n        else:\n            newstr = newstr + char\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    x=str1.replace(ch,newch)\n    return x\n    \n    \n    \n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    x = str1.index(ch)\n    return str1[:x] + newch + str1[x+1:]\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # my_dict = {'a': 4, 'b': 3, 'c': 2, 'd': 1}\n    # result = sorted(my_dict.items(), key=lambda x: x[1])\n    # return result\n    # return sorted(my_dict.items(), key=lambda x: x[1])\n    # return sorted(my_dict.items(), key=lambda x: x[1])\n    # return sorted(my_dict.items(), key=lambda x: x[0])\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key, value in dict1.items():\n        dict1[key] = [value, key]\n    return sorted(dict1.values())\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys_list = []\n    for key in dict1:\n        keys_list.append(key)\n    return sorted(keys_list, key = lambda k: dict1[k])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(),key = lambda x:x[1])\n    return dict2\ndef letter_histogram(str1):\n    dict1 = {}\n    for c in str1:\n        if c in dict1:\n            dict1[c]+=1\n        else:\n            dict1[c]=1\n    return dict1\ndef word_histogram(str1):\n    dict1 = {}\n    for word in str1.split():\n        if word in dict1:\n            dict1[word]+=1\n        else:\n            dict1[word]=1\n    return dict1\ndef count_words(str1):\n    counts = Counter(str1.split())\n    return counts\ndef count_words2(str1):\n    return Counter(str1.split())\ndef single_letter_count(str1):\n    count = 0\n    for c in str1:\n        if c not in str1.split():\n            count+=1\n    return count\ndef single_letter_count2(str1):\n    count = 0\n    for c in str1:\n        if c not in str1.split():\n            count+=1\n    return count\ndef sum_numbers(nums):\n    total = 0\n    for num in nums:\n        total+=num\n    return total\ndef sum_numbers2(nums):\n    return sum(nums)\ndef sum_numbers3(nums):\n    return sum(nums)\ndef reverse_string(str1):\n    return str1[::-1]\ndef reverse_string2(str1):\n    return ''.join(reversed(str1))\ndef reverse_string3(str1):\n    return str1[::-1]\ndef reverse_string4(str1):\n    return ''.join(reversed(str1))\ndef reverse_string5(str1):\n    return ''.join(reversed(str1))\ndef reverse_string6(str1):\n    return ''.join(str1[::-1])\ndef is_palindrome(str1):\n    return str1 == str1[::-1]\ndef is_palindrome2(str1):\n    return str1 == str1[::-1]\ndef is_palindrome3(str1):\n    return str1 == str1[::-1]\ndef is_palindrome4(str1):\n    return str1 == str1[::-1]\ndef is_palindrome5(str1):\n    return str1 == str1[::-1]\ndef is_palindrome6(str1):\n    return str1 == str1[::-1]\ndef first_and_last(str1):\n    return str1[0] + str1[-1]\ndef first_and_last2(str1):\n    return str1[0] + str1[-1]\ndef first_and_last3(str1):\n    return str1[0] + str1[-1]\ndef first_and_last4(str1):\n    return str1[0] + str1[-1]\ndef first_and_last5(str1):\n    return str1[0] + str1[-1]\ndef first_and_last6(str1):\n    return str1[0] + str1[-1]\ndef first_and_last7(str1):\n    return str1[:2] + str1[-2:]\ndef first_and_last8(str1):\n    return str1[:2] + str1[-2:]\ndef first_and_last9(str1):\n    return str1[:2] + str1[-2:]\ndef first_and_last10(str1):\n    return str1[:2] + str1[-2:]\ndef my_enumerate(seq):\n    for i,elem in enumerate(seq):\n        yield i,elem\ndef my_enumerate2(seq):\n    return [(i,elem) for i,elem in enumerate(seq)]\ndef my_enumerate3(seq):\n    return list(enumerate(seq))\ndef my_enumerate4(seq):\n    return [(i,elem) for i,elem in enumerate(seq)]\ndef my_enumerate5(seq):\n    return list(enumerate(seq))\ndef my_enumerate6(seq):\n    return [(i,elem) for i,elem in enumerate(seq)]\ndef my_enumerate7(seq):\n    return list(enumerate(seq))\ndef my_enumerate8(seq):\n    return [(i,elem) for i,elem in enumerate(seq)]\ndef my_enumerate9(seq):\n    return list(enumerate(seq))\ndef my_enumerate10(seq):\n    return [(i,elem) for i,elem in enumerate(seq)]\ndef flatten(seq):\n    '''\n    Write a function flatten that takes a list of lists\n    and returns a new list that contains the elements of the\n    input list.\n    '''\n    return sum(seq,[])\ndef flatten2(seq):\n    return [item for sublist in seq for item in sublist]\ndef flatten3(seq):\n    return sum(seq,[])\ndef flatten4(seq):\n    return [item for sublist in seq for item in sublist]\ndef flatten5(seq):\n    return sum(seq,[])\ndef flatten6(seq):\n    return [item for sublist in seq for item in sublist]\ndef is_palindrome_perm(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm2(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm3(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm4(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm5(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm6(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm7(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm8(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm9(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_palindrome_perm10(str1):\n    str1 = ''.join(sorted(str1))\n    return str1 == str1[::-1]\ndef is_perm_palindrome(str1):\n    return Counter(str1) == Counter(str1[::-1])\ndef is_perm_palindrome2(str1):\n    return sorted(str1) == sorted(str1[::-1])\ndef is_perm_palindrome3(str1):\n    return sorted(str1) == sorted(str1[::-1])\ndef is_perm_palindrome4(str1):\n    return sorted(str1) == sorted(str1[::-1])\ndef is_perm_palindrome5(str1):\n    return sorted(str1) == sorted(str1[::-1])\ndef is_perm_palindrome6(str1):\n    return sorted(str1) == sorted(str1[::-1])\ndef is_perm_palindrome7(str1):\n    return sorted(str1) == sorted(str1[::-1])\ndef is_perm_palindrome8(str1):\n    return sorted(str1) == sorted(str1[::-1])\ndef is"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    return sorted_list\ndef sort_counter_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(),key=lambda x:x[1])\n    return sorted_list\ndef sort_counter_by_value_reversed(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    return sorted_list\ndef sort_counter_by_value_descending(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(),key=lambda x:x[1],reverse=False)\n    return sorted_list\ndef sort_counter_by_value_ascending(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(),key=lambda x:x[1])\n    return sorted_list\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {k:v for k,v in sorted(dict1.items(), key = lambda x:x[1], reverse = True)}\n    return sorted_dict\ndef merge_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    merged_dict = {k:dict1.get(k,0) + dict2.get(k,0) for k in set(dict1) | set(dict2)}\n    return merged_dict\ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {k:v for k,v in sorted(dict1.items(), key = lambda x:x[1], reverse = True)}\n    return sorted_dict\ndef add_value_to_dict(dict1, key, value):\n    '''\n    Write a function to add value to the dictionary\n    '''\n    dict1[key] = dict1.get(key,0) + value\n    return dict1\ndef mean(x):\n    '''\n    Write a function to calculate the mean of a list\n    '''\n    return sum(x)/len(x)\ndef median(list1):\n    '''\n    Write a function to calculate the median of a list\n    '''\n    list1.sort()\n    if len(list1) % 2 == 0:\n        i = len(list1) / 2\n        return (list1[i-1]+list1[i])/2\n    else:\n        i = len(list1)/2\n        return list1[i]\ndef mode(list1):\n    '''\n    Write a function to calculate the mode of a list\n    '''\n    return Counter(list1).most_common(1)[0][0]\ndef variance(list1):\n    '''\n    Write a function to calculate the variance of a list\n    '''\n    mean_list1 = mean(list1)\n    sum_list1 = 0\n    for i in list1:\n        sum_list1 += (i-mean_list1)**2\n    return sum_list1/len(list1)\ndef stddev(list1):\n    '''\n    Write a function to calculate the standard deviation of a list\n    '''\n    return variance(list1) ** 0.5\ndef sum_of_squares(list1):\n    '''\n    Write a function to calculate the sum of squares of a list\n    '''\n    return sum([i**2 for i in list1])\ndef pearson_coefficient(list1, list2):\n    '''\n    Write a function to calculate the Pearson coefficient of two lists\n    '''\n    list1_mean = mean(list1)\n    list2_mean = mean(list2)\n    x_list1 = [i - list1_mean for i in list1]\n    x_list2 = [i - list2_mean for i in list2]\n    sum_x = sum_of_squares(x_list1)\n    sum_x_list2 = sum_of_squares(x_list2)\n    sum_of_product = sum([i*j for i,j in zip(x_list1, x_list2)])\n    return sum_of_product / ((len(list1) * stddev(list1)) * (len(list2) * stddev(list2))) ** 0.5\ndef get_list(list1,list2):\n    '''\n    Write a function to generate a new list by adding two lists\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i] + list2[i])\n    return new_list\ndef get_list_of_subsets(list1, k):\n    '''\n    Write a function to generate all the subsets of a list\n    '''\n    if k == 0:\n        return [[]]\n    else:\n        return [[i] + p for p in get_list_of_subsets(list1,k-1) for i in list1]\ndef generate_random_list(list1,k):\n    '''\n    Write a function to generate a random list of numbers\n    '''\n    import random\n    random_list = [random.randint(1,k) for i in range(k)]\n    return random_list\ndef get_dict_of_numbers_list(list1,k):\n    '''\n    Write a function to generate a dictionary of numbers\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        dict1[list1[i]] = i\n    return dict1\ndef get_list_of_intervals(list1):\n    '''\n    Write a function to generate a list of intervals\n    '''\n    list_of_intervals = []\n    for i in range(1, len(list1)):\n        list_of_intervals.append((list1[i-1],list1[i]))\n    return list_of_intervals\ndef get_list_of_interval_tuples(list1):\n    '''\n    Write a function to generate a list of tuples of intervals\n    '''\n    list_of_interval_tuples = []\n    for i in get_list_of_intervals(list1):\n        list_of_interval_tuples.append((i[0],i[1]))\n    return list_of_interval_tuples\ndef get_interval_tuples_in_list(list1):\n    '''\n    Write a function to generate a list of tuples of intervals\n    '''\n    return [i for i in get_list_of_intervals(list1)]\ndef get_interval_tuples_from_dict(dict1):\n    '''\n    Write a function to generate a list of tuples of intervals\n    '''\n    list_of_interval_tuples = []\n    for i in dict1:\n        list_of_interval_tuples.append((i,dict1[i]))\n    return list_of_interval_tuples\ndef get_interval_tuples(list1):\n    '''\n    Write a function to generate a list of tuples of intervals\n    '''\n    list_of_interval_tuples = []\n    for i in range(1, len(list1)):\n        list_of_interval_tuples.append((list1[i-1],list1[i]))\n    return list_of_interval_tuples\ndef get_interval_tuples_from_dict(dict1):\n    '''\n    Write a function to generate a list of tuples of intervals\n    '''\n    list_of_interval_tuples = []\n    for i in dict1:\n        list_of_interval_tuples.append((i,dict1[i]))\n    return list_of_interval_tuples\ndef get_interval_tuples_using_set(list1):\n    '''\n    Write a function to generate a list of tuples of intervals\n    '''\n    intervals_in_list = set(get_list_of_intervals(list1))\n    intervals_in_list = list(intervals_in_list)\n    interval_tuples_in_list = []\n    for interval in intervals_in_list:\n        interval_tuples_in_list.append((interval[0],interval[1]))\n    return interval_tuples_in_list\ndef get_interval_tuples_using_set_in_dict(dict1):\n    '''\n    Write a function to generate a list of tuples of intervals\n    '''\n    intervals_in_list = set(get_list_of_intervals(dict1))\n    intervals_in_list = list(intervals_in_list)\n    interval_tuples_in_list = []\n    for interval in intervals_in_list:\n        interval_tuples_in_list.append((interval[0],interval[1]))\n    return interval_tuples_in_list\ndef get_histogram_of_list(list1):\n    '''\n    Write a function to generate a histogram of a list\n    '''\n    histogram = {}\n    for i in list1:\n        if i in histogram:\n        "
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    d = sorted(dict1.items(), key = lambda x:x[1], reverse=True)\n    return d\n    \n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return [k for k,v in sorted(dict1.items(),key = lambda x:x[1],reverse=True)]\ndef how_many(list1):\n    '''\n    Write a function to find the number of items in a list that are greater than a given value.\n    '''\n    return len([x for x in list1 if x>5])\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list1))\ndef check_pangram(str1):\n    '''\n    Write a function to check if a string is pangram or not.\n    '''\n    return len(set(str1)) == 26\ndef find_anagrams(list1):\n    '''\n    Write a function to find all the anagrams of a word from a given list.\n    '''\n    return [x for x in list1 for y in list1 if sorted(x)==sorted(y) and x!=y]\ndef find_anagrams_1(list1):\n    '''\n    Write a function to find all the anagrams of a word from a given list.\n    '''\n    return [x for x in list1 for y in list1 if sorted(x)==sorted(y) and x!=y]\ndef find_anagrams_2(list1):\n    '''\n    Write a function to find all the anagrams of a word from a given list.\n    '''\n    list2 = []\n    for x in list1:\n        if sorted(x) in list2:\n            pass\n        else:\n            list2.append(sorted(x))\n    return [x for x in list1 if sorted(x) in list2]\ndef get_number_of_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return sum(1 for x in str1 if x in 'aeiouAEIOU')\ndef find_maximum_product_of_3(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list1[x],list1[x+1],list1[x+2] = list1[x],list1[x+1],list1[x+2]\n    return list1[0]*list1[1]*list1[2]\ndef find_maximum_product_of_3_2(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list2.append(list1[x]*list1[y]*list1[y+1])\n    return max(list2)\ndef find_maximum_product_of_3_3(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list2.append(list1[x]*list1[y]*list1[y+1])\n    return max(list2)\ndef find_maximum_product_of_3_4(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list2.append(list1[x]*list1[y]*list1[y+1])\n    return max(list2)\ndef find_maximum_product_of_3_5(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list2.append(list1[x]*list1[y]*list1[y+1])\n    return max(list2)\ndef find_maximum_product_of_3_6(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list2.append(list1[x]*list1[y]*list1[y+1])\n    return max(list2)\ndef find_maximum_product_of_3_7(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list2.append(list1[x]*list1[y]*list1[y+1])\n    return max(list2)\ndef find_maximum_product_of_3_8(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list2.append(list1[x]*list1[y]*list1[y+1])\n    return max(list2)\ndef find_maximum_product_of_3_9(list1):\n    '''\n    Write a function to find the maximum product of three consecutive numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)-2):\n        for y in range(x+1,len(list1)-1):\n            if x<y:\n                if list1[x]*list1[y]*list1[y+1]>list1[x]*list1[x+1]*list1[y+2]:\n                    list2.append(list1[x]*list1[y]*list1[y+1])\n    return max(list2)\ndef find_maximum_product_of_3_10(list1):"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum numbers from the given array\n    max_num = max(nums)\n    min_num = min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::2])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums, reverse = True)[:2])\n    # max_val = max(nums)\n    # min_val = min(nums)\n    # return max_val + min_val\n    # return max_val - min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    big_sum = 0\n    for num in nums:\n        if num > big_sum:\n            big_sum = num\n    \n    return big_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = sum(nums)\n    return result\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string == string.lower():\n        return True\n    return False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if re.search('[a-z]',str1):\n        str1=re.sub('[a-z]','',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    if re.search('[0-9]',str1):\n        str1=re.sub('[0-9]','',str1)\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    if re.search('[!@#$%^&*()_+|<>?,.{}~-]',str1):\n        str1=re.sub('[!@#$%^&*()_+|<>?,.{}~-]','',str1)\n    return str1\ndef remove_space(str1):\n    '''\n    Write a function to remove space from a given string.\n    '''\n    if re.search('[\\s]',str1):\n        str1=re.sub('[\\s]','',str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    if re.search('[a-zA-Z]+',str1):\n        str1=re.sub('[a-zA-Z]+','',str1)\n    return str1\ndef remove_stopwords_list(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    list_stopwords=['a','an','and','are','as','at','be','by','for','from','has','he','in','is','it','its','of','on','or','that','the','to','was','were','will','with']\n    for stopword in list_stopwords:\n        str1=re.sub(stopword,'',str1)\n    return str1\ndef replace_repeated_characters(str1):\n    '''\n    Write a function to replace repeated characters with their non-repeated counterparts.\n    '''\n    if re.search('(.)\\\\1{2,}',str1):\n        str1=re.sub('(.)\\\\1{2,}','\\\\1',str1)\n    return str1\ndef replace_repeated_characters_in_order(str1):\n    '''\n    Write a function to replace repeated characters with their non-repeated counterparts.\n    '''\n    str1=re.sub('(.)\\\\1+',r'\\1',str1)\n    return str1\ndef replace_digits(str1):\n    '''\n    Write a function to replace digits with their non-digits counterparts.\n    '''\n    if re.search('[0-9]',str1):\n        str1=re.sub('[0-9]','',str1)\n    return str1\ndef replace_punctuation(str1):\n    '''\n    Write a function to replace punctuation with their non-punctuation counterparts.\n    '''\n    if re.search('[!@#$%^&*()_+|<>?,.{}~-]',str1):\n        str1=re.sub('[!@#$%^&*()_+|<>?,.{}~-]','',str1)\n    return str1\ndef replace_space(str1):\n    '''\n    Write a function to replace space with their non-space counterparts.\n    '''\n    if re.search('[\\s]',str1):\n        str1=re.sub('[\\s]','',str1)\n    return str1\ndef replace_space_with_slash(str1):\n    '''\n    Write a function to replace space with their non-space counterparts.\n    '''\n    str1=re.sub(' ','/',str1)\n    return str1\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove leading and trailing whitespaces from a given string.\n    '''\n    if re.search('[\\s]',str1):\n        str1=re.sub('[\\s]','',str1)\n    return str1\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if re.search('[A-Z]',str1):\n        str1=re.sub('[A-Z]','',str1)\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    if re.search('[0-9]',str1):\n        str1=re.sub('[0-9]','',str1)\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    if re.search('[!@#$%^&*()_+|<>?,.{}~-]',str1):\n        str1=re.sub('[!@#$%^&*()_+|<>?,.{}~-]','',str1)\n    return str1\ndef remove_space(str1):\n    '''\n    Write a function to remove space from a given string.\n    '''\n    if re.search('[\\s]',str1):\n        str1=re.sub('[\\s]','',str1)\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    if re.search('[a-zA-Z]+',str1):\n        str1=re.sub('[a-zA-Z]+','',str1)\n    return str1\ndef remove_stopwords_list(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    list_stopwords=['a','an','and','are','as','at','be','by','for','from','has','he','in','is','it','its','of','on','or','that','the','to','was','were','will','with']\n    for stopword in list_stopwords:\n        str1=re.sub(stopword,'',str1)\n    return str1\ndef replace_repeated_characters(str1):\n    '''\n    Write a function to replace repeated characters with their non-repeated counterparts.\n    '''\n    if re.search('(.)\\\\1{2,}',str1):\n        str1=re.sub('(.)\\\\1{2,}','\\\\1',str1)\n    return str1\ndef replace_repeated_characters_in_order(str1):\n    '''\n    Write a function to replace repeated characters with their non-repeated counterparts.\n    '''\n    str1=re.sub('(.)\\\\1+',r'\\1',str1)\n    return str1\ndef replace_digits(str1):\n    '''\n    Write a function to replace digits with their non-digits counterparts.\n    '''\n    if re.search('[0-9]',str1):\n        str1=re.sub('[0-9]','',str1)\n    return str1\ndef replace_punctuation(str1):\n    '''\n    Write a function to replace punctuation with their non-punctuation counterparts.\n    '''\n    if re.search('[!@#$%^&*()_+|<>?,.{}~-]',str1):\n        str1=re.sub('[!@#$%^&*()_+|<>?,.{}~-]','',str1)\n    return str1\ndef replace_space(str1):\n    '''\n    Write a function to replace space with their non-space counterparts.\n    '''\n    if re.search('[\\s]',str1):\n        str1=re.sub('[\\s]','',str1)\n    return str1\ndef replace_space_with_slash(str1):\n    '''\n    Write a function to replace space with their non-space counterparts.\n    '''\n    str1=re.sub(' ','/'"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]')\n    return lowercase_pattern.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = re.sub(r\"[a-z]+\", \"\", str1,flags=re.IGNORECASE)\n    return string\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    string = re.sub(r\"\\d+\", \"\", str1,flags=re.IGNORECASE)\n    return string\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join(str1.split(str1.lower()))\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1:\n        return re.sub(r'[a-z]+', '', str1)\n    else:\n        return None\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_words = []\n    for word in str1.split():\n        lowercase_words.append(re.sub('[a-z]', '', word).lower())\n    return''.join(lowercase_words)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % (10**(len(str(n))-1))\ndef last_Digit_without_last_one(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % (10**(len(str(n))-2))\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 10) :\n        return n\n    else :\n        return first_Digit(n // 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10**(len(str(n))-1))\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n/pow(10,len(str(n))-1)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    d = n // 10\n    return d\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for item in list:\n        if (item % 2 == 1):\n            odds.append(item)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list.sort()\n    return [list[i] for i in range(1, len(list), 2)]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_odd = [x for x in list if x % 2]\n    return list_odd\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!= 0]\nprint(Split([1,3,5,7,9]))\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    retList=[]\n    for i in list:\n        if i%2!=0:\n            retList.append(i)\n    return retList\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #Check to see if the list is empty\n    if len(list) == 0: \n        return []\n    #Check to see if the list is of length 1\n    elif len(list) == 1: \n        return list\n    #If the list length is greater than 1, check to see if the first element is an odd integer and add it to the list\n    elif list[0] % 2 == 1: \n        return [list[0]] + Split(list[1:])\n    #If the list length is greater than 1, then check to see if the last element is an odd integer and add it to the list\n    elif list[-1] % 2 == 1:\n        return Split(list[:-1]) + [list[-1]]\n    #If neither of the above conditions are true, then add the first and last element to the list\n    else:\n        return [list[0]] + Split(list[1:-1]) + [list[-1]]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = [i for i in list if i%2!=0]\n    print(list1)\n    return\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x*x*x for x in range(1,n)]) - sum([x for x in range(1,n+1)])\n    \n    \nprint(difference(5))\nprint(difference(100))"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i*i*i for i in range(1, n+1)]) - sum([i for i in range(1, n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1) :\n        sum1 = sum1 + i**3\n        sum2 = sum2 + i\n    sum2 = sum2**2\n    return sum1 - sum2\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ = 0\n    for i in range(n):\n        summ += i ** 3\n    return (summ ** 3) - summ\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return sum([x**3 for x in range(1,n)]) - sum(range(n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1) :\n        sum = sum + (i**3)\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Approach 1:\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i**3\n    return sum**3 - sum\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    sum_of_cubes = 0\n    for i in range(n) : \n        sum_of_cubes += i * i * i \n    result = sum_of_cubes - n * n * n \n    return result \n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)]) - sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1) :\n        s = s + (i ** 3)\n    d = s ** 2 - s\n    return d\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Count the number of pairs whose xor value is odd.\n    Count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j]%2 == 1:\n                Count = Count+1\n    return Count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return sum((A[i] ^ A[j]) & 1 for i in range(N) for j in range(i + 1, N))\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    count = 0\n    for i in xrange(N-1) :\n        for j in xrange(i+1,N) :\n            if A[i]^A[j]&1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return sum(i for i in range(N) if (i^A[i])&1)\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Write your code here\n    from collections import Counter\n    return Counter(a^b for a,b in zip(A,A[1:]))['1']\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    OddPairs = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) & 1 :\n                OddPairs += 1\n    return OddPairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i]^A[j]%2==1 :\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                count += 1 \n    return count\n    \ndef find_Odd_Pair_Mod(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                count += 1 \n    return count\n    \ndef find_Odd_Pair_Not_Probable(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Mod(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Mod_Not_Probable(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable_Mod(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable_Mod_2(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                if A[i] ^ A[j] > 0 :\n                    count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable_Mod_3(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                if A[i] ^ A[j] > 0 :\n                    if A[i] ^ A[j] > 9 :\n                        count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable_Mod_4(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                if A[i] ^ A[j] > 0 :\n                    if A[i] ^ A[j] > 9 :\n                        if A[i] ^ A[j] > 99 :\n                            count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable_Mod_5(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                if A[i] ^ A[j] > 0 :\n                    if A[i] ^ A[j] > 9 :\n                        if A[i] ^ A[j] > 99 :\n                            if A[i] ^ A[j] > 999 :\n                                count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable_Mod_6(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                if A[i] ^ A[j] > 0 :\n                    if A[i] ^ A[j] > 9 :\n                        if A[i] ^ A[j] > 99 :\n                            if A[i] ^ A[j] > 999 :\n                                if A[i] ^ A[j] > 9999 :\n                                    count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable_Mod_7(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] ) % 2 == 1 :\n                if A[i] ^ A[j] > 0 :\n                    if A[i] ^ A[j] > 9 :\n                        if A[i] ^ A[j] > 99 :\n                            if A[i] ^ A[j] > 999 :\n                                if A[i] ^ A[j] > 9999 :\n                                    if A[i] ^ A[j] > 99999 :\n                                        count += 1 \n    return count\n    \ndef find_Odd_Pair_Combo_Not_Probable_Mod_8(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j] "
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return len([A[i] ^ A[j] for i in range(N) for j in range(i+1,N) if A[i] ^ A[j] % 2 == 1])\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 :\n                count = count + 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    \n    # First convert all the letters to lower case and then convert all the letters to upper case\n    return string.lower().upper()\n    \n    #return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == None:\n        return None\n    result = ''\n    for i in string:\n        if i.isupper():\n            result += i.lower()\n        else:\n            result += i.upper()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in string:\n        if i.isupper():\n            new_string += i.lower()\n        else:\n            new_string += i.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(x.swapcase() if x.isalpha() else x for x in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(x.lower() if x.isupper() else x.upper() for x in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    to_return = ''\n    for i in string:\n        to_return += i.swapcase()\n    return to_return\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(int(str(n1) + str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        return None\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1-n2)\n    return sum(divmod(diff, 10)[1])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = str(n1), str(n2)\n    return sum([(n1.index(x) - n2.index(x)) for x in n1 if x in n2])\n    \ndef digit_distance_string(s1, s2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two strings.\n    '''\n    return sum([abs(s1.index(x) - s2.index(x)) for x in s1 if x in s2])\n    \ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two integers.\n    '''\n    while a:\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(a)-int(b)) for a, b in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    n = max(n1, n2)\n    d = abs(n1 - n2)\n    while n:\n        s += d % n\n        n //= 10\n        d //= 10\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def to_num(n):\n        if n < 10:\n            return n\n        else:\n            return (n % 10) + (10 * to_num(n // 10))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_lst = list(str(n1))\n    n2_lst = list(str(n2))\n    n1_lst = [int(i) for i in n1_lst]\n    n2_lst = [int(i) for i in n2_lst]\n    return sum([abs(i-j) for i,j in zip(n1_lst, n2_lst)])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str, n2_str = str(n1), str(n2)\n    if len(n1_str) > len(n2_str):\n        n1_str, n2_str = n2_str, n1_str\n    n1_list, n2_list = list(n1_str), list(n2_str)\n    for i in range(len(n2_list)):\n        if int(n1_list[i]) > int(n2_list[i]):\n            n1_list[i] = str(int(n1_list[i]) - int(n2_list[i]))\n        elif int(n1_list[i]) < int(n2_list[i]):\n            n2_list[i] = str(int(n2_list[i]) - int(n1_list[i]))\n    return sum(int(x) for x in n1_list) + sum(int(x) for x in n2_list)\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    maximum = a[0]\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > maximum:\n            maximum = current_sum\n    return maximum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -sys.maxint\n    max_ending_here = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -sys.maxint-1\n    for i in range(0, size):\n        max_sum = max(max_sum, sum(a[i:size]))\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    curr_sum = 0\n    max_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -sys.maxsize\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return None\n    result = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        result = max(result, max_ending_here)\n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = a[0]\n    start = 0\n    end = 0\n    for i in xrange(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            start = end\n            end = i\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = list(set(test_tup1).union(set(test_tup2)))\n    new_tup.sort()\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # sorted_union = tuple(sorted(list(set(test_tup1 + test_tup2))))\n    # print(sorted_union)\n    # return sorted_union\n    return tuple(sorted(list(set(test_tup1 + test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    #print set1\n    #print set2\n    union = sorted(list(set1 | set2))\n    print union\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuples = list(set(test_tup1).union(set(test_tup2)))\n    union_tuples.sort()\n    return tuple(union_tuples)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    set3 = set1.union(set2)\n    return sorted(set3)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return_max = lst[0]\n    length = len(lst[0])\n    for elem in lst:\n        if len(elem) > length:\n            length = len(elem)\n            return_max = elem\n    return return_max\n    \n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = len(lst)\n    count = 0\n    for i in xrange(length):\n        for j in xrange(i+1, length):\n            sub = lst[i:j+1]\n            if len(sub) > count:\n                count = len(sub)\n    return count\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return_list = []\n    for i in range(len(lst)):\n        return_list.append(len(lst[i]))\n    return max(return_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sub_list = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sub_list.append(lst[i:j + 1])\n    max_length = len(sub_list[0])\n    for sub_list in sub_list:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        if isinstance(lst[0], int):\n            return lst[0]\n        else:\n            return Find_Max_Length(lst[1:]) + 1\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        first_char = lst[0]\n        max_length = 0\n        for i in xrange(len(lst)):\n            if lst[i] == first_char:\n                current_length = 0\n                for j in xrange(i,len(lst)):\n                    if lst[j] == first_char:\n                        current_length += 1\n                    else:\n                        break\n                if current_length > max_length:\n                    max_length = current_length\n        return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maximum = 0\n    for i in lst:\n        if i >= maximum:\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    cnt = 0\n    result = 0\n    d = {}\n    for item in lst:\n        if item in d:\n            cnt += 1\n        else:\n            cnt = 1\n        d[item] = cnt\n        result = max(result, cnt)\n    return result\n    \ndef Find_Longest_Sublists(lst, k):  \n    '''\n    Write a python function to find the longest sublists of length k.\n    '''\n    lst.sort()\n    n = len(lst)\n    result = [0]\n    d = {}\n    for i in xrange(0, n):\n        if i == 0:\n            if lst[i] not in d:\n                d[lst[i]] = 1\n            else:\n                d[lst[i]] += 1\n            if d[lst[i]] > k:\n                result = [i - k + 1, i + 1]\n        else:\n            if lst[i] not in d:\n                d[lst[i]] = 1\n            else:\n                d[lst[i]] += 1\n            if lst[i - 1] not in d:\n                d[lst[i - 1]] = 1\n            else:\n                d[lst[i - 1]] += 1\n            if d[lst[i - 1]] > k:\n                result = [i - k + 1, i + 1]\n    return result\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    \n    for i in range(0, len(lst)):\n        count = 0\n        for j in range(i, len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n            else:\n                break\n        if count > max_len:\n            max_len = count\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    for match in re.finditer(r\"\\b(?:'[^']*'|\\\"[^\\\"]*\\\")\",text):\n        values.append(match.group())\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #TODO: Fix the list indices in the step function.\n    #TODO: Handle multiple commas in the sentence.\n    values = []\n    start = 0\n    while True:\n        start = text.find('\\\"',start)\n        if start == -1:\n            break\n        end = text.find('\\\"',start+1)\n        if end == -1:\n            break\n        values.append(text[start+1:end])\n        start = end+1\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"([^\\\"]*)\\\"')\n    search_results = pattern.findall(text)\n    return search_results\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    state = 0\n    new_val = ''\n    for char in text:\n        if state == 0:\n            if char == '\"':\n                state = 1\n            else:\n                new_val += char\n        elif state == 1:\n            if char == '\"':\n                values.append(new_val)\n                new_val = ''\n                state = 0\n            else:\n                new_val += char\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\\"(.*?)\\\"',text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search('\"([^\"]*)\"', text)\n    if match:\n        return match.group(1)\n    return ''\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return text\n    if \"\\\"\" not in text:\n        return text\n    \n    values = re.findall(\"[\\\"](.*?)[\\\"]\",text)\n    \n    if len(values) == 0:\n        return text\n    \n    values[0] = values[0].replace(\"\\\"\",\"\")\n    if \"\\\"\" in values[0]:\n        return extract_values(values[0])\n    else:\n        return values[0]\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # TODO:\n    # use a regex to find strings inside quotes\n    # use a regex to separate values from commas\n    # return a list of values\n    values = re.findall(r'(?<=\\\")[^\\\"]+(?=\\\")|(?<=\\')[^\\']+(?=\\')', text)\n    print(values)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #x= re.search(r'\\\"(.*?)\\\"',text)\n    #y = re.search(r'\\'(.*?)\\'',text)\n    #if x:\n    #    print(x.group(1))\n    #elif y:\n    #    print(y.group(1))\n    x = re.findall(r'\\\"(.*?)\\\"',text)\n    y = re.findall(r'\\'(.*?)\\'',text)\n    #print(x)\n    #print(y)\n    return x+y\ndef normalize_string(text):\n    '''\n    Write a function to replace all lower-case characters with their upper-case equivalents. For example, the string \"leetcode\" would become \"LEETCODE\".\n    '''\n    return text.upper()\ndef swap_case(text):\n    '''\n    Write a function to change the case of a string.\n    '''\n    x = re.findall(r'(?<![A-Za-z0-9])[A-Z](?![A-Z])',text)\n    y = re.findall(r'(?<![A-Za-z0-9])[a-z](?![a-z])',text)\n    return ''.join(x+y)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return re.sub(r'[^\\w\\s]','',text)\ndef hyphenate(text):\n    '''\n    Write a function to hyphenate a string\n    '''\n    return re.sub(r'(.)(?=\\1+$)',r'\\1-',text)\ndef convert_to_int(text):\n    '''\n    Write a function to convert a string into an integer.\n    '''\n    return int(text)\ndef replace_space(text):\n    '''\n    Write a function to replace space with \"%20\"\n    '''\n    return re.sub(r' ',r'%20',text)\ndef to_lower(text):\n    '''\n    Write a function to convert all the upper-case characters to lower-case characters.\n    '''\n    return text.lower()\ndef get_longest_diverse_words(text):\n    '''\n    Write a function to return a string with all duplicate words removed, and sorted in ascending order.\n    '''\n    words = re.findall(r'\\w+',text)\n    count = {}\n    for word in words:\n        if word in count:\n            count[word]+=1\n        else:\n            count[word]=1\n    result = []\n    for key in count:\n        if count[key]>1:\n            result.append(key)\n    return sorted(result)\ndef get_longest_common_prefix(text):\n    '''\n    Write a function to return the longest common prefix of a string.\n    '''\n    return sorted(set(text))[0]\ndef get_longest_alphabetical_substring(text):\n    '''\n    Write a function to return the longest alphabetical substring of a string.\n    '''\n    x = sorted(text)\n    y = sorted(set(text))\n    #print(x,y)\n    result = \"\"\n    for i in range(len(x)):\n        if x[i] == y[i]:\n            result += x[i]\n        else:\n            break\n    return result\ndef compare_strings(text1,text2):\n    '''\n    Write a function to compare two strings using their longest common substring.\n    '''\n    x = sorted(text1)\n    y = sorted(text2)\n    #print(x,y)\n    result = \"\"\n    for i in range(len(x)):\n        if x[i] == y[i]:\n            result += x[i]\n        else:\n            break\n    return result\ndef compute_average(text):\n    '''\n    Write a function to compute the average value of all integers represented in the string.\n    '''\n    return int(sum(map(int,re.findall(r'-?[0-9]+',text))) / len(re.findall(r'-?[0-9]+',text)))\ndef find_max(text):\n    '''\n    Write a function to find the maximum value of all integers represented in the string.\n    '''\n    return max(map(int,re.findall(r'-?[0-9]+',text)))\ndef count_words(text):\n    '''\n    Write a function to count the number of occurrences of each word in a sentence.\n    '''\n    x = {}\n    for word in re.findall(r'\\w+',text):\n        if word in x:\n            x[word] += 1\n        else:\n            x[word] = 1\n    return x\ndef count_characters(text):\n    '''\n    Write a function to count the number of occurrences of each character in a string.\n    '''\n    x = {}\n    for i in re.findall(r'\\w',text):\n        if i in x:\n            x[i] += 1\n        else:\n            x[i] = 1\n    return x\ndef remove_adjacent_duplicates(text):\n    '''\n    Write a function to remove all adjacent duplicates of the same character in a string.\n    '''\n    x = {}\n    for i in range(len(text)):\n        if text[i] not in x:\n            x[text[i]] = 1\n        else:\n            x[text[i]] += 1\n    #print(x)\n    return ''.join([i for i in x])\ndef get_nth_word(text,n):\n    '''\n    Write a function to return the nth word in a string.\n    '''\n    if n>len(re.findall(r'\\w+',text)):\n        return None\n    return re.findall(r'\\w+',text)[n-1]\ndef get_nth_word(text,n):\n    '''\n    Write a function to return the nth word in a string.\n    '''\n    x = re.findall(r'\\w+',text)\n    if n>len(x):\n        return None\n    return x[n-1]\ndef get_nth_word(text,n):\n    '''\n    Write a function to return the nth word in a string.\n    '''\n    x = re.findall(r'\\w+',text)\n    if n>len(x):\n        return None\n    return x[n-1]\ndef is_anagram(text1,text2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    x = sorted(text1)\n    y = sorted(text2)\n    #print(x,y)\n    return x==y\ndef is_anagram(text1,text2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    return sorted(text1)==sorted(text2)\ndef get_longest_string(text):\n    '''\n    Write a function to return the longest string of same characters in a string.\n    '''\n    x = re.findall(r'(.)(?=\\1+)',text)\n    y = re.findall(r'(.)(?=\\1+$)',text)\n    #print(x,y)\n    return max(x,y,key=len)\ndef get_longest_string(text):\n    '''\n    Write a function to return the longest string of same characters in a string.\n    '''\n    x = re.findall(r'(.)(?=\\1+)',text)\n    y = re.findall(r'(.)(?=\\1+$)',text)\n    #print(x,y)\n    return max(x,y,key=len)\ndef get_longest_string(text):\n    '''\n    Write a function to return the longest string of same characters in a string.\n    '''\n    x = re.findall(r'(.)(?=\\1+)',text)\n    y = re.findall("
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('[\\s\\S]+?\\s+?(\".*?\"|\\'.*?\\')', text)\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                pairs+=1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                cnt=cnt+1\n    return cnt\n    \n    \ndef count_Triples(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible ordered triples where all three elements are equal.\n    '''\n    cnt=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                cnt=cnt+1\n    return cnt\n    \ndef count_Triples_opposite(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible ordered triples where all three elements are equal and the other 2 elements are in opposite order.\n    '''\n    cnt=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j] and arr[i]!=arr[j-1]:\n                cnt=cnt+1\n    return cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    # for i in range(n-1):\n    #     for j in range(i+1,n):\n    #         if(arr[i]!=arr[j]):\n    #             count += 1\n    # return count\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                count+=1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # defining dictionary and creating list\n    d = {}\n    l = []\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n<2:\n        return 0\n    else:\n        count=0\n        for i in range(n):\n            for j in range(i+1,n):\n                if arr[i]!=arr[j]:\n                    count+=1\n        return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    hash = {}\n    for i in arr:\n        if i in hash:\n            hash[i]+=1\n        else:\n            hash[i]=1\n    count = 0\n    for i in hash:\n        if i!=hash[i]:\n            count+=hash[i]*(hash[i]-1)//2\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    list_of_characters = list(word)\n    return list_of_characters\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    res = 0\n    for i in range(len(n)):\n        res += int(n[i])\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return (n % 10) + sum_digits(int(n / 10))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert(n >= 0)\n    total = 0\n    while (n > 0):\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list2=list1[:]\n    list2.sort()\n    if list2==list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[0] <= list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] >= list1[i+1] for i in range(len(list1) - 1))\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i - 1] > list1[i]:\n            return False\n    return True\n    \ndef merge_list(list1, list2):\n    '''\n    Write a function to merge two sorted lists into a new list and return it.\n    '''\n    merged_list = []\n    for i in range(len(list1)):\n        merged_list.append(list1[i])\n    for j in range(len(list2)):\n        merged_list.append(list2[j])\n    return merged_list\n    \ndef rearrange_list(list1, index):\n    '''\n    Write a function to rearrange a list by replacing each element with its index.\n    '''\n    rearrange_list = []\n    for i in range(len(list1)):\n        rearrange_list.append(list1[(index + i) % len(list1)])\n    return rearrange_list\n    \ndef remove_duplicate_list(list1):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    list1_without_duplicates = []\n    for i in list1:\n        if i not in list1_without_duplicates:\n            list1_without_duplicates.append(i)\n    return list1_without_duplicates\n    \ndef remove_duplicates_using_set(list1):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    return list(set(list1))\n    \ndef remove_duplicates_using_dict(list1):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    unique_list = []\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n            unique_list.append(i)\n    return unique_list\n    \ndef merge_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries and return the result.\n    '''\n    dict3 = {}\n    for i in dict1:\n        if i in dict2:\n            dict3[i] = dict1[i] + dict2[i]\n        else:\n            dict3[i] = dict1[i]\n    for j in dict2:\n        if j not in dict1:\n            dict3[j] = dict2[j]\n    return dict3\n    \ndef make_string_lowercase(string1):\n    '''\n    Write a function to convert a string to all lowercase.\n    '''\n    return string1.lower()\n    \ndef make_string_uppercase(string1):\n    '''\n    Write a function to convert a string to all uppercase.\n    '''\n    return string1.upper()\n    \ndef check_for_integer(string1):\n    '''\n    Write a function to check whether a string is a integer or not.\n    '''\n    try:\n        int(string1)\n        return True\n    except ValueError:\n        return False\n    \ndef reverse_string(string1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string1[::-1]\n    \ndef reverse_string_using_recursion(string1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if string1 == '':\n        return string1\n    else:\n        return reverse_string_using_recursion(string1[1:]) + string1[0]\n    \ndef remove_first_and_last_char(string1):\n    '''\n    Write a function to remove first and last characters of a string.\n    '''\n    return string1[1:-1]\n    \ndef check_for_match(string1, string2):\n    '''\n    Write a function to check whether two strings are a match or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        for i in range(len(string1)):\n            if string1[i]!= string2[i]:\n                return False\n    return True\n    \ndef make_word_lowercase(string1):\n    '''\n    Write a function to convert a string to all lowercase and return it.\n    '''\n    return string1.lower()\n    \ndef make_word_uppercase(string1):\n    '''\n    Write a function to convert a string to all uppercase and return it.\n    '''\n    return string1.upper()\n    \ndef make_word_capitalized(string1):\n    '''\n    Write a function to convert a string to all uppercase and return it.\n    '''\n    return string1.capitalize()\n    \ndef make_word_swapcase(string1):\n    '''\n    Write a function to convert a string to all lowercase and return it.\n    '''\n    return string1.swapcase()\n    \ndef remove_third_char(string1):\n    '''\n    Write a function to remove third character from a string and return the string.\n    '''\n    return string1[0:2] + string1[3:]\n    \ndef check_for_palindrome(string1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if string1 == string1[::-1]:\n        return True\n    else:\n        return False\n    \ndef count_the_occurrence(string1, char1):\n    '''\n    Write a function to count the occurrence of a character in a string.\n    '''\n    return string1.count(char1)\n    \ndef get_index_of_char(string1, char1):\n    '''\n    Write a function to get index of a character in a string.\n    '''\n    return string1.index(char1)\n    \ndef get_character_at_index(string1, index):\n    '''\n    Write a function to get the character at a particular index in a string.\n    '''\n    return string1[index]\n    \ndef get_first_and_last_char(string1):\n    '''\n    Write a function to get the first and last character of a string.\n    '''\n    return string1[0], string1[-1]\n    \ndef check_for_substring(string1, string2):\n    '''\n    Write a function to check whether a string is a substring of another string or not.\n    '''\n    if string2 in string1:\n        return True\n    else:\n        return False\n    \ndef split_string_at_indices(string1, index1, index2):\n    '''\n    Write a function to split a string at two indices and return the result.\n    '''\n    return string1[index1:index2]\n    \ndef count_number_of_words(string1):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(string1.split())\n    \ndef count_number_of_characters_in_a_string(string1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    return len(string1)\n    \ndef count_number_of_characters_in_a_string_using_recursion(string1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    if string1 == '':\n        return 0\n    else:\n        return 1 + count_number_of_characters_in_a_string_using_recursion(string1[1:])\n    \ndef add_space_between_words(string1):\n    '''\n    Write a function to add a space between each word in a string.\n    '''\n    return''.join(string1.split())\n    \ndef add_space_between_words_using_recursion(string1):\n    '''\n    Write a function to add a space between each word in a string.\n    '''\n    if string1 == '':\n        return ''\n    else:\n        return'' + add_space_between_words_using_recursion(string1[1:])\n    \ndef factorial(n):"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] > list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i]>list1[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # empty_list = []\n    # for i in range(length):\n    #     empty_list.append({})\n    # return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = []\n    for i in range(length):\n        empty.append({})\n    return empty\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for x in range(length):\n        l.append(dict())\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(li) for li in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(i) for i in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def helper(sublist):\n        i = len(sublist) - 1\n        while i > 0:\n            if sublist[i-1] > sublist[i]:\n                swap(sublist, i-1, i)\n            i -= 1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_size = len(list1[0])\n    new_list = []\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for lst in list1:\n        new_lst = sorted(lst)\n        new_list.append(new_lst)\n    return new_list\n    \n    \nprint(sort_sublists([\"vacation\", \"car\", \"restaurant\", \"water\"]))"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for sublist in list1:\n        sublist.sort()\n        output.append(sublist)\n    return output\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index, item in enumerate(list1):\n        list1[index] = sorted(item)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for group in list1:\n        result.append(sorted(group))\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in list1]\n    \ndef test_sort_sublists():\n    test_list = [['a', 'b', 'c'], ['c', 'b', 'a'], ['c', 'a', 'b']]\n    assert sort_sublists(test_list) == [['a', 'b', 'c'], ['c', 'b', 'a'], ['c', 'a', 'b']]\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for num in nums:\n        if nums.count(num) > 1:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) < 1:\n        return\n    if len(nums) == 1:\n        return nums\n    nums = list(set(nums))\n    print nums\n    return\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    sorted_list = []\n    for i in nums:\n        if i not in sorted_list:\n            sorted_list.append(i)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for x in range(len(nums)):\n        if nums[x] not in unique_nums:\n            unique_nums.append(nums[x])\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in nums:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return list(nums_set)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = list()\n    for item in nums:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(set(nums))\n    return nums\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    list_data = [int(x) for x in list_data]\n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n    product = 1\n    for item in unique_list:\n        product *= item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return math.prod(set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n    result = 1\n    for data in unique_list:\n        result = result * data\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number = [x for x in list_data if list_data.count(x)==1]\n    product = 1\n    for i in unique_number:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    a = []\n    for x in list_data:\n        if x not in a:\n            a.append(x)\n    b = 1\n    for x in a:\n        b *= x\n    return b\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(list_data)\n    return [p for p in product(*list_data) if p!= ()]\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    for i in set(list_data):\n        prod = prod * i\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for item in list_data:\n        if item not in list_data[list_data.index(item) + 1:]:\n            product *= item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    data = set(list_data)\n    product = 1\n    for num in data:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(list_data)\n    product = 1\n    for x in list_data:\n        product = product * x\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h + 2*pi*h**2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Your Code Here\n    if not isinstance(r,int) or not isinstance(h,int):\n        return 'Inputs must be integers'\n    elif r<0 or h<0:\n        return 'Inputs must be positive'\n    else:\n        area=(2*(3.1416)*r*(r+h))+(2*(3.1416)*r*h)\n        return area\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if type(r)!=int or type(h)!=int:\n        raise ValueError(\"The radius and height must be integers\")\n    elif r<0 or h<0:\n        raise ValueError(\"The radius and height must be non-negative\")\n    else:\n        return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    r=float(r)\n    h=float(h)\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r ** 2) + 2 * pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return pi * r**2 + 2 * pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*(r**2+h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * (r**2) + 2 * math.pi * r * h\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(A)<=len(B)):\n        for i in range(len(B)):\n            if(A[i]==B[i]):\n                temp=True\n            else:\n                temp=False\n                break\n        if(temp==True):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef Sort_Sub_Arrays(arr):\n    '''\n    Write a python function to sort sub-arrays.\n    '''\n    length=len(arr)\n    for i in range(length):\n        arr[i]=sorted(arr[i])\n    return arr\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in B:\n        if i not in A:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(B) > len(A)):\n        return False\n    if (len(A) == 0):\n        return True\n    if (len(B) == 0):\n        return False\n    if (A[0] == B[0]):\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return is_Sub_Array(A,B[1:])\n    \ndef is_Alternate(A):\n    '''\n    Write a python function to check whether a list is alternate or not.\n    '''\n    if (len(A) < 2):\n        return True\n    else:\n        return (A[0] == A[1] and is_Alternate(A[1:]))\n    \ndef is_Equal_Leaf(A,B):\n    '''\n    Write a python function to check whether a list is the same or not.\n    '''\n    if (len(A) == 0):\n        return True\n    if (len(B) == 0):\n        return True\n    if (A[0] == B[0]):\n        return is_Equal_Leaf(A[1:],B[1:])\n    else:\n        return False\n        \ndef is_Equal(A,B):\n    '''\n    Write a python function to check whether two list are equal or not.\n    '''\n    if (len(A)!= len(B)):\n        return False\n    else:\n        return is_Equal_Leaf(A,B)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(B) <= len(A)):\n        for i in range(0,len(B)):\n            if A[i] == B[i]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\ndef is_Sub_Array_Recursive(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) <= len(A):\n        for i in range(0,len(B)):\n            if A[i] == B[i]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\ndef Maximum_Sub_Array_Sum_Recursive(A):\n    '''\n    Write a python function to find the maximum sum sublist of a list.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return A[0]\n    else:\n        return max(A[0] + Maximum_Sub_Array_Sum_Recursive(A[1:]), A[0])\ndef Max_Sub_Array_Sum_Iterative(A):\n    '''\n    Write a python function to find the maximum sum sublist of a list.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return A[0]\n    else:\n        max_sum = A[0]\n        curr_sum = A[0]\n        for i in range(1,len(A)):\n            curr_sum = max(curr_sum + A[i], A[i])\n            max_sum = max(curr_sum, max_sum)\n        return max_sum\ndef Left_Rotate(A,D,N):\n    '''\n    Write a python function to rotate the elements of a list to the left.\n    '''\n    for i in range(D):\n        temp = A[0]\n        for j in range(N-1):\n            A[j] = A[j+1]\n        A[N-1] = temp\ndef Right_Rotate(A,D,N):\n    '''\n    Write a python function to rotate the elements of a list to the right.\n    '''\n    for i in range(D):\n        temp = A[N-1]\n        for j in range(N-1,0,-1):\n            A[j] = A[j-1]\n        A[0] = temp\ndef Binary_Search(A,key):\n    '''\n    Write a python function to implement binary search.\n    '''\n    first = 0\n    last = len(A)-1\n    while first <= last:\n        mid = (first+last)/2\n        if A[mid] == key:\n            return mid\n        elif A[mid] > key:\n            last = mid -1\n        else:\n            first = mid +1\n    return -1\ndef Binary_Search_Recursive(A,key,first,last):\n    '''\n    Write a python function to implement binary search.\n    '''\n    if first > last:\n        return -1\n    else:\n        mid = (first+last)/2\n        if A[mid] == key:\n            return mid\n        elif A[mid] > key:\n            return Binary_Search_Recursive(A,key,first,mid-1)\n        else:\n            return Binary_Search_Recursive(A,key,mid+1,last)\ndef Sorted_Merge(A,B):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    i = 0\n    j = 0\n    ans = []\n    while i < len(A) and j < len(B):\n        if A[i] <= B[j]:\n            ans.append(A[i])\n            i+=1\n        else:\n            ans.append(B[j])\n            j+=1\n    if i < len(A):\n        ans += A[i:]\n    if j < len(B):\n        ans += B[j:]\n    return ans\ndef Count_Inversions(A):\n    '''\n    Write a python function to count the number of inversions of a list.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return 0\n    else:\n        first = 0\n        last = len(A)-1\n        mid = (first+last)/2\n        left_inversions = Count_Inversions(A[0:mid])\n        right_inversions = Count_Inversions(A[mid:last+1])\n        i = 0\n        j = 0\n        temp = []\n        inversions = 0\n        while i < len(A) and j < len(A):\n            if A[i] <= A[mid]:\n                i += 1\n            else:\n                temp.append(A[i])\n                i += 1\n                inversions += (len(A)-j)\n                j = i\n        if i < len(A):\n            temp += A[i:]\n        if j < len(A):\n            temp += A[j:]\n        return left_inversions + right_inversions + inversions\ndef Count_Inversions_Recursive(A,first,last):\n    '''\n    Write a python function to count the number of inversions of a list.\n    '''\n    if first >= last:\n        return 0\n    mid = (first + last)/2\n    left_inversions = Count_Inversions_Recursive(A,first,mid)\n    right_inversions = Count_Inversions_Recursive(A,mid+1,last)\n    i = 0\n    j = 0\n    temp = []\n    inversions = 0\n    while i < len(A) and j < len(A):\n        if A[i] <= A[mid]:\n            i += 1\n        else:\n            temp.append(A[i])\n            i += 1\n            inversions += (len(A)-j)\n            j = i\n    if i < len(A):\n        temp += A[i:]\n    if j < len(A):\n        temp += A[j:]\n    return left_inversions + right_inversions + inversions\ndef Count_Inversions_Iterative(A):\n    '''\n    Write a python function to count the number of inversions of a list.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return 0\n    else:\n        n = len(A)\n        inversions = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                if A[i] > A[j]:\n                    inversions += 1\n        return inversions\ndef Count_Inversions_Iterative_Optimized(A):\n    '''\n    Write a python function to count the number of inversions of a list.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return 0\n    else:\n        temp = A[:]\n        temp.sort()\n        n = len(A)\n        inversions = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                if A[i] > A[j]:\n                    inversions += 1\n        return inversions\ndef Swap(A,first,last):\n    '''\n    Write a python function to swap the elements of a list.\n    '''\n    temp = A[first]\n    A[first] = A[last]\n    A[last] = temp\ndef Count_Swaps(A):\n    '''\n    Write a python function to count the number of inversions of a list.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return 0\n    else:\n        n = len(A)\n        swaps = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                if A[i] > A[j]:\n                    swaps += 1\n        return swaps\ndef Count_Swaps_Recursive(A,first,last):\n    '''\n    Write a python function to count the number of inversions of a list.\n    ''"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A) > len(B)):\n        return False\n    for i in range(len(B)):\n        if (A[i] == B[i]):\n            for j in range(i + 1, len(A)):\n                if (A[j]!= B[i]):\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    while i < len(B):\n        if B[i] in A:\n            i += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == 0:\n        return True\n    elif len(A) == 1:\n        return A[0] == B[0]\n    else:\n        if A[0] == B[0]:\n            return is_Sub_Array(A[1:],B)\n        else:\n            return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(B)):\n            if A[i]!= B[i]:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    if A == B:\n        return True\n    for i in range(len(B)):\n        if B[i] == A[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    s = len(A) \n    i = 0\n    j = 0\n    while j<len(B) and i<s:\n        if A[i]==B[j]:\n            j = j + 1\n        i = i + 1\n    if j == len(B):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    from functools import reduce\n    def Reduce(s,d):\n        if(d<1):\n            return s\n        else:\n            return Reduce(s,d-1) * d\n    return Reduce(n,10)%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 1\n    while n > 1:\n        last_digit = last_digit * n % 10\n        n = n//10\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n-1)*n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 1:\n        return 0\n    last_Digit = 0\n    while n>0:\n        last_Digit = last_Digit*n % 10\n        n = n//10\n    return last_Digit\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 24\n    elif n == 9:\n        return 6\n    elif n == 10:\n        return 7\n    elif n == 11:\n        return 8\n    elif n == 12:\n        return 9\n    elif n == 13:\n        return 10\n    elif n == 14:\n        return 11\n    elif n == 15:\n        return 12\n    elif n == 16:\n        return 13\n    elif n == 17:\n        return 14\n    elif n == 18:\n        return 15\n    elif n == 19:\n        return 16\n    elif n == 20:\n        return 16\n    elif n == 21:\n        return 17\n    elif n == 22:\n        return 18\n    elif n == 23:\n        return 19\n    elif n == 24:\n        return 20\n    elif n == 25:\n        return 21\n    elif n == 26:\n        return 22\n    elif n == 27:\n        return 22\n    elif n == 28:\n        return 23\n    elif n == 29:\n        return 24\n    elif n == 30:\n        return 24\n    elif n == 31:\n        return 24\n    elif n == 32:\n        return 24\n    elif n == 33:\n        return 25\n    elif n == 34:\n        return 26\n    elif n == 35:\n        return 26\n    elif n == 36:\n        return 27\n    elif n == 37:\n        return 28\n    elif n == 38:\n        return 28\n    elif n == 39:\n        return 28\n    elif n == 40:\n        return 29\n    elif n == 41:\n        return 29\n    elif n == 42:\n        return 29\n    elif n == 43:\n        return 30\n    elif n == 44:\n        return 30\n    elif n == 45:\n        return 30\n    elif n == 46:\n        return 30\n    elif n == 47:\n        return 31\n    elif n == 48:\n        return 31\n    elif n == 49:\n        return 31\n    elif n == 50:\n        return 31\n    elif n == 51:\n        return 32\n    elif n == 52:\n        return 32\n    elif n == 53:\n        return 32\n    elif n == 54:\n        return 32\n    elif n == 55:\n        return 33\n    elif n == 56:\n        return 33\n    elif n == 57:\n        return 33\n    elif n == 58:\n        return 33\n    elif n == 59:\n        return 34\n    elif n == 60:\n        return 34\n    elif n == 61:\n        return 34\n    elif n == 62:\n        return 34\n    elif n == 63:\n        return 35\n    elif n == 64:\n        return 35\n    elif n == 65:\n        return 35\n    elif n == 66:\n        return 35\n    elif n == 67:\n        return 36\n    elif n == 68:\n        return 36\n    elif n == 69:\n        return 36\n    elif n == 70:\n        return 36\n    elif n == 71:\n        return 37\n    elif n == 72:\n        return 37\n    elif n == 73:\n        return 37\n    elif n == 74:\n        return 37\n    elif n == 75:\n        return 38\n    elif n == 76:\n        return 38\n    elif n == 77:\n        return 38\n    elif n == 78:\n        return 38\n    elif n == 79:\n        return 39\n    elif n == 80:\n        return 39\n    elif n == 81:\n        return 39\n    elif n == 82:\n        return 39\n    elif n == 83:\n        return 40\n    elif n == 84:\n        return 40\n    elif n == 85:\n        return 40\n    elif n == 86:\n        return 40\n    elif n == 87:\n        return 41\n    elif n == 88:\n        return 41\n    elif n == 89:\n        return 41\n    elif n == 90:\n        return 41\n    elif n == 91:\n        return 42\n    elif n == 92:\n        return 42\n    elif n == 93:\n        return 42\n    elif n == 94:\n        return 42\n    elif n == 95:\n        return 43\n    elif n == 96:\n        return 43\n    elif n == 97:\n        return 43\n    elif n == 98:\n        return 43\n    elif n == 99:\n        return 44\n    elif n == 100:\n        return 44\n    elif n == 101:\n        return 44\n    elif n == 102:\n        return 44\n    elif n == 103:\n        return 45\n    elif n == 104:\n        return 45\n    elif n == 105:\n        return 45\n    elif n == 106:\n        return 45\n    elif n == 107:\n        return 46\n    elif n == 108:\n        return 46\n    elif n == 109:\n        return 46\n    elif n == 110:\n        return 46\n    elif n == 111:\n        return 47\n    elif n == 112:\n        return 47\n    elif n == 113:\n        return 47\n    elif n == 114:\n        return 47\n    elif n == 115:\n        return 48\n    elif n == 116:\n        return 48\n    elif n == 117:\n        return 48\n    elif n == 118:\n        return 48\n    elif n == 119:\n        return 49\n    elif n == 120:\n        return 49\n    elif n == 121:\n        return 49\n    elif n == 122:\n        return 49\n    elif n == 123:\n        return 50\n    elif n == 124:\n        return 50\n    elif n == 125:\n        return 50\n    elif n == 126:\n        return 50\n    elif n == 127:\n        return 51\n    elif n == 128:\n        return 51\n    elif n == 129:\n        return 51\n    elif n == 130:\n        return 51\n    elif n == 131:\n        return 52\n    elif n == 132:\n        return 52\n    elif n == 133:\n        return 52\n    elif n == 134:\n        return 52\n    elif n == 135:\n        return 53\n    elif n == 136:\n        return 53\n    elif n == 137:\n        return 53\n    elif n == 138:\n        return 53\n    elif n == 139:\n        return 54\n    elif n == 140:\n        return 54\n    elif n == 141:\n        return 54\n    elif n == 142:\n        return 54\n    elif n == 143:\n        return 55\n    elif n == 144:\n        return 55\n    elif n == 145:\n        return 55\n    elif n == 146:\n        return 55\n    elif n == 147:\n        return 56\n    elif n == 148:\n        return 56\n    elif n == 149:\n        return 56\n    elif n == 150:\n        return 56\n    elif n == 151:\n        return 57\n    elif n == 152:\n        return 57\n    elif n == 153:\n        return 57\n    elif n == 154:\n        return 57\n    elif n == 155:\n        return 58\n    elif n == 156:\n        return 58\n    elif n == 157:\n        return 58\n    elif n == 158:\n        return 58\n    elif n == 159:\n        return 59\n    elif n == 160:\n        return 59\n    elif n == 161:\n        return 59\n    elif n == 162:\n        return 59\n    elif n == 163:\n        return 60\n    elif n == 164:\n        return 60\n    elif n == 165:\n        return 60\n    elif n == 166:\n        return 60\n    elif n ="
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    last_digit = result%10\n    return last_digit\ndef last_Digit_Factorial_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial(result) + last_Digit_Factorial(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n):\n        result *=i\n    return last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result) + last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum_Digit_Sum(result)\ndef last_Digit_Factorial_Digit_Sum_Digit_Sum_Digit_Sum"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n>9:\n        n=n/10\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10\n    \ndef test_last_digit_factorial():\n    assert last_Digit_Factorial(5) == 1\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(72) == 6\n    assert last_Digit_Factorial(9) == 9\n    assert last_Digit_Factorial(58) == 3\n    assert last_Digit_Factorial(28) == 2\n    assert last_Digit_Factorial(8) == 2\n    assert last_Digit_Factorial(14) == 4\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(29) == 1\n    assert last_Digit_Factorial(67) == 6\n    assert last_Digit_Factorial(32) == 4\n    assert last_Digit_Factorial(100) == 4\n    assert last_Digit_Factorial(65) == 5\n    assert last_Digit_Factorial(120) == 2\n    assert last_Digit_Factorial(59) == 6\n    assert last_Digit_Factorial(56) == 4\n    assert last_Digit_Factorial(17) == 4\n    assert last_Digit_Factorial(77) == 7\n    assert last_Digit_Factorial(66) == 6\n    assert last_Digit_Factorial(15) == 5\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(23) == 5\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(34) == 4\n    assert last_Digit_Factorial(19) == 4\n    assert last_Digit_Factorial(18) == 3\n    assert last_Digit_Factorial(18) == 3\n    assert last_Digit_Factorial(5) == 1\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(72) == 6\n    assert last_Digit_Factorial(9) == 9\n    assert last_Digit_Factorial(58) == 3\n    assert last_Digit_Factorial(28) == 2\n    assert last_Digit_Factorial(8) == 2\n    assert last_Digit_Factorial(14) == 4\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(29) == 1\n    assert last_Digit_Factorial(67) == 6\n    assert last_Digit_Factorial(32) == 4\n    assert last_Digit_Factorial(100) == 4\n    assert last_Digit_Factorial(65) == 5\n    assert last_Digit_Factorial(120) == 2\n    assert last_Digit_Factorial(59) == 6\n    assert last_Digit_Factorial(56) == 4\n    assert last_Digit_Factorial(17) == 4\n    assert last_Digit_Factorial(77) == 7\n    assert last_Digit_Factorial(66) == 6\n    assert last_Digit_Factorial(15) == 5\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(23) == 5\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(34) == 4\n    assert last_Digit_Factorial(19) == 4\n    assert last_Digit_Factorial(18) == 3\n    assert last_Digit_Factorial(18) == 3\n    assert last_Digit_Factorial(5) == 1\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(72) == 6\n    assert last_Digit_Factorial(9) == 9\n    assert last_Digit_Factorial(58) == 3\n    assert last_Digit_Factorial(28) == 2\n    assert last_Digit_Factorial(8) == 2\n    assert last_Digit_Factorial(14) == 4\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(29) == 1\n    assert last_Digit_Factorial(67) == 6\n    assert last_Digit_Factorial(32) == 4\n    assert last_Digit_Factorial(100) == 4\n    assert last_Digit_Factorial(65) == 5\n    assert last_Digit_Factorial(120) == 2\n    assert last_Digit_Factorial(59) == 6\n    assert last_Digit_Factorial(56) == 4\n    assert last_Digit_Factorial(17) == 4\n    assert last_Digit_Factorial(77) == 7\n    assert last_Digit_Factorial(66) == 6\n    assert last_Digit_Factorial(15) == 5\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(23) == 5\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(34) == 4\n    assert last_Digit_Factorial(19) == 4\n    assert last_Digit_Factorial(18) == 3\n    assert last_Digit_Factorial(18) == 3\n    assert last_Digit_Factorial(5) == 1\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(72) == 6\n    assert last_Digit_Factorial(9) == 9\n    assert last_Digit_Factorial(58) == 3\n    assert last_Digit_Factorial(28) == 2\n    assert last_Digit_Factorial(8) == 2\n    assert last_Digit_Factorial(14) == 4\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(29) == 1\n    assert last_Digit_Factorial(67) == 6\n    assert last_Digit_Factorial(32) == 4\n    assert last_Digit_Factorial(100) == 4\n    assert last_Digit_Factorial(65) == 5\n    assert last_Digit_Factorial(120) == 2\n    assert last_Digit_Factorial(59) == 6\n    assert last_Digit_Factorial(56) == 4\n    assert last_Digit_Factorial(17) == 4\n    assert last_Digit_Factorial(77) == 7\n    assert last_Digit_Factorial(66) == 6\n    assert last_Digit_Factorial(15) == 5\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(23) == 5\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(34) == 4\n    assert last_Digit_Factorial(19) == 4\n    assert last_Digit_Factorial(18) == 3\n    assert last_Digit_Factorial(18) == 3\n    assert last_Digit_Factorial(5) == 1\n    assert last_Digit_Factorial(12) == 3\n    assert last_Digit_Factorial(72) == 6\n    assert last_Digit_Factorial(9) == 9\n    assert last_Digit_Factorial(58) == 3\n    assert last_Digit_Factorial(28) == 2\n    assert last_Digit_Factorial(8) == 2\n    assert last_Digit_Factorial(14) == 4\n    assert last_Digit_Factorial(21) == 6\n    assert last_Digit_Factorial(29) == 1\n    assert last_Digit_Factorial(67) == 6\n    assert last_Digit_Factorial(32) == 4\n    assert last_Digit_Factorial(100) == 4\n    assert last_Digit_Factorial(65) == 5\n    assert last_Digit_Factorial(120) == 2\n    assert last_Digit_Factorial(59) == 6\n    assert last_Digit_Factorial(56) == 4\n    assert last_Digit_Factorial(17) == 4\n    assert last_Digit_Factorial(77) == 7\n    assert last_Digit_Factorial(66) == 6\n    assert last_Digit_Factoria"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item1, item2, item3]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i=0\n    j=0\n    k=0\n    flat_list=[]\n    while i < len(list1):\n        while j < len(list2):\n            while k < len(list3):\n                flat_list.append(list1[i])\n                flat_list.append(list2[j])\n                flat_list.append(list3[k])\n                k+=1\n                j+=1\n            k=0\n            j+=1\n        k=0\n        j=0\n        i+=1\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out = []\n    for i in range(len(list1)):\n        out += [list1[i]] + [list2[i]] + [list3[i]]\n    return out\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [ list1[i]+list2[i]+list3[i] for i in range(len(list1)) ]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_of_lists = []\n    for l1,l2,l3 in zip(list1,list2,list3):\n        list_of_lists.extend([l1,l2,l3])\n    return list_of_lists\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2)!= len(list3):\n        print 'lengths of input lists are not equal'\n        return None\n    else:\n        return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for x in zip(list1,list2,list3)]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #sorted_tuple_1, sorted_tuple_2 = sorted(test_tup1), sorted(test_tup2)\n    #return [a for a in sorted_tuple_1 if a not in sorted_tuple_2]\n    \n    #return [x for x in test_tup1 if x not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1 = [x for x in test_tup1 if x not in test_tup2]\n    l2 = [x for x in test_tup2 if x not in test_tup1]\n    return l1, l2\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_elems.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            dissimilar_elems.append(i)\n    return dissimilar_elems\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    import itertools\n    dissimilar = set(x for x in itertools.chain(test_tup1, test_tup2) if x in test_tup1 and x in test_tup2)\n    return list(dissimilar)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff = []\n    for x, y in zip(test_tup1, test_tup2):\n        if x!= y:\n            diff.append((x, y))\n    return diff\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a,b = test_tup1[0], test_tup2[0]\n    if len(a)!= len(b):\n        return\n    a = ''.join(a)\n    b = ''.join(b)\n    if len(a)!= len(b):\n        return\n    a,b = map(list,zip(*[iter(a),iter(b)]))\n    c = []\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            c.append(a[i])\n    c = tuple(c)\n    return c\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return None\n    \n    dissimilar_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elems.append(test_tup1[i])\n            dissimilar_elems.append(test_tup2[i])\n    return tuple(dissimilar_elems)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 if x not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_elmt = []\n    if len(test_tup1)!= len(test_tup2):\n        print('Length of tuples are not same')\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                dissim_elmt.append(test_tup1[i])\n        return (dissim_elmt)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return -1\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    flag = 1\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            flag = 0\n            break\n    if flag == 1:\n        return -1\n    else:\n        return min(test_tup1, test_tup2)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    odd_lst = []\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]) == True:\n            odd_lst.append(test_tuple[i])\n    return tuple(odd_lst)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = tuple()\n    for ele in test_tuple:\n        if not even_fnc(ele):\n            new_tuple += (ele,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    out_tuple = () \n    for elem in test_tuple: \n        if even_fnc(elem): \n            out_tuple += (elem,)\n    return out_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 1:\n        return even_fnc(test_tuple)\n    else:\n        return (even_fnc(test_tuple[0]), even_ele(test_tuple[1:], even_fnc))\n        \ndef print_tuple(test_tuple):\n    '''\n    Write a function to print a nested tuple in the following format:\n    \n    1 + (2 + (3, 4) + 5)\n    '''\n    if len(test_tuple) == 1:\n        print(test_tuple[0])\n    else:\n        print(test_tuple[0])\n        print_tuple(test_tuple[1])\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    assert type(test_tuple) == tuple\n    test_list = []\n    for i in test_tuple:\n        if even_fnc(i):\n            test_list.append(i)\n    return tuple(test_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            even_ele(ele, even_fnc)\n        else:\n            if ele%2 == 0:\n                even_fnc.append(ele)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([el for el in test_tuple if even_fnc(el)])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(even_fnc(test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([x for x in test_tuple if not even_fnc(x)])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = list(test_tuple)\n    for index, elem in enumerate(test_tuple):\n        if elem % 2 == 0:\n            test_tuple[index] = even_fnc(elem)\n    test_tuple = tuple(test_tuple)\n    return test_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2) * 2 + (b**2) * 2\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*s + 4*b*(s**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b * s/2\n    return a\n    \nprint surface_Area(2,2)\nprint surface_Area(3,1)\nprint surface_Area(3,3)\nprint surface_Area(4,3)\nprint surface_Area(4,4)\nprint surface_Area(5,3)\nprint surface_Area(5,4)\nprint surface_Area(6,3)\nprint surface_Area(6,4)\nprint surface_Area(7,3)\nprint surface_Area(7,4)\nprint surface_Area(8,3)\nprint surface_Area(8,4)\nprint surface_Area(9,3)\nprint surface_Area(9,4)\nprint surface_Area(10,3)\nprint surface_Area(10,4)\nprint surface_Area(11,3)\nprint surface_Area(11,4)\nprint surface_Area(12,3)\nprint surface_Area(12,4)\nprint surface_Area(13,3)\nprint surface_Area(13,4)\nprint surface_Area(14,3)\nprint surface_Area(14,4)\nprint surface_Area(15,3)\nprint surface_Area(15,4)\nprint surface_Area(16,3)\nprint surface_Area(16,4)\nprint surface_Area(17,3)\nprint surface_Area(17,4)\nprint surface_Area(18,3)\nprint surface_Area(18,4)\nprint surface_Area(19,3)\nprint surface_Area(19,4)\nprint surface_Area(20,3)\nprint surface_Area(20,4)\nprint surface_Area(21,3)\nprint surface_Area(21,4)\nprint surface_Area(22,3)\nprint surface_Area(22,4)\nprint surface_Area(23,3)\nprint surface_Area(23,4)\nprint surface_Area(24,3)\nprint surface_Area(24,4)\nprint surface_Area(25,3)\nprint surface_Area(25,4)\nprint surface_Area(26,3)\nprint surface_Area(26,4)\nprint surface_Area(27,3)\nprint surface_Area(27,4)\nprint surface_Area(28,3)\nprint surface_Area(28,4)\nprint surface_Area(29,3)\nprint surface_Area(29,4)\nprint surface_Area(30,3)\nprint surface_Area(30,4)\nprint surface_Area(31,3)\nprint surface_Area(31,4)\nprint surface_Area(32,3)\nprint surface_Area(32,4)\nprint surface_Area(33,3)\nprint surface_Area(33,4)\nprint surface_Area(34,3)\nprint surface_Area(34,4)\nprint surface_Area(35,3)\nprint surface_Area(35,4)\nprint surface_Area(36,3)\nprint surface_Area(36,4)\nprint surface_Area(37,3)\nprint surface_Area(37,4)\nprint surface_Area(38,3)\nprint surface_Area(38,4)\nprint surface_Area(39,3)\nprint surface_Area(39,4)\nprint surface_Area(40,3)\nprint surface_Area(40,4)\nprint surface_Area(41,3)\nprint surface_Area(41,4)\nprint surface_Area(42,3)\nprint surface_Area(42,4)\nprint surface_Area(43,3)\nprint surface_Area(43,4)\nprint surface_Area(44,3)\nprint surface_Area(44,4)\nprint surface_Area(45,3)\nprint surface_Area(45,4)\nprint surface_Area(46,3)\nprint surface_Area(46,4)\nprint surface_Area(47,3)\nprint surface_Area(47,4)\nprint surface_Area(48,3)\nprint surface_Area(48,4)\nprint surface_Area(49,3)\nprint surface_Area(49,4)\nprint surface_Area(50,3)\nprint surface_Area(50,4)\nprint surface_Area(51,3)\nprint surface_Area(51,4)\nprint surface_Area(52,3)\nprint surface_Area(52,4)\nprint surface_Area(53,3)\nprint surface_Area(53,4)\nprint surface_Area(54,3)\nprint surface_Area(54,4)\nprint surface_Area(55,3)\nprint surface_Area(55,4)\nprint surface_Area(56,3)\nprint surface_Area(56,4)\nprint surface_Area(57,3)\nprint surface_Area(57,4)\nprint surface_Area(58,3)\nprint surface_Area(58,4)\nprint surface_Area(59,3)\nprint surface_Area(59,4)\nprint surface_Area(60,3)\nprint surface_Area(60,4)\nprint surface_Area(61,3)\nprint surface_Area(61,4)\nprint surface_Area(62,3)\nprint surface_Area(62,4)\nprint surface_Area(63,3)\nprint surface_Area(63,4)\nprint surface_Area(64,3)\nprint surface_Area(64,4)\nprint surface_Area(65,3)\nprint surface_Area(65,4)\nprint surface_Area(66,3)\nprint surface_Area(66,4)\nprint surface_Area(67,3)\nprint surface_Area(67,4)\nprint surface_Area(68,3)\nprint surface_Area(68,4)\nprint surface_Area(69,3)\nprint surface_Area(69,4)\nprint surface_Area(70,3)\nprint surface_Area(70,4)\nprint surface_Area(71,3)\nprint surface_Area(71,4)\nprint surface_Area(72,3)\nprint surface_Area(72,4)\nprint surface_Area(73,3)\nprint surface_Area(73,4)\nprint surface_Area(74,3)\nprint surface_Area(74,4)\nprint surface_Area(75,3)\nprint surface_Area(75,4)\nprint surface_Area(76,3)\nprint surface_Area(76,4)\nprint surface_Area(77,3)\nprint surface_Area(77,4)\nprint surface_Area(78,3)\nprint surface_Area(78,4)\nprint surface_Area(79,3)\nprint surface_Area(79,4)\nprint surface_Area(80,3)\nprint surface_Area(80,4)\nprint surface_Area(81,3)\nprint surface_Area(81,4)\nprint surface_Area(82,3)\nprint surface_Area(82,4)\nprint surface_Area(83,3)\nprint surface_Area(83,4)\nprint surface_Area(84,3)\nprint surface_Area(84,4)\nprint surface_Area(85,3)\nprint surface_Area(85,4)\nprint surface_Area(86,3)\nprint surface_Area(86,4)\nprint surface_Area(87,3)\nprint surface_Area(87,4)\nprint surface_Area(88,3)\nprint surface_Area(88,4)\nprint surface_Area(89,3)\nprint surface_Area(89,4)\nprint surface_Area(90,3)\nprint surface_Area(90,4)\nprint surface_Area(91,3)\nprint surface_Area(91,4)\nprint surface_Area(92,3)\nprint surface_Area(92,4)\nprint surface_Area(93,3)\nprint surface_Area(93,4)\nprint surface_Area(94,3)\nprint surface_Area(94,4)\nprint surface_Area(95,3)\nprint surface_Area(95,4)\nprint surface_Area(96,3)\nprint surface_Area(96,4)\nprint surface_Area(97,3)\nprint surface_Area(97,4)\nprint surface_Area(98,3)\nprint surface_Area(98,4)\nprint surface_Area(99,3)\nprint surface_Area(99,4)\nprint surface_Area(100,3)\nprint surface_Area(100,4)\nprint surface_Area(101,3)\nprint surface_Area(101,4)\nprin"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*b) + (b*b*s) + (s*s)\n    \n    \ndef surface_Area2(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # return (b*b) + (b*b*s) + (s*s)\n    \n    \ndef get_longest_edge(n,m,k):\n    '''\n    Write a python function to find the length of the longest of two sides of a triangle with given base,height and basek.\n    '''\n    # if k == 2:\n    #     if n == m:\n    #         return ((n*n) + (m*m))/2\n    #     else:\n    #         return n*n + m*m\n    # else:\n    #     return (n*n) + (m*m)\n    \n    \ndef get_longest_edge2(n,m,k):\n    '''\n    Write a python function to find the length of the longest of two sides of a triangle with given base,height and basek.\n    '''\n    # if k == 2:\n    #     if n == m:\n    #         return ((n*n) + (m*m))/2\n    #     else:\n    #         return n*n + m*m\n    # else:\n    #     return (n*n) + (m*m)\n    \n    \ndef first_last_element(lst):\n    '''\n    Write a python function to return the first and last element of a list.\n    '''\n    return lst[0],lst[-1]\n    \n    \ndef first_last_element2(lst):\n    '''\n    Write a python function to return the first and last element of a list.\n    '''\n    return lst[0],lst[-1]\n    \n    \ndef rotate_array(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array2(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array3(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array4(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array5(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array6(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array7(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array8(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array9(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array10(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_array11(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a list\n    '''\n    return lst[::-1]\n    \n    \ndef reverse_list2(lst):\n    '''\n    Write a python function to reverse a list\n    '''\n    lst.reverse()\n    return lst\n    \n    \ndef reverse_list3(lst):\n    '''\n    Write a python function to reverse a list\n    '''\n    return lst[::-1]\n    \n    \ndef reverse_list4(lst):\n    '''\n    Write a python function to reverse a list\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[-i-1]\n    return lst\n    \n    \ndef reverse_list5(lst):\n    '''\n    Write a python function to reverse a list\n    '''\n    lst.reverse()\n    return lst\n    \n    \ndef reverse_list6(lst):\n    '''\n    Write a python function to reverse a list\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[-i-1]\n    return lst\n    \n    \ndef reverse_list7(lst):\n    '''\n    Write a python function to reverse a list\n    '''\n    return lst[::-1]\n    \n    \ndef rotate_list(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_list2(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_list3(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_list4(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_list5(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_list6(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return lst[-d:] + lst[:-d]\n    \n    \ndef rotate_list7(lst,d):\n    '''\n    Write a python function to rotate a list by given number of times.\n    '''\n    d = d % len(lst)\n    return ls"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    \ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a cube with a given base edge and height.\n    '''\n    return b*h\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (n*(b*s))+(b*s*(n-1))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (n*(b*h))+(b*h*(n-1))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(s*(n**2)))+(b*(s*(n-1)))\n    \ndef list_Volume(b,h,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers and base edge of length b.\n    '''\n    return (b*(h*(n**2)))+(b*(h*(n-1)))\n    \ndef list_SurfaceArea(b,s,n):\n    '''\n    Write a python function to calculate the surface area and volume of a pyramid with n layers an"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b + (b*b + (b*b)*s))\n    \nprint(surface_Area(5,10))"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    total = b*s\n    return total\n    \ndef vertical_Surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    total = 2*(b*s)+b*s\n    return total\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * (s**2)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not len(dict1):\n        return \"Empty\"\n    return \"Not Empty\"\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print 'True'\n    else:\n        print 'False'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key] == None:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # Write your code here\n    return (len(dict1) == 0)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n        \n    \nmy_dict(dict1)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print(\"Empty\")\n    else:\n        print(\"Not empty\")\n        \ndef my_dict_2(dict1):\n    '''\n    Write a function to count the number of occurrences of a specific key in a dictionary.\n    '''\n    count = 0\n    for key in dict1:\n        if key =='salary':\n            count += 1\n    print(count)\n    \ndef my_dict_3(dict1):\n    '''\n    Write a function to sum all the values in a dictionary\n    '''\n    sum = 0\n    for i in dict1:\n        sum = sum + dict1[i]\n    print(sum)\n    \ndef my_dict_4(dict1):\n    '''\n    Write a function to get a list of keys in a dictionary.\n    '''\n    list1 = []\n    for key in dict1:\n        list1.append(key)\n    print(list1)\n    \ndef my_dict_5(dict1):\n    '''\n    Write a function to get a list of values in a dictionary.\n    '''\n    list2 = []\n    for value in dict1.values():\n        list2.append(value)\n    print(list2)\n    \ndef my_dict_6(dict1):\n    '''\n    Write a function to get a list of key-value pairs in a dictionary\n    '''\n    list3 = []\n    for pair in dict1.items():\n        list3.append(pair)\n    print(list3)\n    \ndef my_dict_7(dict1):\n    '''\n    Write a function to replace all spaces with hyphens in a string\n    '''\n    string1 = 'Hello World'\n    string2 = string1.replace(' ','-')\n    print(string2)\n    \ndef my_dict_8(dict1):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    string1 = 'Hello World'\n    string2 = string1[::-1]\n    if string1 == string2:\n        print('String is a palindrome')\n    else:\n        print('String is not a palindrome')\n    \ndef my_dict_9(dict1):\n    '''\n    Write a function to find the length of a string without using len\n    '''\n    string1 = 'Hello World'\n    count = 0\n    for i in string1:\n        count += 1\n    print(count)\n    \ndef my_dict_10(dict1):\n    '''\n    Write a function to return a dictionary with all the keys and the length of the values\n    '''\n    dict2 = {}\n    for key in dict1:\n        dict2[key] = len(dict1[key])\n    print(dict2)\n    \ndef my_dict_11(dict1):\n    '''\n    Write a function to return a dictionary with all the keys and the most common value\n    '''\n    dict2 = {}\n    for key in dict1:\n        dict2[key] = max(dict1[key])\n    print(dict2)\n    \ndef my_dict_12(dict1):\n    '''\n    Write a function to check if a dictionary has a given key and value\n    '''\n    dict2 = {}\n    dict2['salary'] = 40000\n    if'salary' in dict1 and dict2['salary'] == 40000:\n        print('Salary is 40000')\n    else:\n        print('Salary is not 40000')\n        \ndef my_dict_13(dict1):\n    '''\n    Write a function to return the minimum value in a dictionary\n    '''\n    min = 9999\n    for i in dict1:\n        if dict1[i] < min:\n            min = dict1[i]\n    print(min)\n    \ndef my_dict_14(dict1):\n    '''\n    Write a function to return the maximum value in a dictionary\n    '''\n    max = 0\n    for i in dict1:\n        if dict1[i] > max:\n            max = dict1[i]\n    print(max)\n    \ndef my_dict_15(dict1):\n    '''\n    Write a function to return the sum of all the values in a dictionary\n    '''\n    sum = 0\n    for i in dict1:\n        sum += dict1[i]\n    print(sum)\n    \ndef my_dict_16(dict1):\n    '''\n    Write a function to get the mean value of a dictionary\n    '''\n    sum = 0\n    for i in dict1:\n        sum += dict1[i]\n    mean = sum / len(dict1)\n    print(mean)\n    \ndef my_dict_17(dict1):\n    '''\n    Write a function to get the variance of the dictionary\n    '''\n    sum = 0\n    for i in dict1:\n        sum += (dict1[i] - mean)**2\n    variance = sum / len(dict1)\n    print(variance)\n    \ndef my_dict_18(dict1):\n    '''\n    Write a function to get the standard deviation of the dictionary\n    '''\n    sum = 0\n    for i in dict1:\n        sum += (dict1[i] - mean)**2\n    variance = sum / len(dict1)\n    stdev = variance**0.5\n    print(stdev)\n    \ndef my_dict_19(dict1):\n    '''\n    Write a function to get the median of the dictionary\n    '''\n    list1 = []\n    for i in dict1:\n        list1.append(dict1[i])\n    list2 = sorted(list1)\n    if len(list2) % 2 == 0:\n        median1 = list2[len(list2)//2]\n        median2 = list2[len(list2)//2-1]\n        median = (median1 + median2) / 2\n    else:\n        median = list2[len(list2)//2]\n    print(median)\n    \ndef my_dict_20(dict1):\n    '''\n    Write a function to get the mode of the dictionary\n    '''\n    list1 = []\n    for i in dict1:\n        list1.append(dict1[i])\n    list2 = sorted(list1)\n    max_count = 0\n    count = 0\n    for i in list1:\n        if list1.count(i) > count:\n            count = list1.count(i)\n            mode = i\n    print(mode)\n    \ndef my_dict_21(dict1):\n    '''\n    Write a function to sort a dictionary\n    '''\n    list1 = []\n    for i in dict1:\n        list1.append(dict1[i])\n    list2 = sorted(list1)\n    print(list2)\n    \ndef my_dict_22(dict1):\n    '''\n    Write a function to get the most frequent value in a dictionary\n    '''\n    list1 = []\n    for i in dict1:\n        list1.append(dict1[i])\n    list2 = sorted(list1)\n    if len(list1) % 2 == 0:\n        median1 = list2[len(list2)//2]\n        median2 = list2[len(list2)//2-1]\n        median = (median1 + median2) / 2\n    else:\n        median = list2[len(list2)//2]\n    print(median)\n    \ndef my_dict_23(dict1):\n    '''\n    Write a function to get the sum of all the values in a dictionary\n    '''\n    sum = 0\n    for i in dict1:\n        sum += dict1[i]\n    print(sum)\n    \ndef my_dict_24(dict1):\n    '''\n    Write a function to get the median of the values in a dictionary\n    '''\n    list1 = []\n    for i in dict1:\n        list1.append(dict1[i])\n    list2 = sorted(list1)\n    if len(list1) % 2 == 0:\n        median1 = list2[len(list2)//2]\n        median2 = list2[len(list2)//2-1]\n        median = (median1 + median2"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key] == None:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1 = {}\n    if(dict1):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 2:\n        return 1\n    else:\n        return 2*catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #print(num)\n    n = 0\n    c = [1]\n    while n < num:\n        c.append(0)\n        n += 1\n    #print(c)\n    for i in range(1, num):\n        for j in range(1, i):\n            c[i] += c[j-1] * c[i-j-1]\n    return c[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = [1]\n    for i in range(1, num):\n        result.append(0)\n    for i in range(num):\n        if i % 2 == 0:\n            result[i] = (4 * i * result[i]) / (i + 1)\n        else:\n            result[i] = (2 * i * result[i - 1]) / (i + 1)\n    return result[num - 1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num < 0:\n        return 0\n    else:\n        return (recursive_catalan(num) / (2*num+1))\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + 2 * catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return 0\n    if num == 1:\n        return 1\n    a = [1,1,2]\n    for i in range(3,num+1):\n        a.append(0)\n        for j in range(i):\n            a[i] += a[j] * a[i-j-1]\n    return a[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def recur(n):\n        if n <= 1:\n            return 1\n        return recur(n-1) + recur(n-2)\n    return recur(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    return 2 * (2 * (num - 1) + catalan_number(num - 1))\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2 * catalan_number(num - 1)) + (catalan_number(num - 2))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pattern = re.compile('[aeiou]*ly$', re.IGNORECASE)\n    ly_matches = re.findall(ly_pattern, text)\n    if len(ly_matches) > 0:\n        return ly_matches[0], text.index(ly_matches[0]), len(ly_matches[0])\n    else:\n        return None, None, None\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_matches = re.findall(r'ly$', text)\n    if ly_matches:\n        return ly_matches[0]\n    else:\n        return 'There is no adverb ending with ly'\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'adverb.?ly$',text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # if re.search('\\sly\\s\\w+',text):\n    #     print re.search('\\sly\\s\\w+',text).start()\n    #     print re.search('\\sly\\s\\w+',text).end()\n    #     print re.search('\\sly\\s\\w+',text).span()\n    #     print text\n    #     return re.search('\\sly\\s\\w+',text).group()\n    # else:\n    #     return None\n    text = text.replace('\\n',' ')\n    text = text.replace('  ',' ')\n    text = text.replace('   ',' ')\n    print text\n    result = re.search('\\sly\\s(.+?)\\sly',text)\n    # print result.group()\n    if result:\n        # print result.start()\n        # print result.end()\n        # print result.span()\n        return result.group(),result.start(),result.end()\n    else:\n        return None,None,None\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.search(\"(^|[^ly])ly$\", text)\ndef find_pattern(text):\n    '''\n    Write a function to find all of the matches of the following regular expression in a given string.\n    '''\n    return re.findall(\"\\d+\", text)\ndef find_string_pattern(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef find_string_pattern(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first match of the following regular expression in a given string.\n    '''\n    return re.search(\"\\d+\", text)\ndef get_pos(text):\n    '''\n    Write a function to find the first matc"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #\n    # regex_ly = re.compile(r'ly$')\n    #\n    # if regex_ly.search(text):\n    #     return regex_ly.search(text)\n    # else:\n    #     return 'NONE'\n    #\n    # \n    # print(regex_ly.search(text))\n    #\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if type(text)==str:\n        text=text.split()\n    v=[]\n    for i in range(len(text)):\n        if text[i]=='ly':\n            if text[i-1]=='not':\n                v.append([text[i-1],i-1])\n                v.append([text[i],i])\n    return v\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_ending = re.findall('ly$', text)\n    if ly_ending:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    text = text.replace(\"\\n\", \" \")\n    text = re.sub(r'(.*?)(ly|ly?d)(.*)', r'\\1\\3', text)\n    print text\n    return text\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # check for adverbs ending in ly\n    return re.findall('(^|\\s)ly$', text, flags=re.I)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-1*item[1],item[0]))\n    return [heapq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in items:\n        heapq.heappush(heap,(i[1],i))\n    res=[]\n    for i in range(n):\n        res.append(heapq.heappop(heap)[1])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for key,value in items.iteritems():\n        heapq.heappush(heap,(value,key))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # items=[item1,item2,item3,item4,item5,item6,item7,item8,item9,item10]\n    # n=3\n    return heapq.nlargest(n,items)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key = lambda x: x[1])\ndef longest_word(words):\n    '''\n    Write a function that takes in a list of words, and returns the longest word in the list.\n    '''\n    return max(words,key = len)\ndef longest_word_2(words):\n    '''\n    Write a function that takes in a list of words, and returns the longest word in the list.\n    '''\n    longest = ''\n    for word in words:\n        if len(longest) < len(word):\n            longest = word\n    return longest\ndef best_words(words,n):\n    '''\n    Write a function that takes in a list of words, and returns a list of the n words in the list that are the best words, using the function longest_word_2.\n    '''\n    return longest_word_2(sorted(words,key = len,reverse = True)[:n])\ndef unique_words(words):\n    '''\n    Write a function that takes in a list of words, and returns a new list with all duplicate words removed.\n    '''\n    return list(set(words))\ndef unique_words_2(words):\n    '''\n    Write a function that takes in a list of words, and returns a new list with all duplicate words removed.\n    '''\n    unique_words = []\n    for word in words:\n        if word not in unique_words:\n            unique_words.append(word)\n    return unique_words\ndef longest_word_3(words):\n    '''\n    Write a function that takes in a list of words, and returns the longest word in the list.\n    '''\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest\ndef longest_word_4(words):\n    '''\n    Write a function that takes in a list of words, and returns the longest word in the list.\n    '''\n    return max(words,key = len)\ndef longest_word_5(words):\n    '''\n    Write a function that takes in a list of words, and returns the longest word in the list.\n    '''\n    return sorted(words,key = len,reverse = True)[0]\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_2(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_3(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_4(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_5(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_6(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_7(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_8(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_9(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_10(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_11(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_12(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_13(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_14(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_15(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_16(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_17(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_18(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    for i in range(len(word) // 2):\n        if word[i]!= word[-i - 1]:\n            return False\n    return True\ndef is_palindrome_19(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '''\n    return word == word[::-1]\ndef is_palindrome_20(word):\n    '''\n    Write a function that takes in a word, and returns True if the word is a palindrome, and False if it isn't.\n    '"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in items:\n        heapq.heappush(heap,(-1*i[1],i[0]))\n    count=0\n    while(count<n):\n        val=heapq.heappop(heap)\n        print val\n        count+=1\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # space = n\n    # heap = []\n    # for item in items:\n    #     heapq.heappush(heap,item)\n    #     if len(heap) > space:\n    #         heapq.heappop(heap)\n    # return heap\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    for i in range(n):\n        max=i\n        for j in range(i+1,len(items)):\n            if items[j][1]>items[max][1]:\n                max=j\n        items[max],items[i]=items[i],items[max]\n    return items\ndef nlargest(n, iterable, key=None):\n    if key is None:\n        key = lambda x: x\n    it = iter(iterable)\n    result = sorted(it, key=key, reverse=True)\n    return result[:n]\ndef heapsort(iterable, key=None):\n    if key is None:\n        key = lambda x: x\n    #data = [(key(item), item) for item in iterable]\n    #heapq.heapify(data)\n    return sorted(iterable, key=key)\ndef smallest(n, iterable):\n    return heapsort(iterable, key=lambda x: x[1])[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result=[]\n    for item in items:\n        result.append([item[0],item[1]])\n    result.sort(key=lambda x:x[1])\n    return result[-n:]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    numbers = []\n    items_copy = items[:]\n    for i in range(n):\n        max_index = 0\n        max_value = 0\n        for j in range(len(items_copy)):\n            if items_copy[j] > max_value:\n                max_value = items_copy[j]\n                max_index = j\n        numbers.append(max_value)\n        items_copy.pop(max_index)\n    return numbers\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items3(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items4(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items5(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items6(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items7(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items8(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items9(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items10(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items11(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items12(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items13(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items14(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items15(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items16(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items17(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items18(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items19(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items20(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items21(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_copy = items[:]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items_copy[0])\n        items_copy.pop(0)\n    return heap\ndef expensive_items22(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:len(l)]+l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(0, n):\n        arr.append(l[i])\n    for i in range(n, len(l)):\n        arr.append(l[i])\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    r = [l[i:i+n] for i in range(0, len(l), n)]\n    return r\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l[n-1:]\n    l = l[:n-1]\n    return arr, l\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l):1]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:n+1] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:len(l)]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1]-nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print('difference between max and min: ', max(nums) - min(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = 0\n    min = 0\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n    return max - min\n    \n    \ndef diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n        if nums[i] > max:\n            max = nums[i]\n    return max - min\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    biggest = 0\n    for i in nums:\n        if i > biggest:\n            biggest = i\n    smallest = nums[0]\n    for i in nums:\n        if i < smallest:\n            smallest = i\n    return biggest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    difference = max(nums) - min(nums)\n    return difference\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        a,b = b,a\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            perfect_squares.append(i)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in xrange(a, b + 1):\n        if i * i <= b:\n            squares.append(i * i)\n        else:\n            break\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in xrange(a, b+1):\n        if i**0.5 == int(i**0.5):\n            perfect_squares.append(i**2)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    total = 0\n    while a <= b:\n        if a**0.5 == int(a**0.5):\n            total += int(a**0.5)\n            a = a**0.5\n        else:\n            a += 1\n    return total\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    start = int(a**0.5)\n    end = int(b**0.5)\n    \n    s = []\n    \n    for i in range(start, end+1):\n        if i**2 >= a and i**2 <= b:\n            s.append(i**2)\n    \n    return s\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    if a >= b:\n        return []\n    i = 1\n    while i ** 2 <= b:\n        if i ** 2 >= a:\n            return squares\n        squares.append(i ** 2)\n        i += 1\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list_of_perfect_squares = []\n    for num in range(a, b+1):\n        num_square = num ** 0.5\n        if num_square == int(num_square):\n            list_of_perfect_squares.append(num)\n    return list_of_perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i*i for i in range(int(math.ceil(a)), int(math.floor(b))) if math.sqrt(i*i) % 1 == 0]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    if a % 2 == 0 and b % 2 == 0:\n        if a < b:\n            for num in range(a,b+1,2):\n                squares.append(num*num)\n        else:\n            for num in range(a,b-1,-2):\n                squares.append(num*num)\n        return squares\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=x**2+y**2\n    b=x**2-y**2\n    c=2*x*y\n    d=x**2-y**2\n    return (a,b,c,d)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    theta=cmath.atan(y/x)\n    return (r,theta)\ndef rect_polar(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return (x,y)\ndef rect_to_cart(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    a=x\n    b=y\n    return (a,b)\ndef cart_to_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    a=x\n    b=y\n    return (a,b)\ndef haversine(point1,point2):\n    '''\n    Write a function to compute the great circle distance between two points\n    on the earth (specified in decimal degrees)\n    '''\n    lati1,longi1=rect_polar(*point1)\n    lati2,longi2=rect_polar(*point2)\n    r=6371000\n    d=((lati2-lati1)*cmath.pi/180)*cmath.cos((longi2-longi1)*cmath.pi/180)\n    return r*d\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to compute the great circle distance between two points\n    on the earth (specified in decimal degrees)\n    '''\n    lati1,longi1=rect_polar(x1,y1)\n    lati2,longi2=rect_polar(x2,y2)\n    r=6371000\n    d=((lati2-lati1)*cmath.pi/180)*cmath.cos((longi2-longi1)*cmath.pi/180)\n    return r*d\ndef euclidean(x1,y1,x2,y2):\n    '''\n    Write a function to compute the euclidean distance between two points\n    on the earth (specified in decimal degrees)\n    '''\n    lati1,longi1=rect_polar(x1,y1)\n    lati2,longi2=rect_polar(x2,y2)\n    r=6371000\n    d=((lati2-lati1)*cmath.pi/180)*cmath.cos((longi2-longi1)*cmath.pi/180)\n    return cmath.sqrt(d)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x*x\n    y=y*y\n    return x+y,x-y\n    \ndef polar_to_rect(p,q):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=p/q\n    a=cmath.sqrt(1/r)\n    angle=(a.real+a.imag*1j)*cmath.pi/2\n    return angle.real,angle.imag\n    \ndef quadratic(a,b,c):\n    '''\n    Write a function to solve a quadratic equation\n    '''\n    x1=(-b+cmath.sqrt(b**2-4*a*c))/(2*a)\n    x2=(-b-cmath.sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef find_roots(a,b,c):\n    '''\n    Write a function to solve a quadratic equation\n    '''\n    delta=(b*b)-(4*a*c)\n    if delta<0:\n        return False\n    elif delta==0:\n        return -b/(2*a)\n    else:\n        return (-b+cmath.sqrt(delta))/(2*a),(-b-cmath.sqrt(delta))/(2*a)\n    \ndef first_try(a,b,c):\n    x1=(-b+cmath.sqrt(b**2-4*a*c))/(2*a)\n    x2=(-b-cmath.sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    try:\n        x1=x*math.cos(y)\n        y1=x*math.sin(y)\n    except:\n        print 'Error'\n    return x1,y1\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    return [math.cos(x)*math.sin(y),math.sin(x)*math.sin(y),math.cos(y)]\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=complex(x,y)\n    b=a.real\n    c=a.imag\n    r=int(b)\n    i=int(c)\n    b=b-r\n    c=c-i\n    p=r+i\n    x=p*b\n    y=p*c\n    if i<0:\n        x=-x\n    return x,y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=complex(x,y)\n    b=a.real\n    c=a.imag\n    r=int(b)\n    i=int(c)\n    b=b-r\n    c=c-i\n    p=r+i\n    x=p*b\n    y=p*c\n    if i<0:\n        x=-x\n    return x,y\ndef factorization(n):\n    '''\n    Write a function to factorize a number.\n    '''\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    return factors\ndef smallest_prime_factor(n):\n    '''\n    Write a function to find the smallest prime factor of a number.\n    '''\n    n_factors=factorization(n)\n    i=1\n    while i<=len(n_factors):\n        if n%i==0:\n            if n/i==i:\n                return i\n            else:\n                i=n/i\n        i+=1\ndef is_perfect(n):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    if sum(factorization(n))==n:\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Write a function to check if a number is abundant.\n    '''\n    if sum(factorization(n))>n:\n        return True\n    else:\n        return False\ndef sum_divisors(n):\n    '''\n    Write a function to compute the sum of the divisors of a number.\n    '''\n    divs=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            divs.append(i)\n    return sum(divs)\ndef sum_divisors_pair(n):\n    '''\n    Write a function to compute the sum of the divisors of a number.\n    '''\n    divs=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            divs.append(i)\n    return sum(divs)\ndef is_probable_prime(n):\n    '''\n    Write a function to check if a number is probably prime.\n    '''\n    for i in range(2,n/2):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n%2==0:\n        return False\n    for i in range(3,n):\n        if n%i==0:\n            return False\n    return True\ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is perfect square.\n    '''\n    x=n**0.5\n    if x%1==0:\n        return True\n    return False\ndef is_abundant_perfect_square(n):\n    '''\n    Write a function to check if a number is abundant perfect square.\n    '''\n    if is_perfect_square(n) and is_abundant(n):\n        return True\n    else:\n        return False\ndef divisors(n):\n    '''\n    Write a function to find all the divisors of a number.\n    '''\n    divs=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            divs.append(i)\n    return divs\ndef divisors_sum(n):\n    '''\n    Write a function to find the sum of the divisors of a number.\n    '''\n    divs_sum=0\n    for i in divisors(n):\n        divs_sum+=i\n    return divs_sum\ndef is_perfect_power(n):\n    '''\n    Write a function to check if a number is perfect power.\n    '''\n    sqrt=int(n**0.5)\n    if sqrt**2==n:\n        return True\n    else:\n        return False\ndef is_abundant_perfect_power(n):\n    '''\n    Write a function to check if a number is abundant perfect power.\n    '''\n    if is_perfect_power(n) and is_abundant(n):\n        return True\n    else:\n        return False\ndef is_abundant_sum_divisors(n):\n    '''\n    Write a function to check if a number is abundant sum divisors.\n    '''\n    if sum_divisors(n)>n:\n        return True\n    else:\n        return False\ndef is_abundant_sum_divisors_pair(n):\n    '''\n    Write a function to check if a number is abundant sum divisors.\n    '''\n    if sum_divisors_pair(n)>n:\n        return True\n    else:\n        return False\ndef is_perfect_power_triangular(n):\n    '''\n    Write a function to check if a number is perfect power triangular.\n    '''\n    sqrt=int(n**0.5)\n    if sqrt%2==0:\n        if sqrt**3==n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_perfect_power_square(n):\n    '''\n    Write a function to check if a number is perfect power square.\n    '''\n    sqrt=int(n**0.5)\n    if sqrt**2==n:\n        return True\n    else:\n        return False\ndef is_perfect_power_pentagonal(n):\n    '''\n    Write a function to check if a number is perfect power pentagonal.\n    '''\n    sqrt=int(n**0.5)\n    if sqrt%2==1:\n        if sqrt**3+sqrt==n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_perfect_power_hexagonal(n):\n    '''\n    Write a function to check if a number is perfect power hexagonal.\n    '''\n    sqrt=int(n**0.5)\n    if sqrt%2==1:\n        if sqrt**3+sqrt+1==n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_perfect_power_heptagonal(n):\n    '''\n    Write a function to check if a number is perfect power hexagonal.\n    '''\n    sqrt=int(n**0.5)\n    if sqrt%2==0:\n        if sqrt**3+sqrt+2==n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_perfect_power_octagonal(n):\n    '''\n    Write a function to check if a number is perfect power octagonal.\n    '''\n    sqrt=int(n**0.5)\n    if sqrt%2==0:\n        if sqrt**3+sqrt+3==n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_perfect_power_nonagonal(n):\n    '''\n    Write a function to check if a number is perfect power nonagonal.\n    '''\n    sqrt=int(n**0.5)\n    if sqrt%2==1:\n        if sqrt**3+sqrt+3==n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_perfect_power_decagonal(n):\n    '''\n    Write a function to check if a number is perfect power decagonal.\n    '''\n    sqrt=in"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x + y*y\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    return (x*cmath.cos(y)-y*cmath.sin(x),x*cmath.sin(y)+y*cmath.cos(x))\ndef polar_rect_coords(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    return (cmath.sqrt(x*x+y*y),cmath.atan2(y,x))\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    return (x*cmath.cos(y),y*cmath.sin(x))\ndef rect_polar_coords(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    return (x*cmath.cos(y)+y*cmath.sin(x),-x*cmath.sin(y)+y*cmath.cos(x))\ndef sort_by_z(l):\n    '''\n    Write a function that takes a list of (x,y,z) triples and returns a sorted list of (x,y,z) triples, \n    sorted by z.\n    '''\n    l = sorted(l, key=lambda t: t[2])\n    return l\ndef length(x,y):\n    '''\n    Write a function that takes a point (x,y) and returns the magnitude of the point.\n    '''\n    return cmath.sqrt(x*x+y*y)\ndef magnitude(x,y):\n    '''\n    Write a function that takes a point (x,y) and returns the magnitude of the point.\n    '''\n    return cmath.sqrt(x*x+y*y)\ndef dot_product(x,y):\n    '''\n    Write a function that takes two lists of numbers and returns the dot product of them.\n    '''\n    return sum(a*b for a,b in zip(x,y))\ndef conjugate(x):\n    '''\n    Write a function that takes a complex number (x,y) and returns its conjugate.\n    '''\n    return complex(x.real,x.imag)\ndef complex_conjugate(x):\n    '''\n    Write a function that takes a complex number (x,y) and returns its complex conjugate.\n    '''\n    return complex(x.real,-x.imag)\ndef distance(x,y):\n    '''\n    Write a function that takes two points (x,y) and returns the distance between them.\n    '''\n    return abs(x-y)\ndef distance_squared(x,y):\n    '''\n    Write a function that takes two points (x,y) and returns the distance squared between them.\n    '''\n    return (x-y)*(x-y)\ndef area(poly):\n    '''\n    Write a function that takes a list of (x,y) pairs and returns the area of the triangle formed by them.\n    '''\n    return abs(dot_product(x[0]-x[1],y[0]-y[1])/2)\ndef angle(x,y):\n    '''\n    Write a function that takes two points (x,y) and returns the angle made between them.\n    '''\n    return cmath.phase(complex(x,y))\ndef angle_between(x,y):\n    '''\n    Write a function that takes two points (x,y) and returns the angle made between them.\n    '''\n    return cmath.phase(complex(x,y))\ndef get_average(l):\n    '''\n    Write a function that takes a list of numbers and returns the average of them.\n    '''\n    return sum(l)/float(len(l))\ndef get_sum(l):\n    '''\n    Write a function that takes a list of numbers and returns the sum of them.\n    '''\n    return sum(l)\ndef get_max(l):\n    '''\n    Write a function that takes a list of numbers and returns the maximum of them.\n    '''\n    return max(l)\ndef get_min(l):\n    '''\n    Write a function that takes a list of numbers and returns the minimum of them.\n    '''\n    return min(l)\ndef get_sorted_list(l):\n    '''\n    Write a function that takes a list of numbers and returns a sorted copy of that list.\n    '''\n    return sorted(l)\ndef get_repeated(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the elements of that list repeated n times.\n    '''\n    return [x for x in l for i in range(n)]\ndef get_nth_highest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth highest number in that list.\n    '''\n    return max(l)\ndef get_nth_lowest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth lowest number in that list.\n    '''\n    return min(l)\ndef get_nth_largest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth largest number in that list.\n    '''\n    return max(l)\ndef get_nth_smallest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth smallest number in that list.\n    '''\n    return min(l)\ndef get_nth_smallest_in_list(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth smallest number in that list.\n    '''\n    return min(l)\ndef remove_duplicates(l):\n    '''\n    Write a function that takes a list of numbers and returns a new list with the duplicates removed.\n    '''\n    return list(set(l))\ndef get_nth_smallest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth smallest number in that list.\n    '''\n    return min(l)\ndef get_nth_largest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth largest number in that list.\n    '''\n    return max(l)\ndef get_nth_largest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth largest number in that list.\n    '''\n    return max(l)\ndef get_nth_smallest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth smallest number in that list.\n    '''\n    return min(l)\ndef get_nth_smallest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth smallest number in that list.\n    '''\n    return min(l)\ndef is_sorted(l):\n    '''\n    Write a function that takes a list of numbers and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    return sorted(l) == l\ndef is_permutation(l1,l2):\n    '''\n    Write a function that takes two lists of numbers and returns True if the lists are both permutations of each other and False otherwise.\n    '''\n    return sorted(l1) == sorted(l2)\ndef get_nth_smallest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth smallest number in that list.\n    '''\n    return min(l)\ndef get_nth_smallest_in_list(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth smallest number in that list.\n    '''\n    return min(l)\ndef get_nth_largest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth largest number in that list.\n    '''\n    return max(l)\ndef get_nth_largest(l,n):\n    '''\n    Write a function that takes a list of numbers and returns the nth largest number in that list.\n    ''"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x=x*cos(y)-y*sin(x)\n    rect_y=x*sin(y)+y*cos(x)\n    return (rect_x,rect_y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))\n    return (r[0],r[1])\n"
    }
]