[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup_a = tuple(test_tup1)\n    tup_b = tuple(test_tup2)\n    a_set = set(tup_a)\n    b_set = set(tup_b)\n    common_elements = list(a_set.intersection(b_set))\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element1 in test_tup1:\n        if element1 in test_tup2:\n            common_elements.append(element1)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if not test_tup1 or not test_tup2:\n        return 0\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return len(test_tup1 & test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    first_list = list(test_tup1)\n    second_list = list(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    shared = s1.intersection(s2)\n    return list(shared)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    new_tup1 = tuple(set(test_tup1) & set(test_tup2))\n    new_tup2 = tuple(set(test_tup1) | set(test_tup2))\n    return (new_tup1, new_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        counter = 0\n        while counter < len(test_tup1):\n            if test_tup1[counter] == test_tup2[counter]:\n                print test_tup1[counter]\n            counter += 1\n    else:\n        print \"The two tuples should be the same length.\"\n    return 0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    l1 = set(test_tup1)\n    l2 = set(test_tup2)\n    \n    # Print the elements which are present in both sets\n    if(l1.intersection(l2)):\n        return(list(l1.intersection(l2)))\n    else:\n        return None\n    \n    \n    \ndef test_similar_elements():\n    test_tup1 = (1, 2, 3, 5, 7, 9, 11)\n    test_tup2 = (2, 4, 6, 8, 10, 11)\n    \n    output = similar_elements(test_tup1, test_tup2)\n    expected = [2, 4, 11]\n    assert(expected == output)\n    \n    \n    \nif __name__ == \"__main__\":\n    test_similar_elements()\n    print \"All Tests passed\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i = i + 6\n    return False\ndef prime_factors(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count = 1\n            while n % i == 0:\n                n = n / i\n                count = count + 1\n            return count\n        i = i + 1\n    return n\ndef prime_number_of_digit(n):\n    '''\n    Write a python function to identify the number of digits of a prime number.\n    '''\n    if n == 1:\n        return 1\n    if n <= 3:\n        return 0\n    if n % 2 == 0 or n % 3 == 0:\n        return 1\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return 1\n        i = i + 6\n    return 0\ndef is_palindrome(n):\n    '''\n    Write a python function to check if the given number is a palindrome.\n    '''\n    n = str(n)\n    if n == n[::-1]:\n        return True\n    return False\ndef is_permutation(n1, n2):\n    '''\n    Write a python function to check if the two given numbers are permutations.\n    '''\n    if n1 == n2:\n        return True\n    if n1 > n2:\n        n1, n2 = n2, n1\n    n1 = str(n1)\n    n2 = str(n2)\n    if sorted(n1) == sorted(n2):\n        return True\n    return False\ndef is_pandigital(n, start, stop):\n    '''\n    Write a python function to check if the given number is pandigital.\n    '''\n    n = str(n)\n    if len(n) < stop:\n        return False\n    for i in range(start, stop + 1):\n        if str(i) not in n:\n            return False\n    return True\ndef is_pandigital_permutation(n, start, stop):\n    '''\n    Write a python function to check if the given number is a pandigital permutation.\n    '''\n    n = str(n)\n    if len(n) < stop:\n        return False\n    for i in range(start, stop + 1):\n        if str(i) not in n:\n            return False\n    return True\ndef is_pandigital_product(n, start, stop):\n    '''\n    Write a python function to check if the given number is a pandigital product.\n    '''\n    n = str(n)\n    if len(n) < stop:\n        return False\n    if int(n[start:stop+1]) == 0:\n        return False\n    product = 1\n    for i in range(start, stop + 1):\n        product = product * int(n[i])\n    if int(n) == product:\n        return True\n    return False\ndef is_pandigital_permutation_product(n, start, stop):\n    '''\n    Write a python function to check if the given number is a pandigital permutation product.\n    '''\n    n = str(n)\n    if len(n) < stop:\n        return False\n    if int(n[start:stop+1]) == 0:\n        return False\n    product = 1\n    for i in range(start, stop + 1):\n        product = product * int(n[i])\n    if int(n[start:stop+1]) == product:\n        return True\n    return False\ndef is_super_pandigital(n):\n    '''\n    Write a python function to check if the given number is a super pandigital.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital_permutation(n):\n    '''\n    Write a python function to check if the given number is a super pandigital permutation.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital_permutation(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital_product(n):\n    '''\n    Write a python function to check if the given number is a super pandigital product.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital_product(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital_permutation_product(n):\n    '''\n    Write a python function to check if the given number is a super pandigital permutation product.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital_permutation_product(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital_permutation_product(n):\n    '''\n    Write a python function to check if the given number is a super pandigital permutation product.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital_permutation_product(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital_permutation(n):\n    '''\n    Write a python function to check if the given number is a super pandigital permutation.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital_permutation(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital(n):\n    '''\n    Write a python function to check if the given number is a super pandigital.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital_permutation(n):\n    '''\n    Write a python function to check if the given number is a super pandigital permutation.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital_permutation(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital_permutation_product(n):\n    '''\n    Write a python function to check if the given number is a super pandigital permutation product.\n    '''\n    n = str(n)\n    if len(n) < 10:\n        return False\n    for i in range(10, len(n) + 1):\n        if not is_pandigital_permutation_product(n, 0, i):\n            return False\n    return True\ndef is_super_pandigital_permutation(n):\n    '''\n    Write a python function to check if the given number is a super pandigital permutation.\n    '''\n    n "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef find_factors(n):\n    '''\n    Write a python function to find all factors of a number.\n    '''\n    f = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            f.append(i)\n    f.append(n)\n    return f\ndef sieve(n):\n    '''\n    Write a python function to find the primes in an integer range.\n    '''\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    f = [True for i in range(n)]\n    f[0] = f[1] = False\n    for i in range(int(n**0.5)+1):\n        if f[i]:\n            for j in range(i*i,n,i):\n                f[j] = False\n    return [i for i in range(n) if f[i]]\ndef find_continous_prime_list(n):\n    '''\n    Write a python function to find all continuous prime numbers in an integer range.\n    '''\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n%2 == 0:\n        n += 1\n    f = [True for i in range(n)]\n    f[0] = f[1] = False\n    for i in range(int(n**0.5)+1):\n        if f[i]:\n            for j in range(i*i,n,i):\n                f[j] = False\n    ret = [2]\n    for i in range(3,n,2):\n        if f[i]:\n            ret.append(i)\n    return ret\ndef get_prime_factors(n):\n    '''\n    Write a python function to get prime factors of a number.\n    '''\n    f = []\n    for i in range(2,int(math.sqrt(n))+1):\n        while n%i == 0:\n            f.append(i)\n            n /= i\n    if n > 2:\n        f.append(n)\n    return f\ndef sort_factors(n):\n    '''\n    Write a python function to sort prime factors.\n    '''\n    f = get_prime_factors(n)\n    f.sort()\n    return f\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    return math.sqrt(n) - int(math.sqrt(n)) == 0\ndef get_perfect_square_factors(n):\n    '''\n    Write a python function to find all perfect square numbers in an integer range.\n    '''\n    if is_perfect_square(n):\n        return [n]\n    f = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if is_perfect_square(i) and is_perfect_square(n-i*i):\n            f.append(i)\n            f.append(n-i*i)\n    return f\ndef find_continous_perfect_square_list(n):\n    '''\n    Write a python function to find all continous perfect square numbers in an integer range.\n    '''\n    if is_perfect_square(n):\n        return [n]\n    f = [1]\n    for i in range(2,int(math.sqrt(n))+1):\n        if is_perfect_square(i) and is_perfect_square(n-i*i):\n            f.append(i)\n            f.append(n-i*i)\n    return f\ndef is_primitive_root(a,p):\n    '''\n    Write a python function to check if a number is a primitive root of a prime number.\n    '''\n    if pow(a,p-1,p)!= 1:\n        return False\n    return True\ndef find_primitive_roots(a,p):\n    '''\n    Write a python function to find all primitive roots of a prime number.\n    '''\n    ret = []\n    for i in range(1,p):\n        if is_primitive_root(i,p):\n            if pow(a,i,p) == 1:\n                ret.append(i)\n    return ret\ndef is_cyclic(n,p):\n    '''\n    Write a python function to check if a number is cyclic in a prime number.\n    '''\n    return pow(n,p-1,p)!= 1\ndef find_cyclic_primes(n):\n    '''\n    Write a python function to find all cyclic primes in an integer range.\n    '''\n    f = find_primitive_roots(n,n)\n    ret = []\n    for i in f:\n        if is_cyclic(i,n):\n            ret.append(i)\n    return ret\ndef get_cyclic_prime_factors(n):\n    '''\n    Write a python function to get cyclic prime factors of a number.\n    '''\n    f = []\n    for i in find_primitive_roots(n,n):\n        if is_cyclic(i,n):\n            f.append(i)\n    return f\ndef are_same_cyclic_prime_factors(n,m):\n    '''\n    Write a python function to check if two numbers are cyclic primes having the same prime factors.\n    '''\n    if len(get_primitive_roots(n,n))!= len(get_primitive_roots(m,m)):\n        return False\n    for i in get_primitive_roots(n,n):\n        if i not in get_primitive_roots(m,m):\n            return False\n    return True\ndef find_cyclic_congruence(n,m,p):\n    '''\n    Write a python function to find the cyclic congruence modulo p.\n    '''\n    return pow(n,p-2,p) * m % p\ndef find_cyclic_congruence_equation(a,b,p):\n    '''\n    Write a python function to find the cyclic congruence equation.\n    '''\n    return gcd(a,b) == 1 and 1 == find_cyclic_congruence(a,b,p)\ndef cyclic_congruence_equation(a,b,p):\n    '''\n    Write a python function to find the cyclic congruence equation.\n    '''\n    return a*b % p == 1 and 1 == (a % p) * (b % p) % p\ndef is_cyclic_congruence(n,m,p):\n    '''\n    Write a python function to check if a number is a cyclic congruence modulo p.\n    '''\n    return cyclic_congruence_equation(n,m,p)\ndef get_cyclic_congruence_equation_answers(a,b,p):\n    '''\n    Write a python function to find all cyclic congruence modulo p.\n    '''\n    return [find_cyclic_congruence(a,b,p) for a in range(1,p) for b in range(1,p) if cyclic_congruence_equation(a,b,p)]\ndef get_cyclic_congruence_equation_answers2(a,b,p):\n    '''\n    Write a python function to find all cyclic congruence modulo p.\n    '''\n    return [(x,y) for x in range(1,p) for y in range(1,p) if cyclic_congruence_equation(x,y,p)]\ndef find_cyclic_congruence_equation_answers(n,m,p):\n    '''\n    Write a python function to find all cyclic congruence modulo p.\n    '''\n    return [find_cyclic_congruence(n,m,p) for n in range(1,p) for "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n % 2 == 0:\n        return n == 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 and n!= 2:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 and n!= 2:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_abundant_number(n):\n    '''\n    Write a python function to identify abundant numbers.\n    '''\n    if n <= 0:\n        return False\n    for i in range(1, n):\n        if n % i == 0:\n            return True\n    return False\ndef is_deficient_number(n):\n    '''\n    Write a python function to identify deficient numbers.\n    '''\n    if n <= 0:\n        return False\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_number(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    if n <= 0:\n        return False\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True\ndef sum_of_factors(n):\n    '''\n    Write a python function to identify the sum of the factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            factors += i\n    return factors\ndef sum_of_divisors(n):\n    '''\n    Write a python function to identify the sum of the divisors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            factors += 1\n    return factors\ndef prime_factors(n):\n    '''\n    Write a python function to identify the prime factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_prime(i):\n                factors.append(i)\n    return factors\ndef sum_of_divisors_factors(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_not_prime(i):\n                factors.append(i)\n            divisors.append(i)\n    divisors.append(n)\n    return sum(divisors) + sum(factors)\ndef sum_of_divisors_factors_prime(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            divisors.append(i)\n    divisors.append(n)\n    return sum(divisors) + sum(factors)\ndef sum_of_divisors_factors_abundant(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_abundant_number(i):\n                factors.append(i)\n            divisors.append(i)\n    divisors.append(n)\n    return sum(divisors) + sum(factors)\ndef sum_of_divisors_factors_deficient(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_deficient_number(i):\n                factors.append(i)\n            divisors.append(i)\n    divisors.append(n)\n    return sum(divisors) + sum(factors)\ndef sum_of_divisors_factors_perfect(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_perfect_number(i):\n                factors.append(i)\n            divisors.append(i)\n    divisors.append(n)\n    return sum(divisors) + sum(factors)\ndef sum_of_divisors_factors_perfect_deficient(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_perfect_number(i):\n                factors.append(i)\n            elif is_deficient_number(i):\n                factors.append(i)\n            divisors.append(i)\n    divisors.append(n)\n    return sum(divisors) + sum(factors)\ndef sum_of_divisors_factors_perfect_abundant(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_perfect_number(i):\n                factors.append(i)\n            elif is_abundant_number(i):\n                factors.append(i)\n            divisors.append(i)\n    divisors.append(n)\n    return sum(divisors) + sum(factors)\ndef sum_of_divisors_factors_perfect_deficient_abundant(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_perfect_number(i):\n                factors.append(i)\n            elif is_deficient_number(i):\n                factors.append(i)\n            elif is_abundant_number(i):\n                factors.append(i)\n            divisors.append(i)\n    divisors.append(n)\n    return sum(divisors) + sum(factors)\ndef sum_of_divisors_factors_perfect_deficient_abundant_prime(n):\n    '''\n    Write a python function to identify the sum of divisors and their factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = []\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            elif is_deficient_number(i):\n                factors.append(i"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n > 2 and n % 2 == 0:\n        return False\n    max = math.ceil(math.sqrt(n))\n    for i in range(3, max, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    n = abs(int(n))\n    if n in (0, 1):\n        return False\n    elif n < 4:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n < 9:\n        return True\n    elif n % 3 == 0:\n        return False\n    else:\n        # check for factors by dividing by integers upto sqrt(n)\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    # The Prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        return False\n    \n    if n % 2 == 0:\n        return False\n    \n    if n < 9:\n        return True\n    \n    if n % 3 == 0:\n        return False\n    \n    if n < 27:\n        return True\n    \n    if n % 5 == 0:\n        return False\n    \n    if n % 7 == 0:\n        return False\n    \n    if n % 11 == 0:\n        return False\n    \n    if n % 13 == 0:\n        return False\n    \n    if n % 17 == 0:\n        return False\n    \n    if n % 19 == 0:\n        return False\n    \n    if n % 23 == 0:\n        return False\n    \n    if n % 29 == 0:\n        return False\n    \n    if n % 31 == 0:\n        return False\n    \n    if n % 37 == 0:\n        return False\n    \n    if n % 41 == 0:\n        return False\n    \n    if n % 43 == 0:\n        return False\n    \n    if n % 47 == 0:\n        return False\n    \n    if n % 53 == 0:\n        return False\n    \n    if n % 59 == 0:\n        return False\n    \n    if n % 61 == 0:\n        return False\n    \n    if n % 67 == 0:\n        return False\n    \n    if n % 71 == 0:\n        return False\n    \n    if n % 73 == 0:\n        return False\n    \n    if n % 79 == 0:\n        return False\n    \n    if n % 83 == 0:\n        return False\n    \n    if n % 89 == 0:\n        return False\n    \n    if n % 97 == 0:\n        return False\n    \n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n    hq.sort(reverse=True)\n    return hq\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n    hq.sort(reverse=False)\n    return hq\ndef bin_search(arr,val,comp):\n    '''\n    Write a function that implements the binary search algorithm using iteration\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        mid = len(arr)//2\n        if comp(arr[mid],val):\n            return bin_search(arr[:mid],val,comp)\n        else:\n            return bin_search(arr[mid+1:],val,comp)\ndef bin_search_r(arr,val,comp):\n    '''\n    Write a function that implements the binary search algorithm using recursion\n    '''\n    if len(arr) == 0:\n        return False\n    mid = len(arr)//2\n    if comp(arr[mid],val):\n        return bin_search_r(arr[:mid],val,comp)\n    else:\n        return bin_search_r(arr[mid+1:],val,comp)\ndef rotate_array(arr):\n    '''\n    Write a function to rotate an array of numbers\n    '''\n    arr.insert(0,arr.pop())\n    return arr\ndef permute_array(arr):\n    '''\n    Write a function to permute an array of numbers\n    '''\n    if len(arr) == 1:\n        return [arr]\n    else:\n        result = []\n        for i in range(len(arr)):\n            result.extend([arr[i]+arr[j] for j in range(i,len(arr))])\n        return result\ndef max_sub_array(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number)\n    which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        curr_max = arr[0]\n        max_sum = arr[0]\n        for i in range(1,len(arr)):\n            curr_max = max(arr[i],curr_max+arr[i])\n            max_sum = max(max_sum,curr_max)\n        return max_sum\ndef max_sub_array_dp(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number)\n    which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        curr_max = arr[0]\n        max_sum = arr[0]\n        for i in range(1,len(arr)):\n            curr_max = max(arr[i],curr_max+arr[i])\n            max_sum = max(max_sum,curr_max)\n        return max_sum\ndef max_sub_array_brute(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number)\n    which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        curr_max = arr[0]\n        max_sum = arr[0]\n        for i in range(1,len(arr)):\n            if arr[i] > arr[i]+curr_max:\n                curr_max = arr[i]\n            else:\n                curr_max = arr[i]+curr_max\n            max_sum = max(max_sum,curr_max)\n        return max_sum\ndef find_pos(arr,val):\n    '''\n    Write a function to find the position of an integer in an array, given that the array is sorted in ascending order.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        return bin_search(arr,val,lambda x,y:x<y)\ndef find_pos_r(arr,val):\n    '''\n    Write a function to find the position of an integer in an array, given that the array is sorted in ascending order.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        return bin_search_r(arr,val,lambda x,y:x<y)\ndef find_pos_brute(arr,val):\n    '''\n    Write a function to find the position of an integer in an array, given that the array is sorted in ascending order.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        curr_pos = 0\n        for i in range(len(arr)):\n            if arr[i] == val:\n                return i\n            elif arr[i] > val:\n                return curr_pos\n            else:\n                curr_pos += 1\ndef max_sub_array_brute(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number)\n    which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        curr_max = arr[0]\n        max_sum = arr[0]\n        for i in range(1,len(arr)):\n            if arr[i] > arr[i]+curr_max:\n                curr_max = arr[i]\n            else:\n                curr_max = arr[i]+curr_max\n            max_sum = max(max_sum,curr_max)\n        return max_sum\ndef max_sub_array_dp(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number)\n    which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        curr_max = arr[0]\n        max_sum = arr[0]\n        for i in range(1,len(arr)):\n            if arr[i] > arr[i]+curr_max:\n                curr_max = arr[i]\n            else:\n                curr_max = arr[i]+curr_max\n            max_sum = max(max_sum,curr_max)\n        return max_sum\ndef max_sub_array_dp_optimized(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number)\n    which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        max_ending_here = [0 for _ in range(len(arr))]\n        max_ending_here[0] = arr[0]\n        for i in range(1,len(arr)):\n            max_ending_here[i] = max(arr[i],max_ending_here[i-1]+arr[i])\n        max_so_far = max_ending_here[0]\n        for i in range(1,len(max_ending_here)):\n            max_so_far = max(max_so_far,max_ending_here[i])\n        return max_so_far\ndef max_sub_array_brute(arr):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number)\n    which has the largest sum.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        curr_max = arr[0]\n        max_sum = arr[0]\n        for i in range(1,len(arr)):\n            if arr[i] > arr[i]+curr_max:\n                curr_max = arr[i]\n            else:\n                curr_max = arr[i]+curr_max\n            max_sum = max(max_sum,curr_max)\n        return max_sum\ndef find_po"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums1=[]\n    nums.sort()\n    nums1.append(nums[len(nums)-n])\n    return nums1\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    list_length = len(nums)\n    if list_length < n:\n        return None\n    else:\n        return hq.nlargest(n, nums)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    list_length = len(nums)\n    if list_length < n:\n        return None\n    else:\n        return hq.nsmallest(n, nums)\ndef merge_sorted(arr1, arr2):\n    '''\n    Write a function that merges two sorted integer arrays into one sorted array.\n    '''\n    return sorted(arr1 + arr2)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    maxHeap = []\n    for i in range(n):\n        hq.heappush(maxHeap,(nums[i]))\n    for i in range(n,len(nums)):\n        if maxHeap[0]<nums[i]:\n            hq.heappop(maxHeap)\n            hq.heappush(maxHeap,nums[i])\n    return maxHeap\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(0,n):\n        hq.append(nums[i])\n    while n > 1:\n        for i in range(0,n):\n            if hq[i] > hq[0]:\n                temp = hq[i]\n                hq[i] = hq[0]\n                hq[0] = temp\n        n = n-1\n    print(hq[n-1])\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    maxheap=[]\n    for i in xrange(n):\n        hq.heappush(maxheap,-nums[i])\n    for i in xrange(n,len(nums)):\n        hq.heappushpop(maxheap,-nums[i])\n    return [-item for item in maxheap]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in xrange(len(nums)):\n        hq.append(nums[i])\n        if len(hq)>n:\n            hq.remove(hq[0])\n    return hq\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in xrange(len(nums)):\n        hq.append(nums[i])\n        if len(hq)>n:\n            hq.remove(hq[0])\n    return hq\ndef main():\n    n = 10\n    arr = [3,4,5,1,2,6,8,9,10,11]\n    print heap_queue_largest(arr,n)\n    print heap_queue_smallest(arr,n)\nif __name__=='__main__':\n    main()\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,nums[i])\n    return list(reversed(max_heap))\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    return hq\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    return hq\ndef heap_remove_largest(nums,n):\n    '''\n    Write a function to remove the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    for i in range(n):\n        hq.pop()\n    return hq\ndef heap_remove_smallest(nums,n):\n    '''\n    Write a function to remove the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    for i in range(n):\n        hq.pop(0)\n    return hq\ndef heap_peek_largest(nums,n):\n    '''\n    Write a function to peek the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    return hq[0]\ndef heap_peek_smallest(nums,n):\n    '''\n    Write a function to peek the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    return hq[0]\ndef heap_remove_largest(nums,n):\n    '''\n    Write a function to remove the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    for i in range(n):\n        hq.pop()\n    return hq\ndef heap_remove_smallest(nums,n):\n    '''\n    Write a function to remove the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    for i in range(n):\n        hq.pop(0)\n    return hq\ndef heap_peek_largest(nums,n):\n    '''\n    Write a function to peek the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    return hq[0]\ndef heap_peek_smallest(nums,n):\n    '''\n    Write a function to peek the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    return hq[0]\ndef heap_build_largest(nums,n):\n    '''\n    Write a function to build a heap from a given list of numbers, return the heap in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    return hq\ndef heap_build_smallest(nums,n):\n    '''\n    Write a function to build a heap from a given list of numbers, return the heap in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    return hq\ndef heap_sort_largest(nums,n):\n    '''\n    Write a function to sort a given list of numbers in descending order, using a max heap.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    return hq\ndef heap_sort_smallest(nums,n):\n    '''\n    Write a function to sort a given list of numbers in ascending order, using a min heap.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    return hq\ndef heap_sort_sift_down_largest(nums,n):\n    '''\n    Write a function to sort a given list of numbers in descending order, using a max heap, where items less than the parent node are sifted down.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    for i in range(n,0,-1):\n        for j in range(i-1,0,-1):\n            if hq[j] < hq[j+1]:\n                hq[j],hq[j+1] = hq[j+1],hq[j]\n    return hq\ndef heap_sort_sift_down_smallest(nums,n):\n    '''\n    Write a function to sort a given list of numbers in ascending order, using a min heap, where items less than the parent node are sifted down.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    for i in range(n,0,-1):\n        for j in range(i-1,0,-1):\n            if hq[j] > hq[j+1]:\n                hq[j],hq[j+1] = hq[j+1],hq[j]\n    return hq\ndef heap_sort_sift_up_largest(nums,n):\n    '''\n    Write a function to sort a given list of numbers in descending order, using a max heap, where items greater than the parent node are sifted up.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    for i in range(n):\n        for j in range(i,n,1):\n            if hq[i] < hq[j]:\n                hq[i],hq[j] = hq[j],hq[i]\n    return hq\ndef heap_sort_sift_up_smallest(nums,n):\n    '''\n    Write a function to sort a given list of numbers in ascending order, using a min heap, where items greater than the parent node are sifted up.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort()\n    for i in range(n):\n        for j in range(i,n,1):\n            if hq[i] > hq[j]:\n                hq[i],hq[j] = hq[j],hq[i]\n    return hq\ndef heap_sort_build_max_heap(nums,n):\n    '''\n    Write a function to sort a given list of numbers in descending order, using a max heap.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        hq.sort(reverse=True)\n    for i in range(n,0,-1):\n        for j i"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return True\n    if x==1:\n        return False\n    if (x&(x-1))==0:\n        return True\n    return False\ndef All_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return [0]\n    if x==1:\n        return [1]\n    if (x&(x-1))==0:\n        return [0,x]\n    return [x]\ndef Select_Power_Of_Two (x):\n    '''\n    Write a python function to return the maximum power of two that is smaller than or equal to the given integer.\n    '''\n    if x==0:\n        return 0\n    if x==1:\n        return 1\n    while (x&(x-1))!=0:\n        x=x&(x-1)\n    return x\ndef Power_Of_Two_List (x):\n    '''\n    Write a python function to return the maximum power of two that is smaller than or equal to the given integer.\n    '''\n    if x==0:\n        return [0]\n    if x==1:\n        return [1]\n    p2=[x]\n    while (x&(x-1))!=0:\n        p2.append(x&(x-1))\n        x=x&(x-1)\n    return p2\ndef Factorial (x):\n    '''\n    Write a python function to compute the factorial of an integer x.\n    '''\n    if x==0:\n        return 1\n    if x==1:\n        return x\n    return x*Factorial(x-1)\ndef Print_From_To (a,b):\n    '''\n    Write a python function to print the numbers from a to b-1 in ascending order.\n    '''\n    for i in range(a,b):\n        print(i)\ndef Binary_Search (a, x):\n    '''\n    Write a python function to return the position of a given integer in a sorted array a.\n    '''\n    left=0\n    right=len(a)-1\n    while left<=right:\n        mid=(left+right)//2\n        if a[mid]==x:\n            return mid\n        elif a[mid]>x:\n            right=mid-1\n        else:\n            left=mid+1\n    return -1\ndef Reverse_Print (a,start,end):\n    '''\n    Write a python function to reverse the order of the elements in a list a between index start and end(both inclusive).\n    '''\n    if start>=end:\n        return\n    a[start],a[end]=a[end],a[start]\n    Reverse_Print(a,start+1,end-1)\ndef Python_Power_of_2 (x):\n    '''\n    Write a python function to return the position of a given integer in a sorted array a.\n    '''\n    return (x&-x)\ndef Sum_of_An_Array (a,b):\n    '''\n    Write a python function to return the sum of two arrays.\n    '''\n    return a+b\ndef Sum_of_An_Array_Recursive (a,b,c,d):\n    '''\n    Write a python function to return the sum of two arrays.\n    '''\n    if c==0:\n        return a[c]\n    if d==0:\n        return b[d]\n    return a[c]+b[d]\ndef Sum_of_Two_Arrays (a,b):\n    '''\n    Write a python function to return the sum of two arrays.\n    '''\n    i=len(a)\n    j=len(b)\n    if i>j:\n        return Sum_of_Two_Arrays(b,a)\n    carry=0\n    s=[]\n    for k in range(i):\n        x=a[i-1-k]+b[j-1-k]+carry\n        s.append(x%10)\n        carry=x//10\n    if carry!=0:\n        s.append(carry)\n    return s[::-1]\ndef Sum_of_Two_Arrays_Recursive (a,b,c,d):\n    '''\n    Write a python function to return the sum of two arrays.\n    '''\n    i=len(a)\n    j=len(b)\n    if i>j:\n        return Sum_of_Two_Arrays_Recursive(b,a,c,d)\n    carry=0\n    s=[]\n    for k in range(i):\n        x=a[i-1-k]+b[j-1-k]+carry\n        s.append(x%10)\n        carry=x//10\n    if carry!=0:\n        s.append(carry)\n    return s[::-1]\ndef Find_An_Element (a,x):\n    '''\n    Write a python function to return the position of a given integer in a sorted array a.\n    '''\n    left=0\n    right=len(a)-1\n    while left<=right:\n        mid=(left+right)//2\n        if a[mid]==x:\n            return mid\n        elif a[mid]>x:\n            right=mid-1\n        else:\n            left=mid+1\n    return -1\ndef Bubble_Sort (a):\n    '''\n    Write a python function to sort a list of numbers using bubble sort.\n    '''\n    for i in range(len(a)-1,0,-1):\n        for j in range(i):\n            if a[j]>a[j+1]:\n                a[j],a[j+1]=a[j+1],a[j]\ndef Bubble_Sort_Recursive (a,i):\n    '''\n    Write a python function to sort a list of numbers using bubble sort.\n    '''\n    if i==len(a)-1:\n        return\n    for j in range(i,len(a)-1):\n        if a[j]>a[j+1]:\n            a[j],a[j+1]=a[j+1],a[j]\n    Bubble_Sort_Recursive(a,i+1)\ndef Insertion_Sort (a):\n    '''\n    Write a python function to sort a list of numbers using insertion sort.\n    '''\n    for i in range(1,len(a)):\n        key=a[i]\n        j=i-1\n        while j>=0 and a[j]>key:\n            a[j+1]=a[j]\n            j=j-1\n        a[j+1]=key\ndef Insertion_Sort_Recursive (a,i):\n    '''\n    Write a python function to sort a list of numbers using insertion sort.\n    '''\n    if i==0:\n        return\n    key=a[i]\n    j=i-1\n    while j>=0 and a[j]>key:\n        a[j+1]=a[j]\n        j=j-1\n    a[j+1]=key\ndef Selection_Sort (a):\n    '''\n    Write a python function to sort a list of numbers using selection sort.\n    '''\n    for i in range(len(a)):\n        min=i\n        for j in range(i+1,len(a)):\n            if a[j]<a[min]:\n                min=j\n        a[i],a[min]=a[min],a[i]\ndef Selection_Sort_Recursive (a,i):\n    '''\n    Write a python function to sort a list of numbers using selection sort.\n    '''\n    if i==len(a)-1:\n        return\n    min=i\n    for j in range(i+1,len(a)):\n        if a[j]<a[min]:\n            min=j\n    a[i],a[min]=a[min],a[i]\n    Selection_Sort_Recursive(a,i+1)\ndef Shell_Sort (a):\n    '''\n    Write a python function to sort a list of numbers using shell sort.\n    '''\n    gap=1\n    while gap<len(a)/"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x!= 0 and (x & (x - 1))) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x ^ 1).count('1') == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x&(x-1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\ndef is_Power_Of_Two_Solution(x, y):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #import pdb\n    #pdb.set_trace()\n    return x & (y - 1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x&(x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n    \ndef is_Power_Of_Two_Sum (x,y): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x^y)&(x^y-1) == 0:\n        print \"Yes\"\n    else:\n        print \"No\"\n    \ndef is_Power_Of_Two_Append (x,y): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    a = bin(x)\n    b = bin(y)\n    a = a[2:]\n    b = b[2:]\n    a = list(a)\n    b = list(b)\n    \n    a.append(\"1\")\n    b.append(\"1\")\n    \n    a = \"\".join(a)\n    b = \"\".join(b)\n    \n    if a == b:\n        print \"Yes\"\n    else:\n        print \"No\"\n    \ndef Sum_Append_Is_Power_Of_Two_Append (x,y,z): \n    '''\n    Write a python function to check whether the three numbers differ at one bit position only or not.\n    '''\n    a = bin(x)\n    b = bin(y)\n    c = bin(z)\n    a = a[2:]\n    b = b[2:]\n    c = c[2:]\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    \n    a.append(\"1\")\n    b.append(\"1\")\n    c.append(\"1\")\n    \n    a = \"\".join(a)\n    b = \"\".join(b)\n    c = \"\".join(c)\n    \n    if a == b == c:\n        print \"Yes\"\n    else:\n        print \"No\"\n    \ndef Sum_Append_Is_Power_Of_Two_And_Sum_Is_Power_Of_Two_Sum (x,y,z): \n    '''\n    Write a python function to check whether the three numbers differ at one bit position only or not.\n    '''\n    a = bin(x)\n    b = bin(y)\n    c = bin(z)\n    a = a[2:]\n    b = b[2:]\n    c = c[2:]\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    \n    a.append(\"1\")\n    b.append(\"1\")\n    c.append(\"1\")\n    \n    a = \"\".join(a)\n    b = \"\".join(b)\n    c = \"\".join(c)\n    \n    if a == b == c:\n        print \"Yes\"\n    else:\n        print \"No\"\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_ = []\n    for m in re.finditer(r'\\w{4,}', text):\n        list_.append(m.group())\n    return list_\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern=re.compile(r'[^a-zA-Z]+')\n    re_str=pattern.findall(text)\n    return re_str\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in text:\n        if len(word)>4:\n            print(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    result = re.findall(pattern,text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    all_words = pattern.findall(text)\n    print all_words\n    return all_words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.split(' ')\n    new = []\n    for word in text:\n        if len(word) >= 4:\n            new.append(word)\n    return new\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    return re.findall(r'\\b[a-zA-Z]+[a-zA-Z]{3,}\\b', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = []\n    for word in text.split():\n        if len(word) >= 4:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in re.findall(r'\\w{4,}', text):\n        print(word)\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in re.findall(r'\\w{4,}', text):\n        if len(word) < 5:\n            continue\n        else:\n            print(word)\ndef find_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in re.findall(r'\\w{4,}', text):\n        if len(word) > 5:\n            print(word)\ndef find_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in re.findall(r'\\w{4,}', text):\n        if len(word) > 5:\n            print(word)\ndef find_char_or_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in re.findall(r'\\w{4,}', text):\n        if len(word) > 5:\n            print(word)\ndef find_char_or_words_2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in re.findall(r'\\w{4,}', text):\n        if len(word) > 5:\n            yield word\ndef find_all_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in re.findall(r'\\w{4,}', text):\n        if len(word) > 5:\n            yield word\ndef find_all_words_2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for word in re.findall(r'\\w{4,}', text):\n        if len(word) > 5:\n            yield word\ndef test_find_char_long():\n    assert(find_char_long('Hello, I am a good boy.') == ['a', 'boy'])\n    assert(find_char_long('Hello, I am a good boy!') == ['a', 'boy'])\n    assert(find_char_long('Hello, I am a good boy!') == ['a', 'boy'])\n    assert(find_char_long('Hello, I am a good boy!') == ['a', 'boy'])\n    assert(find_char_long('Hello, I am a good boy!') == ['a', 'boy'])\ndef test_find_char_short():\n    assert(find_char_short('Hello, I am a good boy.') == ['a', 'boy'])\n    assert(find_char_short('Hello, I am a good boy!') == ['a', 'boy'])\n    assert(find_char_short('Hello, I am a good boy!') == ['a', 'boy'])\n    assert(find_char_short('Hello, I am a good boy!') == ['a', 'boy'])\n    assert(find_char_short('Hello, I am a good boy!') == ['a', 'boy'])\ndef test_find_char():\n    assert(find_char('Hello, I am a good boy.') == ['a'])\n    assert(find_char('Hello, I am a good boy!') == ['a'])\n    assert(find_char('Hello, I am a good boy!') == ['a'])\n    assert(find_char('Hello, I am a good boy!') == ['a'])\n    assert(find_char('Hello, I am a good boy!') == ['a'])\ndef test_find_words():\n    assert(find_words('Hello, I am a good boy.') == ['boy'])\n    assert(find_words('Hello, I am a good boy!') == ['boy'])\n    assert(find_words('Hello, I am a good boy!') == ['boy'])\n    assert(find_words('Hello, I am a good boy!') == ['boy'])\n    assert(find_words('Hello, I am a good boy!') == ['boy'])\ndef test_find_char_or_words():\n    assert(find_char_or_words('Hello, I am a good boy.') == ['boy'])\n    assert(find_char_or_words('Hello, I am a good boy!') == ['boy'])\n    assert(find_char_or_words('Hello, I am a good boy!') == ['boy'])\n    assert(find_char_or_words('Hello, I am a good boy!') == ['boy'])\n    assert(find_char_or_words('Hello, I am a good boy!') == ['boy'])\ndef test_find_char_or_words_2():\n    assert(list(find_char_or_words_2('Hello, I am a good boy.')) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\ndef test_find_all_words():\n    assert(list(find_all_words('Hello, I am a good boy.')) == ['boy'])\n    assert(list(find_all_words('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_all_words('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_all_words('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_all_words('Hello, I am a good boy!') == ['boy']) == ['boy'])\ndef test_find_all_words_2():\n    assert(list(find_all_words_2('Hello, I am a good boy.')) == ['boy'])\n    assert(list(find_all_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_all_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_all_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_all_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\ndef test_find_char_or_words_3():\n    assert(list(find_char_or_words_2('Hello, I am a good boy.')) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])\ndef test_find_char_or_words_4():\n    assert(list(find_char_or_words_2('Hello, I am a good boy.')) == ['boy'])\n    assert(list(find_char_or_words_2('Hello, I am a good boy!') == ['boy']) == ['boy'])"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n*n)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return map(lambda x: x * x, nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x * x for x in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def is_rotation(str1, str2):\n        return str2 in str1+str1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if(str[i:] == str[i:][::-1]):\n            count += 1\n    if(count==0):\n        return -1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # [2,3,1,3,1,3]\n    n = len(str) \n    l = len(str) \n    for i in range(1, l): \n        if str[:i] == str[i:i+l-i]: \n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Finding the no of rotations\n    no_rot = 0\n    for i in range(1, len(str)):\n        if str[i:] == str[i:][::-1]:\n            no_rot += 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    elif len(str) == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    else:\n        for i in range(1, len(str)):\n            # We will return the minimum number of rotations of the string\n            # between the first char and the last char.\n            # If the string is \"ABCDE\" then the rotations of the string is \n            # [0, 1, 2, 3, 4]\n            # [0, 2, 3, 4, 5]\n            # [1, 2, 3, 4, 5]\n            # [2, 3, 4, 5, 0]\n            # [3, 4, 5, 0, 1]\n            # [4, 5, 0, 1, 2]\n            # [5, 0, 1, 2, 3]\n            if str[i] == str[0]:\n                return i\n            else:\n                # find the minimum rotations required from the first char to the last char\n                rotations = find_Rotations(str[i:])\n                if rotations == 0:\n                    return 0\n                else:\n                    return rotations + 1\n    \nstr = 'ABCDE'\nprint find_Rotations(str)"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    len_str = len(str)\n    if len_str < 2:\n        return 0\n    mid = len_str/2\n    str1 = str[mid:]+str[:mid]\n    l = min(len(str1),len(str))\n    if len(str1)!= len(str):\n        return find_Rotations(str1)\n    if str1 == str:\n        return 0\n    for i in xrange(l):\n        if str1[i]!= str[i]:\n            return i\n    return l\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    len_str = len(str)\n    len_substring = len_str\n    rotations = 0\n    while len_substring!= 0:\n        if str[:len_substring] == str[len_substring:]:\n            rotations += 1\n        len_substring -= 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_min_rotations(str):\n        if len(str) <= 1:\n            return 0\n        last_elem = str[0]\n        str = str[1:]\n        count = 0\n        temp = 0\n        for elem in str:\n            if elem == last_elem:\n                count = count + 1\n            else:\n                if count == 1:\n                    temp = temp + 1\n                else:\n                    return count\n                last_elem = elem\n                count = 1\n        if count == 1:\n            return temp + 1\n        else:\n            return count\n    return find_min_rotations(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Step 1: find the string length\n    str_len = len(str)\n    #Step 2: find the substring length\n    sub_len = len(str) // 2\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return 0\n    elif len(str) == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    else:\n        # print(str[0:len(str)//2], str[len(str)//2:])\n        if str[0:len(str)//2] == str[len(str)//2:]:\n            return 0\n        else:\n            return 1 + find_Rotations(str[0:len(str)//2])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (ch in s):\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', 1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch,\"\")\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\").replace(ch.lower(),\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = s.find(ch)\n    s = s.replace(s[i:i+len(ch)], \"\")\n    i = s.rfind(ch)\n    s = s.replace(s[i:i+len(ch)], \"\")\n    return s\ndef remove_Occ_2(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(s[s.find(ch):s.rfind(ch)+len(ch)], \"\")\ndef remove_Occ_3(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\ndef lcs(s,t,n,m):\n    '''\n    Write a python function to find the longest common substring between two strings.\n    '''\n    if n==0 or m==0:\n        return \"\"\n    if s[n-1]==t[m-1]:\n        return s[n-1]+lcs(s,t,n-1,m-1)\n    else:\n        return max(lcs(s,t,n-1,m),lcs(s,t,n,m-1),key=len)\ndef lcs_2(s,t,n,m):\n    '''\n    Write a python function to find the longest common substring between two strings.\n    '''\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    res = \"\"\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if s[i-1]==t[j-1]:\n                dp[i][j]=1+dp[i-1][j-1]\n                if dp[i][j]>len(res):\n                    res=s[i-1]+res\n            else:\n                dp[i][j]=0\n    return res\ndef lcs_3(s,t,n,m):\n    '''\n    Write a python function to find the longest common substring between two strings.\n    '''\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    res = \"\"\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if s[i-1]==t[j-1]:\n                dp[i][j]=1+dp[i-1][j-1]\n                if dp[i][j]>len(res):\n                    res=s[i-1]+res\n            else:\n                dp[i][j]=0\n    return res\ndef floyd_warshall(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_2(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_3(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_4(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_5(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_6(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_7(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_8(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_9(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_10(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_11(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\ndef floyd_warshall_12(g,n):\n    '''\n    Write a python function to find the shortest-path from source to all other vertices in the graph.\n    '''\n    d = g.copy()\n    for k in range(n):\n        for i in range(n):\n            for j in rang"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    elif ch in s:\n        return s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'',1)\n    s = s.replace(ch,'',1)\n    return s\ndef translate(s): \n    '''\n    Write a python function to translate a given string by removing all vowels from a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    for ch in vowels: \n        s = remove_Occ(s,ch)\n    return s\ndef remove_punc(s): \n    '''\n    Write a python function to remove punctuation from a string.\n    '''\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for ch in punctuations: \n        s = s.replace(ch,' ')\n    return s\ndef remove_blank(s): \n    '''\n    Write a python function to remove blank spaces from a string.\n    '''\n    s = s.replace(' ','')\n    return s\ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels present in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for ch in vowels: \n        if ch in s: \n            count += 1\n    return count\ndef remove_numbers(s): \n    '''\n    Write a python function to remove numbers from a string.\n    '''\n    numbers = ['1','2','3','4','5','6','7','8','9','0']\n    for ch in numbers: \n        s = s.replace(ch,'')\n    return s\ndef reverse_string(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\ndef sum_digits(s): \n    '''\n    Write a python function to sum up all the digits in a string.\n    '''\n    digit = ['0','1','2','3','4','5','6','7','8','9']\n    count = 0\n    for ch in s: \n        if ch in digit: \n            count += int(ch)\n    return count\ndef group_anagrams(s): \n    '''\n    Write a python function to group anagrams together.\n    '''\n    s = sorted(s)\n    res = []\n    temp = []\n    for ch in s: \n        temp.append(ch)\n        if ch not in res: \n            res.append(ch)\n    for ch in temp: \n        res.append(''.join(temp))\n    return res\ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels present in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for ch in s: \n        if ch in vowels: \n            count += 1\n    return count\ndef remove_punc(s): \n    '''\n    Write a python function to remove punctuation from a string.\n    '''\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for ch in punctuations: \n        s = s.replace(ch,' ')\n    return s\ndef remove_blank(s): \n    '''\n    Write a python function to remove blank spaces from a string.\n    '''\n    s = s.replace(' ','')\n    return s\ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels present in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for ch in s: \n        if ch in vowels: \n            count += 1\n    return count\ndef remove_numbers(s): \n    '''\n    Write a python function to remove numbers from a string.\n    '''\n    numbers = ['1','2','3','4','5','6','7','8','9','0']\n    for ch in numbers: \n        s = s.replace(ch,'')\n    return s\ndef reverse_string(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\ndef sum_digits(s): \n    '''\n    Write a python function to sum up all the digits in a string.\n    '''\n    digit = ['0','1','2','3','4','5','6','7','8','9']\n    count = 0\n    for ch in s: \n        if ch in digit: \n            count += int(ch)\n    return count\ndef group_anagrams(s): \n    '''\n    Write a python function to group anagrams together.\n    '''\n    s = sorted(s)\n    res = []\n    temp = []\n    for ch in s: \n        temp.append(ch)\n        if ch not in res: \n            res.append(ch)\n    for ch in temp: \n        res.append(''.join(temp))\n    return res\ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels present in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for ch in s: \n        if ch in vowels: \n            count += 1\n    return count\ndef remove_punc(s): \n    '''\n    Write a python function to remove punctuation from a string.\n    '''\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for ch in punctuations: \n        s = s.replace(ch,' ')\n    return s\ndef remove_blank(s): \n    '''\n    Write a python function to remove blank spaces from a string.\n    '''\n    s = s.replace(' ','')\n    return s\ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels present in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for ch in s: \n        if ch in vowels: \n            count += 1\n    return count\ndef remove_numbers(s): \n    '''\n    Write a python function to remove numbers from a string.\n    '''\n    numbers = ['1','2','3','4','5','6','7','8','9','0']\n    for ch in numbers: \n        s = s.replace(ch,'')\n    return s\ndef reverse_string(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\ndef sum_digits(s): \n    '''\n    Write a python function to sum up all the digits in a string.\n    '''\n    digit = ['0','1','2','3','4','5','6','7','8','9']\n    count = 0\n    for ch in s: \n        if ch in digit: \n            count += int(ch)\n    return count\ndef group_anagrams(s): \n    '''\n    Write a python function to group anagrams together.\n    '''\n    s = sorted(s)\n    res = []\n    temp = []\n    for ch in s: \n        temp.append(ch)\n        if ch not in res: \n            res.append(ch)\n    for ch in temp: \n        res.append(''.join(temp))\n    return res\ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels present in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for ch in s: \n        if ch in vowels: \n            count += 1\n    return count\ndef remove_punc(s): \n    '''\n    Write a python function to remove punctuation from a string.\n    '''\n    punctuations = '''!()"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch,\"\",1).replace(ch,\"\",1)\n    else:\n        return s\n    \n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)].rstrip(ch)+s[s.rfind(ch):].rstrip(ch)\n    #return s[:s.find(ch)].rstrip(ch)+s[s.rfind(ch)+1:].rstrip(ch)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M,key = lambda x: sum(x))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # M = [ [1,3,5,7],\n    #        [2,6,8,9],\n    #        [4,10,11,13],\n    #        [12,14,15,17] ]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    cols = len(M[0])\n    rows = len(M)\n    sorted_matrix = [[0 for x in range(cols)] for y in range(rows)]\n    total_sum = [0 for x in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            total_sum[i] += M[i][j]\n            sorted_matrix[i][j] = M[i][j]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        min_index = i\n        for j in range(i,len(M)):\n            if sum(M[i]) > sum(M[j]):\n                min_index = j\n        if min_index!= i:\n            M[i],M[min_index] = M[min_index],M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if sum(M[i])>sum(M[j]):\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n    return M\ndef print_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            print M[i][j],\n        print\n    print\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sum_list = []\n    for i in range(len(M)):\n        row_sum_list.append(sum(M[i]))\n    indices = []\n    for i in range(len(row_sum_list)):\n        indices.append(row_sum_list.index(min(row_sum_list)))\n        row_sum_list[row_sum_list.index(min(row_sum_list))] = max(row_sum_list) + 1\n    for i in range(len(indices)):\n        row_sum_list[indices[i]] = max(row_sum_list) + 1\n    M2 = []\n    for i in range(len(M)):\n        M2.append([0]*len(M[0]))\n    for i in range(len(indices)):\n        for j in range(len(M[0])):\n            M2[indices[i]][j] = M[i][j]\n    return M2\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Time: O(n^2)\n    # Space: O(n)\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                if M[i][j] > M[j][i]:\n                    M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # use an auxillary array to store sum of each row\n    row_sums = []\n    for i in range(len(M)):\n        row_sums.append(sum(M[i]))\n    # use bubble sort to sort the rows\n    for i in range(len(row_sums)):\n        for j in range(len(row_sums) - 1):\n            if row_sums[j] > row_sums[j + 1]:\n                temp = row_sums[j]\n                row_sums[j] = row_sums[j + 1]\n                row_sums[j + 1] = temp\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M)-1):\n            if M[j][0] > M[j+1][0]:\n                temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/6)*(l*b*h)\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n    \nprint (find_Volume(12,9,8))"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l, b, h = eval(raw_input('Please enter three side lengths:\\n'))\n    return (l*b*h) / 2\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = ((b**2)*(h**2))/4\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    Volume = 0.5*b*h \n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 1/6.0*(b*h)\n    print \"The volume of the triangle is \", volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (l*b*h)/6\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l*h*b == 0 : \n        return 0 \n    else : \n        return l*h*b\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    count = 0\n    for word in text:\n        if word.islower() == True:\n            count += 1\n    if count == 0:\n        return False\n    elif count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # islower() and isupper()\n    #return text.lower().isalpha()\n    # isalpha()\n    #return text.isalpha()\n    # isalnum()\n    #return text.isalnum()\n    # isdecimal()\n    #return text.isdecimal()\n    # isdigit()\n    #return text.isdigit()\n    #islower()\n    #return text.islower()\n    # isupper()\n    #return text.isupper()\n    # isalnum()\n    #return text.isalnum()\n    # isdecimal()\n    #return text.isdecimal()\n    # isblank()\n    #return text.isspace()\n    # istitle()\n    #return text.istitle()\n    # isnumeric()\n    #return text.isnumeric()\n    # isnumeric()\n    #return text.isnumeric()\n    # get()\n    #return text.get()\n    # get()\n    #return text.get()\n    #lstrip()\n    #return text.lstrip()\n    #rstrip()\n    #return text.rstrip()\n    #strip()\n    #return text.strip()\n    #lstrip()\n    #return text.lstrip()\n    #rstrip()\n    #return text.rstrip()\n    #strip()\n    #return text.strip()\n    # isdecimal()\n    # return text.isdecimal()\n    # isalpha()\n    # return text.isalpha()\n    #isdigit()\n    # return text.isdigit()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    # return text.istitle()\n    # isdecimal()\n    # return text.isdecimal()\n    # isdigit()\n    # return text.isdigit()\n    # isalnum()\n    # return text.isalnum()\n    # isspace()\n    # return text.isspace()\n    # isdecimal()\n    # return text.isdecimal()\n    # isnumeric()\n    # return text.isnumeric()\n    # islower()\n    # return text.islower()\n    # isupper()\n    # return text.isupper()\n    # istitle()\n    "
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text:\n        if text.islower():\n            return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    pattern = re.compile(r'([a-z])[a-z]+')\n    match = re.findall(pattern, text)\n    if len(match) > 0:\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]*_[a-z]*',text)\ndef test_text_lowercase_underscore():\n    assert text_lowercase_underscore('Hi') == True\n    assert text_lowercase_underscore('hi') == True\n    assert text_lowercase_underscore('Hihi') == False\n    assert text_lowercase_underscore('hihi') == False\n    assert text_lowercase_underscore('Hi_Hi') == True\n    assert text_lowercase_underscore('Hi-Hi') == False\n    assert text_lowercase_underscore('Hi__Hi') == True\n    assert text_lowercase_underscore('HiHi') == False\n    assert text_lowercase_underscore('HiHi_') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi__Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('HiHiHi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi') == False\n    assert text_lowercase_underscore('Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi_Hi"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]',text))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lower_case_regex = re.compile(r'^[a-z]+_[a-z]+$')\n    return lower_case_regex.match(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match('^[a-z]*_[a-z]*$',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.islower() and re.match('[a-z_]+', text)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string: \n        if i not in list1: \n            list1.append(i) \n    return list1 \n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j] and i!= j:\n                break\n        else:\n            str_list.append(string[i])\n    return str_list\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = list(string)\n    i=0\n    j=0\n    while i < len(list_str) :\n        if list_str[i] not in list_str[j:len(list_str)] :\n            i=i+1\n            continue\n        else :\n            del list_str[i]\n    return list_str\ndef encrypt(key, message):\n    cipher_text = [''] * key\n    for col in range(key):\n        pointer = col\n        while pointer < len(message):\n            cipher_text[col] += message[pointer]\n            pointer += key\n    return ''.join(cipher_text)\ndef decrypt(key, message):\n    num_of_chars = NO_OF_CHARS\n    num_of_cols = key\n    num_of_rows = int(len(message)/key)\n    # creating a list of list with\n    # each list inside ith a column\n    # and each item of each list inside\n    # ith a row\n    matrix = [[\"\" for x in range(num_of_chars)] for x in range(num_of_rows)]\n    #encrypting\n    cipher_text = encrypt(key, message)\n    # filling the list of list with\n    # ciphertext\n    i = 0\n    for col in range(num_of_cols):\n        for row in range(num_of_rows):\n            matrix[row][col] = cipher_text[i]\n            i += 1\n    # now we have a 3-D list with\n    # ciphertext as item in\n    # list at a particular position\n    # print_matrix(matrix)\n    plain_text = \"\"\n    for col in range(num_of_cols):\n        for row in range(num_of_rows):\n            plain_text += matrix[row][col]\n    return plain_text\ndef print_matrix(matrix):\n    # we will use string formatting for\n    # making the matrix as a string\n    # for printing it\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print(\"{0:4}\".format(matrix[i][j]),end=\" \")\n        print()"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for ch in string:\n        if ch not in list1:\n            list1.append(ch)\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.translate(None, string)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [None]*len(string)\n    list2 = [None]*len(string)\n    for i in range(0, len(string)):\n        list1[i] = string[i]\n        list2[i] = string[i]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(string)):\n        list1.append(string[i])\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in string:\n        if i not in list1:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict1 = {}\n    for i in range(len(string)):\n        if dict1.has_key(string[i]):\n            dict1[string[i]] += 1\n        else:\n            dict1[string[i]] = 1\n    #print dict1\n    for i in range(len(string)):\n        if dict1.has_key(string[i]):\n            dict1[string[i]] -= 1\n            if dict1[string[i]] == 0:\n                del dict1[string[i]]\n        else:\n            return []\n    return dict1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    import string\n    # List of all the characters in lower case\n    lower_case_alphabet = [chr(x) for x in range(97, 123)]\n    # List of all the characters in upper case\n    upper_case_alphabet = [chr(x) for x in range(65, 91)]\n    # Initializing the list with the all the characters in lower case\n    clean_string = lower_case_alphabet[:]\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    retval = None\n    if arraynums == None or len(arraynums) <= 0:\n        retval = False\n    else:\n        if len(arraynums) <= 1:\n            retval = False\n        else:\n            retval = False\n            for i in range(len(arraynums)):\n                for j in range(i+1, len(arraynums)):\n                    if arraynums[i] == arraynums[j]:\n                        retval = True\n                        break\n            if retval == None:\n                retval = False\n    return retval\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    s = set(arraynums)\n    return len(s)!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums))!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert contains_duplicate([1, 2, 3, 4])\n    assert contains_duplicate([1, 2, 3, 4, 5])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7])\n    assert contains_duplicate(arraynums)\n    assert not contains_duplicate([])\n    assert not contains_duplicate([1])\n    assert not contains_duplicate([1, 1])\n    assert not contains_duplicate([1, 2, 1])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 2"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    i = 0\n    while i < len(arraynums):\n        j = 0\n        while j < i:\n            if arraynums[j] == arraynums[i]:\n                return True\n            j += 1\n        i += 1\n    return False\n    \nassert test_duplicate([1,2,3,4]) == False\nassert test_duplicate([1,2,3,1]) == Tru"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0,len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    newarray = []\n    for i in arraynums:\n        if i not in newarray:\n            newarray.append(i)\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    map = {}\n    for num in arraynums:\n        if num not in map:\n            map[num] = 1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return None\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return False\n    else:\n        num_digits=len(str(x))\n        if num_digits==6:\n            last_digit=x%10\n            return last_digit==2 or last_digit==3 or last_digit==7\n        elif num_digits==7:\n            last_digit=x%10\n            return last_digit==2 or last_digit==3 or last_digit==7 or last_digit==9\n        elif num_digits==8:\n            last_digit=x%10\n            return last_digit==2 or last_digit==3 or last_digit==7 or last_digit==9 or last_digit==0\n        else:\n            return False\n    \ndef is_hammer(x):\n    '''\n    Write a function to check if the given number is a hammer or not.\n    '''\n    if x%2==0:\n        return False\n    else:\n        num_digits=len(str(x))\n        if num_digits==6:\n            last_digit=x%10\n            return last_digit==4 or last_digit==8\n        elif num_digits==7:\n            last_digit=x%10\n            return last_digit==4 or last_digit==8 or last_digit==0\n        elif num_digits==8:\n            last_digit=x%10\n            return last_digit==4 or last_digit==8 or last_digit==0 or last_digit==6\n        else:\n            return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 6: \n        return True\n    elif (x > 6) and (x < 9):\n        return False\n    else:\n        return True\n    \ndef main():\n    print(is_woodall(8))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == \"Z\":\n        return True\n    elif (x >= 'a' and x <= 'z') or (x >= 'A' and x <= 'Z'):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x[0]==\"1\" or x[1]==\"1\" or x[2]==\"1\" or x[3]==\"1\" or x[4]==\"1\"): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #Base case for recursion\n    if x == 0:\n        return True\n    #Recursive case\n    elif x%2 == 0:\n        return is_woodall(x/2)\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s=str(x)\n    if len(s)>2:\n        return False\n    else:\n        return s[0]==s[1] and s[1]==s[2]\n    "
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 1:\n        for i in range(2,x):\n            if(x%i)==0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Converting a number into a string, and using the string to access its digits\n    # Using the list index to access the digits\n    # Using the for loop to iterate over all the digits\n    # Using the comparison operators and if statements\n    # If the value is greater than 6, return True\n    # Else, return False\n    x = str(x)\n    digits = []\n    for i in x: \n        digits.append(int(i))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (str(x)[0] == '5' or str(x)[1] == '9') and (str(x)[2] == '4' or str(x)[2] == '7'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Return True if num is power of 2 else False\n    if x == 0 or x == 1:\n        return False\n    elif x == 2:\n        return True\n    elif x == 3:\n        return True\n    elif x % 2 == 0:\n        return False\n    elif x % 3 == 0:\n        return False\n    elif x % 5 == 0:\n        return False\n    elif x % 7 == 0:\n        return False\n    else:\n        return is_woodall(x-1)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0: return True\n    num_str = str(num)\n    num_str = num_str[::-1]\n    rev_str = num_str[1::]\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    if num%10 == 0:\n        return False\n    if (num*2)%10 == num%10:\n        return True\n    return False\n    \ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one more than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    if num%10 == 0:\n        return False\n    if (num*2)%10 == (num+1)%10:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (num * 2) - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if num == (2 * rev_num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num:\n        d = num % 10\n        rev_num = rev_num * 10 + d\n        num = num // 10\n    return rev_num == num - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #reverse the num\n    num = str(num)\n    rev = ''.join(reversed(num))\n    #if num - int(rev) == 0:\n    if int(rev) == num-1:\n        return True\n    else:\n        return False\n    \ndef reverse(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    else:\n        return False\n    \ndef isPrime(num):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if num>1:\n        if num == 2:\n            return True\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num == 0):\n        return True\n    if (num == 1):\n        return False\n    if (num < 0):\n        return False\n    if (num % 2 == 0):\n        return False\n    if (num == 2):\n        return True\n    if (num % 2!= 0):\n        return True\n    a = num\n    b = 0\n    while (a > 0):\n        b = (b * 10) + (a % 10)\n        a = a / 10\n    if (b == num - 2):\n        return True\n    if (b!= num - 2):\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num1 = str(num)\n    num2 = str(int(num1[::-1])-1)\n    if int(num2[::-1]) == int(num1)-1:\n        return True\n    else:\n        return False\ndef loop():\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    print(\"To exit, type 'exit'\")\n    num = int(input(\"Enter the number: \"))\n    if num == 0:\n        return\n    while num > 0:\n        if int(num) == int(num[::-1]):\n            print(\"Number is a palindrome\")\n            return\n        else:\n            print(\"Number is not a palindrome\")\n            return\n    while num < 0:\n        if int(num) == -1 * int(num[::-1]):\n            print(\"Number is a palindrome\")\n            return\n        else:\n            print(\"Number is not a palindrome\")\n            return\n    print(\"Invalid input\")\n    return\ndef factorial(num):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    fact = 1\n    while num > 0:\n        fact = fact * num\n        num -= 1\n    return fact\ndef loop2():\n    '''\n    Write a python function to find the prime numbers in a given range.\n    '''\n    print(\"To exit, type 'exit'\")\n    num1 = int(input(\"Enter the beginning of the range: \"))\n    num2 = int(input(\"Enter the end of the range: \"))\n    if num1 > num2:\n        num1, num2 = num2, num1\n    num1 -= 1\n    while num1 <= num2:\n        if num1 == 1:\n            num1 += 1\n        elif num1 == 2:\n            num1 += 1\n            continue\n        elif num1 > 2:\n            for i in range(2, num1):\n                if num1 % i == 0:\n                    num1 += 1\n                    break\n            else:\n                print(num1)\n                num1 += 1\n    return\ndef loop3():\n    '''\n    Write a python function to find the sum of the factorials of all the numbers in a given range.\n    '''\n    print(\"To exit, type 'exit'\")\n    num1 = int(input(\"Enter the beginning of the range: \"))\n    num2 = int(input(\"Enter the end of the range: \"))\n    if num1 > num2:\n        num1, num2 = num2, num1\n    num1 -= 1\n    fact1 = 1\n    fact2 = 1\n    sum = 1\n    while num1 <= num2:\n        if num1 == 1:\n            fact1 = 1\n        elif num1 == 2:\n            fact1 = 2\n            fact2 = 1\n        elif num1 > 2:\n            fact1 = factorial(num1)\n            fact2 = factorial(num1-2)\n        sum = sum + fact1 * fact2\n        num1 += 1\n    print(sum)\n    return\ndef loop4():\n    '''\n    Write a python function to find the average of the factorials of all the numbers in a given range.\n    '''\n    print(\"To exit, type 'exit'\")\n    num1 = int(input(\"Enter the beginning of the range: \"))\n    num2 = int(input(\"Enter the end of the range: \"))\n    if num1 > num2:\n        num1, num2 = num2, num1\n    num1 -= 1\n    fact1 = 1\n    fact2 = 1\n    sum = 1\n    sum2 = 1\n    while num1 <= num2:\n        if num1 == 1:\n            fact1 = 1\n        elif num1 == 2:\n            fact1 = 2\n            fact2 = 1\n        elif num1 > 2:\n            fact1 = factorial(num1)\n            fact2 = factorial(num1-2)\n        sum = sum + fact1 * fact2\n        num1 += 1\n        sum2 = sum2 + fact2\n    print(sum/sum2)\n    return\ndef loop5():\n    '''\n    Write a python function to find the average of the factorials of all the numbers in a given range.\n    '''\n    print(\"To exit, type 'exit'\")\n    num1 = int(input(\"Enter the beginning of the range: \"))\n    num2 = int(input(\"Enter the end of the range: \"))\n    if num1 > num2:\n        num1, num2 = num2, num1\n    num1 -= 1\n    fact1 = 1\n    fact2 = 1\n    sum = 1\n    sum2 = 1\n    while num1 <= num2:\n        if num1 == 1:\n            fact1 = 1\n        elif num1 == 2:\n            fact1 = 2\n            fact2 = 1\n        elif num1 > 2:\n            fact1 = factorial(num1)\n            fact2 = factorial(num1-2)\n        sum = sum + fact1 * fact2\n        num1 += 1\n        sum2 = sum2 + fact2\n    print(sum/sum2)\n    return\ndef loop6():\n    '''\n    Write a python function to find the maximum of the factorials of all the numbers in a given range.\n    '''\n    print(\"To exit, type 'exit'\")\n    num1 = int(input(\"Enter the beginning of the range: \"))\n    num2 = int(input(\"Enter the end of the range: \"))\n    if num1 > num2:\n        num1, num2 = num2, num1\n    num1 -= 1\n    fact1 = 1\n    fact2 = 1\n    sum = 1\n    max = 1\n    while num1 <= num2:\n        if num1 == 1:\n            fact1 = 1\n        elif num1 == 2:\n            fact1 = 2\n            fact2 = 1\n        elif num1 > 2:\n            fact1 = factorial(num1)\n            fact2 = factorial(num1-2)\n        sum = sum + fact1 * fact2\n        if sum > max:\n            max = sum\n        num1 += 1\n    print(max)\n    return\ndef loop7():\n    '''\n    Write a python function to find the minimum of the factorials of all the numbers in a given range.\n    '''\n    print(\"To exit, type 'exit'\")\n    num1 = int(input(\"Enter the beginning of the range: \"))\n    num2 = int(input(\"Enter the end of the range: \"))\n    if num1 > num2:\n        num1, num2 = num2, num1\n    num1 -= 1\n    fact1 = 1\n    fact2 = 1\n    sum = 1\n    min = 1\n    while num1 <= num2:\n        if num1 == 1:\n            fact1 = 1\n        elif num1 == 2:\n            fact1 = 2\n            fact2 = 1\n        elif num1 > 2:\n            fact1 = factorial(num1)\n            fact2 = factorial(num1-2)\n        sum = sum + fact1 * fact2\n        if sum < min:\n            min = sum\n        num1 += 1\n    print(min)\n    return\ndef loop8():\n    '''\n    Write a python function to find the sum of the factorials of all the numbers in a given range.\n    '''\n    print(\"To exit, type 'exit'\")\n    num1 = int(input(\"Enter the beginning of the range: \"))\n    num2 = int(input(\"Enter the end of the range: \"))\n    if num1 > num2:\n        num1, num2 = num2, num1\n    num1 -= 1\n    fact1 = 1\n    fact2 = 1\n    sum = 1\n    while num1 <= num2:\n        if num1 == 1:\n            fact1 = 1\n        elif num1 == 2:\n            fact1 = 2\n            fact2 = 1\n        elif num1 > 2:\n            fact1 = factorial(num1)\n            fact2 = factorial(num1-2)\n        sum = sum + fact1 * fact2\n        num1 += 1\n    print(sum)\n    return\ndef loop9():\n    '''\n    Write a python function to find the product of the factorials of al"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = str(num)\n    temp = temp[::-1]\n    rev = str(int(temp) - 1)\n    if int(temp) == int(rev) * 2:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num *= 10\n        rev_num += num % 10\n        num //= 10\n    return True if rev_num == num-1 else False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    m = arr[0]\n    for i in arr:\n        if i > m :\n            m = i\n    return m\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 : \n        return arr[0]\n    else : \n        return max(arr[0]*10 + arr[1], arr[1]*10 + arr[0])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    Max_Num = 0\n    arr = sorted(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Convert the list of digits to a string\n    arr = str(arr)\n    max_num = arr[0]\n    for elem in arr:\n        if int(elem) > int(max_num):\n            max_num = elem\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0: \n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0] > arr[1]:\n            arr[0], arr[1] = arr[1], arr[0]\n        return find_Max_Num(arr[0:len(arr)-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 : \n        return arr[0]\n    else : \n        max_num = arr[0]\n        for i in arr : \n            if i > max_num : \n                max_num = i\n        return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    arr.reverse()\n    num = 0\n    for i in range(len(arr)) : \n        num += arr[i]*(10**i)\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == [] : \n        return 0 \n    if len(arr) == 1 :\n        return arr[0]\n    \n    \n    else : \n        n1 = find_Max_Num(arr[0:len(arr)/2])\n        n2 = find_Max_Num(arr[len(arr)/2:])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = len(arr)\n    arr.sort()\n    if l == 1 :\n        return arr[0]\n    elif arr[l-1] >= arr[l-2] :\n        return arr[l-1]\n    else :\n        return arr[l-2]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in arr :\n        if i > max :\n            max = i\n    return max\n    \ndef find_max_of_digit(digit):\n    '''\n    Write a python function to find the maximum of the given digit.\n    '''\n    return max(digit)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return False\n    elif x<0 and y<0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y < 0\n    \n    \ndef IsPrime(x):\n    if x == 1:\n        return False\n    for i in range(2,x):\n        if x % i == 0:\n            return False\n    return True\n    \ndef PrimeFactors(x):\n    res = []\n    for i in range(2,x+1):\n        if x % i == 0:\n            if IsPrime(i):\n                res.append(i)\n            else:\n                res.extend(PrimeFactors(x/i))\n    return res\n    \ndef SumofFactors(x):\n    sum = 0\n    for i in range(1,x+1):\n        if x % i == 0:\n            sum += i\n    return sum\n    \ndef Factors(x):\n    res = []\n    for i in range(1,x+1):\n        if x % i == 0:\n            res.append(i)\n    return res\n    \ndef Palindrome(x):\n    return x == x[::-1]\n    \ndef ProductofPrimeFactors(x):\n    res = 1\n    for i in Factors(x):\n        if IsPrime(i):\n            res *= i\n    return res\n    \ndef SumofProducts(x):\n    res = 0\n    for i in Factors(x):\n        res += ProductofPrimeFactors(i)\n    return res\n    \ndef LargestPalindrome(x):\n    while True:\n        x -= 1\n        y = SumofProducts(x)\n        if y * 10 + x == y*10 + x:\n            return x\n            \ndef LargestPalindrome2(x):\n    while True:\n        x -= 1\n        y = SumofProducts(x)\n        if y * 10 + x == y*10 + x:\n            return x\n            \ndef DigitofNumber(x):\n    num = 0\n    for i in range(0,len(str(x))):\n        num += int(str(x)[i])*(10**(len(str(x))-i-1))\n    return num\n    \ndef DigitProduct(x):\n    num = 1\n    for i in range(0,len(str(x))):\n        num *= int(str(x)[i])\n    return num\n    \ndef DigitFactorial(x):\n    num = 1\n    for i in range(0,x):\n        num *= DigitProduct(i)\n    return num\n    \ndef DigitFactorial2(x):\n    num = 1\n    for i in range(1,x+1):\n        num *= DigitProduct(i)\n    return num\n    \ndef NumberofDigitFactorials(x):\n    res = 0\n    while x > 0:\n        x //= 10\n        res += x\n    return res\n    \ndef SumofDigitFactorials(x):\n    res = 0\n    for i in range(1,x+1):\n        res += NumberofDigitFactorials(i)\n    return res\n    \ndef SumofDigitFactorials2(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial2(i)\n    return res\n    \ndef SumofDigitFactorials3(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial(i)\n    return res\n    \ndef SumofDigitFactorials4(x):\n    res = 0\n    for i in range(1,x+1):\n        res += NumberofDigitFactorials(i)\n    return res\n    \ndef SumofDigitFactorials5(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial3(i)\n    return res\n    \ndef SumofDigitFactorials6(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial4(i)\n    return res\n    \ndef SumofDigitFactorials7(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial5(i)\n    return res\n    \ndef DigitSumofFactorials(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial(i)\n    return res\n    \ndef DigitSumofFactorials2(x):\n    res = 0\n    for i in range(1,x+1):\n        res += NumberofDigitFactorials(i)\n    return res\n    \ndef DigitSumofFactorials3(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial2(i)\n    return res\n    \ndef DigitSumofFactorials4(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial3(i)\n    return res\n    \ndef DigitSumofFactorials5(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial4(i)\n    return res\n    \ndef DigitSumofFactorials6(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial5(i)\n    return res\n    \ndef DigitSumofFactorials7(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial6(i)\n    return res\n    \ndef DigitSumofFactorials8(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial7(i)\n    return res\n    \ndef SumofDigitFactorials(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial(i)\n    return res\n    \ndef SumofDigitFactorials2(x):\n    res = 0\n    for i in range(1,x+1):\n        res += NumberofDigitFactorials(i)\n    return res\n    \ndef SumofDigitFactorials3(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial2(i)\n    return res\n    \ndef SumofDigitFactorials4(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial3(i)\n    return res\n    \ndef SumofDigitFactorials5(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial4(i)\n    return res\n    \ndef SumofDigitFactorials6(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial5(i)\n    return res\n    \ndef SumofDigitFactorials7(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial6(i)\n    return res\n    \ndef SumofDigitFactorials8(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial7(i)\n    return res\n    \ndef SumofDigitFactorials9(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial8(i)\n    return res\n    \ndef SumofDigitFactorials10(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial9(i)\n    return res\n    \ndef SumofDigitFactorials11(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial10(i)\n    return res\n    \ndef SumofDigitFactorials12(x):\n    res = 0\n    for i in range(1,x+1):\n        res += DigitFactorial11(i)\n    return res\n    \ndef SumofDi"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y>0) or (x<0 and y<0):\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y < 0\ndef two_Numbers_Are_Opposite(x,y): \n    '''\n    Write a python function to check whether the two given integers have opposite sign or not.\n    '''\n    return opposite_Signs(x,y)\ndef two_Numbers_Are_Opposite_Prime(x,y): \n    '''\n    Write a python function to check whether the two given integers have opposite sign or not.\n    '''\n    return two_Numbers_Are_Opposite(x,y) and not prime_Check(abs(x)) and not prime_Check(abs(y))\ndef prime_Check(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n > 2 and n % 2 == 0: \n        return False\n    max = n ** 0.5\n    \n    for i in range(3,int(max) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef check_Primes(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n > 2 and n % 2 == 0: \n        return False\n    max = n ** 0.5\n    \n    for i in range(3,int(max) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef two_Numbers_Are_Prime_Prime(x,y): \n    '''\n    Write a python function to check whether the two given integers are prime or not.\n    '''\n    return check_Primes(x) and check_Primes(y)\ndef two_Numbers_Are_Prime_Prime_Opposite(x,y): \n    '''\n    Write a python function to check whether the two given integers are prime or not.\n    '''\n    return two_Numbers_Are_Prime_Prime(x,y) and two_Numbers_Are_Opposite(x,y)\ndef two_Numbers_Are_Prime_Prime_Opposite_Prime(x,y): \n    '''\n    Write a python function to check whether the two given integers are prime or not.\n    '''\n    return two_Numbers_Are_Prime_Prime(x,y) and two_Numbers_Are_Opposite_Prime(x,y)\ndef prime_Factors(n): \n    '''\n    Write a python function to find the prime factors of the given number n.\n    '''\n    if n == 1: \n        return None\n    if n == 2: \n        return 2\n    if n % 2 == 0: \n        return 2 * prime_Factors(n/2)\n    max = n ** 0.5\n    \n    for i in range(3,int(max) + 1, 2): \n        if n % i == 0: \n            return i * prime_Factors(n/i)\n    return n\ndef prime_Factors_List(n): \n    '''\n    Write a python function to find the prime factors of the given number n.\n    '''\n    return [i for i in range(1,n+1) if prime_Check(i) and n % i == 0]\ndef prime_Factors_List_Unique(n): \n    '''\n    Write a python function to find the prime factors of the given number n.\n    '''\n    return list(set(prime_Factors_List(n)))\ndef same_Digits(n,m): \n    '''\n    Write a python function to check whether the two given numbers have same digits or not.\n    '''\n    return sorted(str(n)) == sorted(str(m))\ndef same_Digits_Unique(n,m): \n    '''\n    Write a python function to check whether the two given numbers have same digits or not.\n    '''\n    return sorted(str(n)) == sorted(str(m)) and not same_Digits(n,m)\ndef divisible_By_K(n,k): \n    '''\n    Write a python function to check whether the given number n is divisible by the given k or not.\n    '''\n    return n % k == 0\ndef divisible_By_K_And_Digit(n,k): \n    '''\n    Write a python function to check whether the given number n is divisible by the given k or not.\n    '''\n    return divisible_By_K(n,k) and prime_Factors(n)[0]\ndef divisible_By_K_And_Digit_Prime(n,k): \n    '''\n    Write a python function to check whether the given number n is divisible by the given k or not.\n    '''\n    return divisible_By_K_And_Digit(n,k) and prime_Factors_Unique(n)[0]\ndef divisible_By_K_Prime(n,k): \n    '''\n    Write a python function to check whether the given number n is divisible by the given k or not.\n    '''\n    return divisible_By_K_Prime(n,k) and prime_Factors_Unique(n)[0]\ndef square_Sum_Unique(n): \n    '''\n    Write a python function to find the sum of squares of the digits of the given number n.\n    '''\n    return sum([i * i for i in prime_Factors_List_Unique(n)])\ndef square_Sum_Prime(n): \n    '''\n    Write a python function to find the sum of squares of the digits of the given number n.\n    '''\n    return sum([i * i for i in prime_Factors_List(n)])\ndef square_Sum_Prime_Unique(n): \n    '''\n    Write a python function to find the sum of squares of the digits of the given number n.\n    '''\n    return sum([i * i for i in prime_Factors_List_Unique(n)])\ndef digits_Sum(n): \n    '''\n    Write a python function to find the sum of digits of the given number n.\n    '''\n    return sum([int(i) for i in str(n)])\ndef digits_Sum_Prime(n): \n    '''\n    Write a python function to find the sum of digits of the given number n.\n    '''\n    return sum([int(i) for i in str(n)])\ndef digits_Sum_Prime_Unique(n): \n    '''\n    Write a python function to find the sum of digits of the given number n.\n    '''\n    return sum([int(i) for i in str(n)])\ndef digits_Sum_Prime_Sum(n): \n    '''\n    Write a python function to find the sum of digits of the given number n.\n    '''\n    return sum([int(i) for i in str(n)]) + prime_Factors(n)[0]\ndef digits_Sum_Prime_Sum_Unique(n): \n    '''\n    Write a python function to find the sum of digits of the given number n.\n    '''\n    return sum([int(i) for i in str(n)]) + prime_Factors_Unique(n)[0]\ndef digits_Sum_Prime_Sum_Unique_Prime(n): \n    '''\n    Write a python function to find the sum of digits of the given number n.\n    '''\n    return sum([int(i) for i in str(n)]) + prime_Factors_Unique(n)[0]\ndef digits_Sum_Prime_Sum_Prime_Prime(n): \n    '''\n    Write a python function to find the sum of digits of the given number n.\n    '''\n    return sum([int(i) for i in str(n)]) + prime_Factors_Unique(n)[0]\ndef digits_Sum_Prime_Sum_Prime_Prime_Prime(n): \n    '''\n    Write a python function to find the sum of digits of the given number n.\n    '''\n    return sum([int(i) for i in str(n)]) + prime_Factors_Unique(n)[0]\ndef digits_Sum_Prime_Sum_Prime_Prime_Prime_Prime(n): "
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return \"Positive\"\n    elif x<0 and y>0:\n        return \"Negative\"\n    elif x<0 and y<0:\n        return \"Negative\"\n    else:\n        return \"Positive\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0: \n        return 1\n    elif x < 0 and y > 0: \n        return 1\n    elif x < 0 and y < 0: \n        return 1\n    elif x > 0 and y > 0: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n    \ndef multiples_of_Ten(x,y):\n    '''\n    Write a python function to check whether the given two integers are multiples of Ten.\n    '''\n    if x%10==0 and y%10==0:\n        return True\n    else:\n        return False\n    \ndef plus_Minus(x,y):\n    '''\n    Write a python function to check whether the given two integers are Positive, Negative or both.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        return True\n    elif (x<0 and y<0) or (x>0 and y>0):\n        return False\n    else:\n        return None\n    \ndef Large_Small(x,y):\n    '''\n    Write a python function to check whether the given two integers are large or small.\n    '''\n    if x>y:\n        return True\n    else:\n        return False\n    \ndef Left_Right(x,y):\n    '''\n    Write a python function to check whether the given two integers are Left or Right.\n    '''\n    if x<y:\n        return True\n    else:\n        return False\n    \ndef Fibonacci(n):\n    '''\n    Write a python function to calculate the nth Fibonacci number where n is a positive integer.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n    \ndef Power(x,y):\n    '''\n    Write a python function to calculate the power of a number x to the power of y.\n    '''\n    if y==0:\n        return 1\n    else:\n        return x*Power(x,y-1)\n    \ndef Same_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have same sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n    \ndef Opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n    \ndef multiples_of_Ten(x,y):\n    '''\n    Write a python function to check whether the given two integers are multiples of Ten.\n    '''\n    if x%10==0 and y%10==0:\n        return True\n    else:\n        return False\n    \ndef plus_Minus(x,y):\n    '''\n    Write a python function to check whether the given two integers are Positive, Negative or both.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        return True\n    elif (x<0 and y<0) or (x>0 and y>0):\n        return False\n    else:\n        return None\n    \ndef Large_Small(x,y):\n    '''\n    Write a python function to check whether the given two integers are Large or Small.\n    '''\n    if x>y:\n        return True\n    else:\n        return False\n    \ndef Left_Right(x,y):\n    '''\n    Write a python function to check whether the given two integers are Left or Right.\n    '''\n    if x<y:\n        return True\n    else:\n        return False\n    \ndef Fibonacci(n):\n    '''\n    Write a python function to calculate the nth Fibonacci number where n is a positive integer.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n    \ndef Power(x,y):\n    '''\n    Write a python function to calculate the power of a number x to the power of y.\n    '''\n    if y==0:\n        return 1\n    else:\n        return x*Power(x,y-1)\n    \ndef Same_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have same sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n    \ndef Opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n    \ndef multiples_of_Ten(x,y):\n    '''\n    Write a python function to check whether the given two integers are multiples of Ten.\n    '''\n    if x%10==0 and y%10==0:\n        return True\n    else:\n        return False\n    \ndef plus_Minus(x,y):\n    '''\n    Write a python function to check whether the given two integers are Positive, Negative or both.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        return True\n    elif (x<0 and y<0) or (x>0 and y>0):\n        return False\n    else:\n        return None\n    \ndef Large_Small(x,y):\n    '''\n    Write a python function to check whether the given two integers are Large or Small.\n    '''\n    if x>y:\n        return True\n    else:\n        return False\n    \ndef Left_Right(x,y):\n    '''\n    Write a python function to check whether the given two integers are Left or Right.\n    '''\n    if x<y:\n        return True\n    else:\n        return False\n    \ndef Fibonacci(n):\n    '''\n    Write a python function to calculate the nth Fibonacci number where n is a positive integer.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n    \ndef Power(x,y):\n    '''\n    Write a python function to calculate the power of a number x to the power of y.\n    '''\n    if y==0:\n        return 1\n    else:\n        return x*Power(x,y-1)\n    \ndef Same_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have same sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n    \ndef Opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n    \ndef multiples_of_Ten(x,y):\n    '''\n    Write a python function to check whether the given two integers are multiples of Ten.\n    '''\n    if x%10==0 and y%10==0:\n        return True\n    else:\n        return False\n    \ndef plus_Minus(x,y):\n    '''\n    Write a python function to check whether the given two integers are Positive, Negative or both.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        return True\n    elif (x<0 and y<0) or (x>0 and y>0):\n        return False\n    else:\n        return None\n    \ndef Large_Small(x,y):\n    '''\n    Write a python function to check whether the given two integers are Large or Small.\n    '''\n    if x>y:\n        return True\n    else:\n        return False\n    \ndef Left_Right"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0: \n        return 1\n    elif x>0 and y<0: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    result = 1\n    while True:\n        result += i * 8\n        i += 1\n        if result >= n:\n            return result\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + (8 * n)) ** 0.5 == int((1 + (8 * n)) ** 0.5)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n - 1))/2\n    \ndef is_pandigital(n):\n    '''\n    Write a function to find if a number is pandigital or not. \n    '''\n    s = str(n)\n    for i in range(1,10):\n        if (s.find(str(i)) == -1):\n            return False\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3*n**2-n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((n*(3*n-1))//2)%10==1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagon_number = 0\n    for i in range(1,n):\n        octagon_number += i\n        octagon_number *= (3 * i) + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n - 1\n    k = (1 + a) * a // 2\n    return k\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a + a) // 2\n    return k\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_triangle(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    a = n - 1\n    k = (1 + a) * a // 2\n    return k\n    \ndef is_square(n): \n    '''\n    Write a function to find the nth square number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_triangle(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    a = n - 1\n    k = (1 + a) * a // 2\n    return k\n    \ndef is_square(n): \n    '''\n    Write a function to find the nth square number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = n - 1\n    k = (1 + a * a) // 2\n    return k\n    \ndef is_heptagonal("
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    k = 1\n    while True:\n        octagonal += k\n        k += 1\n        if n == octagonal:\n            return True\n        if n > octagonal:\n            return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    start = 0\n    result = 0\n    while(start < len(s)):\n        length = 0\n        sum_digits = 0\n        for i in range(start, len(s)):\n            if sum_digits == len(s[start:i+1]):\n                length += 1\n                sum_digits = 0\n            sum_digits += int(s[i])\n        if length > 0:\n            result += 1\n        start += 1\n    return result\n    \ndef get_max_loot(items, capacity):\n    '''\n    You are given a dictionary of items and a weight capacity, return the maximum value of items that can be taken.\n    \n    Dictionary items {'item1':[values,weight],...}\n    '''\n    from bisect import bisect_left\n    values = [item[0] for item in items.values()]\n    weights = [item[1] for item in items.values()]\n    values.sort()\n    weights.sort()\n    result = 0\n    for weight in weights:\n        i = bisect_left(values, capacity - weight)\n        if i < len(values):\n            result = max(result, items[values[i]][0])\n            capacity -= items[values[i]][1]\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(l):\n        for j in range(i, l):\n            if int(s[i:j+1]) == j+1:\n                count += 1\n    print count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            substring_sum = sum([int(x) for x in substring])\n            d[substring_sum] += 1\n    return d[len(s)]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total = 0\n    if len(s) == 0:\n        return 0\n    for i in xrange(len(s)):\n        for j in xrange(i, len(s)):\n            if len(s[i:j+1]) <= len(s):\n                if sum([int(x) for x in s[i:j+1]]) == j-i+1:\n                    total += 1\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result=defaultdict(int)\n    for i in xrange(len(s)):\n        for j in xrange(i, len(s)):\n            result[s[i:j+1]]+=1\n    return sum([value*(value-1)/2 for value in result.values()])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substring(s, length):\n        count = 0\n        for i in range(len(s)-length+1):\n            temp = s[i:i+length]\n            if sum([int(i) for i in temp]) == length:\n                count += 1\n        return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in xrange(len(s)):\n        for j in xrange(i, len(s)):\n            currSum = sum([int(x) for x in s[i:j+1]])\n            if currSum == len(s[i:j+1]):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s_len = len(s)\n    if s_len==0:\n        return 0\n    \n    sum_len = 0\n    hash_map = defaultdict(int)\n    hash_map[0] = 1\n    for i in range(s_len):\n        for j in range(i, s_len):\n            sum_len += hash_map[j-i]\n            if sum_len%10==0 and j-i>0:\n                hash_map[j-i]+=1\n            else:\n                hash_map[j-i]=1\n    return hash_map[s_len-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        if sum(map(int,s[i:i+len(s)//2])) == len(s):\n            count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s):\n        d[s[i]]+=1\n        while sum(map(int, list(s[i:i+len(s[i:])]))) == len(s[i:i+len(s[i:])]):\n            count+=1\n            i+=1\n        j = i\n        while d[s[j]]>1:\n            d[s[j]]-=1\n            j-=1\n        i = j\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize a variable to hold the smallest number\n    smallest = None\n    # Loop through the list of numbers\n    for x in xs:\n        # Is smallest None?\n        if smallest is None:\n            smallest = x\n        # Otherwise, is smallest a number?\n        elif smallest > x:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #sort the list\n    test_list.sort()\n    #iterate through the list\n    for x in range(0, len(test_list)):\n        for y in range(0, len(test_list)):\n            if x!= y:\n                max_difference = abs(test_list[x] - test_list[y])\n                if max_difference > max_diff:\n                    max_diff = max_difference\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    print sorted_list\n    if len(sorted_list) % 2!= 0:\n        return sorted_list[len(sorted_list)-1] - sorted_list[0]\n    else:\n        return (sorted_list[len(sorted_list)-1] - sorted_list[0]) + (sorted_list[len(sorted_list)-2] - sorted_list[1])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([abs(a-b) for a in test_list for b in test_list if a!= b])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in xrange(len(test_list) - 1):\n        diff = abs(test_list[i] - test_list[i + 1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n    else:\n        return max(test_list[0] - test_list[1], test_list[len(test_list) - 1] - test_list[len(test_list) - 2])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_dif = -1\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                dif = abs(test_list[i] - test_list[j])\n                if dif > max_dif:\n                    max_dif = dif\n    return max_dif\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    res = 0\n    test_list = test_list[:]\n    while len(test_list) > 1:\n        res = max(res, test_list[0] - test_list[1])\n        test_list.pop(0)\n        test_list.pop(0)\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # hint: try all the possible pairs in the list\n    # find the minimum and maximum\n    # return the max - min\n    # do not use the list itself\n    max_diff = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # write your code here\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 2:\n        return abs(test_list[0] - test_list[1])\n    else:\n        sub_list = test_list[1:]\n        return max(abs(test_list[0] - x) for x in sub_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    return sorted(subjectmarks,key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda subjectmarks: subjectmarks[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = [tup for tup in subjectmarks if isinstance(tup, tuple)]\n    return sorted(marks, key=lambda tup: tup[1])\n    \n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x: x[1])\n    \n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print sorted(subjectmarks, key=lambda subjectmarks: subjectmarks[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(\"Sort the list of tuples using the second value of each tuple.\")\n    subjectmarks.sort(key=lambda tup: tup[1])\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if subjectmarks is None:\n        return\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_all = 0\n    if len(data_list) == 0:\n        return 0\n    if type(data_list[0])!= list:\n        sum_all += sum(data_list)\n    else:\n        for sublist in data_list:\n            sum_all += recursive_list_sum(sublist)\n    return sum_all\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # data_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    \n    # stop condition: if data_list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    # base case: if data_list is a list of length 1, return data_list[0]\n    if len(data_list) == 1:\n        return data_list[0]\n    # recursive call: if data_list is a list of length 2, return data_list[0] + data_list[1]\n    if len(data_list) == 2:\n        return data_list[0] + data_list[1]\n    # recursive call: if data_list is a list of length 3, return data_list[0] + data_list[1] + data_list[2]\n    if len(data_list) == 3:\n        return data_list[0] + data_list[1] + data_list[2]\n    # recursive call: if data_list is a list of length >3, return data_list[0] + data_list[1] + data_list[2] + recursive_list_sum(data_list[3:])\n    else:\n        return data_list[0] + data_list[1] + data_list[2] + recursive_list_sum(data_list[3:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    try:\n        if isinstance(data_list[0], list):\n            return sum(recursive_list_sum(sublist) for sublist in data_list)\n        else:\n            return sum(data_list)\n    except TypeError:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, int) or isinstance(data_list, float) or isinstance(data_list, str):\n        return data_list\n    else:\n        sum_of_all_elements = 0\n        for i in data_list:\n            sum_of_all_elements += recursive_list_sum(i)\n        return sum_of_all_elements\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is not list:\n        return data_list\n    else:\n        return sum(data_list) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return sum(data_list) + recursive_list_sum(data_list[1:])\n    "
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    if len(data_list) == 2:\n        return data_list[0] + data_list[1]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # count = 0\n    # for element in list:\n    #     if element > 0:\n    #         count = count + 1\n    # return count\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for n in list:\n        if n > 0:\n            pos_count = pos_count + 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0, len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for x in list:\n        if x > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if j <= i:\n                print(j, end='')\n            else:\n                print(j+1-i, end='')\n        print()\n    \ndef stirling(n):\n    '''\n    Write a function to find the number of ways to partition a set of Stirling numbers.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if j <= i:\n                print(j, end='')\n            else:\n                print(j+1-i, end='')\n        print()\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # how many numbers in total, i.e., n+1\n    n_max = n + 1\n    # how many ways to partition, i.e., n!\n    n_factorial = 1\n    for i in range(1, n_max):\n        n_factorial *= i\n    # how many ways to partition, i.e., n!\n    n_factorial_binom = 1\n    for i in range(1, n_max):\n        n_factorial_binom *= (n - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_tri = 1\n    for i in range(1, n_max):\n        n_factorial_binom_tri *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_qu = 1\n    for i in range(1, n_max):\n        n_factorial_binom_qu *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_tet = 1\n    for i in range(1, n_max):\n        n_factorial_binom_tet *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_fif = 1\n    for i in range(1, n_max):\n        n_factorial_binom_fif *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_six = 1\n    for i in range(1, n_max):\n        n_factorial_binom_six *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_sev = 1\n    for i in range(1, n_max):\n        n_factorial_binom_sev *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_eig = 1\n    for i in range(1, n_max):\n        n_factorial_binom_eig *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_nin = 1\n    for i in range(1, n_max):\n        n_factorial_binom_nin *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_dec = 1\n    for i in range(1, n_max):\n        n_factorial_binom_dec *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_und = 1\n    for i in range(1, n_max):\n        n_factorial_binom_und *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_dod = 1\n    for i in range(1, n_max):\n        n_factorial_binom_dod *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_tac = 1\n    for i in range(1, n_max):\n        n_factorial_binom_tac *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_pot = 1\n    for i in range(1, n_max):\n        n_factorial_binom_pot *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_fou = 1\n    for i in range(1, n_max):\n        n_factorial_binom_fou *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_fiv = 1\n    for i in range(1, n_max):\n        n_factorial_binom_fiv *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_sixi = 1\n    for i in range(1, n_max):\n        n_factorial_binom_sixi *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_sexi = 1\n    for i in range(1, n_max):\n        n_factorial_binom_sexi *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_eigi = 1\n    for i in range(1, n_max):\n        n_factorial_binom_eigi *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_nini = 1\n    for i in range(1, n_max):\n        n_factorial_binom_nini *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_dedi = 1\n    for i in range(1, n_max):\n        n_factorial_binom_dedi *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_didi = 1\n    for i in range(1, n_max):\n        n_factorial_binom_didi *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_taci = 1\n    for i in range(1, n_max):\n        n_factorial_binom_taci *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_poti = 1\n    for i in range(1, n_max):\n        n_factorial_binom_poti *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_foui = 1\n    for i in range(1, n_max):\n        n_factorial_binom_foui *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_fivi = 1\n    for i in range(1, n_max):\n        n_factorial_binom_fivi *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_sixii = 1\n    for i in range(1, n_max):\n        n_factorial_binom_sixii *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_sexii = 1\n    for i in range(1, n_max):\n        n_factorial_binom_sexii *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_eigi = 1\n    for i in range(1, n_max):\n        n_factorial_binom_eigi *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_ninii = 1\n    for i in range(1, n_max):\n        n_factorial_binom_ninii *= (n_max - i)\n    # how many ways to partition, i.e., n!\n    n_factorial_binom_dedii = 1\n    for i in range(1, n_max):\n        n_factorial_binom_dedii *= (n_max - i)\n    # how many ways to partitio"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Create a recursive function to find the number of partitions\n    def count_partitions(n, i):\n        if i == n:\n            return 1\n        else:\n            return count_partitions(n, i+1) + count_partitions(n-i, i)\n    # Return the answer\n    return count_partitions(n, 1)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #  T: O(N)\n    #  S: O(N)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # first check if the number is smaller than 4\n    if n < 4:\n        return 1\n    else:\n        # start with the first n - 1 numbers, get their partitions\n        # and then add one of them to the sum of the previous one\n        # then increase the number of partitions by the number of ways to partition the n - 1 numbers\n        return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3) + bell_number(n - 4)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    result = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n+1):\n        result[i][0] = 1\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            if j == 1:\n                result[i][j] = 1\n            else:\n                result[i][j] = result[i-1][j-1] + result[i-1][j]\n    return result[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    #initialize array of 0s\n    bells = [0]*n\n    bells[0] = 1\n    bells[1] = 1\n    for i in range(2,n):\n        bells[i] = bells[i-1] + bells[i-2]\n    return bells[n-1]\n    \nprint bell_number(5)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def helper(n,d):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif d == 0:\n            return 0\n        else:\n            return helper(n-1,d-1) + helper(n-2,d)\n    \n    return helper(n, n)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 1\n    if n == 1:\n        return 1\n    return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    flag = True\n    for i in range(1,len(A)):\n        if A[i] > A[i-1]:\n            flag = False\n            break\n    return flag\n    \n    \ndef is_Monotonic_1(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    flag = True\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = 1\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            flag = 0\n            break\n    return flag\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    N = len(A)\n    for i in xrange(1, N):\n        if A[i] <= A[i-1]:\n            return False\n    return True\n    \nA = [1, 2, 2, 3, 3, 4, 5, 6, 7, 8]\nprint is_Monotonic(A)\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return True\n    else:\n        return (A[0]<=A[1] and A[1]<=A[2]) or (A[0]>=A[1] and A[1]>=A[2])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    for i in range(0,n-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n    \ndef reverse(A):\n    '''\n    Write a python function to reverse the order of elements in the array.\n    '''\n    n=len(A)\n    for i in range(0,n/2):\n        A[i],A[n-i-1]=A[n-i-1],A[i]\n    return A\n    \ndef kthmax(A,k):\n    '''\n    Write a python function to find the kth max element in an array.\n    '''\n    n=len(A)\n    res=[]\n    for i in range(0,k):\n        res.append(A[i])\n    for i in range(n-k,n):\n        if A[i]>res[0]:\n            res.remove(res[0])\n            res.append(A[i])\n    return res[0]\n    \ndef rotate(A,k):\n    '''\n    Write a python function to rotate the array by k elements in the right direction.\n    '''\n    n=len(A)\n    k=k%n\n    res=A[0:k]\n    for i in range(k,n):\n        A[i-k],A[i]=A[i],A[i-k]\n    return res\n    \ndef longest_substring(A,k):\n    '''\n    Write a python function to find the longest substring with all distinct characters in a given array.\n    '''\n    n=len(A)\n    res=A[0]\n    for i in range(1,n):\n        l=0\n        for j in range(0,i):\n            if A[i] not in A[j:i]:\n                l+=1\n        if l<k and A[i] not in res:\n            res=A[i]\n    return res\n    \ndef longest_common_substring(A,B):\n    '''\n    Write a python function to find the longest substring with all distinct characters in both arrays.\n    '''\n    n=len(A)\n    m=len(B)\n    res=A[0]\n    for i in range(1,n):\n        l=0\n        for j in range(0,i):\n            if A[i] not in A[j:i]:\n                l+=1\n        for j in range(0,m):\n            if B[j] not in A[j:i]:\n                l+=1\n        if l<m+n-i and A[i] not in res:\n            res=A[i]\n    return res\n    \ndef is_balanced(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    res=0\n    for i in range(0,n):\n        if A[i]=='(':\n            res+=1\n        elif A[i]==')':\n            res-=1\n        if res<0:\n            return False\n    return res==0\n    \ndef is_balanced_2(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    res=0\n    for i in range(0,n):\n        if A[i]=='(':\n            res+=1\n        elif A[i]==')':\n            res-=1\n        if res<0:\n            return False\n    return res==0\n    \ndef is_balanced_3(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='(':\n            stack.append('(')\n        elif A[i]==')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n    \ndef is_balanced_4(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='(':\n            stack.append(A[i])\n        elif A[i]==')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    return len(stack)==0\n    \ndef is_balanced_5(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='(':\n            stack.append(A[i])\n        elif A[i]==')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n    \ndef is_balanced_6(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='(':\n            stack.append(A[i])\n        elif A[i]==')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    while len(stack)!=0:\n        return False\n    return True\n    \ndef is_balanced_7(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='(':\n            stack.append(A[i])\n        elif A[i]==')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n    \ndef is_balanced_8(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='(':\n            stack.append(A[i])\n        elif A[i]==')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    while len(stack)!=0:\n        stack.pop()\n    return len(stack)==0\n    \ndef is_balanced_9(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='(':\n            stack.append(A[i])\n        elif A[i]==')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n    \ndef is_balanced_10(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='(':\n            stack.append(A[i])\n        elif A[i]==')':\n            if len(stack)==0:\n                return False\n            stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n    \ndef is_balanced_11(A):\n    '''\n    Write a python function to check whether a given string is balanced or not.\n    '''\n    n=len(A)\n    stack=[]\n    for i in range(0,n):\n        if A[i]=='('"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    flag = 1\n    for i in range(1,n):\n        if A[i] < A[i-1]:\n            flag = 0\n            break\n    return flag\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = 1\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            flag = 0\n            break\n    if flag == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A and (all(A[i] <= A[i+1] for i in range(len(A)-1)) or\n                   all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A) <= 2): \n        return True\n    # A[0] < A[1]\n    if (A[0] > A[1]):\n        for i in range(2,len(A)):\n            if (A[i-1] < A[i]):\n                return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or\n            all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #TODO:\n    '''\n    1) Find the first occurance of the sublist in the list.\n    2) If found, check if other elements are also there.\n    '''\n    for i in range(len(l)):\n        if l[i:len(s)+i] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s is None:\n        return True\n    elif len(s) == 0:\n        return True\n    else:\n        return sublist_helper(l, s, 0)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # code here\n    for i in l:\n        if s == i:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def isSublist(l, s):\n        return s in l\n    return isSublist(l, s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n    n = len(l)\n    m = len(s)\n    \n    if m > n:\n        return False\n    \n    for i in xrange(n-m+1):\n        if l[i:i+m] == s:\n            return True\n    \n    return False\n    \ndef rotate(l, n):\n    '''\n    Write a function to rotate a list by n.\n    '''\n    pass\n    l2 = l[n:] + l[:n]\n    return l2\n    \ndef is_rotation(l1, l2):\n    '''\n    Write a function to determine whether two lists are rotations of each other or not.\n    '''\n    pass\n    if len(l1)!= len(l2):\n        return False\n    \n    return is_sublist(l1, l2)\n    \ndef is_power_of_two(n):\n    '''\n    Write a function to check whether an integer is a power of two.\n    '''\n    pass\n    if n == 0:\n        return False\n    \n    while n % 2 == 0:\n        n /= 2\n    \n    return n == 1\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product of three integers in an array.\n    '''\n    pass\n    l = []\n    for i in xrange(len(arr)-2):\n        for j in xrange(i+1, len(arr)-1):\n            for k in xrange(j+1, len(arr)):\n                l.append(arr[i] * arr[j] * arr[k])\n    \n    return max(l)\n    \ndef base_n_int_to_str(n, base):\n    '''\n    Write a function to convert an integer to a string in a given base.\n    '''\n    pass\n    if base < 2 or base > 36:\n        return None\n    \n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    if n == 0:\n        return ''\n    \n    rem = n % base\n    if rem == 0:\n        return digits[n/base - 1]\n    \n    return base_n_int_to_str(n / base, base) + digits[rem - 1]\n    \ndef base_n_str_to_int(s, base):\n    '''\n    Write a function to convert a string to an integer in a given base.\n    '''\n    pass\n    if base < 2 or base > 36:\n        return None\n    \n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    if s == '':\n        return 0\n    \n    rem = 0\n    for i in xrange(len(s)):\n        n = digits.index(s[-i-1])\n        rem += n * (base**i)\n    \n    return rem\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    pass\n    return sorted(s1) == sorted(s2)\n    \ndef most_common(arr):\n    '''\n    Write a function to return the most common element in an array.\n    '''\n    pass\n    l = []\n    for i in xrange(len(arr)):\n        l.append(arr.count(arr[i]))\n    \n    return max(l)\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    pass\n    if n == 1:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    for i in xrange(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef max_sum(arr):\n    '''\n    Write a function to return the maximum sum of three integers in an array.\n    '''\n    pass\n    l = []\n    for i in xrange(len(arr)-2):\n        for j in xrange(i+1, len(arr)-1):\n            for k in xrange(j+1, len(arr)):\n                l.append(arr[i] + arr[j] + arr[k])\n    \n    return max(l)\n    \ndef max_product(arr):\n    '''\n    Write a function to return the maximum product of three integers in an array.\n    '''\n    pass\n    l = []\n    for i in xrange(len(arr)-2):\n        for j in xrange(i+1, len(arr)-1):\n            for k in xrange(j+1, len(arr)):\n                l.append(arr[i] * arr[j] * arr[k])\n    \n    return max(l)\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    pass\n    for i in xrange(len(s)):\n        if s[i]!= s[-i-1]:\n            return False\n    \n    return True\n    \ndef is_one_edit(s1, s2):\n    '''\n    Write a function to check if one string is a one edit of another string.\n    '''\n    pass\n    n = len(s1)\n    m = len(s2)\n    \n    if n - m > 1:\n        return False\n    \n    if n == m:\n        count = 0\n        for i in xrange(n):\n            if s1[i]!= s2[i]:\n                count += 1\n                if count > 1:\n                    return False\n        \n        return True\n    \n    l = []\n    for i in xrange(n):\n        l.append(s1[i])\n    \n    for i in xrange(m):\n        if s1[i] == s2[i]:\n            continue\n        \n        if s2[i] not in l:\n            l.append(s2[i])\n        else:\n            l.remove(s2[i])\n            \n        if len(l) > 1:\n            return False\n    \n    return True\n    \ndef is_valid_ip_address(s):\n    '''\n    Write a function to check if a string is a valid IP address.\n    '''\n    pass\n    if len(s) > 3:\n        return False\n    \n    for i in xrange(len(s)):\n        if s[i] == '0' and i!= 0:\n            return False\n        \n        if s[i] == '1':\n            if i == 0 or i == 1 or i == 3:\n                continue\n            \n            return False\n        \n        if s[i] == '2':\n            if i == 1 or i == 2 or i == 3:\n                continue\n            \n            return False\n        \n        if s[i] == '3':\n            if i == 2 or i == 3:\n                continue\n            \n            return False\n        \n        if s[i] == '4':\n            if i == 3:\n                continue\n            \n            return False\n        \n        if s[i] == '5':\n            if i == 4:\n                continue\n            \n            return False\n        \n        if s[i] == '6':\n            if i == 4 or i == 5:\n                continue\n            \n            return False\n        \n        if s[i] == '7':\n            if i == 5 or i == 6:\n                continue\n            \n            return False\n        \n        if s[i] == '8':\n            if i == 6 or i == 7:\n                continue\n            \n            return False\n        \n        if s[i] == '9':\n            if i == 7:\n                continue\n            \n            return False\n    \n    return True\n    \ndef is_valid_ip_address_fast(s):\n    '''\n    Write a function to check if a string is a valid IP address.\n    '''\n    pass\n    if len(s) > 4 or len(s) < 1:\n        return False\n    \n    if s[0] == '0':"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            return is_sublist(l[i:], s)\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    elif len(Input) == 1:\n        return True\n    elif len(Input) == 2:\n        return Input[0][0] == Input[1][0]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input.sort()\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_list = []\n    for i in Input:\n        equal_list.append(len(i))\n    return len(set(equal_list)) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    N = len(Input)\n    if N == 0:\n        return False\n    lengths = {}\n    for i in range(N):\n        if Input[i] in lengths:\n            lengths[Input[i]] += 1\n        else:\n            lengths[Input[i]] = 1\n    for key in lengths:\n        if lengths[key] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_size = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= tuple_size:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    size = len(Input)\n    for i in range(0,size-1):\n        for j in range(i+1,size):\n            if(len(Input[i])!=len(Input[j])):\n                return False\n    return True\n    \ndef find_neighbours(input):\n    '''\n    Write a function to find the neighbouring tuples of the given tuple in the list.\n    \n    For eg. Input = [('a','b'),('b','c'),('c','d'),('d','a')]\n        Neighbouring tuples = [(('b','c'),('c','d')),(('a','b'),('b','d'))]\n    '''\n    \n    size = len(input)\n    output = []\n    for i in range(0,size):\n        for j in range(i+1,size):\n            tup = (input[i],input[j])\n            if(tup not in output):\n                output.append(tup)\n    return output\n    \ndef find_pairs(input):\n    '''\n    Write a function to find the sum of all the tuples that have equal length.\n    \n    For eg. Input = [('a','b'),('b','c'),('c','d'),('d','a')]\n        Sum of tuples with equal length = (('a','b'),('b','c'),('c','d')),(('a','b'),('b','d')),(('a','c'),('c','d')),(('a','d'),('d','a'))\n    '''\n    \n    size = len(input)\n    output = []\n    for i in range(0,size):\n        for j in range(i+1,size):\n            if(len(input[i])==len(input[j])):\n                output.append((input[i],input[j]))\n    return output\n    \ndef find_shortest_length(input):\n    '''\n    Write a function to find the length of the shortest tuple in the list.\n    \n    For eg. Input = [(('a','b'),('b','c'),('c','d'),('d','a')),(('a','b'),('b','d'),('c','d'),('d','a'))]\n        Shortest length = 3\n    '''\n    \n    size = len(input)\n    shortest = len(input[0])\n    for i in range(0,size):\n        if(len(input[i])<shortest):\n            shortest = len(input[i])\n    return shortest\n    \ndef find_last_occurance(input):\n    '''\n    Write a function to find the last occurance of the given element in the list.\n    \n    For eg. Input = [1,2,1,1,2,3,4,5,1]\n        Last occurance = 4\n    '''\n    \n    size = len(input)\n    last = -1\n    for i in range(0,size):\n        if(input[i]==input[size-1]):\n            last = i\n    return last\n    \ndef find_max_of_rows(input):\n    '''\n    Write a function to find the max value of each row of the given matrix.\n    \n    For eg. Input = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n        Output = [4,8,12,16]\n    '''\n    \n    size = len(input)\n    for i in range(0,size):\n        max = input[0][i]\n        for j in range(1,size):\n            if(input[j][i]>max):\n                max = input[j][i]\n        print(max)\n    return\n    \ndef find_top_k_row(input):\n    '''\n    Write a function to find the top k rows of a matrix.\n    \n    For eg. Input = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n        Output = [[1,2,3,4],[9,10,11,12],[13,14,15,16]]\n    '''\n    \n    size = len(input)\n    output = []\n    for i in range(0,size):\n        output.append([])\n        for j in range(0,size):\n            output[i].append(input[j][i])\n    return output\n    \ndef find_index_of_row(input,row):\n    '''\n    Write a function to find the index of the given row in the list of rows.\n    \n    For eg. Input = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n        Row = 4\n        Index = 2\n    '''\n    \n    size = len(input)\n    for i in range(0,size):\n        if(row==input[i][0]):\n            return i\n    return -1\n    \ndef find_max_of_col(input):\n    '''\n    Write a function to find the max value of each column of the given matrix.\n    \n    For eg. Input = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n        Output = [5,7,11,15]\n    '''\n    \n    size = len(input)\n    for i in range(0,size):\n        max = input[i][0]\n        for j in range(1,size):\n            if(input[i][j]>max):\n                max = input[i][j]\n        print(max)\n    return\n    \ndef find_max_of_each_col(input):\n    '''\n    Write a function to find the max value of each column of the given matrix.\n    \n    For eg. Input = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n        Output = [4,8,12,16]\n    '''\n    \n    size = len(input)\n    output = []\n    for i in range(0,size):\n        max = input[0][i]\n        for j in range(1,size):\n            if(input[j][i]>max):\n                max = input[j][i]\n        output.append(max)\n    return output\n    \ndef find_max_of_each_row(input):\n    '''\n    Write a function to find the max value of each row of the given matrix.\n    \n    For eg. Input = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n        Output = [4,8,12,16]\n    '''\n    \n    size = len(input)\n    output = []\n    for i in range(0,size):\n        max = input[i][0]\n        for j in range(1,size):\n            if(input[i][j]>max):\n                max = input[i][j]\n        output.append(max)\n    return output\n    \ndef find_max_of_each_col_and_row(input):\n    '''\n    Write a function to find the max value of each column and row of the given matrix.\n    \n    For eg. Input = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n        Output = [4,8,12,16,4,8,12,16]\n    '''\n    \n    size = len(input)\n    output = []\n    for i in range(0,size):\n        output.append([])\n        for j in range(0,size):\n            output[i].append(input[i][j])\n        output[i].append(input[j][i])\n    return output\n    \ndef find_top_k_col(input):\n    '''\n    Write a function to find the top k cols of a matrix.\n    \n    For eg. Input = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n        Output = [[1,"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    Number = len(Input)\n    \n    if Number<2:\n        return True\n    \n    List = Input[0]\n    \n    for i in range(Number-1):\n        \n        List = list(set(List) & set(Input[i+1]))\n        \n        if List == []:\n            return False\n        \n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    elif len(Input[0]) == 0:\n        return True\n    elif len(Input[0])!= len(Input[1:]):\n        return False\n    else:\n        return (find_equal_tuple(Input[1:]))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    List = []\n    for i in Input:\n        List.append(len(i))\n    for i in range(len(List)):\n        for j in range(len(List) - i - 1):\n            if List[i]!= List[i + j + 1]:\n                return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = 1\n    swapped = True\n    while gap < n:\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        swapped = False\n        gap = gap * 2\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        gap = max(1, int(gap / 1.3))\n        for i in xrange(0, n-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    arr = nums[:]\n    gap = len(arr)\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(len(arr)-gap):\n            if arr[i] > arr[i+gap]:\n                arr[i],arr[i+gap] = arr[i+gap],arr[i]\n                swapped = True\n    return arr\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    while gap > 1:\n        gap = gap // 2\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i = i + 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = 1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    max_len = len(nums)\n    gap = 1\n    swapped = True\n    while gap < max_len:\n        gap = int(gap * 10)\n        swapped = False\n        for i in range(0, max_len - gap, gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums.sort()\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    sort_nums = nums[:]\n    _max = max(sort_nums)\n    for i in range(len(sort_nums)):\n        _min = min(sort_nums[i:])\n        if _max > _min:\n            sort_nums[sort_nums.index(_min, i)] = _max\n            sort_nums[i] = _min\n    return sort_nums\n    \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap!= 1 or swapped:\n        gap = gap // 1.3\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if a^2 - b^2 = n\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    # n is odd\n    for i in range(1, int(math.sqrt(n))):\n        if i*i == n:\n            return True\n    # n is even\n    for i in range(1, int(math.sqrt(n))):\n        if i*i == n:\n            return False\n    # n is odd\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = 0\n    b = 0\n    while n > 0:\n        a = a + 1\n        n = n - (a**2)\n    while n > 0:\n        b = b + 1\n        n = n - (b**2)\n    if a == b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = n\n    n = n * n\n    for i in range(1,x):\n        if i * i == n:\n            return True\n        if i * i < n:\n            return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(sqrt(n))):\n        if i*i == n:\n            return True\n        elif n - i*i == i:\n            return True\n    return False\n    \ndef pyth_Triple(a,b,c): \n    '''\n    Write a python function to check whether the three given numbers can form a pythagorean triple or not.\n    '''\n    return a*a + b*b == c*c\n    \ndef pyth_Double(a,b): \n    '''\n    Write a python function to check whether the given two numbers can form a pythagorean triple or not.\n    '''\n    return a*a + b*b == a*a\n    \ndef fib(n):\n    '''\n    Write a python function to check whether the given number is a Fibonacci Number or not.\n    '''\n    a,b = 0,1\n    while a <= n:\n        if a == n:\n            return True\n        a,b = b,a+b\n    return False\n    \ndef fib_Triple(a,b,c): \n    '''\n    Write a python function to check whether the given three numbers can form a pythagorean triple or not.\n    '''\n    return a*a + b*b == c*c\n    \ndef fib_Double(a,b): \n    '''\n    Write a python function to check whether the given two numbers can form a pythagorean triple or not.\n    '''\n    return a*a + b*b == a*a\n    \ndef anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef anagram_2(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    count = {}\n    for c in s1:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    for c in s2:\n        if c in count:\n            count[c] -= 1\n        else:\n            count[c] = 1\n    for k,v in count.items():\n        if v:\n            return False\n    return True\n    \ndef anagram_3(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1) == Counter(s2)\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef palindrome_2(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef palindrome_3(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_anagram(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_2(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1) == Counter(s2)\n    \ndef is_anagram_3(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_4(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return s1 == s2\n    \ndef is_anagram_5(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return s1.lower() == s2.lower()\n    \ndef is_anagram_6(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1) == Counter(s2)\n    \ndef is_anagram_7(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_8(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_9(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1.lower()) == Counter(s2.lower())\n    \ndef is_anagram_10(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1) == Counter(s2)\n    \ndef is_anagram_11(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_12(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1.lower()) == Counter(s2.lower())\n    \ndef is_anagram_13(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1.lower()) == sorted(s2.lower())\n    \ndef is_anagram_14(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1) == Counter(s2)\n    \ndef is_anagram_15(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_16(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1) == Counter(s2)\n    \ndef is_anagram_17(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagram_18(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1.lower()) == Counter(s2.lower())\n    \ndef is_anagram_19(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1.lower()) == sorted(s2.lower())\n    \ndef is_anagram_20(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return Counter(s1) == Counter(s2)\n    \ndef is_anagram_21(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_anagra"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if (i*i) == n - i*i:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s1=1\n    s2=n\n    while s2>=s1:\n        if (s1**2-s2**2)==n:\n            return True\n        else:\n            s1+=1\n            s2=n-s1**2\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n:\n        if i**2 == n:\n            return True\n        i+=1\n    return False\n    \n    \ndef prime_number(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n == 1:\n        return False\n    i = 2\n    while i < n:\n        if n%i == 0:\n            return False\n        i+=1\n    return True\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return ((n**2) - (n//4)) == n\n    \ndef dif_Triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two triangles or not.\n    '''\n    return ((n**2) - (n//3)) == n\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    squares = []\n    for i in range(n//2+1):\n        squares.append((i*i, i*i+i))\n    return any(a+b in squares for a in squares for b in squares)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 0):\n        return False\n    if (n == 1):\n        return False\n    if (n % 2 == 0):\n        return True\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return False\n    elif len(colors) == 1:\n        return True\n    else:\n        first_color = colors[0]\n        first_pattern = patterns[0]\n        if first_color == first_pattern:\n            return is_samepatterns(colors[1:], patterns[1:])\n        else:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color == 'black' or color =='red' or color == 'white':\n            continue\n        else:\n            return False\n    for pattern in patterns:\n        if pattern == 'a' or pattern == 'b' or pattern == 'c':\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all([colors[i]==patterns[i] for i in range(len(colors))])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Make a dictionary of colors and patterns. \n    # If the patterns is empty, then we cannot distinguish the colors. \n    # If the colors is empty, then we cannot distinguish the patterns. \n    if not patterns: \n        return False\n    elif not colors:\n        return False\n    \n    # Initialize a dictionary to store the count of each color. \n    # The key of the dictionary is the color, the value is the pattern count. \n    # If the color is not in the dictionary, then the count is 0.\n    colors_to_patterns = {}\n    for c in colors:\n        if c not in colors_to_patterns:\n            colors_to_patterns[c] = 0\n    \n    # Loop through all the patterns. \n    for pattern in patterns:\n        # If the color to pattern count is 0, then we cannot distinguish the colors. \n        if colors_to_patterns[pattern] == 0:\n            return False\n        # Update the color to pattern count for the current pattern.\n        # Notice that we are always updating the value to the next larger value. \n        colors_to_patterns[pattern] -= 1\n    \n    # If the dictionary only contains the pattern, then we can differentiate the colors. \n    if len(colors_to_patterns) == len(patterns):\n        return True\n    # Otherwise, it is a cyclic sequence, i.e., there is a cycle in the pattern sequence. \n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    if len(colors) == 0:\n        return True\n    if colors[0] == patterns[0]:\n        return is_samepatterns(colors[1:], patterns[1:])\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(colors):\n        if colors[i] not in patterns:\n            return False\n        i += patterns[colors[i]]\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    new_colors = []\n    for color in colors:\n        if len(patterns) == 0:\n            break\n        for pattern in patterns:\n            if len(pattern) == 0:\n                break\n            for i in range(len(pattern)):\n                if color[:len(pattern[i])] == pattern[i]:\n                    if i == len(pattern) - 1:\n                        new_colors.append(color)\n                        patterns.remove(pattern)\n                        break\n                    else:\n                        new_colors.append(color[len(pattern[i]):])\n    return new_colors\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if patterns[i] == patterns[i+1]:\n            if colors[i]!= colors[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            return False\n        if i > 0:\n            if colors[i] == colors[i - 1] and patterns[i] == patterns[i - 1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    d = {}\n    for i in range(len(colors)):\n        if patterns[i] in d:\n            if d[patterns[i]]!= colors[i]:\n                return False\n        else:\n            d[patterns[i]] = colors[i]\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for elem in test_list:\n        if elem[0] % K == 0 and elem[1] % K == 0:\n            output.append(elem)\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        for i in tup:\n            if i % K!= 0:\n                break\n        else:\n            tuples.append(tup)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    from itertools import combinations\n    divisible_tuples = []\n    for i in combinations(test_list, K):\n        if all(map(lambda x: x % K == 0, i)):\n            divisible_tuples.append(i)\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for a, b in test_list:\n        if a % K == 0 and b % K == 0:\n            output.append((a, b))\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if (tup[0] % K == 0) and (tup[1] % K == 0):\n            print tup\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [ tup for tup in test_list if all( int(i) % k == 0 for i in tup ) ]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = [[1,2,3,4,5], [2,4,6,8,10], [3,6,9,12,15], [4,8,12,16,20]]\n    result = []\n    for x in test_list:\n        if sum(x)%K == 0:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # we can also do the above in a single line\n    # return [x for x in test_list if all(i%k==0 for i in x)]\n    return [x for x in test_list if all(i%k==0 for i in x)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        for x in tup:\n            if x%K!= 0:\n                break\n        else:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n    \ndef is_odd(n):\n    return n%2==1\n    \ndef is_divisible(x,y):\n    '''\n    Write a python function to find whether a number is divisible by a given number.\n    '''\n    return (x%y==0)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s)%2)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the vowels in the given string.\n    '''\n    vowels = 'aeiou'\n    vowel_count = 0\n    for vowel in vowels:\n        for i in s:\n            if i == vowel:\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n    \ndef word_concat(s1,s2):\n    '''\n    Write a python function to check whether the two words are concatenated by each other.\n    '''\n    if s1[-1]!= s2[0]:\n        return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print \"even\"\n    else:\n        print \"odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_number = 1\n    for i in range(1, n): \n        tetrahedral_number += (2*i + 1) \n    return tetrahedral_number \n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    #(n + 1)**3 - 1\n    return ((n + 1) * ((n + 1)**3 - 1)) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [1,0,0,0,0,0,0,0,0,0,0,0]\n    # tn = n*(n+1)*(n+2)/6\n    for i in range(1, n+1):\n        tetrahedral_numbers[i] = tetrahedral_numbers[i-1]*(i+1)*(i+2)/6\n    return tetrahedral_numbers[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = n\n    total = 0\n    for i in range(1, n + 1):\n        total += i**(a + 1)\n    return total\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    if n == 4:\n        return 8\n    return n * tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3) + tetrahedral_number(n - 4)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    nth_tetrahedral_number = ((n-1)*(n-2)*(n-3))/6\n    return nth_tetrahedral_number\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 8\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\ndef kinetic_energy(m,v):\n    '''\n    Write a function to find the kinetic energy of a particle.\n    '''\n    return 0.5*m*v**2\ndef potential_energy(m,r):\n    '''\n    Write a function to find the potential energy of a particle.\n    '''\n    return m*G*m/r\ndef acceleration(m,v,r):\n    '''\n    Write a function to find the acceleration of a particle.\n    '''\n    return G*m/r**2 - v\ndef temp_cal(t,h,v):\n    '''\n    Write a function to calculate the average temperature of the universe.\n    '''\n    return t*(1-h) + v**2/2\ndef density_cal(m,v,r):\n    '''\n    Write a function to calculate the average density of the universe.\n    '''\n    return m/r**3\ndef temperature_cal(m,v,r):\n    '''\n    Write a function to calculate the average temperature of the universe.\n    '''\n    return m*v**2/2\ndef density_cal_sphere(r):\n    '''\n    Write a function to calculate the average density of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\ndef temperature_cal_sphere(r):\n    '''\n    Write a function to calculate the average temperature of a sphere.\n    '''\n    return 4.0*math.pi*r**3\ndef mean_pressure(m,r):\n    '''\n    Write a function to calculate the mean pressure of the universe.\n    '''\n    return m/r\ndef mean_pressure_sphere(r):\n    '''\n    Write a function to calculate the mean pressure of a sphere.\n    '''\n    return r**2\ndef pressure_cal(m,v,r):\n    '''\n    Write a function to calculate the pressure of the universe.\n    '''\n    return m*v/r\ndef mean_temp(t,r):\n    '''\n    Write a function to calculate the mean temperature of the universe.\n    '''\n    return t/r\ndef temp_cal_sphere(r):\n    '''\n    Write a function to calculate the average temperature of a sphere.\n    '''\n    return 4.0*math.pi*r**3\ndef mean_temp_sphere(r):\n    '''\n    Write a function to calculate the average temperature of a sphere.\n    '''\n    return 4.0*math.pi*r**3\ndef pressure_cal_sphere(r):\n    '''\n    Write a function to calculate the average pressure of a sphere.\n    '''\n    return 4.0*math.pi*r**3\ndef pressure_cal_sphere_force(r,F):\n    '''\n    Write a function to calculate the pressure of a sphere given force.\n    '''\n    return 4.0*math.pi*r**3*F\ndef pressure_cal_sphere_total(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef temp_cal_sphere(r):\n    '''\n    Write a function to calculate the average temperature of a sphere.\n    '''\n    return 4.0*math.pi*r**3\ndef mean_temp_sphere(r):\n    '''\n    Write a function to calculate the average temperature of a sphere.\n    '''\n    return 4.0*math.pi*r**3\ndef mean_speed(v,r):\n    '''\n    Write a function to calculate the average speed of the universe.\n    '''\n    return v/r\ndef pressure_cal_sphere_total(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef temp_cal_sphere_total(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef mean_speed_sphere(r):\n    '''\n    Write a function to calculate the average speed of a sphere.\n    '''\n    return r\ndef mean_speed_sphere_total(r):\n    '''\n    Write a function to calculate the average speed of a sphere.\n    '''\n    return r\ndef mean_speed_sphere_force(r,F):\n    '''\n    Write a function to calculate the average speed of a sphere given force.\n    '''\n    return r*F\ndef pressure_cal_sphere_total_force(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef temp_cal_sphere_total_force(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef mean_speed_sphere_total_force(r,F):\n    '''\n    Write a function to calculate the average speed of a sphere given force.\n    '''\n    return r*F\ndef energy_sphere(r):\n    '''\n    Write a function to calculate the kinetic energy of a sphere.\n    '''\n    return 0.5*4*math.pi*r**3\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\ndef surface_area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4.0*math.pi*r**2\ndef surface_area_sphere_v2(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4.0*math.pi*r**2\ndef surface_area_sphere_v3(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4.0*math.pi*r**2*math.sin(math.pi*r)\ndef average_speed(v,r):\n    '''\n    Write a function to calculate the average speed of a sphere.\n    '''\n    return v/r\ndef pressure_cal_sphere_force_total(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef temp_cal_sphere_force_total(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef average_speed_sphere_force(r,F):\n    '''\n    Write a function to calculate the average speed of a sphere given force.\n    '''\n    return r*F\ndef average_speed_sphere_force_total(r,F,m):\n    '''\n    Write a function to calculate the average speed of a sphere given force and mass.\n    '''\n    return r*F\ndef mean_pressure_sphere_force_total(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef mean_temp_sphere_force_total(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n    '''\n    return 4.0*math.pi*r**3*F/m\ndef mean_pressure_sphere_force_total_v2(r,F,m):\n    '''\n    Write a function to calculate the pressure of a sphere given force and mass.\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*math.pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*3.14159*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r<0:\n        raise ValueError(\"r cannot be negative\")\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r * r * r\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n=0\n    strr = strr.upper()\n    for i in strr:\n        n = n + ord(i)\n    n = n % 26\n    result = chr(n)\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print \"\".join(map(chr, [ord(x) for x in strr]))\n    \n    \ndef validate(input_string):\n    '''\n    Write a python function that takes a string and returns the first character of the string followed by the rest of the characters as a string, \n    but with upper and lower case characters converted to lower case.\n    '''\n    print \"\".join(list(input_string[0]) + input_string[1:].lower())\n    \n    \ndef get_Character_ascii_value(input_string):\n    '''\n    Write a python function to find the ASCII value of a character\n    '''\n    print ord(input_string)\n    \n    \ndef is_palindrome(input_string):\n    '''\n    Write a python function to check whether a string is a palindrome\n    '''\n    return input_string == input_string[::-1]\n    \n    \ndef get_palindrome_slices(input_string):\n    '''\n    Write a python function to find all the possible palindrome substrings of a given string.\n    '''\n    print [input_string[0:i] for i in xrange(0, len(input_string)+1)]\n    \n    \ndef get_big_substr(input_string):\n    '''\n    Write a python function to find the biggest substring of a given string which is palindrome.\n    '''\n    for i in xrange(len(input_string), 1, -1):\n        for j in xrange(0, i-1):\n            if is_palindrome(input_string[j:j+i]):\n                print input_string[j:j+i]\n                return\n            \n    \ndef sum_of_digits(input_num):\n    '''\n    Write a python function to find the sum of the digits of a given integer.\n    '''\n    return sum(list(map(int, list(str(input_num)))))\n    \n    \ndef is_pandigital(input_string):\n    '''\n    Write a python function to check whether a string is pandigital or not. A string is said to be pandigital if it contains all the digits from 1 to 9.\n    '''\n    for i in xrange(1, 10):\n        if str(i) not in input_string:\n            return False\n    return True\n    \n    \ndef count_digits(input_string):\n    '''\n    Write a python function to find the count of digits in a given string\n    '''\n    return len(list(set(input_string)))\n    \n    \ndef get_first_n_pandigital_products(n):\n    '''\n    Write a python function to find the n-th pandigital product and its multiplication table\n    '''\n    for i in xrange(10**n-1, 10**(n+1)-1):\n        j = i\n        count = 0\n        while j:\n            if j % 10 == 9:\n                count += 1\n            j /= 10\n        if count == n:\n            print i, i*9\n            return\n        \n    \ndef get_permutations(input_string):\n    '''\n    Write a python function to find the permutations of a given string\n    '''\n    print map(\"\".join, itertools.permutations(input_string))\n    \n    \ndef is_prime(input_number):\n    '''\n    Write a python function to find whether a given number is prime or not\n    '''\n    for i in xrange(2, input_number):\n        if input_number % i == 0:\n            return False\n    return True\n    \n    \ndef get_primes(input_number):\n    '''\n    Write a python function to find all the primes less than a given number\n    '''\n    for i in xrange(2, input_number):\n        if is_prime(i):\n            print i\n            \n    \ndef is_armstrong(input_number):\n    '''\n    Write a python function to find whether a given number is an armstrong number or not\n    '''\n    temp = input_number\n    sum_of_digits = 0\n    while temp > 0:\n        sum_of_digits += (temp % 10)**3\n        temp /= 10\n    return sum_of_digits == input_number\n    \n    \ndef get_armstrong_numbers(input_range):\n    '''\n    Write a python function to find all the armstrong numbers between a given range\n    '''\n    for i in xrange(input_range[0], input_range[1]+1):\n        if is_armstrong(i):\n            print i\n    \n    \ndef get_perfect_squares(input_range):\n    '''\n    Write a python function to find all the perfect squares between a given range\n    '''\n    for i in xrange(input_range[0], input_range[1]+1):\n        root = int(math.sqrt(i))\n        if root**2 == i:\n            print i\n    \n    \ndef get_perfect_square_numbers(input_range):\n    '''\n    Write a python function to find all the perfect square numbers between a given range\n    '''\n    for i in xrange(input_range[0], input_range[1]+1):\n        root = int(math.sqrt(i))\n        if root**2 == i:\n            print i\n        \n        \ndef get_perfect_squares_below(input_number):\n    '''\n    Write a python function to find all the perfect squares below a given number\n    '''\n    for i in xrange(1, input_number):\n        root = int(math.sqrt(i))\n        if root**2 == i:\n            print i\n    \n    \ndef get_perfect_squares_above(input_number):\n    '''\n    Write a python function to find all the perfect squares above a given number\n    '''\n    for i in xrange(input_number+1, 100000000):\n        root = int(math.sqrt(i))\n        if root**2 == i:\n            print i\n            \n            \ndef get_prime_factors(input_number):\n    '''\n    Write a python function to find all the prime factors of a given number\n    '''\n    for i in xrange(2, input_number):\n        if input_number % i == 0:\n            print i\n            \n    \ndef get_factors(input_number):\n    '''\n    Write a python function to find all the factors of a given number\n    '''\n    factors = []\n    for i in xrange(1, input_number+1):\n        if input_number % i == 0:\n            factors.append(i)\n    print factors\n    \n    \ndef is_pandigital_permutation(input_string):\n    '''\n    Write a python function to check whether a given string is a pandigital permutation or not\n    '''\n    l = set(input_string)\n    return len(l) == 10 and len(l.intersection(set(str(i) for i in xrange(1,10)))) == 9\n    \n    \ndef get_permutation_of_anagram(input_string):\n    '''\n    Write a python function to find the permutation of anagram of a given string\n    '''\n    temp = list(input_string)\n    temp.sort()\n    return \"\".join(temp)\n    \n    \ndef is_anagram(input_string):\n    '''\n    Write a python function to check whether a given string is an anagram of another string\n    '''\n    return get_permutation_of_anagram(input_string) == input_string\n    \n    \ndef get_anagram_count(input_string):\n    '''\n    Write a python function to count the anagrams of a given string\n    '''\n    input_string = input_string.lower()\n    return len(set(get_permutation_of_anagram(input_string)))\n    \n    \ndef is_anagram_of_palindrome(input_string):\n    '''\n    Write a python function to check whether a given string is an anagram of palindrome or not\n    '''\n    return get_anagram_count(input_string) % 2 == 0\n    \n    "
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(reduce(lambda x,y:x+ord(y),strr,0)%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum = sum + ord(strr[i])\n    mod = sum % 26\n    if mod == 0:\n        return 'a'\n    else:\n        return chr(mod + 97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def ch(char):\n        char = ord(char)\n        return (char%26)\n    return (''.join([chr(int(ch(c))%26) for c in strr]))\n    "
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return reduce(lambda x,y:x+y,map(ord,strr))%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    res = 0\n    for i in strr:\n        res = (res + ord(i)) % 26\n    return chr(res + 97)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if strr == '':\n        return 0\n    else:\n        return (ord(strr[0])+get_Char(strr[1:]))%26\n    \ndef get_Sorted_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 in increasing order.\n    '''\n    if strr == '':\n        return 0\n    else:\n        return (get_Char(strr)+get_Sorted_Char(strr[1:]))%26\n    \ndef get_Chr(num):  \n    '''\n    Write a python function to convert the ASCII value of a character to the corresponding character.\n    '''\n    return chr(num)\n    \ndef get_Encrypt(strr,key):  \n    '''\n    Write a python function to find the encrypted string made by XORing each character of the given string with the corresponding ASCII value of the key string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return chr(ord(strr[0])^ord(key[0]))+get_Encrypt(strr[1:],key[1:])\n    \ndef get_Decrypt(strr,key):  \n    '''\n    Write a python function to find the decrypted string made by XORing each character of the given encrypted string with the corresponding ASCII value of the key string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return chr(ord(strr[0])^ord(key[0]))+get_Decrypt(strr[1:],key[1:])\n    \ndef get_Reverse(strr):  \n    '''\n    Write a python function to find the string which is the reverse of the given string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return get_Reverse(strr[1:])+strr[0]\n    \ndef get_Excel(strr):  \n    '''\n    Write a python function to find the string made by adding the ASCII value of all the characters of the given string modulo 26 in the excel column format.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return (get_Char(strr)+get_Excel(strr[1:]))%26\n    \ndef get_Decrypt_Excel(strr,key):  \n    '''\n    Write a python function to find the decrypted string made by XORing each character of the given encrypted string with the corresponding ASCII value of the key string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return get_Encrypt(strr,key)+get_Decrypt_Excel(strr[len(get_Encrypt(strr,key)):],key)\n    \ndef get_Hex(strr):  \n    '''\n    Write a python function to find the string made by adding the ASCII value of all the characters of the given string modulo 16.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return (get_Char(strr)+get_Hex(strr[1:]))%16\n    \ndef get_Decrypt_Hex(strr,key):  \n    '''\n    Write a python function to find the decrypted string made by XORing each character of the given encrypted string with the corresponding ASCII value of the key string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return get_Encrypt(strr,key)+get_Decrypt_Hex(strr[len(get_Encrypt(strr,key)):],key)\n    \ndef get_Decrypt_Hex_Reverse(strr,key):  \n    '''\n    Write a python function to find the decrypted string made by XORing each character of the given encrypted string with the corresponding ASCII value of the key string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return get_Excel(strr)+get_Reverse(get_Decrypt_Hex(strr[len(get_Encrypt(strr,key)):],key))\n    \ndef get_MD5(strr):  \n    '''\n    Write a python function to find the string made by appending 5 zeroes at the end of the given string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return strr+'\\x00\\x00\\x00\\x00\\x00'\n    \ndef get_Decrypt_MD5(strr,key):  \n    '''\n    Write a python function to find the decrypted string made by XORing each character of the given encrypted string with the corresponding ASCII value of the key string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return get_Encrypt(strr,key)+get_Decrypt_MD5(strr[len(get_Encrypt(strr,key)):],key)\n    \ndef get_MD5_Reverse(strr):  \n    '''\n    Write a python function to find the string made by appending 5 zeroes at the end of the given string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return get_Reverse(get_MD5(strr))\n    \ndef get_SHA1(strr):  \n    '''\n    Write a python function to find the string made by appending 5 zeroes at the end of the given string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return strr+'\\x00\\x00\\x00\\x00\\x00'\n    \ndef get_Decrypt_SHA1(strr,key):  \n    '''\n    Write a python function to find the decrypted string made by XORing each character of the given encrypted string with the corresponding ASCII value of the key string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return get_Encrypt(strr,key)+get_Decrypt_SHA1(strr[len(get_Encrypt(strr,key)):],key)\n    \ndef get_SHA1_Reverse(strr):  \n    '''\n    Write a python function to find the string made by appending 5 zeroes at the end of the given string.\n    '''\n    if strr == '':\n        return ''\n    else:\n        return get_Reverse(get_SHA1(strr))\n    \ndef get_Crypto_Object(strr):  \n    '''\n    Write a python function to create a new crypto object using the given string.\n    '''\n    return strr.decode()\n    \ndef get_Decrypt_Crypto_Object(strr,key):  \n    '''\n    Write a python function to find the decrypted string made by XORing each character of the given crypto object with the corresponding ASCII value of the key string.\n    '''\n    return get_Encrypt(strr,key).decode()\n    \ndef get_Reverse_Crypto_Object(strr):  \n    '''\n    Write a python function to find the string made by appending 5 zeroes at the end of the given string.\n    '''\n    return strr[::-1].encode()\n    \ndef get_Decrypt_Reverse_Crypto_Object(strr,key):  \n    '''\n    Write a python function to find the decrypted string made by XORing each character of the given encrypted string with the corresponding ASCII value of the key string.\n    '''\n    return get_Encrypt(strr,key).decode()+get_Reverse(strr[len(get_Encrypt(strr,key)):]).encode()\n    \ndef get_Crypto_String(strr):  \n    '''\n    Write a python function to find the string made by adding the ASCII value of all the characters of the given string modulo 26 in descending order.\n    '''\n    return ''.join(sorted(list(strr),reverse=True))\n    \ndef get_Decrypt_Crypto_String(strr,key):  \n    '''\n    Write a python function to find the decrypted strin"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result=0\n    for c in strr:\n        result=result+ord(c)\n    return chr(result%26+97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr=strr.replace(' ', '')\n    strr=strr.lower()\n    # print(strr)\n    ascii_list=[]\n    for ele in strr:\n        ascii_list.append(ord(ele))\n    ascii_list=[x%26 for x in ascii_list]\n    # print(ascii_list)\n    res=''\n    for ele in ascii_list:\n        res+=chr(ele+97)\n    return res\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    newman_sequence = [0]\n    for i in range(1, n + 1):\n        # this is the new sequence\n        if i % 2 == 0:\n            newman_sequence.append(newman_sequence[-1] + 1)\n        else:\n            newman_sequence.append(newman_sequence[-1] - 1)\n    return newman_sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x=1\n    if n<=0:\n        print \"Enter a non-negative number!\"\n    else:\n        while n>0:\n            n-=1\n            x=x*(3*x-1)\n        print x\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 13\n    if n == 6:\n        return 21\n    if n == 7:\n        return 34\n    if n == 8:\n        return 55\n    if n == 9:\n        return 89\n    if n == 10:\n        return 144\n    if n == 11:\n        return 233\n    if n == 12:\n        return 377\n    if n == 13:\n        return 610\n    if n == 14:\n        return 924\n    if n == 15:\n        return 1551\n    if n == 16:\n        return 2584\n    if n == 17:\n        return 4181\n    if n == 18:\n        return 6765\n    if n == 19:\n        return 11258\n    if n == 20:\n        return 14326\n    if n == 21:\n        return 22552\n    if n == 22:\n        return 48629\n    if n == 23:\n        return 75075\n    if n == 24:\n        return 121393\n    if n == 25:\n        return 196418\n    if n == 26:\n        return 317811\n    if n == 27:\n        return 533229\n    if n == 28:\n        return 829139\n    if n == 29:\n        return 1493073\n    if n == 30:\n        return 2415661\n    if n == 31:\n        return 372036\n    if n == 32:\n        return 5927879\n    if n == 33:\n        return 860750\n    if n == 34:\n        return 1307674\n    if n == 35:\n        return 1767766\n    if n == 36:\n        return 2865719\n    if n == 37:\n        return 5111403\n    if n == 38:\n        return 832040\n    if n == 39:\n        return 1365249\n    if n == 40:\n        return 2178309\n    if n == 41:\n        return 3524578\n    if n == 42:\n        return 5702687\n    if n == 43:\n        return 9288574\n    if n == 44:\n        return 1479296\n    if n == 45:\n        return 2700713\n    if n == 46:\n        return 4981836\n    if n == 47:\n        return 7338556\n    if n == 48:\n        return 1122876\n    if n == 49:\n        return 1636168\n    if n == 50:\n        return 2916560\n    if n == 51:\n        return 5272291\n    if n == 52:\n        return 8459248\n    if n == 53:\n        return 14315588\n    if n == 54:\n        return 2188597\n    if n == 55:\n        return 3738561\n    if n == 56:\n        return 6289830\n    if n == 57:\n        return 9340192\n    if n == 58:\n        return 1484377\n    if n == 59:\n        return 2499132\n    if n == 60:\n        return 4797778\n    if n == 61:\n        return 7552987\n    if n == 62:\n        return 12128881\n    if n == 63:\n        return 1879272\n    if n == 64:\n        return 3487170\n    if n == 65:\n        return 5793895\n    if n == 66:\n        return 8683926\n    if n == 67:\n        return 1339356\n    if n == 68:\n        return 2038251\n    if n == 69:\n        return 3569778\n    if n == 70:\n        return 6082979\n    if n == 71:\n        return 9292938\n    if n == 72:\n        return 1498385\n    if n == 73:\n        return 2223145\n    if n == 74:\n        return 3770799\n    if n == 75:\n        return 6115960\n    if n == 76:\n        return 9363972\n    if n == 77:\n        return 1522308\n    if n == 78:\n        return 2284473\n    if n == 79:\n        return 3939385\n    if n == 80:\n        return 6314356\n    if n == 81:\n        return 9668599\n    if n == 82:\n        return 1479490\n    if n == 83:\n        return 2499808\n    if n == 84:\n        return 4799274\n    if n == 85:\n        return 7302934\n    if n == 86:\n        return 12128099\n    if n == 87:\n        return 1879474\n    if n == 88:\n        return 3487194\n    if n == 89:\n        return 5793838\n    if n == 90:\n        return 8683924\n    if n == 91:\n        return 1339356\n    if n == 92:\n        return 2038257\n    if n == 93:\n        return 3569784\n    if n == 94:\n        return 6082979\n    if n == 95:\n        return 9292940\n    if n == 96:\n        return 1498386\n    if n == 97:\n        return 2223146\n    if n == 98:\n        return 3770799\n    if n == 99:\n        return 6115961\n    if n == 100:\n        return 9363976\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Start from 1, since 1 is the first number.\n    for i in range(1, n+1):\n        # Find the next number in the sequence using a recursive function.\n        next = next_number(i)\n        # Write the new number to the console.\n        print i,\n    \n    # Prompt the user to see the first n numbers of the sequence.\n    while True:\n        # Get the user's input for the first n numbers of the sequence.\n        answer = int(raw_input('\\nEnter the number of the first n numbers of the sequence: '))\n        # Ensure the user's input is within the range of the sequence.\n        if answer in range(1, n+1):\n            # Find the next number in the sequence using a recursive function.\n            next = next_number(answer)\n            # Write the new number to the console.\n            print answer,\n            break\n        else:\n            # Prompt the user to input a valid number.\n            print '\\nInvalid input. Try again.'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #I know that a newman-conway sequence will start with 101\n    if n == 1: \n        return 101\n    if n == 2: \n        return 201\n    if n == 3: \n        return 301\n    if n == 4: \n        return 401\n    #this is where the code starts to get hairy\n    number = sequence(n-1)\n    newNumber = (number * (number + 1)) / 2\n    return newNumber\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    for i in range(1, n):\n        seq.append(seq[-1] * 3 - 2)\n    return seq[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert(n>=1)\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = [1, 2, 4]\n    count = 1\n    while count < n:\n        s.append(s[-1]+s[-2]+s[-3])\n        count += 1\n    return s[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 3\n    elif n == 4: \n        return 4\n    else: \n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print(\"Input Radius: \", r)\n    return 4 * (3.141592 * r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    srfarea = 4 * math.pi * r**2\n    return srfarea\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if type(r)!= float or r < 0:\n        print(\"r must be a positive real number.\")\n        return None\n    area = 4.0*math.pi*r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r ** 2\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(1/2*n*(2*n + 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Logic is to make the function to find the formula for the nth centered hexagonal number.\n    # i.e. 7n*(2n-1)\n    # 7n is odd and the first hexagonal number is 6\n    # (2n-1) is even and the first hexagonal number is 5\n    \n    return 7*n*(2*n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return (-(1 + 2**0.5)**n + 2**0.5) / 2**0.5\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(2*n - 1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    from math import sqrt\n    return int(n*(2*n+1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * (2 * (2 * n + 1) + 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * ((3 * n) + 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(2*n + 1)/2)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys_list = []\n    keys_list.extend(dict1.keys())\n    keys_list.extend(dict2.keys())\n    keys_list.extend(dict3.keys())\n    keys_list = sorted(keys_list)\n    print(keys_list)\n    out = {}\n    for i in keys_list:\n        if i in dict1.keys():\n            out[i] = dict1[i]\n        if i in dict2.keys():\n            out[i] = dict2[i]\n        if i in dict3.keys():\n            out[i] = dict3[i]\n    return out\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    for dict_input in [dict1, dict2, dict3]:\n        for key in dict_input:\n            if key in dict_merged:\n                if isinstance(dict_input[key], dict):\n                    dict_merged[key] = merge_dictionaries_three(dict_merged[key], dict_input[key])\n                else:\n                    dict_merged[key] = dict_input[key]\n            else:\n                dict_merged[key] = dict_input[key]\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1.keys():\n        dict4[key] = dict1[key]\n    for key in dict2.keys():\n        dict4[key] = dict2[key]\n    for key in dict3.keys():\n        dict4[key] = dict3[key]\n    return dict4\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1.keys():\n        dict4[key] = dict1[key]\n    for key in dict2.keys():\n        dict4[key] = dict2[key]\n    return dict4\n    \ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict1.update(dict2)\n    return dict4\n    \ndef test_merge_dictionaries_three():\n    dict1 = {\"a\": 1, \"b\": 2}\n    dict2 = {\"b\": 3, \"c\": 4}\n    dict3 = {\"c\": 5, \"d\": 6}\n    assert merge_dictionaries_three(dict1, dict2, dict3) == {'a': 1, 'b': 3, 'c': 5, 'd': 6}\n    \ndef test_merge_dictionaries_two():\n    dict1 = {\"a\": 1, \"b\": 2}\n    dict2 = {\"b\": 3, \"c\": 4}\n    assert merge_dictionaries_two(dict1, dict2) == {'a': 1, 'b': 3, 'c': 4}\n    \ndef test_merge_dictionaries_one():\n    dict1 = {\"a\": 1, \"b\": 2}\n    dict2 = {\"b\": 3, \"c\": 4}\n    assert merge_dictionaries_one(dict1, dict2) == {'a': 1, 'b': 3, 'c': 4}\n    \nif __name__ == '__main__':\n    test_merge_dictionaries_three()\n    test_merge_dictionaries_two()\n    test_merge_dictionaries_one()\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for i in range(len(dict1)):\n        d.update({dict1[i]:dict2[i]})\n    for j in range(len(dict3)):\n        d.update({dict3[j]:dict2[j]})\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return_dict = {}\n    for d in [dict1, dict2, dict3]:\n        for key in d:\n            return_dict[key] = d[key]\n    return return_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    m=dict1.copy()\n    m.update(dict2)\n    m.update(dict3)\n    return m\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1,dict):\n        raise TypeError('First argument must be a dictionary.')\n    if not isinstance(dict2,dict):\n        raise TypeError('Second argument must be a dictionary.')\n    if not isinstance(dict3,dict):\n        raise TypeError('Third argument must be a dictionary.')\n    \n    for k, v in dict1.items():\n        if k in dict2:\n            dict2[k] = dict2[k] + v\n        else:\n            dict2[k] = v\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #dict1 = {\"v\":1, \"x\":5, \"l\":10}\n    #dict2 = {\"y\":2, \"z\":5}\n    #dict3 = {\"l\":20, \"k\":10}\n    #newdict = {}\n    #newdict.update(dict1)\n    #newdict.update(dict2)\n    #newdict.update(dict3)\n    #return newdict\n    #newdict = {}\n    #if len(dict1) > len(dict2):\n    #    newdict = dict1\n    #    newdict.update(dict2)\n    #else:\n    #    newdict = dict2\n    #    newdict.update(dict1)\n    #return newdict\n    newdict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            newdict[key] = dict1[key] + dict2[key] + dict3[key]\n        elif key in dict2:\n            newdict[key] = dict1[key] + dict2[key]\n        elif key in dict3:\n            newdict[key] = dict1[key] + dict3[key]\n        else:\n            newdict[key] = dict1[key]\n    return newdict\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    newdict = {}\n    for key in dict1:\n        if key in dict2:\n            newdict[key] = dict1[key] + dict2[key]\n        else:\n            newdict[key] = dict1[key]\n    return newdict\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    newdict = {}\n    for key in dict1:\n        newdict[key] = dict1[key]\n    for key in dict2:\n        if key in newdict:\n            newdict[key] += dict2[key]\n        else:\n            newdict[key] = dict2[key]\n    return newdict\ndef sort_dictionary(dict1):\n    '''\n    Write a function to sort a dictionary.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[0])\ndef reverse_dictionary(dict1):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    newdict = {}\n    for key in dict1:\n        newdict[dict1[key]] = key\n    return newdict\ndef list_to_string(list1):\n    '''\n    Write a function to convert a list of characters to a string.\n    '''\n    return ''.join(list1)\ndef string_to_list(string1):\n    '''\n    Write a function to convert a string to a list of characters.\n    '''\n    return list(string1)\ndef get_words_list(string1):\n    '''\n    Write a function to convert a string to a list of words.\n    '''\n    return string1.split()\ndef list_to_string_two(list1):\n    '''\n    Write a function to convert a list of characters to a string.\n    '''\n    return ''.join(list1)\ndef string_to_list_two(string1):\n    '''\n    Write a function to convert a string to a list of characters.\n    '''\n    return list(string1)\ndef get_words_list_two(string1):\n    '''\n    Write a function to convert a string to a list of words.\n    '''\n    return string1.split()\ndef get_words_set(string1):\n    '''\n    Write a function to convert a string to a set of words.\n    '''\n    words = get_words_list(string1)\n    return set(words)\ndef get_unique_words(string1):\n    '''\n    Write a function to convert a string to a set of unique words.\n    '''\n    words = get_words_list(string1)\n    return set(words)\ndef get_unique_words_two(string1):\n    '''\n    Write a function to convert a string to a set of unique words.\n    '''\n    words = get_words_list_two(string1)\n    return set(words)\ndef string_to_int(string1):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(string1)\ndef convert_int_to_string(int1):\n    '''\n    Write a function to convert an integer to a string.\n    '''\n    return str(int1)\ndef convert_string_to_int(string1):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(string1)\ndef get_frequent_words(string1,int1):\n    '''\n    Write a function to convert a string to a set of frequent words.\n    '''\n    words = get_words_list_two(string1)\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    newlist = []\n    for key in freq:\n        if freq[key] >= int1:\n            newlist.append(key)\n    return newlist\ndef get_frequent_words_two(string1,int1):\n    '''\n    Write a function to convert a string to a set of frequent words.\n    '''\n    words = get_words_list_two(string1)\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    newlist = []\n    for key in freq:\n        if freq[key] >= int1:\n            newlist.append(key)\n    return newlist\ndef get_frequent_words_three(string1,int1):\n    '''\n    Write a function to convert a string to a set of frequent words.\n    '''\n    words = get_words_list_two(string1)\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    newlist = []\n    for key in freq:\n        if freq[key] >= int1:\n            newlist.append((freq[key],key))\n    newlist.sort()\n    newlist.reverse()\n    return newlist\ndef get_frequent_words_four(string1,int1):\n    '''\n    Write a function to convert a string to a set of frequent words.\n    '''\n    words = get_words_list_two(string1)\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    newlist = []\n    for key in freq:\n        if freq[key] >= int1:\n            newlist.append((freq[key],key))\n    newlist.sort()\n    return newlist\ndef get_frequent_words_five(string1,int1):\n    '''\n    Write a function to convert a string to a set of frequent words.\n    '''\n    words = get_words_list_two(string1)\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    newlist = []\n    for key in freq:\n        if freq[key] >= int1:\n            newlist.append((freq[key],key))\n    return newlist\ndef get_frequent_words_six(string1,int1):\n    '''\n    Write a function to convert a string to a set of frequent words.\n    '''\n    words = get_words_list_two(string1)\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        els"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict3.keys():\n        dict2[key] = dict3[key]\n    return dict2\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict1)!=0:\n        for i in dict1:\n            if len(dict2)!=0:\n                if len(dict3)!=0:\n                    for j in dict2:\n                        for k in dict3:\n                            if j == k:\n                                dict1[i]=dict1[i] + dict2[j] + dict3[k]\n                            else:\n                                continue\n                else:\n                    for j in dict2:\n                        if j in dict1:\n                            dict1[j] = dict1[j] + dict2[j]\n                        else:\n                            continue\n            else:\n                for j in dict3:\n                    if j in dict1:\n                        dict1[j] = dict1[j] + dict3[j]\n                    else:\n                        continue\n    else:\n        dict1.update(dict2)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    unique_list = []\n    freq_dict = {}\n    for item in list1:\n        if item in unique_list:\n            freq_dict[item] += 1\n        else:\n            unique_list.append(item)\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        if i in freq:\n            freq[i]=freq[i]+1\n        else:\n            freq[i]=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    res = {}\n    for elem in list1:\n        res[elem] = res.get(elem,0) + 1\n    return res\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.defaultdict(int)\n    for item in list1:\n        d[item] += 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        if x in d:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i not in dic.keys():\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.defaultdict(int)\n    for item in list1:\n        counts[item] += 1\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for elem in list1:\n        if elem in d:\n            d[elem] += 1\n        else:\n            d[elem] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for num in list1:\n        if num in dict1:\n            dict1[num]=dict1[num]+1\n        else:\n            dict1[num]=1\n    return dict1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # return int(bin(n)[2:].replace('0', '9'))\n    return n - (n & -n)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N % 2 == 0:\n        return N - 1\n    else:\n        return N - 2\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    return sorted([abs(n-N) for n in range(1,N)])[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n == 0:\n        return -1\n    result = 1\n    while result < n:\n        result += 1\n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def helper(n):\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return 2 * helper(n // 2)\n        return n * 3 + 1\n    res = helper(N)\n    curr = res\n    while curr - N > 1:\n        curr = helper(curr - N)\n    return curr\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N, 0, -1):\n        if i % 3 == 0 and i % 5 == 0:\n            return i\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 2 ** int(math.ceil(math.log(N, 2)))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    '''\n    if n is bigger than any number in the array\n    return number in array\n    '''\n    array = [x for x in xrange(1, N)]\n    return array[bisect.bisect(array, n)-1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list_of_len=[]\n    for i in list1:\n        list_of_len.append(len(i))\n    return max(list_of_len)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for word in list1:\n        list2.append(len(word))\n    return max(list2)\n    \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse a list and print the first 10 elements.\n    '''\n    list1.reverse()\n    return list1[0:10]\n    \ndef sort_list(list1):\n    '''\n    Write a python function to sort a list and print the first 10 elements.\n    '''\n    list1.sort()\n    return list1[0:10]\n    \ndef multiply_list(list1):\n    '''\n    Write a python function to multiply all the elements in a list.\n    '''\n    mul = 1\n    for x in list1:\n        mul = mul * x\n    return mul\n    \ndef count_char(list1,char):\n    '''\n    Write a python function to find the count of a character in a list.\n    '''\n    count = 0\n    for x in list1:\n        if x == char:\n            count = count + 1\n    return count\n    \ndef rotate_list(list1,n):\n    '''\n    Write a python function to rotate a list by n elements.\n    '''\n    return list1[n:] + list1[0:n]\n    \ndef get_each_list(list1,list2):\n    '''\n    Write a python function to get the first 10 elements of each list in a list.\n    '''\n    list3 = []\n    for x in list2:\n        list3.append(list1[x])\n    return list3\n    \ndef flip_list(list1):\n    '''\n    Write a python function to flip a list.\n    '''\n    return list1[::-1]\n    \ndef find_mul(list1,mul):\n    '''\n    Write a python function to find the index of a number in a list and print the result.\n    '''\n    for x in range(0,len(list1)):\n        if list1[x] == mul:\n            return x\n        else:\n            x = x + 1\n    return -1\n    \ndef get_word(list1):\n    '''\n    Write a python function to get the first word in a list.\n    '''\n    for word in list1:\n        return word\n    \ndef get_string(list1):\n    '''\n    Write a python function to get the first word in a list.\n    '''\n    return ''.join(list1)\n    \ndef get_each_list(list1,list2):\n    '''\n    Write a python function to get the first word in a list.\n    '''\n    list3 = []\n    for x in list2:\n        list3.append(list1[x])\n    return list3\n    \ndef is_member(list1,num):\n    '''\n    Write a python function to find if a number is in a list and print the result.\n    '''\n    if num in list1:\n        return True\n    else:\n        return False\n    \ndef get_char(list1):\n    '''\n    Write a python function to get the first word in a list.\n    '''\n    return list1[0]\n    \ndef get_each_list(list1,list2):\n    '''\n    Write a python function to get the first word in a list.\n    '''\n    list3 = []\n    for x in list2:\n        list3.append(list1[x])\n    return list3\n    \ndef get_item(list1,num):\n    '''\n    Write a python function to get the first word in a list.\n    '''\n    return list1[num]\n    \ndef get_item_last(list1,num):\n    '''\n    Write a python function to get the last word in a list.\n    '''\n    return list1[-num]\n    \ndef remove_item(list1,num):\n    '''\n    Write a python function to remove the first word in a list.\n    '''\n    return list1[:num] + list1[num+1:]\n    \ndef get_item_slice(list1,start,end):\n    '''\n    Write a python function to get the slice of a word from a list.\n    '''\n    return list1[start:end]\n    \ndef get_item_count(list1,char):\n    '''\n    Write a python function to count the number of a character in a list.\n    '''\n    count = 0\n    for x in list1:\n        if x == char:\n            count = count + 1\n    return count\n    \ndef get_item_first(list1,num):\n    '''\n    Write a python function to get the first word in a list.\n    '''\n    return list1[0:num]\n    \ndef get_item_middle(list1,num):\n    '''\n    Write a python function to get the first word in a list.\n    '''\n    return list1[num]\n    \ndef get_item_last(list1,num):\n    '''\n    Write a python function to get the last word in a list.\n    '''\n    return list1[-num:]\n    \ndef find_item(list1,num):\n    '''\n    Write a python function to find the index of a word in a list.\n    '''\n    for x in range(0,len(list1)):\n        if list1[x] == num:\n            return x\n        else:\n            x = x + 1\n    return -1\n    \ndef replace_item(list1,num,item):\n    '''\n    Write a python function to replace the first word in a list with another word.\n    '''\n    list1[num] = item\n    return list1\n    \ndef insert_item(list1,num,item):\n    '''\n    Write a python function to insert a word in a list at a given position.\n    '''\n    list1.insert(num,item)\n    return list1\n    \ndef remove_item_last(list1,num):\n    '''\n    Write a python function to remove the last word in a list.\n    '''\n    return list1[:-num]\n    \ndef remove_item_first(list1,num):\n    '''\n    Write a python function to remove the first word in a list.\n    '''\n    return list1[num+1:]\n    \ndef remove_item_middle(list1,num):\n    '''\n    Write a python function to remove the first word in a list.\n    '''\n    return list1[num+1:]\n    \ndef get_list_length(list1):\n    '''\n    Write a python function to get the length of a list.\n    '''\n    return len(list1)\n    \ndef get_list_max(list1):\n    '''\n    Write a python function to get the maximum value of a list.\n    '''\n    return max(list1)\n    \ndef get_list_min(list1):\n    '''\n    Write a python function to get the minimum value of a list.\n    '''\n    return min(list1)\n    \ndef get_list_avg(list1):\n    '''\n    Write a python function to get the average of a list.\n    '''\n    return sum(list1)/float(len(list1))\n    \ndef get_list_reverse(list1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef get_list_sort(list1):\n    '''\n    Write a python function to sort a list and print the first 10 elements.\n    '''\n    list1.sort()\n    return list1[0:10]\n    \ndef get_list_append(list1,num):\n    '''\n    Write a python function to add a word to a list.\n    '''\n    list1.append(num)\n    return list1\n    \ndef get_list_insert(list1,num,item):\n    '''\n    Write a python function to add a word to a list.\n    '''\n    list1.insert(num,item)\n    return list1\n    \ndef get_list_pop(list1):\n    '''\n    Write a python function to remove the las"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    x = max([len(i) for i in list1])\n    return x\n    \ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word in the list.\n    '''\n    x = max([len(i) for i in list1])\n    return x\n    \ndef min_word(list1):\n    '''\n    Write a python function to find the minimum length word in the list.\n    '''\n    x = min([len(i) for i in list1])\n    return x\n    \ndef max_word(list1):\n    '''\n    Write a python function to find the maximum length word in the list.\n    '''\n    x = max([len(i) for i in list1])\n    return x\n    \ndef max_min_word(list1):\n    '''\n    Write a python function to find the maximum and minimum length words in the list.\n    '''\n    x = max([len(i) for i in list1])\n    y = min([len(i) for i in list1])\n    return x, y\n    \ndef word_count(list1):\n    '''\n    Write a python function to find the count of the number of words in the list.\n    '''\n    x = len(list1)\n    return x\n    \ndef char_count(list1):\n    '''\n    Write a python function to find the count of the number of characters in the list.\n    '''\n    x = sum([len(i) for i in list1])\n    return x\n    \ndef avg_word_len(list1):\n    '''\n    Write a python function to find the average word length in the list.\n    '''\n    x = sum([len(i) for i in list1])/len(list1)\n    return x\n    \ndef avg_char_len(list1):\n    '''\n    Write a python function to find the average character length in the list.\n    '''\n    x = sum([len(i) for i in list1])/len(list1)\n    return x\n    \ndef list_range(list1):\n    '''\n    Write a python function to find the range of the list.\n    '''\n    x = max(list1)-min(list1)\n    return x\n    \ndef split_list(list1):\n    '''\n    Write a python function to split a list into two equal parts.\n    '''\n    n = len(list1)\n    return list1[:n/2], list1[n/2:]\n    \ndef sorted_list(list1):\n    '''\n    Write a python function to sort a list.\n    '''\n    x = sorted(list1)\n    return x\n    \ndef copy_list(list1):\n    '''\n    Write a python function to copy a list.\n    '''\n    list2 = list1[:]\n    return list2\n    \ndef get_value(list1):\n    '''\n    Write a python function to get a value from a list.\n    '''\n    try:\n        x = list1[0]\n        return x\n    except:\n        return 'invalid input'\n        \ndef index_val(list1):\n    '''\n    Write a python function to get the index of a value from a list.\n    '''\n    try:\n        x = list1.index(get_value(list1))\n        return x\n    except:\n        return 'invalid input'\n        \ndef remove_val(list1):\n    '''\n    Write a python function to remove a value from a list.\n    '''\n    try:\n        x = get_value(list1)\n        list1.remove(x)\n        return list1\n    except:\n        return 'invalid input'\n        \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef sort_list(list1):\n    '''\n    Write a python function to sort a list.\n    '''\n    list1.sort()\n    return list1\n    \ndef list_append(list1, list2):\n    '''\n    Write a python function to append two lists.\n    '''\n    list1.append(list2)\n    return list1\n    \ndef set_count(list1):\n    '''\n    Write a python function to find the count of the number of unique items in the list.\n    '''\n    x = len(list(set(list1)))\n    return x\n    \ndef set_intersection(list1, list2):\n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    x = list(set1.intersection(set2))\n    return x\n    \ndef set_difference(list1, list2):\n    '''\n    Write a python function to find the difference of two lists.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    x = list(set1.difference(set2))\n    return x\n    \ndef set_symmetric_difference(list1, list2):\n    '''\n    Write a python function to find the symmetric difference of two lists.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    x = list(set1.symmetric_difference(set2))\n    return x\n    \ndef sort_list_rev(list1):\n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    list1.sort(reverse=True)\n    return list1\n    \ndef filter_list(list1, item):\n    '''\n    Write a python function to filter a list for a specific value.\n    '''\n    list2 = []\n    for i in list1:\n        if i == item:\n            list2.append(i)\n    return list2\n    \ndef sum_list(list1):\n    '''\n    Write a python function to find the sum of all values in the list.\n    '''\n    x = sum(list1)\n    return x\n    \ndef is_list(list1):\n    '''\n    Write a python function to check if a value is a list.\n    '''\n    return isinstance(list1, list)\n    \ndef count_list(list1):\n    '''\n    Write a python function to find the number of items in a list.\n    '''\n    x = len(list1)\n    return x\n    \ndef list_index(list1):\n    '''\n    Write a python function to find the index of a value in a list.\n    '''\n    try:\n        x = list1.index(get_value(list1))\n        return x\n    except:\n        return 'invalid input'\n    \ndef reverse_list_index(list1):\n    '''\n    Write a python function to find the reverse index of a value in a list.\n    '''\n    try:\n        x = list1.index(get_value(list1))\n        return x\n    except:\n        return 'invalid input'\n    \ndef index_val_mul(list1):\n    '''\n    Write a python function to find the index of a value in a list.\n    '''\n    try:\n        x = list1.index(get_value(list1))\n        return x, x*x\n    except:\n        return 'invalid input'\n    \ndef index_val_mod(list1):\n    '''\n    Write a python function to find the index of a value in a list.\n    '''\n    try:\n        x = list1.index(get_value(list1))\n        return x, x%2\n    except:\n        return 'invalid input'\n    \ndef index_val_max(list1):\n    '''\n    Write a python function to find the index of a value in a list.\n    '''\n    try:\n        x = list1.index(get_value(list1))\n        return x, max(list1)\n    except:\n        return 'invalid input'\n    \ndef index_val_min(list1):\n    '''\n    Write a python function to find the index of a value in a list.\n    '"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    m = 0\n    for word in list1:\n        if len(word) > m:\n            m = len(word)\n    return m\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max([len(x) for x in list1])\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a = max(len(i) for i in list1)\n    return a\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(x) for x in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    res=0\n    for s in list1:\n        res=max(res,len(s))\n    return res\ndef len_iter(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxi=0\n    for s in list1:\n        if(len(s)>maxi):\n            maxi=len(s)\n    return maxi\ndef reverse(list1):\n    '''\n    Write a python function to reverse a list of string.\n    '''\n    new_list=[]\n    for s in list1:\n        new_list.append(s[::-1])\n    return new_list\ndef anagram(str1,str2):\n    '''\n    Write a python function to determine if two strings are anagram.\n    '''\n    return sorted(str1)==sorted(str2)\ndef rev_iter(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxi=0\n    for s in list1:\n        if(len(s)>maxi):\n            maxi=len(s)\n    for i in range(maxi,0,-1):\n        for s in list1:\n            if(len(s)==i):\n                print(s)\ndef r_sub(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=str1\n    for s in str2:\n        new_str=new_str.replace(s,\"\",1)\n    return new_str\ndef sub_str(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s in str1):\n            str1=str1.replace(s,\"\",1)\n    return str1\ndef find_substr(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=str1\n    for s in str2:\n        if(s in new_str):\n            new_str=new_str.replace(s,\"\",1)\n    return new_str\ndef find_substr_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=\"\"\n    for s in str2:\n        if(s in str1):\n            new_str=new_str+s\n            str1=str1.replace(s,\"\",1)\n    return new_str\ndef r_str(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=str1\n    for s in str2:\n        new_str=new_str.replace(s,\"\",1)\n    return new_str\ndef str_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=\"\"\n    for s in str2:\n        if(s in str1):\n            new_str=new_str+s\n            str1=str1.replace(s,\"\",1)\n    return new_str\ndef all_sub(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s not in str1):\n            return False\n    return True\ndef all_sub_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s not in str1):\n            return False\n    return True\ndef new_str(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=\"\"\n    for s in str2:\n        new_str=new_str+s\n    return new_str\ndef find_substr_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=str1\n    for s in str2:\n        if(s in new_str):\n            new_str=new_str.replace(s,\"\",1)\n    return new_str\ndef find_substr_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=\"\"\n    for s in str2:\n        if(s in str1):\n            new_str=new_str+s\n            str1=str1.replace(s,\"\",1)\n    return new_str\ndef in_both(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s in str1):\n            return True\n    return False\ndef in_both_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s in str1):\n            return True\n    return False\ndef find_all_substr_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_str=\"\"\n    for s in str2:\n        if(s in str1):\n            new_str=new_str+s\n            str1=str1.replace(s,\"\",1)\n    return new_str\ndef find_all_substr(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s in str1):\n            str1=str1.replace(s,\"\",1)\n    return str1\ndef all_sub_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s not in str1):\n            return False\n    return True\ndef all_sub_iter(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s not in str1):\n            return False\n    return True\ndef all_sub(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s not in str1):\n            return False\n    return True\ndef all_sub(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s not in str1):\n            return False\n    return True\ndef in_both(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s in str1):\n            return True\n    return False\ndef in_both(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s in str1):\n            return True\n    return False\ndef in_both(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s in str1):\n            return True\n    return False\ndef in_both(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s in str1):\n            return True\n    return False\ndef all_sub(str1,str2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for s in str2:\n        if(s not in str1):\n            return False\n    retur"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for each_str in str1:\n        if each_str in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return i, i+len(sub_str)\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if str1 not in list_str:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    import re\n    \n    p = re.compile(sub_str)\n    res = [i for i in str1 if p.search(i)]\n    return res\n    \n    # res = [i for i in str1 if sub_str in i]\n    # return res\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in sub_str:\n        if i in str1:\n            continue\n        else:\n            return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    for i in range(len(str1) - sub_str_len + 1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in xrange(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    \n    for i in range(0, len(str1)):\n        if str1[i:i + sub_str_len] == sub_str:\n            return True\n        \n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str) > -1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    match = False\n    for item in sub_str:\n        if item in str1:\n            match = True\n            continue\n    return match\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n /= 10\n    if len(digits) < 2:\n        return True\n    for i in xrange(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    seq = []\n    result = []\n    for i in range(1,n+1):\n        seq.append(i)\n        result.append(seq[-2])\n    for i in range(n-1):\n        if seq[i] == result[i] + 1:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    def is_undulating_helper(n):\n        string = str(n)\n        if len(string) > 1 and int(string[0]) > int(string[-1]):\n            return False\n        return True\n    \n    n = int(n)\n    if n < 10:\n        return False\n    \n    while n > 10:\n        n /= 10\n    \n    return is_undulating_helper(n)"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n)) % 2 == 0:\n        return False\n    if n % 10 in (0, 5, 6, 7, 8, 9):\n        return True\n    if n % 100 in (11, 12, 13):\n        return False\n    if len(str(n)) == 2:\n        if n % 5 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = list(str(n))\n    for i in range(1,len(digits)):\n        if int(digits[i]) < int(digits[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s=str(n)\n    d = int(s[0])\n    for i in xrange(1,len(s)):\n        if int(s[i-1]) > int(s[i]):\n            d = 0\n            break\n        if int(s[i-1]) < int(s[i]):\n            d = 1\n            break\n    return d\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    remainder = 0\n    temp = n\n    while temp > 0:\n        remainder = (remainder*10) + temp%10\n        temp = temp//10\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n))<2:\n        return False\n    x = len(str(n))\n    for i in range(x-1):\n        if str(n)[i]>str(n)[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # We will use only the first half of the cycle to check whether the cycle is \n    # undulating or not. \n    # Hence we will check if the first half of the cycle is sum of the second half \n    # of the cycle. \n    if n < 2: \n        return False \n    num = n \n    half = int(num/2)\n    for i in range(half, num): \n        if (i+1)%num!= 0: \n            return False \n    return True \n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    dic = {}\n    for i in range(2,n+1):\n        temp = i\n        sum = 0\n        while temp:\n            sum += (temp%10)*(temp%10)\n            temp /= 10\n        if sum not in dic:\n            dic[sum] = i\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 0:\n        return a * power(a,b-1)\n    else:\n        return 1/power(a,abs(b)-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #power = 1\n    #for i in range(b):\n    #    power = power * a\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b < 0:\n        return 1/power(a,-b)\n    result = power(a,b//2)\n    if b % 2 == 0:\n        return result * result\n    else:\n        return result * result * a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == -1:\n        return 1/a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        b = -b\n        return 1/power(a,b)\n    else:\n        return power(a,b-1)*a\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    #sort by 2nd value\n    test_list = sorted(test_list, key=itemgetter(1))\n    \n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # print(test_list)\n    result = None\n    index = -1\n    for i in range(len(test_list)):\n        if index == -1:\n            result = test_list[i]\n            index = i\n        elif test_list[i][1] < result[1]:\n            result = test_list[i]\n            index = i\n    return result[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_of_tups = list(test_list)\n    list_of_tups.sort(key = itemgetter(1))\n    return list_of_tups[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    minimum_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum:\n            minimum = test_list[i][1]\n            minimum_index = i\n    return test_list[minimum_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    smallest = test_list[0][1]\n    for i in range(len(test_list)):\n        if(test_list[i][1]<smallest):\n            smallest = test_list[i][1]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    tuple_list = [tuple(x) for x in test_list]\n    tuple_list.sort(key=itemgetter(1))\n    return tuple_list[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = [x for x in lst if x!= []]\n    if not lst:\n        return 0\n    else:\n        return len(min(lst, key=len))\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #TODO: Write your solution here\n    min_l = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_l:\n            min_l = len(lst[i])\n    return min_l\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min_List_Length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < Min_List_Length:\n            Min_List_Length = len(lst[i])\n    return Min_List_Length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_lst_len:\n            min_lst_len = len(i)\n    return min_lst_len\ndef Get_Col(lst,i):\n    '''\n    Write a python function to return a column from a nested list.\n    '''\n    return [row[i] for row in lst]\ndef Get_Row(lst,i):\n    '''\n    Write a python function to return a row from a nested list.\n    '''\n    return lst[i]\ndef Compress(lst):\n    '''\n    Write a python function to compress a list of integers into a list of tuples.\n    '''\n    return [(lst[i],lst[i+1]) for i in range(0,len(lst),2)]\ndef Run_Merge_Sort(lst):\n    '''\n    Write a python function to run Merge Sort on a list.\n    '''\n    if len(lst) > 1:\n        mid = len(lst)//2\n        left_lst = lst[:mid]\n        right_lst = lst[mid:]\n        Run_Merge_Sort(left_lst)\n        Run_Merge_Sort(right_lst)\n        left_index = right_index = k = 0\n        while left_index < len(left_lst) and right_index < len(right_lst):\n            if left_lst[left_index] < right_lst[right_index]:\n                lst[k] = left_lst[left_index]\n                left_index += 1\n            else:\n                lst[k] = right_lst[right_index]\n                right_index += 1\n            k += 1\n        while left_index < len(left_lst):\n            lst[k] = left_lst[left_index]\n            left_index += 1\n            k += 1\n        while right_index < len(right_lst):\n            lst[k] = right_lst[right_index]\n            right_index += 1\n            k += 1\ndef Left_rotate(lst,n):\n    '''\n    Write a python function to rotate a list of integers.\n    '''\n    for i in range(n):\n        lst.insert(0,lst.pop())\ndef Right_rotate(lst,n):\n    '''\n    Write a python function to rotate a list of integers.\n    '''\n    for i in range(n):\n        lst.insert(len(lst),lst.pop(0))\ndef Quick_Sort(lst,low,high):\n    '''\n    Write a python function to sort a list of integers using Quick Sort.\n    '''\n    if low < high:\n        p = Partition(lst,low,high)\n        Quick_Sort(lst,low,p-1)\n        Quick_Sort(lst,p+1,high)\ndef Partition(lst,low,high):\n    pivot = lst[high]\n    i = low-1\n    for j in range(low,high):\n        if lst[j] < pivot:\n            i += 1\n            lst[i],lst[j] = lst[j],lst[i]\n    lst[i+1],lst[high] = lst[high],lst[i+1]\n    return i+1\ndef Quick_Sort_Helper(lst,low,high):\n    if low < high:\n        p = Partition(lst,low,high)\n        Quick_Sort_Helper(lst,low,p-1)\n        Quick_Sort_Helper(lst,p+1,high)\ndef Quick_Sort_Helper_2(lst):\n    Quick_Sort_Helper(lst,0,len(lst)-1)\ndef Quick_Sort_Helper_3(lst):\n    Quick_Sort_Helper_2(lst)\n    lst.reverse()\ndef Median_of_Medians(lst):\n    '''\n    Write a python function to find the median of a list of integers using Median of Medians.\n    '''\n    lst_len = len(lst)\n    if lst_len < 5:\n        return sorted(lst)[lst_len//2]\n    if lst_len % 2 == 1:\n        return sorted(lst)[lst_len//2]\n    else:\n        median1 = sorted(lst)[lst_len//2]\n        median2 = sorted(lst)[lst_len//2-1]\n        return (median1 + median2)/2\ndef Partition_3(lst,pivot_index):\n    pivot_value = lst[pivot_index]\n    left_mark = 0\n    right_mark = len(lst)-1\n    while True:\n        while lst[left_mark] < pivot_value:\n            left_mark += 1\n        while lst[right_mark] > pivot_value:\n            right_mark -= 1\n        if left_mark < right_mark:\n            lst[left_mark],lst[right_mark] = lst[right_mark],lst[left_mark]\n        else:\n            break\n    lst[left_mark],lst[pivot_index] = lst[pivot_index],lst[left_mark]\n    return left_mark\ndef Quick_Sort_3(lst):\n    '''\n    Write a python function to sort a list of integers using Quick Sort.\n    '''\n    lst_len = len(lst)\n    if lst_len < 5:\n        sorted_lst = sorted(lst)\n        for i in range(lst_len):\n            lst[i] = sorted_lst[i]\n    else:\n        left_mark = 0\n        right_mark = lst_len-1\n        while True:\n            pivot_index = Partition_3(lst,right_mark)\n            if pivot_index == 0:\n                break\n            elif pivot_index > 0:\n                left_mark = pivot_index\n            else:\n                right_mark = pivot_index-1\n        if left_mark > right_mark:\n            sorted_lst = sorted(lst)\n            for i in range(lst_len):\n                lst[i] = sorted_lst[i]\n        else:\n            Quick_Sort_3(lst[:left_mark])\n            Quick_Sort_3(lst[right_mark+1:])\ndef Swap(lst,i,j):\n    lst[i],lst[j] = lst[j],lst[i]\ndef Heap_Sort(lst):\n    '''\n    Write a python function to sort a list of integers using Heap Sort.\n    '''\n    size = len(lst)\n    for i in range(size//2-1,-1,-1):\n        Heapify(lst,i,size)\n    for i in range(size-1,0,-1):\n        lst[i],lst[0] = lst[0],lst[i]\n        Heapify(lst,0,i)\ndef Heapify(lst,i,size):\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < size and lst[l] < lst[i]:\n        smallest = l\n    else:\n        smallest = i\n    if r < size and lst[r] < lst[smallest]:\n        smallest = r\n    if smallest!= i:\n        lst[i],lst[smallest] = lst[smallest],lst[i]\n        Heapify(lst,smallest,size)\ndef Heap_Sort_2(lst):\n    '''\n    Write a python function to sort a list of integers using Heap Sort.\n    '''\n    size = len(lst)\n    for i in range(size//2-1,-1,-1):\n        Heapify_2(lst,i,size)\n    for i in range(size-1,0,-1):\n        lst[i],lst[0] = ls"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    a=[]\n    for x in lst:\n        a.append(len(x))\n    return min(a)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for each in lst:\n        if len(each) < min_length:\n            min_length = len(each)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in lst:\n        if(len(i) < min):\n            min = len(i)\n    return min\ndef find_max_length(lst):\n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) > max):\n            max = len(i)\n    return max\ndef Find_Max_Index(lst):\n    '''\n    Write a python function to find the index of the list with the maximum length in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) == max):\n            return lst.index(i)\n        if(len(i) > max):\n            max = len(i)\n    return lst.index(max)\ndef Find_Min_Index(lst):\n    '''\n    Write a python function to find the index of the list with the minimum length in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(len(i) == min):\n            return lst.index(i)\n        if(len(i) < min):\n            min = len(i)\n    return lst.index(min)\ndef Find_Max_List_Index(lst):\n    '''\n    Write a python function to find the index of the list with the maximum length in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) == max):\n            return lst.index(i)\n        if(len(i) > max):\n            max = len(i)\n    return lst.index(max)\ndef Find_Min_List_Index(lst):\n    '''\n    Write a python function to find the index of the list with the minimum length in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(len(i) == min):\n            return lst.index(i)\n        if(len(i) < min):\n            min = len(i)\n    return lst.index(min)\ndef Find_Shortest_List(lst):\n    '''\n    Write a python function to find the shortest list in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(len(i) < min):\n            min = len(i)\n    return min\ndef Find_Longest_List(lst):\n    '''\n    Write a python function to find the longest list in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) > max):\n            max = len(i)\n    return max\ndef Find_Shortest_List_Index(lst):\n    '''\n    Write a python function to find the index of the shortest list in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(len(i) < min):\n            min = len(i)\n    return lst.index(min)\ndef Find_Longest_List_Index(lst):\n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) > max):\n            max = len(i)\n    return lst.index(max)\ndef Find_Shorter_List(lst):\n    '''\n    Write a python function to find the shortest list in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(len(i) < min):\n            min = len(i)\n    return min\ndef Find_Longer_List(lst):\n    '''\n    Write a python function to find the longest list in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) > max):\n            max = len(i)\n    return max\ndef Find_Shorter_List_Index(lst):\n    '''\n    Write a python function to find the index of the shortest list in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(len(i) < min):\n            min = len(i)\n    return lst.index(min)\ndef Find_Longer_List_Index(lst):\n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) > max):\n            max = len(i)\n    return lst.index(max)\ndef Find_Shorter_Lists(lst):\n    '''\n    Write a python function to find the shortest list in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(len(i) < min):\n            min = len(i)\n    return min\ndef Find_Longer_Lists(lst):\n    '''\n    Write a python function to find the longest list in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) > max):\n            max = len(i)\n    return max\ndef Find_Shorter_Lists_Index(lst):\n    '''\n    Write a python function to find the index of the shortest list in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(len(i) < min):\n            min = len(i)\n    return lst.index(min)\ndef Find_Longer_Lists_Index(lst):\n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) > max):\n            max = len(i)\n    return lst.index(max)\ndef Find_List_Sum(lst):\n    '''\n    Write a python function to find the sum of all the numbers in a list of lists.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\ndef Find_List_Average(lst):\n    '''\n    Write a python function to find the average of all the numbers in a list of lists.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i\n    avg = sum/len(lst)\n    return avg\ndef Find_List_Minimum(lst):\n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    min = 100\n    for i in lst:\n        if(i < min):\n            min = i\n    return min\ndef Find_List_Maximum(lst):\n    '''\n    Write a python function to find the maximum value in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(i > max):\n            max = i\n    return max\ndef Find_List_Mean(lst):\n    '''\n    Write a python function to find the mean value in a list of lists.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i\n    avg = sum/len(lst)\n    return avg\ndef Find_List_Mode(lst):\n    '''\n    Write a python function to find the mode value in a list of lists.\n    '''\n    max = 0\n    for i in lst:\n        if(lst.count(i) > max):\n            max = lst.count(i)\n    return max\ndef Find_List_Standard_Deviation(lst):\n    '''\n    Write a python function to find the standard deviation value in a list of lists.\n    '''\n    mean = Find_List_Mean(lst)\n    sum = 0\n    for i in lst:\n        sum += (i-mean)**2\n    sum = sum/len(lst)\n    return (sum)**(1/2)\ndef Find_List_Median(lst)"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    if len(lst) == 0:\n        return 0\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    i = 2\n    while i <= n / i:\n        if n % i == 0:\n            divisors += 2\n        i += 1\n    if n == i:\n        divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    list1=[]\n    for i in range(1,n):\n        if n%i==0:\n            list1.append(i)\n    return len(list1)\n    "
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    for x in range(1,n+1):\n        if n % x == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return divisor(n/2) + 1\n    return divisor(n-1) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    def divisorHelper(n, count):\n        if n == 1:\n            return count\n        if n % 2 == 0:\n            return divisorHelper(n / 2, count + 1)\n        return divisorHelper(n - 1, count + 1)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        n = -n\n    if n == 0:\n        return 1\n    div = [1]\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            div.append(i)\n            div.append(n//i)\n        i += 1\n    return sum(div)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    n=int(n)\n    divisors=1\n    for i in range(2,n):\n        if n%i==0:\n            divisors=divisors+1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 1\n    sqrt_n = int(math.sqrt(n))\n    for i in xrange(2, sqrt_n + 1):\n        if n % i == 0:\n            divs += 2\n    if sqrt_n ** 2 == n:\n        divs -= 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    total = 1\n    for x in range(2, n):\n        if n % x == 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {element: list1.count(element) for element in set(list1)}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    #list1 = [['a', 'b', 'c'], ['d', 'e'], ['f']]\n    print \"Original list:\", list1\n    \n    #your code here\n    print \"\\nFrequency list: \", {'a':1,'b':1,'c':1,'d':2,'e':1,'f':1}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        if element in dictionary.keys():\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        freq[item] = list1.count(item)\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_list = {}\n    for ele in list1:\n        if ele in dict_list:\n            dict_list[ele] += 1\n        else:\n            dict_list[ele] = 1\n    return dict_list\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for el in list1:\n        if el in freq_dict:\n            freq_dict[el] += 1\n        else:\n            freq_dict[el] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #return a dictionary of counts for each item in list1\n    from collections import Counter\n    return Counter(element for sublist in list1 for element in sublist)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2=[]\n    for i in list1:\n        list2.extend(i)\n    dict1={}\n    for i in list2:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq.keys():\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freqDict = {}\n    for item in list1:\n        if item in freqDict:\n            freqDict[item] += 1\n        else:\n            freqDict[item] = 1\n    return freqDict\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result / len(numbers)\n    \n    \ndef find_min_max(items):\n    '''\n    Write a function to find the max and min of a list of numbers.\n    '''\n    return [max(items), min(items)]\n    \n    \ndef find_mean(numbers):\n    '''\n    Write a function to find the mean (average) of a list of numbers.\n    '''\n    return sum(numbers) / len(numbers)\n    \n    \ndef find_median(numbers):\n    '''\n    Write a function to find the median (middle value) of a list of numbers.\n    '''\n    return find_mean(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    answer = 1\n    for x in numbers:\n        answer = answer * x\n    return answer / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y: x*y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    n = len(numbers)\n    multiplied = 1\n    for i in range(n):\n        multiplied = multiplied * numbers[i]\n    return multiplied\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return '0'\n    ans=''\n    while n>0:\n        ans=str(n%2)+ans\n        n=n//2\n    return ans\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    binary = ''\n    while n > 0:\n        if n % 2 == 0:\n            binary = '0' + binary\n        else:\n            binary = '1' + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    return bin(n).replace(\"0b\",\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    binary=[]\n    while n>=1:\n        binary.append(n%2)\n        n=n/2\n    binary.reverse()\n    binary=''.join(map(str,binary))\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = ''\n    while (n > 0):\n        if n & 1:\n            s += '1'\n        else:\n            s += '0'\n        n = n >> 1\n    if len(s)%4!= 0:\n        for i in range(4 - len(s)%4):\n            s += '0'\n    return s[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    \n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary\n    \ndef binary_to_decimal(binary):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    if binary == \"0\":\n        return 0\n    if binary == \"1\":\n        return 1\n    \n    decimal = 0\n    binary = list(binary)\n    binary.reverse()\n    \n    for i in range(len(binary)):\n        decimal = decimal + (int(binary[i]) * (2 ** (i + 1)))\n    return decimal\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\").zfill(32)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return str(n)\n    if n%2 == 0:\n        return decimal_to_binary(n/2) + '0'\n    else:\n        return decimal_to_binary(n/2) + '1'\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    next_smallest = num + str(int(num[::-1]) + 1)\n    next_smallest = int(next_smallest)\n    return next_smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    #print(num)\n    while not is_palindrome(num):\n        num += 1\n    return num\n    \ndef is_palindrome(num):\n    '''\n    Write a function that returns true if a string is a palindrome (reads the same forwards and backwards)\n    '''\n    return str(num) == str(num)[::-1]\n    \ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    n = len(num_str)\n    for i in xrange(n/2):\n        if num_str[i]!= num_str[n-1-i]:\n            break\n    else:\n        return num+1\n    for i in xrange(n/2, n):\n        if num_str[i]!= num_str[n-1-i]:\n            break\n    else:\n        return num\n    for i in xrange(n/2, n-1):\n        if num_str[i]!= num_str[n-1-i]:\n            break\n    else:\n        return num\n    return num_str[:i] + num_str[i+1:] + num_str[i]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    rev_num = num[::-1]\n    for i in xrange(len(num)):\n        if num[i] < rev_num[i]:\n            break\n    return int(num[:i] + str(int(num[i])+1) + (len(num)-i) * '9')\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # PYTHON HAS NO FLOOR, SO CAN ONLY MOD 2\n    #num = int(num)\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    if len(s) == 1:\n        return int(s+s[0])\n    elif len(s) == 2:\n        if int(s) % 9 == 0:\n            return int(s[1]+'9'+s[0])\n        else:\n            return int(s[1]+s[0])\n    elif len(s) == 3:\n        if int(s[0])%2 == 0 and int(s[1])%3 == 0:\n            return int(s[1]+'3'+s[2])\n        else:\n            return int(s[1]+s[2])\n    else:\n        return int(s[1:])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = []\n    for x in str(num):\n        num_list.append(x)\n    num_list.reverse()\n    num_list = ''.join(num_list)\n    num_int = int(num_list)\n    num_list = []\n    for x in str(num_int):\n        num_list.append(x)\n    num_list.reverse()\n    num_list = ''.join(num_list)\n    new_num_int = int(num_list)\n    return new_num_int\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start_num = num\n    if num < 10:\n        return start_num\n    else:\n        while num > 10:\n            num = str(num)\n            total = 0\n            for i in range(len(num)):\n                total += int(num[i])\n            if total == 1:\n                return int(str(start_num)[1:])\n            num = total\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num[0] == '9':\n        return 0\n    last_digit = num[-1]\n    if int(last_digit) == 0:\n        return int(num[:-1]) + 1\n    else:\n        return int(num[:-1]) + 10 - int(last_digit)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        mid = i + (j - i) / 2\n        if arr[mid] > k:\n            j = mid - 1\n        elif arr[mid] < k:\n            i = mid + 1\n        else:\n            return mid + 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k >= len(arr):\n        return None\n    #step 1: move kth elemnt from beginning to end\n    for i in range(len(arr)-1, -1, -1):\n        if i+1 == k:\n            return arr[i]\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    index = k - 1\n    if index < len(arr):\n        return arr[index]\n    return arr[-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1)%len(arr)]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr or k < 1 or k > len(arr):\n        raise ValueError('Invalid input array')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    index = 0\n    for i in range(len(arr)):\n        if index == k - 1:\n            return arr[i]\n        index += 1\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n    else:\n        mid_idx = len(arr) // 2\n        if k <= mid_idx:\n            return binary_search(arr[:mid_idx], k)\n        else:\n            return binary_search(arr[mid_idx:], k-mid_idx)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if i+k-1 < len(arr):\n            return arr[i+k-1]\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([\"%s%s\" % (w[0].upper(), w[1:]) for w in word.split(\"_\")])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word)==0:\n        return word\n    word_list = word.split('_')\n    return word_list[0] + ''.join([w.capitalize() for w in word_list[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    return words[0]+''.join([w.capitalize() for w in words[1:]])\n    # return ''.join(map(lambda x: x.capitalize(), word.split('_')))\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_')).capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in word:\n        if i == '_':\n            camel_word += i.upper()\n        else:\n            camel_word += i\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # replace all chars except - and _\n    return ''.join([(i.capitalize() if i not in '-_' else i) for i in word])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    snake_word = ''\n    for i in word.split('_'):\n        snake_word += i.capitalize()\n    return snake_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    \n    words = word.split('_')\n    return words[0] + ''.join(w.capitalize() for w in words[1:])\n    \nassert snake_to_camel('snake_case') == 'SnakeCase'\nassert snake_to_camel('the_snake_case') == 'TheSnakeCase'\nassert snake_to_camel('a_snake_case') == 'ASnakeCase'\nassert snake_to_camel('i_am_a_snake_case') == 'IamASnakeCase'\nassert snake_to_camel('the_case_i_like') == 'TheCaseIlike'\nassert snake_to_camel('the_camel_case') == 'TheCamelCase'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('CamelCase') == 'CamelCase'\nassert snake_to_camel('') == ''\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('The_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCaseIlike'\nassert snake_to_camel('the_snake_case_i_like') == 'TheSnakeCaseIlike'\nassert snake_to_camel('a_snake_case_i_like') == 'ASnakeCase"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) < 1:\n        return word\n    snake_camel = ''\n    for i, w in enumerate(word):\n        if w.isupper():\n            if i == 0:\n                snake_camel += w\n            else:\n                snake_camel += w.lower()\n        elif w.islower():\n            snake_camel += w\n        else:\n            snake_camel += '_' + w\n    return snake_camel\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def f(n, m):\n        # Step 1: initialize the list\n        # Step 2: append zeros to the end\n        # Step 3: add the diagonal\n        # Step 4: add the the rest\n        # Step 5: return the final result\n        s = []\n        for i in range(n):\n            s.append([0 for j in range(i)] + [1 for j in range(i, n)])\n        for i in range(n):\n            s[i].append(0)\n        for i in range(n):\n            s[i].append(1)\n        for i in range(n):\n            s[n-i-1].append(0)\n        s.append([1 for i in range(n+1)])\n        return s\n    \n    def search(u, v, f):\n        # Step 1: initialize the list\n        # Step 2: append the first column\n        # Step 3: append the first row\n        # Step 4: append the last column\n        # Step 5: append the last row\n        # Step 6: append the rest\n        # Step 7: return the final result\n        s = []\n        for i in range(u):\n            s.append([0 for j in range(u)])\n        for i in range(u):\n            s[i][0] = 1\n        for i in range(v):\n            s[0][i] = 1\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        for i in range(u):\n            for j in range(v):\n                s[i][j] = f[i][j]\n        return s\n    \n    def search_column(u, v, f):\n        # Step 1: initialize the list\n        # Step 2: append the first column\n        # Step 3: append the first row\n        # Step 4: append the last column\n        # Step 5: append the last row\n        # Step 6: append the rest\n        # Step 7: return the final result\n        s = []\n        for i in range(u):\n            s.append([0 for j in range(u)])\n        for i in range(u):\n            s[i][0] = 1\n        for i in range(v):\n            s[0][i] = 1\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        return s\n    \n    def search_row(u, v, f):\n        # Step 1: initialize the list\n        # Step 2: append the first column\n        # Step 3: append the first row\n        # Step 4: append the last column\n        # Step 5: append the last row\n        # Step 6: append the rest\n        # Step 7: return the final result\n        s = []\n        for i in range(u):\n            s.append([0 for j in range(u)])\n        for i in range(u):\n            s[i][0] = 1\n        for i in range(v):\n            s[0][i] = 1\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        return s\n    \n    def search_diagonal(u, v, f):\n        # Step 1: initialize the list\n        # Step 2: append the first column\n        # Step 3: append the first row\n        # Step 4: append the last column\n        # Step 5: append the last row\n        # Step 6: append the rest\n        # Step 7: return the final result\n        s = []\n        for i in range(u):\n            s.append([0 for j in range(u)])\n        for i in range(u):\n            s[i][0] = 1\n        for i in range(v):\n            s[0][i] = 1\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        return s\n    \n    def search_rest(u, v, f):\n        # Step 1: initialize the list\n        # Step 2: append the first column\n        # Step 3: append the first row\n        # Step 4: append the last column\n        # Step 5: append the last row\n        # Step 6: append the rest\n        # Step 7: return the final result\n        s = []\n        for i in range(u):\n            s.append([0 for j in range(u)])\n        for i in range(u):\n            s[i][0] = 1\n        for i in range(v):\n            s[0][i] = 1\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        for i in range(1, u):\n            s[i].append(0)\n        for i in range(1, v):\n            s[i].insert(0, 0)\n        return s\n    \n    def swap(s, u, v, f):\n        # Step 1: swap the first column\n        # Step 2: swap the first row\n        # Step 3: swap the last column\n        # Step 4: swap the last row\n        # Step 5: swap the rest\n        # Step 6: return the final result\n        for i in range(u):\n            f[i][v] = s[i][v]\n        for i in range(u):\n            f[v][i] = s[v][i]\n        for i in range(v):\n            f[u][i] = s[u][i]\n        for i in range(v):\n            f[i][u] = s[i][u]\n        for i in range(1, u):\n            for j in range(1, v):\n                f[i][j] = s[i][j]\n        for i in range(1, v):\n            for j in range(1, u):\n                f[i][j] = s[i][j]\n        return f\n    \n    def inverse(s, u, v, f):\n        # Step 1: swap the first column\n        # Step 2: swap the first row\n        # Step 3: swap the last column\n        # Step 4: swap the last row\n        # Step 5: swap the rest\n        # Step 6: return the final result\n        for i in range(u):\n            f[i][v] = s[i][v]\n        for i in range(u):\n            f[v][i] = s[v][i]\n        for i in range(v):\n            f[u][i] = s[u][i]\n        for i in range(v):\n            f[i][u] = s[i][u]\n        for i in range(1, u):\n            for j in range(1, v):\n                f[i][j] = s[i][j]\n        for i in range(1, v):\n            for j in range(1, u):\n                f[i][j] = s[i][j]\n        return f\n    \n    def convert(s, u, v, f):\n        # Step 1: swap the first column\n        # Step 2: swap the first row\n        # Step 3: swap the last column\n        # Step 4: swap the last row\n        # Step 5: swap the rest\n        # Step 6: return the final result\n        for i in range(u):\n            f[i]["
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # code here\n    \n    # number of ways that we can do\n    # n!/m!(n-m)!\n    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 2 == 0:\n                a += 1\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n==0 and m==0:\n        return 1\n    elif n==0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 0\n    elif m == 1:\n        return n\n    else:\n        return n*eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (m == 0):\n        return 1\n    if (m == 1):\n        return n\n    return n * eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return 0\n    if m == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % m == 0:\n        return n // m + eulerian_num(m, n // m)\n    else:\n        return eulerian_num(m, n % m) + n // m\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    if m > n:\n        return eulerian_num(m, n)\n    if n == 1:\n        return m\n    return eulerian_num(n-1, m+1) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # not all entries are present, which make the algorithm non-deterministic\n    if m > n:\n        return 0\n    # initialise an array of 0's and 1's\n    c = [0] * m\n    # iterate through the array\n    for i in range(n):\n        # check for each digit if it is a zero\n        if c[0] == 1:\n            return 0\n        else:\n            c[0] += 1\n    return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for num in range(n, m+1):\n        if is_eulerian_num(num):\n            return num\n    return None\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[sorted(elem)[0] for elem in sublist] for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[s for s in sublist] for sublist in sorted(input_list, key=lambda x: len(x))]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for each item in list\n    # sort the item\n    # append the sorted item to new list\n    # return new list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for i in input_list:\n        i.sort()\n        sorted_list.append(i)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for item in input_list:\n        item.sort()\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize empty list to store each sublist after sorting\n    sorted_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    booleans=0\n    for i in lst:\n        if i==True:\n            booleans=booleans+1\n    return booleans\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res=0\n    for i in lst:\n        if i:\n            res+=1\n    return res\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(i) for i in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c=0\n    for i in lst:\n        if i:\n            c+=1\n    return c\n        \n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Your code here\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return sum(map(bool,lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(lst) for lst in lst)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup = test_tup + (i,)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    # make sure that the second argument is a list\n    if not isinstance(test_tup, list):\n        print \"test_tup must be a list\"\n        return\n    \n    # append the second argument to the end of the first argument\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    '''\n    # tests\n    test_list = [1, 2, 3]\n    test_tup = (4, 5, 6)\n    \n    expected = [1, 2, 3, 4, 5, 6]\n    actual = add_lists(test_list, test_tup)\n    \n    print(actual == expected)\n    print(actual)\n    print(expected)\n    '''\n    \n    # solutions\n    test_list.extend(test_tup)\n    \n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n    #return test_tup + test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for tup in test_tup:\n        test_list.append(tup[1])\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for elem in test_tup:\n        test_list.append(elem)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + (test_tup[i],)\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list == []:\n        return [test_tup]\n    else:\n        return [test_tup] + add_lists(test_list[1:], test_list[0])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None and num2==None and num3==None:\n        return None\n    elif num1==None:\n        return num2\n    elif num2==None:\n        return num1\n    elif num3==None:\n        return num1\n    else:\n        return heapq.merge(num1,num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # base case\n    if len(num1) == 0:\n        return num2\n    if len(num2) == 0:\n        return num1\n    if len(num3) == 0:\n        return num1 + num2\n    if num1[0] < num2[0]:\n        return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n    else:\n        return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0:\n        return num2 + num3\n    elif len(num2) == 0:\n        return num1 + num3\n    elif len(num3) == 0:\n        return num1 + num2\n    else:\n        if num1[0] < num2[0]:\n            return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n        elif num1[0] > num2[0]:\n            return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n        else:\n            return [num1[0]] + merge_sorted_list(num1[1:],num2,num3[1:])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if (len(num1) > len(num2)) and (len(num1) > len(num3)):\n        return merge_sorted_list(num2, num3, num1)\n    if (len(num2) > len(num3)) and (len(num2) > len(num1)):\n        return merge_sorted_list(num3, num1, num2)\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            new_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            new_list.append(num2[j])\n            j += 1\n        else:\n            new_list.append(num3[k])\n            k += 1\n    while i < len(num1):\n        new_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        new_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        new_list.append(num3[k])\n        k += 1\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    m = len(num1)\n    n = len(num2)\n    p = len(num3)\n    i = m+n+p\n    while i>0:\n        if m>0:\n            if num1[0]<=num2[0]:\n                result.append(num1[0])\n                num1 = num1[1:]\n                m-=1\n            else:\n                result.append(num2[0])\n                num2 = num2[1:]\n                n-=1\n        if n>0:\n            if num2[0]<=num3[0]:\n                result.append(num2[0])\n                num2 = num2[1:]\n                n-=1\n            else:\n                result.append(num3[0])\n                num3 = num3[1:]\n                p-=1\n        if p>0:\n            if num3[0]<=num1[0]:\n                result.append(num3[0])\n                num3 = num3[1:]\n                p-=1\n            else:\n                result.append(num1[0])\n                num1 = num1[1:]\n                m-=1\n        i-=1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    \n    if num1 == []:\n        return num2\n    elif num2 == []:\n        return num1\n    elif num3 == []:\n        return num2\n    \n    elif num1[0] < num2[0]:\n        return num1 + num2\n    else:\n        return num2 + num3\n    \n    \n    \n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    l1 = len(num1)\n    l2 = len(num2)\n    l3 = len(num3)\n    result = []\n    while(i<l1 and j<l2 and k<l3):\n        if(num1[i]<num2[j]):\n            result.append(num1[i])\n            i+=1\n        elif(num1[i]>num2[j]):\n            result.append(num2[j])\n            j+=1\n        elif(num1[i]==num2[j]):\n            result.append(num1[i])\n            i+=1\n            j+=1\n    while(i<l1):\n        result.append(num1[i])\n        i+=1\n    while(j<l2):\n        result.append(num2[j])\n        j+=1\n    while(k<l3):\n        result.append(num3[k])\n        k+=1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    #print(merged_list)\n    lst = [num1,num2,num3]\n    while(len(lst)!=0):\n        #print(lst)\n        merged_list.append(heapq.heappop(lst))\n    return merged_list\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return 1 if s[0] == '0' else 0\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    return 1 if s[0] == '1' else 0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def binary(n):\n        a=[]\n        for i in n:\n            if i=='0':\n                a.append('1')\n            else:\n                a.append('0')\n        return ''.join(a)\n    s=binary(s)\n    count=0\n    for i in range(n):\n        s=binary(s)\n        if int(s[0])%2!=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + s.count(\"1\")\n        s = s[-1] + s[:-1]\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l=list(s)\n    for i in range(n):\n        l.insert(0,l.pop())\n    return ''.join(l)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n<0:\n        n=n%len(s)\n    s=s[n:]+s[:n]\n    count=0\n    for i in xrange(len(s)):\n        if s[i]=='0':\n            count+=1\n    return count\ndef Even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    if n<0:\n        n=n%len(s)\n    s=s[n:]+s[:n]\n    count=0\n    for i in xrange(len(s)):\n        if s[i]=='1':\n            count+=1\n    return count\ndef check_rotate_binary(s):\n    '''\n    Write a python function to check if a binary string can be rotated 3 times without changing the original string.\n    '''\n    if len(s)<3:\n        return False\n    a=s[:len(s)/2]\n    b=s[len(s)/2:]\n    for i in xrange(3):\n        if a!=b:\n            return False\n        else:\n            a=a[-1]+a[:-1]\n            b=b[-1]+b[:-1]\n    return True\ndef Alternating_binary(s):\n    '''\n    Write a python function to check if a binary string can be rotated 3 times to make its first and last characters equal.\n    '''\n    if len(s)<3:\n        return False\n    a=s[:len(s)/2]\n    b=s[len(s)/2:]\n    for i in xrange(3):\n        if a[0]!=b[-1] or b[0]!=a[-1]:\n            return False\n        else:\n            a=a[-1]+a[:-1]\n            b=b[-1]+b[:-1]\n    return True\ndef Binary_addition(s1,s2):\n    '''\n    Write a python function to find the sum of two binary strings of equal length.\n    '''\n    if len(s1)!=len(s2):\n        return None\n    s=''\n    for i in xrange(len(s1)):\n        s+=str(int(s1[i])+int(s2[i]))\n    return s\ndef Binary_subtraction(s1,s2):\n    '''\n    Write a python function to find the difference between two binary strings of equal length.\n    '''\n    if len(s1)!=len(s2):\n        return None\n    s=''\n    for i in xrange(len(s1)):\n        s+=str(int(s1[i])-int(s2[i]))\n    return s\ndef check_Binary_Permutation(s1,s2):\n    '''\n    Write a python function to check if two strings are permutations of each other.\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s=''\n    for i in xrange(len(s1)):\n        s+=s1[i]+s2[i]\n    return sorted(s)==sorted(s1+s2)\ndef count_num(s):\n    '''\n    Write a python function to count the number of each character in a string.\n    '''\n    d={}\n    for i in xrange(len(s)):\n        if s[i] in d:\n            d[s[i]]+=1\n        else:\n            d[s[i]]=1\n    return d\ndef replace_string(s,s1,s2):\n    '''\n    Write a python function to replace all occurrences of a substring in a string with another substring.\n    '''\n    if s1 not in s:\n        return s\n    else:\n        s2=s2*(s.count(s1))\n        return s.replace(s1,s2)\ndef check_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    for i in xrange(2,n):\n        if n%i==0:\n            return False\n    return True\ndef binary_gap(n):\n    '''\n    Write a python function to find the length of the binary gap of a given number.\n    '''\n    if n==0:\n        return 0\n    c=0\n    while n:\n        n=n&(n-1)\n        c+=1\n    return c\ndef rotate_string(s,n):\n    '''\n    Write a python function to rotate a string left by an arbitrary number of characters.\n    '''\n    if n<0:\n        n=n%len(s)\n    s=s[n:]+s[:n]\n    return s\ndef Frequency(s):\n    '''\n    Write a python function to find the number of each character in a string.\n    '''\n    d={}\n    for i in xrange(len(s)):\n        if s[i] in d:\n            d[s[i]]+=1\n        else:\n            d[s[i]]=1\n    return d\ndef is_balanced_string(s):\n    '''\n    Write a python function to check if a string is balanced. A string is said to be balanced if there is no pair of brackets in the string. \n    '''\n    stack=[]\n    for i in xrange(len(s)):\n        if s[i] in ['(','[','{']:\n            stack.append(s[i])\n        else:\n            if len(stack)==0:\n                return False\n            if s[i]==')' and stack[-1]!='(':\n                return False\n            elif s[i]==']' and stack[-1]!='[':\n                return False\n            elif s[i]=='}' and stack[-1]!='{':\n                return False\n            else:\n                stack.pop()\n    return True if len(stack)==0 else False\ndef is_unique(s):\n    '''\n    Write a python function to check if a string contains all unique characters.\n    '''\n    d={}\n    for i in xrange(len(s)):\n        if s[i] in d:\n            return False\n        else:\n            d[s[i]]=1\n    return True\ndef is_vowel(s):\n    '''\n    Write a python function to check if a string contains only vowels.\n    '''\n    vowels='aeiou'\n    for i in xrange(len(s)):\n        if s[i] not in vowels:\n            return False\n    return True\ndef is_consonant(s):\n    '''\n    Write a python function to check if a string contains only consonants.\n    '''\n    consonants='bcdfghjklmnpqrstvwxyz'\n    for i in xrange(len(s)):\n        if s[i] not in consonants:\n            return False\n    return True\ndef is_odd(n):\n    '''\n    Write a python function to check if a number is odd or not.\n    '''\n    if n%2==0:\n        return False\n    else:\n        return True\ndef is_even(n):\n    '''\n    Write a python function to check if a number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\ndef is_reverse(s):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    return True if s==s[::-1] else False\ndef test_is_reverse():\n    assert is_reverse('nk')==True\n    assert is_reverse('n')==False\n    assert is_reverse('na')==False\n    assert is_reverse('ana')==True\n    assert is_reverse('an')==False\n    assert is_reverse('nan')==False\ndef is_palindrome(s):\n    '''\n    Writ"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\ndef rank(a,s): \n    '''\n    Write a python function to find the rank of a number in a sorted array.\n    '''\n    pass\ndef max(a,b,c): \n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    pass\ndef is_prime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    pass\ndef digital_root(n): \n    '''\n    Write a python function to find the digital root of a number.\n    '''\n    pass\ndef find_lcm(a,b): \n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    pass\ndef in_bisect(a,x): \n    '''\n    Write a python function to check if a number is present in a sorted array in linear time.\n    '''\n    pass\ndef hamming(a,b): \n    '''\n    Write a python function to compute the Hamming distance between two numbers.\n    '''\n    pass\ndef to_hex(n): \n    '''\n    Write a python function to convert a base 10 number to its hexadecimal representation.\n    '''\n    pass\ndef median(s): \n    '''\n    Write a python function to find the median of a list of numbers.\n    '''\n    pass\ndef to_octal(n): \n    '''\n    Write a python function to convert a base 10 number to its octal representation.\n    '''\n    pass\ndef to_binary(n): \n    '''\n    Write a python function to convert a base 10 number to its binary representation.\n    '''\n    pass\ndef to_decimal(n): \n    '''\n    Write a python function to convert a binary number to its decimal representation.\n    '''\n    pass\ndef to_ternary(n): \n    '''\n    Write a python function to convert a binary number to its ternary representation.\n    '''\n    pass\ndef transpose(m): \n    '''\n    Write a python function to transpose a matrix.\n    '''\n    pass\ndef majority(a,b,c,n): \n    '''\n    Write a python function to compute the majority number of three numbers.\n    '''\n    pass\ndef unique_in_order(a): \n    '''\n    Write a python function to compute all the unique elements of a list in ascending order.\n    '''\n    pass\ndef reverse(a): \n    '''\n    Write a python function to reverse a list of integers.\n    '''\n    pass\ndef rotate(a,b): \n    '''\n    Write a python function to rotate a list of numbers a given number of times.\n    '''\n    pass\ndef rotate_word(a,b): \n    '''\n    Write a python function to rotate a word a given number of times.\n    '''\n    pass\ndef get_letter_score(letter): \n    '''\n    Write a python function to compute the score of a letter according to the table below.\n    '''\n    pass\ndef partition(a,low,high): \n    '''\n    Write a python function to partition a list of integers around a value.\n    '''\n    pass\ndef pop(a,n): \n    '''\n    Write a python function to remove an element from a list.\n    '''\n    pass\ndef remove(a,val): \n    '''\n    Write a python function to remove all elements of a given value from a list.\n    '''\n    pass\ndef squares(a): \n    '''\n    Write a python function to compute the list of the squares of a list of numbers.\n    '''\n    pass\ndef find_anagrams(a,b): \n    '''\n    Write a python function to find all the anagrams of a string in another string.\n    '''\n    pass\ndef insert(a,n): \n    '''\n    Write a python function to insert an element into a list.\n    '''\n    pass\ndef num_to_str(a,b): \n    '''\n    Write a python function to convert a list of numbers to a string of characters.\n    '''\n    pass\ndef insert_sort(a): \n    '''\n    Write a python function to sort a list of numbers using insertion sort.\n    '''\n    pass\ndef interleave(a,b): \n    '''\n    Write a python function to compute the even indexed elements of a list of numbers interleaved with odd indexed elements.\n    '''\n    pass\ndef print_triangle(n): \n    '''\n    Write a python function to print a list of numbers in the form of a triangle.\n    '''\n    pass\ndef flatten(a): \n    '''\n    Write a python function to flatten a list of lists.\n    '''\n    pass\ndef high_and_low(n): \n    '''\n    Write a python function to compute the high and low index of a given list of numbers.\n    '''\n    pass\ndef sort_pairs(a): \n    '''\n    Write a python function to sort a list of pairs according to the second element of each pair.\n    '''\n    pass\ndef check_permutation(a,b): \n    '''\n    Write a python function to check whether two strings are permutations of each other.\n    '''\n    pass\ndef longest_common_prefix(a,b): \n    '''\n    Write a python function to find the longest common prefix of two strings.\n    '''\n    pass\ndef rotate_matrix(a): \n    '''\n    Write a python function to rotate a 2-D matrix by 90 degrees.\n    '''\n    pass\ndef avg(a): \n    '''\n    Write a python function to compute the average of a list of numbers.\n    '''\n    pass\ndef max_product(a,b): \n    '''\n    Write a python function to compute the maximum product of three integers.\n    '''\n    pass\ndef find_missing_numbers(a): \n    '''\n    Write a python function to find the missing numbers of two arrays.\n    '''\n    pass\ndef remove_every_other(a): \n    '''\n    Write a python function to remove every other element of a list.\n    '''\n    pass\ndef find_factors(n): \n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    pass\ndef find_all_duplicates(a): \n    '''\n    Write a python function to find all the duplicates in a list.\n    '''\n    pass\ndef find_all_rotations(a): \n    '''\n    Write a python function to find all the rotations of a string.\n    '''\n    pass\ndef is_valid_parentheses(s): \n    '''\n    Write a python function to determine if a string of parentheses is valid or not.\n    '''\n    pass\ndef find_factors(a): \n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    pass\ndef sort_list(a): \n    '''\n    Write a python function to sort a list of integers using insertion sort.\n    '''\n    pass\ndef search(a,x): \n    '''\n    Write a python function to find the index of an integer in a list of numbers.\n    '''\n    pass\ndef is_palindrome(a): \n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    pass\ndef count_words(a): \n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    pass\ndef is_palindrome_sentence(a): \n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    pass\ndef reverse_vowels(a): \n    '''\n    Write a python function to reverse vowels in a string.\n    '''\n    pass\ndef to_dutch_num(a): \n    '''\n    Write a python function to convert a number to dutch number.\n    '''\n    pass\ndef rotate_matrix_90(a): \n    ''"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import math\n    def bit_count(n):\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count\n    def rotation(num,cycle):\n        num = str(num)\n        for i in range(cycle):\n            num = str(int(num[1]) + int(num[0]))\n        return int(num)\n    if s == n:\n        return '0'\n    else:\n        cycle = math.ceil(n/bit_count(s))\n        result = str(bin(rotation(s,cycle)))\n        result = result[2:]\n        #print(result)\n        if result[0] == '1':\n            return str(bit_count(s))\n        else:\n            return str(bit_count(s)-1)\n            \n    \n    \ndef rotate(str, n):\n    return str[n:] + str[:n]\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s=='1' or s=='0':\n        return 1\n    if n==0:\n        return 0\n    if n==1:\n        if s=='1':\n            return 1\n        else:\n            return 0\n    if s[0]=='0':\n        return odd_Equivalent(s[1:],'1')\n    else:\n        return odd_Equivalent(s[1:],'0')+odd_Equivalent(s[:-1],'1')\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in xrange(n):\n        if (int(s, 2) & 1)!= 0:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    odd_count = 0\n    for i in range(n):\n        j = 0\n        if s[j] == '0':\n            s = s[1:] + '0'\n            j += 1\n        else:\n            s = s[1:] + '1'\n        if int(s,2) % 2!= 0:\n            odd_count += 1\n    return odd_count\n        \ns = '10010001011010000'\nprint odd_Equivalent(s, 4)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for list1 in nestedlist:\n        for list2 in nestedlist:\n            if list1 is not list2 and list1 is not None and list2 is not None:\n                if set(list1) & set(list2) not in common_elements:\n                    common_elements.append(set(list1) & set(list2))\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist:\n        for element in item:\n            if element in common:\n                continue\n            else:\n                common.append(element)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # common_list = set(nestedlist[0]).intersection(*nestedlist)\n    common_list = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common_list:\n                common_list.append(j)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = [x for x in nestedlist if isinstance(x, list)]\n    return [x for x in nestedlist[0] if x in nestedlist[1]]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        if not i:\n            return []\n    res = []\n    for i in nestedlist[0]:\n        if any(i in j for j in nestedlist):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    all_elements = set()\n    for sublist in nestedlist:\n        all_elements |= set(sublist)\n    return all_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for l in nestedlist:\n        for item in l:\n            if item not in result:\n                result.append(item)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # your code here\n    if not isinstance(nestedlist, list):\n        return []\n    if len(nestedlist) == 0:\n        return []\n    l = list(set(nestedlist[0]))\n    for i in range(1, len(nestedlist)):\n        l = list(set(l) & set(nestedlist[i]))\n    return l\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if nestedlist[i][j] not in nestedlist[j]:\n                return False\n    return True\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_of_sets = [set(e) for e in nestedlist]\n    return list(set.intersection(*list_of_sets))\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return int(text)\n    else:\n        try:\n            return int(float(text))\n        except:\n            return None\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    if text.isdigit():\n        return True\n    else:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    \n    if text.isdigit():\n        return True\n    elif '.' in text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    import re\n    pattern = re.compile('^[-+]?[0-9]+$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\ndef dictionary_diff(d1, d2):\n    '''\n    Write a function to compare two dictionaries.\n    '''\n    keys1 = set(d1.keys())\n    keys2 = set(d2.keys())\n    intersect_keys = keys1.intersection(keys2)\n    for i in intersect_keys:\n        if d1[i]!= d2[i]:\n            return False\n    return True\ndef count_char(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\ndef longest_string(str1):\n    '''\n    Write a function to find the longest string in a list.\n    '''\n    if len(str1) == 0:\n        return ''\n    elif len(str1) == 1:\n        return str1[0]\n    elif len(str1) > 1:\n        return max(str1, key = len)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    if len(str1) == 0:\n        return ''\n    return ''.join(str1.split())\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str1) == 0:\n        return ''\n    return str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    if len(str1) == 0:\n        return True\n    elif len(str1) == 1:\n        return True\n    else:\n        return str1[0] == str1[-1] and is_palindrome(str1[1:-1])\ndef add_spaces(str1):\n    '''\n    Write a function to add spaces between characters in a string.\n    '''\n    if len(str1) == 0:\n        return ''\n    elif len(str1) == 1:\n        return str1 +''\n    else:\n        return str1[0] +'' + add_spaces(str1[1:])\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return list1\n    else:\n        i = 1\n        while i < len(list1):\n            if list1[i] == list1[i - 1]:\n                list1.pop(i)\n            else:\n                i += 1\n        return list1\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in str1:\n        if i in vowels:\n            count += 1\n    return count\ndef shuffle_list(list1):\n    '''\n    Write a function to shuffle a list.\n    '''\n    import random\n    for i in range(len(list1)):\n        j = random.randint(0, len(list1) - 1)\n        list1[i], list1[j] = list1[j], list1[i]\n    return list1\ndef is_in_list(list1, str1):\n    '''\n    Write a function to check whether a string is in a list.\n    '''\n    if str1 in list1:\n        return True\n    return False\ndef list_of_tuples(list1):\n    '''\n    Write a function to convert a list to a list of tuples.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [(list1[0],)]\n    else:\n        list2 = list_of_tuples(list1[1:])\n        return [(list1[0],) + i for i in list2]\ndef merge_two_dicts(d1, d2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    d3 = {}\n    for i in d1:\n        d3[i] = d1[i]\n    for i in d2:\n        d3[i] = d2[i]\n    return d3\ndef is_substring(str1, str2):\n    '''\n    Write a function to check whether a string is a substring of another string.\n    '''\n    if len(str1) == 0:\n        return False\n    elif len(str1) > len(str2):\n        return False\n    else:\n        for i in range(len(str2)):\n            if str2[i]!= str1[0]:\n                break\n            elif i == len(str2) - 1:\n                return True\n            elif i < len(str2) - 1:\n                continue\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\ndef is_anagram_2(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return False\n    return True\ndef rotate_right(str1, num):\n    '''\n    Write a function to rotate a string.\n    '''\n    if len(str1) == 0:\n        return ''\n    elif len(str1) == 1:\n        return str1\n    else:\n        return str1[num:] + str1[:num]\ndef is_rotation(str1, str2):\n    '''\n    Write a function to check whether a string is a rotation of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    elif len(str1) == 0:\n        return True\n    else:\n        rotated = rotate_right(str1, len(str1))\n        return rotated == str2\ndef is_rotation_2(str1, str2):\n    '''\n    Write a function to check whether a string is a rotation of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        if str1 == str2:\n            return True\n        else:\n            return False\ndef intersection(list1, list2):\n    '''\n    Write a function to compute the intersection of two lists.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1[0] if list1[0] in list2 else None]\n    else:\n        return [list1[0] if list1[0] in list2 else None] + intersection(list1[1:], list2)\ndef max_of_three(x, y, z):\n    '''\n    Write a function to compute the maximum of three numbers.\n    '''\n    if x > y and x > z:\n        return x\n    elif y > x and y > z:\n        return y\n    else:\n        return z\ndef is_letter_vowel(str1):\n    '''\n    Write a function to check whether a string is a vowel or not.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(str1) ="
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary == {}:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list_len = len(list1)\n    for i in range(0, list_len):\n        if(len(list1[i]) == 0):\n            return True\n    return False\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for i, n in enumerate(nums):\n        total += n * (2 ** (len(nums) - i - 1))\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i, n in enumerate(nums):\n        res += n * (10 ** i)\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join([str(num) for num in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(x * 10 ** i for i, x in enumerate(nums[::-1]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y:x*y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = float(row[i])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in range(0, len(test_list)):\n        try:\n            test_list[item] = float(test_list[item])\n        except:\n            continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(len(test_list)):\n        for subindex in range(len(test_list[index])):\n            try:\n                test_list[index][subindex] = float(test_list[index][subindex])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(0, len(test_list)):\n        for elem in range(0, len(test_list[index])):\n            test_list[index][elem] = float(test_list[index][elem])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def _list_to_float(l):\n        return [float(i) if type(i) == int or type(i) == float else i for i in l]\n    return [_list_to_float(l) for l in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for l in test_list:\n        for i in range(len(l)):\n            try:\n                l[i] = float(l[i])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for sublist in test_list for i in sublist]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index, sub_list in enumerate(test_list):\n        for index2, element in enumerate(sub_list):\n            try:\n                test_list[index][index2] = float(element)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Method 1\n    # l = string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # return string.split()\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split(\" \")\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    l = string.split()\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr[0] == arr[1]:\n        return arr[0]\n    elif arr[-1] == arr[-2]:\n        return arr[-1]\n    else:\n        result = -1\n        for i in range(len(arr)):\n            if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n                result = arr[i]\n                break\n        return result\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        first = arr[0]\n        last = arr[-1]\n        if first == last:\n            return first\n        elif last - first == 1:\n            return first\n        else:\n            return search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] == arr[i+1]:\n            arr.pop(i)\n        else:\n            i += 1\n    print arr\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    low, high = 0, len(arr) - 1\n    while low < high:\n        mid = (low + high) / 2\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 1\n        elif arr[mid] == arr[mid - 1]:\n            high = mid - 1\n        else:\n            return arr[mid]\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # if length of arr is zero, return None\n    if len(arr) == 0:\n        return None\n    # get the first element\n    first_element = arr[0]\n    # if first element is in the array, return the first element\n    if arr[0] == first_element:\n        return first_element\n    # loop through all the elements in array\n    for element in arr:\n        # if current element is not equal to first element\n        if element!= first_element:\n            # return the first element\n            return first_element\n    # return None if all elements are equal\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr==None or len(arr)==0:\n        return None\n    \n    start = 0\n    end = len(arr)-1\n    mid = 0\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    result = {}\n    for i in range(len(arr)):\n        result[arr[i]] = result.get(arr[i],0) + 1\n    for k in result.keys():\n        if result[k] == 1:\n            return k\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr1=arr.copy()\n    arr1.sort()\n    if len(arr1)==1:\n        return arr1[0]\n    return arr1[len(arr1)-1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0]\n    for i in list1:\n        for j in list1:\n            if i[0] * i[1] * j[1] > max_product:\n                max_product = i[0] * i[1] * j[1]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # empty list\n    max_list = []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = [(1,2,3),(-5,0,4),(0,10,5)]\n    result = (0,0,0)\n    for a,b,c in list1:\n        temp = a*b*c\n        if temp > result[2]:\n            result = (a,b,c)\n    print result\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    list2 = []\n    for i in list1:\n        list2.append((i[0]*i[1],i[0],i[1]))\n    list2.sort(reverse=True)\n    return list2[0][0]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tup = list1[0]\n    max_val = max(tup[0]*tup[1],tup[1]*tup[2])\n    for i in range(1,len(list1)):\n        tup = list1[i]\n        max_val = max(max_val,tup[0]*tup[1],tup[1]*tup[2])\n    return max_val\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    prod = lambda x,y: x*y if x > 0 else y\n    return max(prod(*a) for a in zip(list1[::2],list1[1::2]))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import itertools\n    product_list = []\n    for tup in itertools.combinations(list1, 2):\n        product_list.append(abs(tup[0] * tup[1]))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if product < list1[i]*list1[j]:\n                product = list1[i]*list1[j]\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = -1\n    list1 = list(list1)\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if j + 1 < len(list1[i]):\n                if list1[i][j] * list1[i][j + 1] > max_prod:\n                    max_prod = list1[i][j] * list1[i][j + 1]\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    \n    max_prod = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            prod = list1[i][0]*list1[j][1]\n            if abs(prod) > max_prod:\n                max_prod = abs(prod)\n    return max_prod\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        a = amicable_numbers_sum_of_two_numbers(i)\n        b = amicable_numbers_sum_of_two_numbers(a)\n        if i == b and i!= a:\n            amicable_numbers.append(i)\n            amicable_numbers.append(a)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(i for i in range(1, limit) if sum(j for j in range(1, i) if i % j == 0) == i)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(filter(lambda x: is_amicable(x, limit), range(1, limit)))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            j = sum(factor(i))\n            if i == j and i!= sum(factor(j)):\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)\n    \ndef factor(num):\n    factors = []\n    for i in range(1, num):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if amicable_number(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = range(limit)\n    amicable_numbers = []\n    for i in numbers:\n        if i == 1:\n            continue\n        if i % 2 == 0:\n            continue\n        sum_divisor = 0\n        for j in range(1, i // 2 + 1):\n            if i % j == 0:\n                sum_divisor += j\n        if i == sum_divisor:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(2, limit):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums_sum = 0\n    for i in xrange(1, limit):\n        if is_amicable_number(i):\n            amicable_nums_sum += i\n    return amicable_nums_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = set()\n    for i in range(1, limit):\n        s = sum(divisors(i))\n        t = sum(divisors(s))\n        if i == s and t!= i and i!= t:\n            amicables.add(i)\n            amicables.add(t)\n    return sum(amicables)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [x for x in range(1, limit)]\n    sum = 0\n    for a in range(2, limit):\n        b = sum_of_factors(a)\n        if b < limit:\n            if a == sum_of_factors(b) and a!= b:\n                amicable_numbers.remove(a)\n                amicable_numbers.remove(b)\n                sum += a + b\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = a.real\n    y = a.imag\n    z = b.real\n    w = b.imag\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z!=0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y!=0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y!=0 and z!=0 and w==0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z!=0 and w!=0:\n        return 0\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y!=0 and z==0 and w!=0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z!=0 and w==0:\n        return cmath.phase(b)\n    if x!=0 and y==0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z!=0 and w==0:\n        return cmath.phase(b)\n    if x!=0 and y==0 and z==0 and w!=0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z!=0 and w==0:\n        return cmath.phase(b)\n    if x!=0 and y==0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z!=0 and w==0:\n        return cmath.phase(b)\n    if x==0 and y!=0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z!=0 and w!=0:\n        return 0\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y!=0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z!=0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z!=0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x!=0 and y==0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x!=0 and y==0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z!=0 and w!=0:\n        return cmath.phase(b)\n    if x!=0 and y==0 and z==0 and w!=0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x!=0 and y==0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z!=0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z!=0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z!=0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x!=0 and y==0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w==0:\n        return cmath.phase(a)\n    if x==0 and y==0 and z!=0 and w==0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z!=0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w!=0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w==0:\n        return cmath.phase(b)\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y==0 and z==0 and w==0:\n        return 0\n    if x==0 and y="
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle/3.141592654\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\ndef get_index(A,x,y):\n    '''\n    Write a function to get the index of a given element from a list.\n    '''\n    index = y*len(A)+x\n    return index\ndef in_grid(grid,x,y):\n    '''\n    Write a function to check if a given point (x,y) is in a grid.\n    '''\n    if (x>=0 and y>=0) and (x<len(grid) and y<len(grid[0])):\n        return True\n    return False\ndef pauli_product(a,b):\n    '''\n    Write a function to compute the product of two Pauli operators.\n    '''\n    if a=='I' and b=='I':\n        return 'I'\n    elif a=='X' and b=='X':\n        return 'I'\n    elif a=='Y' and b=='Y':\n        return 'I'\n    elif a=='Z' and b=='Z':\n        return 'I'\n    elif a=='I' and b=='X':\n        return 'X'\n    elif a=='I' and b=='Y':\n        return 'Y'\n    elif a=='I' and b=='Z':\n        return 'Z'\n    elif a=='X' and b=='I':\n        return 'Y'\n    elif a=='X' and b=='Y':\n        return 'Z'\n    elif a=='X' and b=='Z':\n        return 'I'\n    elif a=='Y' and b=='I':\n        return 'X'\n    elif a=='Y' and b=='X':\n        return 'Z'\n    elif a=='Y' and b=='Z':\n        return 'I'\n    elif a=='Z' and b=='I':\n        return 'X'\n    elif a=='Z' and b=='X':\n        return 'Y'\n    elif a=='Z' and b=='Y':\n        return 'I'\ndef get_syndrome(grid,code,x,y):\n    '''\n    Write a function to get the syndrome of a given code word and a particular location on the grid.\n    '''\n    syndrome = 0\n    for i in range(len(code)):\n        if in_grid(grid,x+i,y):\n            if grid[x+i][y]!=code[i]:\n                syndrome+=2**i\n    return syndrome\ndef put_syndrome(grid,code,x,y,syndrome):\n    '''\n    Write a function to put the syndrome of a given code word and a particular location on the grid.\n    '''\n    for i in range(len(code)):\n        if in_grid(grid,x+i,y):\n            grid[x+i][y] = code[i]\n    return\ndef encode(grid,code,x,y):\n    '''\n    Write a function to encode a given code word at a particular location on the grid.\n    '''\n    put_syndrome(grid,code,x,y,get_syndrome(grid,code,x,y))\n    return\ndef syndrome_match(grid,code,x,y,syndrome):\n    '''\n    Write a function to check if the syndrome matches the syndrome of a given code word at a particular location on the grid.\n    '''\n    match = 0\n    for i in range(len(code)):\n        if in_grid(grid,x+i,y):\n            if grid[x+i][y]!=code[i]:\n                match+=2**i\n    if match==syndrome:\n        return True\n    return False\ndef get_code(grid,x,y):\n    '''\n    Write a function to get the code word at a particular location on the grid.\n    '''\n    code = ''\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if in_grid(grid,i,j):\n                code+=grid[i][j]\n    return code\ndef decode(grid,code,x,y):\n    '''\n    Write a function to decode a given code word at a particular location on the grid.\n    '''\n    code_match = False\n    for i in range(len(code)):\n        if in_grid(grid,x+i,y):\n            if grid[x+i][y]!=code[i]:\n                code_match = True\n                break\n    if not code_match:\n        syndrome = get_syndrome(grid,code,x,y)\n        if syndrome%2==1:\n            put_syndrome(grid,code,x,y,syndrome-1)\n            return\n        else:\n            put_syndrome(grid,code,x,y,syndrome+1)\n            return\n    return\ndef decode_without_checking(grid,code,x,y):\n    '''\n    Write a function to decode a given code word at a particular location on the grid.\n    '''\n    for i in range(len(code)):\n        if in_grid(grid,x+i,y):\n            grid[x+i][y] = code[i]\n    return\ndef get_matrix(grid,x,y):\n    '''\n    Write a function to get the matrix at a particular location on the grid.\n    '''\n    matrix = []\n    for i in range(x,len(grid[0])-x):\n        row = []\n        for j in range(y,len(grid)-y):\n            row.append(grid[i][j])\n        matrix.append(row)\n    return matrix\ndef get_matrix_phase_shift(grid,x,y,phase):\n    '''\n    Write a function to get the matrix at a particular location on the grid with phase shift.\n    '''\n    matrix = get_matrix(grid,x,y)\n    matrix_complex = []\n    for row in matrix:\n        matrix_complex.append([complex(row[0],row[1])*phase,complex(row[2],row[3])*phase])\n    return matrix_complex\ndef get_matrix_inverse(matrix):\n    '''\n    Write a function to get the inverse of a matrix.\n    '''\n    if matrix[0][0]==0 and matrix[1][1]==0:\n        return None\n    det = abs(matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0])\n    return [[(matrix[1][1]*1.0/det),(-matrix[0][1]*1.0/det)],[(-matrix[1][0]*1.0/det),(matrix[0][0]*1.0/det)]]\ndef get_matrix_eigenvalue(matrix):\n    '''\n    Write a function to get the eigenvalue of a matrix.\n    '''\n    a = cmath.sqrt(matrix[0][0]*matrix[0][0] + matrix[0][1]*matrix[0][1])\n    b = cmath.sqrt(matrix[1][0]*matrix[1][0] + matrix[1][1]*matrix[1][1])\n    return a*b\ndef get_matrix_eigenvector(matrix):\n    '''\n    Write a function to get the eigenvector of a matrix.\n    '''\n    eigenvector = []\n    if matrix[0][0]==0 and matrix[1][1]==0:\n        return None\n    eigenvalue = cmath.sqrt(matrix[0][0]*matrix[0][0] + matrix[0][1]*matrix[0][1])\n    if eigenvalue.real!=0:\n        eigenvector.append([(matrix[1][1]*1.0/eigenvalue).real,(-matrix[0][1]*1.0/eigenvalue).real])\n    else:\n        eigenvector.append([(matrix[1][1]*1.0/eigenvalue).imag"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c = complex(a,b)\n    #return cmath.phase(c)\n    #return cmath.phase(c)*180/cmath.pi\n    return abs(cmath.phase(complex(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return 180*(cmath.phase(complex(a,b))/cmath.pi)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return 180*cmath.phase(complex(a,b))/cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b!=0:\n        return cmath.phase(complex(a,b))\n    else:\n        if a==0:\n            return 0\n        else:\n            return cmath.pi\ndef get_side_angle(angle):\n    if angle <0:\n        return 360 + angle\n    else:\n        return angle\ndef get_distance(p1,p2):\n    x1,y1=p1\n    x2,y2=p2\n    return (x2-x1)**2 + (y2-y1)**2\ndef get_angle(p1,p2,p3):\n    '''\n    Get the angle between p2,p3 and p1.\n    '''\n    x1,y1=p1\n    x2,y2=p2\n    x3,y3=p3\n    return get_side_angle(angle_complex(x1-x2,y1-y2) - angle_complex(x3-x2,y3-y2))\ndef get_midpoint(p1,p2):\n    x1,y1=p1\n    x2,y2=p2\n    return (x1+x2)/2,(y1+y2)/2\ndef get_point_from_line_and_angle(line,angle,point):\n    '''\n    Get the point on the line (p1,p2) of the angle by rotating it by angle.\n    '''\n    x1,y1=line[0]\n    x2,y2=line[1]\n    x3,y3=point\n    angle = get_side_angle(angle_complex(x2-x1,y2-y1) - angle_complex(x3-x1,y3-y1))\n    if angle>180:\n        angle = 360 - angle\n    x = x1 + x3*(1-math.cos(math.radians(angle)))\n    y = y1 + y3*(1-math.cos(math.radians(angle)))\n    return x,y\ndef is_in_between(p1,p2,p3,p4):\n    '''\n    Whether p3 is between p1 and p2.\n    '''\n    x1,y1=p1\n    x2,y2=p2\n    x3,y3=p3\n    x4,y4=p4\n    if (x1-x3)*(y2-y3)-(y1-y3)*(x2-x3)>0:\n        return (x1-x3)*(y4-y3)-(y1-y3)*(x4-x3)>0\n    else:\n        return False\ndef get_angle_in_range(p1,p2,p3,p4):\n    '''\n    Get the angle between p2,p3 and p4 from p1.\n    '''\n    x1,y1=p1\n    x2,y2=p2\n    x3,y3=p3\n    x4,y4=p4\n    x1,y1=p2\n    x2,y2=p3\n    x3,y3=p4\n    x4,y4=p1\n    if x1==x2:\n        if y2>y1:\n            return get_side_angle(angle_complex(x2-x1,y2-y1) - angle_complex(x3-x2,y3-y2))\n        else:\n            return get_side_angle(angle_complex(x2-x1,y2-y1) - angle_complex(x4-x3,y4-y3))\n    else:\n        if x2>x1:\n            x1,y1,x2,y2 = x2,y2,x1,y1\n        if y2>y1:\n            k = (y2-y1)/(x2-x1)\n            x = k*(x4-x3) + x3\n            y = k*(y4-y3) + y3\n            return get_side_angle(angle_complex(x2-x1,y2-y1) - angle_complex(x,y))\n        else:\n            k = (y2-y1)/(x2-x1)\n            x = k*(x4-x3) + x3\n            y = k*(y4-y3) + y3\n            return get_side_angle(angle_complex(x2-x1,y2-y1) - angle_complex(x,y))\ndef get_distance_from_point(point,line):\n    '''\n    Get the distance between the point and the line.\n    '''\n    x1,y1=line[0]\n    x2,y2=line[1]\n    x3,y3=point\n    a = (y2-y1)*(x1-x3) - (x2-x1)*(y1-y3)\n    b = (y1-y3)*(x2-x1) - (x1-x3)*(y2-y1)\n    return abs(a/b)\ndef is_point_in_polygon(point,polygon):\n    '''\n    Get whether the point is in the polygon.\n    '''\n    n=len(polygon)\n    inside=False\n    p1=polygon[0]\n    for i in range(n+1):\n        p2=polygon[i%n]\n        if is_in_between(p1,p2,point,polygon[(i+1)%n]):\n            inside=not inside\n        p1=p2\n    return inside\ndef get_polygon_area(polygon):\n    '''\n    Get the area of the polygon.\n    '''\n    n=len(polygon)\n    area=0\n    for i in range(n):\n        x1=polygon[i][0]\n        y1=polygon[i][1]\n        x2=polygon[(i+1)%n][0]\n        y2=polygon[(i+1)%n][1]\n        area += (x1*y2-x2*y1)\n    return area/2\ndef get_polygon_perimeter(polygon):\n    '''\n    Get the perimeter of the polygon.\n    '''\n    n=len(polygon)\n    perimeter=0\n    for i in range(n):\n        x1=polygon[i][0]\n        y1=polygon[i][1]\n        x2=polygon[(i+1)%n][0]\n        y2=polygon[(i+1)%n][1]\n        perimeter += get_distance((x1,y1),(x2,y2))\n    return perimeter\ndef is_polygon_clockwise(polygon):\n    '''\n    Get whether the polygon is clockwise.\n    '''\n    n=len(polygon)\n    a=0\n    for i in range(n):\n        x1=polygon[i][0]\n        y1=polygon[i][1]\n        x2=polygon[(i+1)%n][0]\n        y2=polygon[(i+1)%n][1]\n        a += get_side_angle(angle_complex(x1-x2,y1-y2))\n    return a>0\ndef get_intersection_point(line1,line2):\n    '''\n    Get the intersection point of the two line.\n    '''\n    x1,y1=line1[0]\n    x2,y2=line1[1]\n    x3,y3=line2[0]\n    x4,y4=line2[1]\n    if x1==x2:\n        if y2==y1:\n            return\n        if y3==y4:\n            x = x1\n            y = y3\n            return x,y\n        k = (y4-y3)/(x4-x3)\n        x = x1\n        y = k*(x1-x3) + y3\n    elif x3==x4:\n        if y3==y4:\n            return\n        if y1==y2:\n            x = x3\n            y = y"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        if string[i] == '0':\n            diff = 1\n            for j in range(i+1,length):\n                if string[j] == '1':\n                    diff += 1\n                else:\n                    if diff > max_diff:\n                        max_diff = diff\n                    break\n        else:\n            diff = 0\n            for j in range(i+1,length):\n                if string[j] == '0':\n                    diff += 1\n                else:\n                    if diff > max_diff:\n                        max_diff = diff\n                    break\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    start = 0\n    max_diff = 0\n    num_zeros, num_ones = 0, 0\n    while start < len(string):\n        if string[start] == '0':\n            num_zeros += 1\n            if num_ones > 0:\n                max_diff = max(max_diff, num_ones)\n        else:\n            num_ones += 1\n        if num_zeros == 0:\n            max_diff = max(max_diff, num_ones)\n        else:\n            max_diff = max(max_diff, num_zeros)\n        start += 1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string) \n    count = [0] * (length + 1)\n    res = 0\n    for i in range(length):\n        if string[i] == '0':\n            count[i + 1] = count[i] + 1\n        else:\n            count[i + 1] = count[i]\n        res = max(res, count[i + 1] - count[i])\n    return res\n    "
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    sub_count = 0\n    max_count = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    \n    max_so_far = 0\n    length = len(string)\n    for i in xrange(length):\n        if string[i] == '0':\n            substring = string[i:]\n            count_0 = 0\n            count_1 = 0\n            for j in xrange(len(substring)):\n                if substring[j] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            max_so_far = max(max_so_far, (count_1 - count_0))\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    index, count, max_diff = 0, 0, 0\n    while index < len(string): \n        if string[index] == '0': count += 1\n        else: count -= 1\n        if count > max_diff: max_diff = count\n        index += 1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    if not string:\n        return 0\n    for i in xrange(len(string)):\n        if string[i] == '1':\n            count += 1\n        elif string[i] == '0':\n            count -= 1\n    return count"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    list_of_substrings = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            substring = string[i:j+1]\n            list_of_substrings.append(substring)\n    list_of_substrings.sort()\n    number_of_ones = 0\n    number_of_zeroes = 0\n    for substring in list_of_substrings:\n        if substring == '1':\n            number_of_ones += 1\n        elif substring == '0':\n            number_of_zeroes += 1\n    max_dif = abs(number_of_ones - number_of_zeroes)\n    return max_dif\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    print(string)\n    if not string:\n        return 0\n    count0 = 0\n    count1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count0 > count1:\n            min_len = count0\n        else:\n            min_len = count1\n        if count0 - count1 > min_len:\n            max_len = count0 - count1\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = -1\n    for i in range(n):\n        if string[i] == '0':\n            num_0s = 1\n        else:\n            num_0s = 0\n        \n        for j in range(i+1,n):\n            if string[j] == '0':\n                num_0s += 1\n            else:\n                break\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    commonDivisors = []\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            commonDivisors.append(i)\n    print(sum(commonDivisors))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a > b:\n        big,small = a,b\n    else:\n        big,small = b,a\n    commonDivisors = []\n    for i in range(1,small+1):\n        if a%i == 0 and b%i == 0:\n            commonDivisors.append(i)\n    return sum(commonDivisors)\n    \n    \ndef factor(num):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    \n    divisors = []\n    for i in range(1, num+1):\n        if num%i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef primeFactor(num):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    \n    primeFactors = []\n    while num > 1:\n        divisors = factor(num)\n        for i in range(len(divisors)):\n            if divisors[i] == 2:\n                num = num/2\n                primeFactors.append(2)\n                break\n            elif divisors[i] == 3:\n                num = num/3\n                primeFactors.append(3)\n                break\n            elif divisors[i] == 5:\n                num = num/5\n                primeFactors.append(5)\n                break\n            elif divisors[i] == 7:\n                num = num/7\n                primeFactors.append(7)\n                break\n            elif divisors[i] == 11:\n                num = num/11\n                primeFactors.append(11)\n                break\n            elif divisors[i] == 13:\n                num = num/13\n                primeFactors.append(13)\n                break\n    return primeFactors\n    \ndef numSquares(num):\n    '''\n    Write a python function to find the number of perfect squares less than a given number.\n    '''\n    \n    perfectSquares = []\n    for i in range(1,num+1):\n        perfectSquares.append(i**2)\n    numSquares = 0\n    for i in range(len(perfectSquares)):\n        if perfectSquares[i] < num:\n            numSquares = numSquares + 1\n        else:\n            break\n    return numSquares\n    \ndef sumSquares(num):\n    '''\n    Write a python function to find the sum of the first n perfect squares less than a given number.\n    '''\n    \n    perfectSquares = []\n    for i in range(1,num+1):\n        perfectSquares.append(i**2)\n    sums = 0\n    for i in range(len(perfectSquares)):\n        sums = sums + perfectSquares[i]\n    return sums\n    \ndef sumSquare(num):\n    '''\n    Write a python function to find the sum of the first n perfect squares less than a given number.\n    '''\n    \n    perfectSquares = []\n    for i in range(1,num+1):\n        perfectSquares.append(i**2)\n    sums = 0\n    for i in range(len(perfectSquares)):\n        sums = sums + perfectSquares[i]\n    return sums\n    \ndef primeFactorsSum(num):\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    \n    primeFactors = primeFactor(num)\n    sums = 0\n    for i in range(len(primeFactors)):\n        sums = sums + primeFactors[i]\n    return sums\n    \ndef factorsSum(num):\n    '''\n    Write a python function to find the sum of factors of a given number.\n    '''\n    \n    factors = factor(num)\n    sums = 0\n    for i in range(len(factors)):\n        sums = sums + factors[i]\n    return sums\n    \ndef sumFactors(num):\n    '''\n    Write a python function to find the sum of factors of a given number.\n    '''\n    \n    factors = factor(num)\n    sums = 0\n    for i in range(len(factors)):\n        sums = sums + factors[i]\n    return sums\n    \ndef sumFactorsPrime(num):\n    '''\n    Write a python function to find the sum of factors of a given number.\n    '''\n    \n    factors = primeFactor(num)\n    sums = 0\n    for i in range(len(factors)):\n        sums = sums + factors[i]\n    return sums\n    \ndef perfectNumbers(num):\n    '''\n    Write a python function to find the perfect numbers less than a given number.\n    '''\n    \n    perfectNumbers = []\n    for i in range(1,num+1):\n        if sumSquares(i) == i:\n            perfectNumbers.append(i)\n    return perfectNumbers\n    \ndef perfectNumbersSum(num):\n    '''\n    Write a python function to find the sum of perfect numbers less than a given number.\n    '''\n    \n    perfectNumbers = perfectNumbers(num)\n    sums = 0\n    for i in range(len(perfectNumbers)):\n        sums = sums + perfectNumbers[i]\n    return sums\n    \ndef perfectNumbersSumPrime(num):\n    '''\n    Write a python function to find the sum of perfect numbers less than a given number.\n    '''\n    \n    perfectNumbers = perfectNumbers(num)\n    sums = 0\n    for i in range(len(perfectNumbers)):\n        sums = sums + perfectNumbers[i]\n    return sums\n    \ndef primeSum(num):\n    '''\n    Write a python function to find the sum of prime numbers less than a given number.\n    '''\n    \n    primes = []\n    for i in range(2,num+1):\n        if sumFactors(i) == i:\n            primes.append(i)\n    return sum(primes)\n    \ndef primeSumPrime(num):\n    '''\n    Write a python function to find the sum of prime numbers less than a given number.\n    '''\n    \n    primes = []\n    for i in range(2,num+1):\n        if sumFactorsPrime(i) == i:\n            primes.append(i)\n    return sum(primes)\n    \ndef main():\n    #print sum(3,5)\n    #print factor(4)\n    #print primeFactor(10)\n    #print numSquares(5)\n    #print sumSquares(5)\n    #print sumSquare(5)\n    #print primeFactorsSum(20)\n    #print factorsSum(20)\n    #print sumFactors(20)\n    #print sumFactorsPrime(20)\n    #print perfectNumbers(100)\n    #print perfectNumbersSum(100)\n    #print perfectNumbersSumPrime(100)\n    #print primeSum(100)\n    #print primeSumPrime(100)\n    print sumFactorsSum(5)\n    print sumFactorsSumPrime(5)\n    print sumFactorsSum(20)\n    print sumFactorsSumPrime(20)\n    print sumFactorsSum(100)\n    print sumFactorsSumPrime(100)\n    print sumFactorsSum(1000)\n    print sumFactorsSumPrime(1000)\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def sum_divisors(n):\n        total = 1\n        divisor = 1\n        i = 2\n        while divisor <= n:\n            if n%i == 0:\n                divisor += i\n                if n/i!= i:\n                    total += i\n                i += 1\n            else:\n                i += 1\n        return total\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b: return a\n    if a>b: return sum(b,a%b)\n    if b>a: return sum(a,b%a)\n    if a%b==0: return b\n    return sum(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b//GCD(a,b)\n    \ndef GCD(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    while b:\n        a,b = b, a%b\n    return a\n    \ndef LCM(a,b):\n    '''\n    Write a python function to find the least common multiple of two given numbers.\n    '''\n    return a*b//GCD(a,b)\n    \ndef findPrimeFactors(n):\n    '''\n    Write a python function to find the prime factors of given number.\n    '''\n    i = 2\n    while i*i <= n:\n        if n%i:\n            i += 1\n        else:\n            n //= i\n    return n,i\n    \ndef countDivisors(n):\n    '''\n    Write a python function to find the number of divisors of given number.\n    '''\n    if n==1:\n        return 1\n    div,i = findPrimeFactors(n)\n    return div+countDivisors(div)\n    \ndef getPrimeFactors(n):\n    '''\n    Write a python function to get the prime factors of given number.\n    '''\n    div,i = findPrimeFactors(n)\n    if div==1:\n        return [1]\n    return [div]+getPrimeFactors(div)\n    \ndef isPerfectNumber(n):\n    '''\n    Write a python function to check given number is a perfect number.\n    '''\n    s = 1\n    for i in range(2,int(n/2)+1):\n        if n%i==0:\n            s += i\n    return s==n\n    \ndef isAbundantNumber(n):\n    '''\n    Write a python function to check given number is an abundant number.\n    '''\n    s = 1\n    for i in range(2,int(n/2)+1):\n        if n%i==0:\n            s += i\n    return s>n\n    \ndef isPerfectAbundantNumber(n):\n    '''\n    Write a python function to check given number is a perfect and abundant number.\n    '''\n    return isPerfectNumber(n) and isAbundantNumber(n)\n    \ndef isNonPerfectNumber(n):\n    '''\n    Write a python function to check given number is a non-perfect number.\n    '''\n    return not isPerfectNumber(n)\n    \ndef isNonAbundantNumber(n):\n    '''\n    Write a python function to check given number is a non-abundant number.\n    '''\n    return not isAbundantNumber(n)\n    \ndef isTransitiveNumber(n):\n    '''\n    Write a python function to check given number is a transitive number.\n    '''\n    a,b,c = getPrimeFactors(n)\n    return a*b<=c*n\n    \ndef isSymmetricNumber(n):\n    '''\n    Write a python function to check given number is a symmetric number.\n    '''\n    s = str(n)\n    for i in range(len(s)/2):\n        if s[i]!=s[-1-i]:\n            return False\n    return True\n    \ndef isPalindromeNumber(n):\n    '''\n    Write a python function to check given number is a palindrome number.\n    '''\n    return str(n)==str(n)[::-1]\n    \ndef isFibonacciNumber(n):\n    '''\n    Write a python function to check given number is a fibonacci number.\n    '''\n    return isPerfectNumber(sum(FibonacciNumbers,0)) and isPerfectNumber(n)\n    \ndef isCuriousNumber(n):\n    '''\n    Write a python function to check given number is a curious number.\n    '''\n    d = len(str(n))\n    return isPerfectNumber(d) and countDivisors(d)==d\n    \ndef isTruncatableNumber(n):\n    '''\n    Write a python function to check given number is a truncatable number.\n    '''\n    s = str(n)\n    for i in range(len(s)):\n        if not isPerfectNumber(int(s[i:])):\n            return False\n    return True\n    \ndef isPandigitalNumber(n):\n    '''\n    Write a python function to check given number is a pandigital number.\n    '''\n    return sorted(str(n))==[str(i) for i in range(1,len(str(n))+1)]\n    \ndef isHighlyTruncatableNumber(n):\n    '''\n    Write a python function to check given number is a highly truncatable number.\n    '''\n    return isPandigitalNumber(n) and isTruncatableNumber(n)\n    \ndef isArithmeticNumber(n):\n    '''\n    Write a python function to check given number is an arithmetic number.\n    '''\n    return not isPerfectNumber(n) and not isNonPerfectNumber(n)\n    \ndef isHighlyArithmeticNumber(n):\n    '''\n    Write a python function to check given number is a highly arithmetic number.\n    '''\n    return not isPerfectNumber(n) and not isNonPerfectNumber(n)\n    \ndef isCompositeNumber(n):\n    '''\n    Write a python function to check given number is a composite number.\n    '''\n    return not isPerfectNumber(n) and not isNonPerfectNumber(n)\n    \ndef isHighlyCompositeNumber(n):\n    '''\n    Write a python function to check given number is a highly composite number.\n    '''\n    return not isPerfectNumber(n) and not isNonPerfectNumber(n)\n    \ndef isNthRootNumber(n,r):\n    '''\n    Write a python function to check given number is a root number.\n    '''\n    return isPerfectNumber(n) and isPerfectNumber(n**r)\n    \ndef isHighlyNthRootNumber(n,r):\n    '''\n    Write a python function to check given number is a highly root number.\n    '''\n    return isPerfectNumber(n) and isPerfectNumber(n**r) and isHighlyTruncatableNumber(n)\n    \ndef isPerfectNumberPermutation(n):\n    '''\n    Write a python function to check given number is a perfect number permutation.\n    '''\n    return isPerfectNumber(n) and isPandigitalNumber(n)\n    \ndef isHighlyPerfectNumberPermutation(n):\n    '''\n    Write a python function to check given number is a highly perfect number permutation.\n    '''\n    return isPerfectNumber(n) and isPandigitalNumber(n) and isHighlyTruncatableNumber(n)\n    \ndef isPandigitalNumberPermutation(n):\n    '''\n    Write a python function to check given number is a pandigital number permutation.\n    '''\n    return isPandigitalNumber(n) and isTruncatableNumber(n)\n    \ndef isHighlyPandigitalNumberPermutation(n):\n    '''\n    Write a python function to check given number is a highly pandigital number permutation.\n    '''\n    return isPandigitalNumber(n) and isTruncatableNumber(n) and isHighlyTruncatableNumber(n)\n    \ndef isFiniteNumber(n):\n    '''\n    Write a python function to check given number is a finite number.\n    '''\n    return isHighlyTruncatableNumber(n)\n    \ndef isHighlyFiniteNumber(n):\n    '''\n    Write a python function to check given number is a highly finite number.\n    '''\n    return isHighlyTruncatableNumber(n) and isHighlyPandigitalNumberPermutation(n)\n    \ndef isOneToNineNumber(n):\n    '''\n    Write a python function to check given number is a one to nine number.\n    '''\n    return isHighlyNthRootNumber(n,1)\n    \ndef isHighlyOneToNineNumber(n):\n    '''\n    Write a python function to check given number is a highly one to nine number.\n    '''\n    return isHighlyNthRootNumbe"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = [i for i in range(2,min(a,b)+1) if a%i == 0 and b%i == 0]\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a==b):\n        return a\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list1=list(divisors(a))\n    list2=list(divisors(b))\n    l3=list1+list2\n    l3.sort()\n    s=0\n    for i in l3:\n        if(a%i==0 and b%i==0):\n            s=s+i\n    return s\ndef divisors(n):\n    divisors=[]\n    for i in range(1,n+1):\n        if(n%i==0):\n            divisors.append(i)\n    return divisors\n    \n    \ndef create_dict(filename):\n    '''\n    Write a python function to create a dictionary of the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    d={}\n    file=open(filename,'r')\n    for line in file:\n        surname,student_id=line.strip().split(',')\n        d[student_id]=surname\n    return d\ndef get_names(filename):\n    '''\n    Write a python function to get all the students who have the surname in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    d={}\n    file=open(filename,'r')\n    for line in file:\n        surname,student_id=line.strip().split(',')\n        d[student_id]=surname\n    return d\ndef max_n(d):\n    '''\n    Write a python function to find the student with the maximum number of names in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    for i in d:\n        l[i]=len(d[i])\n    s=max(l.values())\n    for i in l:\n        if(l[i]==s):\n            return i\ndef min_n(d):\n    '''\n    Write a python function to find the student with the minimum number of names in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    for i in d:\n        l[i]=len(d[i])\n    s=min(l.values())\n    for i in l:\n        if(l[i]==s):\n            return i\ndef most_common(d):\n    '''\n    Write a python function to find the student with the most common name in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    for i in d:\n        l[i]=len(d[i])\n    max_s=max(l.values())\n    for i in l:\n        if(l[i]==max_s):\n            return i\ndef least_common(d):\n    '''\n    Write a python function to find the student with the least common name in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    for i in d:\n        l[i]=len(d[i])\n    min_s=min(l.values())\n    for i in l:\n        if(l[i]==min_s):\n            return i\ndef unique_surname(d):\n    '''\n    Write a python function to get all the students who have surnames that are unique in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    for i in d:\n        l[i]=len(d[i])\n    l1=[]\n    for i in l:\n        if(l[i]==1):\n            l1.append(i)\n    return l1\ndef unique_firstname(d):\n    '''\n    Write a python function to get all the students who have first names that are unique in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    for i in d:\n        l[i]=len(d[i])\n    l1=[]\n    for i in l:\n        if(l[i]==1):\n            l1.append(i)\n    return l1\ndef get_names_of_surname(surname,filename):\n    '''\n    Write a python function to get all the student names of the given surname in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    file=open(filename,'r')\n    for line in file:\n        surname,student_id=line.strip().split(',')\n        if(surname==surname):\n            l[student_id]=surname\n    return l\ndef get_surname(student_id,filename):\n    '''\n    Write a python function to get the surname of the student with the given student_id in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    file=open(filename,'r')\n    for line in file:\n        surname,student_id=line.strip().split(',')\n        if(student_id==student_id):\n            l[student_id]=surname\n    return l[student_id]\ndef find_surname(student_id,filename):\n    '''\n    Write a python function to find the surname of the student with the given student_id in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    l={}\n    file=open(filename,'r')\n    for line in file:\n        surname,student_id=line.strip().split(',')\n        if(student_id==student_id):\n            l[surname]=student_id\n    return l[surname]\ndef get_all_surnames(filename):\n    '''\n    Write a python function to get all the surnames of the students in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    d={}\n    file=open(filename,'r')\n    for line in file:\n        surname,student_id=line.strip().split(',')\n        d[student_id]=surname\n    return d\ndef get_all_names(filename):\n    '''\n    Write a python function to get all the student names in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    d={}\n    file=open(filename,'r')\n    for line in file:\n        student_id,surname=line.strip().split(',')\n        d[student_id]=surname\n    return d\ndef get_all_names_of_surname(surname,filename):\n    '''\n    Write a python function to get all the student names of the given surname in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''\n    d={}\n    file=open(filename,'r')\n    for line in file:\n        student_id,surname=line.strip().split(',')\n        if(surname==surname):\n            d[student_id]=surname\n    return d\ndef get_all_names_of_surname_in_ascending(surname,filename):\n    '''\n    Write a python function to get all the student names of the given surname in the following format \n    {student_id:surname, student_id:surname, student_id:surname}\n    '''"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    def gcd(a,b):\n        '''\n        Write a python function to find the gcd of two given numbers.\n        '''\n        \n        if a < b:\n            if b % a == 0:\n                return a\n            else:\n                return gcd(b % a, a)\n        else:\n            if a % b == 0:\n                return b\n            else:\n                return gcd(a % b, b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l = list(gcd(a,b))\n    sum = 1\n    for x in l:\n        sum *= x\n    return sum\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x==0 or y==0:\n        return 0\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # return [x for x in str.split() if len(x) > n]\n    return [x for x in str.split() if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    ans = []\n    for word in str:\n        if len(word) > n:\n            ans.append(word)\n    return ans\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = [word for word in str.split(' ') if len(word) > n]\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n    "
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    from collections import Counter\n    import re\n    long_words = [str for str in re.split('\\W+', str) if len(str) > n]\n    long_words = Counter(long_words)\n    return [word for word, count in long_words.items() if count > 1]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [s for s in str if len(s) > n]\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in range(0,3):\n        if my_matrix[i][0]+my_matrix[i][1]+my_matrix[i][2] == my_matrix[0][i]+my_matrix[1][i]+my_matrix[2][i]:\n            total = total + 1\n    for i in range(0,3):\n        if my_matrix[i][0]+my_matrix[i][1]+my_matrix[i][2] == my_matrix[0][0]+my_matrix[1][1]+my_matrix[2][2]:\n            total = total + 1\n    if my_matrix[0][0]+my_matrix[1][1]+my_matrix[2][2] == my_matrix[0][2]+my_matrix[1][1]+my_matrix[2][0]:\n        total = total + 1\n    return total == 4\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    #Check each row\n    for row in my_matrix:\n        if sum(row)!= 100:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square = [[],[],[],[],[],[],[],[]]\n    row_sum = []\n    col_sum = []\n    diagonal_sum = []\n    #Calculate row sum\n    for row in range(0,9):\n        row_sum.append(sum(my_matrix[row]))\n    #Calculate column sum\n    for col in range(0,9):\n        col_sum.append(sum(list(zip(*my_matrix))[col]))\n    #Calculate diagonal sum\n    for index in range(0,8):\n        diagonal_sum.append(my_matrix[index][index])\n    #If any of the sums are not equal, return false\n    for i in range(0,9):\n        if row_sum[i]!= row_sum[i] or col_sum[i]!= col_sum[i] or diagonal_sum[i]!= diagonal_sum[i]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0:\n        return False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for i in my_matrix:\n        if len(i)!= len(my_matrix[0]):\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #sum_rows = [0]*len(my_matrix)\n    #sum_cols = [0]*len(my_matrix[0])\n    #sum_diag = [0]\n    #sum_anti_diag = [0]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_squares = [[4, 8, 2, 3, 5],\n                    [4, 3, 5, 6, 7],\n                    [6, 1, 8, 9, 2],\n                    [8, 9, 1, 3, 5],\n                    [2, 7, 6, 9, 8]]\n    if my_matrix in magic_squares:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (len(my_matrix)!= len(my_matrix[0])):\n        return False\n    \n    #check each row for sum, if sum = total, continue\n    #check each column for sum, if sum = total, continue\n    #check each diagonal for sum, if sum = total, continue\n    \n    total = (len(my_matrix)**2) * (len(my_matrix) + 1) / 2\n    \n    row_total = 0\n    for row in range(len(my_matrix)):\n        row_total += sum(my_matrix[row])\n    \n    if row_total!= total:\n        return False\n    \n    column_total = 0\n    for column in range(len(my_matrix)):\n        column_total += sum([my_matrix[row][column] for row in range(len(my_matrix))])\n    \n    if column_total!= total:\n        return False\n    \n    diagonal_total = 0\n    for diagonal in range(len(my_matrix)):\n        diagonal_total += my_matrix[diagonal][diagonal]\n    \n    if diagonal_total!= total:\n        return False\n    \n    return True\n    "
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_of_rows = [sum(row) for row in my_matrix]\n    sum_of_columns = [sum(column) for column in zip(*my_matrix)]\n    sum_diagonals = [sum(my_matrix[i][i] for i in range(len(my_matrix)))]\n    sum_diagonals.extend([sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))])\n    return all(x == sum_of_rows[0] for x in sum_of_rows) and all(x == sum_of_columns[0] for x in sum_of_columns) and all(x == sum_diagonals[0] for x in sum_diagonals)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if sum(my_matrix[0])!= 15 or sum(my_matrix[1])!= 15 or sum(my_matrix[2])!= 15:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # First, check if the sum of each row is equal to each column\n    # Then, check if the sum of each column is equal to each row\n    # Finally, check if each diagonal is the sum of each other diagonal\n    # If all these are true, the matrix is magic\n    # Otherwise, the matrix is not magic\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    return max(frequency, key=frequency.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_freq = max(counts.values())\n    return [key for key,val in counts.items() if val == max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    m_count = 0\n    m_val = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i - 1]:\n            m_count = m_count + 1\n        else:\n            m_count = 1\n        if m_count > m_count:\n            m_count = m_count\n            m_val = nums[i]\n    return m_val\n    \ndef max_occurrences_dict(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_freq = defaultdict(int)\n    for i in nums:\n        num_freq[i] += 1\n    max_freq = 0\n    max_val = 0\n    for i in num_freq.keys():\n        if num_freq[i] > max_freq:\n            max_freq = num_freq[i]\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for item in nums:\n        counter[item] += 1\n    return counter.items()[-1][0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return d.keys()[d.values().index(max(d.values()))]\ndef generate_words_with_length_k(str_list, k):\n    '''\n    Given a list of strings and a length, return a new list of strings with\n    length-k substring, each of which is a unique string.\n    '''\n    out = []\n    for word in str_list:\n        for i in range(len(word) - k + 1):\n            out.append(word[i:i+k])\n    return out\ndef num_items_with_length_k(str_list, k):\n    '''\n    Given a list of strings and a length, return the number of items in the\n    list with length-k substring.\n    '''\n    count = 0\n    for word in str_list:\n        for i in range(len(word) - k + 1):\n            count += 1\n    return count\ndef is_palindrome(s):\n    '''\n    Given a string, return True if the string is a palindrome, False otherwise.\n    '''\n    return s == s[::-1]\ndef is_palindrome_2(s):\n    '''\n    Given a string, return True if the string is a palindrome, False otherwise.\n    '''\n    if len(s) < 2:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome_2(s[1:-1])\ndef remove_duplicates(nums):\n    '''\n    Given a list of numbers, remove any duplicate numbers.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            continue\n        seen.add(num)\n    return list(seen)\ndef has_palindrome(nums):\n    '''\n    Given a list of numbers, return True if the list has a palindrome.\n    '''\n    return any(is_palindrome_2(str(num)) for num in nums)\ndef convert_to_int(s):\n    '''\n    Given a string, return the integer that it represents.\n    '''\n    return int(s)\ndef is_pangram(s):\n    '''\n    Given a string, return True if the string is a pangram, False otherwise.\n    '''\n    import string\n    return set(string.lowercase) - set(s.lower()) == set()\ndef is_nondecreasing(nums):\n    '''\n    Given a list of numbers, return True if the list is non-decreasing, False\n    otherwise.\n    '''\n    return all(a <= b for a, b in zip(nums, nums[1:]))\ndef reverse_vowels(s):\n    '''\n    Given a string, return a new string with all vowels reversed.\n    '''\n    vowels = set('aeiouAEIOU')\n    return ''.join(reversed(s) if c in vowels else c for c in s)\ndef is_binary_search_tree(root):\n    '''\n    Given a binary search tree, return True if it is a binary search tree.\n    '''\n    if not root:\n        return True\n    if root.left and root.left.val > root.val:\n        return False\n    if root.right and root.right.val < root.val:\n        return False\n    return is_binary_search_tree(root.left) and is_binary_search_tree(root.right)\ndef is_valid_bst(root):\n    '''\n    Given a binary search tree, return True if it is a valid binary search tree.\n    '''\n    if not root:\n        return True\n    if root.left and root.left.val > root.val:\n        return False\n    if root.right and root.right.val < root.val:\n        return False\n    return is_valid_bst(root.left) and is_valid_bst(root.right)\ndef is_valid_bst_2(root):\n    '''\n    Given a binary search tree, return True if it is a valid binary search tree.\n    '''\n    if not root:\n        return True\n    if root.left and root.left.val > root.val:\n        return False\n    if root.right and root.right.val < root.val:\n        return False\n    return is_valid_bst_2(root.left) and is_valid_bst_2(root.right)\ndef sum_left_leaves(root):\n    '''\n    Given a binary search tree, return the sum of all left leaves.\n    '''\n    if not root:\n        return 0\n    if not root.left and not root.right:\n        return root.val\n    return sum_left_leaves(root.left) + sum_left_leaves(root.right)\ndef is_balanced(root):\n    '''\n    Given a binary search tree, return True if it is balanced, False otherwise.\n    '''\n    if not root:\n        return True\n    left_depth = get_depth(root.left)\n    right_depth = get_depth(root.right)\n    return abs(left_depth - right_depth) < 2\ndef get_depth(node):\n    if not node:\n        return 0\n    return 1 + max(get_depth(node.left), get_depth(node.right))\ndef is_balanced_2(root):\n    '''\n    Given a binary search tree, return True if it is balanced, False otherwise.\n    '''\n    if not root:\n        return True\n    left_depth = get_depth_2(root.left)\n    right_depth = get_depth_2(root.right)\n    return abs(left_depth - right_depth) < 2\ndef get_depth_2(node):\n    if not node:\n        return 0\n    return 1 + max(get_depth_2(node.left), get_depth_2(node.right))\ndef is_balanced_3(root):\n    '''\n    Given a binary search tree, return True if it is balanced, False otherwise.\n    '''\n    if not root:\n        return True\n    left_depth = get_depth_3(root.left)\n    right_depth = get_depth_3(root.right)\n    return abs(left_depth - right_depth) < 2\ndef get_depth_3(node):\n    if not node:\n        return 0\n    return 1 + max(get_depth_3(node.left), get_depth_3(node.right))\ndef is_balanced_4(root):\n    '''\n    Given a binary search tree, return True if it is balanced, False otherwise.\n    '''\n    if not root:\n        return True\n    left_depth = get_depth_4(root.left)\n    right_depth = get_depth_4(root.right)\n    return abs(left_depth - right_depth) < 2\ndef get_depth_4(node):\n    if not node:\n        return 0\n    return 1 + max(get_depth_4(node.left), get_depth_4(node.right))\ndef is_bst_successor(root, p):\n    '''\n    Given a binary search tree, return True if p has a successor, False otherwise.\n    '''\n    if not root:\n        return False\n    if p.val < root.val:\n        return is_bst_successor(root.left, p)\n    if p.val > root.val:\n        return is_bst_successor(root.right, p)\n    return True\ndef is_bst_successor_2(root, p):\n    '''\n    Given a binary search tree, return True if p has a successor, False otherwise.\n    '''\n    if not root:\n        return False\n    if p.val < root.val:\n        return is_bst_successor_2(root.left, p)\n    if p.val > root.val:\n        return is_bst_successor_2(root.right, p)\n    return True\ndef find_min_in_bst(root):\n    '"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        if nums.count(num) > max_freq:\n            max_freq = nums.count(num)\n            max_item = num\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for i in nums:\n        counts[i] += 1\n    return max(counts, key=lambda k: counts[k])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(set(nums), key=nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i] += 1\n    max_val = max(dic.values())\n    return [k for k,v in dic.items() if v == max_val][0]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    string = list(str1)\n    length = len(str1)\n    i = 0\n    while i < length:\n        if string[i] in vowels:\n            string[i] = string[length-1]\n            length = length-1\n        i = i+1\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join(i for i in str1 if i not in 'aeiouAEIOU')[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    return \"\".join(str1[i] for i in range(len(str1)-1, -1, -1) if str1[i].lower() in vowels)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    return ''.join([c for c in str1[::-1] if c.lower() in vowels])\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    reversed_string = []\n    for letter in str1:\n        if letter in vowel:\n            reversed_string.append(letter)\n    reversed_string.reverse()\n    return ''.join(reversed_string)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1=str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in 'aeiou':\n            str1=str1[:i]+str1[i+1:]+str1[i]\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    length = len(str1)\n    i = 0\n    while i < length:\n        if str1[i].lower() not in vowels:\n            str1[i] = str1[i].lower()\n            i += 1\n        else:\n            str1[i] = str1[i].lower()\n            str1[length - 1] = str1[length - 1].upper()\n            length -= 1\n            i += 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    str1 = [x for x in str1]\n    l, r = 0, len(str1)-1\n    while l<r:\n        if str1[l] not in vowels:\n            l += 1\n        elif str1[r] not in vowels:\n            r -= 1\n        else:\n            str1[l], str1[r] = str1[r], str1[l]\n            l += 1\n            r -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = list(str1)\n    start = 0\n    end = len(str1)-1\n    while start < end:\n        if str1[start] not in vowels:\n            start+=1\n        elif str1[end] not in vowels:\n            end-=1\n        else:\n            str1[start], str1[end] = str1[end], str1[start]\n            start+=1\n            end-=1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str1 = [i for i in str1 if i in vowels]\n    str1.reverse()\n    return \"\".join(str1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res_str = ''\n    for i in tup1:\n        res_str += str(i) +''\n    return res_str\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_string = ''\n    for char in tup1:\n        new_string += char\n    return new_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # return tup1.__str__()\n    string_list = []\n    for x in tup1:\n        string_list.append(str(x))\n    return''.join(string_list)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return \"\"\n    else:\n        return tup1[0]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for tup2 in tup1:\n        string += tup2\n        string +=''\n    return string[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1=''\n    for i in tup1:\n        str1=str1+str(i)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result = result + num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    res = 0\n    for i in nums:\n        if i < 0:\n            res += i\n    return res\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 7\n    else:\n        return 14*n + 17\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n * (n + 1)) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n + 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n    \ndef main():\n    num = int(input('Enter a number: '))\n    print(hexagonal_num(num))\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # The hexagonal numbers are generated by the following formula:\n    # Hn = n(2n \u2212 1) / 2.\n    \n    return n*(2*n-1)/2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))/2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagonal_num_helper(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return 2*hexagonal_num_helper(n-1) - hexagonal_num_helper(n-2)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros/non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums = array('i', nums)\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    return zeros/float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros/float(non_zeros)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return 0 if not nums else len([x for x in nums if x==0]) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n_zeros = 0\n    n_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            n_zeros += 1\n        else:\n            n_non_zeros += 1\n    return float(n_zeros)/n_non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_non_zero = 0\n    total_zero = 0\n    for num in nums:\n        if num == 0:\n            total_zero += 1\n        else:\n            total_non_zero += 1\n    return float(total_zero) / float(total_non_zero)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    from collections import Counter\n    n = 0\n    for i in nums:\n        if i == 0:\n            n += 1\n    return n/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    num_non_zero = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n0 = n1 = 0\n    for n in nums:\n        if n == 0:\n            n0 += 1\n        else:\n            n1 += 1\n    return float(n0) / n1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            return False\n    return True\ndef sum_of_powers_of_two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            return False\n    return True\ndef Sum_of_Powers_of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            return False\n    return True\ndef Sum_of_Powers_Of_Two_2(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_3(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_4(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_5(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_6(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_7(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_8(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_9(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_10(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_11(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_12(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_13(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_14(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_15(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]:\n                return False\n    return True\ndef Sum_of_Powers_of_Two_16(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            if s[i]!=s[i-1]"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    number = str(n)\n    number_length = len(number)\n    for i in range(1, number_length):\n        if i*2 == number_length:\n            return False\n        if i*2 > number_length:\n            return False\n        if int(number[i:i+2]) % 2 == 0:\n            continue\n        if int(number[i:i+2]) == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    result = True\n    #check for the given number \n    if n < 0:\n        result = False\n    \n    #check for the powers of 2 which are less than the given number \n    else:\n        for i in range(1,n):\n            if i*2 > n:\n                break\n            if n % i!= 0:\n                result = False\n                break\n    return result\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        if n/2 == 1:\n            return True\n        elif n/2 == 0:\n            return False\n        else:\n            return is_Sum_Of_Powers_Of_Two(n/2)\n    elif n % 2!= 0:\n        if n/2 == 1:\n            return False\n        elif n/2 == 0:\n            return True\n        else:\n            return is_Sum_Of_Powers_Of_Two(n/2)\n            \ndef is_Power_Of_2(n):\n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n < 0:\n        return False\n    if n % 2 == 0:\n        return is_Power_Of_2(n/2)\n    elif n % 2!= 0:\n        return False\n    \ndef is_Number_Non_Negative(n):\n    '''\n    Write a python function to check whether the given number is non-negative or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        return True\n    \ndef is_Number_Positive(n):\n    '''\n    Write a python function to check whether the given number is positive or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False\n    \ndef is_Number_Zero(n):\n    '''\n    Write a python function to check whether the given number is zero or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        return False\n    \ndef is_Number_Pos_Or_Zero(n):\n    '''\n    Write a python function to check whether the given number is positive or zero or not.\n    '''\n    if n > 0:\n        return True\n    elif n == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    elif n<0:\n        return False\n    else:\n        if (n&(n-1))==0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # numbers less than 1\n    if n < 1:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return bool(not len(bin(n)[2:]) % 2)\n    # as it is a non-negative integer, it will always be a multiple of 2, so no need to check.\n    # bin() method returns a binary representation of the given number\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    a=n\n    s=0\n    while a:\n        s+=1\n        a/=2\n    b=n\n    while b:\n        b/=2\n    if s==b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n & (-n) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n%2 == 0:\n        n = n / 2\n    for i in range(3,int(n**.5)):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return pi * r * 2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # print(2*3.14*r)\n    return 2*3.14*r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for item in test_list:\n        if type(item) is int:\n            singly_list.append(item)\n        elif type(item) is list:\n            singly_list.extend(item)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([x for sublist in test_list for x in sublist])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [item for sublist in test_list for item in sublist]\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for x in test_list:\n        if isinstance(x, list):\n            for y in x:\n                flatten_list.append(y)\n        else:\n            flatten_list.append(x)\n    return flatten_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    results = []\n    for i in test_list:\n        results.extend(i)\n    return results\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not test_list:\n        return []\n    result = []\n    for item in test_list:\n        result.extend(item)\n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Pad the list with zeros\n    max_val = max(nums)\n    nums.extend([0]*(max_val-len(nums)))\n    # Run sort on the list\n    for i in xrange(len(nums)//2):\n        # Find the index of the smallest num\n        left, right = 0, len(nums)-1\n        # Keep track of the smallest num\n        smallest = left\n        while left <= right:\n            if nums[left] < nums[right]:\n                smallest = left\n            else:\n                smallest = right\n            left, right = left + 1, right - 1\n        # Swap the smallest num with the index\n        nums[smallest], nums[i] = nums[i], nums[smallest]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # sort the input list backwards\n    nums.sort(reverse=True)\n    \n    # iterate through the list\n    for i in range(len(nums)):\n        \n        # pick the first item and store it in a variable\n        value = nums[i]\n        \n        # iterate backwards through the list\n        for j in range(len(nums) - 1, i, -1):\n            \n            # if the value is bigger than the next item\n            if value > nums[j]:\n                # swap the two items and break the loop\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n                break\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    L = len(nums)\n    for i in range(L):\n        if i > nums[i]:\n            # compute the number of pancakes to rotate\n            m = nums[i]\n            k = 1\n            while m > 0 and k <= i:\n                if m < nums[k]:\n                    nums[k], nums[m] = nums[m], nums[k]\n                    m -= 1\n                k += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)//2):\n        nums[:i+1], nums[-1*(i+1):] = nums[-1*(i+1):], nums[:i+1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n//2, -1, -1):\n        flip(nums, i)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start, end = start + 1, end - 1\n    \n    n = len(nums)\n    curr = n\n    while curr > 1:\n        idx = 0\n        while idx < curr:\n            if nums[idx] > curr:\n                flip(nums, idx, curr - 1)\n                flip(nums, 0, curr - 1)\n                curr -= 2\n            else:\n                idx += 1\n        curr -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, k):\n        '''\n        flip the last k elements\n        '''\n        for i in range(k):\n            nums[i], nums[-i-1] = nums[-i-1], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, start, end):\n        for i in range((end - start + 1) // 2):\n            nums[start + i], nums[end - i] = nums[end - i], nums[start + i]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(l, start, end):\n        '''\n        Flip the elements in between start and end\n        '''\n        l[start], l[end] = l[end], l[start]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, k):\n        '''\n        Flips the last k elements of a list to the front\n        '''\n        for _ in range(k):\n            nums.append(nums.pop(0))\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list3[i] == list2[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!=len(list2) or len(list2)!=len(list3):\n        return 0\n    if len(list1)==0:\n        return 0\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #list1 = [1,2,3]\n    #list2 = [4,5,6]\n    #list3 = [7,8,9]\n    #return 1\n    \n    dict1 = {}\n    for i in range(len(list1)):\n        dict1[list1[i]] = dict1.get(list1[i],0) + 1\n    \n    dict2 = {}\n    for i in range(len(list2)):\n        dict2[list2[i]] = dict2.get(list2[i],0) + 1\n    \n    dict3 = {}\n    for i in range(len(list3)):\n        dict3[list3[i]] = dict3.get(list3[i],0) + 1\n    \n    num = 0\n    for i in range(len(list1)):\n        if dict1[list1[i]] == dict2[list2[i]] == dict3[list3[i]]:\n            num += 1\n    return num\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            num += 1\n    for i in range(len(list3)):\n        if list3[i] == list2[i]:\n            num += 1\n    return num\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n = 0\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return -1\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            n += 1\n    return n\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # return len([i for i, j in zip(list1, list2) if i == j])\n    # list1 = [1, 2, 3, 4, 1, 2, 3, 4, 5]\n    # list2 = [2, 3, 4, 5, 1, 2, 3, 4, 5]\n    # list3 = [3, 4, 5, 1, 2, 3, 4, 5, 1]\n    # print(count_samepair(list1,list2,list3))\n    # for i, j, k in zip(list1,list2,list3):\n    #     if i == j == k:\n    #         print(i)\n    def count_samepair_2(list1,list2,list3):\n        return sum(i == j == k for i, j, k in zip(list1,list2,list3))\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list3[i] == list2[i]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if type(i)==type((1,2,3)):\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input)==tuple:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_list(Input):\n    '''\n    Write a function to check whether the given tuple contains single list or not.\n    '''\n    if type(Input)==tuple and Input[0]==list:\n        return True\n    else:\n        return False\ndef check_tuples(Input):\n    '''\n    Write a function to check whether the given tuple contains tuples or not.\n    '''\n    if type(Input)==tuple:\n        return True\n    else:\n        return False\ndef find_tuples(Input):\n    '''\n    Write a function to find number of tuples present in the given tuple.\n    '''\n    if type(Input)==tuple:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_tuple(Input):\n    '''\n    Write a function to check whether the given tuple contains single tuple or not.\n    '''\n    if type(Input)==tuple and Input[0]==tuple:\n        return True\n    else:\n        return False\ndef check_tuple_in_tuple(Input):\n    '''\n    Write a function to check whether the given tuple is present inside another tuple.\n    '''\n    if type(Input)==tuple and type(Input[0])==tuple:\n        return True\n    else:\n        return False\ndef find_tuple_in_tuple(Input):\n    '''\n    Write a function to find number of tuples present in the given tuple.\n    '''\n    if type(Input)==tuple and type(Input[0])==tuple:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_tuple_in_list(Input):\n    '''\n    Write a function to check whether the given tuple is present inside another list.\n    '''\n    if type(Input)==tuple and type(Input[0])==list:\n        return True\n    else:\n        return False\ndef find_tuple_in_list(Input):\n    '''\n    Write a function to find number of tuples present in the given list.\n    '''\n    if type(Input)==tuple and type(Input[0])==list:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_list_in_list(Input):\n    '''\n    Write a function to check whether the given list is present inside another list.\n    '''\n    if type(Input)==list and type(Input[0])==list:\n        return True\n    else:\n        return False\ndef find_list_in_list(Input):\n    '''\n    Write a function to find number of lists present in the given list.\n    '''\n    if type(Input)==list and Input[0]==list:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_list_in_tuple(Input):\n    '''\n    Write a function to check whether the given list is present inside another tuple.\n    '''\n    if type(Input)==list and type(Input[0])==tuple:\n        return True\n    else:\n        return False\ndef find_list_in_tuple(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input)==list and Input[0]==tuple:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_tuple_in_list(Input):\n    '''\n    Write a function to check whether the given tuple is present inside another list.\n    '''\n    if type(Input)==tuple and type(Input[0])==list:\n        return True\n    else:\n        return False\ndef find_tuple_in_list(Input):\n    '''\n    Write a function to find number of tuples present in the given list.\n    '''\n    if type(Input)==tuple and Input[0]==list:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_tuple_in_tuple(Input):\n    '''\n    Write a function to check whether the given tuple is present inside another tuple.\n    '''\n    if type(Input)==tuple and type(Input[0])==tuple:\n        return True\n    else:\n        return False\ndef find_tuple_in_tuple(Input):\n    '''\n    Write a function to find number of tuples present in the given tuple.\n    '''\n    if type(Input)==tuple and Input[0]==tuple:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_list_in_tuple(Input):\n    '''\n    Write a function to check whether the given list is present inside another tuple.\n    '''\n    if type(Input)==list and type(Input[0])==tuple:\n        return True\n    else:\n        return False\ndef find_list_in_tuple(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input)==list and Input[0]==tuple:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_list_in_tuple(Input):\n    '''\n    Write a function to check whether the given list is present inside another tuple.\n    '''\n    if type(Input)==list and type(Input[0])==tuple:\n        return True\n    else:\n        return False\ndef check_list_in_list(Input):\n    '''\n    Write a function to check whether the given list is present inside another list.\n    '''\n    if type(Input)==list and type(Input[0])==list:\n        return True\n    else:\n        return False\ndef find_list_in_list(Input):\n    '''\n    Write a function to find number of lists present in the given list.\n    '''\n    if type(Input)==list and Input[0]==list:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_tuple_in_tuple(Input):\n    '''\n    Write a function to check whether the given tuple is present inside another tuple.\n    '''\n    if type(Input)==tuple and type(Input[0])==tuple:\n        return True\n    else:\n        return False\ndef find_tuple_in_tuple(Input):\n    '''\n    Write a function to find number of tuples present in the given tuple.\n    '''\n    if type(Input)==tuple and Input[0]==tuple:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_list_in_list(Input):\n    '''\n    Write a function to check whether the given list is present inside another list.\n    '''\n    if type(Input)==list and type(Input[0])==list:\n        return True\n    else:\n        return False\ndef find_list_in_list(Input):\n    '''\n    Write a function to find number of lists present in the given list.\n    '''\n    if type(Input)==list and Input[0]==list:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_tuple_in_tuple(Input):\n    '''\n    Write a function to check whether the given tuple is present inside another tuple.\n    '''\n    if type(Input)==tuple and type(Input[0])==tuple:\n        return True\n    else:\n        return False\ndef find_tuple_in_tuple(Input):\n    '''\n    Write a function to find number of tuples present in the given tuple.\n    '''\n    if type(Input)==tuple and Input[0]==tuple:\n        return len(Input)\n    else:\n        return \"Invalid Input\"\ndef check_list_in_tuple(Input):\n    '''\n    Write a function to check whether the given list is present inside another tuple.\n    '''\n    if type(Input)==list and type(Input[0])==tuple:\n        return True\n    else:\n        return False\ndef find_list_in_tuple(Inpu"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input: \n        if type(x) == list: \n            count += 1\n    return count \n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    if Input:\n        if Input[0][0] == Input[l-1][0]:\n            count = 1\n            for i in range(1,l):\n                if Input[0][i] == Input[l-1][i]:\n                    count += 1\n                else:\n                    break\n            return count\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(1 for x in Input if isinstance(x, list))\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input)!= tuple:\n        return -1\n    elif len(Input) == 0:\n        return 0\n    elif Input[0] == \"(\" or Input[0] == \"[\":\n        return 1 + find_lists(Input[1:])\n    else:\n        return find_lists(Input[1:])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - Input.count(())\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    res = Input.count(tuple)\n    return res\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    if l == 0:\n        return 0\n    if l == 1:\n        return 0\n    if Input[0] == ():\n        return 1\n    if Input[0] == (1):\n        return l\n    return find_lists(Input[1:]) + 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = re.findall('[(](.*?)[)]',Input)\n    return len(a)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = abs(arr[-1]-arr[0])\n    for i in xrange(len(arr)-1):\n        diff = max(diff, abs(arr[-1]-arr[i]))\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # my_arr = []\n    # # print(arr)\n    # # for i in range(len(arr)):\n    # #     for j in range(i+1,len(arr)):\n    # #         my_arr.append(abs(arr[i]-arr[j]))\n    # print(max(my_arr))\n    # print(min(my_arr))\n    # return my_arr\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    arr_length = len(arr)\n    maximum_difference = arr[arr_length-1] - arr[0]\n    for i in range(arr_length-1):\n        maximum_difference = max(maximum_difference, abs(arr[i] - arr[i+1]))\n    return maximum_difference\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diffs = [abs(arr[i] - arr[i+1]) for i in range(len(arr)-1)]\n    return max(diffs)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff=0\n    for i in range(len(arr)-1):\n        diff=max(diff,abs(arr[i]-arr[i+1]))\n    return diff\n    \nprint(max_Abs_Diff([4,5,7,3,2,1]))\nprint(max_Abs_Diff([2,4,6,8,10]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    max_diff = arr[1] - arr[0]\n    for i in xrange(n - 1):\n        for j in xrange(i + 1, n):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = abs(arr[1] - arr[0])\n    for i in range(1, len(arr) - 1):\n        max_diff = max(max_diff, abs(arr[i + 1] - arr[i]))\n    return max_diff\n    \nprint(max_Abs_Diff([-1, 4, 6, 7, -3, -2, 6, 1, 2, 3, 4, -10, 9, 10]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -999999999\n    n = len(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = max(diff,abs(arr[i]-arr[j]))\n    return diff\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    else:\n        for x in range(-n//a, n//a + 1):\n            if a*x + b*n - x*a - b*x == n:\n                return x, n - x*a - b*x\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    b = b*1.0\n    a = a*1.0\n    if a == 0:\n        return 0\n    if n == a*b:\n        return a,b\n    if a < 0:\n        x = int(b/a)\n        y = int((n - a*x)/b)\n        return x, y\n    if b < 0:\n        x = int((n - b*a)/b)\n        y = int(a/b)\n        return x, y\n    if n < 0:\n        return None\n    if a > b:\n        x = int((n - b*a)/b)\n        y = int(a/b)\n        return x, y\n    if a == b:\n        return a,b\n    if n % b == 0:\n        return n/b,b\n    if a*b*n < b*a:\n        return 0,0\n    x = int(n/b)\n    y = int(a*n/b)\n    return x, y\n    \n    \n    \n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n + 1):\n        if i * a > n:\n            break\n        if (n - i * a) % b == 0:\n            return (i, (n - i * a) // b)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    result = None\n    for i in range(1, n // a + 1):\n        x = n - (i * a)\n        if x % b == 0:\n            result = (x // b, i)\n            break\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    n_new = (n-a*b)/a\n    a_new = a - n_new/b\n    return (a_new, n_new)\n    # return (n - a_new*b)/a_new\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    for x in range(1, n // b):\n        if n * x + a * x ** 2 == n * x + a * x ** 2:\n            return (x, n // x)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b * b - 4 * a * n < 0:\n        return None\n    elif b * b - 4 * a * n == 0:\n        return -b / (2 * a)\n    else:\n        x1 = (-b + (b * b - 4 * a * n) ** 0.5) / (2 * a)\n        x2 = (-b - (b * b - 4 * a * n) ** 0.5) / (2 * a)\n        return (x1, x2)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x,y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 1)\n    if a == 0:\n        return (0, -b//n)\n    d = gcd(a, n)\n    if b%d!= 0:\n        return None\n    x = b//d\n    y = n//d\n    return (x, y)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #for i in list2:\n    #    if i in list1:\n    #        list1.remove(i)\n    #return list1\n    #return [i for i in list1 if i not in list2]\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n    \nprint remove_elements([1, 2, 3, 4, 3, 2, 1], [3, 2])"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list1:\n        if x in list2:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n<0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n <= 1 else n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 0\n    elif n < 1:\n        return None\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    elif n % 2 == 0:\n        return sum_series(n) + sum_series(n - 2)\n    elif n % 2 == 1:\n        return sum_series(n) + sum_series(n - 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return 0\n    if n == 2:\n        return 2\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4) + (n-6) + (n-8) + (n-10) + (n-12) + (n-14) + (n-16) + (n-18) + (n-20) + (n-22) + (n-24) + (n-26) + (n-28) + (n-30) + (n-32) + (n-34) + (n-36) + (n-38) + (n-40) + (n-42) + (n-44) + (n-46) + (n-48) + (n-50) + (n-52) + (n-54) + (n-56) + (n-58) + (n-60) + (n-62) + (n-64) + (n-66) + (n-68) + (n-70) + (n-72) + (n-74) + (n-76) + (n-78) + (n-80) + (n-82) + (n-84) + (n-86) + (n-88) + (n-90) + (n-92) + (n-94) + (n-96) + (n-98) + (n-100)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2) + sum_series(n - 4) + sum_series(n - 6) + sum_series(n - 8) + sum_series(n - 10) + sum_series(n - 12)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2) if n >= 1 else 0\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (1 / 2) * (s * s) * tan(pi / l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l)\ndef side_polygon(s, l):\n    '''\n    Write a function to calculate the length of a side of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l)\ndef perimeter_polygon(n, s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return (n * s)\ndef angles(n):\n    '''\n    Write a function to calculate the number of angles of a polygon given the number of its sides.\n    '''\n    return (n + 2)\ndef perimeter_regular_polygon(n, s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return (n * s)\ndef is_equal(a, b):\n    '''\n    Write a function to compare two numbers and return if they are equal, otherwise, return false.\n    '''\n    if a == b:\n        return True\n    else:\n        return False\ndef is_greater(a, b):\n    '''\n    Write a function to compare two numbers and return if the first number is greater than the second, otherwise, return false.\n    '''\n    if a > b:\n        return True\n    else:\n        return False\ndef is_less(a, b):\n    '''\n    Write a function to compare two numbers and return if the first number is less than the second, otherwise, return false.\n    '''\n    if a < b:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_even(n):\n    '''\n    Write a function to check if a given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\ndef is_positive(n):\n    '''\n    Write a function to check if a given number is positive or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False\ndef is_negative(n):\n    '''\n    Write a function to check if a given number is negative or not.\n    '''\n    if n < 0:\n        return True\n    else:\n        return False\ndef is_power(n, x):\n    '''\n    Write a function to check if a given number is power of another number.\n    '''\n    if n == x:\n        return True\n    if n == 1:\n        return True\n    if n % x == 0:\n        return True\n    else:\n        return False\ndef is_divisible(n, x):\n    '''\n    Write a function to check if a given number is divisible by another number.\n    '''\n    if n % x == 0:\n        return True\n    else:\n        return False\ndef is_factor(n, x):\n    '''\n    Write a function to check if a given number is factor of another number.\n    '''\n    if x % n == 0:\n        return True\n    else:\n        return False\ndef is_multiple(n, x):\n    '''\n    Write a function to check if a given number is multiple of another number.\n    '''\n    if n % x == 0:\n        return True\n    else:\n        return False\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef factorial_iter(n):\n    '''\n    Write a function to calculate the factorial of a number using iteration.\n    '''\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth term of Fibonacci sequence using iteration.\n    '''\n    a, b = 0, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return a\ndef fibonacci_recursive(n):\n    '''\n    Write a function to calculate the nth term of Fibonacci sequence using recursion.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\ndef gcd(a, b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\ndef is_perfect(n):\n    '''\n    Write a function to check if a given number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\ndef is_armstrong(n):\n    '''\n    Write a function to check if a given number is armstrong or not.\n    '''\n    sum = 0\n    for i in str(n):\n        sum += pow(int(i), len(str(n)))\n    if sum == n:\n        return True\n    else:\n        return False\ndef is_palindrome(n):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\ndef is_perfect_square(n):\n    '''\n    Write a function to check if a given number is perfect square or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        return (n ** 0.5) % 1 == 0\ndef is_power_of_two(n):\n    '''\n    Write a function to check if a given number is power of two or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        if n % 2 == 1:\n            return is_power_of_two(n - 1)\n        else:\n            return is_power_of_two(n / 2)\ndef is_factor_of_factor(a, b):\n    '''\n    Write a function to check if a given number is factor of factor of another number.\n    '''\n    if a % b == 0:\n        return True\n    else:\n        return False\ndef is_factor_of_factor_recursive(a, b):\n    '''\n    Write a function to check if a given number is factor of factor of another number using recursion.\n    '''\n    if a % b == 0:\n        return True\n    if b % a == 0:\n        return True\n    if a > b:\n        return is_factor_of_factor_recursive(a - b, b)\n    else:\n        return is_factor_of_factor_recursive(a, b - a)\ndef sum_factors(n):\n    '''\n    Write a function to find the sum of factors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            sum += i\n            if i * i!= n:\n                sum += n / i\n    if sum == n:\n        return True\n    else:\n        return False\ndef sum_factors_iter(n):\n    '''\n    Write a function to find the sum of factors of a number using iteration.\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l * tan(pi / n) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2.0) * l * tan(pi/s)\n    return area\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    area = (b*h)/2.0\n    return area\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    area = 3.14159 * (r ** 2)\n    return area\ndef average(numbers):\n    '''\n    Write a function to calculate the average of a list of numbers.\n    '''\n    total = 0.0\n    for i in numbers:\n        total += i\n    return total / len(numbers)\ndef max_min(numbers):\n    '''\n    Write a function to calculate the max and min of a list of numbers.\n    '''\n    max_n = max(numbers)\n    min_n = min(numbers)\n    return (max_n, min_n)\ndef median(numbers):\n    '''\n    Write a function to calculate the median of a list of numbers.\n    '''\n    numbers.sort()\n    mid = len(numbers)/2\n    if len(numbers)%2 == 1:\n        median = numbers[mid]\n    else:\n        median = (numbers[mid] + numbers[mid - 1])/2.0\n    return median\ndef mode(numbers):\n    '''\n    Write a function to calculate the mode of a list of numbers.\n    '''\n    mode = 0\n    mode_count = 0\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            mode_count += 1\n        else:\n            if mode_count > mode:\n                mode = mode_count\n                mode_count = 0\n            elif mode_count == mode:\n                mode_count = 0\n    if mode_count > mode:\n        mode = mode_count\n    return mode\ndef linear_regression(xs, ys):\n    '''\n    Write a function to calculate the best-fit linear regression for a set of points.\n    '''\n    total_x = 0.0\n    total_y = 0.0\n    total_xx = 0.0\n    total_xy = 0.0\n    total_x2 = 0.0\n    for i in range(len(xs)):\n        total_x += xs[i]\n        total_y += ys[i]\n        total_xx += xs[i] * xs[i]\n        total_xy += xs[i] * ys[i]\n        total_x2 += xs[i] * xs[i] * xs[i]\n    a = (total_x*total_xy - total_x*total_y)/(total_xx*total_xx - total_x*total_x)\n    b = (total_y - a*total_x)/len(xs)\n    return (a, b)\ndef mean_variance(xs):\n    '''\n    Write a function to calculate the mean and variance of a list of numbers.\n    '''\n    mean = 0.0\n    var = 0.0\n    for i in range(len(xs)):\n        mean += xs[i]\n    mean /= len(xs)\n    for i in range(len(xs)):\n        var += (xs[i] - mean)**2\n    var /= len(xs)\n    return (mean, var)\ndef covariance(xs, ys):\n    '''\n    Write a function to calculate the covariance of two lists of numbers.\n    '''\n    total_x = 0.0\n    total_y = 0.0\n    total_xx = 0.0\n    total_xy = 0.0\n    total_x2 = 0.0\n    total_y2 = 0.0\n    for i in range(len(xs)):\n        total_x += xs[i]\n        total_y += ys[i]\n        total_xx += xs[i] * xs[i]\n        total_xy += xs[i] * ys[i]\n        total_x2 += xs[i] * xs[i] * xs[i]\n        total_y2 += ys[i] * ys[i] * ys[i]\n    cov = (total_x*total_y - total_x*total_y)/(len(xs) - 1)\n    cov = cov - (total_x/len(xs) - mean_x) * (total_y/len(xs) - mean_y)\n    cov = cov / (total_xx - (total_x/len(xs)) * (total_x/len(xs)))\n    return cov\ndef standard_deviation(xs):\n    '''\n    Write a function to calculate the standard deviation of a list of numbers.\n    '''\n    mean = 0.0\n    var = 0.0\n    for i in range(len(xs)):\n        mean += xs[i]\n    mean /= len(xs)\n    for i in range(len(xs)):\n        var += (xs[i] - mean)**2\n    var /= len(xs)\n    return var**0.5\ndef variance(xs):\n    '''\n    Write a function to calculate the variance of a list of numbers.\n    '''\n    mean = 0.0\n    var = 0.0\n    for i in range(len(xs)):\n        mean += xs[i]\n    mean /= len(xs)\n    for i in range(len(xs)):\n        var += (xs[i] - mean)**2\n    var /= len(xs)\n    return var\ndef correlation(xs, ys):\n    '''\n    Write a function to calculate the correlation of two lists of numbers.\n    '''\n    mean_x = 0.0\n    mean_y = 0.0\n    mean_x2 = 0.0\n    mean_y2 = 0.0\n    total_x = 0.0\n    total_y = 0.0\n    total_xx = 0.0\n    total_xy = 0.0\n    total_x2 = 0.0\n    total_y2 = 0.0\n    for i in range(len(xs)):\n        mean_x += xs[i]\n        mean_y += ys[i]\n        mean_x2 += xs[i] * xs[i]\n        mean_y2 += ys[i] * ys[i]\n        total_x += xs[i]\n        total_y += ys[i]\n        total_xx += xs[i] * xs[i]\n        total_xy += xs[i] * ys[i]\n        total_x2 += xs[i] * xs[i] * xs[i]\n        total_y2 += ys[i] * ys[i] * ys[i]\n    corr = (total_x*total_y - total_x*total_y)/((len(xs) - 1) * (len(xs) - 1))\n    corr = corr - (total_x/len(xs) - mean_x) * (total_y/len(xs) - mean_y)\n    corr = corr / ((total_xx - (total_x/len(xs)) * (total_x/len(xs))) * (total_yy - (total_y/len(xs)) * (total_y/len(xs))))**0.5\n    return corr\ndef modulus(numbers):\n    '''\n    Write a function to calculate the modulus of a list of numbers.\n    '''\n    mod = 0.0\n    for i in numbers:\n        mod += i\n    return mod\ndef dot_product(xs, ys):\n    '''\n    Write a function to calculate the dot product of two lists of numbers.\n    '''\n    total = 0.0\n    for i in range(len(xs)):\n        total += xs[i] * ys[i]\n    return total\ndef cross_product(xs, ys):\n    '''\n    Write a function to calculate the cross product o"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = int(input(\"Enter the number of sides: \"))\n    area = (0.25 * n * (s**2)) / tan(pi/n)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*s*l**2)/(tan(pi/s))\ndef area_triangle(a, b):\n    '''\n    Write a function to calculate the area of a triangle given the length of two opposite sides.\n    '''\n    return (a*b)/2\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square given the length of one side.\n    '''\n    return a**2\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length and breadth of two opposite sides.\n    '''\n    return a*b\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return (r**2)*pi\ndef area_trapezium(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium given the length of two opposite sides, the height of the bottom, and the length of one of the adjacent sides.\n    '''\n    return ((a+b)/2)*h\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi*r**2\ndef area_quad(a, b, c):\n    '''\n    Write a function to calculate the area of a quadrilateral given the lengths of the opposite and adjacent sides.\n    '''\n    return (a*b+b*c+c*a)/2\ndef area_isosceles_triangle(a, b):\n    '''\n    Write a function to calculate the area of a isosceles triangle given the lengths of two opposite sides.\n    '''\n    return (a*b)/2\ndef area_rhombus(a, b):\n    '''\n    Write a function to calculate the area of a rhombus given the lengths of two opposite sides.\n    '''\n    return a*b/2\ndef area_kite(a, h):\n    '''\n    Write a function to calculate the area of a kite given the length of the opposite side and the height of the top.\n    '''\n    return (a*h)/2\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the lengths of the semimajor axes and semiminor axes.\n    '''\n    return (a*b)/2\ndef area_heptagon(a):\n    '''\n    Write a function to calculate the area of a heptagon given the length of one side.\n    '''\n    return (7*a**2)/4\ndef area_octagon(a):\n    '''\n    Write a function to calculate the area of an octagon given the length of one side.\n    '''\n    return (8*a**2)/4\ndef area_rhombus(a, b):\n    '''\n    Write a function to calculate the area of a rhombus given the length of two opposite sides.\n    '''\n    return (a*b)/2\ndef area_dodecagon(a):\n    '''\n    Write a function to calculate the area of a dodecagon given the length of one side.\n    '''\n    return (10*a**2)/4\ndef area_tetagon(a):\n    '''\n    Write a function to calculate the area of a tetagon given the length of one side.\n    '''\n    return (4*a**2)/4\ndef area_decagon(a):\n    '''\n    Write a function to calculate the area of a decagon given the length of one side.\n    '''\n    return (12*a**2)/4\ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a hexagon given the length of one side.\n    '''\n    return (6*a**2)/4\ndef area_octagon(a):\n    '''\n    Write a function to calculate the area of an octagon given the length of one side.\n    '''\n    return (8*a**2)/4\ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a pentagon given the length of one side.\n    '''\n    return (5*a**2)/4\ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a hexagon given the length of one side.\n    '''\n    return (6*a**2)/4\ndef area_nonagon(a):\n    '''\n    Write a function to calculate the area of a nonagon given the length of one side.\n    '''\n    return (3*a**2)/4\ndef area_septagon(a):\n    '''\n    Write a function to calculate the area of a septagon given the length of one side.\n    '''\n    return (7*a**2)/4\ndef area_octagon(a):\n    '''\n    Write a function to calculate the area of an octagon given the length of one side.\n    '''\n    return (8*a**2)/4\ndef area_nonagon(a):\n    '''\n    Write a function to calculate the area of a nonagon given the length of one side.\n    '''\n    return (3*a**2)/4\ndef area_decagon(a):\n    '''\n    Write a function to calculate the area of a decagon given the length of one side.\n    '''\n    return (10*a**2)/4\ndef area_septagon(a):\n    '''\n    Write a function to calculate the area of a septagon given the length of one side.\n    '''\n    return (7*a**2)/4\ndef area_heptagon(a):\n    '''\n    Write a function to calculate the area of a heptagon given the length of one side.\n    '''\n    return (7*a**2)/4\ndef area_octagon(a):\n    '''\n    Write a function to calculate the area of an octagon given the length of one side.\n    '''\n    return (8*a**2)/4\ndef area_nonagon(a):\n    '''\n    Write a function to calculate the area of a nonagon given the length of one side.\n    '''\n    return (3*a**2)/4\ndef area_dodecagon(a):\n    '''\n    Write a function to calculate the area of a dodecagon given the length of one side.\n    '''\n    return (12*a**2)/4\ndef area_tetagon(a):\n    '''\n    Write a function to calculate the area of a tetagon given the length of one side.\n    '''\n    return (4*a**2)/4\ndef area_cube(a):\n    '''\n    Write a function to calculate the area of a cube given the length of one side.\n    '''\n    return a**3\ndef area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius.\n    '''\n    return (4*pi*r**2)/3\ndef area_cylinder(r, h):\n    '''\n    Write a function to calculate the area of a cylinder given the radius and the height of the bottom.\n    '''\n    return (2*pi*r**2*h)/3\ndef area_cone(r, h):\n    '''\n    Write a function to calculate the area of a cone given the radius and the height of the bottom.\n    '''\n    return (pi*r**2*h)/3\ndef area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius.\n    '''\n    return 4*pi*r**2/3\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of three opposite sides.\n    '''\n    return (a*b)/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi*r**2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi*r**2\ndef area_circle(r):\n    '"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l**2) / (tan(pi/n))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #I will solve this by generating a list of lengths from 1 to n\n    #this is a good start since it's a simple maths question\n    #but you can use numpy if you like\n    #note: area is a change of variable\n    #and this is why i'm using pi * l * l / 4\n    return (pi * l * l / 4) * (1 + (1 / (1 - s**2)))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l / 2) * tan(pi / l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for n in range(0,l):\n        a += ((s**2)/(4*tan(pi/l)))*(1 + tan(pi/l))\n    return a\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n / i)\n    if sum(divisors) == n:\n        return True\n    return False\ndef lucky_number(n):\n    '''\n    Write a function that determines whether a number is a \"lucky\" number. A lucky number is a number that is the sum of one or more prime numbers.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    if n in primes:\n        return True\n    return False\ndef digital_root(n):\n    '''\n    Write a function to determine the digital root of a number.\n    '''\n    num = n\n    count = 0\n    while num > 0:\n        count += 1\n        num /= 10\n    return int(n ** (1 / count))\ndef palindrome(n):\n    '''\n    Write a function that returns true if the given number is a palindrome.\n    '''\n    num = n\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    if num == int(num):\n        return True\n    return False\ndef factorial(n):\n    '''\n    Write a function that returns the factorial of n.\n    '''\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\ndef power(base, exp):\n    '''\n    Write a function that determines the value of x ** y.\n    '''\n    if exp == 0:\n        return 1\n    if exp == 1:\n        return base\n    return base * power(base, exp - 1)\ndef print_binary(n):\n    '''\n    Write a function that prints a number in binary.\n    '''\n    if n == 0:\n        return\n    print_binary(n / 2)\n    print(n % 2, end = \"\")\ndef fibonacci(n):\n    '''\n    Write a function that returns the nth fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\ndef factorial_recursive(n):\n    '''\n    Write a function that returns the factorial of n.\n    '''\n    if n == 1:\n        return 1\n    return n * factorial_recursive(n - 1)\ndef is_palindrome(n):\n    '''\n    Write a function that determines whether a number is a palindrome.\n    '''\n    num = n\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    if num == int(num):\n        return True\n    return False\ndef sum_of_digits(n):\n    '''\n    Write a function that determines the sum of the digits of n.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n /= 10\n    return sum\ndef is_prime(n):\n    '''\n    Write a function that determines whether a number is a prime number.\n    '''\n    if n == 1:\n        return False\n    if n < 0:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_power(base, exp):\n    '''\n    Write a function that determines whether a number is a power of a base.\n    '''\n    if exp == 1:\n        return True\n    if base == exp:\n        return True\n    return False\ndef median(nums):\n    '''\n    Write a function that returns the median of a sorted list of numbers.\n    '''\n    mid = len(nums) // 2\n    if len(nums) % 2 == 0:\n        return (nums[mid] + nums[mid - 1]) / 2\n    return nums[mid]\ndef is_perfect(n):\n    '''\n    Write a function that determines whether a number is perfect.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    return False\ndef digit_count(n):\n    '''\n    Write a function that returns the number of digits in a number.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n /= 10\n    return count\ndef count_factors(n):\n    '''\n    Write a function that determines the number of factors a number has.\n    '''\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    return count + 1\ndef is_anagram(n, m):\n    '''\n    Write a function that determines whether two words are anagrams.\n    '''\n    if len(n)!= len(m):\n        return False\n    letters = {}\n    for i in n:\n        if i in letters:\n            letters[i] += 1\n        else:\n            letters[i] = 1\n    for i in m:\n        if i in letters:\n            letters[i] -= 1\n        else:\n            letters[i] = 1\n    for i in letters:\n        if letters[i]!= 0:\n            return False\n    return True\ndef add_to_power(base, exp, n):\n    '''\n    Write a function that returns the result of raising base to the power of exp.\n    '''\n    if exp == 0:\n        return 1\n    if exp == 1:\n        return base\n    return base * add_to_power(base, exp - 1, n)\ndef is_pangram(s):\n    '''\n    Write a function that determines whether a string is a pangram. A pangram is a sentence that contains all the letters of the alphabet.\n    '''\n    letter = {}\n    for i in s:\n        if i in letter:\n            letter[i] += 1\n        else:\n            letter[i] = 1\n    for i in letter:\n        if letter[i] == 1:\n            return True\n    return False\ndef find_largest_sum(lst):\n    '''\n    Write a function that returns the sum of the largest and second largest numbers in a list.\n    '''\n    largest = lst[0]\n    second_largest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > largest:\n            second_largest = largest\n            largest = lst[i]\n        elif lst[i] > second_largest:\n            second_largest = lst[i]\n    return largest + second_largest\ndef find_largest_difference(lst):\n    '''\n    Write a function that returns the difference between the largest and second largest numbers in a list.\n    '''\n    return max(lst) - min(lst)\ndef find_smallest_difference(lst):\n    '''\n    Write a functio"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 1\n    for i in range(2, n): \n        if n % i == 0:\n            total += i\n    return total == n\ndef sum_digits(n): \n    total = 0\n    while n > 0: \n        total += n % 10\n        n /= 10\n    return total\ndef is_armstrong(n): \n    '''\n    Write a function to determine if an integer is an armstrong number.\n    '''\n    return sum_digits(n) == n\ndef is_prime(n): \n    '''\n    Write a function to determine if an integer is prime.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a function to determine if a given integer is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\ndef is_pandigital(n): \n    '''\n    Write a function to determine if a given integer is a pandigital.\n    '''\n    string = str(n)\n    for i in range(1, 10): \n        if string.find(str(i)) == -1: \n            return False\n    return True\ndef sum_pandigitals(n): \n    '''\n    Write a function to find the sum of all the pandigitals.\n    '''\n    sum = 0\n    for i in range(1, n): \n        string = ''\n        for j in range(1, i + 1): \n            string += str(j)\n        if is_pandigital(int(string)): \n            sum += int(string)\n    return sum\ndef find_digit_sum(n): \n    '''\n    Write a function to determine the sum of digits of a given integer.\n    '''\n    sum = 0\n    while n > 0: \n        sum += n % 10\n        n /= 10\n    return sum\ndef is_abundant(n): \n    '''\n    Write a function to determine if a given integer is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if n % i == 0:\n            sum += i\n    return sum > n\ndef is_abundant_sum(n): \n    '''\n    Write a function to determine if a given integer is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if n % i == 0:\n            sum += i\n    return sum > n\ndef sum_abundants(n): \n    '''\n    Write a function to determine the sum of all abundant numbers below a given integer.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if is_abundant(i): \n            sum += i\n    return sum\ndef is_abundant_sums_divisor_sum(n): \n    '''\n    Write a function to determine if a given integer is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if is_abundant_sum(i): \n            sum += i\n    return sum == n\ndef is_abundant_sums_product_of_divisors(n): \n    '''\n    Write a function to determine if a given integer is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if is_abundant_sum(i): \n            for j in range(1, i + 1): \n                if i % j == 0: \n                    sum += j\n    return sum == n\ndef is_abundant_sums_product_of_divisors_and_sum_of_divisors(n): \n    '''\n    Write a function to determine if a given integer is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if is_abundant_sums_product_of_divisors(i): \n            sum += i\n    return sum == n\ndef is_abundant_sums_divisor_sum_and_product_of_divisors(n): \n    '''\n    Write a function to determine if a given integer is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if is_abundant_sums_product_of_divisors(i) and is_abundant_sums_divisor_sum(i): \n            sum += i\n    return sum == n\ndef is_abundant_sums_product_of_divisors_and_divisor_sum(n): \n    '''\n    Write a function to determine if a given integer is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if is_abundant_sums_product_of_divisors(i) and is_abundant_sums_divisor_sum(i): \n            sum += i\n    return sum == n\ndef is_abundant_sums_product_of_divisors_and_divisor_sum_and_product_of_divisors(n): \n    '''\n    Write a function to determine if a given integer is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if is_abundant_sums_product_of_divisors(i) and is_abundant_sums_divisor_sum(i) and is_abundant_sums_divisor_sum(i): \n            sum += i\n    return sum == n\ndef sum_abundant_sums_product_of_divisors_and_divisor_sum_and_product_of_divisors(n): \n    '''\n    Write a function to determine the sum of all abundant numbers below a given integer.\n    '''\n    sum = 0\n    for i in range(1, n): \n        if is_abundant_sums_product_of_divisors(i) and is_abundant_sums_divisor_sum(i) and is_abundant_sums_divisor_sum(i): \n            sum += i\n    return sum\ndef is_triple_product_perfect(a, b, c): \n    '''\n    Write a function to determine if a given triple is a perfect triple or not.\n    '''\n    if a + b + c == 120: \n        return True\n    return False\ndef is_triple_product_perfect_abundant_sum(a, b, c): \n    '''\n    Write a function to determine if a given triple is a perfect triple or not.\n    '''\n    if is_abundant_sums_product_of_divisors(a) and is_abundant_sums_product_of_divisors(b) and is_abundant_sums_product_of_divisors(c): \n        return True\n    return False\ndef is_triple_product_perfect_abundant_sum_and_product_of_divisors(a, b, c): \n    '''\n    Write a function to determine if a given triple is a perfect triple or not.\n    '''\n    if is_abundant_sums_product_of_divisors(a) and is_abundant_sums_product_of_divisors(b) and is_abundant_sums_product_of_divisors_and_divisor_sum(c): \n        return True\n    return False\ndef is_triple_product_perfect_abundant_sum_and_product_of_divisors_and_divisor_sum(a, b, c): \n    '''\n    Write a function to determine if a given triple is a perfect triple or not.\n    '''\n    if i"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = set() \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divs.add(i)\n            divs.add(n / i) \n    return sum(divs) == n \ndef get_primes(n): \n    '''\n    Return a list of primes from 2 to n.\n    '''\n    is_prime = [True for i in range(n)] \n    is_prime[0] = False \n    is_prime[1] = False \n    for i in range(2, int(math.sqrt(n))): \n        if is_prime[i]: \n            for j in range(i * i, n, i): \n                is_prime[j] = False \n    return [i for i in range(2, n) if is_prime[i]]\ndef is_palindrome(s): \n    '''\n    Return True if s is a palindrome and False otherwise.\n    '''\n    if len(s) <= 1: \n        return True \n    return s[0] == s[-1] and is_palindrome(s[1:-1]) \ndef pythagorean_triple(a, b): \n    '''\n    Return the pythagorean triple that contains a and b.\n    '''\n    return math.sqrt(a ** 2 + b ** 2)\ndef is_abundant(n): \n    '''\n    Return True if n is an abundant number and False otherwise.\n    '''\n    divs = set() \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divs.add(i)\n            divs.add(n / i) \n    return sum(divs) > n \ndef is_abundant_prime(n): \n    '''\n    Return True if n is an abundant prime number and False otherwise.\n    '''\n    return is_abundant(n) and n > 1 \ndef is_abundant_nonprime(n): \n    '''\n    Return True if n is an abundant number and False otherwise.\n    '''\n    return is_abundant(n) and n > 2 \ndef find_perfect_squares(n): \n    '''\n    Return a list of the perfect squares from 1 to n.\n    '''\n    perfect_squares = [i ** 2 for i in range(1, int(math.sqrt(n)) + 1)] \n    return [perfect_squares[i] for i in range(len(perfect_squares)) if perfect_squares[i] < n] \ndef is_super_sorted(nums): \n    '''\n    Return True if nums is a permutation of arithmetic progression and False otherwise.\n    '''\n    nums = sorted(nums) \n    for i in range(len(nums) - 1): \n        if nums[i] + 1!= nums[i + 1]: \n            return False \n    return True \ndef is_super_sorted_array(nums): \n    '''\n    Return True if nums is a permutation of arithmetic progression and False otherwise.\n    '''\n    return all([nums[i] <= nums[i + 1] for i in range(len(nums) - 1)]) \ndef sort_anagrams(s): \n    '''\n    Return a sorted string with anagrams together.\n    '''\n    sorted_s = sorted(s) \n    return ''.join(sorted_s) \ndef count_distinct_words(s): \n    '''\n    Return the number of distinct words in s.\n    '''\n    return len(set(s.split(' '))) \ndef is_anagram(a, b): \n    '''\n    Return True if a and b are anagrams of each other and False otherwise.\n    '''\n    return a == b and len(a) == len(b)\ndef has_duplicates(s): \n    '''\n    Return True if s has duplicate letters and False otherwise.\n    '''\n    return len(s)!= len(set(s))\ndef is_palindrome_permutation(s): \n    '''\n    Return True if s is a palindrome permutation and False otherwise.\n    '''\n    s = s.lower() \n    s = ''.join(s.split(' ')) \n    return is_palindrome(s) \ndef base_n_to_base_10(s, b): \n    '''\n    Return the integer value of the string s in base b.\n    '''\n    base_ten_num = 0 \n    for i in range(len(s)): \n        base_ten_num += ord(s[i]) - ord('0') * b ** (len(s) - 1 - i) \n    return base_ten_num \ndef base_10_to_base_n(num, b): \n    '''\n    Return the string representation of a positive integer num in base b.\n    '''\n    if num == 0: \n        return '0'\n    string = '' \n    while num > 0: \n        string = chr(num % b + ord('0')) + string \n        num /= b \n    return string \ndef base_n_to_base_b(s, b): \n    '''\n    Return the string representation of a positive integer s in base b.\n    '''\n    base_b_num = '' \n    while s > 0: \n        base_b_num = chr(s % b + ord('0')) + base_b_num \n        s /= b \n    return base_b_num \ndef is_power_of_two(n): \n    '''\n    Return True if n is a power of two and False otherwise.\n    '''\n    return n > 0 and n & (n - 1) == 0 \ndef is_power_of_two_array(nums): \n    '''\n    Return True if the array nums is a power of two and False otherwise.\n    '''\n    return all([is_power_of_two(i) for i in nums]) \ndef is_power_of_two_array_fast(nums): \n    '''\n    Return True if the array nums is a power of two and False otherwise.\n    '''\n    return all([i & (i - 1) == 0 for i in nums]) \ndef array_diff(a, b): \n    '''\n    Return the array containing the elements in a that are not in b.\n    '''\n    return [i for i in a if i not in b] \ndef array_union(a, b): \n    '''\n    Return the array containing the elements in a or b.\n    '''\n    return a + b \ndef is_in_array(s, a): \n    '''\n    Return True if s is in a and False otherwise.\n    '''\n    return s in a \ndef get_common_elements_list(a, b): \n    '''\n    Return a list containing the common elements between a and b.\n    '''\n    return [i for i in a if i in b] \ndef get_common_elements_string(a, b): \n    '''\n    Return a string containing the common elements between a and b.\n    '''\n    return ''.join([i for i in a if i in b]) \ndef is_in_array_fast(s, a): \n    '''\n    Return True if s is in a and False otherwise.\n    '''\n    return s in a \ndef are_anagrams(a, b): \n    '''\n    Return True if a and b are anagrams and False otherwise.\n    '''\n    a = a.lower() \n    b = b.lower() \n    a = ''.join(a.split(' ')) \n    b = ''.join(b.split(' ')) \n    return a == b \ndef is_palindrome_permutation_fast(s): \n    '''\n    Return True if s is a palindrome permutation and False otherwise.\n    '"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            divs.append(i)\n            divs.append(n//i)\n    if sum(divs) == n:\n        return True\n    else:\n        return False\ndef diff_length(l1,l2):\n    '''\n    Given two lists, return the smallest difference between the two lists.\n    '''\n    return min(len(l1),len(l2)) - sum([a==b for a,b in zip(l1,l2)])\ndef trunc_sum(n):\n    '''\n    Truncate a number to the right of the decimal point.\n    '''\n    return int(n*10**(len(str(n))-1))\ndef remove_duplicates(l):\n    '''\n    Given a list, return a list with all duplicate elements removed.\n    '''\n    l = list(set(l))\n    return l\ndef trunc_float(n,after):\n    '''\n    Truncate a float to a certain number of decimal places after the decimal point.\n    '''\n    s = str(n)\n    if len(s) > after+1:\n        return float(s[:after+1])\n    else:\n        return float(s)\ndef sum_digits(n):\n    '''\n    Given a number, return the sum of the digits in the number.\n    '''\n    return sum([int(i) for i in str(n)])\ndef get_sum_of_digit_squares(n):\n    '''\n    Return the sum of the squares of the digits in the number.\n    '''\n    return sum([int(i)**2 for i in str(n)])\ndef get_sum_of_digit_squares_str(n):\n    '''\n    Return the sum of the squares of the digits in the number as a string.\n    '''\n    return str(sum([int(i)**2 for i in str(n)]))\ndef is_pandigital(n,str_n):\n    '''\n    Given a number, return a boolean indicating if the number is pandigital.\n    '''\n    return all([str(n).count(str(i)) == 1 for i in range(1,10)])\ndef is_pan_sum(n,k):\n    '''\n    Return a boolean indicating if the sum of the digits in the number is the same as k.\n    '''\n    return sum([int(i) for i in str(n)]) == k\ndef is_pan_sum_str(n,k):\n    '''\n    Return a boolean indicating if the sum of the digits in the number is the same as k as a string.\n    '''\n    return str(sum([int(i) for i in str(n)])) == str(k)\ndef is_narcissistic(n):\n    '''\n    Given a number, return a boolean indicating if the number is the sum of its digits.\n    '''\n    return sum([int(i) for i in str(n)]) == n\ndef is_narcissistic_str(n):\n    '''\n    Return a boolean indicating if the number is the sum of its digits as a string.\n    '''\n    return str(sum([int(i) for i in str(n)])) == str(n)\ndef is_narcissistic_int(n):\n    '''\n    Return a boolean indicating if the number is the sum of its digits as an integer.\n    '''\n    return sum([int(i) for i in str(n)]) == n\ndef is_narcissistic_int_str(n):\n    '''\n    Return a boolean indicating if the number is the sum of its digits as an integer as a string.\n    '''\n    return str(sum([int(i) for i in str(n)])) == str(n)\ndef is_narcissistic_permutation(n):\n    '''\n    Return a boolean indicating if the number is a permutation of the digits of the number.\n    '''\n    return sorted(str(n)) == sorted(str(n))\ndef is_narcissistic_permutation_str(n):\n    '''\n    Return a boolean indicating if the number is a permutation of the digits of the number as a string.\n    '''\n    return sorted(str(n)) == sorted(str(n))\ndef is_narcissistic_permutation_int(n):\n    '''\n    Return a boolean indicating if the number is a permutation of the digits of the number as an integer.\n    '''\n    return sorted([int(i) for i in str(n)]) == sorted([int(i) for i in str(n)])\ndef is_narcissistic_permutation_int_str(n):\n    '''\n    Return a boolean indicating if the number is a permutation of the digits of the number as an integer as a string.\n    '''\n    return sorted([int(i) for i in str(n)]) == sorted([int(i) for i in str(n)])\ndef is_narcissistic_permutation_comb(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as a string.\n    '''\n    return sorted([int(i) for i in str(n)]) == sorted([int(i) for i in str(k)])\ndef is_narcissistic_permutation_comb_str(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as a string.\n    '''\n    return sorted(str(n)) == sorted(str(k))\ndef is_narcissistic_permutation_comb_int(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as an integer.\n    '''\n    return sorted([int(i) for i in str(n)]) == sorted([int(i) for i in str(k)])\ndef is_narcissistic_permutation_comb_int_str(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as an integer as a string.\n    '''\n    return sorted([int(i) for i in str(n)]) == sorted([int(i) for i in str(k)])\ndef is_narcissistic_permutation_comb_int_str_factorial(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as an integer as a string,\n    only factorial.\n    '''\n    return sorted([int(i) for i in str(n)]) == sorted([int(i) for i in str(k)])\ndef is_narcissistic_permutation_comb_int_str_factorial_str(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as an integer as a string,\n    only factorial as a string.\n    '''\n    return sorted(str(n)) == sorted(str(k))\ndef is_narcissistic_permutation_comb_int_str_factorial_int(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as an integer as a string,\n    only factorial as an integer.\n    '''\n    return sorted([int(i) for i in str(n)]) == sorted([int(i) for i in str(k)])\ndef is_narcissistic_permutation_comb_int_str_factorial_int_str(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as an integer as a string,\n    only factorial as an integer as a string.\n    '''\n    return sorted(str(n)) == sorted(str(k))\ndef is_narcissistic_permutation_comb_int_str_factorial_int_str_str(n,k):\n    '''\n    Return a boolean indicating if the number is the sum of the digits of the number as an integer as a string,\n    only factorial as an integer as a string.\n    '''\n    return sorted(str(n)) == sorted(str"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(1, n):\n        if n % i == 0:\n            if n/i == i:\n                return False\n            else:\n                if i*i + (n/i)*(n/i) == n:\n                    return True\n    return False\ndef square_sum(n):\n    '''\n    Write a function to determine if the sum of the squares of the divisors of two integers is the same.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(1, n):\n        if n % i == 0:\n            if n/i == i:\n                return False\n            else:\n                if i*i + (n/i)*(n/i) == n:\n                    return True\n    return False\ndef isPrime(n):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 3:\n        return True\n    for i in range(3, math.floor(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_happy(n):\n    '''\n    Write a function that takes in an integer and returns True if the number is\n    a happy number, and False if it is not.\n    '''\n    if n == 1:\n        return True\n    digits = [int(d) for d in str(n)]\n    prev = n\n    while True:\n        curr = sum([int(d)**2 for d in str(prev)])\n        if curr == 1:\n            return True\n        if prev == curr:\n            return False\n        prev = curr\ndef is_abundant(n):\n    '''\n    Write a function that takes in an integer and returns True if the number is\n    abundant, and False if it is not.\n    '''\n    if sum([int(d) for d in str(n)]) > n:\n        return True\n    return False\ndef is_perfect(n):\n    '''\n    Write a function that takes in an integer and returns True if the number is\n    perfect, and False if it is not.\n    '''\n    if sum([int(d) for d in str(n)]) == n:\n        return True\n    return False\ndef is_palindrome(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a palindrome, and False if it is not.\n    '''\n    if str(n)[::-1] == str(n):\n        return True\n    return False\ndef is_armstrong(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    an armstrong number, and False if it is not.\n    '''\n    if len(str(n)) > 3:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    sum = 0\n    for i in range(len(str(n))):\n        sum += int(str(n)[i])**3\n    if sum == n:\n        return True\n    return False\ndef is_palindrome_perm(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a permutation of a palindrome, and False if it is not.\n    '''\n    nums = [int(d) for d in str(n)]\n    if len(nums) > len(set(nums)):\n        return False\n    return sorted(nums) == sorted(nums, reverse=True)\ndef is_pandigital(n, start=1):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a pandigital number, and False if it is not.\n    '''\n    nums = [int(d) for d in str(n)]\n    if len(nums)!= len(set(nums)):\n        return False\n    for i in range(start, len(nums) + 1):\n        if i not in nums:\n            return False\n    return True\ndef is_powerful(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a powerful number, and False if it is not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_totient(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    the totient of a number, and False if it is not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_strong(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a strong number, and False if it is not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_super_palindrome(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super palindrome, and False if it is not.\n    '''\n    if len(str(n)) > 3:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    elif len(str(n)) == 3:\n        return True\n    return str(n)[2:] == str(n)[2:][::-1]\ndef is_super_pandigital(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super pandigital number, and False if it is not.\n    '''\n    if len(str(n))!= len(set(str(n))):\n        return False\n    return is_palindrome_perm(n) and is_pandigital(n)\ndef is_super_abundant(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super abundant number, and False if it is not.\n    '''\n    if sum([int(d) for d in str(n)]) > n:\n        return True\n    return False\ndef is_super_perfect(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super perfect number, and False if it is not.\n    '''\n    if is_perfect(n):\n        return True\n    return False\ndef is_super_palindrome_perm(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super permutation of a palindrome, and False if it is not.\n    '''\n    if len(str(n)) > 3:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    return sorted(str(n)) == sorted(str(n), reverse=True)\ndef is_super_strong(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super strong number, and False if it is not.\n    '''\n    if is_strong(n):\n        return True\n    return False\ndef is_super_totient(n):\n    '''\n    Write a function that takes in a number and returns True if the number is\n    a super totient of a number, and False if it is not.\n    '''\n    if is_totient(n)"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_lst = [] \n    for i in range(1, int(n/2)+1): \n        if n % i == 0: \n            div_lst.append(i) \n    return sum(div_lst) \n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            s += i\n    if s == n:\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    '''\n    n is the integer that we want to check for divisibility of \n    '''\n    divisors=[]\n    for i in range(1,n):\n        if(n%i==0):\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return 0\n    else:\n        divs = get_divisors(n)\n        return sum(divs)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<2:\n        return 0\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_to_num_position = {}\n    for i in range(26):\n        char_to_num_position[chr(97+i)] = i\n    count = 0\n    for c in str1:\n        count += char_to_num_position[c.lower()]\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_dict = {}\n    for c in str1:\n        if c in char_dict:\n            char_dict[c] += 1\n        else:\n            char_dict[c] = 1\n    \n    return char_dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from string import ascii_lowercase\n    alphas = {ascii_lowercase[i]:i+1 for i in range(26)}\n    return sum([alphas[c] for c in str1 if c in alphas])\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    result = {}\n    \n    for i, v in enumerate(str1):\n        result.setdefault(i, []).append(v)\n    \n    result_list = list()\n    \n    for i, v in result.iteritems():\n        if len(v) > 1:\n            result_list.append(v)\n    \n    return result_list\n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function that takes a string and returns True if it is a palindrome, False otherwise\n    '''\n    \n    if len(str1) < 2:\n        return True\n    \n    result = 0\n    \n    for i, v in enumerate(str1):\n        if v.lower()!= str1[-i-1].lower():\n            result += 1\n    \n    if result == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_to_pos = {}\n    for pos in range(len(str1)):\n        char = str1[pos]\n        char_to_pos[char] = char_to_pos.get(char, []) + [pos]\n    return sum([len(v) for v in char_to_pos.values()])\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].lower() == str1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # TO DO: Fill this in\n    \n    char_dict = {}\n    for i in str1:\n        if i.isalpha():\n            if i.lower() in char_dict.keys():\n                char_dict[i.lower()] += 1\n            else:\n                char_dict[i.lower()] = 1\n    return char_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    c = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in s:\n            c += 1\n    return c\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos = {}\n    for i in range(0, 26):\n        char_pos[chr(97 + i)] = i\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if type(str1)!= str:\n        raise TypeError(\"The input must be a string.\")\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0 \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                pairs += 1 \n    return pairs \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    elif len(A) == 2:\n        return 1 if A[0] == A[1] else 0\n    else:\n        return sum(map(lambda x: find_even_pair(A[1:]) + find_even_pair(A[2:]), A[::2])) + find_even_pair(A[1::2])\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    counter = 0\n    for x in A:\n        for y in A:\n            if x^y%2 == 0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    bitmask = 0\n    for a in A:\n        bitmask ^= a\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def xor_even(l):\n        if len(l)%2:\n            return l[len(l)/2]\n        else:\n            return (l[len(l)/2-1] + l[len(l)/2])/2\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    n = len(A)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return int(A[0] ^ A[1] == 0)\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0 \n    for i in range(0, len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in xrange(len(A)):\n        for j in xrange(i+1, len(A)):\n            if (A[i] ^ A[j] ) %2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n    \ndef next_power_of_2_v2(n):\n    return int(2**math.ceil(math.log(n,2)))\n    \ndef next_power_of_2_v3(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n | (n - 1)\n        \ndef next_power_of_2_v4(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        return n | (n - 1)\n    \ndef next_power_of_2_v5(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n,2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return 1 << count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n: \n        power *= 2\n    return power // 2\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(int(log(n,2))+1)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (1 << i) < n:\n        i = i + 1\n    return (1 << i)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return pow(2,int(n))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize the power of 2\n    p = 1\n    # iterate over power of 2 till n\n    while p <= n:\n        p = p * 2\n    # return the power of 2 greater than or equal to n\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return 2**(int(math.ceil(math.log(n, 2))))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Source: http://stackoverflow.com/questions/15390807/power-of-2-in-python\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = 0\n    for i in a:\n        if i == x:\n            b += 1\n    return b\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency(a,7)\n    print frequency(a,2)\n    print frequency(a,11)\n    \ndef run_frequency_2():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_2(a,7)\n    print frequency_2(a,2)\n    print frequency_2(a,11)\n    \ndef frequency_2(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency_3():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_3(a,7)\n    print frequency_3(a,2)\n    print frequency_3(a,11)\n    \ndef frequency_3(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef frequency_4(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency_5():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_5(a,7)\n    print frequency_5(a,2)\n    print frequency_5(a,11)\n    \ndef frequency_5(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef frequency_6(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency_7():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_7(a,7)\n    print frequency_7(a,2)\n    print frequency_7(a,11)\n    \ndef frequency_7(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef frequency_8(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency_9():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_9(a,7)\n    print frequency_9(a,2)\n    print frequency_9(a,11)\n    \ndef frequency_9(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef frequency_10(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency_11():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_11(a,7)\n    print frequency_11(a,2)\n    print frequency_11(a,11)\n    \ndef frequency_11(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef frequency_12(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency_13():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_13(a,7)\n    print frequency_13(a,2)\n    print frequency_13(a,11)\n    \ndef frequency_13(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef frequency_14(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency_15():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_15(a,7)\n    print frequency_15(a,2)\n    print frequency_15(a,11)\n    \ndef frequency_15(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef frequency_16(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef run_frequency_17():\n    a = [1,3,5,7,7,7,7,7,8,9]\n    print frequency_17(a,7)\n    print frequency_17(a,2)\n    print frequency_17(a,11)\n    \ndef frequency_17(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \ndef frequency_18(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+="
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([a for a in x if a == x])\n    \ndef count_matches(items):\n    '''\n    You have an array of logs.  Each log is a space delimited string of words.\n    \n    For each log, the first word in each log is an alphanumeric identifier.  Then, either:\n    \n    Each word after the identifier will consist only of lowercase letters, or;\n    Each word after the identifier will consist only of digits.\n    We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.\n    \n    Reorder these logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.\n    \n    Return the final order of the logs.\n    \n    Example 1:\n    Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\n    Output: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\n    \n    Constraints:\n    * 0 <= logs.length <= 100\n    * 3 <= logs[i].length <= 100\n    * logs[i] is guaranteed to have an identifier, and a word after the identifier.\n    '''\n    \n    letter_logs = sorted(list(filter(lambda x: x.split()[1].isdigit(), items)), key=lambda x: (x.split()[1:], x.split()[0]))\n    digit_logs = sorted(list(filter(lambda x: not x.split()[1].isdigit(), items)), key=lambda x: (x.split()[1:], x.split()[0]))\n    \n    return letter_logs + digit_logs\n    \ndef order_logs(logs):\n    '''\n    You have an array of logs.  Each log is a space delimited string of words.\n    \n    For each log, the first word in each log is an alphanumeric identifier.  Then, either:\n    \n    Each word after the identifier will consist only of lowercase letters, or;\n    Each word after the identifier will consist only of digits.\n    We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.\n    \n    Reorder these logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.\n    \n    Return the final order of the logs.\n    \n    Example 1:\n    Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\n    Output: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\n    \n    Constraints:\n    * 0 <= logs.length <= 100\n    * 3 <= logs[i].length <= 100\n    * logs[i] is guaranteed to have an identifier, and a word after the identifier.\n    '''\n    \n    letter_logs = [log.split() for log in logs if log[0].isdigit()]\n    digit_logs = [log.split() for log in logs if not log[0].isdigit()]\n    \n    letter_logs.sort(key = lambda x: (x[1:], x[0]))\n    digit_logs.sort(key = lambda x: (x[1:], x[0]))\n    \n    return letter_logs + digit_logs\n    \ndef sort_sentence(s):\n    '''\n    Given a string of words, return the string sorted lexicographically.\n    \n    Example 1:\n    Input: \"is2 Thi1s T4est 3a\"\n    Output: \"23a 4b 1c 2d 3e\"\n    \n    Example 2:\n    Input: \"4of Fo1r pe6ople g3ood th5e the2\"\n    Output: \"Fo1r the2 d3of 4b pe6ople g3ood th5e\"\n    \n    Example 3:\n    Input: \"is2 Thi1s T4est 3a\"\n    Output: \"23a 4b 1c 2d 3e\"\n    '''\n    \n    words = s.split()\n    words.sort()\n    \n    return''.join(words)\n    \ndef intersect(nums1, nums2):\n    '''\n    Given two arrays, write a function to compute their intersection.\n    \n    Example:\n    Input: nums1 = [1, 2, 2, 1], nums2 = [2, 2]\n    Output: [2]\n    \n    Note:\n    Each element in the result must be unique.\n    The result can be in any order.\n    '''\n    \n    return list(set(nums1) & set(nums2))\n    \ndef sort_vowels(s):\n    '''\n    Given a string, sort the vowels in ascending order, and the consonants in descending order.\n    \n    Example 1:\n    Input: \"rkqodlw\"\n    Output: \"world\"\n    \n    Example 2:\n    Input: \"world\"\n    Output: \"rdlro\"\n    \n    Example 3:\n    Input: \"leetcode\"\n    Output: \"cdelotee\"\n    '''\n    \n    vowels = sorted(list(filter(lambda x: x in 'aeiou', s)))\n    consonants = sorted(list(filter(lambda x: x not in 'aeiou', s)), reverse=True)\n    \n    return ''.join(consonants + vowels)\n    \ndef max_width_histogram(histogram):\n    '''\n    Given a list of integers representing the histogram's bar height, return the width of the largest rectangle in the histogram.\n    \n    Example 1:\n    Input: [2,1,5,6,2,3]\n    Output: 4\n    Explanation: The above image shows the histogram where width is the bar width and height is the bar height.\n    \n    Example 2:\n    Input: [2,4]\n    Output: 2\n    \n    Example 3:\n    Input: [2,1,4,3,1,5]\n    Output: 4\n    \n    Example 4:\n    Input: [1,3,1]\n    Output: 1\n    \n    Example 5:\n    Input: [7,1,5,6,2,3,4,5,10,6]\n    Output: 8\n    '''\n    \n    stack = []\n    max_area = 0\n    \n    for i, height in enumerate(histogram):\n        while stack and histogram[stack[-1]] > height:\n            top = stack.pop()\n            if stack:\n                width = i - stack[-1] - 1\n            else:\n                width = i\n            max_area = max(max_area, histogram[top] * width)\n        stack.append(i)\n    \n    while stack:\n        top = stack.pop()\n        if stack:\n            width = len(histogram) - stack[-1] - 1\n        else:\n            width = len(histogram)\n        max_area = max(max_area, histogram[top] * width)\n    \n    return max_area\n    \ndef word_break(s, word_dict):\n    '''\n    Given a string s and a set of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n    \n    Note:\n    \n    The same word in the dictionary may be reused multiple times in the segmentation.\n    You may assume the dictionary does not contain duplicate words.\n    Example 1:\n    Input: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n    Output: true\n    Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n    \n    Example 2:\n    Input: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n    Output: true\n    Expla"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count +=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count+1\n    return count\n    \n    \n    "
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            freq+=1\n    return freq\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    res = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            res = res + 1\n    return res\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in a:\n        if i == x:\n            c = c + 1\n    return c\n    \ndef median(a):\n    '''\n    Write a function to find the median of a list.\n    '''\n    s = 0\n    for i in a:\n        s = s + i\n    if len(a)%2 == 0:\n        return float(s)/len(a)/2\n    else:\n        return float(s)/len(a)\n    \ndef mode(a):\n    '''\n    Write a function to find the mode of a list.\n    '''\n    m = max(a)\n    mc = 0\n    for i in a:\n        if i == m:\n            mc = mc + 1\n    return m,mc\n    \ndef are_anagrams(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if len(s1) == len(s2):\n        return sorted(s1) == sorted(s2)\n    else:\n        return False\n        \ndef same_length(a, b):\n    '''\n    Write a function to return true if all items in a list are of the same length.\n    '''\n    if len(a) == len(b):\n        return True\n    else:\n        return False\n        \ndef is_member(a,b):\n    '''\n    Write a function to check if a list is a member of another list.\n    '''\n    if a in b:\n        return True\n    else:\n        return False\n        \ndef is_intersecting(a, b):\n    '''\n    Write a function to check if two lists are intersecting.\n    '''\n    for i in a:\n        if i in b:\n            return True\n    return False\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                                                                \n        m, n = n, m                                                                                                                                                                                                \n    return sum(list1[m:n+1])                                                                                                                                                                                    \n    \ndef sum_range_list_comprehension(list1, m, n):                                                                                                                                                                                        \n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                                                \n        return \"Error: m cannot be larger than n\"                                                                                                                                                                                                    \n    return sum(list1[m:n+1])                                                                                                                                                                                                                                                                                    \n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_list(list1, m, n):\n    if m > n:\n        return \"Error: m cannot be larger than n\"\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    return sum(list1[m:n+1])\n    \ndef sum_range_lis"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = sum(list1[m:n])\n    return result\n    \ndef sum_range_list2(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.pi * a * 5\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 5 * a\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = 0\n    area = (5/4) * a * a\n    return area\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 6 * a\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = 0\n    area = (3 * math.sqrt(3) / 2) * a * a\n    return area\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 7 * a\n    return perimeter\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    area = 0\n    area = (7/4) * a * a\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 8 * a\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 9 * a\n    return perimeter\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 8 * a\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_nonaon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 10 * a\n    return perimeter\ndef area_nonaon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_tria(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 3 * a\n    return perimeter\ndef area_tria(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    area = 0\n    area = (1/2) * a * a\n    return area\ndef perimeter_octa(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 4 * a\n    return perimeter\ndef area_octa(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_nonaon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 4 * a\n    return perimeter\ndef area_nonaon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_deca(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 7 * a\n    return perimeter\ndef area_deca(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_deca(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 7 * a\n    return perimeter\ndef area_deca(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_undeca(a):\n    '''\n    Write a function to find the perimeter of a regular undecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 14 * a\n    return perimeter\ndef area_undeca(a):\n    '''\n    Write a function to find the area of a regular undecagon from the length of its sides.\n    '''\n    area = 0\n    area = (2 * math.sqrt(2)) * a * a\n    return area\ndef perimeter_dodeca(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 12 * a\n    return perimeter\ndef area_dodeca(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    area = 0\n    area = (1/2) * a * a\n    return area\ndef perimeter_hexec(a):\n    '''\n    Write a function to find the perimeter of a regular hexecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 12 * a\n    return perimeter\ndef area_hexec(a):\n    '''\n    Write a function to find the area of a regular hexecagon from the length of its sides.\n    '''\n    area = 0\n    area = (3 * math.sqrt(3) / 2) * a * a\n    return area\ndef perimeter_heptec(a):\n    '''\n    Write a function to find the perimeter of a regular heptecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 13 * a\n    return perimeter\ndef area_heptec(a):\n    '''\n    Write a function to find the area of a regular heptecagon from the length of its sides.\n    '''\n    area = 0\n    area = (3 * math.sqrt(3) / 2) * a * a\n    return area\ndef perimeter_octec(a):\n    '''\n    Write a function to find the perimeter of a regular octecagon from the length of its sides.\n    '''\n    perimeter = 0\n    perimeter = 14 * a\n    return perimeter\ndef area_octec(a):\n    '''\n    Write a function to find the area of a regular octecagon from the length of its sides.\n    '''\n    are"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    b = (a*(1 + math.sqrt(5))) / 2\n    return b\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = math.pow(5, 2) * (3 * math.sqrt(5) + 1) / 4\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 25 + 45 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sqrt(3) / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sqrt(5) / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * 5) + (a * math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    peri = (5*a**2)**0.5\n    return peri\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2 * (5 * a**2)**0.5\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return 3 * (3**0.5 / 2) * (a**2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6 * (3**0.5 / 2) * (a**2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 4 * (5 * a**2)**0.5\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return 7 * (5**0.5 / 4) * (a**2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4 * (3**0.5 / 2) * (a**2)\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return 8 * (2**0.5 / 2) * (a**2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 3 * (7 * a**2)**0.5\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return 5 * (7**0.5 / 4) * (a**2)\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 10 * (2 * a)**0.5\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return 10 * (3**0.5 / 4) * (a**2)\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 12 * (a**2)**0.5\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return 12 * (3**0.5 / 4) * (a**2)\ndef perimeter_tetragon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 4 * (5 * a)**0.5\ndef area_tetragon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return 4 * (5**0.5 / 4) * (a**2)\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return 4 * (5 * a)**0.5\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return 4 * (5**0.5 / 4) * (a**2)\ndef perimeter_icosagon(a):\n    '''\n    Write a function to find the perimeter of a regular icosagon from the length of its sides.\n    '''\n    return 3 * (5 * a**2)**0.5\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a regular icosagon from the length of its sides.\n    '''\n    return 5 * (5**0.5 / 4) * (a**2)\ndef perimeter_icosagon(a):\n    '''\n    Write a function to find the perimeter of a regular icosagon from the length of its sides.\n    '''\n    return 12 * (a**2)**0.5\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a regular icosagon from the length of its sides.\n    '''\n    return 6 * (5**0.5 / 4) * (a**2)\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the radius of the circle.\n    '''\n    return 2 * math.pi * r\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from the radius of the circle.\n    '''\n    return math.pi * r**2\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return a * 3\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    return (a * (a + 1)) / 2\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return 4 * a\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return a ** 2\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return 2 * (a + b)\ndef area_rectangle(a, b):\n    '''\n    Write a function to find the area of a rectangle from the length of its sides.\n    '''\n    return a * b\ndef perimeter_trapeze(a, b, c):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return a + b + c\ndef area_trapeze(a, b, c):\n    '''\n    Write a function to find the area of a rectangle from the length of its sides.\n    '''\n    return (a + b) * c / 2\ndef perimeter_rombo(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return 2 * (a + b)\ndef area_rombo(a, b):\n    '''\n    Write a function to find the area of a rectangle from the length of its sides.\n    '''\n    return a * b\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a circle from the length of its sides.\n    '''\n    return 2 * math.pi * a\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle from the length of its sides.\n    '''\n    return math.pi * a**2\ndef perimeter_ellipse(a, b):\n    '''\n    Write a function to find the perimeter of an ellipse from the length of its sides.\n    '''\n    return 2 * math.pi * a * b\ndef area_ellipse(a, b):\n    '''\n    Write a function to find the area of an ellipse from the length of its sides.\n    '''\n    return math.pi * a * b\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a circle from the length of its sides.\n    '''\n    return 2 * math.pi * a\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle from the length of its sides.\n    '''\n    return math.pi * a**2\ndef perimeter_ellipse(a, b):"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return len(s.split('std')) - 1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n=len(s)\n    s_std=s.count(\"std\")\n    return s_std\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    import re\n    return len(re.findall(r'std', s))\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    if'std' in s:\n        return s.count('std')\n    else:\n        return -1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import re\n    n = re.findall(r'\\bstd\\b',s)\n    return len(n)\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    if s =='std':\n        return s.count('std')\n    return 1 + count_occurance(s[1:])\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    result = True\n    for ele in test_tuple:\n        if not isinstance(ele, type(test_tuple[0])):\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code goes here\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    n = len(test_tuple)\n    for i in range(n):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return True\n    if type(test_tuple[0])==type(test_tuple):\n        return True\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #Iterate through the tuple\n    for val in test_tuple:\n        #If one tuple is not of same data type as the other\n        if type(val) is not test_tuple[0]:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple is empty\n    if not test_tuple:\n        return True\n    # check if the first item is a valid data type\n    if not isinstance(test_tuple[0], type(None)):\n        return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_length = len(test_tuple)\n    for i in range(0, tuple_length):\n        for j in range(i+1, tuple_length):\n            if test_tuple[i]!= test_tuple[j]:\n                return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 1:\n        return None\n    elif len(test_tuple) == 1:\n        return test_tuple[0]\n    else:\n        first_type = type(test_tuple[0])\n        for i in test_tuple[1:]:\n            if type(i)!= first_type:\n                return None\n    return first_type\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) == tuple:\n        pass\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    else:\n        if arr[0] == x and arr[n-1] == x:\n            return True\n        elif arr[0] == x:\n            return is_majority(arr[1:n-1], n-2, x)\n        elif arr[n-1] == x:\n            return is_majority(arr[0:n-2], n-2, x)\n        else:\n            return is_majority(arr[1:n-1], n-2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return None\n    first = arr[0]\n    second = arr[1]\n    if x == first:\n        return True\n    if x == second:\n        return True\n    return is_majority(arr[1:], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n / 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr is None or len(arr) == 0 or n == 0:\n        return False\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n / 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_majority(arr[:n/2], n/2, x) and is_majority(arr[n/2:], n/2, x)\n        else:\n            return is_majority(arr[:n/2+1], n/2, x) and is_majority(arr[n/2:], n/2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return n/2 > arr.count(x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = int(n)\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if n&1: count+=1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n > 0):\n        n &= (n - 1)\n        count += 1\n    return count\ndef count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n > 0):\n        n &= (n - 1)\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # n = bin(n)\n    # n = n[2:]\n    n = [int(x) for x in str(bin(n))[2:]]\n    return n.count(1)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        if (n % 2 == 1):\n            count += 1\n        n = n//2\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bit = 0\n    while n:\n        bit += n & 1\n        n >>= 1\n    return bit\ndef reverse(num):\n    '''\n    Write a python function to reverse a given number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return reverse(num / 10) * 10 + (num % 10)\ndef split(num):\n    '''\n    Write a python function to split a given number into its digits.\n    '''\n    if num == 0:\n        return [0]\n    else:\n        return [num % 10] + split(num / 10)\ndef is_power(num1,num2):\n    '''\n    Write a python function to check if a given number is a power of another number.\n    '''\n    if num2 == 1:\n        return True\n    elif num1 == 0:\n        return False\n    else:\n        return is_power(num1 / num2, num2)\ndef is_square(num):\n    '''\n    Write a python function to check if a given number is a perfect square.\n    '''\n    if num == 0:\n        return True\n    else:\n        return is_square(num / 10)\ndef is_power_2(num):\n    '''\n    Write a python function to check if a given number is a power of 2.\n    '''\n    if num == 0:\n        return True\n    elif count_Set_Bits(num) == 1:\n        return True\n    else:\n        return False\ndef number_to_base(num,base):\n    '''\n    Write a python function to convert a given base 10 number to a given base.\n    '''\n    if num == 0:\n        return '0'\n    elif num < 0:\n        return number_to_base(num * -1, base)\n    else:\n        if count_Set_Bits(num) > count_Set_Bits(base):\n            return number_to_base(num / base, base) + str(num % base)\n        else:\n            return str(num % base)\ndef base_to_number(num,base):\n    '''\n    Write a python function to convert a given base 10 number to a given base.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return (num % base) * base ** (len(num) - 1) + base_to_number(num / base, base)\ndef number_to_digits(num,base):\n    '''\n    Write a python function to convert a given base 10 number to a given base.\n    '''\n    if base == 10:\n        return str(num)\n    else:\n        return number_to_digits(num,base / 10) + str(num % (base / 10))\ndef add_binary(num1,num2):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num1\n    else:\n        if count_Set_Bits(num1) > count_Set_Bits(num2):\n            return add_binary(num1,num2) + '0' * (len(num1) - len(num2))\n        else:\n            return add_binary(num1,num2) + '0' * (len(num2) - len(num1))\ndef get_binary_num(num):\n    '''\n    Write a python function to convert a given number into a binary number.\n    '''\n    if num == 0:\n        return ''\n    else:\n        return get_binary_num(num / 2) + str(num % 2)\ndef count_Even_Digits(num):\n    '''\n    Write a python function to count the number of even digits in a given number.\n    '''\n    if num == 0:\n        return 0\n    elif count_Set_Bits(num) == 1:\n        return count_Even_Digits(num / 10) + 1\n    else:\n        return count_Even_Digits(num / 10)\ndef is_palin(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num < 0:\n        return False\n    else:\n        return is_palin(num / 10) and (num % 10) == (reverse(num) % 10)\ndef is_palin_bit(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num < 0:\n        return False\n    else:\n        if count_Set_Bits(num) == 1:\n            return is_palin_bit(num / 10) and (num % 10) == (reverse(num) % 10)\n        else:\n            return False\ndef is_palin_string(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num < 0:\n        return False\n    else:\n        if count_Set_Bits(num) == 1:\n            return is_palin_string(num / 10) and (num % 10) == (reverse(num) % 10)\n        else:\n            return False\ndef get_base_n(num,base):\n    '''\n    Write a python function to convert a given base 10 number to a given base.\n    '''\n    if base == 10:\n        return str(num)\n    else:\n        return get_base_n(num,base / 10) + str(num % (base / 10))\ndef get_num_base_n(num,base):\n    '''\n    Write a python function to convert a given base 10 number to a given base.\n    '''\n    if base == 10:\n        return num\n    else:\n        return get_num_base_n(num,base / 10) * (base / 10) + num % (base / 10)\ndef base_n_to_number(num,base):\n    '''\n    Write a python function to convert a given base 10 number to a given base.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return (num % base) * base ** (len(num) - 1) + base_n_to_number(num / base, base)\ndef add_string(num1,num2):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num1\n    else:\n        if count_Set_Bits(num1) > count_Set_Bits(num2):\n            return add_string(num1,num2) + '0' * (len(num1) - len(num2))\n        else:\n            return add_string(num1,num2) + '0' * (len(num2) - len(num1))\ndef add_binary_strings(num1,num2):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num1\n    else:\n        if count_Set_Bits(num1) > count_Set_Bits(num2):\n            return add_binary_strings(num1,num2) + '0' * (len(num1) - len(num2))\n        else:\n            return add_binary_strings(num1,num2) + '0' * (len(num2) - len(num1))\ndef add_binary_strings_reverse(num1,num2):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num1\n    else:\n        if count_Set_Bits(num1) > count_Set_Bits(num2):\n            return add_binary_strings_reverse(num1,num2) "
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n:\n        n &= n - 1\n        c += 1\n    return c\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(0, len(str)):\n        if i%2 == 0:\n            new_str = new_str + str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)==0:\n        return str\n    else:\n        return str[1:len(str)]+odd_values_string(str[0:len(str)-1])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    new_string = str\n    for i in range(0,len(str),2):\n        new_string = new_string.replace(str[i],\"\",1)\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) < 1:\n        return \"Empty String\"\n    else:\n        return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if not str:\n        return \"\"\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([s[1::2] for s in str])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # return str[::2]\n    return ''.join(str[i] for i in range(0, len(str), 2))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in str:\n        if ord(i) % 2!= 0:\n            str = str.replace(i,'')\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i%2!= 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        elif c < a:\n            return c\n        else:\n            return a\ndef is_vowel(char):\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n        return True\n    return False\ndef anagram(a,b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(a)!= len(b):\n        return False\n    a = a.lower()\n    b = b.lower()\n    alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in b:\n        if i not in d:\n            return False\n        else:\n            d[i] -= 1\n    for i in d:\n        if d[i]!= 0:\n            return False\n    return True\ndef is_palindrome(a):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    if len(a) <= 1:\n        return True\n    if a[0]!= a[-1]:\n        return False\n    return is_palindrome(a[1:-1])\ndef is_plural(a):\n    '''\n    Write a function to check if a word is plural.\n    '''\n    if a[-1] =='s':\n        return True\n    return False\ndef word_break(a,b):\n    '''\n    Write a function to check if a string can be segmented into a space-separated sequence of non-empty substrings.\n    '''\n    if a == b:\n        return True\n    if len(a) == 0:\n        return True\n    if len(b) == 0:\n        return False\n    if b[0] == a[0]:\n        return word_break(a[1:],b[1:])\n    return False\ndef roman_to_int(a):\n    '''\n    Write a function to convert a Roman numeral to an integer.\n    '''\n    if a == 'I':\n        return 1\n    if a == 'V':\n        return 5\n    if a == 'X':\n        return 10\n    if a == 'L':\n        return 50\n    if a == 'C':\n        return 100\n    if a == 'D':\n        return 500\n    if a == 'M':\n        return 1000\n    return -1\ndef int_to_roman(a):\n    '''\n    Write a function to convert an integer to a Roman numeral.\n    '''\n    if a == 1:\n        return 'I'\n    if a == 5:\n        return 'V'\n    if a == 10:\n        return 'X'\n    if a == 50:\n        return 'L'\n    if a == 100:\n        return 'C'\n    if a == 500:\n        return 'D'\n    if a == 1000:\n        return 'M'\n    return 'Error'\ndef fib(n):\n    '''\n    Write a function to compute the nth Fibonacci number, where n is a positive integer.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\ndef fib_dyn(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [1,1]\n    for i in range(2,n):\n        dp.append(dp[i-1] + dp[i-2])\n    return dp[n-1]\ndef is_leap_year(a):\n    '''\n    Write a function to check whether a given year is a leap year. A normal year has 365 days, leap year has 366 days.\n    '''\n    if a % 400 == 0:\n        return True\n    if a % 100 == 0:\n        return False\n    if a % 4 == 0:\n        return True\n    return False\ndef is_leap_year_new(a):\n    '''\n    Write a function to check whether a given year is a leap year. A normal year has 365 days, leap year has 366 days.\n    '''\n    if a % 4 == 0:\n        if a % 100 == 0:\n            return False\n        else:\n            return True\n    return False\ndef max_diff(a):\n    '''\n    Write a function to find the maximum difference between two numbers in a list of non-negative integers.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return a[0]\n    a = sorted(a)\n    return a[-1] - a[0]\ndef count_vowels(a):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = 0\n    for i in a:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            vowels += 1\n    return vowels\ndef is_pangram(a):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    if len(a) == 0:\n        return False\n    for i in a:\n        if i not in alpha:\n            return False\n    return True\ndef longest_subsequence(a):\n    '''\n    Write a function to find the longest subsequence of consecutive integers in an array.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        if a[0] == a[1]:\n            return 2\n        return 1\n    dp = [1 for i in range(len(a))]\n    for i in range(1,len(a)):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n    return max(dp)\ndef is_palindrome_permutation(a):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    a = a.lower()\n    alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in a:\n        if d[i] % 2!= 0:\n            return False\n    return True\ndef edit_distance(a,b):\n    '''\n    Write a function to calculate the edit distance between two strings.\n    '''\n    if len(a) == 0:\n        return len(b)\n    if len(b) == 0:\n        return len(a)\n    dp = [[0 for j in range(len(b) + 1)] for i in range(len(a) + 1)]\n    for i in range(1,len(a) + 1):\n        dp[i][0] = i\n    for j in range(1,len(b) + 1):\n        dp[0][j] = j\n    for i in range(1,len(a) + 1):\n        for j in range(1,len(b) + 1):\n            if a[i - 1] == b[j "
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n    \n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>=b and a>=c:\n        return a\n    elif b>=a and b>=c:\n        return b\n    else:\n        return c\n    \ndef is_less_than_or_equal(a,b): \n    '''\n    Write a function to check whether a number is less than or equal to b.\n    '''\n    if a<=b:\n        return True\n    else:\n        return False\n    \ndef is_greater_than_or_equal(a,b): \n    '''\n    Write a function to check whether a number is greater than or equal to b.\n    '''\n    if a>=b:\n        return True\n    else:\n        return False\n    \ndef is_less_than(a,b): \n    '''\n    Write a function to check whether a number is less than b.\n    '''\n    if a<b:\n        return True\n    else:\n        return False\n    \ndef is_greater_than(a,b): \n    '''\n    Write a function to check whether a number is greater than b.\n    '''\n    if a>b:\n        return True\n    else:\n        return False\n    \ndef abs_of_number(a): \n    '''\n    Write a function to check whether a number is negative or positive.\n    '''\n    if a>=0:\n        return True\n    else:\n        return False\n    \ndef sum_of_numbers(a,b): \n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    if a%2==0 and b%2==0:\n        return True\n    else:\n        return False\n    \ndef reverse_number(a): \n    '''\n    Write a function to reverse the number.\n    '''\n    if a>=0:\n        r=str(a)\n        l=len(r)\n        rev=\"\"\n        for i in range(l-1,-1,-1):\n            rev+=r[i]\n        return int(rev)\n    else:\n        r=str(a)\n        l=len(r)\n        rev=\"\"\n        for i in range(l-1,-1,-1):\n            rev+=r[i]\n        return -int(rev)\n    \ndef factorial(a): \n    '''\n    Write a function to calculate factorial of a number.\n    '''\n    if a<=1:\n        return 1\n    else:\n        return a*factorial(a-1)\n    \ndef fibonacci(a): \n    '''\n    Write a function to calculate fibonacci number of a number.\n    '''\n    if a==0 or a==1:\n        return 1\n    else:\n        return fibonacci(a-1)+fibonacci(a-2)\n    \ndef fibonacci_recursive(a): \n    '''\n    Write a function to calculate fibonacci number of a number.\n    '''\n    if a==0 or a==1:\n        return 1\n    else:\n        return fibonacci_recursive(a-1)+fibonacci_recursive(a-2)\n    \ndef binomial_coefficient(n,k): \n    '''\n    Write a function to calculate binomial coefficient of a number.\n    '''\n    if k>n:\n        return 0\n    elif k==0 or k==n:\n        return 1\n    else:\n        return binomial_coefficient(n-1,k-1)*n+binomial_coefficient(n-1,k)\n    \ndef sum_of_digits(a): \n    '''\n    Write a function to calculate sum of digits of a number.\n    '''\n    s=0\n    while a>0:\n        s+=a%10\n        a=a//10\n    return s\n    \ndef count_divisors(a): \n    '''\n    Write a function to count divisors of a number.\n    '''\n    c=1\n    for i in range(2,a):\n        if a%i==0:\n            c+=1\n    return c\n    \ndef sum_of_divisors(a): \n    '''\n    Write a function to sum of divisors of a number.\n    '''\n    s=0\n    for i in range(1,a):\n        if a%i==0:\n            s+=i\n    return s\n    \ndef count_divisors_recursive(a): \n    '''\n    Write a function to count divisors of a number.\n    '''\n    if a==1:\n        return 1\n    else:\n        return 1+count_divisors_recursive(a-1)\n    \ndef number_of_divisors(a): \n    '''\n    Write a function to calculate number of divisors of a number.\n    '''\n    c=0\n    for i in range(1,a):\n        if a%i==0:\n            c+=1\n    return c\n    \ndef reverse_string(a): \n    '''\n    Write a function to reverse a string.\n    '''\n    s=\"\"\n    for i in range(len(a)-1,-1,-1):\n        s+=a[i]\n    return s\n    \ndef palindrome(a): \n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    if a==reverse_string(a):\n        return True\n    else:\n        return False\n    \ndef count_words(a): \n    '''\n    Write a function to count number of words in a string.\n    '''\n    return a.count(\" \")+1\n    \ndef largest_number(a): \n    '''\n    Write a function to find the largest number in a list.\n    '''\n    c=0\n    for i in range(len(a)):\n        if a[i]>c:\n            c=a[i]\n    return c\n    \ndef second_largest_number(a): \n    '''\n    Write a function to find the second largest number in a list.\n    '''\n    c=0\n    for i in range(len(a)):\n        if a[i]>c and a[i]!=a[-1]:\n            c=a[i]\n    for i in range(len(a)):\n        if a[i]>c and a[i]==a[-1]:\n            return c\n    return c\n    \ndef is_anagram(a,b): \n    '''\n    Write a function to check whether two strings are anagram or not.\n    '''\n    if sorted(a)==sorted(b):\n        return True\n    else:\n        return False\n    \ndef is_anagram_with_dict(a,b): \n    '''\n    Write a function to check whether two strings are anagram or not.\n    '''\n    d={}\n    for i in a:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    for i in b:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]-=1\n    for i in d:\n        if d[i]!=0:\n            return False\n    return True\n    \ndef compare_strings(a,b): \n    '''\n    Write a function to compare two strings a and b and return 1 if a is greater than b, 0 if a is equal to b and -1 if a is less than b.\n    '''\n    if a==b:\n        return 0\n    elif a>b:\n        return 1\n    else:\n        return -1\n    \ndef max_string(a,b): \n    '''\n    Write a function to find the maximum of two strings a and b.\n    '''\n    if len(a)>len(b):\n        return a\n    elif len(a"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b):\n        if (a < c):\n            return a\n        else:\n            return c\n    else:\n        if (b < c):\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    flag = True\n    for i in range(l,r+1):\n        if (n & (1<<i)):\n            flag = False\n    return flag\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n_str = str(bin(n))[2:]\n    n_str_list = n_str.split('0')\n    n_str_list.sort()\n    if n_str_list == ['1']:\n        return False\n    elif n_str_list[0] == '1':\n        return True\n    elif n_str_list[-1] == '1' and len(n_str_list) == l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n & (1<<r) == 0:\n        return False\n    else:\n        while(n & 1 == 0):\n            n = n >> 1\n    return n & (1<<l) == 0\ndef print_Pattern(n,l,r):\n    if all_Bits_Set_In_The_Given_Range(n,l,r):\n        print('Pattern found at position ',end='')\n        print(l,end='')\n        print('...',end='')\n        print(r)\n    else:\n        print('No Pattern Found')\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>=l and n<=r:\n        return True\n    else:\n        return False\n        \ndef all_Bits_Set_In_The_Given_Range_Others_No(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n<l or n>r:\n        return True\n    else:\n        return False\n        \ndef all_Bits_Set_In_The_Given_Range_Others_Yes(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n<l or n>r:\n        return False\n    else:\n        return True\n        \ndef Number_Of_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check the number of bits set in the given range.\n    '''\n    count = 0\n    while n>=l:\n        n = n & (n-1)\n        count+=1\n    return count\n        \ndef Number_Of_Bits_Set_In_The_Given_Range_Others_No(n,l,r):\n    '''\n    Write a python function to check the number of bits set in the given range.\n    '''\n    if n<l or n>r:\n        return 0\n    else:\n        return Number_Of_Bits_Set_In_The_Given_Range(n,l,r)+Number_Of_Bits_Set_In_The_Given_Range_Others_No(n,l,r)\n        \ndef Number_Of_Bits_Set_In_The_Given_Range_Others_Yes(n,l,r):\n    '''\n    Write a python function to check the number of bits set in the given range.\n    '''\n    if n<l or n>r:\n        return False\n    else:\n        return Number_Of_Bits_Set_In_The_Given_Range(n,l,r)+Number_Of_Bits_Set_In_The_Given_Range_Others_Yes(n,l,r)\n        \ndef Nth_Bit_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether the ith bit is set in the given range or not.\n    '''\n    if n<l or n>r:\n        return False\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return (r&1)==1\n    count = 0\n    while n>=2:\n        count+=1\n        n = n&(n-1)\n    return True\n        \ndef Nth_Bit_Set_In_The_Given_Range_Others_No(n,l,r):\n    '''\n    Write a python function to check whether the ith bit is set in the given range or not.\n    '''\n    if n<l or n>r:\n        return False\n    if n==0:\n        return False\n    if n==1:\n        return False\n    if n==2:\n        return (r&1)==1\n    count = 0\n    while n>=2:\n        count+=1\n        n = n&(n-1)\n    return False\n        \ndef Nth_Bit_Set_In_The_Given_Range_Others_Yes(n,l,r):\n    '''\n    Write a python function to check whether the ith bit is set in the given range or not.\n    '''\n    if n<l or n>r:\n        return False\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return (r&1)==1\n    count = 0\n    while n>=2:\n        count+=1\n        n = n&(n-1)\n    return True\n        \ndef All_The_N_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the n bits are set in the given range or not.\n    '''\n    if n>=l and n<=r:\n        return True\n    else:\n        return False\n        \ndef All_The_N_Bits_Set_In_The_Given_Range_Others_No(n,l,r):\n    '''\n    Write a python function to check whether all the n bits are set in the given range or not.\n    '''\n    if n<l or n>r:\n        return True\n    else:\n        return False\n        \ndef All_The_N_Bits_Set_In_The_Given_Range_Others_Yes(n,l,r):\n    '''\n    Write a python function to check whether all the n bits are set in the given range or not.\n    '''\n    if n<l or n>r:\n        return False\n    else:\n        return True\n        \ndef Subtract_The_Given_Bit_From_The_Given_Range(n,l,r):\n    '''\n    Write a python function to subtract the given bit from the given range.\n    '''\n    if n>=l and n<=r:\n        return n-1\n    else:\n        return False\n        \ndef Subtract_The_Given_Bit_From_The_Given_Range_Others_No(n,l,r):\n    '''\n    Write a python function to subtract the given bit from the given range.\n    '''\n    if n<l or n>r:\n        return False\n    else:\n        return n-1\n        \ndef Subtract_The_Given_Bit_From_The_Given_Range_Others_Yes(n,l,r):\n    '''\n    Write a python function to subtract the given bit from the given range.\n    '''\n    if n<l or n>r:\n        return False\n    else:\n        return n\n        \ndef Power_Of_Two_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if n>=l and n<=r:\n        if (n&(n-1))==0:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef Power_Of_Two_In_The_Given_Range_Others_No(n,l,r):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if n<l or n>r:\n        return False\n    else:\n        return (n&(n-1))==0\n        \ndef Power_Of_Two_In_The_Given_Range_Others_Yes(n,l,r):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if n<l or n>r:\n        return False\n    else:\n        return (n&(n-1))!=0\n        \ndef Divide_The_Given_Number_By_The_Given_Power_Of_Two(n,l,r):\n    '''\n    Write a python function to divide the given number by the given power of two.\n    '''\n    if l<=n and n<=r and n&(n-1)==0:\n        return 1\n    else:\n        return 0\n        \ndef Divide_The_Given_Number_By_The_Given_Power_Of_Two_Others_No(n,l,r):\n    '''\n    Write a python function to divide the given number by the given power of two.\n    '''\n    if l<=n and n<=r and n&(n-1)!=0:\n        return 0\n    else:\n        return n\n        \ndef Divide_The_Given_Number_By_The_Given_Power_Of_Two_Others_Yes(n,l,r):\n    '''\n    Write a python function to divide the given number by the given power of two.\n    '''\n    if l<=n and n<"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    c=0\n    while(n):\n        if(n&1):\n            c+=1\n        n=n>>1\n    if c>=r and c<=l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        count = 0\n        while i:\n            count += i&1\n            i = i>>1\n        if count!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    num = n\n    for i in range(l,r+1):\n        num = num & (num-1)\n        if num == 0:\n            return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Initialize count to 0\n    count = 0\n    for i in range(l,r+1):\n        #Check if all bits are unset\n        if n & (1<<i):\n            pass\n        else:\n            count+=1\n    if count == 0:\n        print(\"All the bits are set in the given range\")\n    else:\n        print(\"The bits are not set in the given range\")\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res=n & ~((1<<(r+1))-1)\n    res &= ~((1<<(l-1))-1)\n    return res==0\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n&l) == l) and ((n&r) == r)\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr[:n], key=abs)[::-1] + arr[n:]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return \"Please enter a valid array\"\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    if len(arr) < n or n < 1:\n        return arr\n    \n    # make a copy of the array\n    newarr = arr[:]\n    \n    # iterate backwards\n    for i in range(len(newarr) - 1, -1, -1):\n        if newarr[i] < 0:\n            # shift the negative values over\n            j = len(newarr) - 1\n            while j > i:\n                newarr[j] = newarr[j-1]\n                j -= 1\n            # place the negative value in its place\n            newarr[i] = -1 * newarr[i]\n    \n    return newarr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # var to hold the new array\n    new_arr = []\n    # var to hold the current index\n    curr_index = 0\n    # var to hold the length of the new array\n    new_arr_len = 0\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_list = []\n    positive_list = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative_list.append(arr[i])\n        else:\n            positive_list.append(arr[i])\n    return negative_list + positive_list"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return 'Array too small'\n    pos_elements = []\n    neg_elements = []\n    for el in arr:\n        if el > 0:\n            pos_elements.append(el)\n        else:\n            neg_elements.append(el)\n    return pos_elements + neg_elements\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[:n]\n    pos = []\n    neg = []\n    for i in arr:\n        if i > 0:\n            pos.append(i)\n        elif i < 0:\n            neg.append(i)\n    neg = neg[::-1]\n    pos = pos + neg\n    return pos\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    list1 = str1.split(' ')\n    for i in range(len(list1)):\n        if list1[i] == '':\n            list1[i] = char\n    return ''.join(list1)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return \"\".join(str1.split(\" \"))\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1.find(char)!= -1:\n        return str1.replace(\" \",char)\n    else:\n        return str1\n    \n    \ndef add_spaces(str1,num):\n    '''\n    Write a function that takes in a string and integer, adds the integer number of spaces to the string, and returns the string.\n    '''\n    if len(str1) < num:\n        return str1 + \" \"*(num-len(str1))\n    else:\n        return str1\n    \ndef lstrip_extra_spaces(str1):\n    '''\n    Write a function that takes in a string, removes any spaces at the beginning of the string, and returns the string.\n    '''\n    if len(str1) > 0 and str1[0] == \" \":\n        return str1[1:]\n    else:\n        return str1\n        \n        \ndef rstrip_extra_spaces(str1):\n    '''\n    Write a function that takes in a string, removes any spaces at the end of the string, and returns the string.\n    '''\n    if len(str1) > 0 and str1[-1] == \" \":\n        return str1[:-1]\n    else:\n        return str1\n        \n        \ndef strip_extra_spaces(str1):\n    '''\n    Write a function that takes in a string, removes any spaces at the beginning and end of the string, and returns the string.\n    '''\n    if len(str1) > 0 and str1[0] == \" \" and str1[-1] == \" \":\n        return str1[1:-1]\n    elif len(str1) > 0 and str1[0] == \" \":\n        return str1[1:]\n    elif len(str1) > 0 and str1[-1] == \" \":\n        return str1[:-1]\n    else:\n        return str1\n        \n        \ndef concatenate(str1,str2):\n    '''\n    Write a function that takes in 2 strings, and returns the string of the 2 strings concatenated together.\n    '''\n    return str1 + str2\n    \n    \ndef get_value_as_string(dictionary,key):\n    '''\n    Write a function that takes in a dictionary and a key, and returns the value associated with the key.\n    '''\n    try:\n        return dictionary[key]\n    except:\n        return \"\"\n        \n        \ndef get_key_from_value(dictionary,val):\n    '''\n    Write a function that takes in a dictionary and a value, and returns the key associated with the value.\n    '''\n    for key,value in dictionary.items():\n        if value == val:\n            return key\n            \n            \ndef get_keys_from_value(dictionary,val):\n    '''\n    Write a function that takes in a dictionary and a value, and returns a list of keys that have the value.\n    '''\n    return [key for key,value in dictionary.items() if value == val]\n    \n    \ndef get_values_from_key(dictionary,key):\n    '''\n    Write a function that takes in a dictionary and a key, and returns a list of values that have the key.\n    '''\n    return [value for value in dictionary.values() if key in value]\n    \n    \ndef add_to_dictionary(dictionary,key,val):\n    '''\n    Write a function that takes in a dictionary, a key, and a value, and adds the key and value to the dictionary.\n    '''\n    if key in dictionary:\n        dictionary[key].append(val)\n    else:\n        dictionary[key] = [val]\n    \n    \ndef remove_from_dictionary(dictionary,key,val):\n    '''\n    Write a function that takes in a dictionary, a key, and a value, and removes the key and value from the dictionary.\n    '''\n    try:\n        dictionary[key].remove(val)\n    except:\n        pass\n    \n    \ndef get_longest_string(str1,str2):\n    '''\n    Write a function that takes in 2 strings, and returns the string with the length of the longest string.\n    '''\n    if len(str1) > len(str2):\n        return str1\n    elif len(str2) > len(str1):\n        return str2\n    else:\n        return str1\n        \n        \ndef get_longest_list(list1,list2):\n    '''\n    Write a function that takes in 2 lists, and returns the list with the length of the longest list.\n    '''\n    if len(list1) > len(list2):\n        return list1\n    elif len(list2) > len(list1):\n        return list2\n    else:\n        return list1\n        \n        \ndef get_longest_string_in_list(list1):\n    '''\n    Write a function that takes in a list of strings, and returns the string with the length of the longest string.\n    '''\n    max_string = \"\"\n    for string in list1:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string\n        \n        \ndef get_first_last_index(list1,val):\n    '''\n    Write a function that takes in a list and a value, and returns the index of the value if it is found in the list.\n    If not found, returns -1.\n    '''\n    try:\n        return list1.index(val)\n    except:\n        return -1\n    \n    \ndef get_last_first_index(list1,val):\n    '''\n    Write a function that takes in a list and a value, and returns the index of the value if it is found in the list.\n    If not found, returns -1.\n    '''\n    try:\n        return list1.rindex(val)\n    except:\n        return -1\n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function that takes in a string and returns true if the string is a palindrome and false otherwise.\n    A palindrome is a string that reads the same forward and backward.\n    '''\n    for i in range(len(str1)):\n        if str1[i]!= str1[-(i+1)]:\n            return False\n    return True\n    \n    \ndef palindrome_pair(str1,str2):\n    '''\n    Write a function that takes in a string, and returns true if the string is a palindrome and false otherwise.\n    A palindrome is a string that reads the same forward and backward.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i]!= str2[-(i+1)]:\n            return False\n    return True\n    \n    \ndef is_palindrome_permutation(str1):\n    '''\n    Write a function that takes in a string and returns true if the string is a palindrome permutation and false otherwise.\n    A string is a palindrome permutation if it is a palindrome, but it can be rearranged to form a palindrome.\n    '''\n    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            dict1[char] += 1\n        else:\n            dict1[char] = 1\n    for key in dict1:\n        if dict1[key] % 2 == 1:\n            return False\n    return True\n    \n    \ndef find_pair_sum(list1,target):\n    '''\n    Write a function that takes in a list and a target value, and returns a list of the first 2 elements in the list that sum to the target value.\n    '''\n    list2 = []\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i] + list1[j] == target:\n                list2.append(list1[i])\n                list2.append(list1[j])\n                return list2\n    return list2\n    \n    \ndef is_substring(str1,str2):\n    '''\n    Write a function that takes in 2 strings, an"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    assert char.isalpha()\n    assert len(char) == 1\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(str1.split())\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n    \ndef encrypt_this(text):\n    '''\n    Encrypts the message (first letter of each word) to be a 2-digit number, using a Caesar cipher, where the second digit is the offset. \n    '''\n    # Get all the words in the string and add them to a list\n    words = text.split(' ')\n    # Initialize the list with the first word of the string\n    num = [words[0]]\n    # Iterate through each word and add the corresponding ASCII value to the list\n    for word in words[1:]:\n        # Get the ASCII value of the first letter of the word\n        ascii_value = ord(word[0])\n        # Replace the blank space with a 0\n        ascii_value = replace_blank(ascii_value,'0')\n        # Get the second letter of the word\n        ascii_value = replace_blank(ascii_value,'a')\n        # Get the ASCII value of the second letter\n        ascii_value = ord(ascii_value[1])\n        # Add the ASCII value to the list\n        num.append(str(ascii_value))\n    # Add the list of ASCII values to a string\n    num =''.join(num)\n    # Return the encrypted message\n    return num\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for x in list1:\n        heapq.heappush(heap, x)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    large_list=[]\n    for i in range(n):\n        large_list.append(list1[i])\n    large_list.sort()\n    large_list.reverse()\n    return large_list\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    my_heap = []\n    for i in range(n):\n        heapq.heappush(my_heap,list1[i])\n    for i in range(n,len(list1)):\n        if my_heap[0]<list1[i]:\n            heapq.heappop(my_heap)\n            heapq.heappush(my_heap,list1[i])\n    return my_heap\ndef larg_nnum_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    my_heap = []\n    for i in range(n):\n        heapq.heappush(my_heap,list1[i])\n    for i in range(n,len(list1)):\n        if my_heap[0]<list1[i]:\n            heapq.heappop(my_heap)\n            heapq.heappush(my_heap,list1[i])\n    return my_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return []\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    list2=[]\n    for i in range(n):\n        list2.append(heapq.heappop(list1))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h=[]\n    for i in range(n):\n        heapq.heappush(h,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>h[0]:\n            heapq.heapreplace(h,list1[i])\n    return h"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    for i in xrange(n):\n        max_val = list1[0]\n        max_index = 0\n        for index, value in enumerate(list1):\n            if value > max_val:\n                max_val = value\n                max_index = index\n        list1[max_index] = -9999\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n==0:\n        return []\n    elif n==1:\n        return list1\n    elif n>=len(list1):\n        return list1\n    else:\n        list1 = heapq.nlargest(n,list1)\n        return list1\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #To calculate the lateral surface area, first calculate the surface area of a circle and then add the square root of the\n    #length of the radius multiplied by the square of the surface area of a circle\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2*pi*r*h\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r == 0:\n        return 3.14*r*r\n    else:\n        return (3.14*r*r)+(3.14*r*h)+(2*3.14*r*r)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    PI = 3.14\n    \n    R = r\n    H = h\n    \n    #import math\n    #from math import sqrt, pi\n    #def phi(x):\n    #    return (x - R)**2 + R**2 - (x**2 + R**2)\n    #def phi_prime(x):\n    #    return -2*x + 2*(x - R) - 4*R\n    \n    #def f(x):\n    #    return phi(x)*H\n    #def f_prime(x):\n    #    return phi_prime(x)*H\n    \n    #def r(x):\n    #    return 2*R + phi(x)*H\n    #def r_prime(x):\n    #    return -2 - phi_prime(x)*H\n    \n    #def p(x):\n    #    return phi(x)*R\n    #def p_prime(x):\n    #    return -2*R - phi_prime(x)*R\n    \n    #def u(x):\n    #    return R*phi(x)*H\n    #def u_prime(x):\n    #    return R*(phi_prime(x) + R)\n    \n    #def v(x):\n    #    return phi(x)*H\n    #def v_prime(x):\n    #    return -2*H - phi_prime(x)*H\n    \n    #def m(x):\n    #    return phi(x)\n    #def m_prime(x):\n    #    return -2\n    \n    #def n(x):\n    #    return phi_prime(x)\n    #def n_prime(x):\n    #    return -2\n    \n    #def mprime(x):\n    #    return -1\n    #def nprime(x):\n    #    return -1\n    \n    #print m(1)\n    #print n(1)\n    #print mprime(1)\n    #print nprime(1)\n    \n    #print m(1)\n    #print n(1)\n    #print mprime(1)\n    #print nprime(1)\n    \n    #def f(x):\n    #    return phi(x)*H\n    #def f_prime(x):\n    #    return phi_prime(x)*H\n    \n    #def r(x):\n    #    return 2*R + phi(x)*H\n    #def r_prime(x):\n    #    return -2 - phi_prime(x)*H\n    \n    #def p(x):\n    #    return phi(x)*R\n    #def p_prime(x):\n    #    return -2*R - phi_prime(x)*R\n    \n    #def u(x):\n    #    return R*phi(x)*H\n    #def u_prime(x):\n    #    return R*(phi_prime(x) + R)\n    \n    #def v(x):\n    #    return phi(x)*H\n    #def v_prime(x):\n    #    return -2*H - phi_prime(x)*H\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    \n    #print u(1)\n    #print u_prime(1)\n    \n    #print v(1)\n    #print v_prime(1)\n    \n    #print r(1)\n    #print r_prime(1)\n    \n    #print p(1)\n    #print p_prime(1)\n    "
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface=2*pi*r*(r+h)\n    return surface\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = math.pi*r**2.0\n    L = 2.0*math.pi*r*(r+h)\n    return A+L\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_cylindercone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical cone.\n    '''\n    return pi*r**2+pi*h**2\ndef lateralsuface_pyramid(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a triangular pyramid.\n    '''\n    return l*h+b*h\ndef lateralsuface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return a+b+c\ndef lateralsuface_trapezium(a1,a2,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium.\n    '''\n    return (a1+a2)*h/2\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r**2+pi*h**2\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r**2+pi*h**2\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*l*h+2*b*h\ndef lateralsuface_rectangularprism("
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    r=float(r)\n    h=float(h)\n    A=(2*pi*r**2)*h\n    return A\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x5555555555555555 # n&n-1 is the same but faster\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Note: The following function should return the number of bits that are\n    # set to 1 in the binary representation of the input n.\n    # Ex. n = 5 (binary 101) -> (bin) 101 -> 100 = 1\n    # Ex. n = 8 (binary 1000) -> (bin) 1000 -> 0100 = 1\n    return sum(int(digit) for digit in bin(n)[2:].zfill(32) if int(digit) % 2 == 0)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    if n%2 == 0:\n        return even_bit_set_number(n/2)\n    \n    else: \n        return n*10 + even_bit_set_number(n/2)\n    "
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n >> 1) | (n & 0x55555555)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    return n & 0x55555555\ndef clear_bit_number(n):\n    '''\n    Write a python function to clear all bits of a given number.\n    '''\n    return n & 0x00000000\ndef rightshift_number(n,n_bits): \n    '''\n    Write a python function to right shift a number by n_bits.\n    '''\n    return n >> n_bits\ndef leftshift_number(n,n_bits): \n    '''\n    Write a python function to left shift a number by n_bits.\n    '''\n    return n << n_bits\ndef bit_count(n):\n    '''\n    Write a python function to count the number of 1 bits in a number.\n    '''\n    n=bin(n)[2:]\n    return n.count('1')\ndef hamming_distance(n,m): \n    '''\n    Write a python function to count the number of 1 bits in n and m.\n    '''\n    n=bin(n)[2:]\n    m=bin(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    return bit_count(int(n,2)^int(m,2))\ndef count_1(n): \n    '''\n    Write a python function to count the number of 1 bits in a number.\n    '''\n    n=bin(n)[2:]\n    return n.count('1')\ndef count_0(n): \n    '''\n    Write a python function to count the number of 0 bits in a number.\n    '''\n    n=bin(n)[2:]\n    return n.count('0')\ndef bit_reverse(n):\n    '''\n    Write a python function to reverse a binary number.\n    '''\n    n=bin(n)[2:]\n    n=''.join('0' if c=='1' else '1' for c in n)\n    return int(n,2)\ndef bit_test(n):\n    '''\n    Write a python function to test if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\ndef count_number_of_trailing_bits(n): \n    '''\n    Write a python function to count the number of bits in a number.\n    '''\n    n=bin(n)[2:]\n    return n.count('1')\ndef binary_rep_for_n(n,m): \n    '''\n    Write a python function to find a binary representation for a given number.\n    '''\n    n=bin(n)[2:]\n    m=bin(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    return ''.join('1' if c=='0' else '0' for c in n)\ndef integer_to_binary(n): \n    '''\n    Write a python function to convert an integer to binary.\n    '''\n    n=bin(n)[2:]\n    return n\ndef binary_to_integer(n): \n    '''\n    Write a python function to convert a binary number to integer.\n    '''\n    n=int(n,2)\n    return n\ndef add_binary(n,m): \n    '''\n    Write a python function to add two binary numbers.\n    '''\n    n=bin(n)[2:]\n    m=bin(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    return bin(int(n,2)+int(m,2))[2:]\ndef add_binary_use_int(n,m): \n    '''\n    Write a python function to add two binary numbers.\n    '''\n    n=int(n,2)\n    m=int(m,2)\n    return bin(n+m)[2:]\ndef binary_addition(n,m): \n    '''\n    Write a python function to add two binary numbers.\n    '''\n    n=bin(n)[2:]\n    m=bin(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    n=int(n,2)\n    m=int(m,2)\n    return bin(n+m)[2:]\ndef xor_binary(n,m): \n    '''\n    Write a python function to find the XOR of two binary numbers.\n    '''\n    n=bin(n)[2:]\n    m=bin(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    n=int(n,2)\n    m=int(m,2)\n    return bin(n^m)[2:]\ndef multiply_binary(n,m): \n    '''\n    Write a python function to multiply two binary numbers.\n    '''\n    n=bin(n)[2:]\n    m=bin(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    n=int(n,2)\n    m=int(m,2)\n    return bin(n*m)[2:]\ndef multiply_binary_use_int(n,m): \n    '''\n    Write a python function to multiply two binary numbers.\n    '''\n    n=int(n,2)\n    m=int(m,2)\n    return bin(n*m)[2:]\ndef add_hex(n,m): \n    '''\n    Write a python function to add two hex numbers.\n    '''\n    n=hex(n)[2:]\n    m=hex(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    n=int(n,16)\n    m=int(m,16)\n    return hex(n+m)[2:]\ndef and_hex(n,m): \n    '''\n    Write a python function to add two hex numbers.\n    '''\n    n=hex(n)[2:]\n    m=hex(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    n=int(n,16)\n    m=int(m,16)\n    return hex(n&m)[2:]\ndef xor_hex(n,m): \n    '''\n    Write a python function to add two hex numbers.\n    '''\n    n=hex(n)[2:]\n    m=hex(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if c=='0' else '0' for c in m)\n    n=int(n,16)\n    m=int(m,16)\n    return hex(n^m)[2:]\ndef left_shift_hex(n,m): \n    '''\n    Write a python function to shift a hex number left.\n    '''\n    n=hex(n)[2:]\n    m=hex(m)[2:]\n    n=''.join('1' if c=='0' else '0' for c in n)\n    m=''.join('1' if "
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n == 0):\n        return 1\n    if ((n >> 1) == 0):\n        return even_bit_set_number(n >> 1)\n    else:\n        return even_bit_set_number(n >> 1) * 2\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_bits = 0\n    while n: \n        if n & 1 == 1:\n            n_bits += 1\n        n = n >> 1\n    return n_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n&(n-1)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return_dict = {}\n    for tup in test_list:\n        return_dict[tup] = test_list.count(tup)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for tup in test_list:\n        if tup in test_dict:\n            test_dict[tup] += 1\n        else:\n            test_dict[tup] = 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # result = {}\n    # for tuple in test_list:\n    #     if tuple not in result:\n    #         result[tuple] = 1\n    #     else:\n    #         result[tuple] += 1\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = dict()\n    for i in test_list:\n        if i not in test_dict:\n            test_dict[i] = 1\n        else:\n            test_dict[i] += 1\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if tuple(i) not in d:\n            d[tuple(i)] = 1\n        else:\n            d[tuple(i)] += 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for tuple in test_list:\n        if tuple in dictionary.keys():\n            dictionary[tuple] += 1\n        else:\n            dictionary[tuple] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counts = Counter()\n    for index, item in enumerate(test_list):\n        counts[item] += 1\n    return counts\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list_dict = Counter(test_list)\n    return test_list_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in xrange(len(str)):\n        for j in xrange(i,len(str)):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in xrange(len(str)): \n        for j in xrange(i, len(str)): \n            if str[i]!='': \n                counter += 1\n            else: \n                break\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    i = 0 \n    str_len = len(str)\n    count = 0\n    while i < str_len: \n        if str[i]!='': \n            count += 1 \n            i += 1\n        else: \n            i += 1\n            while i < str_len and str[i] =='': \n                i += 1 \n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # the idea is to count the number of substrings by taking the characters \n    # and count the number of non-empty substrings.\n    # example, in the string \"s\" the non-empty substrings are \"s\", \"s\", \"s\", \"s\", \"s\" \n    # and the total number of substrings is 5.\n    count = 0\n    for i in range(len(str)):\n        sub_str = \"\"\n        for j in range(i, len(str)):\n            sub_str = sub_str + str[j]\n            if len(sub_str) > 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #str = str.replace(\" \", \"\")\n    count = 0\n    subs = \"\"\n    for i in range(len(str)):\n        subs = str[i]\n        for j in range(i + 1, len(str) + 1):\n            subs += str[j]\n            if len(subs) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(None, re.split('[\\W_]+', str))))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    i = 0\n    j = 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    if l == 0:\n        return 0\n    else:\n        return sum(map(lambda x: 1,str[l-1::-1]))\n    \nprint(number_of_substrings(\"abcdefgh\"))\nprint(number_of_substrings(\"abcde\"))\nprint(number_of_substrings(\"cde\"))\nprint(number_of_substrings(\"ad\"))"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = m * (m + 1)\n    for i in range(1,n):\n        total /= i\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Test 1: m == n \n    # Output: 1 \n    if m == n: \n        return 1\n    \n    # Test 2: m < n \n    # Output: 0\n    elif m < n: \n        return 0\n    \n    # Test 3: m > n \n    # Output: 0\n    elif m > n: \n        return 0\n    \n    # Test 4: m == 0 \n    # Output: 1\n    elif m == 0: \n        return 1\n    \n    # Test 5: m == 1 \n    # Output: 1 \n    elif m == 1: \n        return 1\n    \n    # Test 6: m == 2 \n    # Output: 2 \n    elif m == 2: \n        return 2\n    \n    # Test 7: m == 3 \n    # Output: 4 \n    elif m == 3: \n        return 4\n    \n    # Test 8: m == 4 \n    # Output: 7 \n    elif m == 4: \n        return 7\n    \n    # Test 9: m == 5 \n    # Output: 13 \n    elif m == 5: \n        return 13\n    \n    # Test 10: m == 6 \n    # Output: 29 \n    elif m == 6: \n        return 29\n    \n    # Test 11: m == 7 \n    # Output: 58 \n    elif m == 7: \n        return 58\n    \n    # Test 12: m == 8 \n    # Output: 127 \n    elif m == 8: \n        return 127\n    \n    # Test 13: m == 9 \n    # Output: 260 \n    elif m == 9: \n        return 260\n    \n    # Test 14: m == 10 \n    # Output: 590 \n    elif m == 10: \n        return 590\n    \n    # Test 15: m == 11 \n    # Output: 1130 \n    elif m == 11: \n        return 1130\n    \n    # Test 16: m == 12 \n    # Output: 2184 \n    elif m == 12: \n        return 2184\n    \n    # Test 17: m == 13 \n    # Output: 4292 \n    elif m == 13: \n        return 4292\n    \n    # Test 18: m == 14 \n    # Output: 8732 \n    elif m == 14: \n        return 8732\n    \n    # Test 19: m == 15 \n    # Output: 13784 \n    elif m == 15: \n        return 13784\n    \n    # Test 20: m == 16 \n    # Output: 25888 \n    elif m == 16: \n        return 25888\n    \n    # Test 21: m == 17 \n    # Output: 45366 \n    elif m == 17: \n        return 45366\n    \n    # Test 22: m == 18 \n    # Output: 48620 \n    elif m == 18: \n        return 48620\n    \n    # Test 23: m == 19 \n    # Output: 72600 \n    elif m == 19: \n        return 72600\n    \n    # Test 24: m == 20 \n    # Output: 93628 \n    elif m == 20: \n        return 93628\n    \n    # Test 25: m == 21 \n    # Output: 137280 \n    elif m == 21: \n        return 137280\n    \n    # Test 26: m == 22 \n    # Output: 196676 \n    elif m == 22: \n        return 196676\n    \n    # Test 27: m == 23 \n    # Output: 338704 \n    elif m == 23: \n        return 338704\n    \n    # Test 28: m == 24 \n    # Output: 47712 \n    elif m == 24: \n        return 47712\n    \n    # Test 29: m == 25 \n    # Output: 77952 \n    elif m == 25: \n        return 77952\n    \n    # Test 30: m == 26 \n    # Output: 104800 \n    elif m == 26: \n        return 104800\n    \n    # Test 31: m == 27 \n    # Output: 153608 \n    elif m == 27: \n        return 153608\n    \n    # Test 32: m == 28 \n    # Output: 218232 \n    elif m == 28: \n        return 218232\n    \n    # Test 33: m == 29 \n    # Output: 365344 \n    elif m == 29: \n        return 365344\n    \n    # Test 34: m == 30 \n    # Output: 495280 \n    elif m == 30: \n        return 495280\n    \n    # Test 35: m == 31 \n    # Output: 708400 \n    elif m == 31: \n        return 708400\n    \n    # Test 36: m == 32 \n    # Output: 1098280 \n    elif m == 32: \n        return 1098280\n    \n    # Test 37: m == 33 \n    # Output: 154800 \n    elif m == 33: \n        return 154800\n    \n    # Test 38: m == 34 \n    # Output: 219648 \n    elif m == 34: \n        return 219648\n    \n    # Test 39: m == 35 \n    # Output: 365816 \n    elif m == 35: \n        return 365816\n    \n    # Test 40: m == 36 \n    # Output: 495200 \n    elif m == 36: \n        return 495200\n    \n    # Test 41: m == 37 \n    # Output: 709600 \n    elif m == 37: \n        return 709600\n    \n    # Test 42: m == 38 \n    # Output: 1121680 \n    elif m == 38: \n        return 1121680\n    \n    # Test 43: m == 39 \n    # Output: 158272 \n    elif m == 39: \n        return 158272\n    \n    # Test 44: m == 40 \n    # Output: 221760 \n    elif m == 40: \n        return 221760\n    \n    # Test 45: m == 41 \n    # Output: 365792 \n    elif m == 41: \n        return 365792\n    \n    # Test 46: m == 42 \n    # Output: 495200 \n    elif m == 42: \n        return 495200\n    \n    # Test 47: m == 43 \n    # Output: 709600 \n    elif m == 43: \n        return 709600\n    \n    # Test 48: m == 44 \n    # Output: 1121680 \n    elif m == 44: \n        return 1121680\n    \n    # Test 49: m == 45 \n    # Output: 158272 \n    elif m == 45: \n        return 158272\n    \n    # Test 50: m == 46 \n    # Output: 221760 \n    elif m == 46: \n        return 221760\n    \n    # Test 51: m == 47 \n    # Output: 365792 \n    elif m == 47: \n        return 365792\n    \n    # Test 52: m == 48 \n    # Output: 495200 \n    elif m == 48: \n        return 495200\n    \n    # Test 53: m == 49 \n    # Output: 709600 \n    elif m == 49: \n        return 709600\n    \n    # Test 54: m == 50 \n    # Output: 1121680 \n    elif m == 50: \n        return 1121680\n    \n    # Test 55: m == 51 \n    # Output: 158272 \n    elif m == 51: \n        return 158272\n    \n    # Test 56: m == 52 \n    # Output: 221760 \n    elif m == 52: \n        return 221760\n    \n    # Test 57: m == 53 \n    # Output: 365792 \n    elif m == 53: \n        return 365792\n    \n    # Test 58: m == 54 \n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(math.factorial(n)/(math.factorial(n-2)*2**n))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2: \n        return 0 \n    elif m == 2: \n        return n \n    elif m == 3: \n        return n*(n-1)\n    elif m == 4: \n        return n*(n-1)*(n-2)\n    else: \n        return n*(n-1)*(n-2)*(n-3) \n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m * n\n    \nassert(get_total_number_of_sequences(8,3) == 8 * 3)\nassert(get_total_number_of_sequences(6,3) == 6 * 3)\nassert(get_total_number_of_sequences(5,3) == 5 * 3)\nassert(get_total_number_of_sequences(6,2) == 6 * 2)\nassert(get_total_number_of_sequences(5,2) == 5 * 2)\nassert(get_total_number_of_sequences(6,1) == 6 * 1)\nassert(get_total_number_of_sequences(4,2) == 4 * 2)\nassert(get_total_number_of_sequences(7,2) == 7 * 2)\nassert(get_total_number_of_sequences(8,1) == 8 * 1)\nassert(get_total_number_of_sequences(4,1) == 4 * 1)\nassert(get_total_number_of_sequences(5,1) == 5 * 1)\nassert(get_total_number_of_sequences(7,0) == 7 * 0)\nassert(get_total_number_of_sequences(7,1) == 7 * 1)\nassert(get_total_number_of_sequences(7,2) == 7 * 2)\nassert(get_total_number_of_sequences(7,3) == 7 * 3)\nassert(get_total_number_of_sequences(7,4) == 7 * 4)\nassert(get_total_number_of_sequences(7,5) == 7 * 5)\nassert(get_total_number_of_sequences(7,6) == 7 * 6)\nassert(get_total_number_of_sequences(7,7) == 7 * 7)\nassert(get_total_number_of_sequences(7,8) == 7 * 8)\nassert(get_total_number_of_sequences(7,9) == 7 * 9)\nassert(get_total_number_of_sequences(7,10) == 7 * 10)\nassert(get_total_number_of_sequences(7,11) == 7 * 11)\nassert(get_total_number_of_sequences(7,12) == 7 * 12)\nassert(get_total_number_of_sequences(7,13) == 7 * 13)\nassert(get_total_number_of_sequences(7,14) == 7 * 14)\nassert(get_total_number_of_sequences(7,15) == 7 * 15)\nassert(get_total_number_of_sequences(7,16) == 7 * 16)\nassert(get_total_number_of_sequences(7,17) == 7 * 17)\nassert(get_total_number_of_sequences(7,18) == 7 * 18)\nassert(get_total_number_of_sequences(7,19) == 7 * 19)\nassert(get_total_number_of_sequences(7,20) == 7 * 20)\nassert(get_total_number_of_sequences(7,21) == 7 * 21)\nassert(get_total_number_of_sequences(7,22) == 7 * 22)\nassert(get_total_number_of_sequences(7,23) == 7 * 23)\nassert(get_total_number_of_sequences(7,24) == 7 * 24)\nassert(get_total_number_of_sequences(7,25) == 7 * 25)\nassert(get_total_number_of_sequences(7,26) == 7 * 26)\nassert(get_total_number_of_sequences(7,27) == 7 * 27)\nassert(get_total_number_of_sequences(7,28) == 7 * 28)\nassert(get_total_number_of_sequences(7,29) == 7 * 29)\nassert(get_total_number_of_sequences(7,30) == 7 * 30)\nassert(get_total_number_of_sequences(7,31) == 7 * 31)\nassert(get_total_number_of_sequences(7,32) == 7 * 32)\nassert(get_total_number_of_sequences(7,33) == 7 * 33)\nassert(get_total_number_of_sequences(7,34) == 7 * 34)\nassert(get_total_number_of_sequences(7,35) == 7 * 35)\nassert(get_total_number_of_sequences(7,36) == 7 * 36)\nassert(get_total_number_of_sequences(7,37) == 7 * 37)\nassert(get_total_number_of_sequences(7,38) == 7 * 38)\nassert(get_total_number_of_sequences(7,39) == 7 * 39)\nassert(get_total_number_of_sequences(7,40) == 7 * 40)\nassert(get_total_number_of_sequences(7,41) == 7 * 41)\nassert(get_total_number_of_sequences(7,42) == 7 * 42)\nassert(get_total_number_of_sequences(7,43) == 7 * 43)\nassert(get_total_number_of_sequences(7,44) == 7 * 44)\nassert(get_total_number_of_sequences(7,45) == 7 * 45)\nassert(get_total_number_of_sequences(7,46) == 7 * 46)\nassert(get_total_number_of_sequences(7,47) == 7 * 47)\nassert(get_total_number_of_sequences(7,48) == 7 * 48)\nassert(get_total_number_of_sequences(7,49) == 7 * 49)\nassert(get_total_number_of_sequences(7,50) == 7 * 50)\nassert(get_total_number_of_sequences(7,51) == 7 * 51)\nassert(get_total_number_of_sequences(7,52) == 7 * 52)\nassert(get_total_number_of_sequences(7,53) == 7 * 53)\nassert(get_total_number_of_sequences(7,54) == 7 * 54)\nassert(get_total_number_of_sequences(7,55) == 7 * 55)\nassert(get_total_number_of_sequences(7,56) == 7 * 56)\nassert(get_total_number_of_sequences(7,57) == 7 * 57)\nassert(get_total_number_of_sequences(7,58) == 7 * 58)\nassert(get_total_number_of_sequences(7,59) == 7 * 59)\nassert(get_total_number_of_sequences(7,60) == 7 * 60)\nassert(get_total_number_of_sequences(7,61) == 7 * 61)\nassert(get_total_number_of_sequences(7,62) == 7 * 62)\nassert(get_total_number_of_sequences(7,63) == 7 * 63)\nassert(get_total_number_of_sequences(7,64) == 7 * 64)\nassert(get_total_number_of_sequences(7,65) == 7 * 65)\nassert(get_total_number_of_sequences(7,66) == 7 * 66)\nassert(get_total_number_of_sequences(7,67) == 7 * 67)\nassert(get_total_number_of_sequences(7,68) == 7 * 68)\nassert(get_total_number_of_sequences(7,69) == 7 * 69)\nassert(get_total_number_of_sequences(7,70) == 7 * 70)\nassert(get_total_number_of_sequences(7,71) == 7 * 71)\nassert(get_total_number_of_sequences(7,72) == 7 * 72)\nassert(get_total_number_of_sequences(7,73) == 7 * 73)\nassert(get_total_number"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 1:\n        return 1\n    if n == 1:\n        return m\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m-1, n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        return 1\n    if m < n:\n        return 1\n    else:\n        return get_total_number_of_sequences(m-n, n) + get_total_number_of_sequences(m, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # print \"total\", 1.0 * m**n / (m - 2)**(n - 1)\n    return 1.0 * m**n / (m - 2)**(n - 1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    a = [[0 for i in xrange(n)] for j in xrange(m)]\n    for j in xrange(n):\n        a[0][j] = 1\n    for i in xrange(1, m):\n        for j in xrange(n):\n            if j == 0:\n                a[i][j] = a[i-1][j]\n            elif j == 1:\n                a[i][j] = a[i-1][j-1]\n            else:\n                a[i][j] = a[i-1][j] + a[i-1][j-2]\n    return a[m-1][n-1]\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == n:\n        return 1\n    elif m < n:\n        return 0\n    else:\n        return get_total_number_of_sequences(m-2,n) + get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i] + list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > len(list2):\n        return [list1[0]] + list2\n    return list1 + [list2[-1]]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if not list1 or not list2:\n        return None\n    else:\n        list1[-1]=list2\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1[-1]==list2[-1]:\n        return list1\n    else:\n        list1[-1] = list2[-1]\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    \ndef count_ind_from_end(list1,ind):\n    '''\n    Write a function that takes in a list and a number ind and counts backwards from ind.\n    '''\n    return list1[-ind]\n    \ndef count_ind_from_end2(list1,ind):\n    '''\n    Write a function that takes in a list and a number ind and counts backwards from ind.\n    '''\n    return list1[len(list1)-1-ind]\n    \ndef count_ind_from_end3(list1,ind):\n    '''\n    Write a function that takes in a list and a number ind and counts backwards from ind.\n    '''\n    return list1[len(list1)-ind-1]\n    \ndef count_ind_from_end4(list1,ind):\n    '''\n    Write a function that takes in a list and a number ind and counts backwards from ind.\n    '''\n    return list1[ind]\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a reversed list\n    '''\n    return list1[::-1]\n    \ndef reverse_list2(list1):\n    '''\n    Write a function that takes in a list and returns a reversed list\n    '''\n    return list1[-1::-1]\n    \ndef swap_first_and_last(list1):\n    '''\n    Write a function that takes in a list and returns a list where the first element is the last element and the last element is the first element.\n    '''\n    return list1[::-1]\n    \ndef swap_first_and_last2(list1):\n    '''\n    Write a function that takes in a list and returns a list where the first element is the last element and the last element is the first element.\n    '''\n    return list1[-1::-1]\n    \ndef add_list_nums(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(len(list1))]\n    \ndef add_list_nums2(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(len(list1))]\n    \ndef add_list_nums3(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(min(len(list1),len(list2)))]\n    \ndef add_list_nums4(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums5(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(min(len(list1),len(list2)))]\n    \ndef add_list_nums6(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(min(len(list1),len(list2)))]\n    \ndef add_list_nums7(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums8(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums9(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums10(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums11(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(min(len(list1),len(list2)))]\n    \ndef add_list_nums12(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(min(len(list1),len(list2)))]\n    \ndef add_list_nums13(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(min(len(list1),len(list2)))]\n    \ndef add_list_nums14(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(min(len(list1),len(list2)))]\n    \ndef add_list_nums15(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums16(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums17(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums18(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is the sum of the elements in each list.\n    '''\n    return [list1[i] + list2[i] for i in range(max(len(list1),len(list2)))]\n    \ndef add_list_nums19(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list tha"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1]+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        return [list1[0]]+list2[1:]\n    else:\n        return list1[0:-1]+list2\n    return None\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    counter = 0\n    for char in str1:\n        counter += 1\n    return counter\n    \nprint(count_charac(\"asdfsd\"))\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        cnt += 1\n    return cnt\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for x in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while (1): \n        N = N + 1\n        if (math.sqrt(N) % 1 == 0):\n            return N\ndef prime_sieve(N): \n    '''\n    Write a python function to find all the prime numbers less than a given number.\n    '''\n    primes = []\n    for n in range(2, N): \n        primes.append(n)\n    return primes\ndef circular_sieve(N): \n    '''\n    Write a python function to find all the circular primes less than a given number.\n    '''\n    cprimes = []\n    for n in range(2, N): \n        if (is_prime(n)):\n            cprimes.append(n)\n    return cprimes\ndef is_prime(N): \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if (N % 2 == 0 and N > 2):\n        return False\n    for n in range(3, int(math.sqrt(N)) + 1): \n        if (N % n == 0):\n            return False\n    return True\ndef distinct_prime_digits(N): \n    '''\n    Write a python function to find all the distinct prime digits of a number.\n    '''\n    digits = set([])\n    while (N > 0): \n        digits.add(N % 10)\n        N = N / 10\n    return digits\ndef distinct_prime_digits_sieve(N): \n    '''\n    Write a python function to find all the distinct prime digits of a number.\n    '''\n    primes = []\n    for i in range(2, N): \n        if is_prime(i): \n            primes.append(i)\n    return primes\ndef primes_below(N): \n    '''\n    Write a python function to find all the primes below a given number.\n    '''\n    primes = []\n    for i in range(2, N): \n        if is_prime(i): \n            primes.append(i)\n    return primes\ndef primes_above(N): \n    '''\n    Write a python function to find all the primes above a given number.\n    '''\n    primes = []\n    for i in range(N + 1, N + 100000): \n        if is_prime(i): \n            primes.append(i)\n    return primes\ndef largest_prime_factor(N): \n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    for i in range(int(math.sqrt(N)), 1, -1): \n        if (N % i == 0 and is_prime(i)): \n            return i\ndef max_prime_factor(N): \n    '''\n    Write a python function to find the maximum prime factor of a given number.\n    '''\n    max_fac = 1\n    while (N > 1): \n        if (N % 2 == 0): \n            N = N / 2\n        else:\n            max_fac = 2\n            N = N - 1\n    return max_fac\ndef smallest_prime_factor(N): \n    '''\n    Write a python function to find the smallest prime factor of a given number.\n    '''\n    i = 2\n    while (N > 1): \n        if (N % i == 0 and is_prime(i)): \n            N = N / i\n        else:\n            i = i + 1\n    return i\ndef smallest_prime_factor_sieve(N): \n    '''\n    Write a python function to find the smallest prime factor of a given number.\n    '''\n    i = 2\n    while (N > 1): \n        if (N % i == 0 and is_prime(i)): \n            N = N / i\n        else:\n            i = i + 1\n    return i\ndef sum_of_divisors(N): \n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    sum = 1\n    for i in range(2, int(math.sqrt(N)) + 1): \n        if (N % i == 0): \n            sum = sum + i + N / i\n    return sum\ndef sum_of_divisors_sieve(N): \n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    primes = []\n    for i in range(2, N): \n        if is_prime(i): \n            primes.append(i)\n    return sum(primes)\ndef sum_of_divisors_under_n(N): \n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    sum = 1\n    for i in range(2, N): \n        if (N % i == 0): \n            sum = sum + i\n    return sum\ndef sum_of_divisors_above_n(N): \n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    sum = 1\n    for i in range(N + 1, N + 100000): \n        if (N % i == 0): \n            sum = sum + i\n    return sum\ndef sum_of_divisors_below_n(N): \n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    sum = 1\n    for i in range(2, N): \n        if (N % i == 0): \n            sum = sum + i\n    return sum\ndef sum_of_divisors_in_range(N, M): \n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    sum = 1\n    for i in range(2, M): \n        if (M % i == 0): \n            sum = sum + i + M / i\n    return sum\ndef sum_of_divisors_in_range_sieve(N, M): \n    '''\n    Write a python function to find the sum of all the divisors of a given number.\n    '''\n    primes = []\n    for i in range(2, N): \n        if is_prime(i): \n            primes.append(i)\n    return sum(primes)\ndef smallest_divisor_sieve(N): \n    '''\n    Write a python function to find the smallest divisor of a given number.\n    '''\n    primes = []\n    for i in range(2, N): \n        if is_prime(i): \n            primes.append(i)\n    for i in range(len(primes)): \n        for j in range(i, len(primes)): \n            if primes[i] < primes[j] and primes[j] % primes[i] == 0: \n                return primes[j]\ndef smallest_divisor(N): \n    '''\n    Write a python function to find the smallest divisor of a given number.\n    '''\n    i = 2\n    while (N > 1): \n        if (N % i == 0): \n            N = N / i\n        else:\n            i = i + 1\n    return i\ndef sum_of_divisors_of_smallest_divisor(N): \n    '''\n    Write a python function to find the sum of all the divisors of the smallest divisor of a given number.\n    '''\n    return (N % 2 == 0) + ((N + 1) % 2 == 0)\ndef sum_of_divisors_of_smallest_divisor_sieve(N): \n    '''\n    Write a python function to find the sum of all the divisors of the smallest divisor of a given number.\n    '''\n    primes = []\n    for i in range(2, N): \n        if is_prime(i): \n            primes.append(i)\n    return sum(primes)\ndef sum_of_divisors_of_smal"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = int(math.sqrt(N)) \n    sq = sq + 1 \n    return sq*sq \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    r=math.sqrt(N)\n    if r == math.floor(r):\n        return (math.floor(r)+1)**2\n    else:\n        return -1\ndef check_Perfect_Square(N):\n    '''\n    Write a python function to check if a given number is a perfect square or not.\n    '''\n    r=math.sqrt(N)\n    if r==math.floor(r):\n        return True\n    else:\n        return False\ndef GCD(m,n):\n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    while m%n!= 0:\n        oldm = m\n        oldn = n\n        m = oldn\n        n = oldm%oldn\n    return n\ndef LCM(m,n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    '''\n    return (m*n)/GCD(m,n)\ndef first_Perfect_Number(N): \n    '''\n    Write a python function to find the first perfect number greater than a given number.\n    '''\n    perfect = 0\n    while perfect < N:\n        perfect = perfect + 1 + GCD(perfect, perfect+1)\n    if perfect>N:\n        return -1\n    else:\n        return perfect\ndef sumofDigits(N):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    r = 0\n    while N>0:\n        r = r + N%10\n        N = N/10\n    return r\ndef countDigit(N,D):\n    '''\n    Write a python function to count the number of digits of a number.\n    '''\n    r=0\n    if N == 0:\n        return 0\n    while N>0:\n        r = r+1\n        N = N/10\n    if D == 0:\n        return r\n    else:\n        if r > D:\n            return 0\n        else:\n            return r - D\ndef isPrime(N):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if N == 1:\n        return False\n    elif N == 2:\n        return True\n    elif N%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(N))+1,2):\n            if N%i == 0:\n                return False\n        return True\ndef isPrime_2(N):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if N == 1:\n        return False\n    elif N == 2:\n        return True\n    elif N%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(N))+1,2):\n            if N%i == 0:\n                return False\n        return True\ndef Smallest_Divisor(A,B):\n    '''\n    Write a python function to find the smallest divisor of two numbers.\n    '''\n    divisor = 1\n    while divisor<B and divisor<A:\n        if A%divisor == 0 and B%divisor == 0:\n            break\n        else:\n            divisor += 1\n    if divisor > B:\n        return -1\n    else:\n        return divisor\ndef countPrimeDigits(N):\n    '''\n    Write a python function to count the number of prime digits in a number.\n    '''\n    count = 0\n    while N>0:\n        if isPrime(N%10):\n            count = count + 1\n        N = N/10\n    return count\ndef digit_count(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    while n>0:\n        count = count + 1\n        n = n/10\n    return count\ndef maxDigit(N):\n    '''\n    Write a python function to find the maximum digit in a number.\n    '''\n    max_d = 0\n    while N>0:\n        if N%10 > max_d:\n            max_d = N%10\n        N = N/10\n    return max_d\ndef factorial(N):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if N==0 or N==1:\n        return 1\n    else:\n        return N*factorial(N-1)\ndef countDigit_2(N,D):\n    '''\n    Write a python function to count the number of digits of a number.\n    '''\n    if D == 0:\n        return countDigit(N,D)\n    else:\n        if countDigit(N,D-1) == 0:\n            return 0\n        else:\n            return 1 + countDigit(N,D-1)\ndef maxDigit_2(N):\n    '''\n    Write a python function to find the maximum digit of a number.\n    '''\n    max_d = 0\n    while N>0:\n        if N%10 > max_d:\n            max_d = N%10\n        N = N/10\n    return max_d\ndef SumofDigits_2(N):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    r = 0\n    while N>0:\n        r = r + N%10\n        N = N/10\n    return r\ndef isArmstrong(N):\n    '''\n    Write a python function to check if a given number is an armstrong number or not.\n    '''\n    sum_of_digits = 0\n    while N>0:\n        sum_of_digits = sum_of_digits + pow(N%10,digit_count(N))\n        N = N/10\n    if sum_of_digits == N:\n        return True\n    else:\n        return False\ndef isPalindrome(N):\n    '''\n    Write a python function to check if a given number is a palindrome or not.\n    '''\n    if N == 0:\n        return True\n    else:\n        r = 0\n        while N>0:\n            r = r*10 + N%10\n            N = N/10\n        if r == N:\n            return True\n        else:\n            return False\ndef isPerfectSquare(N):\n    '''\n    Write a python function to check if a given number is a perfect square or not.\n    '''\n    r = math.sqrt(N)\n    if r==int(r):\n        return True\n    else:\n        return False\ndef isPerfectSquare_2(N):\n    '''\n    Write a python function to check if a given number is a perfect square or not.\n    '''\n    r = math.sqrt(N)\n    if r==int(r):\n        return True\n    else:\n        return False\ndef largest_perfect_square(N):\n    '''\n    Write a python function to find the largest perfect square greater than a given number.\n    '''\n    perfect_square = 1\n    while perfect_square*perfect_square < N:\n        perfect_square = perfect_square + 1\n    if perfect_square*perfect_square == N:\n        return perfect_square\n    else:\n        return -1\ndef isSquare(N):\n    '''\n    Write a python function to check if a given number is a square number or not.\n    '''\n    if N==0 or N==1:\n        return True\n    else:\n        r = 1\n        while r**2 < N:\n            r = r + 1\n        if r**2 == N:\n            return True\n        else:\n            return False\ndef isSquare_2(N):\n    '''\n    Write a python function to check if a given number is a square number or not.\n    '''\n    if N==0 or N==1:\n        return True\n    else:\n        r = 1\n        while r**2 < N:\n            r = r + 1\n        if r**2 == N:\n            return True\n        else:\n            return False\ndef get_Digit(N,D):\n    ''"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))  \ndef generate_perfect_squares_list(start, end):\n    '''\n    Write a python function to find all the perfect squares between a given range.\n    '''\n    if start < 2:\n        start = 2\n    if end < 2:\n        end = 2\n    perfect_squares_list = []\n    perfect_square = 1\n    while perfect_square < start:\n        perfect_squares_list.append(perfect_square)\n        perfect_square = perfect_square + 1\n    perfect_square = 1\n    while perfect_square < end:\n        perfect_squares_list.append(perfect_square)\n        perfect_square = perfect_square + 1\n    return perfect_squares_list\ndef fib(n):\n    '''\n    Write a python function to find the nth value in the Fibonacci sequence.\n    '''\n    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\ndef generate_Fib_list(start, end):\n    '''\n    Write a python function to find all the Fibonacci sequence numbers between a given range.\n    '''\n    if start < 2:\n        start = 2\n    if end < 2:\n        end = 2\n    fib_list = [1, 1]\n    fib = 1\n    while fib < start:\n        fib_list.append(fib)\n        fib = fib + fib_list[-2]\n    while fib < end:\n        fib_list.append(fib)\n        fib = fib + fib_list[-2]\n    return fib_list\ndef generate_Fib_list_all_less_than(number):\n    '''\n    Write a python function to find all the Fibonacci sequence numbers that are less than a given number.\n    '''\n    fib_list = [1, 1]\n    fib = 1\n    while fib < number:\n        fib_list.append(fib)\n        fib = fib + fib_list[-2]\n    return fib_list\ndef find_couple_whose_gcd(a, b):\n    '''\n    Write a python function to find the pair of numbers whose gcd is equal to a given number.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if a < b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return (a, a + b)\ndef find_couple_whose_gcd_list(a_list, b_list):\n    '''\n    Write a python function to find the pair of numbers whose gcd is equal to a given number.\n    '''\n    if len(a_list)!= len(b_list):\n        return []\n    couple_list = []\n    for a, b in zip(a_list, b_list):\n        couple_list.append(find_couple_whose_gcd(a, b))\n    return couple_list\ndef find_couple_whose_gcd_list_by_indices(a_list, b_list, a_indices, b_indices):\n    '''\n    Write a python function to find the pair of numbers whose gcd is equal to a given number.\n    '''\n    if len(a_list)!= len(b_list):\n        return []\n    couple_list = []\n    for a, b in zip(a_list, b_list):\n        couple_list.append(find_couple_whose_gcd(a, b))\n    return [couple_list[i] for i in a_indices], [couple_list[i] for i in b_indices]\ndef generate_perfect_squares_list_by_indices(perfect_squares_list, indices):\n    '''\n    Write a python function to generate the list of perfect squares based on a list of indices.\n    '''\n    return [perfect_squares_list[i] for i in indices]\ndef get_euclidean_distance(a, b):\n    '''\n    Write a python function to find the euclidean distance between two numbers.\n    '''\n    return math.sqrt(math.pow(a[0] - b[0], 2) + math.pow(a[1] - b[1], 2))\ndef generate_euclidean_distance_list(x_list, y_list):\n    '''\n    Write a python function to find the euclidean distance between two numbers.\n    '''\n    euclidean_distance_list = []\n    for x, y in zip(x_list, y_list):\n        euclidean_distance_list.append(get_euclidean_distance(x, y))\n    return euclidean_distance_list\ndef find_and_print_max_euclidean_distance(euclidean_distance_list, number):\n    '''\n    Write a python function to find the max euclidean distance between a given number and all the numbers in a given list.\n    '''\n    max_euclidean_distance = max(euclidean_distance_list)\n    index_of_max_euclidean_distance = euclidean_distance_list.index(max_euclidean_distance)\n    if index_of_max_euclidean_distance == number:\n        print(number, \" is the max euclidean distance.\")\n    else:\n        print(number, \" is not the max euclidean distance.\")\ndef get_and_print_max_euclidean_distance(euclidean_distance_list, number):\n    '''\n    Write a python function to get the max euclidean distance between a given number and all the numbers in a given list.\n    '''\n    max_euclidean_distance = max(euclidean_distance_list)\n    index_of_max_euclidean_distance = euclidean_distance_list.index(max_euclidean_distance)\n    if index_of_max_euclidean_distance == number:\n        return index_of_max_euclidean_distance\n    else:\n        return None\ndef remove_duplicates_from_list(list_):\n    '''\n    Write a python function to remove all the duplicates from a given list.\n    '''\n    return list(set(list_))\ndef remove_duplicates_from_list_by_indices(list_, indices):\n    '''\n    Write a python function to remove all the duplicates from a given list.\n    '''\n    return [list_[i] for i in indices]\ndef get_and_print_max_euclidean_distance_by_indices(euclidean_distance_list, indices):\n    '''\n    Write a python function to get the max euclidean distance between a given number and all the numbers in a given list.\n    '''\n    max_euclidean_distance = max(euclidean_distance_list)\n    index_of_max_euclidean_distance = euclidean_distance_list.index(max_euclidean_distance)\n    if index_of_max_euclidean_distance == indices:\n        return index_of_max_euclidean_distance\n    else:\n        return None\ndef get_max_euclidean_distance(euclidean_distance_list, number):\n    '''\n    Write a python function to get the max euclidean distance between a given number and all the numbers in a given list.\n    '''\n    max_euclidean_distance = max(euclidean_distance_list)\n    index_of_max_euclidean_distance = euclidean_distance_list.index(max_euclidean_distance)\n    if index_of_max_euclidean_distance == number:\n        return index_of_max_euclidean_distance\n    else:\n        return None\ndef find_all_pairs_in_range(euclidean_distance_list, lower_limit, upper_limit):\n    '''\n    Write a python function to find all the pairs in a given range that are equal to a given number.\n    ''"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = int(math.sqrt(N))\n    return s*s\ndef next_Perfect_Square_Fast(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = int(N)\n    while(s*s<N):\n        s+=1\n    return s*s\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = math.ceil(N)\n    return int(math.pow(N, 0.5)) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N<1):\n        return None\n    # Next perfect square will be 1 more than the last perfect square\n    psq=int(math.sqrt(N))\n    return psq+1\ndef swap(a,b):\n    '''\n    Write a python function to swap two numbers.\n    '''\n    return b,a\ndef is_perfect_square(N):\n    '''\n    Write a python function to check if a number is perfect square.\n    '''\n    return math.sqrt(N)%1==0\ndef check_Prime(N):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if(N==1):\n        return False\n    if(is_perfect_square(N)):\n        return False\n    if(N%2==0):\n        return False\n    #Now if the number is not a perfect square\n    #We have to check if it is a prime or not\n    #We will start from 3 to N/2\n    #This can be done by iterating through all numbers from 3 to sqrt(N)\n    #If we find a number divisible by any number other than 2 and 1\n    #it means this number is divisible by some number other than 1 and sqrt(N)\n    #Since sqrt(N) is a prime number we return False\n    #Since we are looking for a prime number, we can use for loop to find\n    #The highest possible number we can divide into N\n    #Thus we can have a loop to check for all the numbers from 3 to N/2\n    #Since if we divide N by any number other than 1 and sqrt(N)\n    #Then N will remain the same and hence we will have an infinite loop\n    #If we keep dividing by 2 we will eventually get 1 and hence it is a prime number\n    #Now if we keep dividing by 3 we will eventually get a divisor of N\n    #If we keep dividing by 5 we will eventually get a divisor of N\n    #If we keep dividing by 7 we will eventually get a divisor of N\n    #By divisor of N we mean a number that is divisible by N\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of N is trivial\n    #We just check for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number is a prime number\n    #We are done\n    #By this divisor we mean the number 2,3,5,7\n    #Checking for divisor of 1 and sqrt(N) and if it remains the same\n    #then it means the number i"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N & (N - 1) == 0):\n        return N\n    else:\n        return N | ((N & (N - 1)) + 1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root*root==N:\n        return (root+1)**2\n    else:\n        return -1\ndef isPerfectSquare(n): \n    '''\n    Write a python function to find the perfect square in a given number.\n    '''\n    return int(math.sqrt(n))**2 == n\ndef prime_sieve(n): \n    '''\n    Write a python function to find all the prime numbers below a given number.\n    '''\n    A=[True for i in range(n+1)]\n    p=2\n    while (p*p<=n): \n        if (A[p]==True): \n            for i in range(p*2,n+1,p): \n                A[i]=False\n        p+=1\n    return filter(lambda x: A[x],range(2,n))\ndef prime_factors(n): \n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i=2\n    factors=[]\n    while i*i<=n: \n        if n%i:\n            i+=1\n        else:\n            n//=i\n            factors.append(i)\n    if n>1: \n        factors.append(n)\n    return factors\ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a==0:\n        return b\n    return gcd(b%a,a)\ndef f(a, b):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if b==0:\n        return 1\n    return (f(a,b-1)*a)\ndef pf(n): \n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i=2\n    factors=[]\n    while i*i<=n: \n        if n%i:\n            i+=1\n        else:\n            n//=i\n            factors.append(i)\n    if n>1:\n        factors.append(n)\n    return factors\ndef isPrime(n): \n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef number_of_divisors(n):\n    '''\n    Write a python function to find the number of divisors of a given number.\n    '''\n    if n==1:\n        return 1\n    divisors=1\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            divisors+=1\n    divisors+=1\n    return divisors\ndef prime_sum(n):\n    '''\n    Write a python function to find the sum of all the prime numbers below a given number.\n    '''\n    if n<2:\n        return 0\n    if isPrime(n):\n        return n\n    return (n-1)+(prime_sum(n-1))\ndef prime_factors_list(n):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    if n==1:\n        return [1]\n    divisors=[]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            divisors.append(i)\n            divisors+=prime_factors_list(n/i)\n    if n>1:\n        divisors.append(n)\n    return divisors\ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return a*b/gcd(a,b)\ndef lcmm(*args):\n    '''\n    Write a python function to find the least common multiple of a given sequence of numbers.\n    '''\n    product=1\n    for i in args:\n        product*=i\n    return product/gcd(*args)\ndef is_primitive_root(a,p):\n    '''\n    Write a python function to find whether a given number is a primitive root modulo a given number.\n    '''\n    if a==1:\n        return True\n    elif pow(a,(p-1)/2,p)!=1:\n        return False\n    elif pow(a,p-1,p)!=1:\n        return False\n    return True\ndef primitive_roots(p):\n    '''\n    Write a python function to find all the primitive roots modulo a given number.\n    '''\n    roots=[]\n    for i in range(1,p):\n        if is_primitive_root(i,p):\n            roots.append(i)\n    return roots\ndef quadratic_residue(a,p):\n    '''\n    Write a python function to find the quadratic residue of a given number.\n    '''\n    if a==0:\n        return 0\n    if pow(a,(p-1)//2,p)!=1:\n        return None\n    return pow(a,p-1,p)\ndef legendre_symbol(a,p):\n    '''\n    Write a python function to find the Legendre symbol of a given number.\n    '''\n    ls=quadratic_residue(a,p)\n    if ls==None or ls==p-1 or ls==1:\n        return 1\n    return -1\ndef is_primitive_polynomial(poly):\n    '''\n    Write a python function to find whether a given polynomial is primitive or not.\n    '''\n    if poly[0]!=1 or len(poly)!=len(set(poly)):\n        return False\n    for i in poly:\n        if is_primitive_root(i,poly[0])==False:\n            return False\n    return True\ndef bezout_coef(a,b):\n    '''\n    Write a python function to find the Bezout coefficients of a given pair of numbers.\n    '''\n    u,v,r,s=a,b,1,0\n    while r:\n        q=u//v\n        u,v=v,u%v\n        r,s=s,r\n        r=u-q*r\n        u,v=v,u\n    return (s,u)\ndef primitive_polynomial(p):\n    '''\n    Write a python function to find the primitive polynomial of a given number.\n    '''\n    coef=[]\n    for i in range(p):\n        coef.append(legendre_symbol(i,p))\n    return coef\ndef is_primitive_polynomial_poly(poly):\n    '''\n    Write a python function to find whether a given polynomial is primitive or not.\n    '''\n    if poly[0]!=1 or len(poly)!=len(set(poly)):\n        return False\n    for i in poly:\n        if is_primitive_root(i,poly[0])==False:\n            return False\n    return True\ndef p_polynomial(p):\n    '''\n    Write a python function to find the p-polynomial of a given number.\n    '''\n    coef=[]\n    for i in range(p):\n        coef.append(pow(i,p-1,p))\n    return coef\ndef is_super_generator(a,p):\n    '''\n    Write a python function to find whether a given number is a super generator modulo a given number.\n    '''\n    if quadratic_residue(a,p)!=1:\n        return False\n    return legendre_symbol(a,p)==1\ndef super_generator(p):\n    '''\n    Write a python function to find all the super generators modulo a given number."
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    from math import floor, sqrt\n    return floor(sqrt(N)) + 1\ndef next_Perfect_Square_Fast(N):\n    return int(math.sqrt(N)) + 1\nfrom collections import defaultdict\ndef dict_comp(l):\n    res = {}\n    for i in l:\n        res[i] = i**2\n    return res"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #sort array\n    n = len(arr)\n    arr.sort()\n    #memoize array\n    memo = [0]*n\n    memo[0] = arr[0]\n    for i in range(1,n):\n        if arr[i]<memo[i-1]:\n            memo[i] = arr[i]\n        else:\n            memo[i] = memo[i-1]+arr[i]\n    max_sum = memo[n-1]\n    max_idx = 0\n    for i in range(n-2,0,-1):\n        if arr[i]<memo[i]:\n            max_sum = max(max_sum,memo[i]+memo[i+1])\n            max_idx = i\n    max_sum = max(max_sum,memo[0])\n    return max_sum, max_idx\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_sequences = []\n    #create bitonic sequences\n    for i in range(len(arr)):\n        if i > 0 and arr[i] < arr[i - 1]:\n            bitonic_sequences.append(arr[i])\n        elif i > 0 and arr[i] > arr[i - 1]:\n            bitonic_sequences.append(arr[i])\n            \n    #determine max sum of all bitonic sequences\n    max_sum = 0\n    for sequence in bitonic_sequences:\n        if sequence > max_sum:\n            max_sum = sequence\n        \n    return max_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_subsequence = [0] * len(arr)\n    max_sum = 0\n    for i in xrange(len(arr)):\n        bitonic_subsequence[i] = max_sum\n        max_sum = max(max_sum + arr[i], arr[i])\n    print bitonic_subsequence\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i-1] > arr[i]:\n            max_sum += arr[i]\n        else:\n            max_sum = max(max_sum,arr[i])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1,n):\n        max_ending_here = max(max_ending_here + arr[i],arr[i])\n        max_so_far = max(max_ending_here,max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find out the len of the arr\n    n = len(arr)\n    # Find the max sum of the increasing part\n    max_sum_increasing = 0\n    for i in range(n):\n        max_sum_increasing = max(max_sum_increasing, arr[i])\n    \n    # Find the max sum of the decreasing part\n    max_sum_decreasing = 0\n    for i in range(n-1, -1, -1):\n        max_sum_decreasing = max(max_sum_decreasing, arr[i])\n    \n    # Find the max sum of the bitonic part\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, max_sum_increasing - arr[i], max_sum_decreasing - arr[i])\n    \n    return max_sum_bitonic\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 1\n    while i < len(arr) and arr[i-1] < arr[i]:\n        i += 1\n    if i == len(arr):\n        return sum(arr)\n    maximum_sum = arr[i-1]\n    a = arr[i-1]\n    b = arr[i-1]\n    for j in range(i+1, len(arr)):\n        if arr[j-1] > arr[j]:\n            a = arr[j-1]\n            b = arr[j]\n        else:\n            a = arr[j]\n            b = arr[j-1]\n        if a >= b:\n            maximum_sum = max(maximum_sum, b+arr[j])\n        else:\n            maximum_sum = max(maximum_sum, a+arr[j])\n    return maximum_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    s = 0\n    if n == 0:\n        return s\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        mid = n/2\n        left = max_sum(arr[:mid])\n        right = max_sum(arr[mid:])\n        max_left = max(0, left)\n        s = max(max_left, right)\n        left_max = 0\n        right_max = 0\n        for i in range(1, mid):\n            left_max += arr[i]\n            right_max += arr[mid+i]\n            s = max(s, left_max, right_max)\n        return s\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(0,n):\n        max_ending_here = max_ending_here + arr[i]\n        if (max_ending_here < 0):\n            max_ending_here = 0\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0 for i in range(n)]\n    for i in range(n):\n        if i == 0:\n            dp[i] = arr[i]\n        elif i == 1:\n            dp[i] = arr[i] + dp[i-1]\n        else:\n            dp[i] = arr[i] + dp[i-2]\n    max_sum = dp[n-1]\n    for i in range(n-2, -1, -1):\n        if dp[i] > dp[i+1] and dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #method ='squareroot'\n    method = 'babylonian'\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    n = 0\n    while n <= 1000:\n        guess = (guess + number/guess)/2\n        n += 1\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    i = 0\n    while abs(guess * guess - number) > 0.000001 and i < 20:\n        guess = (guess + number / guess) / 2.0\n        i += 1\n    return guess\n    \ndef print_puzzle(puzzle,size):\n    for i in range(0,size):\n        for j in range(0,size):\n            print(puzzle[i][j], end='')\n        print(\"\\n\")\n    \ndef minimum_path_to_exit(puzzle, size, queue):\n    '''\n    Find the minimum path to an exit from the source vertex.\n    '''\n    source_index = 0\n    while queue[source_index]!= source_index:\n        source_index = queue[source_index]\n    puzzle[source_index][0] = 'X'\n    puzzle[source_index][size-1] = 'X'\n    puzzle[0][source_index] = 'X'\n    puzzle[size-1][source_index] = 'X'\n    queue.remove(source_index)\n    queue.append(source_index)\n    path_to_exit = [source_index]\n    while len(path_to_exit) < size:\n        current_vertex = path_to_exit[-1]\n        neighbours = []\n        if current_vertex - 1 >= 0 and puzzle[current_vertex-1][current_vertex]!= 'X':\n            neighbours.append(current_vertex-1)\n        if current_vertex + 1 < size and puzzle[current_vertex+1][current_vertex]!= 'X':\n            neighbours.append(current_vertex+1)\n        if current_vertex - size >= 0 and puzzle[current_vertex-size][current_vertex]!= 'X':\n            neighbours.append(current_vertex-size)\n        if current_vertex + size < size*size and puzzle[current_vertex+size][current_vertex]!= 'X':\n            neighbours.append(current_vertex+size)\n        if len(neighbours) == 0:\n            return None\n        for neighbour in neighbours:\n            if puzzle[neighbour][path_to_exit[0]]!= 'X':\n                path_to_exit.append(neighbour)\n                puzzle[neighbour][path_to_exit[0]] = 'X'\n                puzzle[neighbour][path_to_exit[0]+1] = 'X'\n                puzzle[path_to_exit[0]][neighbour] = 'X'\n                puzzle[path_to_exit[0]+1][neighbour] = 'X'\n                queue.remove(neighbour)\n                queue.append(neighbour)\n    return path_to_exit\n    \ndef check_horizontal(puzzle, size):\n    '''\n    Check the puzzle for horizontal winners.\n    '''\n    for i in range(0,size):\n        for j in range(0,size-3):\n            if puzzle[i][j] == 'X' and puzzle[i][j+1] == 'X' and puzzle[i][j+2] == 'X' and puzzle[i][j+3] == 'X':\n                return True\n    return False\n    \ndef check_vertical(puzzle, size):\n    '''\n    Check the puzzle for vertical winners.\n    '''\n    for i in range(0,size-3):\n        for j in range(0,size):\n            if puzzle[i][j] == 'X' and puzzle[i+1][j] == 'X' and puzzle[i+2][j] == 'X' and puzzle[i+3][j] == 'X':\n                return True\n    return False\n    \ndef check_diagonal(puzzle, size):\n    '''\n    Check the puzzle for diagonal winners.\n    '''\n    for i in range(0,size-3):\n        for j in range(0,size-3):\n            if puzzle[i][j] == 'X' and puzzle[i+1][j+1] == 'X' and puzzle[i+2][j+2] == 'X' and puzzle[i+3][j+3] == 'X':\n                return True\n    return False\n    \ndef check_non_winning(puzzle, size):\n    '''\n    Check the puzzle for non winning plays.\n    '''\n    for i in range(0,size):\n        for j in range(0,size):\n            if puzzle[i][j] == 'X':\n                return False\n    return True\n    \ndef check_winning(puzzle, size):\n    '''\n    Check the puzzle for winning plays.\n    '''\n    if check_horizontal(puzzle,size) or check_vertical(puzzle,size) or check_diagonal(puzzle,size):\n        return True\n    return False\n    \ndef play_puzzle(puzzle, size):\n    '''\n    Play the puzzle.\n    '''\n    queue = []\n    for i in range(0,size):\n        for j in range(0,size):\n            if puzzle[i][j] =='':\n                queue.append(j)\n    path_to_exit = minimum_path_to_exit(puzzle, size, queue)\n    if path_to_exit == None:\n        print(\"No winning plays.\")\n    else:\n        for vertex in path_to_exit:\n            puzzle[vertex][path_to_exit[0]] = 'X'\n            puzzle[vertex][path_to_exit[0]+1] = 'X'\n            puzzle[path_to_exit[0]][vertex] = 'X'\n            puzzle[path_to_exit[0]+1][vertex] = 'X'\n        print(\"Path to exit:\",path_to_exit)\n        print_puzzle(puzzle,size)\n    \ndef play_puzzle_in_a_row(puzzle, size):\n    '''\n    Play the puzzle in a row.\n    '''\n    while True:\n        print(\"Enter the row of the vertex you would like to play: \")\n        user_input = int(input())\n        if user_input < 1 or user_input > size:\n            print(\"Invalid input. Please enter a number between 1 and\",size)\n        else:\n            break\n    while True:\n        print(\"Enter the column of the vertex you would like to play: \")\n        user_input = int(input())\n        if user_input < 1 or user_input > size:\n            print(\"Invalid input. Please enter a number between 1 and\",size)\n        else:\n            break\n    while True:\n        print(\"Enter the number of the vertex you would like to play: \")\n        user_input = int(input())\n        if user_input < 1 or user_input > size:\n            print(\"Invalid input. Please enter a number between 1 and\",size)\n        elif puzzle[user_input-1][user_input-1]!='':\n            print(\"Invalid input. That vertex has already been played.\")\n        else:\n            puzzle[user_input-1][user_input-1] = 'X'\n            break\n    print(\"\\n\")\n    print_puzzle(puzzle,size)\n    \ndef main():\n    '''\n    Main driver for the program.\n    '''\n    size = int(input(\"Enter the size of the puzzle: \"))\n    while size < 4 or size > 9:\n        print(\"Invalid input. Please enter a number between 4 and 9.\")\n        size = int(input(\"Enter the size of the puzzle: \"))\n    puzzle = []\n    for i in range(0,size):\n        puzzle.append([])\n        for j in range(0,size):\n            puzzle[i].append(' ')\n    while True:\n        print(\"Enter the command 'create' to create a puzzle. Enter 'exit' to exit.\")\n        user_input = input()\n        if user_input == 'create':\n            while True:\n                print(\"Enter the command 'win' to play the winning plays. Enter 'row' to play in a row.\")\n                user_input = input()\n                if user_input == 'win':\n                    print(\"Enter the number of the vertex you would like to play: \")\n                    user"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    number_1 = number\n    number_2 = 0\n    number_3 = 0\n    \n    if number < 0:\n        return None\n    \n    while number_2 * number_2 < number_1:\n        number_2 = number_2 + 1\n        number_3 = number_2 - 1\n    \n    number_1 = number_1 - number_2 * number_2\n    \n    return number_1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    x = number\n    guess = x / 2\n    while abs(guess*guess - x) >.0000001:\n        guess = (guess + x/guess) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not isinstance(number,(int,float)) or number < 0:\n        raise ValueError(\"Invalid Input\")\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Base case\n    if number == 0:\n        return 0\n    # If number is less than 0, throw an exception\n    if number < 0:\n        raise ValueError\n    # Recursive case\n    return 0.5 * (number + (babylonian_squareroot(number + 1) - babylonian_squareroot(number - 1)))\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Make a while loop\n    while True:\n        # Find the previous number\n        prev = number / 2\n        # Compare to the current number\n        if prev == number / 2:\n            # If so, the root is in the upper half, so use the low half\n            return prev\n        # If not, the root is in the lower half, so use the high half\n        else:\n            return prev\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0\n    estimate = abs(number)\n    difference = 0\n    while estimate - guess!= 0:\n        guess = (guess + estimate) / 2\n        difference = estimate - guess\n        if difference > 0:\n            estimate = (guess + estimate) / 2\n        else:\n            estimate = (guess + estimate) / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    return (number **.5)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == None:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    N = len(str)\n    \n    T = [[0] * N for i in range(N)]\n    \n    maxLength = 1\n    \n    # Every sub-sequence of length 1 is a palindrome\n    for i in range(N): \n        T[i][i] = 1\n    \n    for i in range(N-1): \n        if (str[i] == str[i+1]): \n            T[i][i+1] = 2\n            maxLength = 2\n    \n    # Now the length of the LPS can be at most the length of the previous longest palindrome\n    # or the previous longest palindrome plus the current character\n    for k in range(3, N+1): \n        for i in range(N-k+1): \n            j = i + k-1\n            if (str[i] == str[j] and T[i+1][j-1] == k-2): \n                T[i][j] = k\n                maxLength = max(maxLength, k)\n    \n    return maxLength\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    def lps_recursive(str, start, end):\n        if start >= end:\n            return 0\n        if start == end - 1:\n            return 1 if str[start] == str[end] else 0\n        if str[start] == str[end]:\n            return 2 + lps_recursive(str, start + 1, end - 1)\n        else:\n            return max(lps_recursive(str, start + 1, end), lps_recursive(str, start, end - 1))\n    return lps_recursive(str, 0, len(str) - 1)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 2:\n        return n\n    dp = [[0 for x in range(n)] for y in range(n)]\n    maxLength = 1\n    for i in range(n):\n        dp[i][i] = 1\n    for startIndex in range(n-1, -1, -1):\n        for endIndex in range(startIndex+1, n):\n            if str[startIndex] == str[endIndex]:\n                dp[startIndex][endIndex] = 2 + dp[startIndex+1][endIndex-1]\n                if dp[startIndex][endIndex] > maxLength:\n                    maxLength = dp[startIndex][endIndex]\n    return maxLength\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # S=set()\n    # for i in range(len(str)):\n    #     for j in range(i,len(str)):\n    #         S.add(str[i:j+1])\n    # return len(max(S,key=len))\n    return len(max(sub_str(str,i,i) for i in range(len(str))))\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # dp[i][j] denote longest palindromic subsequence length in s[i:j]\n    m = len(str)\n    dp = [[0 for j in xrange(m)] for i in xrange(m)]\n    for j in xrange(m):\n        for i in xrange(j+1):\n            if j-i<2 or i>=j-1: # not valid palindromic subsequence\n                continue\n            if str[i]==str[j]:\n                if j-i == 1:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][m-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_recur(str, i, j):\n        if i >= j:\n            return 0\n        if str[i] == str[j]:\n            return lps_recur(str, i+1, j-1) + 2\n        else:\n            return max(lps_recur(str, i+1, j), lps_recur(str, i, j-1))\n    return lps_recur(str, 0, len(str) - 1)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if not str:\n        return 0\n    else:\n        return max(lps(str[1:]), lps(str[:-1])) + 1 if str == str[::-1] else max(lps(str[1:]), lps(str[:-1]))\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == None:\n        return 0\n    def lps_rec(left, right):\n        if left == right:\n            return 1\n        elif left+1 == right:\n            return 1 if str[left] == str[right] else 0\n        elif left+1 > right:\n            return 0\n        elif str[left] == str[right]:\n            return 2 + lps_rec(left+1, right-1)\n        else:\n            return max(lps_rec(left+1, right), lps_rec(left, right-1))\n    return lps_rec(0, len(str)-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 0 else 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your Code Here\n    if n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # create a variable to hold the sum\n    sum = 0\n    \n    # run the loop n times\n    for i in range(n):\n        \n        # create a variable to hold the denominator\n        denom = 1\n        \n        # create a variable to hold the numerator\n        num = 1\n        \n        # create a variable to hold the sum\n        sum = sum + num/denom\n        \n        # create a while loop to run the calculation until n-1\n        while i!= (n-1):\n            \n            # update the denominator\n            denom = denom * i\n            \n            # update the numerator\n            num = num + 1\n            \n            # update the sum\n            sum = sum + num/denom\n            \n            # increase i by one\n            i = i + 1\n        \n        # return the sum\n        return sum\n        "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    array_intersection = []\n    n1 = len(array_nums1)\n    n2 = len(array_nums2)\n    i = j = 0\n    while i < n1 and j < n2:\n        if array_nums1[i] == array_nums2[j]:\n            array_intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n    return array_intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    def find_intersection(array_nums1,array_nums2):\n        '''\n        There will be an intersection if the two arrays have a number in common.\n        Return the number of elements in common.\n        '''\n        nums1_set = set(array_nums1)\n        nums2_set = set(array_nums2)\n        nums_common = nums1_set.intersection(nums2_set)\n        return len(nums_common)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1 = set(array_nums1)\n    arr2 = set(array_nums2)\n    intersect = arr1 & arr2\n    return list(intersect)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersected_nums = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                intersected_nums.append(num1)\n    return intersected_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # do not forget to comment your code\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for n in array_nums1:\n        if n in array_nums2:\n            intersection.append(n)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1 or not array_nums2:\n        return []\n    \n    array_nums1.sort()\n    array_nums2.sort()\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # array_nums1 = [1,2,3,4,5,6,7,8]\n    # array_nums2 = [1,2,4,7,8,9]\n    if array_nums1 == None or array_nums2 == None:\n        return None\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1_set = set(array_nums1)\n    nums2_set = set(array_nums2)\n    intersection_nums = []\n    for num in nums1_set:\n        if num in nums2_set:\n            intersection_nums.append(num)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if x == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup) == 0:\n        return 0\n    elif tup[0] == x:\n        return 1 + count_X(tup[1:], x)\n    else:\n        return count_X(tup[1:], x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n    \ndef count_first_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occurences of the element in the tuple and \n    finds the first occurence of the element in the tuple.\n    '''\n    return tup.index(x)\n    \ndef drop_first_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and drops all the elements of the tuple that come \n    before the element.\n    '''\n    if x in tup: \n        return tup[tup.index(x):]\n    else: \n        return tup\n        \ndef remove_last_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and removes all the elements of the tuple that come \n    after the element.\n    '''\n    return tup[:tup.index(x)]\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # TODO: YOUR CODE GOES HERE\n    return tup.count(x)\n    \ndef get_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and returns the first index of the element in the tuple.\n    '''\n    # TODO: YOUR CODE GOES HERE\n    return tup.index(x)\n    \ndef get_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and returns the last index of the element in the tuple.\n    '''\n    # TODO: YOUR CODE GOES HERE\n    return tup.index(y)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    n = 0\n    for i in tup:\n        if i == x:\n            n+=1\n    return n\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # YOUR CODE GOES HERE\n    c = 0\n    for i in tup:\n        if i == x:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n    \ndef last_element(list):\n    '''\n    Write a function that takes in a list and returns the last element in the list.\n    '''\n    return list[-1]\n    \ndef middle_element(list):\n    '''\n    Write a function that takes in a list and returns the element in the middle of the list.\n    '''\n    return list[len(list)/2]\n    \ndef inner_join(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that is the result of joining the elements of the first list with the elements of the second list together.\n    '''\n    new_list=[]\n    for i in list1:\n        for j in list2:\n            new_list.append(i)\n            new_list.append(j)\n    return new_list\n    \ndef outer_join(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that is the result of joining the elements of the first list with the elements of the second list together, without any duplicate elements.\n    '''\n    new_list=[]\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    for j in list2:\n        if j not in new_list:\n            new_list.append(j)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    lst = list.copy()\n    lst.insert(0, element)\n    return lst\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i-1])\n    new_list.append(element)\n    for i in range(len(list)):\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    result = []\n    for element in list:\n        result.append(element)\n        result.append(element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for idx in range(0, len(list)):\n        list[idx] = [element,list[idx]]\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    result = []\n    while i < len(list):\n        result.append(element)\n        result.append(list[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        list.insert(i,element)\n        i += 1\n    return list\n    \nprint insert_element([1,2,3,4],2)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = list.index(element)\n    list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    insert_element = lambda x,y: [y] + x\n    return insert_element(list,element)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers)\n    return cmath.polar(z)\ndef is_polar(numbers):\n    '''\n    Write a python function to check if a complex number is a polar number.\n    '''\n    z=complex(numbers)\n    return cmath.is_polar(z)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"List should have atleast 2 elements\")\n    r=[]\n    for i in numbers:\n        r.append(i.real)\n    l=[]\n    for i in numbers:\n        l.append(i.imag)\n    a=[]\n    for i in range(len(numbers)):\n        a.append((r[i],l[i]))\n    return a\ndef delComplex(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List should have atleast 2 elements\")\n    a=[]\n    for i in numbers:\n        a.append(i.real)\n    b=[]\n    for i in numbers:\n        b.append(i.imag)\n    for i in range(len(numbers)):\n        a.remove(numbers[i].real)\n        b.remove(numbers[i].imag)\n    r=[]\n    l=[]\n    for i in range(len(numbers)):\n        r.append(a[i])\n    for i in range(len(numbers)):\n        l.append(b[i])\n    a=[]\n    b=[]\n    for i in range(len(numbers)):\n        a.append(r[i])\n    for i in range(len(numbers)):\n        b.append(l[i])\n    return (a,b)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #numbers = eval(input(\"Enter a complex number: \"))\n    r = cmath.polar(numbers)\n    return r\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.polar(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_number = (numbers[0] + \" \" + numbers[1]).split()\n    complex_number = [complex(x) for x in complex_number]\n    if complex_number[0] == 0:\n        print(\"Zero\")\n    else:\n        z = complex_number[0]\n        polar_coordinates = [cmath.polar(z)]\n        polar_coordinates[0] = list(polar_coordinates[0])\n        polar_coordinates[0][1] = abs(polar_coordinates[0][1])\n        polar_coordinates[0] = tuple(polar_coordinates[0])\n        print(polar_coordinates)\nconvert(['-1.4142135623730951', '-1.7320508075688772'])\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers)==2:\n        return (cmath.polar(numbers[0] + numbers[1]*1j), 0)\n    if len(numbers)==3:\n        return (cmath.polar((numbers[0] + numbers[1]*1j) + numbers[2]*1j), numbers[2])\n    \ndef poi(a, b, r):\n    '''\n    a: x-coordinate of the circle center\n    b: y-coordinate of the circle center\n    r: the radius of the circle\n    '''\n    # return 0\n    # calculate the distance\n    if a == 0:\n        return 0\n    return cmath.polar((b - a)*1j)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        polar=cmath.polar(numbers)\n        print(polar)\n    else:\n        print(\"Please enter a complex number\")\ndef convert_2(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    if type(numbers)==type((1,1)):\n        con=cmath.rect(numbers[0],numbers[1])\n        print(con)\n    else:\n        print(\"Please enter polar numbers\")\ndef mod(numbers):\n    '''\n    Write a python function to calculate the modulus of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.mod(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef mod_2(numbers):\n    '''\n    Write a python function to calculate the modulus of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.mod(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef phase(numbers):\n    '''\n    Write a python function to calculate the phase of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.phase(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef phase_2(numbers):\n    '''\n    Write a python function to calculate the phase of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.phase(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef conj(numbers):\n    '''\n    Write a python function to calculate the conjugate of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.conj(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef conj_2(numbers):\n    '''\n    Write a python function to calculate the conjugate of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.conj(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef arg(numbers):\n    '''\n    Write a python function to calculate the argument of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.arg(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef arg_2(numbers):\n    '''\n    Write a python function to calculate the argument of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.arg(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef exp(numbers):\n    '''\n    Write a python function to calculate the exponential of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.exp(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef exp_2(numbers):\n    '''\n    Write a python function to calculate the exponential of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.exp(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef log(numbers):\n    '''\n    Write a python function to calculate the natural log of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.log(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef log_2(numbers):\n    '''\n    Write a python function to calculate the natural log of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.log(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef exp_root(numbers):\n    '''\n    Write a python function to calculate the exponential root of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.exp(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef exp_root_2(numbers):\n    '''\n    Write a python function to calculate the exponential root of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.exp(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef sin(numbers):\n    '''\n    Write a python function to calculate the sine of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.sin(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef sin_2(numbers):\n    '''\n    Write a python function to calculate the sine of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.sin(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef cos(numbers):\n    '''\n    Write a python function to calculate the cosine of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.cos(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef cos_2(numbers):\n    '''\n    Write a python function to calculate the cosine of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.cos(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef tan(numbers):\n    '''\n    Write a python function to calculate the tangent of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.tan(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef tan_2(numbers):\n    '''\n    Write a python function to calculate the tangent of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.tan(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef cot(numbers):\n    '''\n    Write a python function to calculate the cotangent of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.cot(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef cot_2(numbers):\n    '''\n    Write a python function to calculate the cotangent of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.cot(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")\ndef sinh(numbers):\n    '''\n    Write a python function to calculate the hyperbolic sine of a number.\n    '''\n    if type(numbers)==type(complex(1,1)):\n        m=cmath.sinh(numbers)\n        print(m)\n    else:\n        print(\"Please enter a complex number\")"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex = complex(numbers)\n    r = cmath.polar(complex)\n    return r\n    \n    \ndef to_cartesian(numbers):\n    '''\n    Write a python function to convert complex numbers to Cartesian coordinates.\n    '''\n    complex = complex(numbers)\n    return cmath.rect(complex)\n    \ndef add(x, y):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    return x + y\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print \"\\n*****Convert Complex Number to Polar Coordinate*****\\n\"\n    for i in numbers:\n        print 'Complex number is: ',i, 'Polar number is: ',polar(i)\n    \ndef polar(complex):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = abs(complex)\n    theta = cmath.phase(complex)\n    \n    return r,theta\n    \ndef add(numbers):\n    '''\n    Write a python function to add complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Addition*****\\n\"\n    for i in numbers:\n        sum = cmath.polar(i)+cmath.polar(numbers[1])\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Addition is: \", sum\n    \ndef sub(numbers):\n    '''\n    Write a python function to subtract complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Subtraction*****\\n\"\n    for i in numbers:\n        diff = cmath.polar(i)-cmath.polar(numbers[1])\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Subtraction is: \", diff\n    \ndef mult(numbers):\n    '''\n    Write a python function to multiply complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Multiplication*****\\n\"\n    for i in numbers:\n        prod = cmath.polar(i)*cmath.polar(numbers[1])\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Multiplication is: \", prod\n    \ndef div(numbers):\n    '''\n    Write a python function to divide complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Division*****\\n\"\n    for i in numbers:\n        quot = cmath.polar(i)/cmath.polar(numbers[1])\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Division is: \", quot\n        \ndef mod(numbers):\n    '''\n    Write a python function to compute modulus of complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Modulus*****\\n\"\n    for i in numbers:\n        mod = abs(i)%abs(numbers[1])\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Modulus is: \", mod\n        \ndef angle(numbers):\n    '''\n    Write a python function to compute angle of complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Angle*****\\n\"\n    for i in numbers:\n        angle = cmath.phase(i)%(2*cmath.pi)\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Angle is: \", angle\n    \ndef conj(numbers):\n    '''\n    Write a python function to compute conjugate of complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Conjugate*****\\n\"\n    for i in numbers:\n        conj = cmath.polar(i)\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Conjugate is: \", conj\n        \ndef imag(numbers):\n    '''\n    Write a python function to compute imaginary part of complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Imaginary Part*****\\n\"\n    for i in numbers:\n        imag = abs(i)\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Imaginary part is: \", imag\n        \ndef real(numbers):\n    '''\n    Write a python function to compute real part of complex numbers using cmath.polar().\n    '''\n    print \"\\n*****Real Part*****\\n\"\n    for i in numbers:\n        real = abs(i)\n        print \"First Complex number is: \",i\n        print \"Second Complex number is: \",numbers[1]\n        print \"Real part is: \", real\n        \ndef polar2complex(r,theta):\n    '''\n    Write a python function to convert polar to complex using cmath.polar().\n    '''\n    print \"\\n*****Polar to Complex*****\\n\"\n    print \"Real part is: \", r\n    print \"Theta part is: \", theta\n    return cmath.rect(r, theta)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for i in list1 if type(i) == int)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_count = 0\n    for element in list1:\n        if type(element) == int:\n            integer_count = integer_count + 1\n    return integer_count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(isinstance(i, int) for i in list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number_of_integer = 0\n    for element in list1:\n        if type(element) == int:\n            number_of_integer += 1\n    return number_of_integer\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(type(x) is int for x in list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, str)])\n    \ndef count_list(list1):\n    '''\n    Write a python function that returns the number of list elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, list)])\n    \ndef count_dict(list1):\n    '''\n    Write a python function that returns the number of dict elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, dict)])\n    \ndef count_tuple(list1):\n    '''\n    Write a python function that returns the number of tuple elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, tuple)])\n    \ndef count_set(list1):\n    '''\n    Write a python function that returns the number of set elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, set)])\n    \ndef check_type(list1):\n    '''\n    Write a python function that returns the sum of all integer, string, list, tuple, dictionary and set elements in a given list.\n    '''\n    return sum(i if isinstance(i, int) or isinstance(i, str) or isinstance(i, list) or isinstance(i, tuple) or isinstance(i, dict) or isinstance(i, set) else 0 for i in list1)\n    \ndef sum_dict(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given dictionary.\n    '''\n    return sum(i for i in list1.values())\n    \ndef sum_list(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given list.\n    '''\n    return sum(list1)\n    \ndef sum_set(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given set.\n    '''\n    return sum(list1)\n    \ndef sum_tuple(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given tuple.\n    '''\n    return sum(list1)\n    \ndef sum_string(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given string.\n    '''\n    return sum(list1)\n    \ndef sum_integer(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given list.\n    '''\n    return sum(list1)\n    \ndef sum_dict_values(list1):\n    '''\n    Write a python function that returns the sum of all values in a given dictionary.\n    '''\n    return sum(list1.values())\n    \ndef sum_list_values(list1):\n    '''\n    Write a python function that returns the sum of all values in a given list.\n    '''\n    return sum(list1)\n    \ndef sum_set_values(list1):\n    '''\n    Write a python function that returns the sum of all values in a given set.\n    '''\n    return sum(list1)\n    \ndef sum_tuple_values(list1):\n    '''\n    Write a python function that returns the sum of all values in a given tuple.\n    '''\n    return sum(list1)\n    \ndef sum_string_values(list1):\n    '''\n    Write a python function that returns the sum of all values in a given string.\n    '''\n    return sum(list1)\n    \ndef sum_dict_keys(list1):\n    '''\n    Write a python function that returns the sum of all keys in a given dictionary.\n    '''\n    return sum(list1.keys())\n    \ndef sum_list_keys(list1):\n    '''\n    Write a python function that returns the sum of all keys in a given list.\n    '''\n    return sum(list1)\n    \ndef sum_set_keys(list1):\n    '''\n    Write a python function that returns the sum of all keys in a given set.\n    '''\n    return sum(list1)\n    \ndef sum_tuple_keys(list1):\n    '''\n    Write a python function that returns the sum of all keys in a given tuple.\n    '''\n    return sum(list1)\n    \ndef sum_string_keys(list1):\n    '''\n    Write a python function that returns the sum of all keys in a given string.\n    '''\n    return sum(list1)\n    \ndef average(list1):\n    '''\n    Write a python function that returns the average of all elements in a given list.\n    '''\n    return sum(list1)/len(list1)\n    \ndef count_none(list1):\n    '''\n    Write a python function that returns the number of none elements in a given list.\n    '''\n    return len([i for i in list1 if i is None])\n    \ndef count_empty(list1):\n    '''\n    Write a python function that returns the number of empty strings in a given list.\n    '''\n    return len([i for i in list1 if i == ''])\n    \ndef count_blank(list1):\n    '''\n    Write a python function that returns the number of blank strings in a given list.\n    '''\n    return len([i for i in list1 if i.strip() == ''])\n    \ndef count_white(list1):\n    '''\n    Write a python function that returns the number of white spaces in a given list.\n    '''\n    return len([i for i in list1 if i.strip() ==''])\n    \ndef count_lower(list1):\n    '''\n    Write a python function that returns the number of lowercase elements in a given list.\n    '''\n    return len([i for i in list1 if i.islower()])\n    \ndef count_upper(list1):\n    '''\n    Write a python function that returns the number of uppercase elements in a given list.\n    '''\n    return len([i for i in list1 if i.isupper()])\n    \ndef count_digit(list1):\n    '''\n    Write a python function that returns the number of digits elements in a given list.\n    '''\n    return len([i for i in list1 if i.isdigit()])\n    \ndef count_punctuation(list1):\n    '''\n    Write a python function that returns the number of punctuation elements in a given list.\n    '''\n    return len([i for i in list1 if i in '!@#$%^&*()-_=+[{]};:<>?/.,'])\n    \ndef sum_dict(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given dictionary.\n    '''\n    return sum(list1.values())\n    \ndef sum_list(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given list.\n    '''\n    return sum(list1)\n    \ndef sum_set(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given set.\n    '''\n    return sum(list1)\n    \ndef sum_tuple(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given tuple.\n    '''\n    return sum(list1)\n    \ndef sum_string(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given string.\n    '''\n    return sum(list1)\n    \ndef sum_integer(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given list.\n    '''\n    return sum(list1)\n    \ndef sum_dict_values(list1):\n    '''\n    Write a python function that returns the sum of all values in a given dictionary.\n    '''\n    return sum(list1.values())\n    \ndef sum_list"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # first we create a generator that will give us the combinations\n    # using the combinations_with_replacement function\n    # for the first time, we will have to generate all combinations\n    # of length 0, so the first yield statement will give us\n    # the tuple ()\n    for t in combinations_with_replacement(l, n):\n        yield t \n    # now we have to add the remaining combinations\n    # this loop will give us combinations of length 1\n    for t in combinations_with_replacement(l, n-1):\n        # for the first time, we will have to generate all combinations\n        # of length 1, so the first yield statement will give us\n        # the tuple (x,)\n        for x in combinations_with_replacement(l, 1):\n            # this will add the rest of the combinations\n            # for the first time, we will have to generate all combinations\n            # of length 2, so the first yield statement will give us\n            # the tuple (x,y)\n            for y in combinations_with_replacement(l, 1):\n                # now we have to yield our final tuple (x,y,z)\n                for z in combinations_with_replacement(l, 1):\n                    yield x, y, z \n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[i] for i in l]\n    l.sort()\n    res = []\n    for i in xrange(len(l)):\n        res += map(list, combinations_with_replacement(l, i+1))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_of_lists = []\n    for item in l:\n        list_of_lists.append([item] * l.count(item))\n    return list(set(list(map(tuple, list_of_lists))))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [tuple()]\n    if n == len(l):\n        return [tuple(l)]\n    return [tuple(l) + t for t in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    lst = []\n    for i in combinations_with_replacement(l, n):\n        lst.append(i)\n    return lst\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combo = []\n    if n == 1:\n        for i in l:\n            combo.append((i,))\n        return combo\n    for i in combinations_with_replacement(l, n):\n        combo.append(i)\n    return combo\ndef difference_of_squares(l):\n    '''\n    Write a function that takes in a list of integers and returns the difference between the squares of the list of integers.\n    '''\n    square = []\n    for i in l:\n        square.append(i**2)\n    return square\ndef squares_of_sum(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the squares of the list of integers.\n    '''\n    square = 0\n    for i in l:\n        square += i\n    return square\ndef check_if_palindrome(l):\n    '''\n    Write a function that takes in a list of characters and returns a list of integers representing how many palindromes were found in the list of characters.\n    '''\n    char_dic = {}\n    for i in l:\n        char_dic.setdefault(i,0)\n        char_dic[i] += 1\n    palindrome = []\n    for i in char_dic:\n        if char_dic[i] % 2 == 0:\n            palindrome.append(char_dic[i])\n        if char_dic[i] % 2 == 1:\n            palindrome.append(char_dic[i])\n    return palindrome\ndef print_digits_from_num(num):\n    '''\n    Write a function that takes in a non-negative integer num and returns a string that is the digits of the integer in reverse order.\n    '''\n    result = ''\n    while num > 0:\n        result = str(num%10) + result\n        num = num//10\n    return result\ndef print_digits_from_num2(num):\n    '''\n    Write a function that takes in a non-negative integer num and returns a string that is the digits of the integer in reverse order.\n    '''\n    num_list = []\n    while num > 0:\n        num_list.append(num%10)\n        num = num//10\n    return str(num_list[::-1])\ndef print_digits_from_num3(num):\n    '''\n    Write a function that takes in a non-negative integer num and returns a string that is the digits of the integer in reverse order.\n    '''\n    num_list = []\n    while num > 0:\n        num_list.insert(0, num%10)\n        num = num//10\n    return str(num_list)\ndef can_sum(l, k):\n    '''\n    Write a function that takes in a list l and an integer k and returns a boolean representing whether or not the list contains a sum of two elements in l that equals k.\n    '''\n    for i in l:\n        for j in l:\n            if i+j == k and i!= j:\n                return True\n    return False\ndef can_sum2(l, k):\n    '''\n    Write a function that takes in a list l and an integer k and returns a boolean representing whether or not the list contains a sum of two elements in l that equals k.\n    '''\n    for i in l:\n        for j in l:\n            if i+j == k and i!= j:\n                return True\n    return False\ndef convert_to_base_ten(l, base):\n    '''\n    Write a function that takes in a list of digits and a base and returns a list of digits converted to base ten.\n    '''\n    num = 0\n    for i in l:\n        num = num*base + i\n    return [num]\ndef decimal_to_binary(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns a string representing the integer n in base-2.\n    '''\n    return bin(n).replace(\"0b\",\"\")\ndef string_rotation(s1, s2):\n    '''\n    Write a function that takes in two strings s1 and s2 and returns a boolean representing whether or not s2 is a rotation of s1.\n    '''\n    for i in range(len(s1)):\n        if s2[i:] + s2[:i] == s1:\n            return True\n    return False\ndef string_rotation2(s1, s2):\n    '''\n    Write a function that takes in two strings s1 and s2 and returns a boolean representing whether or not s2 is a rotation of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == len(s2) == 0:\n        return True\n    return s2 in s1+s1\ndef string_rotation3(s1, s2):\n    '''\n    Write a function that takes in two strings s1 and s2 and returns a boolean representing whether or not s2 is a rotation of s1.\n    '''\n    return s2 in s1+s1\ndef is_valid_date(d):\n    '''\n    Write a function that takes in a string of the format yyyy-mm-dd and returns a boolean representing whether or not the date is valid.\n    '''\n    year, month, day = map(int, d.split('-'))\n    return (year <= 3000) and (month <= 12) and (day <= 31)\ndef get_date_difference(d1, d2):\n    '''\n    Write a function that takes in two strings of the format yyyy-mm-dd and returns the number of days between the two dates.\n    '''\n    d1 = d1.split('-')\n    d2 = d2.split('-')\n    if d1[2] == d2[2] and d1[1] == d2[1] and d1[0] == d2[0]:\n        return int(d2[2]) - int(d1[2])\n    return None\ndef get_date_difference2(d1, d2):\n    '''\n    Write a function that takes in two strings of the format yyyy-mm-dd and returns the number of days between the two dates.\n    '''\n    d1 = d1.split('-')\n    d2 = d2.split('-')\n    year1, month1, day1 = int(d1[0]), int(d1[1]), int(d1[2])\n    year2, month2, day2 = int(d2[0]), int(d2[1]), int(d2[2])\n    if year1 == year2 and month1 == month2 and day1 == day2:\n        return 0\n    elif year1 == year2:\n        return month2*30 + day2 - day1\n    elif month1 == month2:\n        return (year2*365) + day2 - day1\n    else:\n        return (year2*365) + month2*30 + day2 - day1\ndef is_valid_triangle(s1, s2, s3):\n    '''\n    Write a function that takes in three strings representing three sides of a triangle and returns a boolean representing whether or not the triangle is valid.\n    '''\n    a, b, c = sorted([int(s1), int(s2), int(s3)])\n    return (a+b) > c and (a+c) > b and (b+c) > a\ndef is_valid_triangle2(s1, s2, s3):\n    '''\n    Write a function that takes in three strings representing three sides of a triangle and returns a boolean representing whether or not the triangle is valid.\n    '''\n    a, b, c = sorted([int(s1), int(s2), int(s3)])\n    return a*a + b*b == c*c\ndef is_valid_triangle3(s1, s2, s3):\n    '''\n    Write a function that takes in three strings representing three sides of a triangle and returns a boolean representing whether or not the triangle is valid.\n    '''\n    return sorted([int(s1), int(s2), int(s3)])[0] + sorte"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # l = ['pink', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n    # n = 4\n    yield from combinations_with_replacement(l, n)\n    \ndef get_combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and returns a list of all combinations of the elements of the list with length n.\n    '''\n    # l = ['pink', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n    # n = 4\n    return list(combinations_with_replacement(l, n))\n    \n    \ndef test_get_combinations_colors():\n    assert get_combinations_colors(['pink', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'], 4) == \\\n        [\n            ('pink', 'pink', 'pink', 'pink'),\n            ('pink', 'pink', 'orange', 'orange'),\n            ('pink', 'pink', 'yellow', 'yellow'),\n            ('pink', 'pink', 'green', 'green'),\n            ('pink', 'pink', 'blue', 'blue'),\n            ('pink', 'pink', 'indigo', 'indigo'),\n            ('pink', 'pink', 'violet', 'violet'),\n            ('orange', 'orange', 'orange', 'orange'),\n            ('orange', 'orange', 'pink', 'pink'),\n            ('orange', 'orange', 'yellow', 'yellow'),\n            ('orange', 'orange', 'green', 'green'),\n            ('orange', 'orange', 'blue', 'blue'),\n            ('orange', 'orange', 'indigo', 'indigo'),\n            ('orange', 'orange', 'violet', 'violet'),\n            ('yellow', 'yellow', 'yellow', 'yellow'),\n            ('yellow', 'yellow', 'pink', 'pink'),\n            ('yellow', 'yellow', 'pink', 'orange'),\n            ('yellow', 'yellow', 'orange', 'orange'),\n            ('yellow', 'yellow', 'green', 'green'),\n            ('yellow', 'yellow', 'blue', 'blue'),\n            ('yellow', 'yellow', 'indigo', 'indigo'),\n            ('yellow', 'yellow', 'violet', 'violet'),\n            ('green', 'green', 'green', 'green'),\n            ('green', 'green', 'pink', 'pink'),\n            ('green', 'green', 'pink', 'orange'),\n            ('green', 'green', 'orange', 'orange'),\n            ('green', 'green', 'yellow', 'yellow'),\n            ('green', 'green', 'blue', 'blue'),\n            ('green', 'green', 'indigo', 'indigo'),\n            ('green', 'green', 'violet', 'violet'),\n            ('blue', 'blue', 'blue', 'blue'),\n            ('blue', 'blue', 'pink', 'pink'),\n            ('blue', 'blue', 'pink', 'orange'),\n            ('blue', 'blue', 'orange', 'orange'),\n            ('blue', 'blue', 'yellow', 'yellow'),\n            ('blue', 'blue', 'green', 'green'),\n            ('blue', 'blue', 'indigo', 'indigo'),\n            ('blue', 'blue', 'violet', 'violet'),\n            ('indigo', 'indigo', 'indigo', 'indigo'),\n            ('indigo', 'indigo', 'pink', 'pink'),\n            ('indigo', 'indigo', 'pink', 'orange'),\n            ('indigo', 'indigo', 'orange', 'orange'),\n            ('indigo', 'indigo', 'yellow', 'yellow'),\n            ('indigo', 'indigo', 'green', 'green'),\n            ('indigo', 'indigo', 'blue', 'blue'),\n            ('indigo', 'indigo', 'violet', 'violet'),\n            ('violet', 'violet', 'violet', 'violet'),\n            ('violet', 'violet', 'pink', 'pink'),\n            ('violet', 'violet', 'pink', 'orange'),\n            ('violet', 'violet', 'orange', 'orange'),\n            ('violet', 'violet', 'yellow', 'yellow'),\n            ('violet', 'violet', 'green', 'green'),\n            ('violet', 'violet', 'blue', 'blue'),\n            ('violet', 'violet', 'indigo', 'indigo'),\n        ]\n        \ndef test_get_combinations_colors_2():\n    assert get_combinations_colors(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'], 4) == \\\n        [\n            ('red','red','red','red'),\n            ('red','red', 'orange', 'orange'),\n            ('red','red', 'yellow', 'yellow'),\n            ('red','red', 'green', 'green'),\n            ('red','red', 'blue', 'blue'),\n            ('red','red', 'indigo', 'indigo'),\n            ('red','red', 'violet', 'violet'),\n            ('orange', 'orange', 'orange', 'orange'),\n            ('orange', 'orange','red','red'),\n            ('orange', 'orange', 'yellow', 'yellow'),\n            ('orange', 'orange', 'green', 'green'),\n            ('orange', 'orange', 'blue', 'blue'),\n            ('orange', 'orange', 'indigo', 'indigo'),\n            ('orange', 'orange', 'violet', 'violet'),\n            ('yellow', 'yellow', 'yellow', 'yellow'),\n            ('yellow', 'yellow','red','red'),\n            ('yellow', 'yellow','red', 'orange'),\n            ('yellow', 'yellow', 'orange', 'orange'),\n            ('yellow', 'yellow', 'green', 'green'),\n            ('yellow', 'yellow', 'blue', 'blue'),\n            ('yellow', 'yellow', 'indigo', 'indigo'),\n            ('yellow', 'yellow', 'violet', 'violet'),\n            ('green', 'green', 'green', 'green'),\n            ('green', 'green','red','red'),\n            ('green', 'green','red', 'orange'),\n            ('green', 'green', 'orange', 'orange'),\n            ('green', 'green', 'yellow', 'yellow'),\n            ('green', 'green', 'blue', 'blue'),\n            ('green', 'green', 'indigo', 'indigo'),\n            ('green', 'green', 'violet', 'violet'),\n            ('blue', 'blue', 'blue', 'blue'),\n            ('blue', 'blue','red','red'),\n            ('blue', 'blue','red', 'orange'),\n            ('blue', 'blue', 'orange', 'orange'),\n            ('blue', 'blue', 'yellow', 'yellow'),\n            ('blue', 'blue', 'green', 'green'),\n            ('blue', 'blue', 'indigo', 'indigo'),\n            ('blue', 'blue', 'violet', 'violet'),\n            ('indigo', 'indigo', 'indigo', 'indigo'),\n            ('indigo', 'indigo','red','red'),\n            ('indigo', 'indigo','red', 'orange'),\n            ('indigo', 'indigo', 'orange', 'orange'),\n            ('indigo', 'indigo', 'yellow', 'yellow'),\n            ('indigo', 'indigo', 'green', 'green'),\n            ('indigo', 'indigo', 'blue', 'blue'),\n            ('indigo', 'indigo', 'violet', 'violet'),\n            ('violet', 'violet', 'violet', 'violet'),\n            ('violet', 'violet','red','red'),\n            ('violet', 'violet','red', 'orange'),\n            ('violet', 'violet', 'orange', 'orange'),\n            ('violet', 'violet', 'yellow', 'yellow'),\n            ('violet', 'violet', 'green', 'green'),\n            ('violet', 'violet', 'blue', 'blue'),\n            ('violet', 'violet', 'indigo', 'indigo'),\n        ]\n        \ndef test_get_combinations_colors_3():\n    assert get_combinations_colors(['pink', "
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # This function counts the number of prime numbers less than or equal to n\n    # The range in which the numbers in the result will be counted starts from 2 to n\n    # I couldn't come up with a simple algorithm for prime numbers, it's a recursive algorithm\n    def isPrime(num):\n        for i in range(2, int(num**0.5)+1):\n            if num%i == 0:\n                return False\n        return True\n    result = 0\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    for i in range(2, n+1):\n        if isPrime(i):\n            result += 1\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        prime = [True] * (n+1)\n        for i in range(2, n+1):\n            if i*i <= n+1:\n                for j in range(i*i, n+1, i):\n                    prime[j] = False\n        return sum(prime[2:])\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # source - https://www.codeabbey.com/index/task_view_code_13962336\n    # to count how many primes numbers are less than n\n    # n is inputted as an integer, while n is not included in the result\n    # the function returns n + 1 to match the correct format\n    # test input 1:\n    # count_Primes_nums(3)\n    # result: 0\n    # test input 2:\n    # count_Primes_nums(5)\n    # result: 2\n    # test input 3:\n    # count_Primes_nums(10)\n    # result: 4\n    # test input 4:\n    # count_Primes_nums(15)\n    # result: 6\n    # test input 5:\n    # count_Primes_nums(20)\n    # result: 8\n    # test input 6:\n    # count_Primes_nums(24)\n    # result: 10\n    # test input 7:\n    # count_Primes_nums(50)\n    # result: 12\n    # test input 8:\n    # count_Primes_nums(100)\n    # result: 14\n    # test input 9:\n    # count_Primes_nums(1000)\n    # result: 16\n    # test input 10:\n    # count_Primes_nums(10000)\n    # result: 18\n    # test input 11:\n    # count_Primes_nums(100000)\n    # result: 19\n    # test input 12:\n    # count_Primes_nums(1000000)\n    # result: 21\n    # test input 13:\n    # count_Primes_nums(10000000)\n    # result: 22\n    # test input 14:\n    # count_Primes_nums(100000000)\n    # result: 22\n    # test input 15:\n    # count_Primes_nums(1000000000)\n    # result: 22\n    # test input 16:\n    # count_Primes_nums(10000000000)\n    # result: 22\n    # test input 17:\n    # count_Primes_nums(100000000000)\n    # result: 22\n    # test input 18:\n    # count_Primes_nums(1000000000000)\n    # result: 22\n    # test input 19:\n    # count_Primes_nums(10000000000000)\n    # result: 22\n    # test input 20:\n    # count_Primes_nums(100000000000000)\n    # result: 22\n    # test input 21:\n    # count_Primes_nums(1000000000000000)\n    # result: 22\n    # test input 22:\n    # count_Primes_nums(1000000000000000000)\n    # result: 22\n    # test input 23:\n    # count_Primes_nums(10000000000000000000)\n    # result: 22\n    # test input 24:\n    # count_Primes_nums(100000000000000000000)\n    # result: 22\n    # test input 25:\n    # count_Primes_nums(1000000000000000000000)\n    # result: 22\n    # test input 26:\n    # count_Primes_nums(10000000000000000000000)\n    # result: 22\n    # test input 27:\n    # count_Primes_nums(100000000000000000000000)\n    # result: 22\n    # test input 28:\n    # count_Primes_nums(1000000000000000000000000)\n    # result: 22\n    # test input 29:\n    # count_Primes_nums(10000000000000000000000000)\n    # result: 22\n    # test input 30:\n    # count_Primes_nums(100000000000000000000000000)\n    # result: 22\n    # test input 31:\n    # count_Primes_nums(1000000000000000000000000000)\n    # result: 22\n    # test input 32:\n    # count_Primes_nums(10000000000000000000000000000)\n    # result: 22\n    # test input 33:\n    # count_Primes_nums(100000000000000000000000000000)\n    # result: 22\n    # test input 34:\n    # count_Primes_nums(1000000000000000000000000000000)\n    # result: 22\n    # test input 35:\n    # count_Primes_nums(10000000000000000000000000000000)\n    # result: 22\n    # test input 36:\n    # count_Primes_nums(1000000000000000000000000000000000)\n    # result: 22\n    # test input 37:\n    # count_Primes_nums(100000000000000000000000000000001)\n    # result: 22\n    # test input 38:\n    # count_Primes_nums(100000000000000000000000000000002)\n    # result: 22\n    # test input 39:\n    # count_Primes_nums(100000000000000000000000000000003)\n    # result: 22\n    # test input 40:\n    # count_Primes_nums(100000000000000000000000000000004)\n    # result: 22\n    # test input 41:\n    # count_Primes_nums(100000000000000000000000000000005)\n    # result: 22\n    # test input 42:\n    # count_Primes_nums(100000000000000000000000000000006)\n    # result: 22\n    # test input 43:\n    # count_Primes_nums(100000000000000000000000000000007)\n    # result: 22\n    # test input 44:\n    # count_Primes_nums(100000000000000000000000000000008)\n    # result: 22\n    # test input 45:\n    # count_Primes_nums(100000000000000000000000000000009)\n    # result: 22\n    # test input 46:\n    # count_Primes_nums(100000000000000000000000000000010)\n    # result: 22\n    # test input 47:\n    # count_Primes_nums(100000000000000000000000000000011)\n    # result: 22\n    # test input 48:\n    # count_Primes_nums(100000000000000000000000000000012)\n    # result: 22\n    # test input 49:\n    # count_Primes_nums(100000000000000000000000000000013)\n    # result: 22\n    # test input 50:\n    # count_Primes_nums(100000000000000000000000000000014)\n    # result: 22\n    # test input 51:\n    # count_Primes_nums(100000000000000000000000000000015)\n    # result: 22\n    # test input 52:\n    # count_Primes_nums(100000000000000000000000000000016)\n    # result: 22\n    # test input 53:\n    # count_Primes_nums(100000000000000000000000000000017)\n    # result: 22\n    # test input 54:\n    # count_Primes_nums(100000000000000000000000000000018)\n    # result: 22\n    # test input 55:\n    # count_Primes_nums(100000000000000000000000000000019)\n    # result: 22\n    # test input 56:\n    # count_Primes_nums(100000000000000000000000000000020)\n    # result: 22\n    # test input 57:\n    # count_Primes_nums(100000000000000000000000000000021)\n    # result: 22\n    # test input 58:\n    # count_Primes_nums(100000000000000000000000000000022)\n    # result: 22\n    # test input 59:\n    # count_Primes_nums(100000000000000000000000000000023)\n    # result: 22\n    # test input 60:\n    # count_Primes_nums(100000000000000000000000000000024)\n    # result: 22\n    # test input 61:\n    # count_Primes_nums(100000000000000000000000000000025)\n    # result: 22\n    # test input 62:\n    # count_Primes_nums(100000000000000000000000000000026)\n    # result: 22\n    # test input 63:\n    # count_Primes_nums(100000000000000000000000000000027)\n    # result: 22\n    # test input 64:\n    # count_Primes_nums(100000000000000000000000000000028)\n    # result: 22\n    # test input 65:\n    # count_Primes_nums(100000000000000000000000000000029)\n    # result: 22\n    # test input 66:\n    # count_Primes_nums(100000000000000000000000000000030)\n    # result: 22\n    # test input 67:\n    # count_Primes_nums(100000000000000000000000000000031)\n    # result: 22\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2,3,5,7]\n    for i in range(2,n):\n        if i % 2!= 0 and i % 3!= 0 and i % 5!= 0:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n    else:\n        nums = [True]*n\n        nums[0],nums[1] = False,False\n        i = 2\n        while i < len(nums):\n            if nums[i]:\n                j = i*2\n                while j < len(nums):\n                    nums[j] = False\n                    j = j + i\n            i = i + 1\n        return nums.count(True)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime = [True]*(n+1)\n    prime[0] = prime[1] = False\n    i = 2\n    count = 0\n    while i*i <= n:\n        if prime[i]:\n            count += 1\n            for j in range(i*i, n+1, i):\n                prime[j] = False\n        i += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for num in range(2,n+1):\n        prime = True\n        for i in range(2,num):\n            if (num%i==0):\n                prime = False\n        if prime:\n            prime_count+=1\n    return prime_count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1 or n == 2 or n == 3:\n        return 1\n    if n < 0:\n        return 0\n    primes = [2, 3, 5]\n    for i in range(7, n):\n        if all(i % j!= 0 for j in primes):\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<0:\n        return 0\n    if n==0 or n==1:\n        return 0\n    if n==2:\n        return 1\n    if n>=3:\n        if n%2==0:\n            return 0\n        if n%3==0:\n            return 0\n    if n%3==0:\n        return 0\n    if n%5==0:\n        return 0\n    if n%7==0:\n        return 0\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2) + count_Primes_nums(n-3) + count_Primes_nums(n-5) + count_Primes_nums(n-7)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n    if n <= 2:\n        return 0\n    if n == 3:\n        return 1\n    nums = [True] * n\n    nums[0] = False\n    nums[1] = False\n    for i in range(2, int(n**0.5)):\n        if nums[i]:\n            nums[i*i:n:i] = [False] * len(nums[i*i:n:i])\n    return sum(nums)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n    \nprint swap_numbers(8, 3)\nprint swap_numbers(5, 3)\nprint swap_numbers(6, 4)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    return (b,a)\n    \ndef min_max(L):\n    '''\n    Write a function that takes in a list of numbers and returns a tuple with the smallest and largest numbers in the list.\n    '''\n    \n    return (min(L), max(L))\n    \ndef same_first_last(L):\n    '''\n    Write a function that takes in a list of numbers and returns True if the first and last number in the list are the same.\n    '''\n    \n    return L[0] == L[-1]\n    \ndef remove_every_other(L):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that does not contain every other number.\n    '''\n    \n    return [x for i, x in enumerate(L) if i % 2 == 0]\n    \ndef sum_of_list(L):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    \n    return sum(L)\n    \ndef max_of_list(L):\n    '''\n    Write a function that takes in a list of numbers and returns the max number in the list.\n    '''\n    \n    return max(L)\n    \ndef reverse(L):\n    '''\n    Write a function that takes in a list of numbers and returns the list with the numbers in reverse order.\n    '''\n    \n    return L[::-1]\n    \ndef sort_list(L):\n    '''\n    Write a function that takes in a list of numbers and returns the list in sorted order.\n    '''\n    \n    return sorted(L)\n    \ndef more_than_n(L, n):\n    '''\n    Write a function that takes in a list of numbers and returns a new list with only the numbers that are more than n.\n    '''\n    \n    return [x for x in L if x > n]\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False if it is not.\n    '''\n    \n    return s == s[::-1]\n    \ndef has_duplicates(L):\n    '''\n    Write a function that takes in a list of numbers and returns True if the list has any duplicates, False if it does not.\n    '''\n    \n    return len(L)!= len(set(L))\n    \ndef every_other_item(L):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that has every other number in the list, starting with the first number.\n    '''\n    \n    return L[0::2]\n    \ndef smallest_difference(L1, L2):\n    '''\n    Write a function that takes in two lists of numbers and returns the pair of numbers (one from each list) that has the smallest absolute difference between them.\n    '''\n    \n    return min(abs(x[0] - x[1]) for x in zip(L1, L2))\n    \ndef digit_counts(L):\n    '''\n    Write a function that takes in a list of numbers and returns a new list with each number's digits as a key and the number of times that digit appeared in the list as the value.\n    '''\n    \n    return {d:L.count(d) for d in range(10)}\n    \ndef has_adjacent_digits(L):\n    '''\n    Write a function that takes in a list of numbers and returns True if the list has two numbers in it that have the same digits.\n    '''\n    \n    return any(map(lambda x: x[0] == x[1], zip(L,L[1:])))\n    \ndef has_same_digit_counts(L):\n    '''\n    Write a function that takes in a list of numbers and returns True if the list has a number with the same digit counts as another number in the list.\n    '''\n    \n    return any(map(lambda x: L.count(x) == L.count(y), L))\n    \ndef digit_product(L):\n    '''\n    Write a function that takes in a list of numbers and returns the product of every number's digits.\n    '''\n    \n    return reduce(lambda x, y: x * y, map(lambda x: int(x), L))\n    \ndef divisible_by_seven(L):\n    '''\n    Write a function that takes in a list of numbers and returns the number of numbers in the list that are divisible by 7.\n    '''\n    \n    return len([x for x in L if x % 7 == 0])\n    \ndef palindrome_product(L):\n    '''\n    Write a function that takes in a list of numbers and returns the product of every number's digits that are palindromes.\n    '''\n    \n    return reduce(lambda x, y: x * y, map(lambda x: int(x) if is_palindrome(str(x)) else 0, L))\n    \ndef reversed_list(L):\n    '''\n    Write a function that takes in a list of numbers and returns a new list with the numbers reversed.\n    '''\n    \n    return L[::-1]\n    \ndef common_items(L1, L2):\n    '''\n    Write a function that takes in two lists of numbers and returns the number of common items in both lists.\n    '''\n    \n    return len(set(L1) & set(L2))\n    \ndef is_sorted(L):\n    '''\n    Write a function that takes in a list of numbers and returns True if the list is sorted in ascending order and False if it is not.\n    '''\n    \n    return L == sorted(L)\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams of each other and False if they are not.\n    '''\n    \n    return sorted(s1) == sorted(s2)\n    \ndef are_anagrams(L1, L2):\n    '''\n    Write a function that takes in two lists of numbers and returns True if they are anagrams of each other and False if they are not.\n    '''\n    \n    return sorted(L1) == sorted(L2)\n    \ndef middle(L):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that contains the values in the middle of the original list.\n    '''\n    \n    return L[len(L) // 2 - 1: len(L) // 2 + 1]\n    \ndef linear_search(L, key):\n    '''\n    Write a function that takes in a list of numbers and returns the index of the number in the list that is equal to the key.\n    If the number is not in the list, return -1.\n    '''\n    \n    return L.index(key)\n    \ndef binary_search(L, key):\n    '''\n    Write a function that takes in a sorted list of numbers and a number and returns the index of the number in the list if the number is in the list and -1 if it is not.\n    '''\n    \n    return binary_search_recursive(L, key, 0, len(L) - 1)\n    \ndef binary_search_recursive(L, key, left, right):\n    '''\n    Write a function that takes in a sorted list of numbers and a number and returns the index of the number in the list if the number is in the list and -1 if it is not.\n    '''\n    \n    if right < left:\n        return -1\n    mid = (left + right) // 2\n    if key == L[mid]:\n        return mid\n    elif key < L[mid]:\n        return binary_search_recursive(L, key, left, mid - 1)\n    else:\n        return binary_search_recursive(L, key, mid + 1, right)\n    \ndef is_increasing(L):\n    '''\n    Write a function that takes in a list of numbers and returns True if the list is increasing and False if it is not.\n    '''\n    \n    return all(L[i] <= L[i + 1] for i in range(len(L) - 1))\n    \ndef is_decreasing(L):\n    '''\n    Write "
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    arr1 = []\n    arr2 = []\n    for i in test_tup1:\n        arr1.append(i)\n    for i in test_tup2:\n        arr2.append(i)\n    return tuple(max(arr1, arr2))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(a,b) for a,b in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    test_tup1 = sorted(test_tup1, reverse=True)\n    test_tup2 = sorted(test_tup2, reverse=True)\n    max_tup = []\n    \n    if len(test_tup1) > len(test_tup2):\n        if len(test_tup1) == len(test_tup2):\n            if len(test_tup1) == 1:\n                return [test_tup1[0], test_tup2[0]]\n            else:\n                max_tup.append(test_tup1[0])\n                max_tup.append(test_tup2[0])\n                return max_tup\n        else:\n            max_tup.append(test_tup1[0])\n            max_tup.append(test_tup2[0])\n            return max_tup\n    else:\n        if len(test_tup1) == len(test_tup2):\n            if len(test_tup1) == 1:\n                return [test_tup1[0], test_tup2[0]]\n            else:\n                max_tup.append(test_tup1[0])\n                max_tup.append(test_tup2[0])\n                return max_tup\n        else:\n            max_tup.append(test_tup1[0])\n            max_tup.append(test_tup2[0])\n            return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_list = []\n    for i in range(0, len(test_tup1)):\n        max_list.append(max(test_tup1[i], test_tup2[i]))\n    return max_list\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple([i if i > j else j for i,j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tuple1 = list(test_tup1)\n    tuple2 = list(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1, max2 = (0,0)\n    for item in test_tup1:\n        if item > max1:\n            max1 = item\n    for item in test_tup2:\n        if item > max2:\n            max2 = item\n    return max1, max2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = []\n    for tup in test_tup1:\n        a.append(tup)\n    for tup in test_tup2:\n        a.append(tup)\n    a.sort()\n    return a[-2:]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    n1, v1 = test_tup1\n    n2, v2 = test_tup2\n    return max(v1, v2), max(n1, n2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    first_tuple = test_tup1\n    second_tuple = test_tup2\n    #create a new tuple with the highest values and sort it.\n    sorted_tuples = sorted([first_tuple, second_tuple], key = lambda tup: tup[1], reverse = True)\n    #now we get the first element of the sorted tuple (highest value),\n    #the second element of the tuple (second highest value),\n    #and the last element of the tuple (lowest value)\n    max_element = sorted_tuples[0][2]\n    #return the result\n    return max_element\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return newman_prime(n // 2)**2\n    if n % 3 == 0:\n        return newman_prime(n // 3)**3\n    if n % 5 == 0:\n        return newman_prime(n // 5)**5\n    if n % 7 == 0:\n        return newman_prime(n // 7)**7\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    a = random.randint(2,n-1)\n    while (fast_mod(a,n)!= 1):\n        a = random.randint(2,n-1)\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return gen_newman_prime(n)\n    \ndef gen_newman_prime(n): \n    '''\n    Uses the fact that the nth newman\u2013shanks\u2013williams prime number is an arithmetic sequence,\n    and that the range is [a, b, c] such that a + b + c = n. This is an example of \n    a newman\u2013shanks\u2013williams sequence.\n    '''\n    # Assumes that a newman\u2013shanks\u2013williams prime number is always an arithmetic sequence\n    # and a simple arithmetic progression\n    a = 3\n    b = 5\n    c = 7\n    n = 2*n\n    if n <= 4:\n        return n\n    elif n % 2 == 1:\n        return None\n    else:\n        while b < n:\n            a = (a*b) % n\n            b = b**2 % n\n        return (a+1) // 2"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_factors = []\n    for i in range(2, int(math.sqrt(n))):\n        if n % i == 0:\n            prime_factors.append(i)\n    if len(prime_factors) < 2:\n        return (n, [n])\n    else:\n        for j in range(0, len(prime_factors)):\n            new_n = prime_factors[j]\n            if new_n == prime_factors[-1]:\n                return (new_n, prime_factors)\n            new_n_prev_div = new_n\n            while new_n % new_n_prev_div == 0:\n                new_n_prev_div /= new_n_prev_div\n            prime_factors.insert(j, new_n_prev_div)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    s = n\n    d = 0\n    while n % 2 == 0:\n        d += 1\n        n //= 2\n    if n == 1:\n        return s\n    if d % 2 == 0:\n        return 2\n    p = 3\n    while True:\n        t = 0\n        while n % p == 0:\n            t += 1\n            n //= p\n        if t % 2 == 0:\n            s *= p\n            if n == 1:\n                return s\n            n -= 1\n        p += 2\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2:\n        return 2\n    if n == 1:\n        return 3\n    if n == 0:\n        return 5\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n, False)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    x = 2\n    y = 3\n    c = 0\n    while c < n:\n        if gcd(x - 1, n) == 1:\n            c += 1\n            x = pow(x, 2, n)\n            if x == 1:\n                return y\n            if x % 2 == 0:\n                y = 2 * y\n            continue\n        return False\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (a/c, b/d)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_tup = []\n    for i in range(len(test_tup1)):\n        result = float(test_tup1[i]) / float(test_tup2[i])\n        division_tup.append(result)\n    return division_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    from operator import div\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div_tup = tuple(element1 / element2 for element1, element2 in zip(test_tup1, test_tup2))\n    return div_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        try:\n            result = result + (test_tup1[i]/test_tup2[i],)\n        except ZeroDivisionError:\n            result = result + (float('inf'),)\n        except TypeError:\n            result = result + (float('nan'),)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #get two tuples\n    a, b = test_tup1\n    c, d = test_tup2\n    \n    #division\n    division = lambda a,b: a / b\n    \n    #return tuple\n    return a // d, b // c\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        element_1 = int(test_tup1[0])/int(test_tup2[0])\n        element_2 = int(test_tup1[1])/int(test_tup2[1])\n        element_3 = int(test_tup1[2])/int(test_tup2[2])\n    except:\n        element_1 = None\n        element_2 = None\n        element_3 = None\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n    for i in range(len(test_tup1)):\n        new_tup1.append(test_tup1[i]/test_tup2[i])\n        new_tup2.append(test_tup2[i]/test_tup1[i])\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #returns the first n items of the list\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split = []\n    for i in list1:\n        if len(split) == 0:\n            split.append(i)\n        elif len(split) == L:\n            split.append(i)\n            break\n        else:\n            split.append(i)\n    if len(split) == L:\n        return split\n    else:\n        return [split, list1[len(split):]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_1 = list1[:L]\n    list1_2 = list1[L:]\n    return [list1_1, list1_2]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) / 2\n    return list1[:half], list1[half:]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return ([], list1)\n    elif L == 1:\n        return (list1[0], list1[1])\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # your code here\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    #Split the given list into two parts\n    return list1[:L], list1[L:]\n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    \n    # Test your function\n    print(\"Testing split_two_parts()...\", end=\"\")\n    \n    # Define some test cases\n    L1, L2 = split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    assert(L1 == [1, 2, 3])\n    assert(L2 == [4, 5, 6, 7, 8, 9, 10])\n    L1, L2 = split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n    assert(L1 == [1, 2, 3, 4])\n    assert(L2 == [5, 6, 7, 8, 9, 10])\n    L1, L2 = split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n    assert(L1 == [1, 2, 3, 4, 5])\n    assert(L2 == [6, 7, 8, 9, 10])\n    L1, L2 = split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7)\n    assert(L1 == [1, 2, 3, 4, 5, 6])\n    assert(L2 == [7, 8, 9, 10])\n    L1, L2 = split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8)\n    assert(L1 == [1, 2, 3, 4, 5, 6, 7])\n    assert(L2 == [8, 9, 10])\n    L1, L2 = split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 22)\n    assert(L1 == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert(L2 == [])\n    \n    # Correctly print \"Done!\"\n    print(\"Done! Your split_two_parts function is correct!\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    miles_per_year =.1\n    years_per_month =.1\n    months = h_age * 12\n    years = h_age * 12 * 24\n    print('Dog Age in Years: %d years' % years)\n    print('Dog Age in Months: %d months' % months)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return None\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int((h_age * 7) + 14)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age*7\n    print \"Your dog is \" + str(age) + \" years old in dog's years.\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[x:x+step] for x in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[x:x+step] for x in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = abs(l)\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    l = int(l)\n    a = l**2\n    lateralsurface = math.sqrt(a)\n    return lateralsurface\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l**2\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert l>0\n    surface_area = 6 * l**2\n    return surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    return (6*l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i * i\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x*x for x in range(1,n+1,2))\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for num in range(1,n+1):\n        if num%2!=0:\n            result+=num**2\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n):\n        if i%2 == 1:\n            total = total + (i**2)\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x*x for x in xrange(1, n, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i * i\n    return sum\n    "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1,n+1,2))\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1, n, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            ans = ans + i**2\n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(math.factorial(n)/(math.factorial(n-5)*math.factorial(5)))\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n*(n-1) / 2)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n - 1) * n / 2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int((n-1)*(n/2)**0.5 + 0.5)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    total = 0\n    while(n > 0):\n        total += 4 * (n-1)\n        n -= 1\n    return total\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    count = 0\n    while count < n:\n        num = (num * 10) + 5\n        count += 1\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return ((n-1)*n)/2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if n < len(result):\n        return result[n-1]\n    else:\n        for i in range(len(result), n):\n            result.append(result[i-2] + result[i-4])\n        return result[-1]\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    return find_star_num(n-1) + (n-1)*(n-2)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - 96\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return 32\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    val = ord(k)\n    return val\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    if k >= 97 and k <= 122:\n        return k - 96\n    elif k >= 65 and k <= 90:\n        return k - 64\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) > 122 or ord(k) < 97:\n        return -1\n    else:\n        return ord(k) - 96\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) < 128:\n        return ord(k)\n    else:\n        return ord(k) - 128\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = sum(x for i,x in enumerate(arr) if i % 2 == 0 and x % 2 == 0)\n    return res\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Your code here\n    sum = 0\n    for index in range(0, len(arr), 2):\n        if arr[index]%2 == 0:\n            sum += arr[index]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        total = total + arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Your code here\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if (arr[i] % 2 == 0):\n            sum_even = sum_even + arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i]%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(0, len(arr), 2) if arr[i]%2 == 0])\n    \n    \ndef count_dna_nucleotides(arr):  \n    '''\n    Write a python function to count the number of times each nucleotide in the DNA string \n    'ACGT' occurs in the string 'ACGTACGT'\n    '''\n    d = {'A':0, 'C':1, 'G':2, 'T':3}\n    return [d[x] for x in arr]\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[i] for i in range(0,len(arr),2))\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    import math\n    total = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)/6)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in range(n+1) if x%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(0, n+1) if i%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = 0\n    for i in range(2, n + 1, 2):\n        ans += (i ** 5)\n    return ans\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if (n < 1):\n        return 0\n    else:\n        return even_Power_Sum(n-1) + n**5\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    total = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #calculate the sum of the first n even numbers\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += (i ** 5)\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n    \ndef main():\n    print rear_extract([(1, 4), (3, 2), (4, 6), (5, 3)])\n    \nmain()"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_rear = []\n    for i in test_list:\n        list_rear.append(i[-1])\n    return list_rear\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    if not test_list:\n        return None\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # return [item[-1] for item in test_list]\n    return [item[-1] for item in test_list]\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    # return [item[0] for item in test_list]\n    return [item[0] for item in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup3 = ()\n    for i in range(0, len(test_tup1)):\n        test_tup3 += (test_tup1[i] - test_tup2[i], )\n    return test_tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x1-x2 for x1,x2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(tup1[i] - tup2[i] for i in range(len(tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))])\n    else:\n        raise Exception(\"Tuples are not the same length\")\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Get the length of both tuples.\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    # Create a dictionary to store the elements of the first tuple.\n    tup1_dict = {}\n    # For each element of the first tuple, add it to the dictionary with its corresponding index.\n    for i in range(tup1_len):\n        tup1_dict[i] = test_tup1[i]\n    # Create a dictionary to store the elements of the second tuple.\n    tup2_dict = {}\n    # For each element of the second tuple, add it to the dictionary with its corresponding index.\n    for i in range(tup2_len):\n        tup2_dict[i] = test_tup2[i]\n    # For each element of the first tuple, subtract it from the corresponding element of the second tuple.\n    for i in range(tup1_len):\n        tup1_dict[i] -= tup2_dict[i]\n    # Return the result.\n    return tup1_dict\n    \ndef count_letters(string):\n    '''\n    Write a function that takes in a string and counts how many times each letter appears in the string.\n    '''\n    # Get the length of the string.\n    str_len = len(string)\n    # Create a dictionary to store the letters and their corresponding counts.\n    letter_dict = {}\n    # For each letter of the string, if the letter has appeared before, add 1 to its corresponding count in the dictionary, otherwise set the count to 1.\n    for i in range(str_len):\n        if string[i] in letter_dict:\n            letter_dict[string[i]] += 1\n        else:\n            letter_dict[string[i]] = 1\n    # Return the dictionary.\n    return letter_dict\n    \ndef sum_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the numbers.\n    '''\n    # Get the length of the list.\n    len_list = len(list)\n    # Create a variable to store the sum of the list.\n    sum_list = 0\n    # For each number in the list, add it to the sum.\n    for i in range(len_list):\n        sum_list += list[i]\n    # Return the sum of the list.\n    return sum_list\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list of numbers and sorts them in ascending order.\n    '''\n    # Get the length of the list.\n    len_list = len(list)\n    # Create a list to store the sorted list.\n    sorted_list = []\n    # For each number in the list, if it is not in the sorted list, add it to the sorted list, otherwise print a message and return.\n    for i in range(len_list):\n        if list[i] not in sorted_list:\n            sorted_list.append(list[i])\n        else:\n            print('That number is already in the list!')\n            return\n    # Return the sorted list.\n    return sorted_list\n    \ndef swap_first_last(list):\n    '''\n    Write a function that takes in a list of numbers and swaps the first and last number.\n    '''\n    # Get the length of the list.\n    len_list = len(list)\n    # Create a variable to store the first number of the list.\n    first_num = list[0]\n    # Create a variable to store the last number of the list.\n    last_num = list[len_list - 1]\n    # Create a variable to store the first and last elements of the list.\n    first_last_list = [first_num, last_num]\n    # Get the length of the list.\n    len_list = len(list)\n    # Create a list to store the first and last elements of the list.\n    first_last_list = []\n    # For each number in the list, if it is not the first or last number, add it to the list.\n    for i in range(len_list):\n        if i!= 0 and i!= (len_list - 1):\n            first_last_list.append(list[i])\n    # Return the result.\n    return first_last_list\n    \ndef print_n_times(list, n):\n    '''\n    Write a function that takes in a list of numbers and an integer n, and prints the list n times.\n    '''\n    # Get the length of the list.\n    len_list = len(list)\n    # For each number in the list, print it n times.\n    for i in range(len_list):\n        print(list[i])\n        # If n is greater than 1, print the next number n - 1 times.\n        if n > 1:\n            print(list[i])\n            # For the next number n - 1, print it n - 2 times.\n            if n > 2:\n                print(list[i])\n                # For the next number n - 2, print it n - 3 times.\n                if n > 3:\n                    print(list[i])\n                    # For the next number n - 3, print it n - 4 times.\n                    if n > 4:\n                        print(list[i])\n    # Return the result.\n    return\n    \ndef print_n_times_v2(list, n):\n    '''\n    Write a function that takes in a list of numbers and an integer n, and prints the list n times.\n    '''\n    # Get the length of the list.\n    len_list = len(list)\n    # For each number in the list, print it n times.\n    for i in range(len_list):\n        print(list[i])\n        # If n is greater than 1, print the next number n - 1 times.\n        if n > 1:\n            print(list[i])\n            # For the next number n - 1, print it n - 2 times.\n            if n > 2:\n                print(list[i])\n                # For the next number n - 2, print it n - 3 times.\n                if n > 3:\n                    print(list[i])\n                    # For the next number n - 3, print it n - 4 times.\n                    if n > 4:\n                        print(list[i])\n    # Return the result.\n    return\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list with all duplicate values removed.\n    '''\n    # Get the length of the list.\n    len_list = len(list)\n    # Create a list to store the new list.\n    new_list = []\n    # For each number in the list, if it is not in the new list, add it to the new list.\n    for i in range(len_list):\n        if list[i] not in new_list:\n            new_list.append(list[i])\n    # Return the result.\n    return new_list\n    \ndef remove_duplicates_v2(list):\n    '''\n    Write a function that takes in a list of numbers and returns a new list with all duplicate values removed.\n    '''\n    # Get the length of the list.\n    len_list = len(list)\n    # Create a list to store the new list.\n    new_list = []\n    # For each number in the list, if it is not in the new list, add it to the new list.\n    for i in range(len_list):\n        if list[i] not in new_list:\n            new_list.append(list[i])\n    # Return the result.\n    return new_list\n    \ndef list_difference(list1, list2):\n    '''\n    Write a function that takes in two lists of numbers and returns a list with all the elements of the first list that are not in the second list.\n    '''\n    # Get the length of the first list.\n    len_list1 = len(list1)\n    # Get the length of the second list.\n    len_list2 = len(list2)\n    # Create a list to store the result.\n    new_list = []\n    # For each number in the first list, if it is not in the second list, add it to the new list."
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    out_tup = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        out_tup.append(tup1-tup2)\n    return tuple(out_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(operator.sub, test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0 or n==1:\n        return 1\n    return n*even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Coeff_sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            Coeff_sum += i/math.factorial(i)\n    return Coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    for i in range(n + 1):\n        binomial_coeff_sum += math.factorial(n) / ( math.factorial(i) * math.factorial(n - i))\n    return binomial_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int((math.factorial(2 * n))/((math.factorial(n)**2)*(math.factorial(n - 2 * n))))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    else:\n        # create a list of integer from 1 to n\n        myList = [i for i in range(1,n+1)]\n        # this list of integer represents the binomial coefficient with the numbers from 1 to n\n        myList.sort()\n        coeff = [math.factorial(n)/(math.factorial(x)*math.factorial(n-x)) for x in myList if x%2==0]\n        return sum(coeff)\n    \ndef main():\n    print(even_binomial_Coeff_Sum(25))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return even_binomial_Coeff_Sum(n - 1) + n / 2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return (n*even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-1))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_sum = 0\n    for i in range(0,n+1):\n        binomial_sum += even_binomial_Coeff(i,n)\n    return binomial_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        return 0\n    return int(math.factorial(2*n) / (math.factorial(n)**2))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #if n is not positive\n    if n<0:\n        print(\"n must be positive\")\n        return 0\n    #if n is 0,1,2\n    if n==0 or n==1 or n==2:\n        return 1\n    #if n is 1,3,5,7,9\n    if n==1 or n==3 or n==5 or n==7 or n==9:\n        return 2\n    #if n is 2,4,6,8\n    if n==2 or n==4 or n==6 or n==8:\n        return 3\n    #if n is 3,6,10,15,21\n    if n==3 or n==6 or n==10 or n==15 or n==21:\n        return 4\n    #if n is 4,8,12,16,22\n    if n==4 or n==8 or n==12 or n==16 or n==22:\n        return 5\n    #if n is 5,10,15,20,25,30,35,40,45,50\n    if n==5 or n==10 or n==15 or n==20 or n==25 or n==30 or n==35 or n==40 or n==45 or n==50:\n        return 6\n    #if n is 6,12,18,24,30,36,42,48,54,60\n    if n==6 or n==12 or n==18 or n==24 or n==30 or n==36 or n==42 or n==48 or n==54 or n==60:\n        return 7\n    #if n is 7,14,21,28,35,42,49,56,63,70\n    if n==7 or n==14 or n==21 or n==28 or n==35 or n==42 or n==49 or n==56 or n==63 or n==70:\n        return 8\n    #if n is 8,16,24,32,40,48,56,64,72,80\n    if n==8 or n==16 or n==24 or n==32 or n==40 or n==48 or n==56 or n==64 or n==72 or n==80:\n        return 9\n    #if n is 9,18,27,36,45,54,63,72,81,90\n    if n==9 or n==18 or n==27 or n==36 or n==45 or n==54 or n==63 or n==72 or n==81 or n==90:\n        return 10\n    #if n is 10,20,30,40,50,60,70,80,90\n    if n==10 or n==20 or n==30 or n==40 or n==50 or n==60 or n==70 or n==80 or n==90:\n        return 11\n    #if n is 11,22,34,46,58,70,82,94,106,118\n    if n==11 or n==22 or n==34 or n==46 or n==58 or n==70 or n==82 or n==94 or n==106 or n==118:\n        return 12\n    #if n is 12,24,36,48,60,72,84,96,108,120\n    if n==12 or n==24 or n==36 or n==48 or n==60 or n==72 or n==84 or n==96 or n==108 or n==120:\n        return 13\n    #if n is 13,26,38,50,62,74,86,98,110,122\n    if n==13 or n==26 or n==38 or n==50 or n==62 or n==74 or n==86 or n==98 or n==110 or n==122:\n        return 14\n    #if n is 14,28,40,52,64,76,88,100,112,124\n    if n==14 or n==28 or n==40 or n==52 or n==64 or n==76 or n==88 or n==100 or n==112 or n==124:\n        return 15\n    #if n is 15,30,42,54,66,78,90,102,114,126\n    if n==15 or n==30 or n==42 or n==54 or n==66 or n==78 or n==90 or n==102 or n==114 or n==126:\n        return 16\n    #if n is 16,32,44,56,68,80,92,104,116,128\n    if n==16 or n==32 or n==44 or n==56 or n==68 or n==80 or n==92 or n==104 or n==116 or n==128:\n        return 17\n    #if n is 17,34,46,58,70,82,94,106,118,130\n    if n==17 or n==34 or n==46 or n==58 or n==70 or n==82 or n==94 or n==106 or n==118 or n==130:\n        return 18\n    #if n is 18,36,48,60,72,84,96,108,120,132\n    if n==18 or n==36 or n==48 or n==60 or n==72 or n==84 or n==96 or n==108 or n==120 or n==132:\n        return 19\n    #if n is 19,38,50,62,74,86,98,110,122,134\n    if n==19 or n==38 or n==50 or n==62 or n==74 or n==86 or n==98 or n==110 or n==122 or n==134:\n        return 20\n    #if n is 20,40,52,64,76,88,100,112,124,136\n    if n==20 or n==40 or n==52 or n==64 or n==76 or n==88 or n==100 or n==112 or n==124 or n==136:\n        return 21\n    #if n is 21,42,54,66,78,90,102,114,126,138\n    if n==21 or n==42 or n==54 or n==66 or n==78 or n==90 or n==102 or n==114 or n==126 or n==138:\n        return 22\n    #if n is 22,44,56,68,80,92,104,116,128,140\n    if n==22 or n==44 or n==56 or n==68 or n==80 or n==92 or n==104 or n==116 or n==128 or n==140:\n        return 23\n    #if n is 23,46,58,70,82,94,106,118,130,142\n    if n==23 or n==46 or n==58 or n==70 or n==82 or n==94 or n==106 or n==118 or n==130 or n==142:\n        return 24\n    #if n is 24,48,60,72,84,96,108,120,132,144\n    if n==24 or n==48 or n==60 or n==72 or n==84 or n==96 or n==108 or n==120 or n==132 or n==144:\n        return 25\n    #if n is 25,50,62,74,86,98,110,122,134,146\n    if n==25 or n==50 or n==62 or n==74 or n==86 or n==98 or n==110 or n==122 or n==134 or n==146:\n        return 26\n    #if n is 26,52,64,76,88,100,112,124,136,148\n    if n==26 or n==52 or n==64 or n==76 or n==88 or n==100 or n==112 or n==124 or n==136 or n==148:\n        return 27\n    #if n is 27,54,66,78,90,102,114,126,138,150\n    if n==27 or n==54 or n==66 or n==78 or n==90 or n==102 or n==114 or n==126 or n==138 or n==150:\n        return 28\n    #if n is 28,56,68,80,92,104,116,128,140,152\n    if n==28 or n==56 or n==68 or n==80 or n==92 or n==104 or n==116 or n==128 or n==140 or n==152:\n        return 29\n    #if n is 29,60,72,84,96,108,120,132,144,156\n    if n==29 or n==60 or n==72 or n==84 or n==96 or n==108 or n==12"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    return pi*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #print r\n    #print h\n    #volume = math.pi*(r**2)*h\n    #print volume\n    #return volume\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**2*pi*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = math.pi * r**2 * h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return np.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h) / 3\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if r < 0 or h < 0:\n        return None\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r * r * h\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k in dict.keys():\n        if type(dict[k]) == type(n):\n            if dict[k] >= n:\n                yield k,dict[k]\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key]=value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key in dict:\n        if dict[key]>=n:\n            new_dict[key]=dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key, value in dict.items():\n        if value < n:\n            del dict[key]\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output={}\n    for key, value in dict.items():\n        if value >= n:\n            output[key]=value\n    return output\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k in dict:\n        if dict[k] < n:\n            del dict[k]\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #dictionary with integer n\n    new_dict={}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n    \n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if type(dict) == dict:\n        return {key:value for key,value in dict.items() if value >= n}\n    else:\n        return None\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    number_of_elements = 0\n    for i in test_tup:\n        if i[0] == test_tup[0][0]:\n            number_of_elements += 1\n    return number_of_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    values = list(test_tup)\n    key = values.pop()\n    \n    return values.count(key)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elements = []\n    for tup in test_tup:\n        for i in tup:\n            first_elements.append(i)\n    count = 0\n    for i in first_elements:\n        if i in test_tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    length = len(test_tup)\n    count = 0\n    for i in range(length):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    key_count = {}\n    for ele in test_tup:\n        if ele in key_count:\n            key_count[ele] += 1\n        else:\n            key_count[ele] = 1\n    return key_count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    count = 0\n    for i in test_tup:\n        if i in test_tup[:test_tup.index(i)]:\n            count += 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res = [i for i in test_tup if i == test_tup[0]]\n    return len(res)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    num_of_first_elements = 0\n    for i in xrange(len(test_tup)):\n        if test_tup[i] == 1:\n            num_of_first_elements += 1\n    return num_of_first_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = str(test_tup)\n    if test_tup[0] == ',':\n        return 0\n    else:\n        return len(test_tup.split(',')[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for item in test_tup:\n        if item < test_tup[0]:\n            count += 1\n        else:\n            return count\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    iteration = 0\n    while iteration < n:\n        num += 2*iteration + 1\n        iteration += 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    k = 1\n    total = 1\n    while k <= n:\n        total += 10*k\n        k += 1\n    return total\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count=0\n    for i in range(1,n+1):\n        count += i*(10*i-1)\n    if count == n:\n        return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    k = 0\n    while n-9*k*(k+1)//2 > 0:\n        k += 1\n    return k\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) * (2 * n + 1) // 6\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(n+1)/2)%10 == 0\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    #precompute\n    sn = 0\n    for i in range(10):\n        sn += i * 10 ** i\n    \n    #recursive\n    def _decagon(n, sn):\n        if n == 1:\n            return sn\n        else:\n            return _decagon(n - 1, sn - 10 ** (n - 1))\n    \n    return _decagon(n, sn)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <=0:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n**2+1)/2\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    for element in dlist:\n        if element == item:\n            return True, position\n        position += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return sequential_search_helper(dlist, item, 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n    return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for index, val in enumerate(dlist):\n        if val == item:\n            pos = index\n            break\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return (item in dlist, dlist.index(item))\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return (found,i)\n    return (found, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i, val in enumerate(dlist):\n        if val == item:\n            found = True\n            break\n    if found:\n        return (found, i)\n    return (found, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = True\n    for i in range(len(test_list)):\n        if test_list[i] in test_list[i+1:]:\n            unique_elements = False\n            break\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item in unique_list:\n            return False\n        else:\n            unique_list.append(item)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            return False\n        else:\n            d[i]=1\n    return True\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==0:\n        return True\n    if len(test_list)==1:\n        return True\n    if test_list[0]==test_list[1]:\n        return False\n    if test_list[0]!=test_list[1]:\n        return all_unique(test_list[1:])\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    new_list = set(test_list)\n    if len(new_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        smaller,larger = nums1, nums2\n    else:\n        smaller,larger = nums2, nums1\n    \n    result = []\n    for index in range(len(smaller)):\n        result.append(larger[index] - smaller[index])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1)==len(nums2)\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    m = len(nums1)\n    n = len(nums2)\n    sub = []\n    for i in range(0,m):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)>len(nums2):\n        return [nums2[i]-nums1[i] for i in range(len(nums1))]\n    else:\n        return [nums1[i]-nums2[i] for i in range(len(nums2))]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i] - nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    lst = []\n    for i in range(len(nums1)):\n        lst.append(nums1[i] - nums2[i])\n    return lst\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for num1,num2 in zip(nums1,nums2):\n        result.append(num1-num2)\n    return result\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit = [int(x) for x in str(n)]\n    freq = [digit.count(i) for i in range(10)]\n    if freq.count(1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    d = {'0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0}\n    str_n = str(n)\n    for i in range(len(str_n)):\n        d[str_n[i]] += 1\n        if d[str_n[i]] > int(str_n[i]):\n            return False\n    return True\n    \nprint validate(1234)\nprint validate(12345)\nprint validate(123456)"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    x = str(n)\n    r = {}\n    for x in x:\n        if x not in r:\n            r[x] = 1\n        else:\n            r[x] += 1\n    return len(r) <= len(x)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    a = str(n)\n    freq = [0]*10\n    for i in range(len(a)):\n        freq[int(a[i])] += 1\n    for i in range(10):\n        if freq[i]>i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    return all(n % i <= n / i for i in range(1, len(str(n))))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    number=str(n)\n    for digit in number:\n        if int(digit)>1:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = [int(i) for i in str(n)]\n    return len(set(d)) == len(d)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    assert type(n) == int, \"Invalid input!\"\n    return sorted(list(str(n))) == list(str(n)) and len(set(list(str(n)))) <= 10\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    new_n = n\n    n_l = []\n    for i in range(10):\n        c = 0\n        while new_n > 0:\n            digit = new_n % 10\n            if digit == i:\n                c += 1\n            new_n = new_n // 10\n        n_l.append(c)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Your code here\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    result = True\n    for item in list:\n        if item!= element:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        pass\n    else:\n        raise ValueError('Element %s not in list'%(element))\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)-1):\n        if list[i]!= list[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:], element)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(i == element for i in list)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text:\n        if text[0] == 'a' and (text[1] == 'b' or text[1] == 'b'):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match('ab+',text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'[ab]{2,3}', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab{2,3}$\"\n    return re.match(pattern,text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.lower().count('a') > 1 and text.lower().count('b') > 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a(.*)(b){2,3}', text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab+', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('ab{2,3}')\n    if pattern.search(text):\n        print('Found')\n    else:\n        print('Not Found')\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # aab\n    p = re.compile(r'\\ba{2,3}\\b')\n    if p.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search(r'ab{2,3}',text)\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k <= 1:\n        return max(a)\n    if n < k:\n        return max(a)\n    max_ending_here = max_so_far = 0\n    for i in range(k):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        else:\n            max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = sum(a[:k])\n    for i in xrange(k, n):\n        max_sum = max(max_sum+a[i], a[i])\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -sys.maxsize\n    for i in range(n-k+1):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[i+j]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == k:\n        return sum(a)\n    max_ending_here = max_so_far = a[0]\n    for i in range(1,n):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(n):\n        for j in range(n-k+1):\n            sum = 0\n            for l in range(k):\n                sum += a[j+l]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Need to calculate the sum of the array in O(n) time, store in a dictionary, and then keep returning the max.\n    '''\n    Find the max sum of the array in O(n) time, and store in a dictionary.\n    '''\n    sums = {}\n    max_sum = 0\n    for i in range(n):\n        if a[i] in sums:\n            sums[a[i]] += a[i]\n        else:\n            sums[a[i]] = a[i]\n    '''\n    Find the max sum of the array in O(1) time, and store in a dictionary.\n    '''\n    max_sum = max(sums.values())\n    '''\n    Find the max sum of the array in O(n) time, and store in a dictionary.\n    '''\n    if n % k!= 0:\n        max_sum = max(sums.values())\n    else:\n        sub_arrays = [a[i:i+k] for i in range(0, n, k)]\n        for sub_array in sub_arrays:\n            max_sum = max(max_sum, sum(sub_array))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if k > n: \n        return -1\n    if k == n: \n        return sum(a)\n    \n    b = [0] * n \n    \n    for i in range(0, n): \n        if i % k == 0: \n            b[i] = a[i] \n        else: \n            b[i] = max(a[i], a[i] + b[i - 1]) \n    \n    return max(b)\n    \nif __name__ == '__main__': \n    a = [-1, -1, -3, -2, -2, -3, -3, -5, -5, -5, -3, -2, -3, -3, -2, -1, -1, -2, -1, -1, -2, -1, -2, -3, -2, -1, -3, -2, -3, -4, -2, -3, -1, -1, -2, -3, -2, -1, -3, -2, -3, -2, -3, -1, -1, -2, -1, -1, -2, -1, -1, -3, -2, -2, -3, -1, -2, -1, -2, -3, -2, -1, -3, -2, -3, -2, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2, -1, -2, -1, -1, -2"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(k - 1):\n        a.insert(0, 0)\n        a.append(0)\n    result = 0\n    for i in range(n):\n        s = 0\n        for j in range(i, n + i):\n            s += a[j]\n            result = max(result, s)\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in xrange(0, n, k): \n        max_sum = max(max_sum, sum(a[i:i+k]))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    # Else if k == 1, then just return the maximum of current sum and the subarray starting with element\n    elif k == 1:\n        return max(0, a[0], max_sub_array_sum_repeated(a, n-1, k))\n    # Else, if k > 1, then create an array consisting of the maximum of the two, the maximum of the modified array obtained from repeating the given array k-1 times and the maximum of the modified array obtained from repeating the given array k-2 times\n    else:\n        # Initialise the new array\n        new_a = [0] * n\n        # To maintain the maximum subarray sum, we maintain two pointers to the new array and the original array\n        # We update the new array by adding the maximum of the current sum of the original array and the maximum of the modified array obtained from repeating the array after repeating the original array k-1 times\n        new_a[0] = max(a[0], max_sub_array_sum_repeated(a, n-1, k))\n        # At the same time, we also update the new array by adding the maximum of the original array and the maximum of the modified array obtained from repeating the array after repeating the array after repeating the array k-2 times\n        new_a[1] = max(a[0] + a[1], max_sub_array_sum_repeated(a, n-2, k))\n        # Now we repeat the process of updating the new array till the last element of the new array\n        for i in range(2, n):\n            new_a[i] = max(a[i], new_a[i-1] + a[i])\n        return max(new_a[n-1], new_a[n-2])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    total = 0\n    while n > 0:\n        total += (n % 10) * (n % 10)\n        n = n // 10\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # The sum of squares of first n even natural numbers is:\n    # (n * (n + 1) / 2) ** 2\n    # = n * (n ** 2 + n) / 4\n    # = n * (n ** 2 + n) / 2\n    # = n ** 2 * (n / 2)\n    # = n * (n + 1)\n    # = n * (n + 1) / 2\n    # = (n + 1) * n / 2\n    # = (n ** 2 + n) / 2\n    # = n * (n + 1) / 2\n    # = n * (n + 1) / 2\n    # = n * (n + 1)\n    # = n ** 2 + n\n    # = n * (n + 1)\n    # = n * (n + 1)\n    # = (n + 1) * n\n    # = n * n + n\n    # = n * (n + 1)\n    # = n * n + n\n    # = n * (n + 1)\n    # = n * (n + 1)\n    # = n * (n + 1)\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = (n + 1) * n\n    # = "
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n*(n+1)*(2*n+1)/6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x**2 for x in range(n) if x%2 == 0)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # first check if n is even\n    if n%2 == 0:\n        return n*(n+1)/2\n    else:\n        return n*(n+1)/2 + n/2\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    result = 0\n    while i <= n:\n        result += ((i*i) % 2)\n        i += 1\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    total = 0\n    while i <= n:\n        total += (i * i)\n        i += 2\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if not isinstance(n,int): \n        print \"The input is not an integer\"\n    elif n<1:\n        print \"The input is not a positive integer\"\n    else:\n        sum = 0\n        for i in range(0,n):\n            if i%2 == 0:\n                sum += i*i\n        return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return \"Number must be positive\"\n    elif type(n)!= int:\n        return \"The value of n must be an integer\"\n    else:\n        return sum([(i*i) for i in range(1, n+1) if i%2 == 0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i**2 for i in range(n) if i % 2 == 0)\nprint(square_Sum(100))\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    temp_list=[]\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n            temp_list=i\n    return temp_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = len(list1)\n    m = 0\n    for i in range(l):\n        if len(list1[i]) > m:\n            m = len(list1[i])\n    return m\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = max(map(len,list1))\n    return [e for e in list1 if len(e)==length]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = -1\n    for i in list1:\n        if len(i) > maxlen:\n            maxlen = len(i)\n    return maxlen\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for i in range(len(list1)):\n        if(len(list1[i])>maxlen):\n            maxlen = len(list1[i])\n    return maxlen\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        if len(i) == max(len(j) for j in list1):\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    m = len(list1)\n    if m == 0:\n        return []\n    else:\n        result = []\n        max1 = 0\n        for i in list1:\n            if len(i) > max1:\n                max1 = len(i)\n        for j in list1:\n            if len(j) == max1:\n                result.append(j)\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    n = len(list1)\n    l = [len(list1[i]) for i in range(n)]\n    return max(l)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    dp = [0 for i in range(k+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if j >= i:\n                dp[j] += dp[j-i]\n    return dp[-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    \n    if k == 1:\n        return 1\n    \n    return (count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k))\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_dp(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    n, k = int(n), int(k)\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0:\n                dp[i][j] = 1\n            elif j == 0:\n                dp[i][j] = 0\n            elif i == 1 and j == 1:\n                dp[i][j] = 2\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 3 or k < 2:\n        return 1\n    if n < 4:\n        return 2 ** (n - 1)\n    if k == 1:\n        return 2 ** n\n    if k == 2:\n        return 2 ** (n - 1) * 2\n    if k == 3:\n        return 2 ** (n - 2) * 4\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # if n is 0 or k is 0, there is no possible solution\n    if n == 0 or k == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0 or n == 0:\n        return 0\n    if k == 1:\n        return 1\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    table = [0 for _ in range(k + 1)]\n    table[0] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif k == 0:\n        return 0\n    elif k == 1:\n        return n\n    else:\n        if n < k:\n            return 0\n        else:\n            return (k * (k-1)) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0 or n == 0: \n        return 0\n    \n    if k == 1: \n        return n\n    \n    if n == 1: \n        return 1\n    \n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return 1\n    else:\n        return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n)//int(m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n/m\n    if q < 0:\n        return -find(n,m)\n    else:\n        return q\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return -1\n    if n==0:\n        return 0\n    if n<0 and m<0:\n        return 0\n    if n>0 and m<0:\n        return -1\n    return abs(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    assert int(n) == n, \"Input number must be integer\"\n    assert int(m) == m, \"Input number must be integer\"\n    n = int(n)\n    m = int(m)\n    if m > n:\n        return find(m,n)\n    else:\n        return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m==0:\n        return m\n    else:\n        return find(n,m-1)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s=math.sqrt(w**2 + h**2)\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==0:\n        return None\n    else:\n        return h/w\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b=w\n    a=h\n    if w>h:\n        a,b=b,a\n    return a*a+b*b*(1-w/h)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef area_of_circle(r):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return math.pi * r**2\ndef hypo(x,y):\n    '''\n    Write a function to compute the hypotenuse of a right angle triangle.\n    '''\n    return (x**2 + y**2)**0.5\ndef area_of_triangle(b,h):\n    '''\n    Write a function to compute the area of a right angle triangle.\n    '''\n    return b*h/2\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\ndef triangle_area(a,b,c):\n    '''\n    Write a function to compute the area of a right angle triangle.\n    '''\n    s = (a+b+c) / 2\n    return math.sqrt(s * (s-a) * (s-b) * (s-c))\ndef add(a,b):\n    '''\n    Write a function to add two numbers.\n    '''\n    return a + b\ndef x_intersect(m1, c1, m2, c2):\n    '''\n    Write a function to find the x-intercept of a line with two points\n    '''\n    x = (c2 - c1) / (m1 - m2)\n    return x\ndef triangle_area(a,b,c):\n    '''\n    Write a function to compute the area of a right angle triangle.\n    '''\n    s = (a+b+c) / 2\n    return math.sqrt(s * (s-a) * (s-b) * (s-c))\ndef area_of_rectangle(l,w):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    return l*w\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\ndef triangle_area(a,b,c):\n    '''\n    Write a function to compute the area of a right angle triangle.\n    '''\n    s = (a+b+c) / 2\n    return math.sqrt(s * (s-a) * (s-b) * (s-c))\ndef create_complex(r,i):\n    '''\n    Write a function to create a complex number.\n    '''\n    return r + i\ndef find_angle(r1, r2):\n    '''\n    Write a function to find the angle between two lines with the same slope.\n    '''\n    if r1 > r2:\n        r1, r2 = r2, r1\n    if r1 == r2:\n        return math.pi/2\n    else:\n        return math.atan(r2 / r1)\ndef find_angle(r1, r2):\n    '''\n    Write a function to find the angle between two lines with the same slope.\n    '''\n    if r1 > r2:\n        r1, r2 = r2, r1\n    if r1 == r2:\n        return math.pi/2\n    else:\n        return math.atan(r2 / r1)\ndef angle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the angle between three points.\n    '''\n    d1 = distance(x1,y1,x2,y2)\n    d2 = distance(x2,y2,x3,y3)\n    d3 = distance(x1,y1,x3,y3)\n    if d1 == 0 or d2 == 0 or d3 == 0:\n        return None\n    else:\n        return math.acos((d2**2 + d3**2 - d1**2) / (2 * d2 * d3))\ndef angle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the angle between three points.\n    '''\n    d1 = distance(x1,y1,x2,y2)\n    d2 = distance(x2,y2,x3,y3)\n    d3 = distance(x1,y1,x3,y3)\n    if d1 == 0 or d2 == 0 or d3 == 0:\n        return None\n    else:\n        return math.acos((d2**2 + d3**2 - d1**2) / (2 * d2 * d3))\ndef compute_slope(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope of a line with two points.\n    '''\n    return (y2 - y1) / (x2 - x1)\ndef compute_slope(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope of a line with two points.\n    '''\n    return (y2 - y1) / (x2 - x1)\ndef compute_slope(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope of a line with two points.\n    '''\n    return (y2 - y1) / (x2 - x1)\ndef compute_slope(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope of a line with two points.\n    '''\n    return (y2 - y1) / (x2 - x1)\ndef compute_slope(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope of a line with two points.\n    '''\n    return (y2 - y1) / (x2 - x1)\ndef angle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the angle between three points.\n    '''\n    d1 = distance(x1,y1,x2,y2)\n    d2 = distance(x2,y2,x3,y3)\n    d3 = distance(x1,y1,x3,y3)\n    if d1 == 0 or d2 == 0 or d3 == 0:\n        return None\n    else:\n        return math.acos((d2**2 + d3**2 - d1**2) / (2 * d2 * d3))\ndef find_angle(r1, r2):\n    '''\n    Write a function to find the angle between two lines with the same slope.\n    '''\n    if r1 > r2:\n        r1, r2 = r2, r1\n    if r1 == r2:\n        return math.pi/2\n    else:\n        return math.atan(r2 / r1)\ndef find_angle(r1, r2):\n    '''\n    Write a function to find the angle between two lines with the same slope.\n    '''\n    if r1 > r2:\n        r1, r2 = r2, r1\n    if r1 == r2:\n        return math.pi/2\n    else:\n        return math.atan(r2 / r1)\ndef find_angle(r1, r2):\n    '''\n    Write a function to find the angle between two lines with the same slope.\n    '''\n    if r1 > r2:\n        r1, r2 = r2, r1\n    if r1 == r2:\n        return math.pi/2\n    else:\n        return math.atan(r2 / r1)\ndef compute_slope(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope of a line with two points.\n    '''\n    return (y2 - y1) / (x2 - x1)\ndef compute_slope(x1,y1,x2,y2):\n    ''"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        angle = math.sqrt((w**2)+(h**2))\n        c = h**2 + angle**2\n        b = w**2 + angle**2\n        a = 2*w*h\n        return \"%.2f\" %((a-b)/2)\n    except:\n        return \"invalid input\"\ndef alternate_cube(a,b,c):\n    '''\n    Write a function to check if a cube is perfect (i.e. equal sides) or not.\n    '''\n    if (a**2==b**2+c**2) or (b**2==a**2+c**2) or (c**2==b**2+a**2):\n        return \"perfect\"\n    else:\n        return \"not perfect\"\ndef factorial(n):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    try:\n        n = int(n)\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    except:\n        return \"invalid input\"\ndef count_combinations(n,k):\n    '''\n    Write a function to count the number of ways a person can choose k things out of n things.\n    '''\n    try:\n        n = int(n)\n        k = int(k)\n        if k > n:\n            return 0\n        else:\n            return factorial(n)/(factorial(k)*factorial(n-k))\n    except:\n        return \"invalid input\"\ndef palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    s = s.lower()\n    d = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for char in s:\n        d[char] += 1\n    if len(s)%2 == 1:\n        if d['a']%2 == 1:\n            return \"not a palindrome\"\n        else:\n            return \"a palindrome\"\n    else:\n        if d['a']%2 == 1:\n            return \"not a palindrome\"\n        elif d['a'] == 0:\n            return \"a palindrome\"\n        else:\n            return \"not a palindrome\"\ndef fizzbuzz(n):\n    '''\n    Write a function to print all the fizzbuzz numbers from 1 to n.\n    '''\n    for i in range(1,n+1):\n        if i%15 == 0:\n            print(\"fizzbuzz\")\n        elif i%3 == 0:\n            print(\"fizz\")\n        elif i%5 == 0:\n            print(\"buzz\")\n        else:\n            print(i)\ndef all_factors(n):\n    '''\n    Write a function to find all the factors of a number.\n    '''\n    l = []\n    i = 1\n    while i <= n:\n        if n%i == 0:\n            l.append(i)\n        i += 1\n    l.sort()\n    return l\ndef all_perfect_squares(n):\n    '''\n    Write a function to find all the perfect squares less than n.\n    '''\n    i = 1\n    while i <= n:\n        l = all_factors(i)\n        if sum(l) == i:\n            print(i)\n        i += 1\ndef all_perfect_cubes(n):\n    '''\n    Write a function to find all the perfect cubes less than n.\n    '''\n    i = 1\n    while i <= n:\n        l = all_factors(i**3)\n        if sum(l) == i**3:\n            print(i)\n        i += 1\ndef nth_root(n,r):\n    '''\n    Write a function to find the nth root of a number.\n    '''\n    try:\n        return math.pow(n,1/r)\n    except:\n        return \"invalid input\"\ndef all_perfect_pentaples(n):\n    '''\n    Write a function to find all the perfect pentaples less than n.\n    '''\n    i = 1\n    while i <= n:\n        l = all_factors(i)\n        if sum(l) == i:\n            print(i)\n        if sum(l) == i**2:\n            print(i)\n        if sum(l) == (i**2)+(i**2):\n            print(i)\n        i += 1\ndef number_harmonic_mean(n):\n    '''\n    Write a function to find the harmonic mean of a number.\n    '''\n    n = 1/n\n    return n\ndef cuberoot(n):\n    '''\n    Write a function to find the cuberoot of a number.\n    '''\n    try:\n        n = int(n)\n        return math.pow(n,1/3)\n    except:\n        return \"invalid input\"\ndef sum_of_the_squares(n):\n    '''\n    Write a function to find the sum of the squares of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += math.pow(i,2)\n    return s\ndef sum_of_the_cubes(n):\n    '''\n    Write a function to find the sum of the cubes of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += math.pow(i,3)\n    return s\ndef sum_of_the_cubes_and_squares(n):\n    '''\n    Write a function to find the sum of the cubes and squares of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n        s += math.pow(i,2)\n    return s\ndef sum_of_the_cubes_and_squares_and_four_sums(n):\n    '''\n    Write a function to find the sum of the cubes and squares of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n        s += math.pow(i,2)\n    return s + 4*s\ndef sum_of_the_cubes_and_squares_and_four_sums_for_n_numbers(n):\n    '''\n    Write a function to find the sum of the cubes and squares of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n        s += math.pow(i,2)\n    return s + 4*s\ndef sum_of_the_cubes_and_squares_and_four_sums_for_n_plus_one_numbers(n):\n    '''\n    Write a function to find the sum of the cubes and squares of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n        s += math.pow(i,2)\n    return s + 4*s + 4*s\ndef sum_of_the_cubes_and_squares_and_four_sums_for_n_plus_one_numbers(n):\n    '''\n    Write a function to find the sum of the cubes and squares of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i\n        s += math.pow(i,2)\n    return s + 4*s + 4*s + 4*s\ndef sum_of_the_cubes_and_squares_and_four_sums_for_n_plus_one_numbers(n):\n    '''\n    Writ"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    return a\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    return a\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = math.sqrt(w**2+h**2)\n    return b\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = math.sqrt(w**2+h**2)\n    return b\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = math.sqrt(w**2+h**2)\n    return b\ndef rightangled_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = math.sqrt(w**2+h**2)\n    return b\ndef dist_three(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    dist = math.sqrt((x2-x1)**2+(y2-y1)**2)\n    return dist\ndef dist_three(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    dist = math.sqrt((x2-x1)**2+(y2-y1)**2)\n    return dist\ndef dist_three(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    dist = math.sqrt((x2-x1)**2+(y2-y1)**2)\n    return dist\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = (w*h)/2\n    return area\ndef area(w,h):\n    '''\n    Write a functio"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2\ndef second_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef second_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef second_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef third_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef third_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef third_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef third_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef third_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fourth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fourth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fourth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fourth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fourth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fourth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fourth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fifth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fifth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fifth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fifth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef fifth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef sixth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef sixth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef sixth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef sixth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef sixth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef sixth_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef seventh_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef seventh_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef seventh_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef seventh_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef seventh_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef seventh_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''\n    return l1*l2/(l3**2)\ndef seventh_perpendicular(l1,l2,l3):\n    '''\n    Write a function to find the area of a right triangle, given the lengths of the three sides.\n    '''"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s=(h**2+w**2)**0.5\n    return s\ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef nearest_right_angle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2+w**2)/2\ndef is_rightangled(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2==w**2+h**2:\n        return True\n    else:\n        return False\ndef is_rightangled2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)==math.sqrt(w**2+h**2)\ndef is_rightangled3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)==w*h**0.5\ndef get_area_of_triangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return w*h**0.5\ndef get_area_of_triangle2(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return w*h/2\ndef get_area_of_triangle3(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return w*h*math.sqrt(3)/4\ndef is_triangle_right(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2<w**2+h**2:\n        return True\n    else:\n        return False\ndef is_triangle_right2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2<w**2+h**2\ndef is_triangle_right3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2<=w**2+h**2\ndef get_perimeter_of_triangle(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return w+h\ndef get_perimeter_of_triangle2(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return w+h+math.sqrt(w**2+h**2)\ndef get_perimeter_of_triangle3(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return w+h+math.sqrt(w**2+h**2)\ndef is_triangle_equal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2==w**2+h**2:\n        return True\n    else:\n        return False\ndef is_triangle_equal2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2==w**2+h**2\ndef is_triangle_equal3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2==w**2+h**2\ndef get_area_of_triangle4(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return 0.5*w*h\ndef get_area_of_triangle5(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return 0.5*w*h\ndef is_triangle_equal4(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2==w**2+h**2:\n        return True\n    else:\n        return False\ndef is_triangle_equal5(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2==w**2+h**2\ndef is_triangle_equal6(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2==w**2+h**2\ndef get_perimeter_of_triangle5(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return w+h+math.sqrt(w**2+h**2)\ndef get_perimeter_of_triangle6(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return w+h+math.sqrt(w**2+h**2)\ndef is_triangle_equal7(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2==w**2+h**2:\n        return True\n    else:\n        return False\ndef is_triangle_equal8(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2==w**2+h**2\ndef is_triangle_equal9(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2==w**2+h**2\ndef get_area_of_triangle7(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return 0.5*w*h\ndef get_area_of_triangle8(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return 0.5*w*h\ndef is_triangle_equal10(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2==w**2+h**2:\n        return True\n    else:\n        return False\ndef is_triangle_equal11(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2==w**2+h**2\ndef is_triangle_equal12(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2==w**2+h**2\ndef get_perimeter_of_triangle9(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return w+h+math.sqrt(w**2+h**2)\ndef get_perimeter_of_triangle10(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return w+h+math.sqrt(w**2+h**2)\ndef is_triangle_equal13(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    ''"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in range(len(listval)):\n        if listval[i]>max_val:\n            max_val = listval[i]\n    return max_val\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = -1\n    for v in listval:\n        if v > max:\n            max = v\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    if len(listval) == 2:\n        return max(listval[0], listval[1])\n    return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = None\n    for i in listval:\n        if max is None:\n            max = i\n        elif max < i:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    if isinstance(listval,list) == False:\n        return None\n    else:\n        for val in listval:\n            if val > max_val:\n                max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #return max(listval)\n    listval = listval[:]\n    listval.sort()\n    return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max = listval[0]\n        for item in listval:\n            if item > max:\n                max = item\n        return max\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    for i in range(1, int(number/2)+1):\n        if number % i == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    result = 0\n    for i in range(2, int(number/2) + 1):\n        if number % i == 0:\n            result += i\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    #check for zero\n    if number <= 0:\n        return 0\n    div = [i for i in range(1,number+1) if number%i == 0]\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(2, int(number/2)):\n        if number % i == 0:\n            div_sum += i\n    if number % 2 == 0:\n        div_sum += number/2\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = set([])\n    for i in range(1, int(number / 2) + 1):\n        if number % i == 0:\n            div.add(i)\n            div.add(number / i)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = [1]\n    for i in xrange(2, number / 2 + 1):\n        if number % i == 0:\n            divs.append(i)\n    divs.append(number)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    divisor = 1\n    if number == 0:\n        return divisor_sum\n    elif number == 1:\n        return divisor\n    elif number == 2:\n        return divisor_sum + 1\n    else:\n        while divisor < number:\n            if number % divisor == 0:\n                divisor_sum += divisor\n            divisor += 1\n        return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    if number == 2:\n        return 1\n    divs = range(1,int(number/2)+1)\n    for i in divs:\n        if number % i == 0:\n            return i + sum_div(number/i)\n    return sum_div(number)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            sum_divisor += divisor\n    return sum_divisor\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)):\n            if(arr[i] > arr[j]):\n                count += 1\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(1, len(arr)): \n        for j in range(i): \n            if arr[i] < arr[j]: \n                Inv_Count += 1\n    return Inv_Count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # If the array contains only one element then it is sorted\n    if n==1: \n        return 0,arr \n    # If the array contains more than one elements then \n    # we have to split the array into two sub-arrays\n    # in order to count the number of inversions in each sub-array\n    mid = n//2\n    # find the number of inversions in the left-half\n    count_left,left_arr = get_Inv_Count(arr[:mid]) \n    # find the number of inversions in the right-half\n    count_right,right_arr = get_Inv_Count(arr[mid:]) \n    # find the number of inversions by comparing elements in \n    # the left-half and right-half sub-arrays\n    count = count_left + count_right\n    # merge the two sub-arrays into a single array\n    i,j = 0,0\n    for k in range(n): \n        if i==mid: \n            arr[k] = right_arr[j] \n            j += 1\n        elif j==n-mid: \n            arr[k] = left_arr[i] \n            i += 1\n        elif left_arr[i] <= right_arr[j]: \n            arr[k] = left_arr[i] \n            i += 1\n        else: \n            arr[k] = right_arr[j] \n            j += 1\n            count += mid - i \n    return count,arr\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return int(len(arr)/2)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return 0, arr\n    else:\n        m = len(arr) // 2\n        a = arr[:m]\n        b = arr[m:]\n        c, a = get_Inv_Count(a)\n        d, b = get_Inv_Count(b)\n        e = merge(a, b)\n        f = count_Inv(e)\n        return (c + d + f, e)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in xrange(len(arr)): \n        for j in xrange(i+1, len(arr)):\n            if (arr[i] > arr[j]): \n                count = count+1\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return arr, 0\n    else:\n        mid = len(arr)//2\n        left, left_inv = get_Inv_Count(arr[:mid])\n        right, right_inv = get_Inv_Count(arr[mid:])\n        merged, count = merge(left, right)\n        return merged, (left_inv+right_inv+count)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    #write a function here to count inversions in an array\n    count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]: \n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2: \n        return 0\n    else:\n        mid = len(arr)/2\n        left = arr[:mid]\n        right = arr[mid:]\n        if len(left) > 1:\n            left_inv = get_Inv_Count(left)\n        else:\n            left_inv = 0\n        if len(right) > 1:\n            right_inv = get_Inv_Count(right)\n        else:\n            right_inv = 0\n        i = 0\n        j = 0\n        temp = 0\n        count = 0\n        while(i<len(left) and j <len(right)):\n            if left[i]<right[j]:\n                temp = left[i]\n                i += 1\n            else:\n                temp = right[j]\n                j += 1\n                count += len(left)-i\n        while(i<len(left)):\n            temp = left[i]\n            i += 1\n            count += len(left)-i\n        while(j<len(right)):\n            temp = right[j]\n            j += 1\n            count += len(right)-j\n        return count+left_inv+right_inv\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for i in list1:\n        if type(i) == list:\n            flattened.extend(flatten_list(i))\n        else:\n            flattened.append(i)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return flatten_list_2(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for elem in list1:\n        if type(elem) is list:\n            list2 += flatten_list(elem)\n        else:\n            list2.append(elem)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    import collections\n    def flatten(list1):\n        result = []\n        for el in list1:\n            if isinstance(el, collections.Iterable) and not isinstance(el, basestring):\n                result.extend(flatten(el))\n            else:\n                result.append(el)\n        return result\n    return flatten(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for x in list1:\n        if type(x) is list:\n            res.extend(flatten_list(x))\n        else:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, (list, tuple)):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(([x] if not isinstance(x, list) else flatten_list(x) for x in list1), [])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(chain(*list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    newlist = []\n    def inner_flatten(list2):\n        for item in list2:\n            if isinstance(item, list):\n                inner_flatten(item)\n            else:\n                newlist.append(item)\n    inner_flatten(list1)\n    return newlist\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if type(item) is list:\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for s,t in stdata:\n        d[s] += t\n    return max(d.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_tot = 0\n    for tup in stdata:\n        tot = 0\n        for val in tup:\n            tot += val\n        max_tot = max(max_tot, tot)\n    return max_tot\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # max_dic = defaultdict(int)\n    max_dic = defaultdict(list)\n    for i in stdata:\n        max_dic[i[0]].append(i[1])\n    # print(max_dic)\n    # max_dic = max(max_dic.items(), key=operator.itemgetter(1))[0]\n    max_dic = max(max_dic.items(), key=lambda x: max(x[1]))[0]\n    return max_dic\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    grouped = defaultdict(list)\n    for st,vals in stdata:\n        grouped[st].append(vals)\n    return max(grouped.items(), key=lambda x: max(x[1]))\ndef max_aggregate(stdata):\n    '''\n    Write a functio"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    # for each tuple\n    for i in range(len(stdata)):\n        aggregate_list.append(sum(stdata[i]['values']))\n    return aggregate_list\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = [0]*len(stdata[0])\n    for i in range(len(stdata[0])):\n        data = [x[i] for x in stdata]\n        res[i] = max(data)\n    return res\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    res = [0]*len(stdata[0])\n    for i in range(len(stdata[0])):\n        data = [x[i] for x in stdata]\n        res[i] = min(data)\n    return res\ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    res = [0]*len(stdata[0])\n    for i in range(len(stdata[0])):\n        data = [x[i] for x in stdata]\n        res[i] = sum(data)/len(data)\n    return res\ndef median_aggregate(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    data = [x[0] for x in stdata]\n    data.sort()\n    if len(data)%2 == 0:\n        return (data[len(data)/2-1]+data[len(data)/2])/2\n    return data[len(data)/2]\ndef group_by_day(stdata):\n    '''\n    Write a function to group the list of tuples by their first column.\n    '''\n    res = defaultdict(list)\n    for x in stdata:\n        res[x[0]].append(x)\n    return res\ndef group_by_time(stdata):\n    '''\n    Write a function to group the list of tuples by their second column.\n    '''\n    res = defaultdict(list)\n    for x in stdata:\n        res[x[1]].append(x)\n    return res\ndef calculate_energy_usage(stdata):\n    '''\n    Write a function to calculate the energy usage for each user from the list of tuples.\n    '''\n    res = defaultdict(dict)\n    for x in stdata:\n        day = x[0]\n        user = x[2]\n        if user not in res:\n            res[user]['current'] = 0\n            res[user]['accumulate'] = 0\n        res[user]['current'] += float(x[3])\n        res[user]['accumulate'] += float(x[3])\n    return res\ndef calculate_average_energy_usage(stdata):\n    '''\n    Write a function to calculate the average energy usage for each user from the list of tuples.\n    '''\n    res = defaultdict(dict)\n    for x in stdata:\n        day = x[0]\n        user = x[2]\n        if user not in res:\n            res[user]['current'] = 0\n            res[user]['accumulate'] = 0\n        res[user]['current'] += float(x[3])\n        res[user]['accumulate'] += float(x[3])\n    for user in res:\n        res[user]['average'] = res[user]['accumulate']/len(stdata)\n    return res\ndef calculate_top_energy_usage(stdata):\n    '''\n    Write a function to calculate the top energy usage for each user from the list of tuples.\n    '''\n    res = defaultdict(dict)\n    for x in stdata:\n        day = x[0]\n        user = x[2]\n        if user not in res:\n            res[user]['current'] = 0\n            res[user]['accumulate'] = 0\n        res[user]['current'] += float(x[3])\n        res[user]['accumulate'] += float(x[3])\n    for user in res:\n        res[user]['average'] = res[user]['accumulate']/len(stdata)\n        res[user]['top'] = max(res[user]['current'],res[user]['accumulate'])\n    return res\ndef calculate_top_day(stdata):\n    '''\n    Write a function to calculate the top energy usage for each user from the list of tuples.\n    '''\n    res = defaultdict(dict)\n    for x in stdata:\n        day = x[0]\n        user = x[2]\n        if user not in res:\n            res[user]['current'] = 0\n            res[user]['accumulate'] = 0\n        res[user]['current'] += float(x[3])\n        res[user]['accumulate'] += float(x[3])\n    for user in res:\n        res[user]['average'] = res[user]['accumulate']/len(stdata)\n        res[user]['top'] = max(res[user]['current'],res[user]['accumulate'])\n    return res\ndef calculate_top_user(stdata):\n    '''\n    Write a function to calculate the top energy usage for each user from the list of tuples.\n    '''\n    res = defaultdict(dict)\n    for x in stdata:\n        day = x[0]\n        user = x[2]\n        if user not in res:\n            res[user]['current'] = 0\n            res[user]['accumulate'] = 0\n        res[user]['current'] += float(x[3])\n        res[user]['accumulate'] += float(x[3])\n    for user in res:\n        res[user]['average'] = res[user]['accumulate']/len(stdata)\n        res[user]['top'] = max(res[user]['current'],res[user]['accumulate'])\n    return res\ndef calculate_energy_consumption(stdata):\n    '''\n    Write a function to calculate the energy consumption for each user from the list of tuples.\n    '''\n    res = defaultdict(dict)\n    for x in stdata:\n        day = x[0]\n        user = x[2]\n        if user not in res:\n            res[user]['current'] = 0\n            res[user]['accumulate'] = 0\n        res[user]['current'] += float(x[3])\n        res[user]['accumulate'] += float(x[3])\n    for user in res:\n        res[user]['consumption'] = res[user]['accumulate'] - res[user]['current']\n    return res\ndef calculate_average_energy_consumption(stdata):\n    '''\n    Write a function to calculate the average energy consumption for each user from the list of tuples.\n    '''\n    res = defaultdict(dict)\n    for x in stdata:\n        day = x[0]\n        user = x[2]\n        if user not in res:\n            res[user]['current'] = 0\n            res[user]['accumulate'] = 0\n        res[user]['current'] += float(x[3])\n        res[user]['accumulate'] += float(x[3])\n    for user in res:\n        res[user]['average'] = res[user]['accumulate']/len(stdata)\n        res[user]['consumption'] = res[user]['accumulate'] - res[user]['current']\n    return res\ndef calculate_top_energy_consumption(stdata):\n    '''\n    Write a function to calculate the top energy consumption for each user from the list of tuples.\n    '''\n    res = defaultdict(dict)\n    for x in stdata:\n        day = x[0]\n        user = x[2]\n        if user not in res:\n            res[user]['current'] = 0\n            res[user]['accumulate'] = 0\n        res[user]['current'] += float(x[3])\n        res[user]['accumulate'] += float(x[3])\n    for user in res:\n        res[user]['average'] = res[user]['accumulate']/len(stdata)\n        res[user]['consumption'] = res[user]['ac"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    for each_num in stdata:\n        a = each_num[0]\n        b = each_num[1]\n        c = each_num[2]\n        if a > b and a > c:\n            print a\n        elif b > a and b > c:\n            print b\n        elif c > a and c > b:\n            print c\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return reduce(lambda x,y:x+y, [stdata[i][1] for i in range(len(stdata))])\ndef max_aggregate_inplace(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    return total\ndef max_aggregate_inplace2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return total\ndef max_aggregate_inplace3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata[0][1]\ndef max_aggregate_inplace4(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace5(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace6(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return total\ndef max_aggregate_inplace7(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace8(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace9(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace10(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace11(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace12(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace13(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace14(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace15(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace16(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace17(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace18(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace19(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace20(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace21(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace22(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace23(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len(stdata)):\n        total += stdata[i][1]\n    stdata[0][1] = total\n    return stdata\ndef max_aggregate_inplace24(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in range(len"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(sum(x) for x in stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = None\n    for entry in stdata:\n        if max_val is None:\n            max_val = entry[1]\n        else:\n            max_val = max(max_val, entry[1])\n    return max_val\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n): \n        if n == 0: return 1\n        return count(n-1) + count(n-2)\n    def count_two(n):\n        if n == 0: return 1\n        return count_two(n-1) + count_two(n-2)\n    return count_two(n) - count(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 102\n    if n == 6:\n        return 213\n    if n == 7:\n        return 864\n    if n == 8:\n        return 2221\n    return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3) + count_binary_seq(n-4) + count_binary_seq(n-5) + count_binary_seq(n-6) + count_binary_seq(n-7) + count_binary_seq(n-8)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bit_seq = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in bit_seq[:n]) == sum(int(bit) for bit in bit_seq[-n:]):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(2,n+1):\n        a,b,c = b,c,a+b+c\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<=0:\n        return 0\n    if n==1:\n        return 2\n    if n==2:\n        return 5\n    if n>2:\n        return count_binary_seq(n-1)+(2**n-1)*count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def count_seq(n): \n        cnt = 0\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            for i in range(0, n):\n                for j in range(0, n):\n                    if (i + j) == (n - 1):\n                        cnt += 1\n        return cnt\n    \n    for i in range(0, 2 * n):\n        if count_seq(i) > 0:\n            print i, count_seq(i)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0,2**n):\n        if sum([int(i/2**x)%2 for x in range(n-1,-1,-1)]) == sum([int(i%2**x)%2 for x in range(0,n)]):\n            count += 1\n    return count\n    \nprint(count_binary_seq(2))\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    '''\n    #This program finds the count of all possible binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n    n = 2\n    sum = 0\n    for i in range(n):\n        sum = sum + 2**i\n    #print sum\n    count = 0\n    for i in range(n):\n        count = count + count_binary_seq(i)\n    return count\n    '''\n    n = 2\n    sum = 0\n    for i in range(n):\n        sum = sum + 2**i\n    print sum\n    count = 0\n    for i in range(n):\n        count = count + count_binary_seq(i)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    memo = {}\n    memo[(0, 0)] = 1\n    def count_seq(n, last_sum):\n        if (n, last_sum) not in memo:\n            ans = 0\n            for i in xrange(n):\n                ans += count_seq(n - 1, last_sum - i - 1)\n            memo[(n, last_sum)] = ans\n        return memo[(n, last_sum)]\n    return count_seq(n, n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while True:\n        if type(d) is not dict:\n            return depth\n        if d == {}:\n            return depth\n        else:\n            depth += 1\n            d = d[list(d.keys())[0]]\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while d!= {}:\n        depth += 1\n        d = d.values()[0]\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.itervalues()) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    else:\n        return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        return 1+max(dict_depth(i) for i in d.itervalues())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.itervalues())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def key_depth(d, k):\n        if k in d.keys():\n            return key_depth(d, k) + 1\n        else:\n            return 0\n    return key_depth(d, list(d.keys())[0])\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    new_arr = []\n    for i in range(len(arr)) :\n        if i in rotations :\n            new_arr.append(arr[i])\n    for j in range(len(ranges)) :\n        if j in rotations :\n            new_arr.append(arr[ranges[j]])\n    return new_arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations==0 :\n        return arr[index]\n    else :\n        ranges = ranges//rotations\n        return find_Element(arr,ranges,rotations-1,index*ranges)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = ranges[index]\n    end = ranges[index+1]\n    \n    rot = rotations[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    cnt = 0\n    for i in range(len(arr)) :\n        if cnt == index :\n            return arr[rotations[i]]\n        cnt += 1\n    return arr[rotations[len(rotations)-1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for rotation in rotations :\n        if index < rotation :\n            return arr[rotation]\n        index = index - rotation\n    return arr[rotations[-1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    size = len(arr)\n    for i in range(rotations) :\n        if (index + i) >= size :\n            index = index - size\n        if index == arr[index+i] :\n            return arr[index+i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if arr[index] == 0 :\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(ranges) : \n        return arr[-1]\n    else : \n        for i in range(ranges[index]) : \n            arr = np.rot90(arr)\n        return arr[arr[0].index(rotations[index])] \n        \narr = np.array([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    s = arr[index]\n    for i in range(rotations) :\n        s = s - ranges + 1\n    return s\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    d={}\n    for i in range(len(ranges)) :\n        if ranges[i] in d :\n            d[ranges[i]].append(i)\n        else :\n            d[ranges[i]]=[i]\n    tmp=sorted(ranges)\n    for i in range(len(rotations)) :\n        if rotations[i]==len(ranges) :\n            return tmp[rotations[i]]\n        else :\n            rotations[i]+=1\n            tmp[rotations[i]]=d[tmp[rotations[i]]][rotations[i]]\n    return tmp[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    wordlist =[]\n    for word in words:\n        if word[0]=='p' and len(word)>=3:\n            wordlist.append(word)\n    return wordlist\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return_list = []\n    for word in words:\n        if word.startswith('p'):\n            return_list.append(word)\n    return return_list\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=['peter','tom','jerry','paul','george','kenny']\n    return [p[i] for i in range(len(p)) if words[i].startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for w in words:\n        if w[0] == 'p':\n            res.append(w)\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return i\n            \ndef end_withn(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'n'.\n    '''\n    for i in words:\n        if i[-1] == 'n':\n            return i\n            \ndef char_frequency(word):\n    '''\n    Write a function to return a dictionary with the frequency of each character in a string.\n    '''\n    freq = {}\n    for i in word:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \ndef group_by_length(words):\n    '''\n    Write a function to group a list of words by length.\n    '''\n    l = {}\n    for i in words:\n        if len(i) in l:\n            l[len(i)].append(i)\n        else:\n            l[len(i)] = [i]\n    return l\n    \ndef word_length(words):\n    '''\n    Write a function to return a list of word lengths.\n    '''\n    l = []\n    for i in words:\n        l.append(len(i))\n    return l\n    \ndef remove_punctuation(words):\n    '''\n    Write a function to remove punctuation from a list of strings\n    '''\n    s = []\n    for i in words:\n        s.append(re.sub(r'[^\\w\\s]', '', i))\n    return s\n    \ndef remove_doubles(words):\n    '''\n    Write a function to remove duplicate words in a list.\n    '''\n    l = []\n    for i in words:\n        if i not in l:\n            l.append(i)\n    return l\n    \ndef anagram(words):\n    '''\n    Write a function to return a list of anagrams for a given list of words\n    '''\n    s = []\n    for i in words:\n        s.append(''.join(sorted(i)))\n    return [i for i in words if ''.join(sorted(i)) == i]\n    \ndef numbers_in_words(words):\n    '''\n    Write a function to return a list of numbers in words\n    '''\n    l = []\n    for i in words:\n        s = re.sub(r'[^\\w\\s]', '', i)\n        if len(s) > 0:\n            s = int(s)\n            l.append(s)\n    return l\n    \ndef duplicate_words(words):\n    '''\n    Write a function to return a list of all the duplicate words in a list\n    '''\n    return [i for i in words if words.count(i) > 1]\n    \ndef words_by_length(words):\n    '''\n    Write a function to return a dictionary of words by length.\n    '''\n    d = {}\n    for i in words:\n        if len(i) in d:\n            d[len(i)].append(i)\n        else:\n            d[len(i)] = [i]\n    return d\n    \ndef palindromes(words):\n    '''\n    Write a function to return a list of palindromes in a list of words\n    '''\n    s = []\n    for i in words:\n        s.append(re.sub(r'[^\\w\\s]', '', i))\n    return [i for i in words if i == i[::-1]]\n    \ndef count_unique(words):\n    '''\n    Write a function to return the number of unique words in a list of words\n    '''\n    return len(set(words))\n    \ndef count_double(words):\n    '''\n    Write a function to return the number of double words in a list of words\n    '''\n    l = []\n    for i in words:\n        if i in l:\n            l.append(i)\n    return len(l)\n    \ndef unique_anagrams(words):\n    '''\n    Write a function to return a list of words that have all unique anagrams.\n    '''\n    s = []\n    for i in words:\n        s.append(''.join(sorted(i)))\n    return [i for i in words if ''.join(sorted(i)) == i]\n    \ndef words_by_anagrams(words):\n    '''\n    Write a function to return a dictionary of words by anagrams\n    '''\n    d = {}\n    for i in words:\n        if i in d:\n            d[i].append(i)\n        else:\n            d[i] = [i]\n    return d\n    \ndef common_words(words):\n    '''\n    Write a function to return a list of common words between two lists\n    '''\n    s = set(words[0]).intersection(set(words[1]))\n    return list(s)\n    \ndef letters_in_word(words):\n    '''\n    Write a function to return a list of letters in a given word\n    '''\n    return list(set(words))\n    \ndef first_letter(words):\n    '''\n    Write a function to return the first letter of a word\n    '''\n    return [i[0] for i in words]\n    \ndef last_letter(words):\n    '''\n    Write a function to return the last letter of a word\n    '''\n    return [i[-1] for i in words]\n    \ndef even_odd(words):\n    '''\n    Write a function to return a list of words containing the letter 'e' or 'o'\n    '''\n    return [i for i in words if 'e' in i or 'o' in i]\n    \ndef count_vowels(words):\n    '''\n    Write a function to return a list of all words containing three consecutive vowels\n    '''\n    s = re.findall(r'\\w*[aeiou]{3}\\w*',''.join(words))\n    return [i for i in words if i in s]\n    \ndef is_permutation(words):\n    '''\n    Write a function to return true if the two lists are permutations of each other\n    '''\n    s = set(words[0])\n    for i in words:\n        s.intersection_update(set(i))\n    return len(s) == 1\n    \ndef split_in_half(words):\n    '''\n    Write a function to return a list of words where each word is in the middle of a list of words\n    '''\n    return [i[len(i)//2-1:len(i)//2+1] for i in words]\n    \ndef remove_duplicates(words):\n    '''\n    Write a function to return a list of words with duplicates removed\n    '''\n    return [i for i in words if i not in words[words.index(i)+1:]]\n    \ndef list_of_words_count(words):\n    '''\n    Write a function to return a list of words and their count\n    '''\n    l = {}\n    for i in words:\n        if i in l:\n            l[i] += 1\n        else:\n            l[i] = 1\n    return l\n    \ndef list_of_words_count_reversed(words):\n    '''\n    Write a function to return a list of words and their count\n    '''\n    l = {}\n    for i in words:\n        if i in l:\n            l[i] += 1\n        else:\n            l[i] = 1\n    l = list(reversed(sorted(l, key=l.get)))\n    return l\n    \ndef list_of_words_count_inverted(words):\n    '''\n    Write a function to return a list of words and their count\n    '''\n    l = {}\n    for i in words:\n        if i in l:\n            l[i] += 1\n        else:\n            l[i] = 1\n    l = list(sorted(l, key=l.get))\n    l = list(reversed(l))\n    return l\n    \ndef sort_in_alpha(words):\n    '''\n    Write "
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith(\"p\"):\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    if a[index] < k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == n:\n        return 0\n    if index == n:\n        return a[k]\n    max_sum = -sys.maxsize\n    for i in range(index, n):\n        if a[i] > a[k] and a[i] + max_sum > max_sum + a[i]:\n            max_sum = a[i] + max_sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -sys.maxsize\n    if index == n:\n        return a[index-1]\n    if index < n and a[index] <= k:\n        max_sum = max(max_sum, a[index-1] + max_sum_increasing_subseq(a, n, index+1, k))\n    if a[index] > k:\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index+1, k))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return 0\n    elif k == index:\n        return a[k]\n    \n    max_sum = a[k]\n    for i in range(k+1, index+1):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k+1) + a[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # print index, k, a, n\n    if index >= n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return 0\n    if index == 0:\n        return a[index]\n    max_value = 0\n    for i in range(index):\n        max_value = max(max_value, max_sum_increasing_subseq(a, n, i, k))\n    if index - 1 < k:\n        return max_value\n    return max(max_value, max_sum_increasing_subseq(a, n, index - 1, k) + a[index - 1])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < n:\n        return a[index]\n    else:\n        return k\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    # If prefix[index] < k then consider all prefixes with index\n    if a[index] < k:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    # Else return the sum of previous prefixes + max_sum_increasing_subseq(array, index + 1, k)\n    return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < n:\n        # if i is in the array, the kth element is after i.\n        # We choose max(a[index], a[index]+max_sum_increasing_subseq(a, n, index+1, k))\n        return max(a[index]+max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n    else:\n        # The kth element is after index.\n        # If we include the kth element, the sum is the sum of elements before index (excluding kth element) + kth element\n        # Sums before index excluding kth element is a[index]+max_sum_increasing_subseq(a, n, index+1, k-1)\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k-1)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if index == k:\n        return a[k]\n    if index > k:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i][m:n] for i in range(len(tuplex))])\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex[m:n])\n    return tuplex[m:n]\ndef zip_tuple(tuplex,m,n):\n    '''\n    Write a function to get a zip of a tuple.\n    '''\n    #print(zip(tuplex[0:m],tuplex[m:n]))\n    return zip(tuplex[0:m],tuplex[m:n])\ndef unzip_tuple(tuplex,m,n):\n    '''\n    Write a function to get an unzip of a tuple.\n    '''\n    #print(list(zip(tuplex[m:n],tuplex[0:m])))\n    return list(zip(tuplex[m:n],tuplex[0:m]))\ndef reverse_list(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    #print(lst[::-1])\n    return lst[::-1]\ndef rotate_list(lst,n):\n    '''\n    Write a function to rotate a list.\n    '''\n    #print(lst[n:])+lst[:n]\n    return lst[n:]+lst[:n]\ndef xor_two_lists(listx,listy):\n    '''\n    Write a function to get the xor of two lists.\n    '''\n    #print(list(set(listx)^set(listy)))\n    return list(set(listx)^set(listy))\ndef chunk_list(lst,n):\n    '''\n    Write a function to get a chunk of a list.\n    '''\n    return lst[n:]+lst[:n]\ndef permute_list(lst,n):\n    '''\n    Write a function to get a permutation of a list.\n    '''\n    #print(list(lst[:n])+list(lst[n:]))\n    return list(lst[:n])+list(lst[n:])\ndef single_list(lst,n):\n    '''\n    Write a function to get a single element from a list.\n    '''\n    #print(lst[n])\n    return lst[n]\ndef list_to_string(lst):\n    '''\n    Write a function to get a string from a list.\n    '''\n    #print(''.join(str(lst)))\n    return ''.join(str(lst))\ndef add_string(s1,s2):\n    '''\n    Write a function to get the string with all the letter of a string from a tuple.\n    '''\n    return s1+s2\ndef append_string(s1,s2):\n    '''\n    Write a function to get the string with all the letter of a string from a tuple.\n    '''\n    #print(s1+s2)\n    return s1+s2\ndef count_list(lst,n):\n    '''\n    Write a function to get the count of a letter from a list.\n    '''\n    #print(lst.count(n))\n    return lst.count(n)\ndef count_list_items(lst,n):\n    '''\n    Write a function to get the count of a letter from a list.\n    '''\n    #print(list(set(lst)))\n    return list(set(lst))\ndef count_list_elements(lst,n):\n    '''\n    Write a function to get the count of a letter from a list.\n    '''\n    #print(lst.count(n))\n    return lst.count(n)\ndef compare_list(lst1,lst2):\n    '''\n    Write a function to get the items of two lists that are in both lists.\n    '''\n    #print(list(set(lst1)&set(lst2)))\n    return list(set(lst1)&set(lst2))\ndef count_list_elements_from_string(lst,s):\n    '''\n    Write a function to get the count of a letter from a string.\n    '''\n    #print(lst.count(s))\n    return lst.count(s)\ndef remove_from_list(lst,n):\n    '''\n    Write a function to get the elements of a list from a tuple.\n    '''\n    #print(lst[:n])+lst[n+1:]\n    return lst[:n]+lst[n+1:]\ndef add_list_items(lst1,lst2):\n    '''\n    Write a function to get the elements of a list from a tuple.\n    '''\n    #print(lst1+lst2)\n    return lst1+lst2\ndef append_list(lst1,lst2):\n    '''\n    Write a function to get the elements of a list from a tuple.\n    '''\n    #print(lst1+lst2)\n    return lst1+lst2\ndef list_from_string(s):\n    '''\n    Write a function to get a list from a string.\n    '''\n    #print(list(s))\n    return list(s)\ndef list_from_string_reverse(s):\n    '''\n    Write a function to get a list from a string.\n    '''\n    #print(list(s[::-1]))\n    return list(s[::-1])\ndef list_from_string_sort(s):\n    '''\n    Write a function to get a list from a string.\n    '''\n    #print(sorted(list(s)))\n    return sorted(list(s))\ndef list_from_string_sort_reverse(s):\n    '''\n    Write a function to get a list from a string.\n    '''\n    #print(sorted(list(s[::-1])))\n    return sorted(list(s[::-1]))\ndef copy_list(lst):\n    '''\n    Write a function to copy a list.\n    '''\n    #print(lst[:])\n    return lst[:]\ndef join_list(lst,sep):\n    '''\n    Write a function to join a list to a string.\n    '''\n    #print(sep.join(lst))\n    return sep.join(lst)\ndef remove_from_string(s,c):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    #print(s.replace(c,''))\n    return s.replace(c,'')\ndef add_to_string(s,c):\n    '''\n    Write a function to add a character to a string.\n    '''\n    #print(s+c)\n    return s+c\ndef remove_from_string_reverse(s,c):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    #print(s.replace(c,''))\n    return s.replace(c,'')\ndef add_to_string_reverse(s,c):\n    '''\n    Write a function to add a character to a string.\n    '''\n    #print(s+c)\n    return s+c\ndef string_to_list(s):\n    '''\n    Write a function to get a list from a string.\n    '''\n    #print(list(s))\n    return list(s)\ndef list_to_string_reverse(lst):\n    '''\n    Write a function to get a string from a list.\n    '''\n    #print(list(lst[::-1]))\n    return list(lst[::-1])\ndef list_to_string(lst):\n    '''\n    Write a function to get a string from a list.\n    '''\n    #print(list(lst))\n    return list(lst)\ndef list_to_string_reverse(lst):\n    '''\n    Write a function to get a string from a list.\n    '''\n    #print(list(lst[::-1]))\n    return list(lst[::-1])\ndef reverse_string(s):\n    '''\n    Write a function to get a string from a list"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        return tuplex[m-1:n]\n    else:\n        return tuplex[m:n-1]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(n):\n        colon.append(tuplex[m+i])\n    return colon\ndef check_guess(guess,secret_code):\n    '''\n    Checks to see if a player's guess is correct.\n    '''\n    correct=0\n    for i in range(len(secret_code)):\n        if secret_code[i]==guess[i]:\n            correct+=1\n    return correct\ndef gcd(a,b):\n    '''\n    Uses the Euclid's algorithm to find the greatest common divisor of two numbers.\n    '''\n    while b!=0:\n        t=a%b\n        a=b\n        b=t\n    return a\ndef euler_totient(n):\n    '''\n    Calculates the Euler totient of a number.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if gcd(i,n)!=1:\n            count+=1\n    return count\ndef get_possible_ciphertext(n):\n    '''\n    For a given secret code, this function determines the possible plaintext.\n    '''\n    possible_plaintext=[]\n    count=euler_totient(n)\n    for i in range(1,n):\n        if gcd(i,n)==1:\n            count-=1\n            possible_plaintext.append(i)\n    return possible_plaintext\ndef calculate_likely_key_size(guess):\n    '''\n    For a given guess, this function calculates the most likely key size.\n    '''\n    possible_plaintext=get_possible_ciphertext(len(guess))\n    possible_key_size=[]\n    for i in range(1,len(guess)+1):\n        if i in possible_plaintext:\n            possible_key_size.append(i)\n    return possible_key_size\ndef bf_cipher(guess,key_size):\n    '''\n    This function uses brute force to find the key.\n    '''\n    key=[]\n    for i in range(key_size):\n        key.append(0)\n    possible_plaintext=get_possible_ciphertext(key_size)\n    for i in range(len(possible_plaintext)):\n        for j in range(key_size):\n            key[j]+=possible_plaintext[i]**j\n    guess_possible_ciphertext=[]\n    for i in range(len(guess)):\n        guess_possible_ciphertext.append(guess[i]**key[i])\n    return gcd(guess_possible_ciphertext[0],guess_possible_ciphertext[1])\ndef better_cipher(guess,key_size):\n    '''\n    This function uses more advanced techniques to find the key.\n    '''\n    key=[]\n    for i in range(key_size):\n        key.append(0)\n    for i in range(key_size):\n        possible_plaintext=get_possible_ciphertext(key_size)\n        for j in range(len(possible_plaintext)):\n            key[i]+=possible_plaintext[j]**(i+j)\n    guess_possible_ciphertext=[]\n    for i in range(len(guess)):\n        guess_possible_ciphertext.append(guess[i]**key[i])\n    return gcd(guess_possible_ciphertext[0],guess_possible_ciphertext[1])\ndef ecm(n,guess):\n    '''\n    This function uses the Extended Euclid's algorithm to find the multiplicative inverse of a number.\n    '''\n    if gcd(n,guess)!=1:\n        return None\n    x1=1\n    x2=0\n    y1=0\n    y2=1\n    while True:\n        q=guess/n\n        r=guess%n\n        x=x2-q*x1\n        y=y2-q*y1\n        guess=n\n        n=r\n        x2=x1\n        x1=x\n        y2=y1\n        y1=y\n        if r==0:\n            break\n    return x2\ndef get_public_keys(n,guess):\n    '''\n    This function calculates the public key for a number.\n    '''\n    return (n*guess)%ecm(n,guess)\ndef ecm_cipher(guess,key_size,n):\n    '''\n    This function uses the Extended Euclid's algorithm to find the multiplicative inverse of a number, then multiplies the number by the key to decrypt the ciphertext.\n    '''\n    public_key=get_public_keys(n,guess)\n    key=[]\n    for i in range(key_size):\n        key.append(0)\n    for i in range(key_size):\n        key[i]=ecm(public_key,guess**(i+1))\n    return key\ndef ecm_plaintext(guess,key,n):\n    '''\n    This function finds the plaintext by decrypting the ciphertext.\n    '''\n    cipher=[]\n    for i in range(len(guess)):\n        cipher.append((guess[i]*key[i])%ecm(n,guess))\n    return cipher\ndef ecm_decrypt(cipher,key_size,n):\n    '''\n    This function uses the Extended Euclid's algorithm to find the multiplicative inverse of a number, then multiplies the number by the key to decrypt the ciphertext.\n    '''\n    public_key=get_public_keys(n,guess)\n    key=[]\n    for i in range(key_size):\n        key.append(0)\n    for i in range(key_size):\n        key[i]=ecm(public_key,cipher[i]**(i+1))\n    return key\ndef ecm_decrypt_better(cipher,key_size,n):\n    '''\n    This function uses more advanced techniques to find the key.\n    '''\n    public_key=get_public_keys(n,guess)\n    key=[]\n    for i in range(key_size):\n        key.append(0)\n    for i in range(key_size):\n        key[i]=ecm(public_key,cipher[i]**(i+1))\n    return key\ndef better_cipher_decrypt(cipher,key_size,n):\n    '''\n    This function uses more advanced techniques to find the key.\n    '''\n    public_key=get_public_keys(n,guess)\n    key=[]\n    for i in range(key_size):\n        key.append(0)\n    for i in range(key_size):\n        key[i]=ecm(public_key,cipher[i]**(i+1))\n    key_inv=[]\n    for i in range(len(key)):\n        key_inv.append(ecm(n,key[i]))\n    return [key_inv,key]\ndef better_cipher_decrypt_better(cipher,key_size,n):\n    '''\n    This function uses more advanced techniques to find the key.\n    '''\n    public_key=get_public_keys(n,guess)\n    key=[]\n    for i in range(key_size):\n        key.append(0)\n    for i in range(key_size):\n        key[i]=ecm(public_key,cipher[i]**(i+1))\n    key_inv=[]\n    for i in range(len(key)):\n        key_inv.append(ecm(n,key[i]))\n    return [key_inv,key]\ndef best_ecm_decrypt(cipher,key_size,n):\n    '''\n    This function uses more advanced techniques to find the key.\n    '''\n    public_key=get_public_keys(n,guess)\n    key=[]\n    for i in range(key_size):\n        key.appen"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[i])):\n            if i==m and j==n:\n                return tuplex[i][j]\n            \ndef pop_tuplex(tuplex,m,n):\n    '''\n    Write a function to pop a tuple from a list of tuples.\n    '''\n    tuplex[m].pop(n)\n    return tuplex\n    \ndef tail_tuplex(tuplex,m):\n    '''\n    Write a function to get a tail of a tuple.\n    '''\n    return tuplex[m][len(tuplex[m])-1]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = tuplex[m]\n    if len(tuplex)>n:\n        x = tuplex[m][n]\n    return x\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuplex[:m]\n    tuplex.extend(tuplex[-n:])\n    return tuplex\ndef tuple_colon(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuplex[:m]\n    tuplex=tuplex[-n:]\n    return tuplex\ndef box_of_shapes(shapes,size=None):\n    '''\n    Given a tuple of tuples, return a tuple of tuples.\n    '''\n    if size is None:\n        size=len(shapes[0])\n    return tuple([ tuple([ row[i] for row in shapes ]) for i in range(size) ])\ndef box_of_shapes_2(shapes,size=None):\n    '''\n    Given a tuple of tuples, return a tuple of tuples.\n    '''\n    if size is None:\n        size=len(shapes[0])\n    return tuple([tuple(row[i] for row in shapes) for i in range(size)])\ndef box_of_shapes_3(shapes,size=None):\n    '''\n    Given a tuple of tuples, return a tuple of tuples.\n    '''\n    if size is None:\n        size=len(shapes[0])\n    return tuple([tuple(row[i] for row in shapes) for i in range(size)])\ndef box_of_shapes_4(shapes,size=None):\n    '''\n    Given a tuple of tuples, return a tuple of tuples.\n    '''\n    if size is None:\n        size=len(shapes[0])\n    return tuple(tuple(row[i] for row in shapes) for i in range(size))\ndef shapes_of_box(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([ tuple([box[i][j] for j in range(len(box))]) for i in range(len(box[0])) ])\ndef shapes_of_box_2(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_3(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple(tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0])))\ndef shapes_of_box_4(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_5(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_6(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_7(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_8(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_9(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_10(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_11(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_12(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_13(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_14(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_15(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_16(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_17(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_18(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_19(box,shapes):\n    '''\n    Given a tuple of tuples and a tuple of tuples, return a tuple of tuples.\n    '''\n    return tuple([tuple(box[i][j] for j in range(len(box))) for i in range(len(box[0]))])\ndef shapes_of_box_20(box,shapes):\n    '''\n    Given a tuple of tuples and a tupl"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    try:\n        return tuplex[m-1:n]\n    except IndexError:\n        return 'Invalid index'\ndef list_k(lst,k):\n    '''\n    Write a function to get a kth element of a list.\n    '''\n    return lst[k-1]\ndef sublist(lst,start,end):\n    '''\n    Write a function to get a sublist of a list.\n    '''\n    try:\n        return lst[start-1:end]\n    except IndexError:\n        return 'Invalid index'\ndef first_count(lst,k):\n    '''\n    Write a function to get the number of elements less than k in a list.\n    '''\n    return lst.count(k)\ndef reverse(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    return lst[::-1]\ndef swap(lst,a,b):\n    '''\n    Write a function to swap two elements of a list.\n    '''\n    return lst[:a] + lst[a:b+1] + lst[b+1:]\ndef gcd(a,b):\n    '''\n    Write a function to get the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef add_num(a,b,c):\n    '''\n    Write a function to get the sum of three numbers.\n    '''\n    return a+b+c\ndef multiply_num(a,b):\n    '''\n    Write a function to get the product of two numbers.\n    '''\n    return a*b\ndef all_same(lst):\n    '''\n    Write a function to test whether all elements of a list are the same.\n    '''\n    if lst[0] == lst[1] == lst[2]:\n        return True\n    else:\n        return False\ndef str_rev(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\ndef str_compare(string,new):\n    '''\n    Write a function to compare two strings.\n    '''\n    if string == new:\n        return True\n    else:\n        return False\ndef list_sort(lst):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(lst)\ndef str_format(string,mod):\n    '''\n    Write a function to format a string.\n    '''\n    return string.format(mod)\ndef find_num(lst,k):\n    '''\n    Write a function to find the index of k in a list.\n    '''\n    try:\n        return lst.index(k)\n    except ValueError:\n        return 'Not found'\ndef max_num(lst):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    return max(lst)\ndef string_num_mul(string):\n    '''\n    Write a function to get the product of a string with the numbers 1 to 5.\n    '''\n    return int(string) * 5\ndef three_sum(lst,target):\n    '''\n    Write a function to get a 3-summable list.\n    '''\n    if target < 0:\n        return 'Negative number cannot be a 3-sum'\n    elif len(lst) < 3:\n        return 'Not enough numbers'\n    else:\n        soln = []\n        lst.sort()\n        for i in range(len(lst)-2):\n            if lst[i] > target:\n                break\n            else:\n                left = i+1\n                right = len(lst)-1\n                while left < right:\n                    if lst[left] + lst[right] > target - lst[i]:\n                        right -= 1\n                    elif lst[left] + lst[right] < target - lst[i]:\n                        left += 1\n                    else:\n                        soln.append([lst[i],lst[left],lst[right]])\n                        left += 1\n                        right -= 1\n        return soln\ndef zip_lists(lst,lst2):\n    '''\n    Write a function to combine two lists as if they were zipped together.\n    '''\n    return list(zip(lst,lst2))\ndef zip_dict(dct,lst):\n    '''\n    Write a function to combine two dicts as if they were zipped together.\n    '''\n    return {k:dct[k] for k in lst}\ndef count_str(string,ch):\n    '''\n    Write a function to count the number of times a character occurs in a string.\n    '''\n    return string.count(ch)\ndef sum_range(lst,start,end):\n    '''\n    Write a function to get the sum of all numbers in a list within a given range.\n    '''\n    try:\n        return sum(lst[start-1:end])\n    except IndexError:\n        return 'Invalid index'\ndef avg_list(lst):\n    '''\n    Write a function to get the average of a list of numbers.\n    '''\n    return sum(lst) / len(lst)\ndef avg_num(num):\n    '''\n    Write a function to get the average of a list of numbers.\n    '''\n    return sum(num) / len(num)\ndef second_max(lst):\n    '''\n    Write a function to get the second highest number of a list.\n    '''\n    lst.sort()\n    return lst[-2]\ndef sort_by_length(lst):\n    '''\n    Write a function to sort a list by length.\n    '''\n    return sorted(lst,key=len)\ndef sorted_add(lst,k):\n    '''\n    Write a function to get the sum of numbers that are sorted in ascending order.\n    '''\n    i = 0\n    for j in range(len(lst)):\n        i += lst[j]\n        if lst[j] < k:\n            return i\n        else:\n            return i\ndef factorial(num):\n    '''\n    Write a function to get the factorial of a number.\n    '''\n    if num < 0:\n        return 'Not possible'\n    elif num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\ndef max_dict(dct):\n    '''\n    Write a function to get the max value in a dictionary.\n    '''\n    return max(dct.values())\ndef find_substr(string,substring):\n    '''\n    Write a function to find a substring in a string.\n    '''\n    try:\n        return string.index(substring)\n    except ValueError:\n        return 'Not found'\ndef is_anagram(string1,string2):\n    '''\n    Write a function to test whether two strings are anagrams.\n    '''\n    return sorted(string1) == sorted(string2)\ndef get_longest(lst):\n    '''\n    Write a function to get the longest string in a list.\n    '''\n    lst.sort(key=len)\n    return lst[-1]\ndef get_combination(lst,num):\n    '''\n    Write a function to get the combinations of all elements of a list.\n    '''\n    if num == 0:\n        return [[]]\n    elif num < 0:\n        return 'Invalid number'\n    else:\n        lst_copy = deepcopy(lst)\n        combo = get_combination(lst_copy,num-1)\n        for element in lst_copy:\n            for sublist in combo:\n                sublist.append(element)\n        return combo\ndef print_list(lst):\n    '''\n    Write a function to print all elements of a list in one line.\n    '''\n    for element in lst:\n        print(element,end=', ')\n    print('')\ndef print_lst(lst):\n    '''\n    Write a function to print al"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=deepcopy(tuplex)\n    #tuplex=tuplex[0:n]\n    tuplex=tuplex[m:n]\n    return tuplex\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return\n    \n    products = []\n    products_list = []\n    \n    for i in range(N):\n        products.append([nums1[i], nums2[i]])\n        \n    for i in range(len(products)):\n        products_list.append(products[i][0] * products[i][1])\n    \n    return max(products_list)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import numpy as np\n    nums1 = np.array(nums1)\n    nums2 = np.array(nums2)\n    return np.sort(np.prod(nums1[:N], axis=0), axis=None)[-1], np.sort(np.prod(nums2[:N], axis=0), axis=None)[-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) * len(nums2):\n        raise ValueError('N must be less than or equal to the number of lists')\n    return max((reduce(lambda x, y: x * y, nums1[i:i + N]) for i in range(len(nums1) - N + 1)),\n              (reduce(lambda x, y: x * y, nums2[i:i + N]) for i in range(len(nums2) - N + 1)))\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return sorted([n1*n2 for n1 in nums1 for n2 in nums2 if n1!=n2], reverse = True)[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_product = -float('inf')\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > largest_product:\n                largest_product = product\n    return largest_product\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import functools\n    import operator\n    if not N:\n        return []\n    if not nums1:\n        return [functools.reduce(operator.mul, nums2[:N])]\n    if not nums2:\n        return [functools.reduce(operator.mul, nums1[:N])]\n    return [functools.reduce(operator.mul, [nums1[i], nums2[j]]) for i in range(min(len(nums1), N)) for j in range(min(len(nums2), N))]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) * len(nums2):\n        return\n    nums1.sort(reverse = True)\n    nums2.sort(reverse = True)\n    \n    final_list = []\n    count = 0\n    while count < N:\n        val = nums1[0] * nums2[0]\n        final_list.append(val)\n        nums1.pop(0)\n        nums2.pop(0)\n        count += 1\n    \n    return final_list\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ret = []\n    for i in range(N):\n        max1 = 1\n        max2 = 1\n        for j in nums1:\n            max1 = max(max1, j ** i)\n        for k in nums2:\n            max2 = max(max2, k ** i)\n        ret.append(max1 * max2)\n    return ret\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        for j in range(N):\n            if i < j:\n                products.append(nums1[i] * nums2[j])\n    return max(products)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n        \ndef factorial(n):   \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):   \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef factorial(n):   \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a + b\n        \ndef difference(a,b):   \n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    return a - b\n        \ndef product(a,b):   \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a * b\n        \ndef quotient(a,b):   \n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    return a / b\n        \ndef remainder(a,b):   \n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a % b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n        \ndef factorial(n):   \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):   \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a + b\n        \ndef difference(a,b):   \n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    return a - b\n        \ndef product(a,b):   \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a * b\n        \ndef quotient(a,b):   \n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    return a / b\n        \ndef remainder(a,b):   \n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a % b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n        \ndef factorial(n):   \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):   \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a + b\n        \ndef difference(a,b):   \n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    return a - b\n        \ndef product(a,b):   \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a * b\n        \ndef quotient(a,b):   \n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    return a / b\n        \ndef remainder(a,b):   \n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a % b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n        \ndef factorial(n):   \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):   \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a + b\n        \ndef difference(a,b):   \n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    return a - b\n        \ndef product(a,b):   \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    return a * b\n        \ndef quotient(a,b):   \n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    return a / b\n        \ndef remainder(a,b):   \n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a % b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n        \ndef factorial(n):   \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):   \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if "
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b\n    \ndef print_full_name(a, b):\n    '''\n    Write a python function to print first and last name.\n    '''\n    print(\"Hello %s %s! You just delved into python.\" % (a, b))\n    \ndef fizzbuzz(a):\n    '''\n    Write a python function to print fizz, buzz and fizzbuzz for multiples of 3, 5 and 15.\n    '''\n    for i in range(1, a+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n            \ndef string_splosion(a):\n    '''\n    Write a python function to create a string of 5 stars in the middle of another string.\n    '''\n    print(a)\n    b = int(len(a) / 2)\n    c = a[0:b] + '*' + a[b:]\n    return c\n    \ndef string_splosion(a):\n    '''\n    Write a python function to create a string of 5 stars in the middle of another string.\n    '''\n    b = len(a)\n    c = '*' * b\n    d = a[0:b] + c[b:]\n    return d\n    \ndef decrypt(a,b):\n    '''\n    Write a python function to return a string where all occurences of the first char have been moved to the last, so \"Hello\" yields \"lloHe\".\n    '''\n    d = a[0] + a[1:].replace(a[0], '', 1)\n    return d\n    \ndef encrypt(a,b):\n    '''\n    Write a python function to return a string where all occurences of the last char have been moved to the first, so \"Hello\" yields \"elloHe\".\n    '''\n    d = b[0] + b[1:].replace(b[-1], '', 1)\n    return d\n    \ndef solve(a):\n    '''\n    Write a python function to return the first non-repeating character in a string.\n    '''\n    b = a.replace(' ', '')\n    return b[0] if b.count(b[0]) == 1 else \"No character was repeated\"\n    \ndef is_pangram(a):\n    '''\n    Write a python function to return True if a string contains all letters of the alphabet. Otherwise return False.\n    '''\n    b = 'abcdefghijklmnopqrstuvwxyz'\n    c = set(a.lower())\n    return True if b == c else False\n    \ndef is_pangram(a):\n    '''\n    Write a python function to return True if a string contains all letters of the alphabet. Otherwise return False.\n    '''\n    b = 'abcdefghijklmnopqrstuvwxyz'\n    c = set(a.lower())\n    return True if b == c else False\n    \ndef is_valid_walk(a):\n    '''\n    Write a python function to check if a string represents a valid walk.\n    '''\n    b = a.split(' ')\n    return True if len(b) == 10 and b[0] == 'w' and b[1] == 'e' and b[2] == 'w' and b[3] == 'e' and b[4] == 'w' and b[5] == 'e' and b[6] == 'w' and b[7] == 'e' and b[8] == 'w' and b[9] == 'e' else False\n    \ndef max_visited_special_index(a):\n    '''\n    Write a python function to return the index of a peak in a list of numbers.\n    '''\n    b = a.index(max(a))\n    return b\n    \ndef is_valid_walk(a):\n    '''\n    Write a python function to check if a string represents a valid walk.\n    '''\n    b = a.split(' ')\n    return True if len(b) == 10 and b[0] == 'w' and b[1] == 'e' and b[2] == 'w' and b[3] == 'e' and b[4] == 'w' and b[5] == 'e' and b[6] == 'w' and b[7] == 'e' and b[8] == 'w' and b[9] == 'e' else False\n    \ndef is_valid_walk(a):\n    '''\n    Write a python function to check if a string represents a valid walk.\n    '''\n    b = a.split(' ')\n    return True if len(b) == 10 and b[0] == 'w' and b[1] == 'e' and b[2] == 'w' and b[3] == 'e' and b[4] == 'w' and b[5] == 'e' and b[6] == 'w' and b[7] == 'e' and b[8] == 'w' and b[9] == 'e' else False\n    \ndef is_valid_walk(a):\n    '''\n    Write a python function to check if a string represents a valid walk.\n    '''\n    b = a.split(' ')\n    return True if len(b) == 10 and b[0] == 'w' and b[1] == 'e' and b[2] == 'w' and b[3] == 'e' and b[4] == 'w' and b[5] == 'e' and b[6] == 'w' and b[7] == 'e' and b[8] == 'w' and b[9] == 'e' else False\n    \ndef first_last6(a):\n    '''\n    Write a python function to check if the first and last elements of a list are the same.\n    '''\n    b = a[0] == a[-1]\n    return True if b else False\n    \ndef single_letter_count(a):\n    '''\n    Write a python function to count the number of times a particular letter occurs in a string.\n    '''\n    b = {}\n    for i in a:\n        b[i] = b.get(i, 0) + 1\n    return b\n    \ndef single_letter_count(a):\n    '''\n    Write a python function to count the number of times a particular letter occurs in a string.\n    '''\n    b = {}\n    for i in a:\n        b[i] = b.get(i, 0) + 1\n    return b\n    \ndef double_letter_count(a):\n    '''\n    Write a python function to count the number of times a pair of adjacent letters occurs in a string.\n    '''\n    b = {}\n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            b[a[i]] = b.get(a[i], 0) + 1\n    return b\n    \ndef double_letter_count(a):\n    '''\n    Write a python function to count the number of times a pair of adjacent letters occurs in a string.\n    '''\n    b = {}\n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            b[a[i]] = b.get(a[i], 0) + 1\n    return b\n    \ndef unique_morse(a):\n    '''\n    Write a python function to check if a string contains only unique characters.\n    '''\n    b = '.,- '\n    c = set(a)\n    return True if b == c else False\n    \ndef is_valid_morse(a):\n    '''\n    Write a python function to check if a string is a valid Morse code.\n    '''\n    b = '.,- '\n    c = set(a)\n    return True if b == c else False\n    \ndef is_valid_morse(a):\n    '''\n    Write a python function to check if a string is a valid Morse code.\n    '''\n    b = '.,- '\n    c = set(a)\n    return True if b == c else False\n    \ndef is_valid_morse(a):\n    '''"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a>b:\n        return a\n    else:\n        return b\n    \n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimu(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a+b)/2.0\n    \ndef lineto(x,y):\n    '''\n    Write a python function to move a turtle (t) to a specified\n    position (x,y) and orient the turtle to face the direction\n    of movement.\n    '''\n    t.goto(x,y)\n    t.setheading(t.towards(x,y))\n    \ndef sqrto(x,y):\n    '''\n    Write a python function to draw a square at the specified position\n    and orientation.\n    '''\n    t.goto(x,y)\n    t.setheading(t.towards(x,y))\n    for i in range(4):\n        t.forward(50)\n        t.left(90)\n    \ndef cirto(x,y):\n    '''\n    Write a python function to draw a circle at the specified position\n    and orientation.\n    '''\n    t.goto(x,y)\n    t.setheading(t.towards(x,y))\n    t.circle(50)\n    \ndef poly(t,n,sides):\n    '''\n    Write a python function to draw a polygon.\n    '''\n    for i in range(n):\n        t.forward(100)\n        t.left(360/n)\n        \ndef polygon(t,n,sides):\n    '''\n    Write a python function to draw a polygon.\n    '''\n    for i in range(n):\n        t.forward(100)\n        t.left(360/n)\n        \ndef polygon2(t,n,sides):\n    '''\n    Write a python function to draw a polygon.\n    '''\n    for i in range(n):\n        t.forward(50)\n        t.left(360/n)\n    \ndef rectangle(t,width,length):\n    '''\n    Write a python function to draw a rectangle.\n    '''\n    for i in range(2):\n        t.forward(width)\n        t.left(90)\n        t.forward(length)\n        t.left(90)\n        \ndef triangle(t,length):\n    '''\n    Write a python function to draw a triangle.\n    '''\n    for i in range(3):\n        t.forward(length)\n        t.left(120)\n        \ndef arc(t,radius,angle):\n    '''\n    Write a python function to draw an arc.\n    '''\n    t.circle(radius,angle)\n    \ndef line(t, length):\n    '''\n    Write a python function to draw a line.\n    '''\n    t.forward(length)\n    \ndef text(t, message,x,y):\n    '''\n    Write a python function to write a message on the screen.\n    '''\n    t.goto(x,y)\n    t.write(message)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number in the\n    Fibonacci sequence.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \ndef randomNumber(n):\n    '''\n    Write a python function to return a random number\n    between 0 and n.\n    '''\n    import random\n    return random.randint(0,n)\n    \ndef randomNumber2(n):\n    '''\n    Write a python function to return a random number\n    between 0 and n.\n    '''\n    import random\n    return random.randint(0,n)\n    \ndef randomNumber3(n):\n    '''\n    Write a python function to return a random number\n    between 0 and n.\n    '''\n    import random\n    return random.random()*n\n    \ndef inputData(t):\n    '''\n    Write a python function to allow the user to input \n    multiple lines of input.\n    '''\n    data = input('Enter data:')\n    while data!= 'done':\n        t.write(data)\n        data = input()\n        \ndef repeat(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n    \ndef repeat2(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat3(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat4(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat5(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat6(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n    \ndef repeat7(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat8(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat9(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat10(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat11(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n        \ndef repeat12(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n    \ndef repeat13(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n    \ndef repeat14(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times.\n    '''\n    for i in range(n):\n        t.write(str)\n        t.left(360/n)\n    \ndef repeat15(t,str,n):\n    '''\n    Write a python function to repeat the given string n\n    times"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return \"Input not valid.\"\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n        \ndef character_count(str):\n    '''\n    Write a python function to count the number of each character in a string.\n    '''\n    count={}\n    for c in str:\n        if c not in count:\n            count[c]=1\n        else:\n            count[c]+=1\n    return count\n        \n        \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime.\n    '''\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n        \n        \ndef common_elements(lst1,lst2):\n    '''\n    Write a python function to find the common elements in two lists.\n    '''\n    lst3=[]\n    for i in lst1:\n        if i in lst2:\n            lst3.append(i)\n    return lst3\n    \n        \ndef linear_search(lst,key):\n    '''\n    Write a python function to search a key in a list.\n    '''\n    for i in range(len(lst)):\n        if key==lst[i]:\n            return True\n    return False\n    \n    \ndef binary_search(lst,key):\n    '''\n    Write a python function to search a key in a sorted list.\n    '''\n    low=0\n    high=len(lst)-1\n    while low<=high:\n        mid=(low+high)//2\n        if key==lst[mid]:\n            return True\n        elif key<lst[mid]:\n            high=mid-1\n        else:\n            low=mid+1\n    return False\n        \n        \ndef print_repeated(lst):\n    '''\n    Write a python function to print the elements of a list whose repeatation is greater than one.\n    '''\n    for i in lst:\n        if lst.count(i)>1:\n            print(i,end=\" \")\n    \n        \ndef print_l(lst):\n    '''\n    Write a python function to print the elements of a list in reverse order.\n    '''\n    for i in lst[::-1]:\n        print(i,end=\" \")\n        \n        \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    for i in range(0,len(str)//2):\n        if str[i]!=str[len(str)-1-i]:\n            return False\n    return True\n            \n            \ndef count_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels=0\n    for i in str:\n        if i in \"aeiouAEIOU\":\n            vowels+=1\n    return vowels\n    \n    \ndef count_cons(str):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    cons=0\n    for i in str:\n        if i not in \"aeiouAEIOU\":\n            cons+=1\n    return cons\n    \n    \ndef check_anagram(str1,str2):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    return sorted(str1)==sorted(str2)\n    \n    \ndef find_duplicates(lst):\n    '''\n    Write a python function to find the duplicates in a list.\n    '''\n    lst2=[]\n    for i in lst:\n        if lst.count(i)>1:\n            if i not in lst2:\n                lst2.append(i)\n    return lst2\n    \n    \ndef find_missing_numbers(lst):\n    '''\n    Write a python function to find the missing numbers in a list.\n    '''\n    lst2=[]\n    for i in range(0,len(lst)):\n        if lst[i]!=(i+1):\n            lst2.append(i+1)\n    return lst2\n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to sum the digits of a number.\n    '''\n    sum=0\n    while n:\n        sum+=n%10\n        n=n//10\n    return sum\n    \n    \ndef is_sorted(lst):\n    '''\n    Write a python function to check whether a list is sorted or not.\n    '''\n    for i in range(1,len(lst)):\n        if lst[i]<lst[i-1]:\n            return False\n    return True\n    \n    \ndef sum_of_squares(lst):\n    '''\n    Write a python function to find the sum of squares of all the numbers in a list.\n    '''\n    sum=0\n    for i in lst:\n        sum+=i*i\n    return sum\n    \n    \ndef palindrome_number(num):\n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    rev_num=0\n    temp=num\n    while temp:\n        rev_num=rev_num*10+temp%10\n        temp=temp//10\n    return num==rev_num\n    \n    \ndef remove_duplicates(lst):\n    '''\n    Write a python function to remove the duplicates in a list.\n    '''\n    lst2=[]\n    for i in lst:\n        if i not in lst2:\n            lst2.append(i)\n    return lst2\n    \n    \ndef change_all(lst,a,b):\n    '''\n    Write a python function to change all the elements of a list to other elements.\n    '''\n    for i in range(len(lst)):\n        if lst[i]==a:\n            lst[i]=b\n    return lst\n    \n    \ndef maximum_difference(lst):\n    '''\n    Write a python function to find the maximum difference of any two elements in a list.\n    '''\n    max1=lst[1]-lst[0]\n    for i in range(1,len(lst)-1):\n        for j in range(i+1,len(lst)):\n            if lst[j]-lst[i]>max1:\n                max1=lst[j]-lst[i]\n    return max1\n    \n    \ndef nth_power_list(lst,n):\n    '''\n    Write a python function to return the nth power of each element in a list.\n    '''\n    lst2=[]\n    for i in lst:\n        lst2.append(i**n)\n    return lst2\n    \n    \ndef sort_even_odd(lst):\n    '''\n    Write a python function to sort the even and odd numbers in a list.\n    '''\n    lst2=[]\n    for i in lst:\n        if i%2==0:\n            lst2.append(i)\n    for i in lst:\n        if i%2!=0:\n            lst2.append(i)\n    return lst2\n    \n    \ndef sum_of_digits(lst):\n    '''\n    Write a python function to find the sum of digits in a list.\n    '''\n    sum=0\n    for i in lst:\n        sum+=sum_of_digits(i)\n    return sum\n    \n    \ndef reverse(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    lst2=[]\n    for i in lst:\n        lst2.insert(0,i)\n    return lst2\n    \n    \ndef sorted_even_odd"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1 = tuple()\n    for i in str1:\n        tup1 += (i, )\n    return tup1\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    for i in str1:\n        tup = tup + (i,)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = []\n    for i in range(0,len(str1)):\n        if i % 2 == 0:\n            str2.append(str1[i])\n    return tuple(str2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    _, res = _dec_to_bin(n)\n    return _bin_to_dec(res)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert the input number to binary string\n    bin_str = bin(n)\n    # split the string to the parts of the binary number\n    # that have the least significant one (the left most)\n    split_bin_str = bin_str.split('b')\n    # split the parts of the binary number to find the first\n    # one that is not empty\n    split_str = [i for i in split_bin_str if len(i) > 0]\n    # the last element of the list that is the left most \n    # is the left most unset bit\n    return int(split_str[-1])\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n >= 0\n    m = n\n    i = 0\n    while m > 0:\n        if m % 2 == 1:\n            break\n        i += 1\n        m = m >> 1\n    n = n ^ (1 << i)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    left_most_unset_bit = 1\n    mask = 1\n    for i in range(1,32):\n        mask <<= 1\n        if not n & mask:\n            left_most_unset_bit = i\n            break\n    \n    n |= left_most_unset_bit\n    print(n)\n    return n\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n & 1 == 0: \n        n = n >> 1\n        count += 1\n    return count\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while (n & 1 == 0): \n        n = n >> 1\n        count += 1\n    n = n | 1\n    return n, count\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # take a look at the below logic and use the below logic to find the unset bit\n    # https://stackoverflow.com/questions/6989360/python-how-to-find-the-last-bit-set-1-to-0\n    return n & (n-1)\n    "
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    b = 1\n    while b <= n:\n        b = b << 1\n    b >>= 1\n    return b\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 3\n    else: \n        return n | set_left_most_unset_bit(n/2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    _set_bit(n, 0)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol=(1.0/3.0)*(math.pi)*(r**2)*(h)\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Volume of a Cone = 1/3 * pi * r * h\n    return (1/3) * math.pi * r * h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r**2*h/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # import math\n    # r = float(input(\"Input the radius of the cone: \"))\n    # h = float(input(\"Input the height of the cone: \"))\n    volume = (math.pi * r ** 2 * h)/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*r*r*h/3\n    return V\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = math.pi*r*r*h\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r*r*r\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume o"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (math.pi/3)*r**2*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    r = float(r)\n    h = float(h)\n    V= (1/3)*(pi)*(r**2)*h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1.0/3 * math.pi * r**2 * h\n    print 'The volume of the cone is %.2f' % volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi*r**2*(h/3)\n    return vol\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n: \n        i = i<<1\n    return i-1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return n-1-(n&(-n))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power_of_2(n): \n        while n!= 1:\n            n /= 2\n        return n\n    def check_power_of_2(n): \n        if n == 1:\n            return 1\n        pow = power_of_2(n)\n        if pow == 1:\n            return 1\n        pow_2 = power_of_2(pow)\n        if pow_2 == pow:\n            return pow\n        else:\n            return pow_2\n    return check_power_of_2(n)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    while 2 ** max_power <= n:\n        max_power += 1\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while (i <= n):\n        i *= 2\n    return i // 2\n    \ndef isPerfectSquare(n):\n    '''\n    Write a python function to check if n is a perfect square.\n    '''\n    import math\n    return (math.sqrt(n) % 1 == 0)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i == 1:\n            count = 1\n        elif i % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    bin_n = bin(n)\n    power_of_2 = [2**i for i in range(len(bin_n)-1,0,-1) if int(bin_n[i]) == 1]\n    return max(power_of_2)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    i = n\n    #while i > 0:\n    #    if i & 1 == 1:\n    #        break\n    #    i >>= 1\n    #return i\n    while i & 1 == 0:\n        i >>= 1\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1: \n        return 1\n    i = 1\n    while i <= n: \n        i = i*2\n    return i/2\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return ((1+pow(2, n-1, n))*(pow(2, n, n))-1)//(pow(2, n-1, n))\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [2, 1]\n    for i in range(2, n):\n        lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n    return lucas_numbers[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return int(((1 + (5 ** (1 / 2))) ** n) - (1 - (5 ** (1 / 2))) ** n)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    s = 2\n    p = 1\n    for i in range(2, n):\n        s = (s**2) - (2 * p**2) + 1\n        p = s\n    return s\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base Case\n    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    # Let N be an even number\n    if n%2==0:\n        # Start 2\n        a=2\n        # Store lucas numbers\n        lucas_nums=[2,1]\n        for i in range(2,n/2):\n            a=(a**2+2*a+1)%10**9+1\n            lucas_nums.append(a)\n        # Reconstruct from end of list\n        lucas_nums=lucas_nums[::-1]\n        n_index=n/2\n        lucas_nums=lucas_nums[0:n_index]\n        # Remove first element (it is then'th element)\n        lucas_nums=lucas_nums[1:]\n        return sum(lucas_nums)\n    else:\n        # Start 3\n        a=3\n        # Store lucas numbers\n        lucas_nums=[3,1]\n        for i in range(2,(n-1)/2):\n            a=(a**2+2*a+1)%10**9+1\n            lucas_nums.append(a)\n        # Reconstruct from end of list\n        lucas_nums=lucas_nums[::-1]\n        n_index=(n-1)/2\n        lucas_nums=lucas_nums[0:n_index]\n        # Remove first element (it is then'th element)\n        lucas_nums=lucas_nums[1:]\n        return sum(lucas_nums)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a, b, lucas_num = 1, 1, 2\n    for i in range(n-1):\n        a, b = b, a + b\n        lucas_num = a\n    return lucas_num\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatter = string.split(\"{}\")\n    for index in range(len(list_)):\n        print(formatter[index].format(list_[index]))\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % elem for elem in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % (list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = map(lambda s: string % s, list_)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format_string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % x for x in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(string) for string in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % (list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i,j in enumerate(list_):\n        string_ = string.format(list_[i])\n        list_[i] = string_\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    res = {}\n    for i in range(0, len(l1)):\n        res[l1[i]] = {l2[i]: l3[i]}\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #return [dict(zip(l1, l2)), dict(zip(l1, l3))]\n    return [dict(zip(l1, l2)), dict(zip(l1, l3))]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list_dict = {}\n    for i in range(0, len(l1)):\n        list_dict[l1[i]] = {l2[i]:l3[i]}\n    return list_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)==0:\n        return {}\n    dict1 = dict(zip(l1,l2))\n    for i in range(len(l1)):\n        if type(l3[i])==list:\n            dict1[l1[i]] = convert_list_dictionary(l1[i], l2[i], l3[i])\n        else:\n            dict1[l1[i]] = l3[i]\n    return dict1\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    assert len(l1) == len(l2)\n    l = []\n    for i in range(len(l1)):\n        d = {}\n        d[l1[i]] = l2[i]\n        d[l3[i]] = l3[i]\n        l.append(d)\n    return l\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {x: {l1[i]:l2[i], l3[i]:l3[i]}}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i, j, k in zip(l1, l2, l3):\n        dictionary[i] = {}\n        dictionary[i]['pizzeria'] = j\n        dictionary[i]['type'] = k\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = [l1, l2, l3]\n    dictionary = {}\n    for key, value in zip(l1[0], l1[1], l1[2]):\n        dictionary[key] = [value]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    dict_m = {}\n    for i in l1:\n        dict_m[i] = {}\n    for i in l2:\n        dict_m[i] = {}\n    for i in l3:\n        dict_m[i] = {}\n    return dict_m\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # If n is even\n    if n % 2 == 0:\n        return (n // 2) + get_max_sum(n // 2)\n    # If n is odd\n    else:\n        return (n // 2) + get_max_sum(n // 3)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        half_n = n/2\n        third_n = n/3\n        fourth_n = n/4\n        fifth_n = n/5\n        return max( (get_max_sum(half_n) + get_max_sum(third_n) + get_max_sum(fourth_n) + get_max_sum(fifth_n)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n%2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%3 == 0:\n        return get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%4 == 0:\n        return get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return max (get_max_sum (n/2), get_max_sum (n/3), get_max_sum (n/4), get_max_sum (n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)) if n > 1 else n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum((n + 1)/2) + get_max_sum((n + 1)/3) + get_max_sum((n + 1)/4) + get_max_sum((n + 1)/5)\n    return result\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max (get_max_sum (n/2), get_max_sum (n/3), get_max_sum (n/4), get_max_sum (n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        # divide n by 2, 3 and 4 and check the result\n        return max (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    list_with_max_length = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            list_with_max_length = [element]\n        elif len(element) == max_length:\n            list_with_max_length.append(element)\n    return list_with_max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = None\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = i\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_len_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_list = i\n    print max_len_list\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list.sort()\n    max_length = len(input_list[-1])\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return []\n    elif len(input_list) == 1:\n        return input_list[0]\n    else:\n        first_item = input_list[0]\n        if len(first_item) > len(max_length_list(input_list[1:])):\n            return first_item\n        else:\n            return max_length_list(input_list[1:])\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(len(i) for i in input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_len = [len(i) for i in input_list]\n    return input_list[list_len.index(max(list_len))]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for index, value in enumerate(input_list):\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_list = [value]\n        elif len(value) == max_len:\n            max_len_list.append(value)\n    return max_len_list\n    \ndef max_length_dict(input_dict):\n    '''\n    Write a function to find the dictionary with maximum length.\n    '''\n    max_len = 0\n    max_len_dict = {}\n    for key, value in input_dict.items():\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_dict = {key: value}\n        elif len(value) == max_len:\n            max_len_dict[key] = value\n    return max_len_dict\n    \ndef max_length_tuple(input_tuple):\n    '''\n    Write a function to find the tuple with maximum length.\n    '''\n    max_len = 0\n    max_len_tuple = ()\n    for value in input_tuple:\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_tuple = (value,)\n        elif len(value) == max_len:\n            max_len_tuple = max_len_tuple + (value,)\n    return max_len_tuple\n    \ndef max_length_str(input_str):\n    '''\n    Write a function to find the string with maximum length.\n    '''\n    max_len = 0\n    max_len_str = \"\"\n    for value in input_str:\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_str = value\n        elif len(value) == max_len:\n            max_len_str += value\n    return max_len_str\n    \ndef max_length_set(input_set):\n    '''\n    Write a function to find the set with maximum length.\n    '''\n    max_len = 0\n    max_len_set = ()\n    for value in input_set:\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_set = value\n        elif len(value) == max_len:\n            max_len_set = max_len_set + value\n    return max_len_set\n    \ndef max_length_range(input_range):\n    '''\n    Write a function to find the range with maximum length.\n    '''\n    max_len = 0\n    max_len_range = ()\n    for value in input_range:\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_range = value\n        elif len(value) == max_len:\n            max_len_range = max_len_range + value\n    return max_len_range\n    \ndef max_length_frozenset(input_frozenset):\n    '''\n    Write a function to find the frozenset with maximum length.\n    '''\n    max_len = 0\n    max_len_frozenset = ()\n    for value in input_frozenset:\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_frozenset = value\n        elif len(value) == max_len:\n            max_len_frozenset = max_len_frozenset + value\n    return max_len_frozenset\n    \ndef max_length_dict_tuple(input_dict):\n    '''\n    Write a function to find the dictionary with maximum length.\n    '''\n    max_len = 0\n    max_len_dict = {}\n    max_len_tuple = ()\n    for key, value in input_dict.items():\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_dict = {key: value}\n        elif len(value) == max_len:\n            max_len_dict[key] = value\n        for subvalue in value:\n            if len(subvalue) > max_len:\n                max_len = len(subvalue)\n                max_len_tuple = (subvalue,)\n            elif len(subvalue) == max_len:\n                max_len_tuple = max_len_tuple + (subvalue,)\n    return max_len_dict, max_len_tuple\n    \ndef max_length_list_tuple(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    max_len_tuple = ()\n    for index, value in enumerate(input_list):\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_list = [value]\n        elif len(value) == max_len:\n            max_len_list.append(value)\n        for subvalue in value:\n            if len(subvalue) > max_len:\n                max_len = len(subvalue)\n                max_len_tuple = (subvalue,)\n            elif len(subvalue) == max_len:\n                max_len_tuple = max_len_tuple + (subvalue,)\n    return max_len_list, max_len_tuple\n    \ndef max_length_list_set(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    max_len_set = ()\n    for index, value in enumerate(input_list):\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_list = [value]\n        elif len(value) == max_len:\n            max_len_list.append(value)\n        for subvalue in value:\n            if len(subvalue) > max_len:\n                max_len = len(subvalue)\n                max_len_set = subvalue\n            elif len(subvalue) == max_len:\n                max_len_set = max_len_set + subvalue\n    return max_len_list, max_len_set\n    \ndef max_length_list_dict(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    max_len_dict = {}\n    for index, value in enumerate(input_list):\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_list = [value]\n        elif len(value) == max_len:\n            max_len_list.append(value)\n        for subvalue in value:\n            if len(subvalue) > max_len:\n                max_len = len(subvalue)\n                max_len_dict = {subvalue: value}\n            elif len(subvalue) == max_len:\n                max_len_dict[subvalue] = value\n    return max_len_list, max_len_dict\n    \ndef max_length_list_tuple_dict(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    max_len_tuple_dict = {}\n    for index, value in enumerate(input_list):\n        if len(value) > max_len:\n            max_len = len(value)\n            max_len_list = [value]\n        elif len(value) == max_len:\n            max_len_list.append(value)\n        for subvalue in value:\n            if len(subvalue) > max_len:\n                max_len = len(subvalue)\n                max_len_tuple_dict = {subvalue: value}\n            elif len(subvalue) == max_len:\n                max_len_tuple_dict[subvalue] = valu"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for elem in test_tup:\n        if test_tup.count(elem) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    l = len(test_tup)\n    sorted_tup = sorted(test_tup)\n    for i in range(l-1):\n        if (sorted_tup[i] == sorted_tup[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    temp = list(set(test_tup))\n    print \"Resultant Tuple: \", temp\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not str1:\n        return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for i in str1:\n        if i in char_dict:\n            char_dict[i] = char_dict[i] + 1\n        else:\n            char_dict[i] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeating_char = {}\n    for char in str1:\n        if char in non_repeating_char:\n            non_repeating_char[char] += 1\n        else:\n            non_repeating_char[char] = 1\n    for char in str1:\n        if non_repeating_char[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    result = ''\n    for i in str1:\n        if result.count(i) == 0:\n            result = i\n    return result\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] not in d:\n            d[str1[i]] = 1\n        else:\n            d[str1[i]] += 1\n    for i in range(len(str1)):\n        if d[str1[i]] == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dictionary = {}\n    for char in str1:\n        if char in dictionary:\n            dictionary[char] += 1\n        else:\n            dictionary[char] = 1\n    for k, v in dictionary.iteritems():\n        if v == 1:\n            return k\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)==1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 1:\n        return str1[0]\n    else:\n        for i in range(len(str1)):\n            if str1[i] in str1[i+1:]:\n                continue\n            else:\n                return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    s = str1.replace(' ', '')\n    d = {}\n    for i in s:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d.keys():\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex,string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    if (string[0] == string[-1]): \n        return True\n    else: \n        return False\n    \ndef check_char_regex(string):\n    if re.search(regex, string):\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) == None: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #define three numbers\n    a = 5\n    b = 6\n    c = 8\n    #define a list\n    a_list = [a,b,c]\n    #sort the list\n    sorted_list = sorted(a_list)\n    #find median\n    if len(a_list) % 2 == 0:\n        median = (sorted_list[len(a_list)/2]+sorted_list[len(a_list)/2-1])/2\n        return median\n    else:\n        median = sorted_list[len(a_list)/2]\n        return median\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        a,b = b,a\n    if b<c:\n        b,c = c,b\n    if a<c:\n        a,c = c,a\n    return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n    elif b>a:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n    \n    \n    \na = int(input('Input first number: '))\nb = int(input('Input second number: '))\nc = int(input('Input third number: '))\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    return None\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        if a < c:\n            return a\n        if b > c:\n            return c\n    if b < a:\n        if a < c:\n            return a\n        if b > c:\n            return c\n    if c < a:\n        return a\n    if c < b:\n        return b\n    return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b:\n        if b <= c:\n            return b\n        elif a <= c:\n            return c\n        else:\n            return a\n    else:\n        if c <= b:\n            return b\n        elif a <= c:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c or c<b<a:\n        return b\n    elif b<c<a or a<c<b:\n        return c\n    return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif c>b:\n            return b\n        else:\n            return c\n    else:\n        if b>c:\n            return b\n        elif c>a:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = 0\n    for num in nums:\n        sum_of_digits = 0\n        while num!= 0:\n            sum_of_digits += num%10\n            num = num/10\n        res += sum_of_digits\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    return nums[0] + sum_of_digits(nums[1:])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        str = str(i)\n        total = total + sum(int(x) for x in str)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for n in nums:\n        total += sum(map(int, str(n)))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(map(int,str(num)))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        n = num\n        while n > 0:\n            n, last_digit = divmod(n, 10)\n            total += last_digit\n        result.append(total)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_list.append(sum(list(map(int,list(str(num))[::-1]))))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    return sum([int(n) for n in nums])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x^y for x,y in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple()\n    for i in range(0, len(test_tup1)):\n        if len(test_tup1[i]) == len(test_tup2[i]):\n            result += (int(test_tup1[i]) ^ int(test_tup2[i]),)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    new_tup = []\n    new_tup.append(test_tup1[0] ^ test_tup2[0])\n    new_tup.append(test_tup1[1] ^ test_tup2[1])\n    return new_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # >>> from operator import xor\n    # >>> def bitwise_xor(test_tup1, test_tup2):\n    #...     return (xor(test_tup1[0], test_tup2[0]), xor(test_tup1[1], test_tup2[1]))\n    #...\n    # >>> bitwise_xor((1, 1), (2, 2))\n    # (3, 3)\n    # >>> bitwise_xor((1, 0), (1, 1))\n    # (0, 1)\n    # >>> bitwise_xor((1, 1), (1, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 1), (1, 0))\n    # (1, 1)\n    # >>> bitwise_xor((0, 0), (0, 1))\n    # (1, 0)\n    # >>> bitwise_xor((1, 1), (0, 0))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 1), (0, 0))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (1, 1))\n    # (1, 1)\n    # >>> bitwise_xor((0, 0), (0, 1))\n    # (1, 1)\n    # >>> bitwise_xor((0, 1), (0, 1))\n    # (0, 0)\n    # >>> bitwise_xor((1, 1), (1, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 1), (0, 1))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((1, 1), (0, 1))\n    # (1, 0)\n    # >>> bitwise_xor((1, 0), (1, 0))\n    # (0, 0)\n    # >>> bitwise_xor((1, 0), (0, 0))\n    # (1, 0)\n    # >>> bitwise_xor((1, 1), (0, 1))\n    # (0, 1)\n    # >>> bitwise_xor((1, 1), (0, 1))\n    # (0, 1)\n    # >>> bitwise_xor((0, 1), (1, 1))\n    # (1, 0)\n    # >>> bitwise_xor((1, 1), (1, 1))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (1, 0))\n    # (1, 0)\n    # >>> bitwise_xor((1, 0), (0, 0))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 1))\n    # (1, 1)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((1, 0), (0, 0))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 1))\n    # (1, 1)\n    # >>> bitwise_xor((0, 0), (1, 0))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (1, 1))\n    # (1, 1)\n    # >>> bitwise_xor((0, 0), (0, 1))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (1, 0))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 1))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (1, 1))\n    # (0, 1)\n    # >>> bitwise_xor((0, 0), (0, 1))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (1, 0))\n    # (1, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n    # >>> bitwise_xor((0, 0), (0, 0))\n    # (0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for i in range(0,len(test_tup1)):\n        test_tup1[i] = int(test_tup1[i])\n        test_tup2[i] = int(test_tup2[i])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x^y for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    all_tuples = []\n    for i in test_list:\n        all_tuples.append(str(i[0])+','+str(i[1]))\n    \n    return len(set(all_tuples))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(row) for row in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    uniq_list = []\n    for i in test_list:\n        if i not in uniq_list:\n            uniq_list.append(i)\n    return len(uniq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        freq[item] = freq.get(item,0) + 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for element in test_list:\n        if element in freq.keys():\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # For each tuple, check if it is unique\n    # if it is unique, add it to the count of unique tuples\n    # otherwise, increment the count of unique tuples\n    # return the number of unique tuples\n    counter = 0\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n            counter += 1\n        else:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # hint: you can use a set as a list\n    freq = list(set(test_list))\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    return len(Counter(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    if len1!= len2:\n        return -1\n    \n    res = []\n    for i in range(len1):\n        res.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # test_tup1 = (3, 4, 2, 5, 7, 3)\n    # test_tup2 = (2, 3, 2, 5, 7, 3)\n    # index_tup1 = [2, 1, 1, 1, 2, 0]\n    # index_tup2 = [2, 1, 1, 1, 2, 0]\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    a = test_tup1 + test_tup2\n    return a\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n    elif isinstance(test_tup1, tuple):\n        return tuple(test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)))\n    elif isinstance(test_tup2, tuple):\n        return tuple(test_tup1[i] + test_tup2[i] for i in range(len(test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += ((test_tup1[i] + test_tup2[i]),)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    index = range(0, len(test_tup1))\n    d1 = dict(zip(index, test_tup1))\n    d2 = dict(zip(index, test_tup2))\n    tup3 = []\n    for key, value in d1.iteritems():\n        tup3.append(d1[key] + d2[key])\n    return tup3\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if isinstance(tup1, tuple) and isinstance(tup2, tuple):\n            new_tup += add_nested_tuples(tup1, tup2)\n        elif isinstance(tup1, tuple) and not isinstance(tup2, tuple):\n            new_tup += (tup1 + (tup2,))\n        elif not isinstance(tup1, tuple) and isinstance(tup2, tuple):\n            new_tup += ((tup1,), tup2)\n        else:\n            new_tup += ((tup1,),)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == 1:\n        return test_tup1[0] + test_tup2[0]\n    if len(test_tup2) == 1:\n        return test_tup1[0] + test_tup2[0]\n    else:\n        return test_tup1[0] + test_tup2[0] + add_nested_tuples(test_tup1[1:], test_tup2[1:])\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef max(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n        \ndef sort_list(l):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    for i in range(0, len(l)):\n        min = i\n        for j in range(i, len(l)):\n            if l[min] > l[j]:\n                min = j\n        temp = l[i]\n        l[i] = l[min]\n        l[min] = temp\n    \ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number of the fibonacci sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef reverse(s):\n    '''\n    Write a python function to return the reversed string of a string.\n    '''\n    if s == \"\":\n        return \"\"\n    else:\n        return s[-1] + reverse(s[:-1])\n    \ndef reverse_string(s):\n    '''\n    Write a python function to return the reversed string of a string.\n    '''\n    if s == \"\":\n        return \"\"\n    else:\n        return reverse_string(s[1:]) + s[0]\n        \ndef factorial(n):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef combination(n,k):\n    '''\n    Write a python function to return the combination of n and k.\n    '''\n    if n < k:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return combination(n-1,k-1) + combination(n-1,k)\n        \ndef permutation(n,k):\n    '''\n    Write a python function to return the permutation of n and k.\n    '''\n    if n < k:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return permutation(n-1,k-1) + permutation(n-1,k)\n        \ndef binomial_coefficient(n,k):\n    '''\n    Write a python function to return the binomial coefficient of n and k.\n    '''\n    if n < k:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return binomial_coefficient(n-1,k-1) + binomial_coefficient(n-1,k)\n        \ndef count_digit(n):\n    '''\n    Write a python function to count the number of digits in n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 + count_digit(n/10)\n        \ndef count_number_in_range(n,k):\n    '''\n    Write a python function to count the number of numbers between n and k.\n    '''\n    if n < k:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return count_number_in_range(n,k-1) + count_number_in_range(n-1,k)\n        \ndef count_number(n):\n    '''\n    Write a python function to count the number of numbers in the given range.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return count_number(n/10) + count_number(n/100) + count_number(n/1000)\n        \ndef count_number_of_digit_in_range(n,k):\n    '''\n    Write a python function to count the number of digits in the numbers between n and k.\n    '''\n    if n < k:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return count_number_of_digit_in_range(n,k-1) + count_number_of_digit_in_range(n-1,k)\n        \ndef count_number_of_digit(n):\n    '''\n    Write a python function to count the number of digits in the given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return count_number_of_digit(n/10) + count_number_of_digit(n/100) + count_number_of_digit(n/1000)\n        \ndef sum_of_number(n):\n    '''\n    Write a python function to find the sum of the numbers in the given range.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_of_number(n/10) + sum_of_number(n/100) + sum_of_number(n/1000)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits in the given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + sum_of_digits(n/10) + sum_of_digits(n/100) + sum_of_digits(n/1000)\n        \ndef sum_of_digit(n):\n    '''\n    Write a python function to find the sum of the digits in the given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum_of_digit(n/10) + sum_of_digit(n/100) + sum_of_digit(n/1000)\n        \ndef sort_by_digit(l):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    for i in range(0, len(l)):\n        min = i\n        for j in range(i, len(l)):\n            if sort_by_digit(l[min]) > sort_by_digit(l[j]):\n                min = j\n        temp = l[i]\n        l[i] = l[min]\n        l[min] = temp\n        \ndef factorial(n):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number of the fibonacci sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef sort_by_digit(l):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    for i in range(0, len(l)):\n        min = i\n        for j in range(i, len(l)):\n            if sort_by_digit(l[min]) > sort_by_digit(l[j]):\n                min = j\n        temp = l[i]\n        l[i] = l[min]\n        l[min] = temp\n        \ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number of the fibonacci sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef sort_list(l):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    for i in range(0, len(l)):\n        min = i\n        for j in range(i, len(l)):\n            if l[min] > l["
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef abs(a):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return abs(a)\n    \ndef ceil(a):\n    '''\n    Write a python function to find the ceiling of a number.\n    '''\n    return math.ceil(a)\n    \ndef floor(a):\n    '''\n    Write a python function to find the floor of a number.\n    '''\n    return math.floor(a)\n    \ndef sign(a):\n    '''\n    Write a python function to find the sign of a number.\n    '''\n    return math.copysign(1,a)\n    \ndef log(a,base):\n    '''\n    Write a python function to find the logarithm of a number with base.\n    '''\n    return math.log(a,base)\n    \ndef ln(a):\n    '''\n    Write a python function to find the natural logarithm of a number.\n    '''\n    return math.log(a)\n    \ndef exp(a):\n    '''\n    Write a python function to find the exponential of a number.\n    '''\n    return math.exp(a)\n    \ndef sqrt(a):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return math.sqrt(a)\n    \ndef factorial(a):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return math.factorial(a)\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    return math.gcd(a,b)\n    \ndef copysign(a,b):\n    '''\n    Write a python function to find the copy of a number with sign.\n    '''\n    return math.copysign(a,b)\n    \ndef fmod(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return math.fmod(a,b)\n    \ndef isinf(a):\n    '''\n    Write a python function to check if a number is infinite.\n    '''\n    return math.isinf(a)\n    \ndef isnan(a):\n    '''\n    Write a python function to check if a number is a NaN (not a number).\n    '''\n    return math.isnan(a)\n    \ndef pow(a,b):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    return math.pow(a,b)\n    \ndef copysign(a,b):\n    '''\n    Write a python function to find the copy of a number with sign.\n    '''\n    return math.copysign(a,b)\n    \ndef fmod(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return math.fmod(a,b)\n    \ndef fabs(a):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return math.fabs(a)\n    \ndef isinf(a):\n    '''\n    Write a python function to check if a number is infinite.\n    '''\n    return math.isinf(a)\n    \ndef isnan(a):\n    '''\n    Write a python function to check if a number is a NaN (not a number).\n    '''\n    return math.isnan(a)\n    \ndef pow(a,b):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    return math.pow(a,b)\n    \ndef copysign(a,b):\n    '''\n    Write a python function to find the copy of a number with sign.\n    '''\n    return math.copysign(a,b)\n    \ndef fmod(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return math.fmod(a,b)\n    \ndef hypot(a,b):\n    '''\n    Write a python function to find the length of a vector with two numbers.\n    '''\n    return math.hypot(a,b)\n    \ndef sin(a):\n    '''\n    Write a python function to find the sine of a number.\n    '''\n    return math.sin(a)\n    \ndef cos(a):\n    '''\n    Write a python function to find the cosine of a number.\n    '''\n    return math.cos(a)\n    \ndef tan(a):\n    '''\n    Write a python function to find the tangent of a number.\n    '''\n    return math.tan(a)\n    \ndef asin(a):\n    '''\n    Write a python function to find the inverse sine of a number.\n    '''\n    return math.asin(a)\n    \ndef acos(a):\n    '''\n    Write a python function to find the inverse cosine of a number.\n    '''\n    return math.acos(a)\n    \ndef atan(a):\n    '''\n    Write a python function to find the inverse tangent of a number.\n    '''\n    return math.atan(a)\n    \ndef radians(a):\n    '''\n    Write a python function to find the radian equivalent of an angle in degrees.\n    '''\n    return math.radians(a)\n    \ndef degrees(a):\n    '''\n    Write a python function to find the angle equivalent of an angle in radians.\n    '''\n    return math.degrees(a)\n    \ndef atan2(a,b):\n    '''\n    Write a python function to find the arc tangent of a number with a second number.\n    '''\n    return math.atan2(a,b)\n    \ndef sinh(a):\n    '''\n    Write a python function to find the hyperbolic sine of a number.\n    '''\n    return math.sinh(a)\n    \ndef cosh(a):\n    '''\n    Write a python function to find the hyperbolic cosine of a number.\n    '''\n    return math.cosh(a)\n    \ndef tanh(a):\n    '''\n    Write a python function to find the hyperbolic tangent of a number.\n    '''\n    return math.tanh(a)\n    \ndef asinh(a):\n    '''\n    Write a python function to find the inverse hyperbolic sine of a number.\n    '''\n    return math.asinh(a)\n    \ndef acosh(a):\n    '''\n    Write a python function to find the inverse hyperbolic cosine of a number.\n    '''\n    return math.acosh(a)\n    \ndef atanh(a):\n    '''\n    Write a python function to find the inverse hyperbolic tangent of a number.\n    '''\n    return math.atanh(a)\n    \ndef radians(a):\n    '''\n    Write a python function to find the radian equivalent of an angle in degrees.\n    '''\n    return math.radians(a)\n    \ndef degrees(a):\n    '''\n    Write a python function to find the angle equivalent of an angle in radians.\n    '''\n    return math.degrees(a)\n    \ndef atan2(a,b):\n    '''\n    Write a python function to find the arc tangent of a number with a second number.\n    '''\n    return math.atan2(a,b)\n    \ndef sqrt(a):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return math.sqrt(a)\n    \ndef log(a,base):\n    '''\n    Write a python function to find the logarithm of a number with base.\n    '''\n    return math.log(a,base)\n    \ndef ln(a):\n    '''"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if tup == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print ('exists')\n    else:\n        print ('does not exist')\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #x = int(raw_input())\n    if x%2 == 0:\n        print \"Parity is 0\"\n    else:\n        print \"Parity is 1\"\nfind_Parity(6)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"parity is even\"\n    else:\n        return \"parity is odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while (x!= 0):\n        parity = parity ^ (x & 1)\n        x = x >> 1\n    return parity\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2)!= 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        return x\n    else: \n        return -x\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = 0\n    while (x): \n        s += 1\n        x &= x - 1\n    return s & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = True\n    if (x & 1): \n        parity = False\n    return parity \n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1 == 1:\n        return \"odd\"\n    return \"even\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Parity2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def digits_bigger(number):\n        '''\n        Returns a list of digits in the number\n        '''\n        return [int(x) for x in str(number)]\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n)-1\n    while i>0 and int(n[i-1]) > int(n[i]):\n        n[i-1], n[i] = n[i], n[i-1]\n        i -= 1\n    return int(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    arr = [int(i) for i in str(n)]\n    size = len(arr)\n    for i in range(size-1):\n        if arr[i] < arr[i+1]:\n            temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n    arr.reverse()\n    print arr\n    return int(''.join(map(str, arr)))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i-1] >= n[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    \n    j = len(n) - 1\n    while n[j] <= n[i-1]:\n        j -= 1\n    n[i-1], n[j] = n[j], n[i-1]\n    \n    n[i:] = sorted(n[i:])\n    n = int(''.join(n))\n    \n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    ls = [int(x) for x in str(n)]\n    i = 0\n    n = len(ls)\n    while (i < n - 1):\n        if (ls[i] < ls[i + 1]):\n            break\n        i += 1\n    if (i == n - 1):\n        return -1\n    j = i\n    while (j < n):\n        if (ls[j] > ls[i]):\n            break\n        j += 1\n    k = j\n    while (k < n):\n        ls[i], ls[k] = ls[k], ls[i]\n        i += 1\n        k += 1\n    ls[i:] = sorted(ls[i:])\n    return int(''.join([str(x) for x in ls]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def int_to_str(n):\n        '''\n        Convert a non-negative integer into a string of its digits\n        '''\n        if n < 10:\n            return str(n)\n        else:\n            return int_to_str(n//10) + str(n%10)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    from itertools import permutations\n    new_num = ''.join(map(str, list(permutations(str(n), len(str(n)))[0])))\n    return int(new_num)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    for i in range(len(n)-1,-1,-1):\n        if int(n[i]) > int(n[i+1]):\n            n[i+1],n[i] = n[i],n[i+1]\n            break\n    return int(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    l = len(n_str)\n    i = 0\n    while i < l and n_str[i] <= n_str[i+1]:\n        i += 1\n    if i < l:\n        j = l - 1\n        while i < j:\n            n_str = n_str[:i+1] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]\n            j -= 1\n    else:\n        n_str += '1'\n    return int(n_str)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    rev = n[::-1]\n    rev = list(rev)\n    for i in range(0, len(rev)):\n        if int(rev[i]) > int(n[i]):\n            rev[i] = int(n[i])\n    rev = ''.join(str(x) for x in rev)\n    return int(rev)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    first, second = [], []\n    for num in nums1:\n        heapq.heappush(first, (-num, num))\n    for num in nums2:\n        heapq.heappush(second, (num, num))\n    pairs, result = [], []\n    for _ in range(k):\n        if not first or not second:\n            break\n        result.append(heapq.heappop(first)[1])\n        result.append(heapq.heappop(second)[1])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    if len(nums1)==0 or len(nums2)==0:\n        return pairs\n    heap = []\n    for i in nums1:\n        for j in nums2:\n            if len(heap)<k:\n                heapq.heappush(heap, (-(i+j), i, j))\n            else:\n                if -(i+j)<heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-(i+j), i, j))\n    while len(heap)>0:\n        pairs.append([heapq.heappop(heap)[1], heapq.heappop(heap)[2]])\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heapq.heapify(result)\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(result, (-(i+j), i, j))\n        if len(result) > k:\n            heapq.heappop(result)\n    result = map(lambda x: (-x[0], x[1], x[2]), result)\n    return list(result)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    heap = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(heap, (i + j, i, j))\n    while k > 0:\n        res.append(heapq.heappop(heap))\n        k -= 1\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) < k:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) == 1:\n        return [(nums1[0], nums2[0])]\n    heap = []\n    for i in range(0, k):\n        heapq.heappush(heap, (nums1[i], nums2[0]))\n    for i in range(k, len(nums1)):\n        if nums1[i] < heap[0][0]:\n            heapq.heappush(heap, (nums1[i], nums2[0]))\n            heapq.heappop(heap)\n    res = []\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] < nums2[j]:\n                heapq.heappush(heap, (nums1[i], nums2[j]))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    res = []\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, [nums1[i] + nums2[0], i, 0])\n    while heap:\n        smallest_pair, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j+1 < len(nums2):\n            heapq.heappush(heap, [nums1[i] + nums2[j+1], i, j+1])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    j = 0\n    ans = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            ans.append((nums1[i], nums2[j]))\n            i += 1\n            if len(ans) == k:\n                return ans\n        else:\n            ans.append((nums2[j], nums1[i]))\n            j += 1\n            if len(ans) == k:\n                return ans\n    if i == len(nums1):\n        while j < len(nums2):\n            ans.append((nums2[j], -1))\n            j += 1\n            if len(ans) == k:\n                return ans\n    else:\n        while i < len(nums1):\n            ans.append((nums1[i], -1))\n            i += 1\n            if len(ans) == k:\n                return ans\n    return []\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    pairs = []\n    for i in range(k):\n        heapq.heappush(pairs, (nums1[i]+nums2[0], i, 0))\n    for i in range(k, len(nums1)):\n        if pairs[0][0] > nums1[i] + nums2[0]:\n            heapq.heappushpop(pairs, (nums1[i]+nums2[0], i, 0))\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    from heapq import heappush, heappop\n    res = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n    while heap:\n        if len(res) < k:\n            res.append((heappop(heap))[1:])\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1] < min_product[0] * min_product[1]):\n                min_product = (list1[i][0] * list1[j][1], list1[i][0] * list1[j][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if minimum > list1[i][0] * list1[j][1]:\n                minimum = list1[i][0] * list1[j][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    list2 = []\n    for i in list1:\n        for j in list1:\n            if i!= j:\n                list2.append((i,j))\n    \n    min_product = []\n    for i in list2:\n        product = i[0] * i[1]\n        min_product.append(product)\n    \n    return min(min_product)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l1 = len(list1)\n    for i in range(l1-1):\n        for j in range(i+1, l1):\n            if list1[i][1]*list1[j][1] < min_product:\n                min_product = list1[i][1]*list1[j][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # smallest = 0\n    # second_smallest = 0\n    # for tuple in list1:\n    #     if tuple[0]*tuple[1] > smallest:\n    #         second_smallest = smallest\n    #         smallest = tuple[0]*tuple[1]\n    #     elif tuple[0]*tuple[1] > second_smallest:\n    #         second_smallest = tuple[0]*tuple[1]\n    #     else:\n    #         second_smallest = second_smallest\n    # print smallest\n    # print second_smallest\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in range(len(list1)):\n        product_list.append(list1[i][0] * list1[i][1])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    if n < 2:\n        return None\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                a = list1[i]\n                b = list1[j]\n                prod = a[0] * b[1]\n                if prod < prod:\n                    prod = prod\n                else:\n                    prod = prod\n        return prod\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    list2=[]\n    for tup in list1:\n        list2.append(tup[1])\n    product=1\n    for i in list2:\n        product*=i\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return 1\n    # This is very important. \n    # The comparison operator does not work with tuples, we want to compare the first element of the tuple\n    # Hence we use list1[0] to compare the first element of the tuple\n    return min(product_tuple(list1[0], list1[1]), product_tuple(list1[1], list1[0]))\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = [tup[0]*tup[1] for tup in list1]\n    return min(list2)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0]\n    for i in range(1,len(listval)):\n        if min>listval[i]:\n            min=listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #first idea: \n    # 1)loop through list \n    # 2)find min using for loop\n    # 3)return min\n    minval = None\n    for item in listval:\n        if (minval == None) or (item < minval):\n            minval = item\n    return minval\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #first idea: \n    # 1)loop through list \n    # 2)find max using for loop\n    # 3)return max\n    maxval = None\n    for item in listval:\n        if (maxval == None) or (item > maxval):\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i)\n    minval=min(tmp)\n    return minval\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i)\n    maxval=max(tmp)\n    return maxval\ndef max_min_diff(listval):\n    '''\n    Write a function to find the maximum and minimum values in a given heterogeneous list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i)\n    maxval=max(tmp)\n    minval=min(tmp)\n    return maxval-minval\ndef sort_ascending(listval):\n    '''\n    Write a function to sort the given list in ascending order.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i)\n    tmp=sorted(tmp)\n    return tmp\ndef sort_descending(listval):\n    '''\n    Write a function to sort the given list in descending order.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i)\n    tmp=sorted(tmp,reverse=True)\n    return tmp\ndef count_odd(listval):\n    '''\n    Write a function to count the number of odd numbers in a given list.\n    '''\n    count=0\n    for i in listval:\n        if i%2!=0:\n            count+=1\n    return count\ndef count_even(listval):\n    '''\n    Write a function to count the number of even numbers in a given list.\n    '''\n    count=0\n    for i in listval:\n        if i%2==0:\n            count+=1\n    return count\ndef count_unique_values(listval):\n    '''\n    Write a function to count the number of unique values in a given list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i)\n    tmp=list(set(tmp))\n    return len(tmp)\ndef reverse_list(listval):\n    '''\n    Write a function to reverse a given list.\n    '''\n    tmp=listval[:]\n    tmp.reverse()\n    return tmp\ndef sum_of_list(listval):\n    '''\n    Write a function to find the sum of all the elements in a given list.\n    '''\n    tmp=0\n    for i in listval:\n        tmp+=i\n    return tmp\ndef sum_of_list_rec(listval):\n    '''\n    Write a recursive function to find the sum of all the elements in a given list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    else:\n        return listval[0]+sum_of_list_rec(listval[1:])\ndef min_index(listval):\n    '''\n    Write a function to find the index of the minimum value in a given list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i)\n    tmp=sorted(tmp)\n    return listval.index(tmp[0])\ndef max_index(listval):\n    '''\n    Write a function to find the index of the maximum value in a given list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i)\n    tmp=sorted(tmp,reverse=True)\n    return listval.index(tmp[0])\ndef swap_list_item(listval,i,j):\n    '''\n    Write a function to swap two elements in a given list at given indices.\n    '''\n    listval[i],listval[j]=listval[j],listval[i]\n    return listval\ndef reverse_list_rec(listval):\n    '''\n    Write a recursive function to reverse a given list.\n    '''\n    if len(listval)==1:\n        return listval\n    else:\n        return reverse_list_rec(listval[1:])+[listval[0]]\ndef remove_duplicates(listval):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    tmp=[]\n    for i in listval:\n        if i not in tmp:\n            tmp.append(i)\n    return tmp\ndef rotate_list(listval,n):\n    '''\n    Write a function to rotate a list by a given number of times.\n    '''\n    if n>=0:\n        listval=listval[n:]+listval[:n]\n    else:\n        listval=listval[-n:]+listval[:-n]\n    return listval\ndef rotate_list_rec(listval,n):\n    '''\n    Write a recursive function to rotate a list by a given number of times.\n    '''\n    if n>=0:\n        return rotate_list_rec(listval[n:],n)+listval[:n]\n    else:\n        return rotate_list_rec(listval[-n:],n)+listval[:-n]\ndef rotate_list_2(listval,n):\n    '''\n    Write a function to rotate a list by a given number of times.\n    '''\n    if n>=0:\n        listval=listval[n:]+listval[:n]\n    else:\n        listval=listval[-n:]+listval[:-n]\n    return listval\ndef rotate_list_2_rec(listval,n):\n    '''\n    Write a recursive function to rotate a list by a given number of times.\n    '''\n    if n>=0:\n        return rotate_list_2_rec(listval[n:],n)+listval[:n]\n    else:\n        return rotate_list_2_rec(listval[-n:],n)+listval[:-n]\ndef fib(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\ndef fib_rec(n):\n    '''\n    Write a recursive function to find the nth Fibonacci number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fib_rec(n-1)+fib_rec(n-2)\ndef power_list(listval,p):\n    '''\n    Write a function to compute the pth power of a list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i**p)\n    return tmp\ndef power_list_rec(listval,p):\n    '''\n    Write a recursive function to compute the pth power of a list.\n    '''\n    if p==1:\n        return listval\n    else:\n        return power_list_rec(listval,p-1)*listval\ndef power_list_2(listval,p):\n    '''\n    Write a function to compute the pth power of a list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i**p)\n    return tmp\ndef power_list_2_rec(listval,p):\n    '''\n    Write a recursive function to compute the pth power of a list.\n    '''\n    if p==1:\n        return listval\n    else:\n        return power_list_2_rec(listval,p-1)*listval\ndef power_list_3(listval,p):\n    '''\n    Write a function to compute the pth power of a list.\n    '''\n    tmp=[]\n    for i in listval:\n        tmp.append(i**p)\n    return tmp\ndef power_list_3_rec(listval,p):\n    '''\n    Write a recursive function to compute the pth power of a list.\n    '''\n    if p==1:\n        return listval\n    else:\n        return power_list_3_rec(listval,p"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = None\n    for val in listval:\n        if minval == None or val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = float('inf')\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not isinstance(word, str):\n        return 'None'\n    split_word = re.split('[-_]', word)\n    if len(split_word) == 1:\n        return word\n    else:\n        return split_word[0].lower() + ''.join(x.title() for x in split_word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_word = word\n    upper = True\n    converted_word = \"\"\n    word = word.split('_')\n    for i in word:\n        converted_word = converted_word + i.capitalize()\n    print(converted_word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # start with regex\n    result = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # remove leading and trailing underscore\n    result = re.sub(r'^_+', '', result)\n    result = re.sub(r'_+$', '', result)\n    # remove leading and trailing white space\n    result = re.sub(r'^ ', '', result)\n    result = re.sub(r' $', '', result)\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return ''.join([word.title() for word in words])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + ''.join(x.title() for x in word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # assert re.match(r\"^([a-z]|_)*$\", word), \"Input word is not valid\"\n    # if word == '':\n    #     return word\n    # elif word[0] == '_':\n    #     return word[1:].capitalize()\n    # else:\n    #     return word.capitalize()\n    return re.sub(r'(?!^)_([a-z]|[A-Z])(?=[^A-Z]*$)', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    else:\n        head = word[0].upper()\n        result = head + re.sub(r'[^a-zA-Z0-9]', '', word[1:]).lower()\n        return result\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    first_char = word[0].lower()\n    return first_char + ''.join(x.title() for x in word[1:])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if not word:\n        return word\n    first_char = word[0].lower()\n    return re.sub('(?!^)([A-Z]+)', r'_\\1', word)\ndef string_to_int(s):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    if not s:\n        return 0\n    return int(s)\ndef string_to_float(s):\n    '''\n    Write a function to convert a string to a float.\n    '''\n    if not s:\n        return 0.0\n    return float(s)\ndef string_to_boolean(s):\n    '''\n    Write a function to convert a string to a boolean.\n    '''\n    if not s:\n        return False\n    return s.lower() in ('true', '1', 't', 'y', 'yes', 'on', 'enable', 'enabled')\ndef string_to_array(s):\n    '''\n    Write a function to convert a string to an array.\n    '''\n    if not s:\n        return []\n    return s.split(',')\ndef string_to_object(s):\n    '''\n    Write a function to convert a string to an object.\n    '''\n    if not s:\n        return {}\n    return eval(s)\ndef string_to_json(s):\n    '''\n    Write a function to convert a string to JSON.\n    '''\n    if not s:\n        return '{}'\n    return json.loads(s)\ndef array_to_json(arr):\n    '''\n    Write a function to convert an array to JSON.\n    '''\n    if not arr:\n        return '[]'\n    return json.dumps(arr)\ndef object_to_json(obj):\n    '''\n    Write a function to convert an object to JSON.\n    '''\n    if not obj:\n        return '{}'\n    return json.dumps(obj)\ndef string_to_list(s):\n    '''\n    Write a function to convert a string to an array.\n    '''\n    if not s:\n        return []\n    return s.split(',')\ndef is_empty(s):\n    '''\n    Write a function to determine whether a string is empty.\n    '''\n    if not s:\n        return True\n    return False\ndef is_null(s):\n    '''\n    Write a function to determine whether a string is null.\n    '''\n    if not s:\n        return True\n    return False\ndef is_not_empty(s):\n    '''\n    Write a function to determine whether a string is not empty.\n    '''\n    if s:\n        return True\n    return False\ndef is_not_null(s):\n    '''\n    Write a function to determine whether a string is not null.\n    '''\n    if s:\n        return True\n    return False\ndef is_empty_array(arr):\n    '''\n    Write a function to determine whether an array is empty.\n    '''\n    if not arr:\n        return True\n    return False\ndef is_null_array(arr):\n    '''\n    Write a function to determine whether an array is null.\n    '''\n    if not arr:\n        return True\n    return False\ndef is_not_empty_array(arr):\n    '''\n    Write a function to determine whether an array is not empty.\n    '''\n    if arr:\n        return True\n    return False\ndef is_not_null_array(arr):\n    '''\n    Write a function to determine whether an array is not null.\n    '''\n    if arr:\n        return True\n    return False\ndef is_empty_object(obj):\n    '''\n    Write a function to determine whether an object is empty.\n    '''\n    if not obj:\n        return True\n    return False\ndef is_null_object(obj):\n    '''\n    Write a function to determine whether an object is null.\n    '''\n    if not obj:\n        return True\n    return False\ndef is_not_empty_object(obj):\n    '''\n    Write a function to determine whether an object is not empty.\n    '''\n    if obj:\n        return True\n    return False\ndef is_not_null_object(obj):\n    '''\n    Write a function to determine whether an object is not null.\n    '''\n    if obj:\n        return True\n    return False\ndef is_empty_set(arr):\n    '''\n    Write a function to determine whether an set is empty.\n    '''\n    if not arr:\n        return True\n    return False\ndef is_null_set(arr):\n    '''\n    Write a function to determine whether an set is null.\n    '''\n    if not arr:\n        return True\n    return False\ndef is_not_empty_set(arr):\n    '''\n    Write a function to determine whether an set is not empty.\n    '''\n    if arr:\n        return True\n    return False\ndef is_not_null_set(arr):\n    '''\n    Write a function to determine whether an set is not null.\n    '''\n    if arr:\n        return True\n    return False\ndef is_empty_string(s):\n    '''\n    Write a function to determine whether a string is empty.\n    '''\n    if not s:\n        return True\n    return False\ndef is_null_string(s):\n    '''\n    Write a function to determine whether a string is null.\n    '''\n    if not s:\n        return True\n    return False\ndef is_not_empty_string(s):\n    '''\n    Write a function to determine whether a string is not empty.\n    '''\n    if s:\n        return True\n    return False\ndef is_not_null_string(s):\n    '''\n    Write a function to determine whether a string is not null.\n    '''\n    if s:\n        return True\n    return False\ndef is_empty_string_array(arr):\n    '''\n    Write a function to determine whether an array is empty.\n    '''\n    if not arr:\n        return True\n    return False\ndef is_null_string_array(arr):\n    '''\n    Write a function to determine whether an array is null.\n    '''\n    if not arr:\n        return True\n    return False\ndef is_not_empty_string_array(arr):\n    '''\n    Write a function to determine whether an array is not empty.\n    '''\n    if arr:\n        return True\n    return False\ndef is_not_null_string_array(arr):\n    '''\n    Write a function to determine whether an array is not null.\n    '''\n    if arr:\n        return True\n    return False\ndef is_empty_string_object(obj):\n    '''\n    Write a function to determine whether an object is empty.\n    '''\n    if not obj:\n        return True\n    return False\ndef is_null_string_object(obj):\n    '''\n    Write a function to determine whether an object is null.\n    '''\n    if not obj:\n        return True\n    return False\ndef is_not_empty_string_object(obj):\n    '''\n    Write a function to determine whether an object is not empty.\n    '''\n    if obj:\n        return True\n    return False\ndef is_not_null_string_object(obj):\n    '''\n    Write a function to determine whether an object is not null.\n    '''\n    if obj:\n        return True\n    return False\ndef is_empty_number(s):\n    '''\n    Write a function to determine whether a string is empty.\n    '''\n    if not s:\n        return True\n    return False\ndef is_null_number(s):\n    '''\n    Write a function to determine whether a string is null.\n    '''\n    if not s:\n        return True\n    return False\ndef is_not_empty_number(s):\n    '''\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_', '', word).lower() + re.sub('(?!^)[^A-Z]', '', word).title()\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [i for i in l if i%2 == 0]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2==1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[::2]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[1])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for i in l:\n        if i%2==0:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) > 1:\n        return l[:len(l)-1]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #return [t[n] for t in list1]\n    return [t[n] for t in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError('The index of the element to be extracted is too big')\n    return [tup[n] for tup in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [y[n] for y in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return [el for el, _ in enumerate(list1)][n - 1]\n    except IndexError:\n        raise IndexError('Index out of range: list is too small or n is out of range')\n    except Exception as e:\n        raise e\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = list1.split()\n    list2 = list2.split()\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n        \n        \n    "
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return 1 if set(list1) & set(list2) else 0\ndef unique(list1):\n    '''\n    Write a python function to check if all the elements in a list are unique or not.\n    '''\n    return 1 if len(set(list1))==len(list1) else 0\ndef intersection(list1,list2):\n    '''\n    Write a python function to find the common elements in two lists.\n    '''\n    return list(set(list1)&set(list2))\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth number in the Fibonacci sequence.\n    '''\n    if n<=1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef count_occurrences(string,sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string.\n    '''\n    return string.count(sub_string)\ndef check_palindrome(string):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return 1 if string==string[::-1] else 0\ndef is_valid(key):\n    '''\n    Write a python function to check if a key is a valid key or not.\n    '''\n    return 1 if len(key)==8 and key.isdigit() else 0\ndef is_balanced(string):\n    '''\n    Write a python function to check whether a string is balanced or not.\n    '''\n    return 1 if len(string)%2==0 else 0\ndef is_anagram(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return 1 if sorted(string1)==sorted(string2) else 0\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n%2==0 and n!=2:\n        return 0\n    for i in range(3,int(math.sqrt(n)+1),2):\n        if n%i==0:\n            return 0\n    return 1\ndef convert_to_celsius(fahrenheit):\n    '''\n    Write a python function to convert a given temperature from Celsius to Fahrenheit.\n    '''\n    return (fahrenheit-32)*(5/9)\ndef check_permutation(string1,string2):\n    '''\n    Write a python function to check if two strings are permutations of each other or not.\n    '''\n    return 1 if sorted(string1)==sorted(string2) else 0\ndef in_range(n,r1,r2):\n    '''\n    Write a python function to check if a number is between two ranges.\n    '''\n    return 1 if r1<=n<=r2 else 0\ndef calculate_price(item,quantity):\n    '''\n    Write a python function to calculate the price of an item when given the quantity of that item.\n    '''\n    if item=='coffee':\n        return quantity*1.5\n    elif item=='chips':\n        return quantity*2\n    elif item=='pizza':\n        return quantity*3\n    elif item=='donut':\n        return quantity*4\n    elif item=='donut':\n        return quantity*4\n    elif item=='ice cream':\n        return quantity*4.5\ndef calculate_bill(prices,quantities):\n    '''\n    Write a python function to calculate the bill for a group of people.\n    '''\n    return sum(map(lambda x:x[0]*x[1],zip(prices,quantities)))\ndef check_mirror(string1,string2):\n    '''\n    Write a python function to check if two strings are mirror images of each other or not.\n    '''\n    return 1 if string1[::-1]==string2 else 0\ndef play_poker(hand):\n    '''\n    Write a python function to simulate a game of poker.\n    '''\n    from random import shuffle\n    cards=['2','3','4','5','6','7','8','9','10','J','Q','K','A']\n    shuffle(cards)\n    hand1=cards[:5]\n    hand2=cards[5:]\n    if hand1[0]==hand1[1] or hand1[0]==hand1[2] or hand1[1]==hand1[2]:\n        return 2\n    else:\n        if check_flush(hand1) and check_flush(hand2):\n            return 1 if hand1[0]>hand2[0] else 2\n        elif check_flush(hand1):\n            return 1\n        elif check_flush(hand2):\n            return 2\n        elif check_straight(hand1) and check_straight(hand2):\n            return 1 if hand1[0]>hand2[0] else 2\n        elif check_straight(hand1):\n            return 1\n        elif check_straight(hand2):\n            return 2\n        elif check_four(hand1) and check_four(hand2):\n            return 1 if hand1[0]>hand2[0] else 2\n        elif check_four(hand1):\n            return 1\n        elif check_four(hand2):\n            return 2\n        else:\n            return 0\ndef check_flush(hand):\n    '''\n    Write a python function to check if a hand of 5 cards is a flush.\n    '''\n    return 1 if hand[0][0]==hand[1][0]==hand[2][0]==hand[3][0]==hand[4][0] else 0\ndef check_straight(hand):\n    '''\n    Write a python function to check if a hand of 5 cards is a straight.\n    '''\n    return 1 if (hand[0][0]+1==hand[1][0]+1==hand[2][0]+1==hand[3][0]+1==hand[4][0]+1) or (hand[0][0]-1==hand[1][0]-1==hand[2][0]-1==hand[3][0]-1==hand[4][0]-1) else 0\ndef check_four(hand):\n    '''\n    Write a python function to check if a hand of 5 cards is a four of a kind.\n    '''\n    return 1 if hand[0][0]==hand[1][0]==hand[2][0]==hand[3][0] or hand[0][0]==hand[1][0]==hand[2][0]==hand[3][0] or hand[0][0]==hand[1][0]==hand[2][0]==hand[4][0] or hand[0][0]==hand[1][0]==hand[2][0]==hand[4][0] or hand[1][0]==hand[2][0]==hand[3][0]==hand[4][0] or hand[0][0]==hand[1][0]==hand[2][0]==hand[3][0] or hand[0][0]==hand[1][0]==hand[2][0]==hand[4][0] else 0\ndef check_full_house(hand):\n    '''\n    Write a python function to check if a hand of 5 cards is a full house.\n    '''\n    return 1 if check_four(hand) and check_three(hand) else 0\ndef check_three(hand):\n    '''\n    Write a python function to check if a hand of 5 cards is a three of a kind.\n    '''\n    return 1 if hand[0][0]==hand[1][0]==hand[2][0] or hand[0][0]==hand[1][0]==hand[2][0] or hand[0][0]==hand[1][0]==hand[3][0] or hand[0][0]==hand[1][0]==hand[3][0] or hand[0][0]==hand[1]"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return (bool(set(list1) & set(list2)))\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(i in list2 for i in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \n    \ndef main():\n    list1 = []\n    list2 = [1,3,4,5,6]\n    list3 = [1,4,6,8]\n    list4 = [2,4,6,8]\n    list5 = [5,6,8,9]\n    list6 = [5,6,7,8]\n    list7 = [5,6,7,8]\n    list8 = [6,7,8,9]\n    list9 = [6,7,8,9]\n    list10 = [5,6,7,8,9]\n    list11 = [5,6,7,8,9]\n    list12 = [1,2,3,4,5,6,7,8,9]\n    list13 = [1,2,3,4,5,6,7,8,9]\n    list14 = [1,2,3,4,5,6,7,8,9]\n    list15 = [1,2,3,4,5,6,7,8,9]\n    list16 = [1,2,3,4,5,6,7,8,9]\n    list17 = [1,2,3,4,5,6,7,8,9]\n    list18 = [1,2,3,4,5,6,7,8,9]\n    list19 = [1,2,3,4,5,6,7,8,9]\n    list20 = [1,2,3,4,5,6,7,8,9]\n    list21 = [1,2,3,4,5,6,7,8,9]\n    list22 = [1,2,3,4,5,6,7,8,9]\n    list23 = [1,2,3,4,5,6,7,8,9]\n    list24 = [1,2,3,4,5,6,7,8,9]\n    list25 = [1,2,3,4,5,6,7,8,9]\n    list26 = [1,2,3,4,5,6,7,8,9]\n    list27 = [1,2,3,4,5,6,7,8,9]\n    list28 = [1,2,3,4,5,6,7,8,9]\n    list29 = [1,2,3,4,5,6,7,8,9]\n    list30 = [1,2,3,4,5,6,7,8,9]\n    list31 = [1,2,3,4,5,6,7,8,9]\n    list32 = [1,2,3,4,5,6,7,8,9]\n    list33 = [1,2,3,4,5,6,7,8,9]\n    list34 = [1,2,3,4,5,6,7,8,9]\n    list35 = [1,2,3,4,5,6,7,8,9]\n    list36 = [1,2,3,4,5,6,7,8,9]\n    list37 = [1,2,3,4,5,6,7,8,9]\n    list38 = [1,2,3,4,5,6,7,8,9]\n    list39 = [1,2,3,4,5,6,7,8,9]\n    list40 = [1,2,3,4,5,6,7,8,9]\n    list41 = [1,2,3,4,5,6,7,8,9]\n    list42 = [1,2,3,4,5,6,7,8,9]\n    list43 = [1,2,3,4,5,6,7,8,9]\n    list44 = [1,2,3,4,5,6,7,8,9]\n    list45 = [1,2,3,4,5,6,7,8,9]\n    list46 = [1,2,3,4,5,6,7,8,9]\n    list47 = [1,2,3,4,5,6,7,8,9]\n    list48 = [1,2,3,4,5,6,7,8,9]\n    list49 = [1,2,3,4,5,6,7,8,9]\n    list50 = [1,2,3,4,5,6,7,8,9]\n    list51 = [1,2,3,4,5,6,7,8,9]\n    list52 = [1,2,3,4,5,6,7,8,9]\n    list53 = [1,2,3,4,5,6,7,8,9]\n    list54 = [1,2,3,4,5,6,7,8,9]\n    list55 = [1,2,3,4,5,6,7,8,9]\n    list56 = [1,2,3,4,5,6,7,8,9]\n    list57 = [1,2,3,4,5,6,7,8,9]\n    list58 = [1,2,3,4,5,6,7,8,9]\n    list59 = [1,2,3,4,5,6,7,8,9]\n    list60 = [1,2,3,4,5,6,7,8,9]\n    list61 = [1,2,3,4,5,6,7,8,9]\n    list62 = [1,2,3,4,5,6,7,8,9]\n    list63 = [1,2,3,4,5,6,7,8,9]\n    list64 = [1,2,3,4,5,6,7,8,9]\n    list65 = [1,2,3,4,5,6,7,8,9]\n    list66 = [1,2,3,4,5,6,7,8,9]\n    list67 = [1,2,3,4,5,6,7,8,9]\n    list68 = [1,2,3,4,5,6,7,8,9]\n    list69 = [1,2,3,4,5,6,7,8,9]\n    list70 = [1,2,3,4,5,6,7,8,9]\n    list71 = [1,2,3,4,5,6,7,8,9]\n    list72 = [1,2,3,4,5,6,7,8,9]\n    list73 = [1,2,3,4,5,6,7,8,9]\n    list74 = [1,2,3,4,5,6,7,8,9]\n    list75 = [1,2,3,4,5,6,7,8,9]\n    list76 = [1,2,3,4,5,6,7,8,9]\n    list77 = [1,2,3,4,5,6,7,8,9]\n    list78 = [1,2,3,4,5,6,7,8,9]\n    list79 = [1,2,3,4,5,6,7,8,9]\n    list80 = [1,2,3,4,5,6,7,8,9]\n    list81 = [1,2,3,4,5,6,7,8,9]\n    list82 = [1,2,3,4,5,6,7,8,9]\n    list83 = [1,2,3,4,5,6,7,8,9]\n    list84 = [1,2,3,4,5,6,7,8,9]\n    list85 = [1,2,3,4,5,6,7,8,9]\n    list86 = [1,2,3,4,5,6,7,8,9]\n    list87 = [1,2,3,4,5,6,7,8,9]"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list2=set(list2)\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)<len(list2):\n        for val in list1:\n            if val in list2:\n                return True\n        return False\n    else:\n        for val in list2:\n            if val in list1:\n                return True\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print (i)\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    left = arr[0]\n    max_left = arr[0]\n    max_right = arr[0]\n    right = arr[n - 1]\n    for i in range(1, n):\n        max_left = max(arr[i], max_left * arr[i])\n        max_right = max(arr[n - 1 - i], max_right * arr[n - 1 - i])\n        left = max_left\n        right = max_right\n    return left, right\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize maximum product as zero\n    max_prod = 0\n    # Iterate over each element\n    for i in arr:\n        # Iterate over each element from 0 to i\n        for j in range(i):\n            # If the product of i and j is positive and greater than max_prod,\n            # then update max_prod\n            if i*j > max_prod:\n                max_prod = i*j\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    for i in arr[2:]:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return False\n    arr.sort()\n    left=0\n    right=len(arr)-1\n    maxProduct=0\n    while left<right:\n        maxProduct=max(maxProduct,arr[left]*arr[right])\n        left+=1\n        right-=1\n    return maxProduct\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1] * arr[-2]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #TODO: refactor this code\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)): \n        if max_ending_here < 0:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here*arr[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    n = len(arr)\n    for i in xrange(0, n): \n        for j in xrange(i+1, n): \n            max_product = max(max_product, arr[i] * arr[j]) \n    return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    # Below line read inputs from STDIN \n    arr = map(int,raw_input().split()) \n    arr.sort() \n    max_product = -999999999999999999999999999999999\n    for i in range(n): \n        for j in range(i + 1, n): \n            product = arr[i] * arr[j] \n            if product > max_product: \n                max_product = product \n    return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_product = arr[0]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if (arr[i] * arr[j] > arr[-1]): \n                print(arr[i], arr[j]) \n                return arr[i] * arr[j] \n            else: \n                print(arr[-1]) \n                return arr[-1] \n    return -1\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import itertools\n    groups = itertools.groupby(Input)\n    return groups\n    \n    \ndef first_unique_element(Input):\n    '''\n    Write a function to find the first unique element in a list.\n    '''\n    seen = set()\n    for element in Input:\n        if element not in seen:\n            seen.add(element)\n            return element\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import itertools\n    return [list(x) for x in itertools.groupby(sorted(Input))]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import itertools\n    set1 = set()\n    for tup in Input:\n        set1.add(tup[0])\n    return set1\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    tuple_list = Input\n    lst = [tuple_list[0][0]]\n    for item in tuple_list:\n        for i in item:\n            if i in lst:\n                break\n        else:\n            lst.append(item[0])\n    return lst\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Tuple = (2,3,4,5,6,7,8,9)\n    #sorted = sorted(Tuple)\n    #print(sorted)\n    #sorted = tuple(sorted)\n    #print(sorted)\n    #Output = [2,3,4,5,6,7,8,9]\n    #print(Output)\n    #Output = tuple(Output)\n    #print(Output)\n    #print(tuple([2,3,4,5,6,7,8,9]))\n    #Output = list(Tuple)\n    #print(Output)\n    #print(list(Output))\n    #print(tuple([1,2,3,4,5]))\n    #print(list(tuple([1,2,3,4,5])))\n    #print(tuple([1,2,3,4,5]))\n    #print(list(tuple([1,2,3,4,5])))\n    #print(Output)\n    #print(list(Output))\n    #print(tuple(Output))\n    #print(list(tuple(Output)))\n    #Output = tuple(Input)\n    #print(Output)\n    #print(list(Output))\n    #print(tuple(Output))\n    #print(list(tuple(Output)))\n    #print(tuple(list(Output)))\n    #print(list(tuple(list(Output))))\n    #print(tuple(list(tuple(Output))))\n    #print(list(tuple(tuple(Output))))\n    #print(list(tuple(tuple(list(Output)))))\n    #print(tuple(tuple(tuple(list(Output)))))\n    #print(list(tuple(tuple(tuple(list(Output)))))[0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #print(list(tuple(tuple(tuple(list(Output)))))[0][0][0][0][0][0][0][0][0][0][0][0]"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    L = []\n    for t in Input:\n        if t[0] in L:\n            L.append(t[1])\n        else:\n            L.append(t[0])\n    return L\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return []\n    def get_first_element(lst):\n        return lst[0][0]\n    return list(reduce(lambda x,y: x if get_first_element(x) == get_first_element(y) else [],Input))\n    # return list(set([ x[0] for x in Input ]))\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List=Input\n    List=sorted(List)\n    if len(List)==0:\n        return \n    Common=List[0]\n    for element in List:\n        if element[0]!=Common[0]:\n            return \n    print 'Common element is:',Common\n    \ndef group_tuples_2(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List=Input\n    List=sorted(List)\n    if len(List)==0:\n        return \n    Common=List[0]\n    for element in List:\n        if element[0]==Common[0]:\n            element.append(Common[1])\n    print 'Common element is:',Common\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [(k,tuple(set(x)&set(y))) for k,x,y in Input]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # make a set of all the first element in all the tuples\n    first_elems = set([])\n    for tuple in Input:\n        first_elems.add(tuple[0])\n    #now take the intersection of these sets and return the first element in common\n    return (first_elems.pop())\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    max_element = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    print max_element\nFind_Max(['hello', 'world', 'hello', 'hello'])\nFind_Max(['hello', 'hello', 'world'])"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst: \n        return \n    max_len = 0 \n    max_element = None\n    for element in lst: \n        if max_len < len(element): \n            max_len = len(element) \n            max_element = element \n    return max_element \n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    result = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])>len(result):\n            result = lst[i]\n    print \"The maximum length element is:\",result\n    \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    result = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])<len(result):\n            result = lst[i]\n    print \"The minimum length element is:\",result\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m=0\n    for i in lst:\n        if len(i)>m:\n            m=len(i)\n            item=i\n    return item\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max = lst[0]\n    max_length = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max = lst[i]\n            max_length = len(lst[i])\n    print max\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in lst: \n        if(len(i) > max_length): \n            max_length = len(i)\n            max_element = i\n    return max_element \n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = 0\n    for i in lst:\n        if len(i) > Max:\n            Max = len(i)\n            res = i\n    return res\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    max_element = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return None\n    else:\n        max_len = len(lst[0])\n        max_index = 0\n        for i in range(1,len(lst)):\n            if max_len < len(lst[i]):\n                max_len = len(lst[i])\n                max_index = i\n        return lst[max_index]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) < 1:\n        return 0\n    return max(lst, key=len)\n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if len(lst) < 1:\n        return 0\n    return min(lst, key=len)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print sum(round(num) for num in list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = int(round(i))\n        sum += i\n    print(sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for elem in list1:\n        total += round(elem)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if isinstance(list1, list):\n        for i in range(len(list1)):\n            list1[i] = round(list1[i])\n        return list1, sum(list1)*len(list1)\n    else:\n        return 'Parameter must be a list'\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Convert every item of list1 to integer\n    list2 = list(map(int,list1))\n    # multiply every item of list2 by the length of list2\n    total = [i * len(list2) for i in list2]\n    # print the result\n    print(sum(total))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += int(round(i))\n    return sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        rounded = round(number)\n        total += rounded\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2=[]\n    for i in list1:\n        i=round(i,2)\n        list2.append(i)\n    return sum(list2)*len(list2)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(0,len(list1)):\n        total = total + round(list1[i])\n    total = total * len(list1)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    tot = 0\n    for i in list1:\n        tot += round(i)\n    print(tot * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(2,n+1,2):\n        result = result + i**3\n    return result\nprint(cube_Sum(100))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result = result + i ** 3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(n) if i%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    if n <= 0:\n        return 0\n    \n    sum = 0\n    for i in range(2, n+1, 2):\n        sum = sum + i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = n * n\n    return (n * (n + 1) * 0.5)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(2,n+1):\n        if i%2==0:\n            ans += i**3\n    return ans\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(x**3 for x in range(n) if x%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(2, n+1, 2):\n        s = s + i**3\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n + 1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 1:\n        return str(test_tup[0])\n    result = ''\n    for elem in test_tup:\n        result += str(elem)\n        result += delimiter\n    return result[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    ret_str = ''\n    for ele in test_tup:\n        ret_str += ele + ','\n    return ret_str[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(i) for i in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ','.join(test_tup)\n    return test_str\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delim =''\n    concat = delim.join(test_tup)\n    return concat\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    i = 0\n    res = ''\n    for each in test_tup:\n        res += str(each) + '_' + str(i) + '_'\n        i += 1\n    res = res[0:-1]\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result = result + str(item)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated = ''\n    for item in test_tup:\n        concatenated += str(item) + ','\n    return concatenated[:-1]\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i<=n:\n        sum = sum + (i**3)\n        i = i+1\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([n**3 for n in range(1,n+1)])/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_of_n = [i**3 for i in range(1,n+1)]\n    total = sum(cube_of_n)\n    return total/len(cube_of_n)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #List for storing cubes\n    CubeList = []\n    \n    #Append the cube of 1st n numbers to the list\n    for i in range(1, n+1):\n        CubeList.append(i**3)\n    \n    #Calculate the average of the list\n    sum = 0\n    for i in range(n):\n        sum = sum + CubeList[i]\n    \n    avg = sum / n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return ((1/6)*n*(n+1)*(n+2)*(n+3))\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 0:\n        return -1\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum / float(n)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0.0\n    for i in range(n):\n        average = average + i*i*i\n    return average/n\n    \ndef find_Average_Of_Cubed_Numbers(n):  \n    '''\n    Write a python function to find the average of cubed natural numbers in range 1 to n.\n    '''\n    average = 0.0\n    for i in range(1,n+1):\n        average = average + i*i*i\n    return average/n\n    \ndef find_Average_Of_Cubed_Numbers_Without_Using_List(n):  \n    '''\n    Write a python function to find the average of cubed natural numbers in range 1 to n.\n    '''\n    return (n*(n+1)*(2*n+1))/6.0\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    my_list = []\n    for i in range(1,n+1):\n        my_list.append(i**3)\n    average = sum(my_list)/len(my_list)\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])/n\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        new_tuple.append(i[-1])\n    return tuple(new_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [list(str(i))[-1] for i in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [t[-1] for t in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # given tuple of strings\n    # output is a tuple of strings\n    # ex: ('Mar', 'Feb', 'Jan') -> ('Jan', 'Feb', 'Mar')\n    return tuple(string[-1] for string in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(rear_element for front_element, rear_element in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(x[-1] for x in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([elem[-1] for elem in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(t[-1] for t in test_tuple)\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0: \n        return 0\n    if list1[0] == x:\n        return 1 + count_element_in_list(list1[1:], x)\n    else:\n        return count_element_in_list(list1[1:], x)\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    for j in range(len(list1)):\n        if x in list1[j]:\n            i += 1\n    return i\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if(x == list1[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return sum(1 for sublist in list1 if x in sublist)\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2==1, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2==1, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            yield n\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2!=0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if nums:\n        return filter(lambda x: x % 2, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if not num % 2:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = re.findall(r'\\d{4}',dt)\n    month = re.findall(r'\\d{2}',dt)\n    year = re.findall(r'\\d{2}',dt)\n    # print(year,month,date)\n    return '{}-{}-{}'.format(date[2],month[0],year[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #simple solution\n    d,m,y = map(int, dt.split('-'))\n    return '{0}-{1}-{2}'.format(d,m,y)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #print(dt)\n    dt_list = dt.split(\"-\")\n    dt_list = dt_list[::-1]\n    dt_list = [int(i) for i in dt_list]\n    return '{:02d}-{:02d}-{:04d}'.format(dt_list[2], dt_list[1], dt_list[0])\n    #return '{:02d}-{:02d}-{:02d}'.format(dt_list[0], dt_list[1], dt_list[2])\n    #return '{:02d}-{:02d}-{:02d}'.format(dt_list[1], dt_list[2], dt_list[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #print(dt)\n    return dt[6:10]+'-'+dt[3:5]+'-'+dt[0:2]\ndef change_time_format(time):\n    '''\n    Write a function to convert a time of hh:mm:ss format to hh:mm format.\n    '''\n    #print(time)\n    temp=time.split(':')\n    return temp[0]+':'+temp[1]\ndef get_present_date():\n    '''\n    Write a function that returns the current date in the format dd-mm-yyyy.\n    '''\n    import datetime\n    return datetime.datetime.today().strftime('%d-%m-%Y')\ndef get_present_time():\n    '''\n    Write a function that returns the current time in the format hh:mm:ss.\n    '''\n    import datetime\n    return datetime.datetime.today().strftime('%H:%M:%S')\ndef get_present_date_time():\n    '''\n    Write a function that returns the current date and time in the format dd-mm-yyyy hh:mm:ss.\n    '''\n    import datetime\n    return datetime.datetime.today().strftime('%d-%m-%Y %H:%M:%S')\ndef get_value_by_key(dict, key):\n    '''\n    Write a function to get the value associated with the key\n    '''\n    if key in dict:\n        return dict[key]\n    else:\n        return ''\ndef get_day(dt):\n    '''\n    Write a function that returns the day of a date in the format dt in the format dd.\n    '''\n    return dt[6:8]\ndef get_month(dt):\n    '''\n    Write a function that returns the month of a date in the format dt in the format mm.\n    '''\n    return dt[3:5]\ndef get_year(dt):\n    '''\n    Write a function that returns the year of a date in the format dt in the format yyyy.\n    '''\n    return dt[0:4]\ndef get_week_day(dt):\n    '''\n    Write a function to get the week day of a date in the format dt in the format dd, where Monday is 0 and Sunday is 6.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return date.weekday()\ndef get_date_of_week(dt):\n    '''\n    Write a function that returns the date of the week of a date in the format dt in the format dd-mm-yyyy.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return (date - date.isocalendar()[1]).strftime('%d-%m-%Y')\ndef get_date_of_month(dt):\n    '''\n    Write a function that returns the date of the month of a date in the format dt in the format dd-mm-yyyy.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return (date - date.replace(day=1)).strftime('%d-%m-%Y')\ndef get_date_of_year(dt):\n    '''\n    Write a function that returns the date of the year of a date in the format dt in the format dd-mm-yyyy.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return date.strftime('%d-%m-%Y')\ndef get_time_of_day(dt):\n    '''\n    Write a function that returns the time of day of a date in the format dt in the format hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return datetime.strptime(dt, \"%Y-%m-%d\").strftime('%H:%M:%S')\ndef get_time_of_week(dt):\n    '''\n    Write a function that returns the time of day of a date in the format dt in the format hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return datetime.strptime(dt, \"%Y-%m-%d\").strftime('%H:%M:%S')\ndef get_date_time_of_day(dt):\n    '''\n    Write a function that returns the date and time of day of a date in the format dt in the format dd-mm-yyyy hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return datetime.strptime(dt, \"%Y-%m-%d\").strftime('%d-%m-%Y %H:%M:%S')\ndef get_date_time_of_week(dt):\n    '''\n    Write a function that returns the date and time of day of a date in the format dt in the format dd-mm-yyyy hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return datetime.strptime(dt, \"%Y-%m-%d\").strftime('%d-%m-%Y %H:%M:%S')\ndef get_date_time_of_month(dt):\n    '''\n    Write a function that returns the date and time of day of a date in the format dt in the format dd-mm-yyyy hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return datetime.strptime(dt, \"%Y-%m-%d\").strftime('%d-%m-%Y %H:%M:%S')\ndef get_date_time_of_year(dt):\n    '''\n    Write a function that returns the date and time of day of a date in the format dt in the format dd-mm-yyyy hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return datetime.strptime(dt, \"%Y-%m-%d\").strftime('%d-%m-%Y %H:%M:%S')\ndef get_time_of_day_in_sec(dt):\n    '''\n    Write a function to get the time of day in seconds from a date in the format dt in the format dd-mm-yyyy hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return datetime.strptime(dt, \"%Y-%m-%d\").strftime('%H:%M:%S')\ndef get_time_of_week_in_sec(dt):\n    '''\n    Write a function to get the time of day in seconds from a date in the format dt in the format dd-mm-yyyy hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%d\")\n    return datetime.strptime(dt, \"%Y-%m-%d\").strftime('%H:%M:%S')\ndef get_time_of_month_in_sec(dt):\n    '''\n    Write a function to get the time of day in seconds from a date in the format dt in the format dd-mm-yyyy hh:mm:ss.\n    '''\n    from datetime import datetime\n    date = datetime.strptime(dt, \"%Y-%m-%"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #print(re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt))\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\ndef parse_date(dt):\n    '''\n    Write a function to check whether a string is a valid date or not.\n    '''\n    year, month, day = re.split('[-./\\s]', dt)\n    if(len(year) == 4 and len(month) == 2 and len(day) == 2):\n        return True\n    else:\n        return False\ndef parse_time(t):\n    '''\n    Write a function to check whether a string is a valid time or not.\n    '''\n    hour, minute, second = re.split('[:.\\s]', t)\n    if(len(hour) == 2 and len(minute) == 2 and len(second) == 2):\n        return True\n    else:\n        return False\ndef parse_time_period(t):\n    '''\n    Write a function to check whether a string is a valid time period or not.\n    '''\n    hour, minute, second = re.split('[:.\\s]', t)\n    if(len(hour) == 2 and len(minute) == 2 and len(second) == 2):\n        return True\n    else:\n        return False\ndef generate_license(name, location, time_start, time_end):\n    '''\n    Write a function to generate a license plate.\n    '''\n    plate = re.sub('\\s', '', '{0}{1}'.format(name[0], location))\n    plate += re.sub('\\s', '', '{0}{1}'.format(time_start[0], time_end[0]))\n    plate += re.sub('\\s', '', '{0}{1}'.format(time_start[1], time_end[1]))\n    return plate\ndef generate_email(firstname, lastname):\n    '''\n    Write a function to generate a valid email id.\n    '''\n    return '{0}{1}@gmail.com'.format(firstname, lastname)\ndef generate_phone(num):\n    '''\n    Write a function to generate a valid phone number.\n    '''\n    return '+91 {0}'.format(num)\ndef parse_phone(phone):\n    '''\n    Write a function to check whether a phone number is valid or not.\n    '''\n    return re.match(r'\\+\\d{10}', phone)\ndef generate_trn(name, location, trn):\n    '''\n    Write a function to generate a TRN.\n    '''\n    trn = re.sub('[^a-zA-Z0-9]+', '', trn)\n    trn = re.sub('\\s', '', trn)\n    trn = re.sub('\\s', '', '{0}{1}'.format(name[0], location))\n    trn += re.sub('\\s', '', '{0}{1}'.format(trn[0], trn[1:]))\n    return trn\ndef parse_trn(trn):\n    '''\n    Write a function to check whether a TRN is valid or not.\n    '''\n    return re.match(r'\\d{10}', trn)\ndef generate_pan(num):\n    '''\n    Write a function to generate a PAN.\n    '''\n    pan = re.sub('[^a-zA-Z0-9]+', '', num)\n    pan = re.sub('\\s', '', pan)\n    pan = re.sub('\\s', '', '{0}{1}'.format(pan[0], pan[1:3]))\n    pan += re.sub('\\s', '', '{0}{1}'.format(pan[0], pan[1:3]))\n    return pan\ndef parse_pan(pan):\n    '''\n    Write a function to check whether a PAN is valid or not.\n    '''\n    return re.match(r'[A-Z]{5}[0-9]{4}', pan)\ndef generate_tin(num):\n    '''\n    Write a function to generate a TIN.\n    '''\n    tin = re.sub('[^a-zA-Z0-9]+', '', num)\n    tin = re.sub('\\s', '', tin)\n    tin = re.sub('\\s', '', '{0}{1}'.format(tin[0], tin[1:3]))\n    tin += re.sub('\\s', '', '{0}{1}'.format(tin[0], tin[1:3]))\n    return tin\ndef parse_tin(tin):\n    '''\n    Write a function to check whether a TIN is valid or not.\n    '''\n    return re.match(r'[A-Z]{5}[0-9]{4}', tin)\ndef generate_passport_num(pan, tin, date):\n    '''\n    Write a function to generate a passport number.\n    '''\n    passport_num = re.sub('[^a-zA-Z0-9]+', '', pan)\n    passport_num = re.sub('\\s', '', passport_num)\n    passport_num = re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[1:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[1:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[:2], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{0}{1}'.format(passport_num[0], passport_num[2:]))\n    passport_num += re.sub('\\s', '', '{"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[:2] + '-' + dt[2:4] + '-' + dt[4:]\n    \ndef change_date_format2(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[:2] + '-' + dt[2:4] + '-' + dt[4:]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    month = dt[5:7]\n    month_int = int(month)\n    date = dt[8:10]\n    date_int = int(date)\n    year = dt[0:4]\n    year_int = int(year)\n    if year_int > 0:\n        new_date = str(date_int) + '-' + str(month_int) + '-' + str(year_int)\n    else:\n        new_date = str(date_int) + '-' + str(month_int) + '-' + str(year_int + 1)\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    def leap_year(year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # YOUR CODE HERE\n    date = dt.split('-')\n    return '{0}-{1}-{2}'.format(date[2], date[1], date[0])\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert isinstance(my_list, list), \"Input should be a list.\"\n    n = len(my_list)\n    gap = int(n/2)\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap /= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n/2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = 1\n    while h < len(my_list) // 3:\n        h = 3 * h + 1\n    while h >= 1:\n        for i in range(h, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h //= 3\n    return my_list\n    \n    \ndef merge(left, right):\n    '''\n    Merge two sorted lists into a new sorted list\n    '''\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            result.append(left[0])\n            left = left[1:]\n        else:\n            result.append(right[0])\n            right = right[1:]\n    if len(left) > 0:\n        result += left\n    if len(right) > 0:\n        result += right\n    return result\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the n value for the list\n    n = len(my_list)\n    # 1\n    interval = n/2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_val = my_list[i]\n            pos = i\n            while pos >= gap and my_list[pos-gap] > current_val:\n                my_list[pos] = my_list[pos-gap]\n                pos -= gap\n            my_list[pos] = current_val\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) / 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap /= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_value = my_list[i]\n            position = i\n            while position >= gap and my_list[position-gap] > current_value:\n                my_list[position] = my_list[position-gap]\n                position -= gap\n            my_list[position] = current_value\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Get length of array and sort base on that\n    n = len(my_list)\n    size = n/2\n    \n    # Use while loop to traverse through the array\n    while size > 0:\n        \n        # Traverse through array\n        for i in range(size,n):\n            \n            # Get the element to be compared\n            curr_item = my_list[i]\n            \n            # Find the correct position for the element to be placed\n            j = i\n            while j >= size and my_list[j-size] > curr_item:\n                my_list[j] = my_list[j-size]\n                j -= size\n            \n            # Place the element at its correct position\n            my_list[j] = curr_item\n        \n        # Reduce the size\n        size = size/2\n    \n    return my_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #print test_tup1, test_tup2\n    if len(test_tup1)!= len(test_tup2):\n        return 'ERROR'\n    result = []\n    for i in xrange(len(test_tup1)):\n        result.append( (test_tup1[i], test_tup2[i]) )\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    # l1 = [elem for elem in test_tup1]\n    # l2 = [elem for elem in test_tup2]\n    for i in range(0, len(l1)):\n        l1[i] = l1[i] and l2[i]\n    return tuple(l1)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #convert the input tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    #convert the two lists to tuple\n    tup1 = tuple(list1)\n    tup2 = tuple(list2)\n    #extract the elements\n    e1 = tup1[0]\n    e2 = tup2[0]\n    e3 = tup1[1]\n    e4 = tup2[1]\n    #combine the extracted elements to get the tuple\n    #in the form (element1, element2)\n    tup_val = (e1, e2)\n    return tup_val\n    \ndef test_and_tuples():\n    '''\n    This function tests the function above.\n    '''\n    tup1 = (1,2)\n    tup2 = (2,4)\n    tup_val = and_tuples(tup1, tup2)\n    if tup_val == (1,2):\n        print \"passed\"\n    else:\n        print \"failed\"\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([a & b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1[i] and tup2[i] for i in range(len(tup1)))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        res.append(tuple(x and y for x, y in zip(t1, t2)))\n    return tuple(res)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_list = []\n    for i in range(len(test_tup1)):\n        new_list.append(tuple(list(test_tup1[i]) + list(test_tup2[i])))\n    return new_list\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (b ** 2) - (4 * a * c) < 0:\n        return \"There is no root.\"\n    elif (b ** 2) - (4 * a * c) == 0:\n        return -b / (2 * a)\n    else:\n        x1 = ((-1 * b) + sqrt((b ** 2) - (4 * a * c))) / (2 * a)\n        x2 = ((-1 * b) - sqrt((b ** 2) - (4 * a * c))) / (2 * a)\n        return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n    \n    \ndef intersection(a, b, c, d):\n    '''\n    Write a function to find the intersections of two lines.\n    '''\n    if (a!= 0) and (b!= 0):\n        x = -c/a\n        y = d/b\n        return x, y\n    elif (c!= 0) and (d!= 0):\n        x = -b/c\n        y = a/d\n        return x, y\n    else:\n        print \"The lines are parallel\"\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/2/a\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = c/b\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_vertex(a, b, c):\n    x = (c**2 - a*b)/b\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_general_vertex(a, b, c):\n    x = (b**2 - 4*a*c)/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_angle(a, b, c):\n    return math.atan(2*a/b)\n    \ndef parabola_distance(a, b, c):\n    return math.sqrt(b**2 - 4*a*c)\n    \ndef parabola_min_distance(a, b, c):\n    return -b/(2*a)\n    \ndef parabola_max_distance(a, b, c):\n    return -b/(2*a)\n    \ndef parabola_solve_point(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_ascending(a, b, c):\n    x = (-b - math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_descending(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_descending_quadrants(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_descending_quadrants_second(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_solve_roots_descending_quadrants_third(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b - math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_ascending(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_descending(a, b, c):\n    x = (-b - math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_descending_quadrants(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_descending_quadrants_second(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b + math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_intersection_roots_descending_quadrants_third(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x = (-b - math.sqrt(b**2 - 4*a*c))/2/a\n    y = -a*x**2/b\n    return x, y\n    \ndef parabola_directrix_by_vertex(a, b, c):\n    x1, y1 = parabola_vertex(a, b, c)\n    x2, y2 = parabola_directrix(a, b, c)\n    return x1, y1, x2, y2\n    \ndef parabola_solve_vertex(a, b, c):\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_ascending(a, b, c):\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_descending(a, b, c):\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_descending_quadrants(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_descending_quadrants_second(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_solve_vertex_descending_quadrants_third(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x, y = parabola_solve_point(a, b, c)\n    return x, y\n    \ndef parabola_intersection_vertex(a, b, c):\n    x1, y1, x2, y2 = parabola_directrix_by_vertex(a, b, c)\n    x, y = parabola_intersection(a, b, c)\n    return x, y\n    \ndef parabola_intersection_vertex_ascending(a, b, c):\n    x1, y1, x2, y2 = parabola_directrix_by_vertex(a, b, c)\n    x, y = parabola_intersection_roots(a, b, c)\n    return x, y\n    \ndef parabola_intersection_vertex_descending(a, b, c):\n    x1, y1, x2, y2 = parabola_directrix_by_vertex(a, b, c)\n    x, y = parabola_intersection_roots_descending(a, b, c)\n    return x, y\n    \ndef parabola_intersection_vertex_descending_quadrants(a, b, c):\n    if a == 0:\n        return (0, 0)\n    x1, y1, x2, y2 = parabol"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Directrix formula: \n    #   -b/2(a,b,c) + (b**2 - 4ac)**0.5/2a\n    return -b/(2*a) + (b**2 - 4*a*c)**0.5/2*a\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/2*a\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((-b/2/a)**0.5, (-c/4/a))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Return the value of the directrix when given a, b, and c.\n    return -b/(2*a)\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1) & set(list2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) <= len(list2):\n        for element in list1:\n            if element in list2:\n                return True\n    else:\n        for element in list2:\n            if element in list1:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    if len(list1) < len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    \n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 is None or list2 is None:\n        raise ValueError('None input argument')\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        for item2 in list2:\n            if item == item2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1).intersection(list2))\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*(base1+base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2.0) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1 + base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= base2:\n        return height*(base1+base2)/2\n    else:\n        return height*(base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) / 2) * height\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for index in range(len(arr)):\n        if arr[index] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if x > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return 1\n        elif arr[i] == number:\n            return 0\n    return -1\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for el in arr:\n        if number > el:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    res = re.search(r'a(.+?)b', text)\n    if res:\n        return res.group(1)\n    return ''\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        print(\"match\")\n    else:\n        print(\"no match\")\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_two(text):\n    '''\n    Write a function that matches a word that has an a followed by zero or one b's.\n    '''\n    pattern = r\"ab{0,1}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_three(text):\n    '''\n    Write a function that matches a word that has an a followed by zero or more b's.\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_four(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_five(text):\n    '''\n    Write a function that matches a word that has an a followed by one or more b's.\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_six(text):\n    '''\n    Write a function that matches a word that has an a followed by three b's.\n    '''\n    pattern = r\"ab{3}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_seven(text):\n    '''\n    Write a function that matches a word that has an a followed by two to three b's.\n    '''\n    pattern = r\"ab{2,3}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_eight(text):\n    '''\n    Write a function that matches a word that has an a followed by two to three b's.\n    '''\n    pattern = r\"ab{2,3}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_nine(text):\n    '''\n    Write a function that matches a word that has an a followed by one to two b's.\n    '''\n    pattern = r\"ab{1,2}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_ten(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a word that has an a followed by two to three b's.\n    '''\n    pattern = r\"ab{2,3}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a word that has an a followed by two to three b's.\n    '''\n    pattern = r\"ab{2,3}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a word that has an a followed by three to four b's.\n    '''\n    pattern = r\"ab{3,4}\"\n    if re.search(pattern, text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\ndef text_match_twenty_six"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    pattern = r'ab+'\n    if re.search(pattern,text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match('a+b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if 'ab' in text:\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab',text):\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab*',text):\n        return True\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab+',text):\n        return True\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab?',text):\n        return True\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('ab*?',text):\n        return True\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)+',text):\n        return True\n    else:\n        return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)+?',text):\n        return True\n    else:\n        return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*',text):\n        return True\n    else:\n        return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentyeight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_twentynine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_thirtyone(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('(ab)*?',text):\n        return True\n    else:\n        return False\ndef text_match_thirtytwo(text):"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    return pattern.match(text) is not None\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    # if re.search(pattern, text):\n    #     print('There is a match!')\n    # else:\n    #     print('No match!')\n    match = pattern.search(text)\n    print(match)\n    if match:\n        print('There is a match!')\n    else:\n        print('No match!')\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    digit = int(n%10)\n    return digit\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    return last_Digit(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = n % 10\n    return last\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n)%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for i in list1:\n        if i < 0:\n            negative_nos.append(i)\n    return negative_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list=[]\n    for i in list1:\n        if i<0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for num in list1:\n        if num < 0:\n            list2.append(num)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for num in list1:\n        if num < 0:\n            list2.append(num)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [item for item in list1 if item < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1 if x<0]\n    \n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x%2==0, str1))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return ''\n    \n    str2 = ''\n    for i in range(len(str1)):\n        if i%2 == 0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    while i < len(str1):\n        if (ord(str1[i])%2 == 1):\n            str1 = str1[0:i] + str1[i+1:len(str1)]\n        i = i + 1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1[::2])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(str1.split()).replace('','')\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1[::2]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i%2==0:\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str1 = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str1 += str1[i]\n    return new_str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([str1[i] for i in range(0, len(str1), 2)])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x, y in test_list:\n        if x < y:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in xrange(len(test_list)):\n        if i < len(test_list) - 1:\n            if (test_list[i], test_list[i + 1]) in test_list[i + 1:]:\n                count += 1\n            if (test_list[i + 1], test_list[i]) in test_list[i + 1:]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    i = 0\n    for x in range(len(test_list) - 1):\n        for y in range(x + 1, len(test_list)):\n            if test_list[x][1] == test_list[y][1] and test_list[x][0] == test_list[y][0] and test_list[x][1]!= test_list[y][0]:\n                i += 1\n    return i\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum((test_list[i],test_list[j]) == (test_list[j], test_list[i]) for i in range(len(test_list)) for j in range(len(test_list)))\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                count += 1\n            elif test_list[i][1] > test_list[j][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # O(n^2)\n    def count_pair(test_list):\n        if len(test_list) <= 1:\n            return 0\n        return len(test_list) * (len(test_list) - 1) / 2\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_dict = {}\n    reverse_dict = {}\n    \n    for element in test_list:\n        if element[0] in forward_dict:\n            forward_dict[element[0]] += 1\n        else:\n            forward_dict[element[0]] = 1\n        if element[1] in reverse_dict:\n            reverse_dict[element[1]] += 1\n        else:\n            reverse_dict[element[1]] = 1\n    \n    count = 0\n    for element in test_list:\n        if element[0] == element[1]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i][0] < test_list[i+1][0] and test_list[i][1] > test_list[i+1][1]:\n            count += 1\n        elif test_list[i][0] > test_list[i+1][0] and test_list[i][1] < test_list[i+1][1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                pairs += 1\n            elif test_list[i][0] == test_list[j][0]:\n                pairs += 1\n            elif test_list[i][1] == test_list[j][1]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n = len(L)\n    if n == 0:\n        return 0\n    else:\n        return (n-1)*(n//2)*(n//2+1) + (n//2)*n + L[n-1]\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result + L[i] * (10**i)\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return (L[0] * 10 ** (len(L) - 1)) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n = 0\n    for i in L:\n        n = n * 10 + i\n    return n\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Use reduce to do the same thing as the previous problem\n    return reduce(lambda x, y: x * 10 + y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for x in L:\n        total = total*10 + x\n    return total\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r'\\b(adverb)\\b',text)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match = re.findall(r'\\w+|\\$[\\d\\.]+|\\@[\\w\\.]+', text)\n    match = [m.lower() for m in match]\n    return match\ndef find_noun_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match = re.findall(r'\\w+|\\$[\\d\\.]+|\\@[\\w\\.]+', text)\n    match = [m.lower() for m in match]\n    return match\ndef noun_and_adverb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    return zip(noun, adverb)\ndef verb_and_adverb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    return zip(noun, adverb)\ndef noun_and_verb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    verb = find_verb_position(text)\n    return zip(noun, verb)\ndef adjective_and_adverb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    return zip(noun, adverb)\ndef adjective_and_verb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    verb = find_verb_position(text)\n    return zip(noun, verb)\ndef adjective_and_noun_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adjective = find_adjective_position(text)\n    noun = find_noun_position(text)\n    return zip(adjective, noun)\ndef pronoun_and_verb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pronoun = find_pronoun_position(text)\n    verb = find_verb_position(text)\n    return zip(pronoun, verb)\ndef pronoun_and_adverb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pronoun = find_pronoun_position(text)\n    adverb = find_adverb_position(text)\n    return zip(pronoun, adverb)\ndef pronoun_and_noun_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pronoun = find_pronoun_position(text)\n    noun = find_noun_position(text)\n    return zip(pronoun, noun)\ndef preposition_and_verb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    preposition = find_preposition_position(text)\n    verb = find_verb_position(text)\n    return zip(preposition, verb)\ndef preposition_and_noun_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    preposition = find_preposition_position(text)\n    noun = find_noun_position(text)\n    return zip(preposition, noun)\ndef preposition_and_adverb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    preposition = find_preposition_position(text)\n    adverb = find_adverb_position(text)\n    return zip(preposition, adverb)\ndef adverb_and_verb_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    verb = find_verb_position(text)\n    return zip(noun, verb)\ndef adverb_and_noun_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    return zip(noun, adverb)\ndef adverb_and_adjective_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    return zip(noun, adverb)\ndef adverb_and_preposition_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    preposition = find_preposition_position(text)\n    return zip(noun, adverb, preposition)\ndef adverb_and_adjective_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    adjective = find_adjective_position(text)\n    return zip(noun, adverb, adjective)\ndef adverb_and_preposition_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    preposition = find_preposition_position(text)\n    return zip(noun, adverb, preposition)\ndef adverb_and_adjective_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    noun = find_noun_position(text)\n    adverb = find_adverb_position(text)\n    adjective = find_adjective_position(text)\n    return zip(noun, adverb, adjective)\ndef adverb_and_adjective_noun_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = find_adverb_position(text)\n    adjective = find_adjective_position(text)\n    noun = find_noun_position(text)\n    return zip(adverb, adjective, noun)\ndef adverb_and_adjective_preposition_noun_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = find_adverb_position(text)\n    adjective = find_adjective_position(text)\n    preposition = find_preposition_position(text)\n    noun = find_noun_position(text)\n    return zip(adverb, adjective, preposition, noun)\ndef adverb_and_adjective_noun_preposition_positions(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = find_a"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.finditer(r\"\\w+\", text)\n    pos = []\n    for word in result:\n        pos.append((word.start(0), word.end(0)))\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_preposition_position(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_indicator_position(text):\n    '''\n    Write a function to find the first indicator and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_conjunction_position(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_postposition_position(text):\n    '''\n    Write a function to find the first postposition and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_indeterminate_position(text):\n    '''\n    Write a function to find the first indeterminate and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_questionmark_position(text):\n    '''\n    Write a function to find the first questionmark and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_exclamationmark_position(text):\n    '''\n    Write a function to find the first exclamationmark and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_comma_position(text):\n    '''\n    Write a function to find the first comma and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_fullstop_position(text):\n    '''\n    Write a function to find the first fullstop and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_colon_position(text):\n    '''\n    Write a function to find the first colon and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_semicolon_position(text):\n    '''\n    Write a function to find the first semicolon and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_exclamationpoint_position(text):\n    '''\n    Write a function to find the first exclamationpoint and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_interrogationmark_position(text):\n    '''\n    Write a function to find the first interrogationmark and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_hyphen_position(text):\n    '''\n    Write a function to find the first hyphen and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_dquote_position(text):\n    '''\n    Write a function to find the first dquote and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_and_position(text):\n    '''\n    Write a function to find the first and and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_dagger_position(text):\n    '''\n    Write a function to find the first dagger and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_dollar_position(text):\n    '''\n    Write a function to find the first dollar and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_percent_position(text):\n    '''\n    Write a function to find the first percent and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_ampersand_position(text):\n    '''\n    Write a function to find the first ampersand and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_caret_position(text):\n    '''\n    Write a function to find the first caret and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_asterisk_position(text):\n    '''\n    Write a function to find the first asterisk and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_at_position(text):\n    '''\n    Write a function to find the first at and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_hash_position(text):\n    '''\n    Write a function to find the first hash and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_plus_position(text):\n    '''\n    Write a function to find the first plus and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_equal_position(text):\n    '''\n    Write a function to find the first equal and their positions in a given sentence.\n    '''\n    return re.findall(r'(?<=\\s)(\\w*)(?=\\s)', text)\ndef find_hyphen_position(text):\n    '''\n    Write a function to find the first hyphen and their positions in a given sentence.\n    '''\n    return re.findal"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern=re.compile(r'(?<=\\s)adverb')\n    matches=pattern.finditer(text)\n    return [match.start(0) for match in matches]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.compile(r'adverb')\n    first_adverb = []\n    for match in adverb.finditer(text):\n        first_adverb.append(match.start())\n    return first_adverb\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    for m in re.finditer(r'(?<=\\s)([a-z]+)(?=\\s)', text):\n        positions.append(m.start())\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\w+\\.?[\\w]+'\n    res = re.findall(pattern,text)\n    return res\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # First word should be a noun, and the rest of the sentence should be an adjective\n    # Should not contain 'is,are,am,are' or similar\n    # No '!', '?' or ';' after a word\n    # Cannot contain a comma after a word\n    # Assume no newlines or spaces\n    # Assume sentence starts with a word, and no leading space\n    # Assume no leading and trailing spaces\n    # Input: \"my dog is amazing\"\n    # Output: [2, [0,4,7]]\n    # Explanation: \"my dog is\" is the first adverb and is at index 2\n    #                \"amazing\" is the second adverb and is at index 4\n    #               \"great\" is the third adverb and is at index 7\n    #               \n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    index = 0\n    for i in range(len(text)):\n        if text[i] == '\\n':\n            break\n        elif text[i].lower() == 'adverb':\n            index = i\n            break\n    return (text[index], index)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*l*l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6\n    l1 = l ** 2\n    l2 = l ** 2\n    l3 = l ** 2\n    return sa * (l1 + l2 + l3)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l * l * l\n    return 6 * a\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    face_area = 6\n    return face_area * l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positive = 0\n    num_negative = 0\n    num_zero = 0\n    for x in nums:\n        if x > 0:\n            num_positive += 1\n        elif x < 0:\n            num_negative += 1\n        else:\n            num_zero += 1\n    total_sum = num_negative + num_zero + num_positive\n    return num_positive/total_sum\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count = count + 1\n    return count/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return (sum([1 for x in nums if x > 0]))/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(nums.count(1)) / float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(nums.count(1)) / float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/float(len(nums))\n    \n    \ndef unique_items(nums):\n    '''\n    Write a function that takes an array of numbers and returns a new array with the same elements in the same order but with any duplicates removed.\n    '''\n    new_nums = []\n    for i in nums:\n        if i not in new_nums:\n            new_nums.append(i)\n    return new_nums\n    \n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num = 0\n    for i in nums:\n        if i > 0:\n            num += 1\n    return num/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for x in nums:\n        if x > 0:\n            positive += 1\n    print(positive/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    i = 0\n    for j in range(n):\n        if nums[j] > 0:\n            i += 1\n    return i/float(n)\ndef random_case():\n    '''\n    Write a function that randomly generates a list of n integer between 1 to 10 inclusive.\n    Write a function that randomly generates a list of n integer between -10 to 10 inclusive.\n    Write a function that randomly generates a list of n integer between 1 and 10 inclusive.\n    Write a function that randomly generates a list of n integer between -10 and 10 inclusive.\n    '''\n    import random\n    nums = []\n    for i in range(10):\n        nums.append(random.randint(1,10))\n    print nums\ndef random_case2():\n    '''\n    Write a function that randomly generates a list of n integer between 1 to 10 inclusive.\n    Write a function that randomly generates a list of n integer between -10 to 10 inclusive.\n    Write a function that randomly generates a list of n integer between 1 and 10 inclusive.\n    Write a function that randomly generates a list of n integer between -10 and 10 inclusive.\n    '''\n    import random\n    nums = []\n    for i in range(10):\n        nums.append(random.randint(1,10))\n    print nums\n    return random.randint(1,10)\ndef sum_of_squares(nums):\n    '''\n    Write a function that finds the sum of the squares of the integers in a list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i**2\n    return sum\ndef subtract_mean(nums):\n    '''\n    Write a function that subtracts the mean of a list of numbers from each element in the list.\n    '''\n    mean = sum_of_squares(nums)/len(nums)\n    for i in range(len(nums)):\n        nums[i] = nums[i] - mean\n    return nums\ndef median_of_three(nums):\n    '''\n    Write a function that takes a list of integers and returns the median of the elements in the list.\n    '''\n    n = len(nums)\n    if n%2 == 0:\n        return (nums[n/2] + nums[(n/2)-1])/2.0\n    else:\n        return nums[n/2]\ndef swap(nums):\n    '''\n    Write a function that takes a list of integers and swaps the positions of two numbers in the list.\n    '''\n    nums[1], nums[2] = nums[2], nums[1]\n    return nums\ndef frequency(nums, item):\n    '''\n    Write a function that takes a list of integers and returns the number of times the item appears in the list.\n    '''\n    count = 0\n    for i in nums:\n        if i == item:\n            count += 1\n    return count\ndef mode(nums):\n    '''\n    Write a function that takes a list of integers and returns the most frequent number in the list.\n    '''\n    max_count = 0\n    most_freq = 0\n    for i in nums:\n        if frequency(nums, i) > max_count:\n            max_count = frequency(nums, i)\n            most_freq = i\n    return most_freq\ndef sort_numbers(nums):\n    '''\n    Write a function that takes a list of integers and returns a sorted list of the numbers in the original list.\n    '''\n    return sorted(nums)\ndef min_frequency(nums):\n    '''\n    Write a function that takes a list of integers and returns the number of times the smallest number appears in the list.\n    '''\n    count = 0\n    min = nums[0]\n    for i in nums:\n        if i == min:\n            count += 1\n    return count\ndef max_frequency(nums):\n    '''\n    Write a function that takes a list of integers and returns the number of times the largest number appears in the list.\n    '''\n    count = 0\n    max = nums[0]\n    for i in nums:\n        if i == max:\n            count += 1\n    return count\ndef prime_checker(n):\n    '''\n    Write a function that takes an integer and returns True if the number is prime and False if it is not prime.\n    '''\n    if n%2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n%i == 0:\n            return False\n    return True\ndef reverse(nums):\n    '''\n    Write a function that takes a list of integers and returns the reverse of the list.\n    '''\n    nums.reverse()\n    return nums\ndef remove_middle(nums):\n    '''\n    Write a function that takes a list of integers and returns a new list of integers with the middle element removed.\n    '''\n    return nums[1:-1]\ndef no_less_than(nums):\n    '''\n    Write a function that takes a list of integers and returns a new list of integers with the numbers less than 5 removed.\n    '''\n    nums2 = []\n    for i in nums:\n        if i < 5:\n            continue\n        else:\n            nums2.append(i)\n    return nums2\ndef greater_than(nums, threshold):\n    '''\n    Write a function that takes a list of integers and returns a new list of integers with the numbers greater than the threshold removed.\n    '''\n    nums2 = []\n    for i in nums:\n        if i > threshold:\n            nums2.append(i)\n    return nums2\ndef sum_first_n_numbers(nums, n):\n    '''\n    Write a function that takes a list of numbers and returns the sum of the first n numbers in the list.\n    '''\n    return sum(nums[0:n])\ndef sum_last_n_numbers(nums, n):\n    '''\n    Write a function that takes a list of numbers and returns the sum of the last n numbers in the list.\n    '''\n    return sum(nums[-n:])\ndef largest_number(nums):\n    '''\n    Write a function that takes a list of numbers and returns the largest number in the list.\n    '''\n    max_n = 0\n    for i in nums:\n        if i > max_n:\n            max_n = i\n    return max_n\ndef smallest_number(nums):\n    '''\n    Write a function that takes a list of numbers and returns the smallest number in the list.\n    '''\n    min_n = nums[0]\n    for i in nums:\n        if i < min_n:\n            min_n = i\n    return min_n\ndef first_and_last_n_numbers(nums, n):\n    '''\n    Write a function that takes a list of numbers and returns a new list with the first n numbers and the last n numbers.\n    '''\n    return nums[0:n] + nums[-n:]\ndef circular_list(nums):\n    '''\n    Write a function that takes a list of numbers and returns a new list that is a circular version of the original list.\n    '''\n    return nums + nums\ndef merge(nums1, nums2):\n    '''\n    Write a function that takes two lists and merges them together in order.\n    '''\n    nums1.extend(nums2)\n    return sorted(nums1)\ndef is_palindrome(nums):\n    '''\n    Write a function that takes a list of numbers and returns a new list of numbers with the palindromes removed.\n    '''\n    nums2 = []\n    for i in nums:\n        if i == reverse(i):\n            nums2.append(i)\n    return nums2\ndef reverse_list(nums):\n    '''\n    Write a function that takes a list of numbers and returns a new list with the numbers in reverse order.\n    '''\n    nums2 = []\n    for i in nums:\n        nums2.insert(0, i)\n    return nums2\ndef swap_first_and_last_numbers(nums, n)"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n    return pos/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = sorted(list1)\n    list1 = list1[::-1]\n    list1 = sorted(list1)\n    return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sorted(list1)[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_val = -1\n    for val in list1:\n        if val < 0 and val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for i in list1:\n        if i < 0:\n            if i > max_neg:\n                max_neg = i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1==[]:\n        return None\n    else:\n        #start at end of list and compare to the beginning\n        #if the item is smaller, replace it\n        for i in range(len(list1)-1,-1,-1):\n            if list1[i]<list1[0]:\n                list1[0]=list1[i]\n                break\n        return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\ndef smallest_pos(list1):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    return min(list1)\ndef num_len(list1):\n    '''\n    Write a python function to find the number of elements in the list.\n    '''\n    return len(list1)\ndef sorted_list(list1):\n    '''\n    Write a python function to sort the elements of the list in ascending order.\n    '''\n    return sorted(list1)\ndef sum_num(list1):\n    '''\n    Write a python function to find the sum of all the elements of the list.\n    '''\n    return sum(list1)\ndef middle_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return list1[int(len(list1)/2)]\ndef first_middle_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[0] + list1[len(list1)/2])\ndef second_middle_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[1] + list1[len(list1)/2-1])\ndef third_middle_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[2] + list1[len(list1)/2-2])\ndef four_middle_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[3] + list1[len(list1)/2-3])\ndef first_fourth_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[0] + list1[len(list1)/2-1])\ndef second_fourth_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[1] + list1[len(list1)/2-2])\ndef third_fourth_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[2] + list1[len(list1)/2-3])\ndef first_sixth_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[0] + list1[len(list1)/2-1])\ndef second_sixth_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[1] + list1[len(list1)/2-2])\ndef third_sixth_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[2] + list1[len(list1)/2-3])\ndef last_third_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[len(list1)-1] + list1[len(list1)/2])\ndef last_sixth_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[len(list1)-1] + list1[len(list1)/2-1])\ndef last_second_value(list1):\n    '''\n    Write a python function to find the middle element of the list.\n    '''\n    return (list1[len(list1)-1] + list1[len(list1)/2])\ndef sum_odd_value(list1):\n    '''\n    Write a python function to find the sum of the odd values of the list.\n    '''\n    return sum(list1[1::2])\ndef sum_even_value(list1):\n    '''\n    Write a python function to find the sum of the even values of the list.\n    '''\n    return sum(list1[0::2])\ndef min_value(list1):\n    '''\n    Write a python function to find the minimum value of the list.\n    '''\n    return min(list1)\ndef max_value(list1):\n    '''\n    Write a python function to find the maximum value of the list.\n    '''\n    return max(list1)\ndef mode(list1):\n    '''\n    Write a python function to find the mode of the list.\n    '''\n    count = 0\n    for i in list1:\n        if list1.count(i) > count:\n            count = list1.count(i)\n            mode_num = i\n    return mode_num\ndef sum_num_squared(list1):\n    '''\n    Write a python function to find the sum of the squared values of the list.\n    '''\n    return sum(list(map(lambda x: x**2, list1)))\ndef sum_num_cube(list1):\n    '''\n    Write a python function to find the sum of the cubed values of the list.\n    '''\n    return sum(list(map(lambda x: x**3, list1)))\ndef sum_num_fourth_power(list1):\n    '''\n    Write a python function to find the sum of the fourth power values of the list.\n    '''\n    return sum(list(map(lambda x: x**4, list1)))\ndef sum_num_fifth_power(list1):\n    '''\n    Write a python function to find the sum of the fifth power values of the list.\n    '''\n    return sum(list(map(lambda x: x**5, list1)))\ndef max_num_first_quart(list1):\n    '''\n    Write a python function to find the maximum value of the first quartile of the list.\n    '''\n    return max(list1[0:int(len(list1)/4)])\ndef max_num_second_quart(list1):\n    '''\n    Write a python function to find the maximum value of the second quartile of the list.\n    '''\n    return max(list1[int(len(list1)/4):int(2*len(list1)/4)])\ndef max_num_third_quart(list1):\n    '''\n    Write a python function to find the maximum value of the third quartile of the list.\n    '''\n    return max(list1[int(2*len(list1)/4):int(3*len(list1)/4)])\ndef max_num_fourth_quart(list1):\n    '''\n    Write a python function to find the maximum value of the fourth quartile of the list.\n    '''\n    return max(list1[int(3*len(list1)/4):int(4*len(list1)/4)])\ndef max_num_fifth_quart(list1):\n    '''\n    Write a python function to find the maximum value of the fifth quartile of the list.\n    '''\n    return max(list1[int(4*len(list1)/4):int(len(list1))])\ndef max_num_sixth_quart(list1):\n    '''\n    Write a python function to find the maximum value of the sixth quartile of the list.\n    '''\n    return max(list1[int(len(list1)/2):int(3*len(list1)/4)])\ndef min_num_first_quart(list1):\n    '''\n    Write a python function to find the minimum value of the first quartile of the list.\n    '''\n    return min(list1[0:int(len(list1)/4)])\ndef min_num_second_quart(list1):\n    '''\n    Write a python function to find the minimum value of the second quartile of the list.\n    '''\n    return min(list1[int(len(list1)/4):int(2*len(list1)/4)])\ndef min_num_third_quart(list1):\n    '"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = -1\n    for item in list1:\n        if item < max_negative:\n            max_negative = item\n    return max_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(filter(lambda x: x<0, list1))\n    \nprint(largest_neg([1,2,3,4,5,6,7,8,9,-1]))\nprint(largest_neg([-3, -2, -1, 0, 1, 2, 3]))\nprint(largest_neg([-1, -1, -2, -3, -4]))\nprint(largest_neg([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(largest_neg([1, -3, -2, -1, 0, 1, 2, 3])"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[-1]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0],x[1][:K]) for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Remove the first element\n    for i in range(len(test_list) - 1, -1, -1):\n        if test_list[i][K] < 0:\n            test_list.pop(i)\n    # Remove the last element\n    for i in range(len(test_list) - 1, -1, -1):\n        if test_list[i][K] > 0:\n            test_list.pop(i)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(elem[0], elem[1][0:K]) for elem in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(i[0], i[1][0:K], i[1][K:]) for i in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[:K])\n    return new_list\n    \ndef n_gram_model(corpus):\n    '''\n    Write a function to implement n-gram model.\n    '''\n    \n    word_dict = {}\n    for sentence in corpus:\n        for word in sentence:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    \n    word_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    print(word_dict)\n    \n    return word_dict\n    \ndef n_gram_model_trim(corpus, K):\n    '''\n    Write a function to implement n-gram model.\n    '''\n    \n    word_dict = {}\n    for sentence in corpus:\n        for word in sentence:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    \n    word_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    print(word_dict)\n    \n    return trim_tuple(word_dict, K)\n    \ndef n_gram_model_prob(corpus, K):\n    '''\n    Write a function to implement n-gram model.\n    '''\n    \n    word_dict = {}\n    for sentence in corpus:\n        for word in sentence:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    \n    word_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    print(word_dict)\n    \n    return word_dict\n    \ndef n_gram_model_prob_trim(corpus, K):\n    '''\n    Write a function to implement n-gram model.\n    '''\n    \n    word_dict = {}\n    for sentence in corpus:\n        for word in sentence:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    \n    word_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    print(word_dict)\n    \n    return trim_tuple(word_dict, K)\n    \ndef sent_model_prob(corpus, K):\n    '''\n    Write a function to implement sentence model.\n    '''\n    \n    sentence_dict = {}\n    \n    for sentence in corpus:\n        for word in sentence:\n            if word in sentence_dict:\n                sentence_dict[word] += 1\n            else:\n                sentence_dict[word] = 1\n    \n    sentence_dict = sorted(sentence_dict.items(), key=lambda x: x[1], reverse=True)\n    print(sentence_dict)\n    \n    return sentence_dict\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t)[K:] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(t[0], t[1][K:]) for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(test_list[0][0:K], test_list[0][K:len(test_list[0])], test_list[1]) for test_list in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(t[0], t[1][K:]) for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][0:K])\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([x*y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i]*test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = ()\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        test_tup3 += (ele1*ele2,)\n    return test_tup3\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i]*test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Write your code here\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_list = [test_tup1[i]*test_tup2[i] for i in range(0, len(test_tup1))]\n    return index_multiplication_list\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    if tup1_len!= tup2_len:\n        print \"Tupel lengths must be equal to perform multiplication\"\n        return\n    return zip(*test_tup1) * test_tup2\n    "
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # insert your logic here\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i,j in zip(test_tup1,test_tup2):\n        new_tup += (i*j, )\n    return new_tup\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = {}\n    for item in tup:\n        if item not in dict:\n            dict[item] = 1\n        else:\n            dict[item] += 1\n    for item in lst:\n        if item in dict:\n            print (item, \":\", dict[item])\n        else:\n            print (item, \":\", \"0\")\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for i in lst:\n        if i in tup:\n            counter = counter + 1\n    return counter \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).get(tup, 0)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = [] \n    for i in lst: \n        count.append(tup.count(i)) \n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dic = {}\n    for i in tup:\n        if i not in dic:\n            dic[i]=0\n        dic[i]+=1\n    for j in lst:\n        if j in dic:\n            del dic[j]\n    return dic\ndef find_Median(lst): \n    '''\n    Write a python function to compute the median of a list. \n    '''\n    lst.sort()\n    n = len(lst)\n    if n == 0:\n        return None\n    if n%2 == 1:\n        return lst[int((n-1)/2)]\n    else:\n        return (lst[int((n/2)-1)] + lst[int(n/2)])/2.0\ndef check_Expectation(lst, exp):\n    '''\n    Write a python function to check if the list is sorted.\n    '''\n    return lst == sorted(lst)\ndef find_LCM(lst):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    lcm = lst[0]\n    for i in range(1, len(lst)):\n        lcm = lcm*lst[i]/gcd(lcm, lst[i])\n    return lcm\ndef gcd(a, b):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\ndef find_GCD(lst):\n    '''\n    Write a python function to compute the greatest common divisor of all numbers in a list.\n    '''\n    gcd = lst[0]\n    for i in range(1, len(lst)):\n        gcd = gcd*lst[i]/gcd(gcd, lst[i])\n    return gcd\ndef is_palindrome(lst):\n    '''\n    Write a python function to check whether the given list is a palindrome.\n    '''\n    return lst[:] == lst[::-1]\ndef primeFactors(n): \n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    if n < 2:\n        return None\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n /= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            count += 1\n            n /= i\n    if n > 2:\n        count += 1\n    return count\ndef count_Elements(lst, k): \n    '''\n    Write a python function to count the number of elements with a given value k in a list.\n    '''\n    return lst.count(k)\ndef is_Subset(lst1, lst2):\n    '''\n    Write a python function to check whether one list is a subset of another.\n    '''\n    for i in lst2:\n        if i not in lst1:\n            return False\n    return True\ndef find_Min(lst):\n    '''\n    Write a python function to find the minimum value of a list.\n    '''\n    min = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n    return min\ndef find_Max(lst): \n    '''\n    Write a python function to find the maximum value of a list.\n    '''\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\ndef find_Mode(lst):\n    '''\n    Write a python function to find the mode (or most frequently occurring element) of a list.\n    '''\n    dic = {}\n    for i in lst:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    max = 0\n    mode = []\n    for j in dic:\n        if dic[j] > max:\n            max = dic[j]\n            mode = [j]\n        elif dic[j] == max:\n            mode.append(j)\n    return mode\ndef find_Range(lst):\n    '''\n    Write a python function to find the range (difference between the maximum and the minimum) of a list.\n    '''\n    return find_Max(lst) - find_Min(lst)\ndef find_Modified_Preorder(lst):\n    '''\n    Write a python function to find the modified preorder traversal of a binary tree.\n    '''\n    res = []\n    stack = [lst]\n    while stack!= []:\n        if stack[0].left!= None:\n            stack.append(stack[0].left)\n        else:\n            res.append(stack[0].val)\n            stack.pop(0)\n        if stack[0].right!= None:\n            stack.append(stack[0].right)\n        else:\n            res.append(stack[0].val)\n            stack.pop(0)\n    return res\ndef find_Modified_Inorder(lst):\n    '''\n    Write a python function to find the modified inorder traversal of a binary tree.\n    '''\n    res = []\n    stack = [lst]\n    while stack!= []:\n        if stack[0].left!= None:\n            stack.append(stack[0].left)\n        else:\n            res.append(stack[0].val)\n            stack.pop(0)\n        if stack[0].right!= None:\n            stack.append(stack[0].right)\n        else:\n            res.append(stack[0].val)\n            stack.pop(0)\n    return res\ndef find_Modified_Postorder(lst):\n    '''\n    Write a python function to find the modified postorder traversal of a binary tree.\n    '''\n    res = []\n    stack = [lst]\n    while stack!= []:\n        if stack[0].left!= None:\n            stack.append(stack[0].left)\n        if stack[0].right!= None:\n            stack.append(stack[0].right)\n        res.append(stack[0].val)\n        stack.pop(0)\n    return res[::-1]\ndef find_Maximum_Subtree(lst):\n    '''\n    Write a python function to find the maximum subtree of a binary tree.\n    '''\n    if lst == None:\n        return None\n    if lst.left == None and lst.right == None:\n        return lst\n    max = find_Maximum_Subtree(lst.left)\n    if max.right!= None:\n        return max.right\n    else:\n        return max\ndef find_Minimum_Subtree(lst):\n    '''\n    Write a python function to find the minimum subtree of a binary tree.\n    '''\n    if lst == None:\n        return None\n    if lst.left == None and lst.right == None:\n        return lst\n    min = find_Minimum_Subtree(lst.right)\n    if min.left!= None:\n        return min.left\n    else:\n        return min\ndef find_N_th_node_from_end(lst, n): \n    '''\n    Write a python function to find the n-th node from the end of a given linked list.\n    '''\n    length = 0\n    temp = lst\n    while temp!= None:\n        length+=1\n        temp = temp.next\n    if n > length:\n        return None\n    count = 0\n    temp = lst\n    while temp!= None:\n        count+=1\n        if count == length - n:\n            return temp\n        temp = temp.next\ndef find_N_th_node_from_end_Recursive(lst, n): \n    '''\n    Write a python function to find the n-th node from the end of a given linked list.\n    '''\n    length = 0\n    temp = lst\n    while temp!= None:\n        length+=1\n        tem"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    result = [] \n    for j in lst: \n        count = 0\n        for i in tup: \n            if i == j: \n                count += 1\n        result.append(count) \n    return result \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    if tup in c.keys():\n        return c[tup]\n    else:\n        return 0\ndef unique_values(obj):\n    '''\n    Write a python function to count the unique values of a list.\n    '''\n    return len(set(obj))\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = {}\n    for key in tup:\n        if key not in lst:\n            d[key] = 1\n        else:\n            d[key] += 1\n    return d\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print \" \".join(map(str,lst))\n    dct = dict(Counter(lst))\n    return dct \ndef _min_max(tup): \n    '''\n    Write a python function to find the min and max value from a tuple.\n    '''\n    minVal = min(tup)\n    maxVal = max(tup)\n    return minVal, maxVal \ndef _sum(tup): \n    '''\n    Write a python function to find the sum of a tuple.\n    '''\n    return sum(tup)\ndef _median(tup): \n    '''\n    Write a python function to find the median value from a tuple.\n    '''\n    if len(tup)%2 == 0:\n        median = float((tup[len(tup)/2]+tup[(len(tup)/2)-1])/2)\n    else:\n        median = float(tup[len(tup)/2])\n    return median\ndef _mode(tup): \n    '''\n    Write a python function to find the mode value from a tuple.\n    '''\n    dct = count_Occurrence(tup, tup)\n    print dct\n    mode = max(dct, key=dct.get)\n    return mode\ndef _mean(tup): \n    '''\n    Write a python function to find the mean value from a tuple.\n    '''\n    mean = _sum(tup) / len(tup)\n    return mean\ndef _standard_Deviation(tup): \n    '''\n    Write a python function to find the standard deviation value from a tuple.\n    '''\n    mean = _mean(tup)\n    deviation = sum((value - mean)**2 for value in tup)\n    standard_Deviation = (deviation/len(tup))**0.5\n    return standard_Deviation\ndef _variance(tup): \n    '''\n    Write a python function to find the variance value from a tuple.\n    '''\n    variance = _standard_Deviation(tup)**2\n    return variance\ndef _skewness(tup): \n    '''\n    Write a python function to find the skewness value from a tuple.\n    '''\n    mean = _mean(tup)\n    variance = _variance(tup)\n    skewness = (sum((value - mean)**3 for value in tup) / variance) / (len(tup)**(1/3))\n    return skewness\ndef _kurtosis(tup): \n    '''\n    Write a python function to find the kurtosis value from a tuple.\n    '''\n    mean = _mean(tup)\n    variance = _variance(tup)\n    kurtosis = (sum((value - mean)**4 for value in tup) / variance) / (len(tup)**2)\n    return kurtosis\ndef _demean(tup): \n    '''\n    Write a python function to find the demean value from a tuple.\n    '''\n    mean = _mean(tup)\n    demean = tuple(value - mean for value in tup)\n    return demean\ndef _quartiles(tup): \n    '''\n    Write a python function to find the quartiles values from a tuple.\n    '''\n    length = len(tup)\n    if len%2 == 0:\n        length = len/2\n        firstQ = tup[0:length]\n        secondQ = tup[length:length+length]\n    else:\n        length = length/2\n        firstQ = tup[0:length]\n        secondQ = tup[length:length+length]\n    return firstQ, secondQ\ndef _trim(tup, trim): \n    '''\n    Write a python function to trim the tuple by trim percent.\n    '''\n    if trim > 100 or trim < 0:\n        return 'invalid percent trim'\n    length = len(tup)\n    if len%2 == 0:\n        length = len/2\n        firstQ = tup[0:length]\n        secondQ = tup[length:length+length]\n    else:\n        length = length/2\n        firstQ = tup[0:length]\n        secondQ = tup[length:length+length]\n    firstQ = _trimmed_list(firstQ, trim)\n    secondQ = _trimmed_list(secondQ, trim)\n    return firstQ, secondQ\ndef _trimmed_list(lst, trim): \n    '''\n    Write a python function to trim a list by trim percent.\n    '''\n    length = len(lst)\n    trimmed_length = int(length * trim)\n    lst = lst[trimmed_length:]\n    return lst\ndef _interquartile_range(tup): \n    '''\n    Write a python function to find the interquartile range value from a tuple.\n    '''\n    firstQ, secondQ = _quartiles(tup)\n    interquartile_range = _max(firstQ) - _min(secondQ)\n    return interquartile_range\ndef _outlier_count(tup): \n    '''\n    Write a python function to find the outlier count from a tuple.\n    '''\n    mean = _mean(tup)\n    stdev = _standard_Deviation(tup)\n    outlier_count = len([value for value in tup if abs(value - mean) > 4 * stdev])\n    return outlier_count\ndef _inlier_count(tup): \n    '''\n    Write a python function to find the inlier count from a tuple.\n    '''\n    mean = _mean(tup)\n    stdev = _standard_Deviation(tup)\n    outlier_count = len([value for value in tup if abs(value - mean) <= 4 * stdev])\n    return outlier_count\ndef _percent_outlier(tup): \n    '''\n    Write a python function to find the percent of outliers from a tuple.\n    '''\n    outlier_count = _outlier_count(tup)\n    total_count = len(tup)\n    percent_outlier = float(outlier_count/total_count * 100)\n    return percent_outlier\ndef _percent_inlier(tup): \n    '''\n    Write a python function to find the percent of inliers from a tuple.\n    '''\n    inlier_count = _inlier_count(tup)\n    total_count = len(tup)\n    percent_inlier = float(inlier_count/total_count * 100)\n    return percent_inlier\ndef _calculate_correlation(tup1, tup2): \n    '''\n    Write a python function to calculate the correlation between two tuples.\n    '''\n    if len(tup1) == len(tup2):\n        firstQ, secondQ = _quartiles(tup1)\n        firstQ = _trimmed_list(firstQ, 100)\n        secondQ = _trimmed_list(secondQ, 100)\n        sum1 = _sum(firstQ)\n        sum2 = _sum(secondQ)\n        mul1 = _sum(tup1)\n        mul2 = _sum(tup2)\n        x = mul1 - sum1\n        y = mul2 - sum2\n        numerator = _sum([x * y for x, y in zip(firstQ, secondQ)])\n        denominator = (_standard_Deviation(tup1) * _standard_Deviation(tup2))**0.5\n        if denominator!= 0:\n            correlation = numerator / denominator\n        else:\n            correlation = 0\n        return correlation\n    else:\n        return 'Length of tuple1 must be same as tuple2'\ndef _find_all(tup, sub): \n    '''\n    Write a python function to find all occurrences of a substring in a tuple.\n    '''\n    index = -1\n    for i in range(len(tup)):\n        if sub in tup[i]:\n            index = i\n    return index\ndef _replace_all(tup, old, new): "
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print(list(map(lambda x: pow(x, 3), nums)))\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print i*i*i\n    return\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] *= nums[i] * nums[i]\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for n in nums:\n        print('{}^3 = {}'.format(n, n*n*n))\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print \"cube_nums\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    print \"cubes:\", cubes\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if nums is None or len(nums) == 0:\n        return []\n    result = []\n    for n in nums:\n        result.append(n**3)\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: return 1\n    else: return cal_sum(n-1) + (2*(n-1)) + 1\n    \ndef cal_perrin_num(n, m):\n    '''\n    Write a function to calculate the nth number of Perrin sequence.\n    '''\n    if n == 0: return 1\n    elif n == 1: return m\n    else: return cal_perrin_num(n-1, m+2)\n    \ndef cal_sum_of_digits(n):\n    '''\n    Write a function to calculate the sum of digits of nth number of Perrin sequence.\n    '''\n    if n == 0: return 1\n    elif n == 1: return 1\n    else: return (2*n) + cal_sum_of_digits(n-1)\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is palindrome.\n    '''\n    n = str(n)\n    for i in range(len(n)//2):\n        if n[i]!= n[len(n)-i-1]:\n            return False\n    return True\n    \ndef num_to_str(n):\n    '''\n    Write a function to convert an integer to string.\n    '''\n    if n == 0: return '0'\n    else: return num_to_str(n//10) + str(n%10)\n    \ndef str_to_num(s):\n    '''\n    Write a function to convert a string to integer.\n    '''\n    if s == '': return 0\n    else: return int(s[-1])*10 + str_to_num(s[:-1])\n    \ndef is_pandigital(n):\n    '''\n    Write a function to check if a number is pandigital number.\n    '''\n    if len(str(n)) == 9:\n        s = str(n)\n        for i in range(1,10):\n            if s.count(str(i))!= 1:\n                return False\n        return True\n    else:\n        return False\n        \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 1: return False\n    else:\n        for i in range(2, n):\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = [1,2,3,4,5,6,7,8,9]\n    sum = 0\n    if n == 1:\n        return 1\n    for i in range(n):\n        sum += perrin_list[i]\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n**2 + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = []\n    for i in range(1,n+1):\n        temp = 0\n        while i!= 0:\n            temp += i%10\n            i = int(i/10)\n        res.append(temp)\n    return sum(res)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = n + 1\n    s = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            s += i ** 2\n    return s\n    \ndef cal_diff(n):\n    '''\n    Write a function to calculate the difference of perrin numbers.\n    '''\n    n = n + 1\n    s = 0\n    for i in range(1, n):\n        if i % 2!= 0:\n            s += i ** 2\n    return s\n    \ndef cal_sum_diff(n):\n    '''\n    Write a function to calculate the sum and difference of perrin numbers.\n    '''\n    n = n + 1\n    s = 0\n    d = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            s += i ** 2\n        else:\n            d += i ** 2\n    return s, d\n    \ndef cal_max_perrin(n):\n    '''\n    Write a function to calculate the maximum perrin number.\n    '''\n    n = n + 1\n    max_perrin = 0\n    for i in range(1, n):\n        if max_perrin < i ** 2:\n            max_perrin = i ** 2\n    return max_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        t = i\n        t = t * (3 * t - 1)\n        sum += t / (2 * i + 1)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    '''\n    Sum of perrin numbers is the sum of the number of steps\n    to get to the sum of the last ten numbers of a perrin sequence.\n    For example, if n = 15, then the sum is 518.\n    '''\n    num = 1\n    while n > 0:\n        num += n\n        n -= 1\n    return num\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 1\n    for i in range(n):\n        s += 2*i + 1\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num = 0\n    if n < 1:\n        return num\n    else:\n        n = n - 1\n        num = ((n*(n+1))/2)\n    return num\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    while(n):\n        s += (n%10)\n        n /= 10\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return ''\n    if l > len(str):\n        return ''\n    else:\n        return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        if len(str[i]) < l:\n            str[i] = str[i] + (l-len(str[i])) *''\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = [str[x:x+l] for x in range(0, len(str), l)]\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return None\n    if l > len(str):\n        return None\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    lst = []\n    for x in l:\n        x = x.strip()\n        if len(x) >= l:\n            lst.append(x[0:l])\n    return lst\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    temp = []\n    count = 0\n    while count < l:\n        temp.append(str[count:count+1])\n        count += 1\n    return temp\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[:l] for str in l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # check if l is a list\n    if not isinstance(l, list):\n        return \"invalid argument\"\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l2 = []\n    i = 0\n    for s in str:\n        if(len(s) == l):\n            l2.append(s)\n    return l2\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    list1 = []\n    for i in range(0,len(str)):\n        if i <= l:\n            list1.append(str[i])\n    return ''.join(list1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.replace(' ','')\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #result = re.sub(\"\\s+\", \"\", text1)\n    result = re.sub(\"\\s\", \"\", text1)\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\ndef replace_whitespaces(text1):\n    '''\n    Write a function to replace all whitespaces with a single space.\n    '''\n    return re.sub('\\s+','', text1)\ndef remove_special_characters(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+', '', text1)\ndef replace_special_characters(text1):\n    '''\n    Write a function to replace all special characters with a space.\n    '''\n    return re.sub('[^a-zA-Z0-9 ]+','', text1)\ndef remove_duplicates(text1):\n    '''\n    Write a function to remove all duplicates from the given string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text1)\ndef replace_duplicates(text1):\n    '''\n    Write a function to replace all duplicates with a space.\n    '''\n    return re.sub('[^a-zA-Z0-9 ]+','', text1)\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    return re.sub('[^a-zA-Z]+','', text1)\ndef replace_numbers(text1):\n    '''\n    Write a function to replace all numbers with a space.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text1)\ndef remove_all_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text1)\ndef replace_all_punctuation(text1):\n    '''\n    Write a function to replace all punctuation with a space.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text1)\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove all multiple spaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)\ndef replace_multiple_spaces(text1):\n    '''\n    Write a function to replace all multiple spaces with a single space.\n    '''\n    return re.sub('\\s+','', text1)\ndef remove_leading_spaces(text1):\n    '''\n    Write a function to remove all leading spaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\ndef replace_leading_spaces(text1):\n    '''\n    Write a function to replace all leading spaces with a single space.\n    '''\n    return re.sub('\\s+','', text1)\ndef remove_trailing_spaces(text1):\n    '''\n    Write a function to remove all trailing spaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\ndef replace_trailing_spaces(text1):\n    '''\n    Write a function to replace all trailing spaces with a single space.\n    '''\n    return re.sub('\\s+','', text1)\ndef get_list_of_tokens(text1):\n    '''\n    Write a function to get a list of tokens from the given string.\n    '''\n    return re.findall('[\\w\\.]+', text1)\ndef remove_multiple_whitespaces(text1):\n    '''\n    Write a function to remove all multiple whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)\ndef replace_multiple_whitespaces(text1):\n    '''\n    Write a function to replace all multiple whitespaces with a single space.\n    '''\n    return re.sub('\\s+','', text1)\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text1)\ndef replace_punctuation(text1):\n    '''\n    Write a function to replace all punctuation with a space.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text1)\ndef remove_multiple_punctuation(text1):\n    '''\n    Write a function to remove all multiple punctuation from the given string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text1)\ndef replace_multiple_punctuation(text1):\n    '''\n    Write a function to replace all multiple punctuation with a space.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text1)\ndef get_top_10_words(text1):\n    '''\n    Write a function to get the top 10 words from the given string.\n    '''\n    return Counter(text1.split()).most_common(10)\ndef remove_stop_words(text1, stopwords):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords])\ndef replace_stop_words(text1, stopwords):\n    '''\n    Write a function to replace all stop words with a space.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords])\ndef remove_words_with_length_less_than_n(text1, n):\n    '''\n    Write a function to remove all words with length less than n from the given string.\n    '''\n    return''.join([word for word in text1.split() if len(word) >= n])\ndef replace_words_with_length_less_than_n(text1, n):\n    '''\n    Write a function to replace all words with length less than n with a space.\n    '''\n    return''.join([word for word in text1.split() if len(word) >= n])\ndef remove_words_with_length_greater_than_n(text1, n):\n    '''\n    Write a function to remove all words with length greater than n from the given string.\n    '''\n    return''.join([word for word in text1.split() if len(word) <= n])\ndef replace_words_with_length_greater_than_n(text1, n):\n    '''\n    Write a function to replace all words with length greater than n with a space.\n    '''\n    return''.join([word for word in text1.split() if len(word) <= n])\ndef remove_multiple_stop_words(text1, stopwords):\n    '''\n    Write a function to remove all multiple stop words from the given string.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords])\ndef replace_multiple_stop_words(text1, stopwords):\n    '''\n    Write a function to replace all multiple stop words with a space.\n    '''\n    return''.join([word for word in text1.split() if word not in stopwords])\ndef remove_non_alphanumeric_chars(text1):\n    '''\n    Write a function to remove all non-alphanumeric characters from the given string.\n    '''\n    return ''.join(re.findall('[A-Za-z]+', text1))\ndef replace_non_alphanumeric_chars(text1):\n    '''\n    Write a function to replace all non-alphanumeric characters with a space.\n    '''\n    return ''.join(re.findall('[A-Za-z]+', text1))\ndef remove_spaces_around_punctuation(text1):\n    '''\n    Write a function to remove all spaces around punctuation from the given string.\n    '''\n    return re.su"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ', '')\n    return text1\ndef find_words(text1):\n    '''\n    Write a function that finds all the words in the given string in the form of a dictionary.\n    '''\n    x = re.findall(r'\\w+', text1)\n    l = len(x)\n    res = {}\n    for i in x:\n        if i not in res.keys():\n            res[i] = 1\n        else:\n            res[i] += 1\n    return res\ndef word_count(text1):\n    '''\n    Write a function that finds the word count in the given string.\n    '''\n    x = re.findall(r'\\w+', text1)\n    l = len(x)\n    return l\ndef reverse_string(text1):\n    '''\n    Write a function that reverses the given string.\n    '''\n    text1 = text1[::-1]\n    return text1\ndef alternate_case(text1):\n    '''\n    Write a function to convert all the upper case letters to lower case letters and vice versa.\n    '''\n    text1 = text1.swapcase()\n    return text1\ndef remove_punctuations(text1):\n    '''\n    Write a function that removes the punctuations in the given string.\n    '''\n    text1 = re.sub('[^a-zA-Z0-9\\s]', '', text1)\n    return text1\ndef remove_digits(text1):\n    '''\n    Write a function that removes all the digits from the given string.\n    '''\n    text1 = re.sub(r'[0-9]', '', text1)\n    return text1\ndef remove_special_characters(text1):\n    '''\n    Write a function to remove all the special characters from the given string.\n    '''\n    text1 = re.sub('[^a-zA-Z0-9]','', text1)\n    return text1\ndef find_substring(text1, text2):\n    '''\n    Write a function to find the position of the second given substring in the first given string.\n    '''\n    m = text2 in text1\n    if m == True:\n        res = text1.find(text2)\n    else:\n        res = -1\n    return res\ndef find_all_substrings(text1, text2):\n    '''\n    Write a function to find all the substrings of the second given string in the first given string.\n    '''\n    m = text2 in text1\n    if m == True:\n        res = re.findall(text2, text1)\n    else:\n        res = -1\n    return res\ndef find_length_of_longest_substring(text1, text2):\n    '''\n    Write a function to find the length of the longest common substring of the two given strings.\n    '''\n    m = text2 in text1\n    if m == True:\n        res = max(len(text1), len(text2))\n    else:\n        res = -1\n    return res\ndef convert_to_base_2(n):\n    '''\n    Write a function to convert an integer to its base-2 equivalent.\n    '''\n    bin_string = \"\"\n    while n > 0:\n        rem = n % 2\n        bin_string = str(rem) + bin_string\n        n = n // 2\n    return bin_string\ndef convert_to_base_10(n):\n    '''\n    Write a function to convert an integer to its base-10 equivalent.\n    '''\n    if n < 10:\n        res = n\n    else:\n        res = n % 10 + convert_to_base_10(n // 10) * 10\n    return res\ndef is_power_of_2(n):\n    '''\n    Write a function to check whether the given integer is a power of 2.\n    '''\n    if n == 1:\n        return True\n    if n & (n - 1) == 0:\n        return True\n    else:\n        return False\ndef is_power_of_2_old(n):\n    '''\n    Write a function to check whether the given integer is a power of 2.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n & (n - 1) == 0:\n        return True\n    return False\ndef is_power_of_2_new(n):\n    '''\n    Write a function to check whether the given integer is a power of 2.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n & (n - 1) == 0:\n        return True\n    if n & n-1 == 0:\n        return True\n    return False\ndef find_perfect_squares(n):\n    '''\n    Write a function to find all the perfect squares less than the given integer.\n    '''\n    res = []\n    i = 1\n    while i * i < n:\n        if i * i == n:\n            res.append(i * i)\n        i += 1\n    return res\ndef find_perfect_squares_old(n):\n    '''\n    Write a function to find all the perfect squares less than the given integer.\n    '''\n    res = []\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            res.append(i * i)\n        i += 1\n    return res\ndef find_perfect_squares_new(n):\n    '''\n    Write a function to find all the perfect squares less than the given integer.\n    '''\n    res = []\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            res.append(i * i)\n        if i * i < n:\n            res.append(i * i)\n        i += 1\n    return res\ndef find_perfect_squares_alt(n):\n    '''\n    Write a function to find all the perfect squares less than the given integer.\n    '''\n    res = []\n    i = 1\n    while i * i <= n:\n        res.append(i * i)\n        if i * i < n:\n            res.append(i * i)\n        i += 1\n    return res\ndef find_pythagorean_triples(n):\n    '''\n    Write a function to find all the pythagorean triples less than the given integer.\n    '''\n    res = []\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if (i * i + j * j) < n:\n                k = 1\n                while k * k <= n:\n                    if (i * i + j * j + k * k) < n:\n                        res.append((i * i + j * j + k * k))\n                    k += 1\n                j += 1\n            else:\n                break\n        i += 1\n    return res\ndef find_pythagorean_triples_old(n):\n    '''\n    Write a function to find all the pythagorean triples less than the given integer.\n    '''\n    res = []\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if (i * i + j * j) < n:\n                k = 1\n                while k * k <= n:\n                    if (i * i + j * j + k * k) < n:\n                        res.append((i * i + j * j + k * k))\n                    k += 1\n                j += 1\n            else:\n                break\n        i += 1\n    return res\ndef find_pythagorean_triples_new(n):\n    '''\n    Write a function to find all the pythagorean triples less than the given integer.\n    '''\n    res = []\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if (i * i + j * j) < n:\n                k = 1\n                while k * k <= n:\n                    if (i * i + j * j + k * k) < n:\n                        res.append((i * i + j "
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(' ', '', text1)\n    return text2\ndef remove_punctuation(text2):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    text3 = re.sub('[^\\w\\s]', '', text2)\n    return text3\ndef remove_digits(text3):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text4 = re.sub('\\d', '', text3)\n    return text4\ndef remove_words(text4):\n    '''\n    Write a function to remove all the words from the given string.\n    '''\n    text5 = re.sub('[\\w]', '', text4)\n    return text5\ndef split_sentence(text5):\n    '''\n    Write a function to split the given sentence into words.\n    '''\n    text6 = text5.split(' ')\n    return text6\ndef count_words(text6):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    count = len(text6)\n    return count\ndef sort_word_length(text6):\n    '''\n    Write a function to sort the words from the given string based on their length.\n    '''\n    sorted_word = sorted(text6, key = len)\n    return sorted_word\ndef replace_word(text7):\n    '''\n    Write a function to replace the word \"the\" with \"a\".\n    '''\n    text8 = re.sub('the', 'a', text7)\n    return text8\ndef replace_characters(text8):\n    '''\n    Write a function to replace all the characters of the given string from \"x\" to \"y\".\n    '''\n    text9 = re.sub('x', 'y', text8)\n    return text9\ndef replace_repeated_characters(text9):\n    '''\n    Write a function to replace all the characters of the given string from \"x\" to \"y\" that are repeating in the given string.\n    '''\n    text10 = re.sub('x+', 'y', text9)\n    return text10\ndef split_at_repetition(text10):\n    '''\n    Write a function to split the given string at the characters repeating in the given string.\n    '''\n    text11 = re.split('x+', text10)\n    return text11\ndef remove_character(text11):\n    '''\n    Write a function to remove all the characters from the given string.\n    '''\n    text12 = re.sub('[^\\w\\s]', '', text11)\n    return text12\ndef remove_case(text12):\n    '''\n    Write a function to remove the case from the given string.\n    '''\n    text13 = re.sub('[A-Z]', '', text12)\n    return text13\ndef remove_grapheme(text13):\n    '''\n    Write a function to remove all the grapheme characters from the given string.\n    '''\n    text14 = re.sub('[^\\w\\s]', '', text13)\n    return text14\ndef remove_non_alphanumeric_characters(text14):\n    '''\n    Write a function to remove all the non-alphanumeric characters from the given string.\n    '''\n    text15 = re.sub('[\\w\\s]', '', text14)\n    return text15\ndef remove_non_alphanumeric_characters_1(text15):\n    '''\n    Write a function to remove all the non-alphanumeric characters from the given string.\n    '''\n    text16 = re.sub('[^\\w\\s]', '', text15)\n    return text16\ndef remove_whitespaces_1(text16):\n    '''\n    Write a function to remove all the whitespaces from the given string.\n    '''\n    text17 = re.sub(' ', '', text16)\n    return text17\ndef remove_grapheme_1(text17):\n    '''\n    Write a function to remove all the grapheme characters from the given string.\n    '''\n    text18 = re.sub('[^\\w\\s]', '', text17)\n    return text18\ndef remove_non_alphanumeric_characters_2(text18):\n    '''\n    Write a function to remove all the non-alphanumeric characters from the given string.\n    '''\n    text19 = re.sub('[^\\w\\s]', '', text18)\n    return text19\ndef remove_whitespaces_2(text19):\n    '''\n    Write a function to remove all the whitespaces from the given string.\n    '''\n    text20 = re.sub(' ', '', text19)\n    return text20\ndef remove_punctuation_2(text20):\n    '''\n    Write a function to remove all the punctuation from the given string.\n    '''\n    text21 = re.sub('[^\\w\\s]', '', text20)\n    return text21\ndef remove_digits_2(text21):\n    '''\n    Write a function to remove all the digits from the given string.\n    '''\n    text22 = re.sub('\\d', '', text21)\n    return text22\ndef remove_words_2(text22):\n    '''\n    Write a function to remove all the words from the given string.\n    '''\n    text23 = re.sub('[\\w]', '', text22)\n    return text23\ndef replace_word_2(text23):\n    '''\n    Write a function to replace the word \"the\" with \"a\".\n    '''\n    text24 = re.sub('the', 'a', text23)\n    return text24\ndef replace_characters_2(text24):\n    '''\n    Write a function to replace all the characters of the given string from \"x\" to \"y\".\n    '''\n    text25 = re.sub('x', 'y', text24)\n    return text25\ndef replace_repeated_characters_2(text25):\n    '''\n    Write a function to replace all the characters of the given string from \"x\" to \"y\" that are repeating in the given string.\n    '''\n    text26 = re.sub('x+', 'y', text25)\n    return text26\ndef split_at_repetition_2(text26):\n    '''\n    Write a function to split the given string at the characters repeating in the given string.\n    '''\n    text27 = re.split('x+', text26)\n    return text27\ndef remove_character_2(text27):\n    '''\n    Write a function to remove all the characters from the given string.\n    '''\n    text28 = re.sub('[^\\w\\s]', '', text27)\n    return text28\ndef remove_case_2(text28):\n    '''\n    Write a function to remove the case from the given string.\n    '''\n    text29 = re.sub('[A-Z]', '', text28)\n    return text29\ndef remove_grapheme_2(text29):\n    '''\n    Write a function to remove all the grapheme characters from the given string.\n    '''\n    text30 = re.sub('[^\\w\\s]', '', text29)\n    return text30\ndef remove_non_alphanumeric_characters_3(text30):\n    '''\n    Write a function to remove all the non-alphanumeric characters from the given string.\n    '''\n    text31 = re.sub('[\\w\\s]', '', text30)\n    return text31\ndef remove_non_alphanumeric_characters_4(text31):\n    '''\n    Write a function to remove all the non-alphanumeric characters from the given string.\n    '''\n    text32 = re.sub('[^\\w\\s]', '', text31)\n    return text32\ndef remove_whitespaces_3(text32):\n    '''\n    Write a function to remove all the whitespaces from the given string.\n    '''\n    text33 = re.sub(' ', '', text32)\n    return text33\ndef remove_punctuation_3(text33):"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return float(actual_cost) - float(sale_amount)\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (sale_amount-actual_cost)*100/sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return (sale_amount-actual_cost)\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n    \ndef get_max_loss(costs,sales):\n    '''\n    Write a function that gives the maximum profit that can be made by buying and selling the stock\n    at the given cost.\n    '''\n    max_loss = 0\n    n = len(costs)\n    for i in range(n):\n        max_loss = max(max_loss,loss_amount(costs[i],sales[i]))\n    return max_loss\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost-sale_amount\n    if loss>0:\n        return loss\n    else:\n        return 0\n    \ndef profit_loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives profit loss amount on a sale if the given amount has profit else return 0.\n    '''\n    loss = actual_cost-sale_amount\n    if loss<0:\n        return loss\n    else:\n        return 0\n    \ndef profit_loss(actual_cost,sale_amount):\n    '''\n    Write a function that gives profit loss on a sale if the given amount has profit else return 0.\n    '''\n    loss = actual_cost-sale_amount\n    if loss<0:\n        return loss\n    else:\n        return 0\n    \ndef profit_loss_percentage(actual_cost,sale_amount):\n    '''\n    Write a function that gives profit loss percentage on a sale if the given amount has profit else return 0.\n    '''\n    loss = actual_cost-sale_amount\n    if loss<0:\n        return (loss/actual_cost)*100\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n%2==0:\n        return 2*n\n    else:\n        return 2*n\n    \ndef sumofsqrFactors(n):\n    '''\n    Write a python function to find the sum of sqr of even factors of a number.\n    '''\n    if n%2==0:\n        return ((n+1)*(n+2)/2)\n    else:\n        return ((n+1)*(n+2)/2)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 2 \n    sum = 0 \n    while i * i <= n : \n        if n % i == 0 : \n            sum = sum + i + n / i \n        i = i + 1 \n    if i * i > n : \n        sum = sum + i \n    return sum \ndef countFactors(n) : \n    '''\n    Write a python function to find the count of factors of a number.\n    '''\n    i = 2 \n    count = 0 \n    while i * i <= n : \n        if n % i == 0 : \n            count = count + 1 + n / i \n        i = i + 1 \n    if i * i > n : \n        count = count + 1 \n    return count \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    i = 2 \n    sum = 0 \n    while i * i <= n : \n        if n % i == 0 : \n            sum = sum + i \n        i = i + 1 \n    return sum \ndef countFactors(n) : \n    '''\n    Write a python function to find the count of prime factors of a number.\n    '''\n    i = 2 \n    count = 0 \n    while i * i <= n : \n        if n % i == 0 : \n            count = count + 1 \n        i = i + 1 \n    return count \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n \n    reverse = 0 \n    while n > 0 : \n        rem = n % 10 \n        reverse = reverse * 10 + rem \n        n = n / 10 \n    if temp == reverse : \n        return True \n    return False \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n \n    reverse = 0 \n    while n > 0 : \n        rem = n % 10 \n        reverse = reverse * 10 + rem \n        n = n / 10 \n    if temp == reverse : \n        return True \n    return False \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n \n    reverse = 0 \n    while n > 0 : \n        rem = n % 10 \n        reverse = reverse * 10 + rem \n        n = n / 10 \n    if temp == reverse : \n        return True \n    return False \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False \n    if n == 2 : \n        return True \n    if n % 2 == 0 : \n        return False \n    i = 3 \n    while i * i <= n : \n        if n % i == 0 : \n            return False \n        i = i + 2 \n    return True \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1 : \n        return False "
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n<0) : n = n*-1\n    return (n*(n+1)/2)\ndef isPerfectSquare(x) : \n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    s = int(math.sqrt(x))\n    return (s*s == x)\ndef isPerfectSquare1(x) : \n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    s = int(math.sqrt(x))\n    return (s*s == x)\ndef countDigits(n) : \n    '''\n    Write a python function to find the count of digits in a number.\n    '''\n    cnt = 0\n    while (n) : \n        cnt = cnt + 1\n        n = n/10\n    return cnt\ndef countDigits1(n) : \n    '''\n    Write a python function to find the count of digits in a number.\n    '''\n    cnt = 0\n    while (n) : \n        n = n//10\n        cnt = cnt + 1\n    return cnt\ndef isPalindrome(n) : \n    '''\n    Write a python function to find if a number is palindrome or not.\n    '''\n    rev = 0\n    while (n) : \n        rev = rev*10 + n%10\n        n = n//10\n    return (n==rev)\ndef isPalindrome1(n) : \n    '''\n    Write a python function to find if a number is palindrome or not.\n    '''\n    return (n == int(str(n)[::-1]))\ndef isPrime(n) : \n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if (n<2) : \n        return False\n    elif (n==2) : \n        return True\n    else : \n        for i in range(2,n) : \n            if (n%i == 0) : \n                return False\n        return True\ndef isPrime1(n) : \n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if (n<2) : \n        return False\n    elif (n==2) : \n        return True\n    else : \n        for i in range(2,int(math.sqrt(n))+1) : \n            if (n%i == 0) : \n                return False\n        return True\ndef isPerfectPower(n) : \n    '''\n    Write a python function to find if a number is perfect power or not.\n    '''\n    i = 2\n    while (n>=i*i) : \n        if (n%i == 0) : \n            p = 1\n            while (n%i == 0) : \n                p = p + 1\n                n = n//i\n            if (p==i) : \n                return True\n        i = i + 1\n    return False\ndef isPerfectPower1(n) : \n    '''\n    Write a python function to find if a number is perfect power or not.\n    '''\n    i = 2\n    while (n>=i*i) : \n        if (n%i == 0) : \n            p = 1\n            while (n%i == 0) : \n                p = p + 1\n                n = n//i\n            if (p==i) : \n                return True\n        i = i + 1\n    return False\ndef isPrimeNumber(n) : \n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if (n<2) : \n        return False\n    elif (n==2) : \n        return True\n    else : \n        if (n%2 == 0) : \n            return False\n        for i in range(3,int(math.sqrt(n))+1,2) : \n            if (n%i == 0) : \n                return False\n        return True\ndef isPrimeNumber1(n) : \n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if (n<2) : \n        return False\n    elif (n==2) : \n        return True\n    else : \n        if (n%2 == 0) : \n            return False\n        i = 3\n        while (i*i<=n) : \n            if (n%i == 0) : \n                return False\n            i = i + 2\n        return True\ndef primefactors(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if (n<0) : n = n*-1\n    primes = []\n    while (n!=1) : \n        if (isPrimeNumber(n)==False) : \n            primes.append(n)\n            n = n/n\n        else : \n            primes.append(n)\n            n = 1\n    return primes\ndef primefactors1(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if (n<0) : n = n*-1\n    primes = []\n    while (n!=1) : \n        if (isPrimeNumber1(n)==False) : \n            primes.append(n)\n            n = n/n\n        else : \n            primes.append(n)\n            n = 1\n    return primes\ndef primefactors2(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if (n<0) : n = n*-1\n    primes = []\n    while (n!=1) : \n        if (isPrimeNumber(n)==False) : \n            primes.append(n)\n            n = n/n\n        else : \n            primes.append(n)\n            n = 1\n    return primes\ndef isPerfectPower2(n) : \n    '''\n    Write a python function to find if a number is perfect power or not.\n    '''\n    i = 2\n    while (n>=i*i) : \n        if (n%i == 0) : \n            p = 1\n            while (n%i == 0) : \n                p = p + 1\n                n = n//i\n            if (p==i) : \n                return True\n        i = i + 1\n    return False\ndef isPerfectPower3(n) : \n    '''\n    Write a python function to find if a number is perfect power or not.\n    '''\n    i = 2\n    while (n>=i*i) : \n        if (n%i == 0) : \n            p = 1\n            while (n%i == 0) : \n                p = p + 1\n                n = n//i\n            if (p==i) : \n                return True\n        i = i + 1\n    return False\ndef isPerfectPower4(n) : \n    '''\n    Write a python function to find if a number is perfect power or not.\n    '''\n    i = 2\n    while (n>=i*i) : \n        if (n%i == 0) : \n            p = 1\n            while (n%i == 0) : \n                p = p + 1\n                n = n//i\n            if (p==i) : \n                return True\n        i = i + 1\n    return False\ndef isPerfectPower5(n) : \n    '''\n    Write a python function to find if a number is perfect power or not.\n    '''\n    i = 2\n    while (n>=i*i) : \n        if (n%i == 0) : \n            p = 1\n            while (n%i == 0) : \n                p = p + 1\n                n = n//i\n            if (p==i) : \n                return True\n        i = i + 1\n    return False\ndef isPerfectPower6(n) : \n    '''\n    Write a python function to find if a number is perfect power o"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n):\n        if n % i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # n = int(input(\"Enter the number : \"))\n    sum = 0\n    if n < 0 :\n        return None\n    for i in range(1,(n//2)+1) :\n        if n%i == 0 :\n            if i%2 == 0 :\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0 : \n        return 0\n    sum = 0\n    for i in range(2,n) : \n        if n%i == 0 : \n            if i%2 == 0 : \n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    i = 2\n    while (i <= n) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n        i = i + 1\n    return s\ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n    return s\ndef sumofFactors3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    if (n % 2 == 0) :\n        s = n\n    for i in range(3,int(math.sqrt(n))+1,2) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n    return s\ndef sumofFactors4(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors5(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors6(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors7(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors8(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors9(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors10(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors11(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors12(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors13(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors14(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors15(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors16(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors17(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % i!= 0) :\n                s = s + n/i\n    return s\ndef sumofFactors18(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                s = s + i\n            if (n % "
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,n+1) if n % i == 0 and i % 2 == 0)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 :\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    while(n % 2 == 0): \n        total += 2\n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2): \n        while(n % i == 0): \n            total += i \n            n = n / i \n    if n > 2: \n        total += n \n    return total \n    \n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b(z|zo)\\b', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # Your code here\n    \n    # re.findall() will be helpful in making your code concise\n    # In general, re.findall() will not work\n    # Since you are looking for words containing the letter 'z'\n    # Use \\b to signify word boundaries\n    # Will want to use re.search() as well, as per instructions\n    # This is really an edge case, but just FYI\n    return re.findall(r'\\b[a-z]{3,}z\\b', text)\n    "
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.compile(r'\\b\\w+z\\b', re.IGNORECASE)\n    m = r.match(text)\n    return m\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\b[a-z][a-z][a-z][z]+\\b\"\n    return re.search(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n    \ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    return re.search(r'x', text)\n    \ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    return re.search(r'y', text)\n    \ndef text_match_number(text):\n    '''\n    Write a function that matches a word containing a digit.\n    '''\n    return re.search(r'\\d', text)\n    \ndef text_match_number2(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d+', text)\n    \ndef text_match_number3(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,3}', text)\n    \ndef text_match_number4(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,4}', text)\n    \ndef text_match_number5(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,5}', text)\n    \ndef text_match_number6(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,6}', text)\n    \ndef text_match_number7(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,7}', text)\n    \ndef text_match_number8(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,8}', text)\n    \ndef text_match_number9(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,9}', text)\n    \ndef text_match_number10(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,10}', text)\n    \ndef text_match_number11(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,11}', text)\n    \ndef text_match_number12(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,12}', text)\n    \ndef text_match_number13(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,13}', text)\n    \ndef text_match_number14(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,14}', text)\n    \ndef text_match_number15(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,15}', text)\n    \ndef text_match_number16(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,16}', text)\n    \ndef text_match_number17(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,17}', text)\n    \ndef text_match_number18(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,18}', text)\n    \ndef text_match_number19(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,19}', text)\n    \ndef text_match_number20(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,20}', text)\n    \ndef text_match_number21(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,21}', text)\n    \ndef text_match_number22(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,22}', text)\n    \ndef text_match_number23(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,23}', text)\n    \ndef text_match_number24(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,24}', text)\n    \ndef text_match_number25(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,25}', text)\n    \ndef text_match_number26(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,26}', text)\n    \ndef text_match_number27(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,27}', text)\n    \ndef text_match_number28(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,28}', text)\n    \ndef text_match_number29(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,29}', text)\n    \ndef text_match_number30(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,30}', text)\n    \ndef text_match_number31(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,31}', text)\n    \ndef text_match_number32(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,32}', text)\n    \ndef text_match_number33(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,33}', text)\n    \ndef text_match_number34(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,34}', text)\n    \ndef text_match_number35(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,35}', text)\n    \ndef text_match_number36(text):\n    '''\n    Write a function that matches a word containing a number.\n    '''\n    return re.search(r'\\d{1,36}', text)\n    \ndef text_match_numbe"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.replace(' ', '')\n    #pattern = re.compile(r'\\w*z\\w*')\n    pattern = re.compile(r'\\w*z\\w*')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    p = re.compile(r'\\b\\w*z\\b',re.IGNORECASE)\n    return p.match(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    reg = re.compile(r'\\bz\\w{1}\\b')\n    matches = reg.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = 'z'\n    x = re.findall('\\b\\w*z\\b', text)\n    return x\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    if monthnum2 in [4,6,9,11]:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Your code here\n    monthnumb = {1: 31, 2: 31, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnumb[monthnum2] == 31:\n        print \"yes\"\n    else:\n        print \"no\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1:\n        print('31')\n    elif monthnum2==2:\n        print('28')\n    elif monthnum2==3:\n        print('31')\n    elif monthnum2==4:\n        print('30')\n    elif monthnum2==5:\n        print('31')\n    elif monthnum2==6:\n        print('30')\n    elif monthnum2==7:\n        print('31')\n    elif monthnum2==8:\n        print('31')\n    elif monthnum2==9:\n        print('30')\n    elif monthnum2==10:\n        print('31')\n    elif monthnum2==11:\n        print('30')\n    elif monthnum2==12:\n        print('31')\n    else:\n        print('error!')\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 == 2:\n        if is_leap_year(year):\n            return True\n        return False\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    return False\n    \ndef check_day_number(daynum):\n    '''\n    Write a function to check whether the given day number contains 29 days or not.\n    '''\n    if daynum in [2]:\n        return True\n    if daynum in [4, 6, 9, 11]:\n        return False\n    return True\n    \ndef count_days(monthnum1, daynum1):\n    '''\n    Write a function to count the number of days in a particular month.\n    '''\n    \n    if check_monthnumb_number(monthnum1) == True:\n        if check_day_number(daynum1) == True:\n            return 31\n        else:\n            return 30\n    else:\n        if check_day_number(daynum1) == True:\n            return 28\n        else:\n            return 29\n    \ndef count_week(daynum1):\n    '''\n    Write a function to count the number of weeks in a particular day.\n    '''\n    if daynum1 < 6:\n        return 0\n    if daynum1 == 6 or daynum1 == 0:\n        return 1\n    if daynum1 > 6:\n        return 1 + count_week(daynum1 % 7)\n    \ndef count_month(year1, monthnum1):\n    '''\n    Write a function to count the number of months in a particular year.\n    '''\n    if monthnum1 == 2:\n        if is_leap_year(year1):\n            return 29\n        return 28\n    if monthnum1 in [4, 6, 9, 11]:\n        return 30\n    return 31\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    elif monthnum2 in (4, 6, 9, 11):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 0 or monthnum2 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if day_check(31, monthnum2) == 1:\n            return 1\n    else:\n        if day_check(30, monthnum2) == 1:\n            return 1\n    return 0\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    listofstrings = []\n    for string in stringlist:\n        listofstrings.append(string[::-1])\n    return listofstrings\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [i[::-1] for i in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Does not work\n    #stringlist = stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = stringlist[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for item in stringlist:\n        reverse_list.append(item[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [str[::-1] for str in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedstringlist = []\n    for string in stringlist:\n        reversedstringlist.append(string[::-1])\n    return reversedstringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    def sortF(tup):\n        return tup[1]\n    lst1=sorted(lst,key=sortF)\n    print 'Min',lst1[0]\n    print 'Length:',len(lst1[0])\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    temp = lst[0] \n    for i in lst: \n        if len(i) < len(temp): \n            temp = i \n    return temp\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_list = []\n    for i in lst:\n        if len(i) < len(min):\n            min = i\n            min_list = [i]\n        elif len(i) == len(min):\n            min_list.append(i)\n    print min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst:\n        return []\n    #n = len(lst)\n    #sorted_lst = sorted(lst, key=len)\n    min_lst = []\n    #min_len = len(sorted_lst[0])\n    #for i in range(len(sorted_lst)):\n    #    if len(sorted_lst[i]) == min_len:\n    #        min_lst.append(sorted_lst[i])\n    #return min_lst\n    return min(lst, key=len)\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Use the helper function\n    return Find_Min_helper(lst, 1, len(lst))\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    len1 = len(lst)\n    for i in range(len1):\n        for j in range(i+1,len1):\n            if len(lst[i:j+1]) < len(lst[i:j+1]):\n                sub = lst[i:j+1]\n    return sub\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    result = lst[0]\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n            result = item\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in lst:\n        if len(i) < len(min):\n            min = i\n    return min\n    \ndef Sum(lst,x):\n    '''\n    Write a python function to find the sum of all the elements in a given list.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minlen = len(lst[0])\n    minlst = []\n    for i in lst:\n        if(len(i)==minlen):\n            minlst.append(i)\n    return minlst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for l in lst[1:]:\n        if len(l) < min_len:\n            min_len = len(l)\n            min_lst = l\n    return min_lst\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(area)\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # l = float(l)\n    # b = float(b)\n    # return l*b\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print 'Area of a rectangle with length l and breadth b is ',(l*b)\ndef square_area(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print 'Area of a square with side length a is ',(a*a)\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print 'Area of a circle with radius r is ',(3.14*r*r)\ndef line_area(a,b):\n    '''\n    Write a function to find the area of a line.\n    '''\n    print 'Area of a line with length a and breadth b is ',(a*b)\ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    print 'Area of a triangle with base b and height h is ',(b*h/2)\ndef pentagon_area(s):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    print 'Area of a pentagon with side s is ',(s*(3*s-2*(s**2)))\ndef hexagon_area(s):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    print 'Area of a hexagon with side s is ',(3*s*(s**2))/2\ndef heptagon_area(s):\n    '''\n    Write a function to find the area of a heptagon.\n    '''\n    print 'Area of a heptagon with side s is ',(5*s*(s**2))/4\ndef octagon_area(s):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    print 'Area of an octagon with side s is ',(3*s*(s**2))/2\ndef nonagon_area(s):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    print 'Area of a nonagon with side s is ',(s*(s**2))/4\ndef decagon_area(s):\n    '''\n    Write a function to find the area of a decagon.\n    '''\n    print 'Area of a decagon with side s is ',(s*(s**2))/5\ndef rhombus_area(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    print 'Area of a rhombus with length a and breadth b is ',(a*b)/2\ndef octagon_area(s):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    print 'Area of an octagon with side s is ',(2*s*(s**2))/2\ndef icosahedron_area(s):\n    '''\n    Write a function to find the area of an icosahedron.\n    '''\n    print 'Area of an icosahedron with side s is ',(5*s*(s**2))/12\ndef cube_area(l):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    print 'Area of a cube with length l is ',(l*l*l)\ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    print 'Area of a sphere with radius r is ',(4*3.14*(r**2))/2\ndef cube_volume(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    print 'Volume of a cube with length l is ',(l**3)\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print 'Volume of a sphere with radius r is ',(4*3.14*(r**3))/3\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    print 'Volume of a cylinder with radius r and height h is ',(3.14*r*(r+h)**2)/3\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print 'Volume of a cone with radius r and height h is ',(3.14*(r**2)*(r+h))/3\ndef cuboid_volume(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    print 'Volume of a cuboid with length l, breadth b and height h is ',(l*b*h)\ndef pyramid_volume(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    print 'Volume of a pyramid with base b and height h is ',(b*h)/3\ndef tetrahedron_volume(h):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    print 'Volume of a tetrahedron with height h is ',(4*3.14*h*(h**2))/4\ndef hemisphere_volume(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    print 'Volume of a hemisphere with radius r is ',(3.14*(r**3))/4\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print 'Volume of a cone with radius r and height h is ',(3.14*(r**2)*(r+h))/3\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print 'Volume of a sphere with radius r is ',(4*3.14*(r**3))/3\ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print 'Surface area of a sphere with radius r is ',(2*3.14*r*(r**2))\ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print 'Surface area of a cylinder with radius r and height h is ',(2*3.14*r*(r+h))\ndef cone_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    print 'Surface area of a cone with radius r and height h is ',(2*3.14*r*(r+h))/2\ndef cuboid_surface_area(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    print 'Surface area of a cuboid with length l, breadth b and height h is ',(2*(l*b+b*h+h*l))\ndef pyramid_surface_area(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    print 'Surface area of a pyramid with base b and height h is ',(2*3.14*(b*h))\ndef rhombus_surface_area(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    print 'Surface area of a rhombus with length a and breadth b is ',(2*(a*b))\ndef octagon_surface_area(s):\n    '''\n    Write a function to find the surface area of an octagon.\n    '''\n    print 'Surface area of an octagon with side s is ',(2*(s**2))\ndef nonagon_surface_area(s):\n    '''\n    Write a function to find the surface area of a nonagon.\n    '''\n    print 'Surface area of a nonagon with side s is ',(2*(s**2))/2\ndef decagon_surface_area(s):\n    '''\n    Write a function to find the surface area of a decagon.\n    '''\n    print 'Surface area of a decagon with side s is ',(2*(s**2))"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l > 0 and b > 0:\n        area = l*b\n    else:\n        area = 0\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # c = l*b\n    # print(c)\n    # return c\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef triangle_area(a,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (a*h)/2\ndef square_area(s):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return s**2\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (l*2)+(b*2)\ndef triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return (a*2)+(h*2)\ndef square_perimeter(s):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*s\ndef rectangle_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    return (l**2 + b**2)**.5\ndef triangle_diagonal(a,h):\n    '''\n    Write a function to find the diagonal of a triangle.\n    '''\n    return (a**2 + h**2)**.5\ndef square_diagonal(s):\n    '''\n    Write a function to find the diagonal of a square.\n    '''\n    return 4*s\ndef rectangle_center(l,b):\n    '''\n    Write a function to find the center of a rectangle.\n    '''\n    return (l/2,b/2)\ndef triangle_center(a,h):\n    '''\n    Write a function to find the center of a triangle.\n    '''\n    return ((a/2)+(h/2))\ndef square_center(s):\n    '''\n    Write a function to find the center of a square.\n    '''\n    return (s/2)\ndef rectangle_right_angle(l,b):\n    '''\n    Write a function to find the right angle of a rectangle.\n    '''\n    return math.atan(b/l)*180/math.pi\ndef triangle_right_angle(a,h):\n    '''\n    Write a function to find the right angle of a triangle.\n    '''\n    return math.atan(h/a)*180/math.pi\ndef square_right_angle(s):\n    '''\n    Write a function to find the right angle of a square.\n    '''\n    return 180*math.pi/4\ndef rectangle_pythagorean_theorem(l,b):\n    '''\n    Write a function to find the pythagorean theorem of a rectangle.\n    '''\n    return (l**2 + b**2)**.5\ndef triangle_pythagorean_theorem(a,h):\n    '''\n    Write a function to find the pythagorean theorem of a triangle.\n    '''\n    return (a**2 + h**2)**.5\ndef square_pythagorean_theorem(s):\n    '''\n    Write a function to find the pythagorean theorem of a square.\n    '''\n    return (s**2)**.5\ndef rectangle_middle_point(l,b):\n    '''\n    Write a function to find the middle point of a rectangle.\n    '''\n    return ((l/2)+(b/2))\ndef triangle_middle_point(a,h):\n    '''\n    Write a function to find the middle point of a triangle.\n    '''\n    return ((a/2)+(h/2))\ndef square_middle_point(s):\n    '''\n    Write a function to find the middle point of a square.\n    '''\n    return (s/2)\ndef rectangle_diagonal_line(l,b):\n    '''\n    Write a function to find the diagonal line of a rectangle.\n    '''\n    return (l**2 + b**2)**.5\ndef triangle_diagonal_line(a,h):\n    '''\n    Write a function to find the diagonal line of a triangle.\n    '''\n    return (a**2 + h**2)**.5\ndef square_diagonal_line(s):\n    '''\n    Write a function to find the diagonal line of a square.\n    '''\n    return (s**2)**.5\ndef rectangle_incline(l,b):\n    '''\n    Write a function to find the incline of a rectangle.\n    '''\n    return b/l\ndef triangle_incline(a,h):\n    '''\n    Write a function to find the incline of a triangle.\n    '''\n    return h/a\ndef square_incline(s):\n    '''\n    Write a function to find the incline of a square.\n    '''\n    return s/s**.5\ndef rectangle_angle(l,b):\n    '''\n    Write a function to find the angle of a rectangle.\n    '''\n    return math.atan(b/l)*180/math.pi\ndef triangle_angle(a,h):\n    '''\n    Write a function to find the angle of a triangle.\n    '''\n    return math.atan(h/a)*180/math.pi\ndef square_angle(s):\n    '''\n    Write a function to find the angle of a square.\n    '''\n    return 180*math.pi/4\ndef rectangle_perimeter_line(l,b):\n    '''\n    Write a function to find the perimeter line of a rectangle.\n    '''\n    return l+b\ndef triangle_perimeter_line(a,h):\n    '''\n    Write a function to find the perimeter line of a triangle.\n    '''\n    return (a+h)\ndef square_perimeter_line(s):\n    '''\n    Write a function to find the perimeter line of a square.\n    '''\n    return 4*s\ndef rectangle_area_line(l,b):\n    '''\n    Write a function to find the area line of a rectangle.\n    '''\n    return (l*b)\ndef triangle_area_line(a,h):\n    '''\n    Write a function to find the area line of a triangle.\n    '''\n    return (a*h)\ndef square_area_line(s):\n    '''\n    Write a function to find the area line of a square.\n    '''\n    return (s**2)\ndef rectangle_perimeter_diagonal(l,b):\n    '''\n    Write a function to find the perimeter diagonal of a rectangle.\n    '''\n    return (l**2 + b**2)**.5\ndef triangle_perimeter_diagonal(a,h):\n    '''\n    Write a function to find the perimeter diagonal of a triangle.\n    '''\n    return (a**2 + h**2)**.5\ndef square_perimeter_diagonal(s):\n    '''\n    Write a function to find the perimeter diagonal of a square.\n    '''\n    return 4*s\ndef rectangle_diagonal_line(l,b):\n    '''\n    Write a function to find the diagonal line of a rectangle.\n    '''\n    return (l**2 + b**2)**.5\ndef triangle_diagonal_line(a,h):\n    '''\n    Write a function to find the diagonal line of a triangle.\n    '''\n    return (a**2 + h**2)**.5\ndef square_diagonal_line(s):\n    '''\n    Write a function to find the diagonal line of a square.\n    '''\n    return (s**2)**.5\ndef rectangle_area_diagonal(l,b):\n    '''\n    Write a function to find the area diagonal of a rectangle.\n    '''\n    return (l*b)**.5\ndef triangle_area_diagonal(a,h):\n    '''\n    Write a function to find the area diagonal of a triangle.\n    '''\n    return (a*h)**.5\ndef square_area_diagonal(s):\n    '''\n    Write a function to find the area diagonal of a square.\n    '''\n    return (s**2)**.5\ndef rectangle_perimeter_side(l,b):\n    '''\n    Write a function to find the perimeter side of a rectangle.\n    '''\n    return l+b+l+b\ndef triangle_perimeter"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = ''.join(str1.split(str1.upper()))\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # pattern = r'[A-Z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1\ndef has_lowercase(str1):\n    '''\n    Write a function to check whether a given string has at least one lowercase letter.\n    '''\n    return re.search('[a-z]+', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    # pattern = r'[^a-z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[^a-z]+', '', str1)\n    return str1\ndef has_numbers(str1):\n    '''\n    Write a function to check whether a given string has at least one number.\n    '''\n    return re.search('[0-9]+', str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    # pattern = r'[0-9]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[0-9]+', '', str1)\n    return str1\ndef has_spaces(str1):\n    '''\n    Write a function to check whether a given string has at least one space.\n    '''\n    return re.search(' ', str1)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    # pattern = r'[ ]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[ ]+', '', str1)\n    return str1\ndef has_alphanumeric(str1):\n    '''\n    Write a function to check whether a given string has at least one alphanumeric character.\n    '''\n    return re.search('[a-zA-Z0-9]+', str1)\ndef remove_alphanumeric(str1):\n    '''\n    Write a function to remove alphanumeric characters from a given string.\n    '''\n    # pattern = r'[^a-zA-Z0-9]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[^a-zA-Z0-9]+', '', str1)\n    return str1\ndef has_alphabet(str1):\n    '''\n    Write a function to check whether a given string has at least one alphabet character.\n    '''\n    return re.search('[a-zA-Z]+', str1)\ndef remove_alphabet(str1):\n    '''\n    Write a function to remove alphabet characters from a given string.\n    '''\n    # pattern = r'[^a-zA-Z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[^a-zA-Z]+', '', str1)\n    return str1\ndef remove_unicode(str1):\n    '''\n    Write a function to remove unicode characters from a given string.\n    '''\n    # pattern = r'[\\u0000-\\u00ff]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[\\u0000-\\u00ff]+', '', str1)\n    return str1\ndef has_spaces(str1):\n    '''\n    Write a function to check whether a given string has at least one space.\n    '''\n    return re.search(' ', str1)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    # pattern = r'[ ]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[ ]+', '', str1)\n    return str1\ndef has_capital_letter(str1):\n    '''\n    Write a function to check whether a given string has at least one capital letter.\n    '''\n    return re.search('[A-Z]+', str1)\ndef remove_capital_letter(str1):\n    '''\n    Write a function to remove capital letters from a given string.\n    '''\n    # pattern = r'[A-Z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1\ndef has_lowercase(str1):\n    '''\n    Write a function to check whether a given string has at least one lowercase letter.\n    '''\n    return re.search('[a-z]+', str1)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase letters from a given string.\n    '''\n    # pattern = r'[a-z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1\ndef has_lowercase_letter(str1):\n    '''\n    Write a function to check whether a given string has at least one lowercase letter.\n    '''\n    return re.search('[a-z]+', str1)\ndef remove_lowercase_letter(str1):\n    '''\n    Write a function to remove lowercase letters from a given string.\n    '''\n    # pattern = r'[a-z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1\ndef has_lowercase_letter(str1):\n    '''\n    Write a function to check whether a given string has at least one lowercase letter.\n    '''\n    return re.search('[a-z]+', str1)\ndef remove_lowercase_letter(str1):\n    '''\n    Write a function to remove lowercase letters from a given string.\n    '''\n    # pattern = r'[a-z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1\ndef has_lowercase_letter(str1):\n    '''\n    Write a function to check whether a given string has at least one lowercase letter.\n    '''\n    return re.search('[a-z]+', str1)\ndef remove_lowercase_letter(str1):\n    '''\n    Write a function to remove lowercase letters from a given string.\n    '''\n    # pattern = r'[a-z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1\ndef has_lowercase_letter(str1):\n    '''\n    Write a function to check whether a given string has at least one lowercase letter.\n    '''\n    return re.search('[a-z]+', str1)\ndef remove_lowercase_letter(str1):\n    '''\n    Write a function to remove lowercase letters from a given string.\n    '''\n    # pattern = r'[a-z]+'\n    # sub = r' '\n    # return re.sub(pattern, sub, str1)\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1\ndef has_lowercase_letter(str1):\n    '''\n    Write a function to check whether a given string has at least one lowercase letter.\n    '''\n    return re.search('[a-z]+', str1)\ndef remove_lowe"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile(r'([A-Z]+[a-z]+)', re.I)\n    output = re.sub(regex, '', str1)\n    return output\n    \ndef encode_string(str1):\n    '''\n    Write a function to encode a string using the following mapping:\n    a =>.\n    b =>..\n    c =>...\n    d =>....\n    e =>.....\n    f =>......\n    g =>.......\n    h =>.........\n    i =>.........\n    j =>........\n    k =>.........\n    l =>........\n    m =>.......\n    n =>.....\n    o =>....\n    p =>....\n    q =>...\n    r =>....\n    s =>...\n    t =>..\n    u =>.....\n    v =>......\n    w =>.......\n    x =>.....\n    y =>...\n    z =>...\n    \n    Example:\n    encode_string('h') should return '....'\n    encode_string('H') should return '....'\n    encode_string('x') should return '....'\n    encode_string('y') should return '...'\n    encode_string('z') should return '....'\n    '''\n    str1 = re.sub('a', '.', str1)\n    str1 = re.sub('b', '..', str1)\n    str1 = re.sub('c', '...', str1)\n    str1 = re.sub('d', '....', str1)\n    str1 = re.sub('e', '.....', str1)\n    str1 = re.sub('f', '......', str1)\n    str1 = re.sub('g', '.......', str1)\n    str1 = re.sub('h', '........', str1)\n    str1 = re.sub('i', '.......', str1)\n    str1 = re.sub('j', '......', str1)\n    str1 = re.sub('k', '......', str1)\n    str1 = re.sub('l', '....', str1)\n    str1 = re.sub('m', '..', str1)\n    str1 = re.sub('n', '..', str1)\n    str1 = re.sub('o', '....', str1)\n    str1 = re.sub('p', '..', str1)\n    str1 = re.sub('q', '...', str1)\n    str1 = re.sub('r', '..', str1)\n    str1 = re.sub('s', '.', str1)\n    str1 = re.sub('t', '.', str1)\n    str1 = re.sub('u', '..', str1)\n    str1 = re.sub('v', '...', str1)\n    str1 = re.sub('w', '...', str1)\n    str1 = re.sub('x', '..', str1)\n    str1 = re.sub('y', '..', str1)\n    str1 = re.sub('z', '.', str1)\n    \n    return str1\n    \ndef move_zeros(nums):\n    '''\n    Given an array of integers, move all zeros to the end of the array and return the resulting array.\n    '''\n    return sorted(nums, key=lambda x: x==0)\n    \ndef check_permutation(str1, str2):\n    '''\n    Given two strings, write a method to decide if one is a permutation of the other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef rotate_matrix(matrix):\n    '''\n    Given a list of lists of integers, return a new list of lists in which the elements of each inner list have been rotated by one index.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if j < len(matrix[0])-1-i:\n                matrix[i][j], matrix[j][len(matrix[0])-1-i] = matrix[j][len(matrix[0])-1-i], matrix[i][j]\n    return matrix\n    \ndef right_rotate_matrix(matrix):\n    '''\n    Given a list of lists of integers, return a new list of lists in which the elements of each inner list have been rotated by one index.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if j > i:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n    \ndef is_balanced(string):\n    '''\n    Given a string, return True if the brackets are balanced and False if not.\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i] in ['(', '{', '[']:\n            stack.append(string[i])\n        elif string[i] in [')', '}', ']']:\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    if stack == []:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(string):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef to_leet(string):\n    '''\n    Given a string, convert all uppercase characters to lowercase and vice versa.\n    '''\n    str1 = ''\n    for i in string:\n        if i in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            if i == 'A':\n                str1 += 'a'\n            elif i == 'B':\n                str1 += 'b'\n            elif i == 'C':\n                str1 += 'c'\n            elif i == 'D':\n                str1 += 'd'\n            elif i == 'E':\n                str1 += 'e'\n            elif i == 'F':\n                str1 += 'f'\n            elif i == 'G':\n                str1 += 'g'\n            elif i == 'H':\n                str1 += 'h'\n            elif i == 'I':\n                str1 += 'i'\n            elif i == 'J':\n                str1 += 'j'\n            elif i == 'K':\n                str1 += 'k'\n            elif i == 'L':\n                str1 += 'l'\n            elif i == 'M':\n                str1 +='m'\n            elif i == 'N':\n                str1 += 'n'\n            elif i == 'O':\n                str1 += 'o'\n            elif i == 'P':\n                str1 += 'p'\n            elif i == 'Q':\n                str1 += 'q'\n            elif i == 'R':\n                str1 += 'r'\n            elif i == 'S':\n                str1 +='s'\n            elif i == 'T':\n                str1 += 't'\n            elif i == 'U':\n                str1 += 'u'\n            elif i == 'V':\n                str1 += 'v'\n            elif i == 'W':\n                str1 += 'w'\n            elif i == 'X':\n                str1 += 'x'\n            elif i == 'Y':\n                str1 += 'y'\n            elif i == 'Z':\n                str1 += 'z'\n        else:\n            str1 += i\n    return str1\n    \ndef to_dictionary(string):\n    '''\n    Write a function to convert a string to a dictionary of word-length pairs.\n    '''\n    dict1 = {}\n    for i in string:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(str1.split(str1.upper()))\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    upper_regex = re.compile(r'[A-Z]',re.IGNORECASE)\n    str2 = upper_regex.sub('', str1)\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_str += str1[i]\n    return new_str\ndef remove_uppercase_back(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string in reverse order.\n    '''\n    new_str = ''\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i].isupper():\n            new_str += str1[i]\n    return new_str\ndef reverse_words(str1):\n    '''\n    Write a function to reverse a given string with spaces at the start and end of the word.\n    '''\n    list1 = str1.split()\n    new_str =''\n    for i in range(len(list1)-1,-1,-1):\n        new_str += list1[i]\n        if i!= 0:\n            new_str +=''\n    return new_str\ndef reverse_words_back(str1):\n    '''\n    Write a function to reverse a given string with spaces at the start and end of the word in reverse order.\n    '''\n    list1 = str1.split()\n    new_str = ''\n    for i in range(len(list1)):\n        if i == 0:\n            new_str += list1[i]\n        else:\n            new_str +='' + list1[i]\n    return new_str\ndef palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        new_str += str1[i]\n    new_str = remove_uppercase(new_str)\n    return new_str == new_str[::-1]\ndef palindrome_back(str1):\n    '''\n    Write a function to check whether a given string is a palindrome in reverse order.\n    '''\n    new_str = ''\n    for i in range(len(str1)-1,-1,-1):\n        new_str += str1[i]\n    new_str = remove_uppercase(new_str)\n    return new_str == new_str[::-1]\ndef palindrome_v2(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef palindrome_v3(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef palindrome_v4(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v5(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v6(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v7(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v8(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v9(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v10(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v11(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v12(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v13(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v14(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v15(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v16(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v17(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v18(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v19(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v20(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v21(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v22(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v23(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v24(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v25(str1):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\ndef palindrome_v26(str1):\n    '''\n    Write a function to check whether "
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', lambda m: '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for word in str1.split():\n        if word.isupper():\n            str1 = str1.replace(word,'')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    l = len(str1)\n    for i in range(l):\n        for j in range(i+1,l+1):\n            if str1[i:j].isupper():\n                if not str1[i:j].lower() in str1[:i]:\n                    str1 = str1.replace(str1[i:j],'')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return \"\".join([i for i in str1 if i.isalpha()])\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n    \n    \ndef Check_Sublist(lst1, lst2): \n    '''\n    Write a python function to check if lst2 is sublist of lst1.\n    '''\n    if len(lst2) > len(lst1): \n        return False \n    else: \n        for i in range(len(lst2)): \n            if lst2[i]!= lst1[i]: \n                return False \n    return True \n    \n    \ndef Find_Sublists(lst, lst1, lst2): \n    '''\n    Write a python function to get a list of sublists of lst which have elements \n    in lst1 and lst2.\n    '''\n    res = [] \n    for i in lst: \n        if Check_Sublist(i, lst1) and Check_Sublist(i, lst2): \n            res.append(i) \n    return res \n    \n    \ndef main(): \n    #The first list. \n    lst1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \n    lst2 = [4, 5] \n    print \"The first list is:\", lst1 \n    print \"The second list is:\", lst2 \n    #The second list. \n    lst3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \n    lst4 = [4, 5, 6] \n    print \"The third list is:\", lst3 \n    print \"The fourth list is:\", lst4 \n    #Get the sublists of lst3. \n    lst5 = Find_Sublists(lst3, lst1, lst2) \n    print \"The sublists of the first list are:\", lst5 \n    #Get the sublists of lst4. \n    lst6 = Find_Sublists(lst3, lst1, lst4) \n    print \"The sublists of the first list are:\", lst6 \n    \n    \nmain()"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [el[0] for el in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return([item[0] for item in lst])\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for x in lst:\n        res.append(x[0])\n    return res\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst2 = []\n    for i in lst:\n        lst2.append(i[0])\n    return lst2\n    \ndef compare_word(word):\n    '''\n    Write a python function to check whether a word is in a list.\n    '''\n    if word in ['',None]:\n        return False\n    else:\n        return True\n    \ndef Remove_Repetition(lst):\n    '''\n    Write a python function to remove the repetition of a list.\n    '''\n    if compare_word(lst) is False:\n        lst = []\n    else:\n        lst2 = []\n        for i in lst:\n            if i not in lst2:\n                lst2.append(i)\n        lst = lst2\n    return lst\n    \ndef remove_word(lst, word):\n    '''\n    Write a python function to remove the word in a list.\n    '''\n    if compare_word(word) is False:\n        pass\n    else:\n        for i in lst:\n            if i == word:\n                lst.remove(i)\n    return lst\n    \ndef remove_word_with_index(lst, word, index):\n    '''\n    Write a python function to remove the word in a list and keep the index of the word.\n    '''\n    if compare_word(word) is False:\n        pass\n    else:\n        for i in range(len(lst)):\n            if lst[i] == word:\n                lst.remove(lst[i])\n                lst.insert(index-1, word)\n    return lst\n    \ndef Slice(lst, start, end):\n    '''\n    Write a python function to slice a list.\n    '''\n    if compare_word(lst) is False:\n        pass\n    else:\n        lst = lst[start:end]\n    return lst\n    \ndef Maximum(lst):\n    '''\n    Write a python function to get the maximum element in a list.\n    '''\n    lst2 = []\n    if compare_word(lst) is False:\n        pass\n    else:\n        for i in lst:\n            lst2.append(i)\n        lst2.sort()\n        lst = lst2\n    return lst[-1]\n    \ndef Minimum(lst):\n    '''\n    Write a python function to get the minimum element in a list.\n    '''\n    lst2 = []\n    if compare_word(lst) is False:\n        pass\n    else:\n        for i in lst:\n            lst2.append(i)\n        lst2.sort()\n        lst = lst2\n    return lst[0]\n    \ndef Range(lst):\n    '''\n    Write a python function to get the range of a list.\n    '''\n    lst2 = []\n    if compare_word(lst) is False:\n        pass\n    else:\n        for i in lst:\n            lst2.append(i)\n        lst2.sort()\n        lst = lst2\n    return lst2[-1] - lst2[0]\n    \ndef Mean(lst):\n    '''\n    Write a python function to get the mean of a list.\n    '''\n    lst2 = []\n    if compare_word(lst) is False:\n        pass\n    else:\n        for i in lst:\n            lst2.append(i)\n        lst2.sort()\n        lst = lst2\n    n = len(lst)\n    s = sum(lst)\n    m = s/n\n    return m\n    \ndef Median(lst):\n    '''\n    Write a python function to get the median of a list.\n    '''\n    lst2 = []\n    if compare_word(lst) is False:\n        pass\n    else:\n        for i in lst:\n            lst2.append(i)\n        lst2.sort()\n        lst = lst2\n    if len(lst)%2!= 0:\n        return lst[len(lst)/2]\n    else:\n        return (lst[(len(lst)/2)-1] + lst[len(lst)/2])/2\n        \ndef Mode(lst):\n    '''\n    Write a python function to get the mode of a list.\n    '''\n    lst2 = []\n    if compare_word(lst) is False:\n        pass\n    else:\n        for i in lst:\n            lst2.append(i)\n        lst2 = Remove_Repetition(lst2)\n        lst2 = Remove_Repetition(lst2)\n        lst2.sort()\n        lst = lst2\n    if len(lst) == 0:\n        return 'None'\n    else:\n        return lst[-1]\n        \ndef Variance(lst):\n    '''\n    Write a python function to get the variance of a list.\n    '''\n    lst2 = []\n    if compare_word(lst) is False:\n        pass\n    else:\n        for i in lst:\n            lst2.append(i)\n        lst2.sort()\n        lst = lst2\n    n = len(lst)\n    s = sum(lst)\n    m = s/n\n    var = 0\n    for i in lst:\n        var += (i-m)**2\n    var = var/n\n    return var\n    \ndef Standard_Deviation(lst):\n    '''\n    Write a python function to get the standard deviation of a list.\n    '''\n    return Variance(lst)**0.5\n    \ndef Top_Ten(lst):\n    '''\n    Write a python function to get the top ten elements of a list.\n    '''\n    if compare_word(lst) is False:\n        pass\n    else:\n        lst = sorted(lst)\n        lst.reverse()\n        lst = lst[:10]\n    return lst\n    \ndef Bottom_Ten(lst):\n    '''\n    Write a python function to get the bottom ten elements of a list.\n    '''\n    if compare_word(lst) is False:\n        pass\n    else:\n        lst = sorted(lst)\n        lst = lst[:10]\n    return lst\n    \ndef Random(lst):\n    '''\n    Write a python function to get a random element in a list.\n    '''\n    import random\n    return random.choice(lst)\n    \ndef Slice_from_list(lst, start, end):\n    '''\n    Write a python function to slice a list.\n    '''\n    if compare_word(lst) is False:\n        pass\n    else:\n        lst = lst[start:end]\n    return lst\n    \ndef Intersect(lst1, lst2):\n    '''\n    Write a python function to intersect two list.\n    '''\n    lst3 = []\n    if compare_word(lst1) is False or compare_word(lst2) is False:\n        pass\n    else:\n        for i in lst1:\n            if i in lst2:\n                lst3.append(i)\n    return lst3\n    \ndef Union(lst1, lst2):\n    '''\n    Write a python function to union two list.\n    '''\n    lst3 = []\n    if compare_word(lst1) is False or compare_word(lst2) is False:\n        pass\n    else:\n        for i in lst1:\n            lst3.append(i)\n        for i in lst2:\n            if i not in lst3:\n                lst3.append(i)\n    return lst3\n    \ndef Difference(lst1, lst2):\n    '''\n    Write a python function to difference two list.\n    '''\n    lst3 = []\n    if compare_word(lst1) is False or compare_word(lst2) is False:\n        pass\n    else:\n        for i in lst1:\n            if i not in lst"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    print(upper_count)\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count=count+1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in range(len(str)):\n        if(str[i].isupper()):\n            upper_ctr+=1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\ndef vowels_ctr(str):\n    '''\n    Write a python function to count the vowels in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\ndef digit_ctr(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\ndef space_ctr(str):\n    '''\n    Write a python function to count the spaces in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isspace():\n            count += 1\n    return count\ndef stopwords_ctr(str):\n    '''\n    Write a python function to count the number of stopwords in a given string.\n    '''\n    stopwords = ['ourselves', 'hers', 'between', 'yourself', 'but', 'again',\n                 'there', 'about', 'once', 'during', 'out','very', 'having',\n                 'with', 'they', 'own', 'an', 'be','some', 'for', 'do', 'its',\n                 'yours','such', 'into', 'of','most', 'itself', 'other',\n                 'off', 'is','s', 'am', 'or', 'who', 'as', 'from', 'him',\n                 'each', 'the', 'themselves', 'until', 'below', 'are', 'we',\n                 'these', 'your', 'his', 'through', 'don', 'nor','me', 'were',\n                 'her','more', 'himself', 'this', 'down','should', 'our', 'their',\n                 'while', 'above', 'both', 'up', 'to', 'ours', 'had','she', 'all',\n                 'no', 'when', 'at', 'any', 'before', 'them','same', 'and',\n                 'been', 'have', 'in', 'will', 'on', 'does', 'yourselves', 'then',\n                 'that', 'because', 'what', 'over', 'why','so', 'can', 'did',\n                'shelf', 'too', 'only','she', 'again', 'here', 'things', 'why',\n                 'get', 'here', 'both', 'you', 'herself', 'further', 'themselves',\n                 'no', 'again', 'nor', 'against','same', 'been', 'now', 'get',\n                 'him', 'by', 'both', 'about', 'against', 'is', 'further', 'your',\n                'should', 'through', 'long', 'always', 'having', 'down','she',\n                 'her', 'was', 'until','more', 'himself', 'on', 'but', 'does',\n                 'them', 'its', 'at', 'it', 'have', 'there','must', 'again',\n                 'now', 'him', 'all', 'yourself', 'there','same', 'and','she',\n                 'have', 'if', 'do', 'them', 'its', 'any', 'of', 'it', 'can',\n                 'theirs', 'her', 'has', 'then', 'would', 'until', 'does', 'them',\n                 'his', 'what', 'over', 'why','so', 'you', 'herself', 'has',\n                 'been','should', 'not', 'us', 'weren', 'himself', 'nor','me',\n                 'have', 'do', 'themselves', 'until', 'below', 'are', 'we', 'your',\n                 'his', 'than', 'both','she', 'again', 'her', 'does', 'we', 'no',\n                 'but', 'again', 'nor', 'if', 'you', 'her', 'has', 'to', 'them',\n                'she', 'all', 'there', 'there', 'whom', 'be', 'there', 'does',\n                 'him', 'been', 'whom', 'get', 'there', 'being','may','she',\n                 'all', 'that', 'not', 'be', 'whom', 'other', 'whom', 'who', 'being',\n                 'will', 'what','still', 'being','may', 'a', 'both', 'the', 'an',\n                 'and', 'be', 'whom', 'is', 'in', 'any', 'being', 'which','may',\n                 'the', 'not', 'with', 'your', 'theirs', 'can', 'has', 'who',\n                 'why', 'an', 'of','more', 'why', 'this','may', 'your', 'a',\n                 'in', 'else', 'yours', 'as', 'any', 'by', 'its', 'if', 'any',\n                 'would', 'into','so', 'yourself', 'and', 'which', 'you','most',\n                 'not', 'how', 'herself','she', 'do', 'does', 'it','my','such',\n                 'i', 'no', 'when', 'where', 'as', 'itself', 'at', 'have', 'in',\n                 'would', 'on', 'does', 'yourselves', 'if', 'at', 'have', 'in',\n                'most', 'where', 'too', 'her', 'by', 'both','she', 'or', 'has',\n                 '!', 'who', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!',\n                 '!', '!', '!', '"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for letter in str:\n        if letter.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    import string\n    count = 0\n    for c in str:\n        if c in string.ascii_uppercase:\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isupper():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([char for char in str if char.isupper()])\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    res = []\n    if list1:\n        for i in range(1,len(list1)):\n            res.extend([list1[i],list1[0:i]+list1[i+1:]])\n    else:\n        return []\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    list2=[]\n    for i in range(1, len(list1)+1):\n        for j in combinations(list1, i):\n            list2.append(j)\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1,2))\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    for i in xrange(len(list1)):\n        for j in combinations_list(list1[:i]+list1[i+1:]):\n            result.append([list1[i]]+j)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    combs = []\n    for i in range(len(list1)+1):\n        combs += [list(x) for x in combinations(list1,i)]\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations=[]\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            combinations.append([list1[i],list1[j]])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    final_list = []\n    for i in xrange(1, len(list1)):\n        tmp_list = list(combinations(list1, i))\n        for j in tmp_list:\n            final_list.append(j)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return list(itertools.combinations(list1,2))\n    \ndef count_pairs(list1,list2,target):\n    '''\n    Write a function to count the number of pairs (x,y) where x is in list1 and y is in list2.\n    '''\n    pairs=0\n    for i in list1:\n        if i in list2:\n            pairs+=1\n    return pairs\n    \ndef find_anagrams(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    anagrams=[]\n    for i in list1:\n        for j in list2:\n            if sorted(i)==sorted(j):\n                anagrams.append(i)\n    return anagrams\n    \ndef dictionary_sort(dictionary):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    import operator\n    sorted_dict = sorted(dictionary.items(),key=operator.itemgetter(1))\n    return sorted_dict\n    \ndef sum_of_intervals(intervals):\n    '''\n    Write a function to sum the length of all the intervals in the list.\n    '''\n    return sum([x[1]-x[0]+1 for x in intervals])\n    \ndef find_anagrams_again(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    anagrams=[]\n    for i in list1:\n        for j in list2:\n            if sorted(i)==sorted(j):\n                anagrams.append(i)\n    return anagrams\n    \ndef find_anagrams_again_2(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    return [x for x in list1 if sorted(x)==sorted(y) for y in list2 if sorted(y)==sorted(x)]\n    \ndef find_anagrams_again_3(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_4(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_5(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_6(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_7(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_8(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_9(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_10(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_11(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_12(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_13(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_14(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_15(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_16(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_17(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_18(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    import collections\n    return [x for x in list1 if collections.Counter(x)==collections.Counter(y) for y in list2 if collections.Counter(y)==collections.Counter(x)]\n    \ndef find_anagrams_again_19(list1,list2):\n    '''\n    Write a function to find the anagrams in two lists.\n    '''\n    impor"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    assert type(list1) == list\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    for i in range(1,len(list1)):\n        first_element = list1[0]\n        rest_list = list1[1:len(list1)]\n        for sub_list in combinations_list(rest_list):\n            result.append([first_element] + sub_list)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    total_sum = 0\n    curr_max = float('-inf')\n    curr_min = float('inf')\n    for i in xrange(len(arr)):\n        curr_max = max(curr_max, arr[i])\n        curr_min = min(curr_min, arr[i])\n        total_sum += arr[i]\n    return max(curr_max * total_sum, curr_min * total_sum)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if sum(arr[i:j+1]) > ans:\n                ans = sum(arr[i:j+1])\n    return ans\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return None\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            product = arr[i]\n            min_product = arr[i]\n        else:\n            product *= arr[i]\n            min_product = min(min_product, arr[i])\n        if product > max_product:\n            max_product = product\n        if product < min_product:\n            min_product = product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product, current_product = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        if current_product < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        max_product = max(current_product, max_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    arr1 = arr[:len(arr)/2]\n    arr2 = arr[len(arr)/2:]\n    return max(max_subarray_product(arr1),max_subarray_product(arr2),max_product_of_two(arr1,arr2))\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Our dynamic programming table will be a 2D array with\n    # width equal to the length of our array\n    # height equal to the maximum length of our subarray\n    dp = [[0] * len(arr) for i in range(len(arr))]\n    # Each row of the table will represent the value of the subarray\n    # ending at that index\n    # Each column of the table will represent the value of the subarray\n    # starting at that index\n    # We will initialize the table with a single value (1) for the\n    # entire array\n    dp[0][0] = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr = [-2, -3, -1, 2, 3]\n    for i in range(len(arr)):\n        arr[i] = max(arr[i], arr[i] * arr[i-1] if i>0 else arr[i])\n    return max(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    left_max = [0] * len(arr)\n    right_max = [0] * len(arr)\n    left_max[0] = 1\n    right_max[len(arr) - 1] = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    if arr[0] < 0:\n        return -1\n    for i in range(1,len(arr)):\n        if arr[i] < 0:\n            max_product = max(max_product*arr[i],arr[i])\n            min_product = min(min_product*arr[i],arr[i])\n        else:\n            max_product = max(max_product*arr[i],arr[i])\n            min_product = min(min_product*arr[i],arr[i])\n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(dict) == 1:\n        return True\n    \n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    \n    return True\n    \nprint(check_value({0:1, 1:1, 2:1, 3:1}))\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    elif len(dict) == n:\n        return False\n    else:\n        if len(set(dict.values())) == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    elif len(dict) == 2:\n        if list(dict.values())[0] == list(dict.values())[1]:\n            return True\n        else:\n            return False\n    elif len(dict) > 2:\n        if list(dict.values())[0] == list(dict.values())[1] and list(dict.values())[0] == list(dict.values())[2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if(len(dict) == 1):\n        return True\n    else:\n        if(dict[0] == dict[1]):\n            return check_value(dict[1:], n)\n        else:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    elif len(dict) == 0:\n        return False\n    else:\n        last_element = dict[0]\n        for i in range(1, len(dict)):\n            if dict[i]!= last_element:\n                return False\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    n_l = len(set(dict.values()))\n    if n_l == 1:\n        return True\n    else:\n        return False\n    \n    \ndef duplicate_keys(d):\n    '''\n    Write a function to remove duplicate keys from a dictionary.\n    '''\n    keys = []\n    for key in d:\n        keys.append(key)\n    return dict(zip(keys, [d[k] for k in keys]))\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if i == n:\n            count += 1\n    if count == len(dict):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict.values():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for k in dict:\n        if n == dict[k]:\n            count += 1\n        else:\n            return False\n    if count == len(dict):\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, val in dict1.items():\n        if not val:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    d = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            d[key] = value\n    return d\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    \n    for key in dict1:\n        if type(dict1[key]) is not dict and dict1[key] == None:\n            del dict1[key]\n        elif type(dict1[key]) is dict:\n            drop_empty(dict1[key])\n    \n    return dict1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x:y for x,y in dict1.items() if y}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!=''}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x:y for x, y in dict1.items() if y}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in dict1.items():\n        if value == []:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict((k,v) for k,v in dict1.items() if v)\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1):\n        if dict1[key] == None:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def max_prod(arr, i, j):\n        if i == j:\n            return arr[i]\n        if i > j:\n            return 1\n        temp = max_prod(arr, i+1, j)\n        if temp:\n            return temp\n        else:\n            return max_prod(arr, i, j-1)\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] * arr[1]\n    else:\n        for i in range(len(arr)-1):\n            for j in range(i+1, len(arr)):\n                new_arr = arr[i:j+1]\n                max_product = max(max_product, multiply(new_arr))\n        return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    length = len(arr)\n    if length < 4:\n        return 0\n    if length == 4:\n        return arr[0]*arr[1]*arr[2]*arr[3]\n    sub_max = arr[0]*arr[1]*arr[2]*arr[3]\n    if length < 6:\n        return sub_max\n    else:\n        max_product = [0]*length\n        max_product[0] = arr[0]\n        max_product[1] = arr[0]*arr[1]\n        max_product[2] = arr[0]*arr[1]*arr[2]\n        max_product[3] = arr[0]*arr[1]*arr[2]*arr[3]\n        max_product[4] = arr[1]*arr[2]*arr[3]\n        max_product[5] = arr[1]*arr[2]\n        for i in range(6,length):\n            max_product[i] = max(arr[i],max_product[i-2]*arr[i-1]*arr[i],max_product[i-3]*arr[i-1]*arr[i],max_product[i-4]*arr[i-1]*arr[i])\n            if max_product[i] > sub_max:\n                sub_max = max_product[i]\n    return sub_max\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    '''\n    For example:\n    arr = [2,3,-2,4]\n    Here, the max product would be formed by the sequence [2,3] since:\n    2 * 3 = 6\n    Now, lets consider the next case:\n    arr = [1, 2, 3, 4, -4, 3, 2, -2, -2]\n    The max product would be formed by the sequence [1, 2, 3, 4] since:\n    1 * 2 * 3 * 4 = 24\n    The solution can also be represented as:\n    [2, 3, -2, 4]\n    [1, 2, 3, 4]\n    [2, -2, 3, 4]\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    arr = sorted(arr)\n    max_product = arr[0] * arr[1]\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            return 0\n        max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # ans = 0\n    # i = 0\n    # while i < len(arr):\n    #     ans = max(ans, arr[i])\n    #     while i + 1 < len(arr) and arr[i] >= arr[i+1]:\n    #         i += 1\n    #     if i < len(arr):\n    #         ans = max(ans, arr[i] * arr[i+1])\n    #     i += 1\n    # return ans\n    \n    ans = arr[0]\n    n = len(arr)\n    if n < 3:\n        return arr[0]\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] >= max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here *= arr[i]\n            \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_ending = arr[0]\n    min_ending = arr[0]\n    res = arr[0]\n    for i in range(1, len(arr)):\n        temp = max_ending\n        max_ending = max(max(arr[i], max_ending * arr[i]), min_ending * arr[i])\n        min_ending = min(min(arr[i], min_ending * arr[i]), temp * arr[i])\n        res = max(max_ending, res)\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # max so far is 0\n    # traverse the array and keep increasing max*ele\n    # return max so far\n    max_so_far = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_so_far = arr[i]\n        else:\n            max_so_far = max(max_so_far, arr[i]*max_so_far)\n            max_so_far = max(max_so_far, arr[i])\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = max(res, arr[i]*arr[i])\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0]\n    cur_prod = 1\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0]+test_tup[1], test_tup[1]+test_tup[2]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_pairwise = 0\n    for i in range(0,len(test_tup)):\n        if i == 0:\n            sum_pairwise = test_tup[i] + test_tup[i+1]\n        elif i == len(test_tup)-1:\n            sum_pairwise = sum_pairwise + test_tup[i-1]\n        else:\n            sum_pairwise = sum_pairwise + test_tup[i-1] + test_tup[i+1]\n    return sum_pairwise\n    \nprint add_pairwise((4,7,5,2))\nprint add_pairwise((1,2,3,4,5))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)-1):\n        print test_tup[i] + test_tup[i+1],\n    print\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[:2])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    global l\n    l = []\n    for i in range(len(test_tup)-1):\n        l.append(test_tup[i] + test_tup[i+1])\n    return l\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    #convert test_tup to iterable list\n    #test_list = list(test_tup)\n    \n    #append the first and second elements of test_list\n    #test_list.append(test_list[0] + test_list[1])\n    \n    #append the first and second elements of test_list\n    #test_list.append(test_list[0] + test_list[1])\n    \n    #for loop\n    #for i in xrange(len(test_list) - 1):\n    \n    #    test_list.append(test_list[i] + test_list[i + 1])\n    \n    #return test_list\n    \n    #return test_list\n    \n    #return test_list\n    \n    #return test_list\n    \n    #return test_list\n    \n    return test_list\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # We know that the remainder is the sum of the product of all array elements\n    # modulo n\n    \n    # We traverse the array and get the product of each element\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    \n    return product\n    "
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # We can use xor to find the product\n    # of all array elements and modulo n\n    # https://www.youtube.com/watch?v=h7EPwgqCmM4&t=1s\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    n = n\n    n = n - 1\n    ans = 1\n    for i in range(n):\n        ans = (ans * arr[i]) % n\n    return ans\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return -1\n    elif n < 2:\n        return n\n    remainder = [1]*n\n    for i in range(1, n):\n        remainder[i] = (remainder[i-1]*arr[i]) % n\n    return remainder[-1]\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    count = [0]*n\n    res = 1\n    for i in range(n):\n        count[arr[i]] += 1\n    for i in range(1,n):\n        count[i] += count[i-1]\n    for i in range(n):\n        res = (res*(count[i]%n))%n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # First find the product of each element\n    res = 1\n    for i in arr:\n        res = res * i % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for x in arr:\n        mul = mul * x % n\n    return mul\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]%n\n    \n    product = 1\n    for i in arr:\n        product *= i%n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1; \n    for i in range(len(arr)): \n        prod = (prod * arr[i]) % n; \n    return prod; \n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l == []:\n        return False\n    else:\n        for i in range(1,len(l)):\n            if l[i]-l[i-1]!= 1:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(1,len(l)):\n        if l[i]!=l[i-1]+1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    newlist = list(set(l))\n    if len(newlist) < len(l):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    '''\n    Write a python function to check whether the given list contains any duplicates or not.\n    '''\n    l = [1,2,3,4,5,6,7,8,9,10]\n    l1 = set(l)\n    if len(l1) == len(l):\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to check whether the given list is sorted or not.\n    '''\n    l = [1,2,3,4,5,6,7,8,9,10]\n    l1 = sorted(l)\n    if l == l1:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to count the number of occurances of an element in a list.\n    '''\n    l = [1,2,3,4,5,6,7,8,9,10]\n    print(l.count(3))\n    \n    '''\n    Write a python function to check if a list contains a sublist of another list.\n    '''\n    l = [1,2,3,4,5,6,7,8,9]\n    l1 = [1,2,3]\n    if l1 in l:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to check if a given list is a sublist of another list.\n    '''\n    l = [1,2,3,4,5,6,7,8,9]\n    l1 = [1,2,3]\n    if l1 in l:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to check if two lists are equal or not.\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [1,2,3,4,5]\n    if l1 == l2:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to check if two lists are equal or not.\n    '''\n    l1 = [1,2,3,4,5]\n    l2 = [1,2,3,4,5]\n    if l1 == l2:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to convert the list to a tuple.\n    '''\n    l = [1,2,3,4,5]\n    print(tuple(l))\n        \n    '''\n    Write a python function to convert the list to a tuple.\n    '''\n    l = [1,2,3,4,5]\n    print(tuple(l))\n        \n    '''\n    Write a python function to get a list of tuples from a list of lists.\n    '''\n    l = [[1,2],[3,4],[5,6]]\n    print(list(zip(*l)))\n        \n    '''\n    Write a python function to get a list of tuples from a list of lists.\n    '''\n    l = [[1,2],[3,4],[5,6]]\n    print(list(zip(*l)))\n        \n    '''\n    Write a python function to get a list of tuples from a list of lists.\n    '''\n    l = [[1,2,3],[4,5,6]]\n    print(list(zip(*l)))\n        \n    '''\n    Write a python function to get a list of tuples from a list of lists.\n    '''\n    l = [[1,2],[3,4],[5,6]]\n    print(list(zip(*l)))\n        \n    '''\n    Write a python function to check whether a list is empty or not.\n    '''\n    l = []\n    if l:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to check whether a list is empty or not.\n    '''\n    l = [1,2,3,4,5,6,7,8,9]\n    if l:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to check whether a list is empty or not.\n    '''\n    l = [1,2,3,4,5,6,7,8,9]\n    if l:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',20),('E',14)]\n    l.sort(key = lambda x: x[1])\n    print(l)\n        \n    '''\n    Write a python function to sort a list of tuples using the second element in each tuple.\n    '''\n    l = [('B',12),('A',8),('D',12),('C',2"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i=0\n    while i<len(l)-1:\n        if l[i]==l[i+1]-1:\n            i+=1\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 2:\n        return True\n    for i in range(1,len(l)):\n        if l[i]-l[i-1] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check for the empty list\n    if l == []: \n        return \"Empty list\"\n    # initialize the final list\n    final_list = []\n    # check if the first element is equal to the next element\n    if l[0] == l[1]: \n        # add both the elements to the final list\n        final_list.append(l[0])\n        final_list.append(l[1])\n        # check for the other elements\n        for i in xrange(2,len(l)): \n            if l[i] == l[i-1]+1: \n                final_list.append(l[i])\n            else: \n                break\n    # if the first element is not equal to the next element\n    else: \n        final_list.append(l[0])\n        # check for the other elements\n        for i in xrange(1,len(l)): \n            if l[i] == l[i-1]+1: \n                final_list.append(l[i])\n            else: \n                break\n    # return the final list\n    return final_list\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if(l[i]+1!= l[i+1]):\n            return False\n    return True\n    \ndef check_Kth(l,k):\n    '''\n    Write a python function to check whether the given list contains kth element or not.\n    '''\n    if l[k] in l:\n        return True\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) <= len(test_list2):\n        max_len = len(test_list1)\n    else:\n        max_len = len(test_list2)\n    for i in range(max_len):\n        if test_list1[i] == test_list2[i]:\n            yield test_list1[i]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_set1 = set(test_list1)\n    tuple_set2 = set(test_list2)\n    intersection = tuple_set1.intersection(tuple_set2)\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    for a in test_list1:\n        for b in test_list2:\n            if a==b:\n                return a\n            else:\n                pass\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    #get unique elements of both the lists\n    tuple_list1 = list(set(test_list1))\n    tuple_list2 = list(set(test_list2))\n    \n    #get the intersection of both the tuples\n    intersection_of_both_lists = [x for x in tuple_list1 if x in tuple_list2]\n    \n    #return the intersection\n    return intersection_of_both_lists\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return_set = set()\n    for element in test_list1:\n        if element in test_list2:\n            return_set.add(element)\n    return tuple(return_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return_list = []\n    for elem in test_list1:\n        for elem2 in test_list2:\n            if elem == elem2:\n                return_list.append(elem)\n    return return_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # import functools\n    # def my_func(n):\n    #     return n + 5\n    # print(list(map(my_func, [1, 2, 3, 4, 5, 6])))\n    # print(functools.reduce(lambda x, y: x if x > y else y, [1, 2, 3, 4, 5, 6]))\n    # a = [1, 2, 3, 4, 5, 6]\n    # b = [2, 4, 6, 8, 10, 12]\n    # c = [0, 0, 0, 0, 0, 0]\n    # for i in range(len(a)):\n    #     c[i] = a[i] + b[i]\n    # print(c)\n    # print(a[0:3])\n    # print(b[3:6])\n    # print(a[:3]+b[3:])\n    # print(a[3:])\n    # print(b[:3])\n    # print(a[3:3])\n    # print(a[0:3])\n    # print(a[0:3] + b[3:])\n    # print(a[3:])\n    # print(a[3:6])\n    # print(a[:3]+b[3:])\n    # print(a[:3])\n    # print(a[:3] + b[:3])\n    # print(a[:3])\n    # print(a[:3] + b[3:])\n    # print(a[3:6])\n    # print(a[3:6] + b[:3])\n    # print(a[:3] + b[3:])\n    # print(a[3:6] + b[:3])\n    # print(a[3:6] + b[3:])\n    # print(a[:3] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3] + b[:3])\n    # print(a[:3] + b[3:])\n    # print(a[3:] + b[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3] + b[3:])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3] + b[3:])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # print(a[:3])\n    # print(a[3:] + b[:3])\n    # print(a[:3])\n    # print(a[3:] + b[3:])\n    # prin"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not test_list1 or not test_list2:\n        return []\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = str1.replace(ch,newch)\n    print(result)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1[:str1.find(ch)] + newch + str1[str1.find(ch)+1:]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1[i]=newch\n    return ''.join(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        return str1.replace(ch,newch)\n    else:\n        return str1\n    \ndef get_data(file_name):\n    '''\n    Reads the input file and returns a list of strings with the data\n    '''\n    with open(file_name,'r') as f:\n        data = f.read()\n    return data.split()\n    \ndef get_total_number_of_elements(data_list):\n    '''\n    Returns the total number of elements in the list\n    '''\n    return len(data_list)\n    \ndef get_unique_elements(data_list):\n    '''\n    Returns a list with all the unique elements in the input list\n    '''\n    return list(set(data_list))\n    \ndef get_common_elements(data_list1, data_list2):\n    '''\n    Returns a list with the common elements of two lists\n    '''\n    return list(set(data_list1) & set(data_list2))\n    \ndef get_letters_count(word):\n    '''\n    Returns a dictionary with the letters of the word as keys\n    and the number of times it appears in the word as value\n    '''\n    letters_count = {}\n    for letter in word:\n        if letter in letters_count:\n            letters_count[letter] += 1\n        else:\n            letters_count[letter] = 1\n    return letters_count\n    \ndef get_longest_word(data_list):\n    '''\n    Returns the longest word in the list\n    '''\n    return max(data_list, key=len)\n    \ndef get_shortest_word(data_list):\n    '''\n    Returns the shortest word in the list\n    '''\n    return min(data_list, key=len)\n    \ndef get_top_five_words(data_list):\n    '''\n    Returns the top 5 longest words in the list\n    '''\n    top_five = []\n    for word in data_list:\n        letters_count = get_letters_count(word)\n        top_five.append((len(word),word,letters_count))\n    return [word for length, word, letters_count in sorted(top_five,reverse=True)[:5]]\n    \ndef get_top_five_shortest_words(data_list):\n    '''\n    Returns the top 5 shortest words in the list\n    '''\n    top_five = []\n    for word in data_list:\n        letters_count = get_letters_count(word)\n        top_five.append((len(word),word,letters_count))\n    return [word for length, word, letters_count in sorted(top_five,reverse=True)[:5]]\n    \ndef get_letter_frequency(word):\n    '''\n    Returns a dictionary with the letters of the word as keys\n    and the number of times it appears in the word as value\n    '''\n    letters_frequency = {}\n    for letter in word:\n        if letter in letters_frequency:\n            letters_frequency[letter] += 1\n        else:\n            letters_frequency[letter] = 1\n    return letters_frequency\n    \ndef get_most_common_letter(word):\n    '''\n    Returns the most common letter in the word\n    '''\n    letters_frequency = get_letter_frequency(word)\n    return max(letters_frequency, key=letters_frequency.get)\n    \ndef get_common_letters(word1, word2):\n    '''\n    Returns a list with the letters that appear in both words\n    '''\n    return list(set(word1) & set(word2))\n    \ndef get_common_letters_count(word1, word2):\n    '''\n    Returns the number of common letters in the two words\n    '''\n    return len(get_common_letters(word1,word2))\n    \ndef get_words_with_common_letter(letter, data_list):\n    '''\n    Returns a list of all the words with the common letter in them\n    '''\n    return [word for word in data_list if letter in get_common_letters(word,data_list)]\n    \ndef get_words_with_common_letter_count(letter, data_list):\n    '''\n    Returns the number of times the common letter appears in all the words in the list\n    '''\n    return len(get_words_with_common_letter(letter, data_list))\n    \ndef get_vowel_consonant_ratio(word):\n    '''\n    Returns the vowel/consonant ratio in the word\n    '''\n    vowels = sum(1 for letter in word if letter in 'aeiou')\n    consonants = sum(1 for letter in word if letter not in 'aeiou')\n    return vowels/consonants\n    \ndef get_avg_vowel_consonant_ratio(data_list):\n    '''\n    Returns the average vowel/consonant ratio in the words of the list\n    '''\n    vowel_consonant_ratio_sum = 0\n    for word in data_list:\n        vowel_consonant_ratio_sum += get_vowel_consonant_ratio(word)\n    return vowel_consonant_ratio_sum/len(data_list)\n    \ndef get_avg_vowel_consonant_ratio_words(data_list):\n    '''\n    Returns a list of the words with a vowel/consonant ratio greater than 1\n    '''\n    return [word for word in data_list if get_vowel_consonant_ratio(word) > 1.0]\n    \ndef get_vowel_consonant_ratio_words_count(data_list):\n    '''\n    Returns the number of words with vowel/consonant ratio greater than 1\n    '''\n    return len(get_avg_vowel_consonant_ratio_words(data_list))\n    \ndef get_avg_vowel_consonant_ratio_words_count(data_list):\n    '''\n    Returns the average vowel/consonant ratio in the words of the list\n    '''\n    return get_vowel_consonant_ratio_words_count(data_list)/len(data_list)\n    \ndef get_letter_count_sort(word):\n    '''\n    Returns a list of the letters of the word in the order they appear in the word\n    '''\n    letters_count = get_letters_count(word)\n    return sorted(letters_count, key=letters_count.get)\n    \ndef get_letter_count_sort_words(data_list):\n    '''\n    Returns a list of the words in the input list sorted by the number of times\n    they appear in the word in the order they appear in the word\n    '''\n    letter_count_sort_words = []\n    for word in data_list:\n        letters_count = get_letters_count(word)\n        letter_count_sort_words.append((len(word),word,letters_count))\n    return [word for length, word, letters_count in sorted(letter_count_sort_words,reverse=True)]\n    \ndef get_letter_count_sort_words_count(data_list):\n    '''\n    Returns the number of words in the input list sorted by the number of times\n    they appear in the word in the order they appear in the word\n    '''\n    return len(get_letter_count_sort_words(data_list))\n    \ndef get_two_letter_anagrams(data_list):\n    '''\n    Returns a list with the two letter anagrams in the input list\n    '''\n    anagrams = []\n    for word in data_list:\n        if len(word) > 1:\n            if word[0] == word[1]:\n                anagrams.append(word)\n    return anagrams\n    \ndef get_two_letter_anagrams_count(data_list):\n    '''\n    Returns the number of two letter anagrams in the list\n    '''\n    return len(get_two_letter_anagrams(data_list))\n    \ndef get_two_letter_anagrams_sort_words(data_list):\n    '''\n    Returns "
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for ch in str1:\n        if ch == ch:\n            newstr += newch\n        else:\n            newstr += ch\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    list1=[]\n    list2=[]\n    for i in str1:\n        list1.append(i)\n    for j in list1:\n        if j==ch:\n            list2.append(newch)\n        else:\n            list2.append(j)\n    return ''.join(list2)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sort_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1])\ndef unique_list(input):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(input))\ndef no_dups(input):\n    '''\n    Write a function to check if a list has no duplicates.\n    '''\n    return len(input) == len(set(input))\ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if a string is an anagram of another string.\n    '''\n    dict1 = Counter(str1)\n    dict2 = Counter(str2)\n    return dict1 == dict2\ndef comp(a,b):\n    '''\n    Write a function that takes two lists and returns True if they have at least one common member.\n    '''\n    return a[0] == b[0]\ndef common(a,b):\n    '''\n    Write a function to find the common items between two lists.\n    '''\n    return set(a) & set(b)\ndef is_unique(input):\n    '''\n    Write a function to check if a list is unique.\n    '''\n    return len(input) == len(set(input))\ndef find_missing(input):\n    '''\n    Write a function to find the missing items in a list.\n    '''\n    return set(range(len(input)+1)) - set(input)\ndef is_sorted(input):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(input[i] <= input[i+1] for i in range(len(input)-1))\ndef find_duplicates(input):\n    '''\n    Write a function to find the duplicates in a list.\n    '''\n    counts = Counter(input)\n    return [i for i in counts if counts[i] > 1]\ndef find_letter_counts(input):\n    '''\n    Write a function to count the number of times a letter occurs in a string.\n    '''\n    counts = Counter(input)\n    return {k:v for k,v in counts.items()}\ndef find_letter_counts_2(input):\n    '''\n    Write a function to count the number of times a letter occurs in a string.\n    '''\n    return Counter(input)\ndef find_missing_letter(input):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    return [chr(i) for i in range(ord('a'),ord('a')+26) if chr(i) not in input]\ndef is_anagram2(input):\n    '''\n    Write a function to check if a string is an anagram of another string.\n    '''\n    return sorted(input) == sorted(input[::-1])\ndef is_perm(input):\n    '''\n    Write a function to check if a string is a permutation of another string.\n    '''\n    return len(input) == len(set(input))\ndef letter_rotations(input):\n    '''\n    Write a function to find the rotations of a string.\n    '''\n    return [input[i:] + input[:i] for i in range(len(input))]\ndef rotate_word(input,n):\n    '''\n    Write a function to rotate a string n characters to the left.\n    '''\n    return input[n:] + input[:n]\ndef is_palindrome(input):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return input == input[::-1]\ndef longest_common_substring(string1, string2):\n    '''\n    Write a function to find the longest common substring.\n    '''\n    m = len(string1)\n    n = len(string2)\n    l = [[0]*(n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                l[i][j] = 0\n            elif string1[i-1] == string2[j-1]:\n                l[i][j] = l[i-1][j-1] + 1\n            else:\n                l[i][j] = max(l[i][j-1],l[i-1][j])\n    return l[m][n]\ndef is_balanced(input):\n    '''\n    Write a function to check if a tree is balanced.\n    '''\n    def helper(node,d):\n        if not node:\n            return d\n        return max(helper(node.left, d - 1), helper(node.right, d + 1))\n    return helper(input,0)!= -1\ndef most_frequent(input):\n    '''\n    Write a function to find the most frequent item in a list.\n    '''\n    counts = Counter(input)\n    return counts.most_common(1)[0][0]\ndef find_longest_substring(input):\n    '''\n    Write a function to find the longest substring without repeating characters.\n    '''\n    counts = Counter(input)\n    current = counts.most_common(1)[0]\n    current_length = current[1]\n    longest = [current[0]]\n    for i in range(1,len(input)):\n        counts[input[i]] += 1\n        if counts[input[i]] == current_length:\n            current = counts.most_common(1)[0]\n            longest.append(current[0])\n            current_length = current[1]\n        elif counts[input[i]] > current_length:\n            current = counts.most_common(1)[0]\n            longest = [current[0]]\n            current_length = current[1]\n    return longest\ndef find_longest_substring_2(input):\n    '''\n    Write a function to find the longest substring without repeating characters.\n    '''\n    counts = Counter(input)\n    current = counts.most_common(1)[0]\n    current_length = current[1]\n    longest = [current[0]]\n    for i in range(1,len(input)):\n        counts[input[i]] += 1\n        if counts[input[i]] == current_length:\n            current = counts.most_common(1)[0]\n            longest.append(current[0])\n            current_length = current[1]\n        elif counts[input[i]] > current_length:\n            current = counts.most_common(1)[0]\n            longest = [current[0]]\n            current_length = current[1]\n    return longest\ndef check_if_balanced(input):\n    '''\n    Write a function to check if a string is balanced.\n    '''\n    counts = Counter(input)\n    return max(counts.values()) - min(counts.values()) == 0\ndef has_unique_characters(input):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    return len(set(input)) == len(input)\ndef merge_dicts(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return {**dict1,**dict2}\ndef merge_dicts2(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    for k,v in dict2.items():\n        if k in dict1:\n            dict1[k].append(v)\n        else:\n            dict1[k] = [v]\n    return dict1\ndef f(input):\n    '''\n    Write a function to convert a sorted array into a height balanced BST.\n    '''\n    if not input:\n        return None\n    mid = len(input)//2\n    node = Node(input[mid])\n    node.left = f(input[:mid])\n    node.right = f(input[mid+1:])\n    return node\ndef inorder_traversal(node,output):\n    '''\n    Write a function to inorder traverse a binary tree.\n    '''\n    if not node:\n        return\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\ndef sort_string(str1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_str = ''.join(sorted(str1))\n    return sorted_str\ndef get_top_k_words(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v2(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v3(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v4(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v5(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v6(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v7(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v8(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v9(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v10(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = 1\n    sorted_dict = sort_counter(d)\n    top_k_words = []\n    for i in range(k):\n        top_k_words.append(sorted_dict[i][0])\n    return top_k_words\ndef get_top_k_words_v11(file_name, k=100):\n    '''\n    Write a function to get the top k words from a file\n    '''\n    d = {}\n    with open(file_name, 'r') as infile:\n        for line in infile:\n            for word in line.split():\n                word = word.strip(',')\n                if word in d:\n                    d[word] = d[word] + 1\n                else:\n                    d[word] = "
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    d = {}\n    for key, value in sorted(dict1.items(), key=lambda item: item[1], reverse=True):\n        d[key] = value\n    return d\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = sorted(nums)\n    return sum(nums[-1:0:-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return largest+smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-1:-len(nums)-1:-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # if len(nums) < 2:\n    #     return 0\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - min(nums) - max(nums)\n    \ndef digital_sum(n):\n    '''\n    Write a python function to find the sum of the first and last digits of a given integer.\n    '''\n    return sum(int(d) for d in str(n))\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # keep a list of the largest and smallest values\n    # loop through the array and\n    # add the value to the list\n    # return the sum of the list\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef is_empty(string):\n    '''\n    Write a python function to check if the string is empty or not.\n    '''\n    if string:\n        return False\n    else:\n        return True\n    \ndef is_even(number):\n    '''\n    Write a python function to check if the given number is even or not.\n    '''\n    if number % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_number(string):\n    '''\n    Write a python function to check if the given string is a number or not.\n    '''\n    try:\n        float(string)\n        return True\n    except:\n        return False\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    if string[0]!= string[-1]:\n        return False\n    else:\n        for i in range(1,len(string)-1):\n            if string[i]!= string[-i-1]:\n                return False\n        return True\n    \ndef is_string(string):\n    '''\n    Write a python function to check if the given string is a string or not.\n    '''\n    return isinstance(string,str)\n    \ndef is_number_in_list(number, list):\n    '''\n    Write a python function to check if the given number is present in the list or not.\n    '''\n    if number in list:\n        return True\n    else:\n        return False\n    \ndef is_string_in_list(string, list):\n    '''\n    Write a python function to check if the given string is present in the list or not.\n    '''\n    if string in list:\n        return True\n    else:\n        return False\n    \ndef is_odd(number):\n    '''\n    Write a python function to check if the given number is odd or not.\n    '''\n    if number % 2!= 0:\n        return True\n    else:\n        return False\n    \ndef is_num_in_list(number, list):\n    '''\n    Write a python function to check if the given number is present in the list or not.\n    '''\n    if number in list:\n        return True\n    else:\n        return False\n    \ndef is_num_greater_than(number, threshold):\n    '''\n    Write a python function to check if the given number is greater than the threshold or not.\n    '''\n    if number > threshold:\n        return True\n    else:\n        return False\n    \ndef is_num_greater_than_or_equal(number, threshold):\n    '''\n    Write a python function to check if the given number is greater than or equal to the threshold or not.\n    '''\n    if number >= threshold:\n        return True\n    else:\n        return False\n    \ndef is_num_lesser_than(number, threshold):\n    '''\n    Write a python function to check if the given number is less than the threshold or not.\n    '''\n    if number < threshold:\n        return True\n    else:\n        return False\n    \ndef is_num_lesser_than_or_equal(number, threshold):\n    '''\n    Write a python function to check if the given number is less than or equal to the threshold or not.\n    '''\n    if number <= threshold:\n        return True\n    else:\n        return False\n    \ndef is_num_in_range(number, low, high):\n    '''\n    Write a python function to check if the given number is within the range or not.\n    '''\n    if number >= low and number <= high:\n        return True\n    else:\n        return False\n    \ndef is_num_in_range_inclusive(number, low, high):\n    '''\n    Write a python function to check if the given number is within the range or not.\n    '''\n    if number >= low and number <= high:\n        return True\n    else:\n        return False\n    \ndef is_num_in_range_exclusive(number, low, high):\n    '''\n    Write a python function to check if the given number is within the range or not.\n    '''\n    if number < low or number > high:\n        return True\n    else:\n        return False\n    \ndef is_num_in_range_exclusive_inclusive(number, low, high):\n    '''\n    Write a python function to check if the given number is within the range or not.\n    '''\n    if number > low and number <= high:\n        return True\n    else:\n        return False\n    \ndef is_digit(number):\n    '''\n    Write a python function to check if the given number is a digit or not.\n    '''\n    if str(number).isdigit():\n        return True\n    else:\n        return False\n    \ndef is_letter(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_string_in_alphabet(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_alphanumeric(string):\n    '''\n    Write a python function to check if the given string is alphanumeric or not.\n    '''\n    if string.isalnum():\n        return True\n    else:\n        return False\n    \ndef is_alphabet(string):\n    '''\n    Write a python function to check if the given string is a alphabet or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_digit_in_alphabet(string):\n    '''\n    Write a python function to check if the given string is a digit or not.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \ndef is_uppercase(string):\n    '''\n    Write a python function to check if the given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check if the given string is lowercase or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n    \ndef is_mixedcase(string):\n    '''\n    Write a python function to check if the given string is mixed case or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_number(string):\n    '''\n    Write a python function to check if the given string is a number or not.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \ndef is_letter_in_alphabet(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_letter_in_alphabet_lowercase(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_letter_in_alphabet_uppercase(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\n    \ndef is_digit_in_alphabet(string):\n    '''\n    Write a python function to check if the given string is a letter or not.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\n    \ndef is_symbol(string):\n    '''\n    Write a python function to check if the given string is a symbol or not.\n    '''\n    if string.isalpha():\n        return False\n    else:\n        return True\n    \ndef is_symbol_i"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    assert isinstance(string, str), '%s is not a string' % string\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    sub = re.sub('\\w*[a-z]\\w*', '', str1, flags = re.I)\n    return sub\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    # return pattern.sub('', str1)\n    str1 = str1.lower()\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=re.sub(\"[a-z]\",\"\",str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lst = re.findall(r'\\b[a-z]+',str1)\n    for x in lst:\n        if x in str1:\n            str1 = str1.replace(x,'')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1)==0:\n        return str1\n    else:\n        first=str1[0].upper()\n        if first==str1[0]:\n            str1=first+remove_lowercase(str1[1:])\n        else:\n            str1=str1[0]+remove_lowercase(str1[1:])\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    reg = re.compile('[a-z]')\n    return reg.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('a') and ord(i)<=ord('z'):\n            continue\n        else:\n            new_str+=i\n    return new_str\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('A') and ord(i)<=ord('Z'):\n            continue\n        else:\n            new_str+=i\n    return new_str\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9'):\n            continue\n        else:\n            new_str+=i\n    return new_str\ndef remove_symbol(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9') or ord(i)>=ord('A') and ord(i)<=ord('Z') or ord(i)>=ord('a') and ord(i)<=ord('z') or ord(i)>=ord(' ') and ord(i)<=ord('~') or ord(i)>=ord('!') and ord(i)<=ord('@') or ord(i)>=ord('$') and ord(i)<=ord('&') or ord(i)>=ord('*') and ord(i)<=ord('~') or ord(i)>=ord('%') and ord(i)<=ord('~') or ord(i)>=ord('^') and ord(i)<=ord('~') or ord(i)>=ord('`') and ord(i)<=ord('~'):\n            continue\n        else:\n            new_str+=i\n    return new_str\ndef remove_space(str1):\n    '''\n    Write a function to remove space from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9') or ord(i)>=ord('A') and ord(i)<=ord('Z') or ord(i)>=ord('a') and ord(i)<=ord('z'):\n            new_str+=i\n        else:\n            continue\n    return new_str\ndef remove_extra_space(str1):\n    '''\n    Write a function to remove extra space from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9') or ord(i)>=ord('A') and ord(i)<=ord('Z') or ord(i)>=ord('a') and ord(i)<=ord('z'):\n            new_str+=i\n        else:\n            if ord(i)==ord(' '):\n                continue\n            else:\n                new_str+=i\n    return new_str\ndef remove_extra_symbol(str1):\n    '''\n    Write a function to remove extra symbols from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9') or ord(i)>=ord('A') and ord(i)<=ord('Z') or ord(i)>=ord('a') and ord(i)<=ord('z'):\n            new_str+=i\n        else:\n            if ord(i)==ord('@') or ord(i)==ord('#') or ord(i)==ord('$') or ord(i)==ord('%') or ord(i)==ord('^') or ord(i)==ord('&') or ord(i)==ord('*') or ord(i)==ord('~') or ord(i)==ord('!') or ord(i)==ord('`'):\n                continue\n            else:\n                new_str+=i\n    return new_str\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9') or ord(i)>=ord('A') and ord(i)<=ord('Z') or ord(i)>=ord('a') and ord(i)<=ord('z'):\n            new_str+=i\n        else:\n            continue\n    return new_str\ndef remove_brackets(str1):\n    '''\n    Write a function to remove brackets from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9') or ord(i)>=ord('A') and ord(i)<=ord('Z') or ord(i)>=ord('a') and ord(i)<=ord('z'):\n            new_str+=i\n        else:\n            if i=='(' or i=='[' or i=='{' or i=='<' or i=='!':\n                continue\n            else:\n                new_str+=i\n    return new_str\ndef remove_multispace(str1):\n    '''\n    Write a function to remove multi spaces from a given string.\n    '''\n    new_str=''\n    count=0\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9') or ord(i)>=ord('A') and ord(i)<=ord('Z') or ord(i)>=ord('a') and ord(i)<=ord('z'):\n            new_str+=i\n        else:\n            if ord(i)==ord(' ') and count==0:\n                continue\n            elif ord(i)==ord(' ') and count==1:\n                continue\n            elif ord(i)==ord(' '):\n                count+=1\n            else:\n                new_str+=i\n    return new_str\ndef remove_singlespace(str1):\n    '''\n    Write a function to remove single space from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)<=ord('9') or ord(i)>=ord('A') and ord(i)<=ord('Z') or ord(i)>=ord('a') and ord(i)<=ord('z'):\n            new_str+=i\n        else:\n            if ord(i)==ord(' '):\n                continue\n            else:\n                new_str+=i\n    return new_str\ndef remove_lower(str1):\n    '''\n    Write a function to remove lowercase letters from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('a') and ord(i)<=ord('z'):\n            continue\n        else:\n            new_str+=i\n    return new_str\ndef remove_upper(str1):\n    '''\n    Write a function to remove uppercase letters from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('A') and ord(i)<=ord('Z'):\n            continue\n        else:\n            new_str+=i\n    return new_str\ndef remove_digit(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    new_str=''\n    for i in str1:\n        if ord(i)>=ord('0') and ord(i)"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    digit = 1\n    while n >= digit :\n        n /= digit\n        digit *= 10\n    return n\n    \ndef isPower(n) :  \n    '''\n    Write a python function to find if a given number is a power of 2 or not.\n    '''\n    count = 0\n    while (n & 1 == 0) :\n        count += 1\n        n >>= 1\n    return (n == 1) and (count % 2 == 1)\n    \ndef isPower2(n) :  \n    '''\n    Write a python function to find if a given number is a power of 2 or not.\n    '''\n    if n == 1 :\n        return True\n    if n & (n - 1)!= 0 :\n        return False\n    return isPower(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Approach 1\n    # Take the first digit\n    dig = n % 10\n    # Iterate upto the second last digit\n    while n > 0 :\n        # if the digit is greater than 9 then return false\n        if n % 10 > 9 :\n            return False\n        n = n / 10\n    # if the function reaches here then the first digit is greater than 9\n    return True\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<0 :\n        return None\n    return n%10\ndef split_Number(n) :\n    '''\n    Write a python function to split the number into left-hand and right-hand part.\n    '''\n    if n<0 :\n        return None, None\n    if n<10 :\n        return None, n\n    else :\n        return n//10, n%10\ndef isPrime(n) :\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n<2 :\n        return False\n    if n==2 :\n        return True\n    if n%2==0 :\n        return False\n    i = 3\n    while i<n :\n        if n%i==0 :\n            return False\n        i+=2\n    return True\ndef isPalindrome(n) :\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    if n<0 :\n        return None\n    if n==0 :\n        return True\n    if n<10 :\n        return True\n    a = 0\n    b = n\n    while b>0 :\n        a = a*10 + b%10\n        b = b//10\n    return a==n\ndef countDigit(n) :\n    '''\n    Write a python function to count the number of digits of a given number.\n    '''\n    if n<0 :\n        return None\n    if n==0 :\n        return 0\n    if n<10 :\n        return 1\n    a, b = split_Number(n)\n    return 1 + countDigit(a)\ndef countDigit_Prime(n) :\n    '''\n    Write a python function to count the number of digits of a given number if the number is prime.\n    '''\n    if n<0 :\n        return None\n    if n<10 :\n        return 1\n    if isPrime(n) :\n        return 1 + countDigit(n)\n    a, b = split_Number(n)\n    return 1 + countDigit(a)\ndef isDigit(n) :\n    '''\n    Write a python function to check whether a given number is digit or not.\n    '''\n    if n<0 or n>=10 :\n        return False\n    return True\ndef countDigit_Prime(n) :\n    '''\n    Write a python function to count the number of digits of a given number if the number is prime.\n    '''\n    if n<0 :\n        return None\n    if n<10 :\n        return 1\n    if isPrime(n) :\n        return 1 + countDigit(n)\n    a, b = split_Number(n)\n    return 1 + countDigit(a)\ndef split_Digit(n) :\n    '''\n    Write a python function to split the number into left-hand and right-hand part.\n    '''\n    if n<0 :\n        return None, None\n    if n<10 :\n        return None, n\n    else :\n        return n//10, n%10\ndef countDigit_Prime(n) :\n    '''\n    Write a python function to count the number of digits of a given number if the number is prime.\n    '''\n    if n<0 :\n        return None\n    if n<10 :\n        return 1\n    if isPrime(n) :\n        return 1 + countDigit(n)\n    a, b = split_Digit(n)\n    return 1 + countDigit(a)\ndef isDigit_Prime(n) :\n    '''\n    Write a python function to check whether a given number is digit or not if the number is prime.\n    '''\n    if n<0 or n>=10 :\n        return False\n    if isPrime(n) :\n        return True\n    a, b = split_Digit(n)\n    return isDigit(a)\ndef split_Digit_Prime(n) :\n    '''\n    Write a python function to split the number into left-hand and right-hand part.\n    '''\n    if n<0 :\n        return None, None\n    if n<10 :\n        return None, n\n    if isPrime(n) :\n        return n//10, n%10\n    a, b = split_Digit(n)\n    return a//10, a%10\ndef pow(a,b) :\n    '''\n    Write a python function to calculate a power number.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return 1\n    if b==1 :\n        return a\n    b_copy = b\n    result = 1\n    while b_copy>0 :\n        if b_copy&1 :\n            result = result*a\n        a = a*a\n        b_copy = b_copy>>1\n    return result\ndef isPower(a,b) :\n    '''\n    Write a python function to check whether a given number is power of b.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return True\n    if a<0 :\n        return False\n    if a==1 :\n        return True\n    if a==b :\n        return True\n    if b==1 :\n        return True\n    while a%b==0 :\n        a = a/b\n    return a==1\ndef pow_Digit(a,b) :\n    '''\n    Write a python function to calculate a power number if the number is digit.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return 1\n    if b==1 :\n        return a\n    b_copy = b\n    result = 1\n    while b_copy>0 :\n        if b_copy&1 :\n            result = result*a\n        a = a*a\n        b_copy = b_copy>>1\n    return result\ndef pow_Prime(a,b) :\n    '''\n    Write a python function to calculate a power number if the number is prime.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return 1\n    if b==1 :\n        return a\n    if a<0 :\n        return None\n    if a==1 :\n        return True\n    if a==b :\n        return True\n    if isPrime(b) :\n        return pow(a,b)\n    b_copy = b\n    result = 1\n    while b_copy>0 :\n        if b_copy&1 :\n            result = result*a\n        a = a*a\n        b_copy = b_copy>>1\n    return result\ndef isPower_Prime(a,b) :\n    '''\n    Write a python function to check whether a given number is power of b if the number is prime.\n    '''\n    if b<0 :\n        return None\n    if b==0 :\n        return True\n    if b==1 :\n        return True\n    if a<0 :\n        return False\n    if a==1 :\n        return True\n    if a==b :\n        return True\n    if isPrime(b) :\n        return isPower(a,b)\n    b_copy = b\n    result = 1\n    while b_copy>0 :\n        if b_copy&1 :\n            result = result*a\n        a = a*a\n        b_copy = b_copy>>1\n    return result==a\ndef add(a,b) :\n    '''\n    Write a python function to add two numbers.\n    '''\n    if a<0 :\n        return None\n    if b<0 :\n        return None\n    if a==0 :\n        return b\n    if b==0 :\n        return a\n    a_copy = a\n    b_copy = b\n    result = 0\n    while b_copy>0 :\n        temp = a_copy&b_copy\n        if temp>=10 :\n            result = result + (temp-10)\n        else :\n            result = result + temp\n        a_copy = a_copy>>1\n        b_copy = b_copy>>1\n    return result\ndef add_Digit(a,b) :\n    '''\n    Write a python function to add two numbers if the number is digit.\n    '''\n    if a<0 :\n        return None\n    if b<0 :\n        return None"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return n*-1\n    return n\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return n*-1\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # SEGMENT-2\n    n = abs(n)\n    s = str(n)\n    i = len(s) - 1\n    first_digit = s[i]\n    return first_digit\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x=int(n)\n    while x>0 :\n        return x%10\n        x=x/10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n/10\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    # for each element in the list\n    for i in range(0,len(list)):\n        # if the element is odd, print it.\n        if(list[i]%2!= 0):\n            print list[i]\n    \n    return None\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [number for number in list if number%2!= 0]\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = [x for x in list if x%2!= 0]\n    return list1\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if not isinstance(list,list):\n        raise ValueError(\"Parameter must be a list\")\n    for item in list:\n        if not isinstance(item,int):\n            raise ValueError(\"List items must be integers\")\n    return [item for item in list if item % 2!= 0]\n        \ndef Filter_by_prefix(list,prefix):\n    '''\n    Write a python function which takes a list of integers and only returns the items which start with the prefix.\n    '''\n    if not isinstance(list,list):\n        raise ValueError(\"Parameter must be a list\")\n    for item in list:\n        if not isinstance(item,int):\n            raise ValueError(\"List items must be integers\")\n    return [item for item in list if item.startswith(prefix)]\n        \ndef Filter_by_suffix(list,suffix):\n    '''\n    Write a python function which takes a list of integers and only returns the items which end with the suffix.\n    '''\n    if not isinstance(list,list):\n        raise ValueError(\"Parameter must be a list\")\n    for item in list:\n        if not isinstance(item,int):\n            raise ValueError(\"List items must be integers\")\n    return [item for item in list if item.endswith(suffix)]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2!= 0]\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(range(1,n+1))**3 - sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    i = 1\n    n = int(n)\n    total = 0\n    while i <= n :\n        total = total + i*i*i\n        i = i + 1\n    return total - n * (n+1) * (n+2) / 6\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #return sum(range(1,n+1))**3 - sum(range(1,n+1))\n    return (sum(range(1,n+1))**3 - sum(range(1,n+1)) )\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n*n+1)*0.5\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        s=s+i**3\n    return s\ndef sum_digits(n) :\n    '''\n    Write a python function to find the sum of the digits of a given number n.\n    '''\n    s=0\n    while n:\n        s=s+n%10\n        n/=10\n    return s\ndef recursive_sum(n) :\n    '''\n    Write a python function to calculate the sum of the first n natural numbers using recursion.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n+recursive_sum(n-1)\ndef sum_series(n,a=0,b=1) :\n    '''\n    Write a python function to calculate the sum of the first n natural numbers using recursion.\n    '''\n    if n==1:\n        return b\n    else:\n        return sum_series(n-1,a,b)\ndef list_to_string(l) :\n    '''\n    Write a python function to join a list of words into a string.\n    '''\n    s=\"\"\n    for i in l:\n        s+=i\n    return s\ndef insert_at(l,n,val) :\n    '''\n    Write a python function to insert a given value into a list at a given index.\n    '''\n    return l[:n]+[val]+l[n:]\ndef permutations(l) :\n    '''\n    Write a python function to find all the permutations of a given list.\n    '''\n    if len(l)==1:\n        return [l]\n    else:\n        permutations_list=[]\n        for i in l:\n            permutations_list.append(insert_at(l,l.index(i),i))\n        return permutations_list\ndef choose(n,k) :\n    '''\n    Write a python function to find the kth permutation of a given list.\n    '''\n    if n==k:\n        return [l]\n    else:\n        choose_list=[]\n        for i in l:\n            choose_list.append(insert_at(l,l.index(i),i))\n        return choose(n,k+1)+choose(n-1,k)\ndef sum_of_squares(n) :\n    '''\n    Write a python function to find the sum of the squares of the first n natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        s=s+i**2\n    return s\ndef fibonacci(n) :\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n==1 or n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef check_fibonacci(n) :\n    '''\n    Write a python function to check if a given number is a fibonacci number.\n    '''\n    a=0\n    b=1\n    while True:\n        a,b=b,a+b\n        if a==n or b==n:\n            return True\n        elif a==n and b!=n:\n            return False\ndef max_of_three(a,b,c) :\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(a,b,c)\ndef binary_search(l,item) :\n    '''\n    Write a python function to implement a binary search.\n    '''\n    low=0\n    high=len(l)-1\n    while low<=high:\n        mid=low+(high-low)//2\n        if l[mid]==item:\n            return mid\n        elif l[mid]<item:\n            low=mid+1\n        elif l[mid]>item:\n            high=mid-1\n    return -1\ndef transpose(m) :\n    '''\n    Write a python function to transpose a given matrix.\n    '''\n    n=len(m)\n    for i in range(n):\n        for j in range(i,n):\n            temp=m[i][j]\n            m[i][j]=m[j][i]\n            m[j][i]=temp\n    return m\ndef matrix_chain_multiplication(d) :\n    '''\n    Write a python function to calculate the matrix chain multiplication for a given list of matrices.\n    '''\n    if len(d)==1:\n        return d[0][0]\n    else:\n        m=[]\n        for i in range(len(d)-1):\n            m.append([])\n            for j in range(len(d[i])):\n                m[i].append(0)\n        for i in range(len(d)-1):\n            for j in range(len(d[i])):\n                m[i][j]=d[i][j]*d[i+1][j]+d[i][j]*d[i+1][j+1]\n        return m[0][0]\ndef permute_iter(l) :\n    '''\n    Write a python function to generate all the permutations of a given list.\n    '''\n    if len(l)==1:\n        return [l]\n    else:\n        permute_list=[]\n        for i in l:\n            for j in permute_iter(l[:l.index(i)]+l[l.index(i)+1:]):\n                permute_list.append(insert_at(l,l.index(i),i)+j)\n        return permute_list\ndef swap(l,a,b) :\n    '''\n    Write a python function to swap two elements in a list.\n    '''\n    temp=l[a]\n    l[a]=l[b]\n    l[b]=temp\n    return l\ndef next_permutation(l) :\n    '''\n    Write a python function to find the next permutation of a given list.\n    '''\n    for i in range(len(l)-1,0,-1):\n        if l[i-1]<l[i]:\n            temp=l[i-1]\n            l[i-1]=l[i]\n            l[i]=temp\n            temp=l[i:]\n            l=l[:i]+temp\n            return l\n    return l\ndef common_elements(l1,l2) :\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    l3=[]\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n    return l3\ndef max_of_list(l) :\n    '''\n    Write a python function to find the maximum element of a list.\n    '''\n    m=l[0]\n    for i in l:\n        if i>m:\n            m=i\n    return m\ndef min_of_list(l) :\n    '''\n    Write a python function to find the minimum element of a list.\n    '''\n    m=l[0]\n    for i in l:\n        if i<m:\n            m=i\n    return m\ndef is_palindrome(l) :\n    '''\n    Write a python function to check if a given list is a palindrome.\n    '''\n    if l==l[::-1]:\n        return True\n    else:\n        return False\ndef rotate(l) :\n    '''\n    Write a python function to rotate a given list.\n    '''\n    return l[1:]+[l[0]]\ndef reverse(l) :\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return l[::-1]\ndef flatten(l) :\n    '''\n    Write a python function to flatten a given list.\n    '''\n    if len(l)==0:\n        return l\n    elif len(l)==1:\n        return l[0]\n    else:\n        return l[0]+flatten(l[1:])\ndef find_min(l) :\n    '''\n    Write a python function to find the minimum element of a list."
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(x**3 for x in range(1,n+1)) - sum(range(1,n+1))\n    \nprint(difference(100))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = n * (n + 1) * (2 * n + 1) / 6\n    return s - sum_of_cubes(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6 - sum(range(n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(x ** 3 for x in range(1, n)) - sum(x for x in range(1, n + 1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1,n+1)]) - sum([x for x in range(1,n+1)])\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Odd_Pairs = 0\n    for i in range(N) :\n        for j in range(i+1, N) :\n            if A[i]^A[j]&1 == 1 :\n                Odd_Pairs += 1\n    return Odd_Pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Your code goes here\n    count = 0 \n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    # variable to store the final result \n    res = 0 \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j]) & 1 == 1:\n                count += 1\n    return count\ndef test_Odd_Pair() :\n    assert 3 == find_Odd_Pair([1,2,3,4,5,6],6)\n    assert 0 == find_Odd_Pair([1,2,3,4,5,6],7)\n    assert 2 == find_Odd_Pair([1,2,3,4,5,6],7)\n    print(\"All tests passed\")\ntest_Odd_Pair("
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!=0 :\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N-1) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # using XOR operation to count the number of odd pairs\n    # extra 1 is added in the end to avoid divide by 0 error\n    return len(A)-sum(i & 1 for i in A) + 1\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    a_dict = {}\n    for i in xrange(N) :\n        a_dict[A[i]] = a_dict.get(A[i], 0) + 1\n    print a_dict\n    count = 0\n    for i in xrange(N) :\n        if A[i] ^ A[i+1]!= A[i] ^ A[i+2] :\n            count += 1\n    return count\n    \ndef find_Odd_Pair_Iterative(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    a_dict = {}\n    for i in xrange(N) :\n        a_dict[A[i]] = a_dict.get(A[i], 0) + 1\n    count = 0\n    for i in xrange(N) :\n        if A[i] ^ A[i+1]!= A[i] ^ A[i+2] :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in xrange(N-1):\n        for j in xrange(i+1,N):\n            if(A[i] ^ A[j] & 1) :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    Odd_Pairs = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if A[i]^A[j]%2 == 1 :\n                Odd_Pairs = Odd_Pairs + 1\n    return Odd_Pairs\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper(), string))\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return ''\n    elif len(string) == 1:\n        return string.upper() if string.islower() else string.lower()\n    else:\n        if string.islower():\n            return string.upper()\n        else:\n            return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return \"\"\n    elif string[0].isupper():\n        return string[0].lower() + toggle_string(string[1:])\n    elif string[0].islower():\n        return string[0].upper() + toggle_string(string[1:])\n    else:\n        return toggle_string(string[1:])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    output = []\n    for char in string:\n        if char.isupper():\n            output.append(char.lower())\n        elif char.islower():\n            output.append(char.upper())\n        else:\n            output.append(char)\n    return ''.join(output)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper(),string))\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string)!= str:\n        return \"Error: Input is not a string.\"\n    else:\n        string = string.swapcase()\n        return string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([x.swapcase() for x in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        raise ValueError('n1 and n2 must be same length')\n    return sum([abs(int(i1) - int(i2)) for i1,i2 in zip(str(n1),str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    n1 = n1[::-1]\n    n2 = n2[::-1]\n    n1 = [int(x) for x in n1]\n    n2 = [int(x) for x in n2]\n    n1 = [x for x in n1 if x!= 0]\n    n2 = [x for x in n2 if x!= 0]\n    d1 = len(n1)\n    d2 = len(n2)\n    s = 0\n    if d1 > d2:\n        n1, n2 = n2, n1\n    for i in xrange(d1):\n        s += abs(n1[i] - n2[i])\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(i) for i in str(n1-n2)])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        return sum([int(i) - int(j) for i,j in zip(str(n1), str(n2))])\n    else:\n        return sum([int(i) - int(j) for i,j in zip(str(n2), str(n1))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    n1_list = []\n    n2_list = []\n    n1_len = len(n1)\n    n2_len = len(n2)\n    for i in xrange(n1_len):\n        n1_list.append(int(n1[i]))\n    for j in xrange(n2_len):\n        n2_list.append(int(n2[j]))\n    n1_list.sort()\n    n2_list.sort()\n    if n1_list == n2_list:\n        return 0\n    else:\n        diff_list = []\n        for i in xrange(n1_len):\n            diff_list.append(abs(n1_list[i] - n2_list[i]))\n        return sum(diff_list)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1), str(n2))])\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    return sum([int(i) for i in str(diff)])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    n1 = abs(n1)\n    n2 = abs(n2)\n    digits1 = len(str(n1))\n    digits2 = len(str(n2))\n    if digits1 > digits2:\n        digits1, digits2 = digits2, digits1\n    if digits1 == 1:\n        return n2 - n1\n    d = digits1 - digits2\n    s = 0\n    m = 1\n    for i in range(d):\n        m *= 10\n    for i in range(digits1):\n        s += m / n1 * (n1 % 10) - m / n2 * (n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # n1, n2 = map(int,raw_input().split())\n    # # print n1, n2\n    # result = 0\n    # n1 = str(n1)\n    # n2 = str(n2)\n    # n1 = list(n1)\n    # n2 = list(n2)\n    # for i in range(len(n1)):\n    #     result += abs(int(n1[i]) - int(n2[i]))\n    # print result\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    else:\n        n1 = str(n1)\n        n2 = str(n2)\n        l1 = len(n1)\n        l2 = len(n2)\n        if l1 > l2:\n            n2 = n2 + '0'*(l1-l2)\n        else:\n            n1 = n1 + '0'*(l2-l1)\n        dist = 0\n        for i in xrange(l1):\n            if n1[i]!= n2[i]:\n                dist += 1\n        return dist\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -1\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    start = 0\n    end = 0\n    s = 0\n    for i in range(1, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n            start = i + 1\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            end = i\n    for i in range(end, start-1, -1):\n        s = s + a[i]\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in xrange(1, size):\n        max_sum = max(a[i], max_sum + a[i])\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum = current_sum + a[i]\n        if max_sum < current_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    curr_sum = 0\n    max_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    result_list = []\n    \n    for i in test_tup1:\n        if i not in result_list:\n            result_list.append(i)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # test_tup1 = tuple(sorted(test_tup1))\n    # test_tup2 = tuple(sorted(test_tup2))\n    return tuple(sorted(test_tup1 | test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_list = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            new_list.append(min(test_tup1[i], test_tup2[i]))\n        return tuple(new_list)\n    else:\n        print 'Input tuples are not equal in length!'\n        return None\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    a = sorted(list(test_tup1) + list(test_tup2))\n    return tuple(a)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = tuple(sorted(set(test_tup1).union(set(test_tup2))))\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = set(test_tup1)\n    new_tup.update(test_tup2)\n    return sorted(list(new_tup))\n    \ndef union_elements_hash(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = set(test_tup1)\n    new_tup.update(test_tup2)\n    return sorted(list(new_tup))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    for i in test_tup1:\n        if i not in test_tup2:\n            test_tup2.append(i)\n    test_tup2.sort()\n    return test_tup2\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list3 = test_list1 + test_list2\n    test_list3.sort()\n    return tuple(test_list3)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    dp = [[1 for j in range(0, n)] for i in range(0, n)]\n    maxi = 0\n    maxj = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if i == j:\n                dp[i][j] = 1\n            elif j == i - 1:\n                if lst[i] > lst[j]:\n                    dp[i][j] = dp[i][j - 1] + 1\n                else:\n                    dp[i][j] = 1\n            elif j == i - 2:\n                if lst[i] > lst[j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = 1\n            else:\n                if lst[i] > lst[j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = dp[i - 1][j - 1]\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = list(lst)\n    for i in range(len(lst)):\n        lst[i] = len(lst[i])\n    max_val = max(lst)\n    return max_val\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lenlst=len(lst)\n    i=0\n    j=0\n    maxlen=0\n    while i<lenlst:\n        j=i\n        len1=1\n        while j<lenlst:\n            if lst[j]==lst[j-1]:\n                len1+=1\n            else:\n                break\n            j+=1\n        if maxlen<len1:\n            maxlen=len1\n        i+=1\n    return maxlen\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if i == 0:\n            count = 1\n        else:\n            if lst[i] > lst[i - 1]:\n                count += 1\n            else:\n                max_len = max(max_len, count)\n                count = 1\n    max_len = max(max_len, count)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    tmp_lst = []\n    for ele in lst:\n        tmp_lst.append(len(ele))\n    max_len = max(tmp_lst)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    \n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                count = max(count, j - i + 1)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    ans = 0\n    for i in lst:\n        if isinstance(i,list):\n            ans = max(ans, Find_Max_Length(i) + len(i))\n        else:\n            ans = max(ans, len(i))\n    return ans\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    global max_len\n    global len_lst\n    max_len = 0\n    len_lst = len(lst)\n    for i in range(len_lst):\n        if max_len < len(lst[i]):\n            max_len = len(lst[i])\n        else:\n            continue\n    print(max_len)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length_lst = [len(i) for i in lst]\n    max_length = max(length_lst)\n    return max_length\n    \ndef Find_Median_Length(lst):\n    '''\n    Write a python function to find the median length of the longest sublists.\n    '''\n    length_lst = [len(i) for i in lst]\n    length_lst.sort()\n    if len(length_lst) % 2 == 0:\n        median_length = (length_lst[len(length_lst)//2] + length_lst[len(length_lst)//2-1]) / 2\n    else:\n        median_length = length_lst[len(length_lst)//2]\n    return median_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    print max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list_of_values = []\n    value = ''\n    quote = 0\n    for i in range(0, len(text)):\n        if text[i] == '\"':\n            if quote == 0:\n                value = value[:-1]\n                list_of_values.append(value)\n                value = ''\n                quote = 1\n            else:\n                value += text[i]\n        else:\n            value += text[i]\n    list_of_values.append(value)\n    return list_of_values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[^\"]*\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Parsing the text to get the values\n    # We are looking for a string of the form \"value1 value2\"\n    match = re.search(r'\"([\\w\\d\\.\\,\\s\\-]+)', text)\n    \n    # Check if we found anything\n    if match:\n        # Return the values\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if len(text) == 0:\n        return \"No text\"\n    values = []\n    quote_count = 0\n    open_quote = False\n    for c in text:\n        if c == '\"':\n            if quote_count % 2 == 0:\n                open_quote = False\n            else:\n                open_quote = True\n            quote_count += 1\n        elif open_quote:\n            values.append(c)\n    return ''.join(values)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #A = re.findall('\\\"(.*?)\\\"',text)\n    #print A\n    #A1 = re.findall('\\\"(.*?)\\\"',text)\n    #A2 = re.findall('\\\"(.*?)\\\"',text)\n    #A3 = re.findall('\\\"(.*?)\\\"',text)\n    #A4 = re.findall('\\\"(.*?)\\\"',text)\n    #print A1\n    #print A2\n    #print A3\n    #print A4\n    #print len(A)\n    #return len(A)\n    #print len(A1)\n    #print len(A2)\n    #print len(A3)\n    #print len(A4)\n    #return len(A)\n    #return len(A1)\n    #return len(A2)\n    #return len(A3)\n    #return len(A4)\n    #return len(A)\n    return len(text)\n    #return len(A1)\n    #return len(A2)\n    #return len(A3)\n    #return len(A4)\n    \n    \n    \n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\\"(.+)\\\"', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # res = re.findall('\\\".*?\\\"',text)\n    # print res\n    #res2 = re.findall('.*?\\\"',text)\n    # print res2\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    value = re.findall(\"\\\"(.*?)\\\"\", text)\n    return value\n    "
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    # Base case \n    if n == 1:\n        return 0\n    \n    # Base case \n    if n == 2:\n        return 1\n    \n    # Iterate through each possible pair \n    for i in range(n-1):\n        for j in range(i+1,n):\n            # Check if both elements are equal \n            if arr[i]!= arr[j]:\n                # Increment count \n                count += 1\n    \n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    i=0\n    j=1\n    count=0\n    while j<n:\n        if arr[j]!=arr[j-1]:\n            count=count+j\n        j=j+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n<0:\n        return 0\n    if n==0:\n        return 1\n    if arr[n-1]==arr[n-2]:\n        return 0 + count_Pairs(arr,n-2)\n    else:\n        return count_Pairs(arr,n-1) + count_Pairs(arr,n-2)\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                pairs+=1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\ndef count_Pairs2(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs3(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible ordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\ndef count_Pairs4(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible ordered pairs where both elements are equal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs5(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where both elements are equal and either element is present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs6(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where both elements are equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs7(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs8(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs9(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs10(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs11(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs12(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs13(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs14(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs15(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs16(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs17(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs18(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs19(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs20(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible pairs where either element is equal and both elements are present in the array exactly once.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\ndef count_Pairs21(arr,n):\n    '''"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # Initialize two counters\n    count = 0\n    n = len(arr)\n    \n    # Iterate through the array\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    # Return the count\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if(arr[i] < arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #add this part to my code later, from the book\n    \n    #initialize a dictionary to store the count of all possible pairs\n    pairCount = dict()\n    for i in range(n):\n        for j in range(i+1,n):\n            #add this part to my code later, from the book\n            if arr[i] == arr[j]:\n                pairCount[(arr[i],arr[j])] = pairCount.get((arr[i],arr[j]),0) + 1\n            # else:\n            #     pairCount[(arr[i],arr[j])] = pairCount.get((arr[i],arr[j]),0) + 1\n            #     pairCount[(arr[j],arr[i])] = pairCount.get((arr[j],arr[i]),0) + 1\n    return pairCount\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    for i in range(n): \n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                print arr[i],arr[j]\n                arr[j] = arr[i]\n                arr[i] = arr[j]\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef unique(word): \n    '''\n    Write a python function to check if a string has all unique characters.\n    '''\n    word = word.lower()\n    word = split(word)\n    # print(word)\n    count = 0\n    for char in word:\n        if word.count(char) > 1:\n            return False\n            break\n    return True\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef permutations(word): \n    '''\n    Write a python function to return all the permutations of a given string.\n    '''\n    '''\n    Create a list to store all the permutations.\n    '''\n    permutations_list = []\n    '''\n    Create a list to store all the permutations.\n    '''\n    word_length = len(word)\n    '''\n    Go through the length of the string and create all the permutations of the string.\n    '''\n    for i in range(word_length):\n        permutations_list.append(word[i])\n        '''\n        Create a new list and append the first word to the end of the list.\n        '''\n        for j in range(i):\n            permutations_list.append(word[j]+word[i])\n            '''\n            Create a new list and append the first word to the end of the list.\n            '''\n    return permutations_list\n    \ndef rot13(message):\n    '''\n    Write a python function to return the string rotated by 13 characters.\n    '''\n    '''\n    Create a variable to store the result.\n    '''\n    rot13_result = \"\"\n    '''\n    Create a variable to store the result.\n    '''\n    for char in message:\n        '''\n        Find the ASCII value of each character and add 13 to it.\n        '''\n        rot13_result += chr(ord(char)+13)\n    '''\n    Return the result.\n    '''\n    return rot13_result\n    \ndef permutations_with_repetition(word):\n    '''\n    Write a python function to return all the permutations of a given string with repetition.\n    '''\n    permutations_list = []\n    '''\n    Create a list to store all the permutations.\n    '''\n    word_length = len(word)\n    '''\n    Go through the length of the string and create all the permutations of the string.\n    '''\n    for i in range(word_length):\n        permutations_list.append(word[i])\n        '''\n        Create a new list and append the first word to the end of the list.\n        '''\n        for j in range(i):\n            permutations_list.append(word[j]+word[i])\n            '''\n            Create a new list and append the first word to the end of the list.\n            '''\n    return permutations_list\n    \ndef anagram_permutations(word):\n    '''\n    Write a python function to return all the anagram permutations of a given word.\n    '''\n    permutations_list = []\n    '''\n    Create a list to store all the permutations.\n    '''\n    word_length = len(word)\n    '''\n    Go through the length of the string and create all the permutations of the string.\n    '''\n    for i in range(word_length):\n        permutations_list.append(word[i])\n        '''\n        Create a new list and append the first word to the end of the list.\n        '''\n        for j in range(i):\n            if sorted(word[i]) == sorted(word[j]):\n                permutations_list.append(word[j]+word[i])\n                '''\n                Create a new list and append the first word to the end of the list.\n                '''\n    return permutations_list\n    \ndef get_duplicates(string):\n    '''\n    Write a python function to return the duplicated characters in a string.\n    '''\n    duplicates_list = []\n    '''\n    Create a list to store all the duplicates.\n    '''\n    string_length = len(string)\n    '''\n    Go through the length of the string and create all the permutations of the string.\n    '''\n    for i in range(string_length):\n        '''\n        Create a new list and append the first word to the end of the list.\n        '''\n        for j in range(i):\n            if sorted(string[i]) == sorted(string[j]):\n                duplicates_list.append(string[j])\n                '''\n                Create a new list and append the first word to the end of the list.\n                '''\n    return duplicates_list\n    \ndef get_permutations(string):\n    '''\n    Write a python function to return all the permutations of a given string.\n    '''\n    permutations_list = []\n    '''\n    Create a list to store all the permutations.\n    '''\n    string_length = len(string)\n    '''\n    Go through the length of the string and create all the permutations of the string.\n    '''\n    for i in range(string_length):\n        permutations_list.append(string[i])\n        '''\n        Create a new list and append the first word to the end of the list.\n        '''\n        for j in range(i):\n            permutations_list.append(string[j]+string[i])\n            '''\n            Create a new list and append the first word to the end of the list.\n            '''\n    return permutations_list\n    \ndef anagram_permutations_with_repetition(word):\n    '''\n    Write a python function to return all the anagram permutations of a given word with repetition.\n    '''\n    permutations_list = []\n    '''\n    Create a list to store all the permutations.\n    '''\n    word_length = len(word)\n    '''\n    Go through the length of the string and create all the permutations of the string.\n    '''\n    for i in range(word_length):\n        permutations_list.append(word[i])\n        '''\n        Create a new list and append the first word to the end of the list.\n        '''\n        for j in range(i):\n            if sorted(word[i]) == sorted(word[j]):\n                permutations_list.append(word[j]+word[i])\n                '''\n                Create a new list and append the first word to the end of the list.\n                '''\n    return permutations_list\n    \ndef caesar_encrypt(message, shift):\n    '''\n    Write a python function to return the caesar encryption of a given message.\n    '''\n    caesar_result = \"\"\n    '''\n    Create a variable to store the result.\n    '''\n    for char in message:\n        '''\n        Find the ASCII value of each character and add the shift to it.\n        '''\n        caesar_result += chr(ord(char)+shift)\n    '''\n    Return the result.\n    '''\n    return caesar_result\n    \ndef caesar_decrypt(message, shift):\n    '''\n    Write a python function to return the caesar decryption of a given message.\n    '''\n    caesar_result = \"\"\n    '''\n    Create a variable to store the result.\n    '''\n    for char in message:\n        '''\n        Find the ASCII value of each character and add the shift to it.\n        '''\n        caesar_result += chr(ord(char)-shift)\n    '''\n    Return the result.\n    '''\n    return caesar_result\n    \ndef playfair_encrypt(message, key, position, cipher_alphabet):\n    '''\n    Write a python function to return the playfair encryption of a given message.\n    '''\n    result = \"\"\n    '''\n    Create a variable to store the result.\n    '''\n    for char in message:\n        '''\n        Find the ASCII value of each character and add the shift to it.\n        '''\n        char_ascii = ord(char)\n        if char_ascii in range(65, 91):\n            shift = ord(key[(position-1)%5])-64\n            result += chr((char_ascii+shift)%26 + 65)\n        elif char_ascii in range(97, 123):\n            shift = ord(key[(position-1)%5])-96\n            result += chr((char_ascii+shift)%26 + 97)\n        else:\n            result += char\n            '''\n            If the character is a space, add a space to the result.\n            '''\n    return result\n    \ndef playfair_decrypt"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef xor(a,b):\n    '''\n    Write a python function to compute the xor value of two integers.\n    '''\n    result = 0\n    for i in range(0,len(a)):\n        result = result ^ (ord(a[i]) ^ ord(b[i]))\n    return result\n    \ndef pad(plaintext,block_size):\n    '''\n    Write a python function to pad a string to a specified block size.\n    '''\n    result = ''\n    padding_length = block_size - len(plaintext) % block_size\n    for i in range(1,padding_length+1):\n        result = result + chr(padding_length)\n    return result\n    \ndef unpad(plaintext,block_size):\n    '''\n    Write a python function to unpad a string to a specified block size.\n    '''\n    last_chr = plaintext[len(plaintext) - 1]\n    for i in range(1,len(plaintext)):\n        if ord(plaintext[len(plaintext) - i])!= ord(last_chr):\n            return plaintext[:len(plaintext)-i+1]\n    return plaintext[:len(plaintext)]\n    \ndef caesar_encode(plaintext,key):\n    '''\n    Write a python function to encode a plaintext using the Caesar Cipher algorithm.\n    '''\n    result = ''\n    for i in range(0,len(plaintext)):\n        char = plaintext[i]\n        if (ord(char) >= 65 and ord(char) <= 90) or (ord(char) >= 97 and ord(char) <= 122):\n            result = result + chr((ord(char) - 65 + key) % 26 + 65)\n        elif (ord(char) >= 48 and ord(char) <= 57):\n            result = result + chr((ord(char) - 48 + key) % 10 + 48)\n        else:\n            result = result + char\n    return result\n    \ndef caesar_decode(ciphertext,key):\n    '''\n    Write a python function to decode a encoded ciphertext using the Caesar Cipher algorithm.\n    '''\n    result = ''\n    for i in range(0,len(ciphertext)):\n        char = ciphertext[i]\n        if (ord(char) >= 65 and ord(char) <= 90) or (ord(char) >= 97 and ord(char) <= 122):\n            result = result + chr((ord(char) - 65 - key) % 26 + 65)\n        elif (ord(char) >= 48 and ord(char) <= 57):\n            result = result + chr((ord(char) - 48 - key) % 10 + 48)\n        else:\n            result = result + char\n    return result\n    \ndef vigenere_encode(plaintext,key):\n    '''\n    Write a python function to encode a plaintext using the Vigenere Cipher algorithm.\n    '''\n    result = ''\n    key_pos = 0\n    for i in range(0,len(plaintext)):\n        char = plaintext[i]\n        if (ord(char) >= 65 and ord(char) <= 90) or (ord(char) >= 97 and ord(char) <= 122):\n            result = result + chr((ord(char) - 65 + ord(key[key_pos]) - 65) % 26 + 65)\n            key_pos = (key_pos + 1) % len(key)\n        elif (ord(char) >= 48 and ord(char) <= 57):\n            result = result + chr((ord(char) - 48 + ord(key[key_pos]) - 48) % 10 + 48)\n            key_pos = (key_pos + 1) % len(key)\n        else:\n            result = result + char\n    return result\n    \ndef vigenere_decode(ciphertext,key):\n    '''\n    Write a python function to decode a encoded ciphertext using the Vigenere Cipher algorithm.\n    '''\n    result = ''\n    key_pos = 0\n    for i in range(0,len(ciphertext)):\n        char = ciphertext[i]\n        if (ord(char) >= 65 and ord(char) <= 90) or (ord(char) >= 97 and ord(char) <= 122):\n            result = result + chr((ord(char) - 65 - ord(key[key_pos]) + 65) % 26 + 65)\n            key_pos = (key_pos + 1) % len(key)\n        elif (ord(char) >= 48 and ord(char) <= 57):\n            result = result + chr((ord(char) - 48 - ord(key[key_pos]) + 48) % 10 + 48)\n            key_pos = (key_pos + 1) % len(key)\n        else:\n            result = result + char\n    return result\n    \ndef gcd(a,b):\n    '''\n    Write a python function to compute the greatest common divisor of two integers.\n    '''\n    if (a == 0):\n        return b\n    return gcd(b % a, a)\n    \ndef findModInverse(a,m):\n    '''\n    Write a python function to compute the modular inverse of two integers.\n    '''\n    for x in range(1,m):\n        if (a * x) % m == 1:\n            return x\n    return -1\n    \ndef multiplicative_inverse(a,m):\n    '''\n    Write a python function to compute the multiplicative inverse of two integers.\n    '''\n    for x in range(1,m):\n        if (a * x) % m == 1:\n            return x\n    return -1\n    \ndef miller_rabin(n, k):\n    '''\n    Write a python function to test if a positive integer n is prime using the Miller-Rabin primality test.\n    '''\n    if (n < 2):\n        return False\n    if (n == 2):\n        return True\n    if (n % 2 == 0):\n        return False\n    r, s = 0, n - 1\n    while (s % 2 == 0):\n        r += 1\n        s //= 2\n    for _ in range(k):\n        a = randrange(2, n - 1)\n        x = pow(a, s, n)\n        if (x == 1 or x == n - 1):\n            continue\n        for _ in range(r - 1):\n            x = pow(x, 2, n)\n            if (x == n - 1):\n                break\n        else:\n            return False\n    return True\n    \ndef main():\n    # test case 1\n    print(\"\\nTest case 1:\")\n    a = 'Hello, World!'\n    b = 'Hello,World!'\n    c = 'Who is doing this?'\n    d = 'Helloworld'\n    e = 'He is going to kill him?'\n    f = 'A man, a planter, a canal: Panama'\n    g = 'A man, a planter, a canal: Panama'\n    h = 'Pineapple'\n    i = 'This is a test'\n    j = 'Do you want to go to the movies?'\n    k = 'Go to the movies?'\n    l = 'I go to the movies'\n    m = 'I like to go to the movies'\n    n = 'I like to go to the movies'\n    o = 'I like to go to the movies'\n    p = 'I like to go to the movies'\n    q = 'I like to go to the movies'\n    r = 'I like to go to the movies'\n    s = 'I like to go to the movies'\n    t = 'I like to go to the movies'\n    u = 'I like to go to the movies'\n    v = 'I like to go to the movies'\n    w = 'I like to go to the movies'\n    x = 'I like to go to the movies'\n    y = 'I like to go to the movies'\n    z = 'I like to go to the movies'\n    print(caesar_encode(a,3))\n    print(caesar_decode(c,3))\n    print(vigenere_encode(i,y))\n    print(vigenere_decode(o,y))\n    print(miller_rabin(97,2))\n    print(multiplicative_inverse(7,27))\n    print"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(d) for d in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n/10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return sum_digits(n / 10) + n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    res = 0\n    while n:\n        res += n % 10\n        n //= 10\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == list1[::-1]:\n        return True\n    else:\n        return False\ndef isprime(n):\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i<=n**(1/2):\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef isanagram(a,b):\n    '''\n    Write a function to check whether two strings are anagram or not\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\ndef check_permutation(str1, str2):\n    '''\n    Write a function to check whether two strings are permutation or not\n    '''\n    if len(str1)!=len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    else:\n        return False\ndef same_array_elements(list1,list2):\n    '''\n    Write a function to check whether two lists have the same number of elements or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list without changing the order of the remaining elements.\n    '''\n    list1 = sorted(list1)\n    i = 1\n    for j in range(1,len(list1)):\n        if list1[i-1]!=list1[j]:\n            list1[i] = list1[j]\n            i+=1\n    del list1[i:]\n    return list1\ndef string_to_integer(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    if len(string)==0:\n        return 0\n    numbers = \"0123456789\"\n    total = 0\n    for i in range(len(string)):\n        total += int(string[i])*(10**(len(string)-i-1))\n    return total\ndef count_number_of_a(string):\n    '''\n    Write a function to count the number of a character in a string.\n    '''\n    total = 0\n    for i in range(len(string)):\n        if string[i]==\"a\":\n            total += 1\n    return total\ndef capitalize(string):\n    '''\n    Write a function to capitalize the first letter of a string.\n    '''\n    if string[0] == string[0].upper():\n        return string\n    else:\n        return string[0].upper()+string[1:]\ndef sort_list(list1):\n    '''\n    Write a function to sort a list of strings.\n    '''\n    list1.sort()\n    return list1\ndef is_prime_number(n):\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i<=n**(1/2):\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef get_strongest_numbers(list1,n):\n    '''\n    Write a function to get the n strongest numbers from a list of numbers.\n    '''\n    list1 = sorted(list1,reverse=True)\n    return list1[:n]\ndef sort_list_desc(list1):\n    '''\n    Write a function to sort a list of strings in reverse order.\n    '''\n    list1.sort(reverse=True)\n    return list1\ndef sum_digits(n):\n    '''\n    Write a function to return the sum of digits of a number.\n    '''\n    total = 0\n    while n:\n        total += n%10\n        n /= 10\n    return total\ndef are_anagrams(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    else:\n        return False\ndef find_duplicates(list1):\n    '''\n    Write a function to find the duplicates in a list of numbers.\n    '''\n    list1 = sorted(list1)\n    i = 0\n    while i < len(list1)-1:\n        if list1[i] == list1[i+1]:\n            return list1[i]\n        i+=1\n    return -1\ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a%b)\ndef char_histogram(string):\n    '''\n    Write a function to return the char histogram of a string.\n    '''\n    histogram = {}\n    for i in range(len(string)):\n        if string[i] in histogram:\n            histogram[string[i]] += 1\n        else:\n            histogram[string[i]] = 1\n    return histogram\ndef check_if_palindrome(list1):\n    '''\n    Write a function to check whether a list is a palindrome or not.\n    '''\n    list1 = list1[:]\n    list1.reverse()\n    if list1 == list1[::-1]:\n        return True\n    else:\n        return False\ndef find_first_duplicate(list1):\n    '''\n    Write a function to find the first duplicate element in a list.\n    '''\n    list1 = sorted(list1)\n    for i in range(len(list1)-1):\n        if list1[i] == list1[i+1]:\n            return list1[i]\n    return -1\ndef remove_every_other(list1):\n    '''\n    Write a function to remove every other element from a list.\n    '''\n    return list1[::2]\ndef add_every_other(list1):\n    '''\n    Write a function to add every other element from a list.\n    '''\n    return list1[1::2]\ndef char_histogram(string):\n    '''\n    Write a function to return the char histogram of a string.\n    '''\n    histogram = {}\n    for i in range(len(string)):\n        if string[i] in histogram:\n            histogram[string[i]] += 1\n        else:\n            histogram[string[i]] = 1\n    return histogram\ndef sum_digits(n):\n    '''\n    Write a function to return the sum of digits of a number.\n    '''\n    total = 0\n    while n:\n        total += n%10\n        n /= 10\n    return total\ndef count_a(string):\n    '''\n    Write a function to count the number of a characters in a string.\n    '''\n    total = 0\n    for i in range(len(string)):\n        if string[i]==\"a\":\n            total += 1\n    return total\ndef find_second_largest(list1):\n    '''\n    Write a function to find the second largest element in a list.\n    '''\n    list1 = sorted(list1,reverse=True)\n    return list1[1]\ndef get_most_frequent_ele(list1):\n    '''\n    Write a function to return the most frequently occurring element in a list.\n    '''\n    histogram = {}\n    for i in range(len(list1)):\n        if list1[i] in histogram:\n            histogram[list1[i]] += 1\n        else:\n            histogram[list1[i]] = 1\n    max_freq = max(histogra"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif len(list1) == 2:\n        return list1[0] <= list1[1]\n    else:\n        return list1[0] <= list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0 or len(list1)==1:\n        return True\n    else:\n        return list1[0]<=list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1]>list1[i]:\n            return False\n    return True\ndef bin_search(my_list,target):\n    '''\n    Write a function to search a list for an integer using the bin search algorithm.\n    '''\n    first = 0\n    last = len(my_list)-1\n    while first<=last:\n        mid = (first + last)//2\n        if my_list[mid]==target:\n            return mid\n        elif target<my_list[mid]:\n            last = mid - 1\n        elif target>my_list[mid]:\n            first = mid + 1\n        else:\n            return False\n    return False\ndef count_list(my_list):\n    '''\n    Write a function to count the number of elements in a list.\n    '''\n    count = 0\n    for i in my_list:\n        count+=1\n    return count\ndef max_list(my_list):\n    '''\n    Write a function that returns the maximum element in a list.\n    '''\n    if not my_list:\n        return False\n    if len(my_list)==1:\n        return my_list[0]\n    max_num = my_list[0]\n    for i in my_list:\n        if i>max_num:\n            max_num = i\n    return max_num\ndef min_list(my_list):\n    '''\n    Write a function that returns the minimum element in a list.\n    '''\n    if not my_list:\n        return False\n    if len(my_list)==1:\n        return my_list[0]\n    min_num = my_list[0]\n    for i in my_list:\n        if i<min_num:\n            min_num = i\n    return min_num\ndef list_sum(list1,list2):\n    '''\n    Write a function that sums two lists.\n    '''\n    result = []\n    for i in list1:\n        result.append(i)\n    for i in list2:\n        result.append(i)\n    return result\ndef max_dict(my_dict):\n    '''\n    Write a function that returns the key in a dict with the highest value.\n    '''\n    if not my_dict:\n        return False\n    if len(my_dict)==1:\n        return list(my_dict)[0]\n    max_num = my_dict[list(my_dict)[0]]\n    max_key = list(my_dict)[0]\n    for i in my_dict:\n        if my_dict[i]>max_num:\n            max_num = my_dict[i]\n            max_key = i\n    return max_key\ndef max_list_dict(my_dict):\n    '''\n    Write a function that returns the key with the highest value in a dictionary of lists.\n    '''\n    if not my_dict:\n        return False\n    max_num = my_dict[list(my_dict)[0]][0]\n    max_key = list(my_dict)[0]\n    for i in my_dict:\n        if my_dict[i][0]>max_num:\n            max_num = my_dict[i][0]\n            max_key = i\n    return max_key\ndef word_count(my_string):\n    '''\n    Write a function that takes a string and returns a dictionary\n    of all letters in the string as keys and the number of times\n    that letter appears in the string as values.\n    '''\n    if not my_string:\n        return False\n    letter_dict = {}\n    for i in my_string:\n        if i not in letter_dict:\n            letter_dict[i] = 1\n        else:\n            letter_dict[i] += 1\n    return letter_dict\ndef sum_dict(my_dict):\n    '''\n    Write a function that takes a dictionary of numbers as input\n    and returns the sum of the numbers in the dictionary.\n    '''\n    if not my_dict:\n        return False\n    total = 0\n    for i in my_dict:\n        total+=my_dict[i]\n    return total\ndef list_dict(my_dict):\n    '''\n    Write a function that takes a dictionary of lists as input\n    and returns the sum of the values in the lists.\n    '''\n    if not my_dict:\n        return False\n    total = 0\n    for i in my_dict:\n        total+=sum(my_dict[i])\n    return total\ndef reverse_dict(my_dict):\n    '''\n    Write a function that takes a dictionary of lists as input\n    and returns the reverse of the values in the lists.\n    '''\n    if not my_dict:\n        return False\n    new_dict = {}\n    for i in my_dict:\n        new_dict[i] = list(reversed(my_dict[i]))\n    return new_dict\ndef list_dict_sum(my_dict):\n    '''\n    Write a function that takes a dictionary of lists as input\n    and returns the sum of the values in the lists.\n    '''\n    if not my_dict:\n        return False\n    total = 0\n    for i in my_dict:\n        total+=sum(my_dict[i])\n    return total\ndef check_palindrome(my_string):\n    '''\n    Write a function that takes a string and checks if it is a palindrome.\n    '''\n    if my_string==my_string[::-1]:\n        return True\n    else:\n        return False\ndef list_product(list1,list2):\n    '''\n    Write a function that takes two lists as input and returns\n    the result of multiplying the elements of the first list\n    with the elements of the second list.\n    '''\n    if not list1 or not list2:\n        return False\n    result = []\n    for i in list1:\n        for j in list2:\n            result.append(i*j)\n    return result\ndef merge_dict(dict1,dict2):\n    '''\n    Write a function that takes two dictionaries as input and returns\n    a new dictionary with the values of the first dictionary merged with\n    the values of the second dictionary.\n    '''\n    if not dict1 or not dict2:\n        return False\n    result = {}\n    for i in dict1:\n        if i in dict2:\n            result[i] = dict1[i]+dict2[i]\n        else:\n            result[i] = dict1[i]\n    for i in dict2:\n        if i not in dict1:\n            result[i] = dict2[i]\n    return result\ndef get_char(my_string):\n    '''\n    Write a function that takes a string and returns a dictionary\n    of the characters in the string and the number of times\n    that character appears in the string.\n    '''\n    if not my_string:\n        return False\n    letter_dict = {}\n    for i in my_string:\n        if i not in letter_dict:\n            letter_dict[i] = 1\n        else:\n            letter_dict[i] += 1\n    return letter_dict\ndef get_char_list(my_string):\n    '''\n    Write a function that takes a string and returns a list\n    of the characters in the string.\n    '''\n    if not my_string:\n        return False\n    letter_list = []\n    for i in my_string:\n        letter_list.append(i)\n    return letter_list\ndef get_char_list_dict(my_string):\n    '''\n    Write a function that takes a string and returns a dictionary\n    of the characters in the string as keys and the number of times\n    that character appears in the string as values.\n    '''\n    if not my_string:\n        return False\n    letter_dict = {}\n    for i in my_string:\n        if i not in letter_dict:\n            letter_dict[i] = 1\n        else:\n            letter_dict[i] += 1\n    return letter_dict\ndef get_char_list_set(my_string):\n    '''\n    Write a function that takes a string and returns a set\n    of the characters in the string.\n    '''\n    if not my_string:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list_len = len(list1)\n    if list_len < 2:\n        return True\n    else:\n        for i in range(list_len-1):\n            if list1[i] > list1[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    d = []\n    for i in range(length):\n        d.append({})\n    return d\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = [{} for i in range(length)]\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Your code here\n    empty = []\n    for i in range(length):\n        empty.append({})\n    return empty\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = [{} for i in range(length)]\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dic_list = []\n    for i in range(length):\n        dic_list.append({})\n    return dic_list\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(l) for l in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    a = []\n    for sublist in list1:\n        a.append(sorted(sublist))\n    return a\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1_sorted = sorted(list1, key = len)\n    return list1_sorted\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(sorted(i))\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort(key=len)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Note: This solution is not necessarily efficient because of O(n^2)\n    return [sorted(sub) for sub in list1]\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if list1:\n        l = len(list1)\n        if l == 1:\n            return list1\n        if l == 2:\n            if list1[0] > list1[1]:\n                list1[0], list1[1] = list1[1], list1[0]\n            return list1\n        else:\n            pivot = list1[0][0]\n            i = 0\n            j = 0\n            while j < l:\n                if list1[j][0] < pivot:\n                    list1[i], list1[j] = list1[j], list1[i]\n                    i += 1\n                j += 1\n            list1[i], list1[0] = list1[0], list1[i]\n            l1 = sort_sublists(list1[:i])\n            l2 = sort_sublists(list1[i+1:])\n            return l1 + [list1[i]] + l2\n    else:\n        return []\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0,len(list1)):\n        list1[i].sort()\n    return list1\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1,key = lambda x: sorted(x))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for n in nums:\n        if len(n) > 1:\n            result = list(set(n))\n            for i in result:\n                if i not in n:\n                    n.remove(i)\n    return n\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for n in nums:\n        if n not in unique:\n            unique.append(n)\n    return unique\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    print unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # first, convert the given list to a set\n    nums_set = set(nums)\n    # now, convert the set back to a list\n    # this will have the unique numbers\n    nums_list = list(nums_set)\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = set(nums)\n    print(nums)\n    \ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4], [1, 2, 3, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4], [1, 2, 3, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]])\ntwo_unique_nums([[1, 2, 3, 1"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # dict_ = {}\n    # for num in nums:\n    #     if num not in dict_:\n    #         dict_[num] = 1\n    #     else:\n    #         dict_[num] += 1\n    # return list(dict_.keys())\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_dict = {}\n    result = []\n    for num in nums:\n        if num not in nums_dict:\n            nums_dict[num] = True\n            result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    return unique_nums\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in set(list_data):\n        result = result * i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for x in list_data:\n        if x not in list_data:\n            product *= x\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x * y, set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for item in list_data:\n        if item in result:\n            pass\n        else:\n            result *= item\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return functools.reduce(operator.mul, [int(num) for num in list_data if list_data.count(num) == 1])\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # initialize an empty list\n    product_list = []\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list_data = [10, 20, 40, 20, 50, 30, 70]\n    # unique_product = list(set(list_data))\n    # print(unique_product)\n    # print(len(unique_product))\n    # print(sum(unique_product))\n    # print(sum(list_data)/len(list_data))\n    # print(unique_product * sum(list_data) / len(list_data))\n    print(\"\\n\")\n    for i in list_data:\n        if list_data.count(i) == 1:\n            print(i)\n    print(\"\\n\")\n    return len(list_data) - len(set(list_data))\n    \ndef unique_product2(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list_data = [10, 20, 40, 20, 50, 30, 70]\n    # unique_product = list(set(list_data))\n    # print(unique_product)\n    # print(len(unique_product))\n    # print(sum(unique_product))\n    # print(sum(list_data)/len(list_data))\n    # print(unique_product * sum(list_data) / len(list_data))\n    print(\"\\n\")\n    for i in list_data:\n        if list_data.count(i) == 1:\n            print(i)\n    print(\"\\n\")\n    return sum(list_data)\n    \ndef swap_case(data):\n    '''\n    Write a python function to swap the case of each character in a given string.\n    '''\n    # data = \"Hello world\"\n    # new_data = data.swapcase()\n    # print(new_data)\n    print(\"\\n\")\n    for i in data:\n        if i.isupper():\n            print(i.lower(), end = '')\n        elif i.islower():\n            print(i.upper(), end = '')\n        else:\n            print(i, end = '')\n    print(\"\\n\")\n    \ndef string_split(data):\n    '''\n    Write a python function to split a given string in a list of strings, where the first character of each word is the same.\n    '''\n    # data = \"Geeksforgeeks\"\n    # new_data = data.split()\n    # print(new_data)\n    print(\"\\n\")\n    for i in data:\n        if data[0] == i:\n            print(i)\n            data = data.replace(i, '')\n    print(\"\\n\")\n    \ndef string_split2(data):\n    '''\n    Write a python function to split a given string in a list of strings, where the first character of each word is the same.\n    '''\n    # data = \"Geeksforgeeks\"\n    # new_data = data.split()\n    # print(new_data)\n    print(\"\\n\")\n    for i in data:\n        if data[0] == i:\n            print(i)\n            data = data.replace(i, '')\n    print(\"\\n\")\n    \ndef string_split3(data):\n    '''\n    Write a python function to split a given string in a list of strings, where the first character of each word is the same.\n    '''\n    # data = \"Geeksforgeeks\"\n    # new_data = data.split()\n    # print(new_data)\n    print(\"\\n\")\n    for i in data:\n        if data[0] == i:\n            print(i)\n            data = data.replace(i, '')\n    print(\"\\n\")\n    \ndef remove_vowels(data):\n    '''\n    Write a python function to remove vowels from a given string.\n    '''\n    # data = \"helloworld\"\n    # new_data = data.replace('a', '')\n    # new_data = new_data.replace('e', '')\n    # new_data = new_data.replace('i', '')\n    # new_data = new_data.replace('o', '')\n    # new_data = new_data.replace('u', '')\n    # print(new_data)\n    print(\"\\n\")\n    for i in data:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            data = data.replace(i, '')\n    print(data)\n    \ndef remove_vowels2(data):\n    '''\n    Write a python function to remove vowels from a given string.\n    '''\n    # data = \"helloworld\"\n    # new_data = data.replace('a', '')\n    # new_data = new_data.replace('e', '')\n    # new_data = new_data.replace('i', '')\n    # new_data = new_data.replace('o', '')\n    # new_data = new_data.replace('u', '')\n    # print(new_data)\n    print(\"\\n\")\n    for i in data:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            data = data.replace(i, '')\n    print(data)\n    \ndef remove_vowels3(data):\n    '''\n    Write a python function to remove vowels from a given string.\n    '''\n    # data = \"helloworld\"\n    # new_data = data.replace('a', '')\n    # new_data = new_data.replace('e', '')\n    # new_data = new_data.replace('i', '')\n    # new_data = new_data.replace('o', '')\n    # new_data = new_data.replace('u', '')\n    # print(new_data)\n    print(\"\\n\")\n    for i in data:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            data = data.replace(i, '')\n    print(data)\n    \ndef palindrome(data):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    # data = \"radar\"\n    # new_data = data[::-1]\n    # if data == new_data:\n    #     print(\"It is a palindrome\")\n    # else:\n    #     print(\"It is not a palindrome\")\n    print(\"\\n\")\n    if data == data[::-1]:\n        print(\"It is a palindrome\")\n    else:\n        print(\"It is not a palindrome\")\n    print(\"\\n\")\n    \ndef palindrome2(data):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    # data = \"radar\"\n    # new_data = data[::-1]\n    # if data == new_data:\n    #     print(\"It is a palindrome\")\n    # else:\n    #     print(\"It is not a palindrome\")\n    print(\"\\n\")\n    return data == data[::-1]\n    \ndef palindrome3(data):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    # data = \"radar\"\n    # new_data = data[::-1]\n    # if data == new_data:\n    #     print(\"It is a palindrome\")\n    # else:\n    #     print(\"It is not a palindrome\")\n    print(\"\\n\")\n    return data == data[::-1]\n    \ndef palindrome4(data):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    # data = \"radar\"\n    # new_data = data[::-1]\n    # if data == new_data:\n    #     print(\"It is a palindrome\")\n    # else:\n    #     print(\"It is not a palindrome\")\n    print(\"\\n\")\n    return data == data"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(set(list_data))\n    product = 1\n    for i in list_data:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        if i not in list_data:\n            product = product * i\n    print(product)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x*y, sorted(set(list_data)))\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r <= 0 or h <= 0:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        return None\n    return (2*3.14*r)*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2*pi*r*(r+h)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #S0 = pi*(r**2 + r*h + h**2)\n    S0 = math.pi * (r**2 + r*h + h**2)\n    print('S0= ', S0)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n    \n    # area = 2*pi*r*(r+h)\n    \n    # return area\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if type(r)==type(0.0) and type(h)==type(0.0):\n        return pi*(r**2)+(2*h*r)\n    else:\n        print \"ERROR! Only numbers allowed for radius and height.\"\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    area = 2*pi*r*(r+h)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=pi*r**2+2*pi*r*h\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    volume = math.pi*(r**2)*h\n    sa = 2*(math.pi*r*h + math.pi*(r**2)*math.sin(math.pi*h/2))\n    return volume, sa\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if not isinstance(r,(int,float)):\n        raise TypeError(\"r must be a number\")\n    elif not isinstance(h,(int,float)):\n        raise TypeError(\"h must be a number\")\n    else:\n        return (2*pi*r*h)+2*pi*r**2\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    for i in range(len(B)):\n        if B[i] == A[i]:\n            flag = True\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    while i < len(A):\n        if A[i] == B[i]:\n            i = i + 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(B) == 0:\n        return True\n    else:\n        if A[0] == B[0]:\n            return is_Sub_Array(A[1:],B[1:])\n        else:\n            return is_Sub_Array(A,B[1:])\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    if len(A) == len(B):\n        for i in range(len(A)):\n            if A[i] == B[i]:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #A is a list and B is a list\n    #B is a sublist of A\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(0,len(A)):\n            if A[i] == B[i]:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B: \n        return True\n    if not A: \n        return False\n    if len(A) > len(B): \n        return False\n    for i in range(len(B)): \n        if B[i] == A[i]: \n            pass\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] in A:\n            A = A[A.index(B[i])+1:]\n        else:\n            return False\n    return True\ndef find_Longest_Sub_Array(A,B):\n    '''\n    Write a python function to find the longest common subarray in two arrays.\n    '''\n    if len(A) < len(B):\n        return len(B)\n    i = len(A)\n    flag = False\n    while i < len(B):\n        if is_Sub_Array(A,B[i-len(A)+1:i+1]) == True:\n            flag = True\n            break\n        i += 1\n    if flag == False:\n        return len(A)\n    else:\n        i = 0\n        while i < len(A):\n            if is_Sub_Array(A[i:],B[i:]) == True:\n                i += 1\n                continue\n            else:\n                return i\n        return len(A)\ndef generate_subarray(A,k):\n    '''\n    Write a python function to generate all the subarrays of an array.\n    '''\n    if k == 1:\n        return A\n    elif k == 2:\n        return [[A[i],A[i+1]] for i in range(len(A)-1)]\n    elif k > 2:\n        return [[A[i],A[i+1]] for i in range(len(A)-k+1)]\ndef is_slide(A,B):\n    '''\n    Write a python function to check whether two strings are an anagram or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    A = A.lower()\n    B = B.lower()\n    l = min(len(A),len(B))\n    while l > 0:\n        if A[l-1]!= B[l-1]:\n            return False\n        l -= 1\n    return True\ndef rotate_array(A,k):\n    '''\n    Write a python function to rotate an array by k places.\n    '''\n    if k == 0:\n        return A\n    elif k > 0:\n        return A[k:] + A[:k]\n    elif k < 0:\n        return A[abs(k):] + A[:abs(k)]\ndef max_product_subarray(A):\n    '''\n    Write a python function to find the contiguous subarray with maximum product.\n    '''\n    if len(A) == 0:\n        return 0\n    else:\n        i = 0\n        result = A[i]\n        max_result = A[i]\n        min_result = A[i]\n        while i < len(A)-1:\n            if A[i] * A[i+1] > 0:\n                result = max(result, A[i] * A[i+1])\n                max_result = max(max_result, result)\n                min_result = min(min_result, result)\n            elif A[i] * A[i+1] < 0:\n                result = min(result, A[i] * A[i+1])\n                max_result = max(max_result, result)\n                min_result = min(min_result, result)\n            i += 1\n        return max_result\ndef check_permutation(A,B):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    A = A.lower()\n    B = B.lower()\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            if A[i] in B and A[B.index(A[i])]!= A[i]:\n                return False\n            if B[i] in A and B[A.index(B[i])]!= B[i]:\n                return False\n    return True\ndef longest_palindrome(A):\n    '''\n    Write a python function to find the longest palindromic substring in a given string.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return 1\n    else:\n        l = 1\n        i = 0\n        while i < len(A):\n            if A[i] == A[len(A)-1-i]:\n                i += 1\n                l += 1\n            else:\n                break\n        i = 0\n        while i < len(A):\n            if A[i] == A[len(A)-1-i]:\n                l += 1\n                i += 1\n            else:\n                break\n        return l\ndef number_of_words_in_a_sentence(A):\n    '''\n    Write a python function to find the number of words in a sentence.\n    '''\n    if len(A) == 0:\n        return 0\n    else:\n        if len(A) == 1:\n            if A[0] =='':\n                return 1\n            else:\n                return 1\n        else:\n            if A[0] =='':\n                return 1 + number_of_words_in_a_sentence(A[1:])\n            else:\n                return 1 + number_of_words_in_a_sentence(A[1:])\ndef remove_duplicates_from_an_array(A):\n    '''\n    Write a python function to remove duplicates from an array.\n    '''\n    if len(A) == 0:\n        return A\n    else:\n        if len(A) == 1:\n            return A\n        else:\n            if A[0]!= A[1]:\n                return [A[0]] + remove_duplicates_from_an_array(A[1:])\n            else:\n                return remove_duplicates_from_an_array(A[1:])\ndef is_palindrome(A):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(A) == 0:\n        return True\n    elif len(A) == 1:\n        return True\n    else:\n        if A[0] == A[len(A)-1]:\n            return is_palindrome(A[1:len(A)-1])\n        else:\n            return False\ndef longest_increasing_subsequence(A):\n    '''\n    Write a python function to find the length of the longest increasing subsequence in an array.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return 1\n    else:\n        l = 1\n        i = 1\n        while i < len(A):\n            if A[i] > A[i-1]:\n                l += 1\n            else:\n                l = 1\n            i += 1\n        return l\ndef is_rotation(A,B):\n    '''\n    Write a python function to check whether two strings are rotation of each other or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    else:\n        return A in B + B\ndef count_rotations(A):\n    '''\n    Write a python function to find the count of rotations in a string.\n    '''\n    if len(A) == 1:\n        return 0\n    elif len(A) == 2:\n        if A[0]!= A[1]:\n            return 1\n        else:\n            return 0\n    else:\n        if A[0]!= A[1]:\n            return 1 + count_rotations(A[1:] + A[:1])\n        else:\n            return 1 + count_rotations(A[1:] + A[:1])\ndef find_largest_prime_factor(A):\n    '''\n    Write a python function to find the largest prime factor of an integer.\n    '''\n    if len(A) == 0:\n        return 0\n    else:\n        if A % 2 == 0:\n            return 2\n        else:\n            return find_largest_prime_factor(A//2)\ndef is_anagram(A,B):\n    ''"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(A)\n    m=len(B)\n    if m==0:\n        return False\n    if n<m:\n        return False\n    if A[0]==B[0]:\n        if m==1:\n            return True\n        if m>1:\n            return is_Sub_Array(A[1:],B[1:])\n    else:\n        return is_Sub_Array(A[1:],B)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        return is_Sub_Array_Recursive(A,B,0,0)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == []:\n        return True\n    for i in xrange(len(A)):\n        if A[i] == B[0]:\n            if is_Sub_Array(A[i+1:],B[1:]):\n                return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial=1\n    for i in range(1,n+1):\n        factorial*=i\n    return factorial%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    temp=1\n    while(n>=temp):\n        temp*=n\n        n-=1\n    return temp/n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 5\n    n1 = 1\n    while i <= n: \n        n1 = n1 * i \n        i = i + 1\n    n2 = n1 % 10\n    return n2\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n)\n    while n > 1: \n        n = n*10\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return 0\n    n_range = range(n)\n    n_range.reverse()\n    count = 1\n    for i in n_range:\n        count *= i+1\n    return count/n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n <= 1:\n            return 1\n        return n*factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return last_Digit_Factorial(n - 1) * 10\n    \nprint last_Digit_Factorial(5)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print \"Factorial does not exist for negative numbers\"\n    elif n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n/10) * (n%10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n % 10 \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 12\n    elif n == 7:\n        return 14\n    elif n == 8:\n        return 16\n    elif n == 9:\n        return 18\n    else:\n        print(\"Sorry, input number must be less than 10\")\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert len(list1) == len(list2) == len(list3)\n    return [x for x in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Solution 1\n    # return [x for x in zip(list1, list2, list3)]\n    # Solution 2\n    # return [x for x in zip(list1, list2, list3)] + list1\n    # Solution 3\n    return [x for x in zip(list1, list2, list3)] + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for t in zip(list1,list2,list3) for i in t]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"lists must be the same length\")\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1,list2,list3 = [],[],[]\n    for item in list1:\n        list1.append(item)\n    for item in list2:\n        list2.append(item)\n    for item in list3:\n        list3.append(item)\n    print(list1+list2+list3)\n    return\ninterleave_lists([1,2,3],[4,5,6],[7,8,9]"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Please don't modify the following lines\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output_list = []\n    for i in range(len(list1)):\n        output_list.append(list1[i])\n        output_list.append(list2[i])\n        output_list.append(list3[i])\n    return output_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2)!= len(list3):\n        return \"lists are not the same length\"\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [a+b+c for a,b,c in zip(list1,list2,list3)]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = 0\n    if len(test_tup1)!= len(test_tup2):\n        print \"Two tuples must have same length.\"\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                dissimilar += 1\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_tuples = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                dissim_tuples.append(elem1)\n    return dissim_tuples\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = dict(test_tup1)\n    test_tup2 = dict(test_tup2)\n    dissimilar = 0\n    for key in test_tup1:\n        if not key in test_tup2:\n            dissimilar += 1\n        elif not test_tup1[key] == test_tup2[key]:\n            dissimilar += 1\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    res = list(set1 ^ set2)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #Ignore this line\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = list(set(test_tup1) & set(test_tup2))\n    print common_elements\n    result = set(test_tup1).difference(test_tup2)\n    print result\n    # print len(result)\n    # for item in result:\n    #     print item\n    # print '=======================', len(set(test_tup1) & set(test_tup2))\n    # print len(set(test_tup1) - set(test_tup2))\n    # print len(set(test_tup2) - set(test_tup1))\n    # print len(set(test_tup1) | set(test_tup2))\n    # print len(set(test_tup1) ^ set(test_tup2))\n    # print len(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple([x for x in test_tup1 if x not in test_tup2])\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elem_list = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                dissimilar_elem_list.append(elem1)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return (test_tup1[i],test_tup2[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if j!= i:\n                if j not in dissimilar:\n                    dissimilar.append(j)\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    final = []\n    for x in test_tuple:\n        if even_fnc(x):\n            final.append(x)\n    return tuple(final)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if even_fnc:\n        return [x for x in test_tuple if not x % 2]\n    else:\n        return [x for x in test_tuple if x % 2]\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # test_tuple = (1,2,[3,4,[7,8,9]],6,7,8,[],9)\n    # even_fnc = lambda x: x % 2 == 0\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_ele(i, even_fnc)\n        else:\n            if i % 2 == 0:\n                even_fnc(i)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for tup in test_tuple: \n        if not even_fnc(tup): \n            return tuple(drop(tup, lambda x: x % 2))\n        elif isinstance(tup, tuple): \n            return even_ele(tup, even_fnc)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    #for i in range(0, len(test_tuple)):\n    #    if even_fnc(test_tuple[i]):\n    #        odd_list.append(test_tuple[i])\n    #        #print(test_tuple[i])\n    #    else:\n    #        even_list.append(test_tuple[i])\n    #        #print(test_tuple[i])\n    #        #print(len(test_tuple[i]))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) is tuple:\n        return tuple([ even_ele(t, even_fnc) for t in test_tuple ])\n    else:\n        return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for x in test_tuple:\n        if type(x) == tuple:\n            new_list.extend(even_ele(x, even_fnc))\n        else:\n            if even_fnc(x):\n                new_list.append(x)\n    return tuple(new_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if even_fnc == 'all':\n        return tuple(filter(lambda x: x%2 == 0, test_tuple))\n    elif even_fnc == 'first':\n        return tuple(filter(lambda x: x%2 == 0, test_tuple[0]))\n    elif even_fnc == 'last':\n        return tuple(filter(lambda x: x%2 == 0, test_tuple[-1]))\n    else:\n        return None\n        \n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b*s\n    return s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b*s\n    return s*4\n    "
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b*b)+(b*b))\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*2 + b*s\n    \ndef l_surface_Area(l,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given length and height.\n    '''\n    return l*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*4\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2 + b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s<=0 or b<=0:\n        return None\n    return (b*b+b*s+b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * b + s * s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"empty\")\n    else:\n        print(\"not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        print('key =', key)\n        print('value =', dict1[key])\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter should be a dict')\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef dict_sort(dict1):\n    '''\n    Write a function to sort a dictionary by value\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter should be a dict')\n    return sorted(dict1.values())\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\ndef my_dict_check(dict1, dict2):\n    '''\n    Write a function to check if a dictionary is empty and\n    add all keys and values to a new dictionary\n    '''\n    if my_dict(dict1):\n        for i, j in dict1.iteritems():\n            dict2[i] = j\n        return dict2\n    else:\n        return False\ndef my_dict_add_value(dict1, dict2):\n    '''\n    Write a function to add all values of a dictionary to a new dictionary\n    '''\n    if my_dict(dict1):\n        for i, j in dict1.iteritems():\n            dict2[i] = dict2.get(i, 0) + j\n        return dict2\n    else:\n        return False\ndef my_dict_sum(dict1):\n    '''\n    Write a function to sum all values of a dictionary\n    '''\n    if my_dict(dict1):\n        dict2 = {}\n        for i, j in dict1.iteritems():\n            dict2[i] = dict2.get(i, 0) + j\n        return sum(dict2.values())\n    else:\n        return False\ndef my_dict_clear(dict1):\n    '''\n    Write a function to remove all values from a dictionary\n    '''\n    if my_dict(dict1):\n        dict2 = {}\n        for i, j in dict1.iteritems():\n            dict2[i] = j\n        return dict2.clear()\n    else:\n        return False\ndef my_dict_copy(dict1):\n    '''\n    Write a function to copy a dictionary\n    '''\n    if my_dict(dict1):\n        return dict1.copy()\n    else:\n        return False\ndef my_dict_keys(dict1):\n    '''\n    Write a function to return all keys of a dictionary\n    '''\n    if my_dict(dict1):\n        return dict1.keys()\n    else:\n        return False\ndef my_dict_values(dict1):\n    '''\n    Write a function to return all values of a dictionary\n    '''\n    if my_dict(dict1):\n        return dict1.values()\n    else:\n        return False\ndef my_dict_items(dict1):\n    '''\n    Write a function to return all items of a dictionary\n    '''\n    if my_dict(dict1):\n        return dict1.items()\n    else:\n        return False\ndef my_dict_update(dict1, dict2):\n    '''\n    Write a function to update a dictionary\n    '''\n    if my_dict(dict1):\n        if my_dict(dict2):\n            dict1.update(dict2)\n            return dict1\n        else:\n            return False\n    else:\n        return False\ndef my_dict_update(dict1, dict2):\n    '''\n    Write a function to update a dictionary\n    '''\n    if my_dict(dict1):\n        if my_dict(dict2):\n            dict1.update(dict2)\n            return dict1\n        else:\n            return False\n    else:\n        return False\ndef my_dict_get(dict1, key):\n    '''\n    Write a function to return a value of a dictionary given a key\n    '''\n    if my_dict(dict1):\n        return dict1.get(key)\n    else:\n        return False\ndef my_dict_pop(dict1, key):\n    '''\n    Write a function to remove a value of a dictionary given a key\n    '''\n    if my_dict(dict1):\n        return dict1.pop(key)\n    else:\n        return False\ndef my_dict_popitem(dict1):\n    '''\n    Write a function to remove a value of a dictionary given a key\n    '''\n    if my_dict(dict1):\n        return dict1.popitem()\n    else:\n        return False\ndef my_dict_setdefault(dict1, key, value):\n    '''\n    Write a function to return a value of a dictionary given a key\n    '''\n    if my_dict(dict1):\n        return dict1.setdefault(key, value)\n    else:\n        return False\ndef my_dict_sort_values(dict1):\n    '''\n    Write a function to sort a dictionary with values\n    '''\n    if my_dict(dict1):\n        return sorted(dict1.values())\n    else:\n        return False\ndef my_dict_sort_keys(dict1):\n    '''\n    Write a function to sort a dictionary with keys\n    '''\n    if my_dict(dict1):\n        return sorted(dict1.keys())\n    else:\n        return False\ndef my_dict_sort_items(dict1):\n    '''\n    Write a function to sort a dictionary with items\n    '''\n    if my_dict(dict1):\n        return sorted(dict1.items())\n    else:\n        return False\ndef my_dict_reverse_keys(dict1):\n    '''\n    Write a function to reverse a dictionary with keys\n    '''\n    if my_dict(dict1):\n        dict2 = {}\n        for i, j in dict1.iteritems():\n            dict2[j] = i\n        return dict2\n    else:\n        return False\ndef my_dict_reverse_values(dict1):\n    '''\n    Write a function to reverse a dictionary with values\n    '''\n    if my_dict(dict1):\n        dict2 = {}\n        for i, j in dict1.iteritems():\n            dict2[i] = j\n        return dict2\n    else:\n        return False\ndef my_dict_reverse_items(dict1):\n    '''\n    Write a function to reverse a dictionary with items\n    '''\n    if my_dict(dict1):\n        dict2 = {}\n        for i, j in dict1.iteritems():\n            dict2[j] = i\n        return dict2\n    else:\n        return False\ndef my_dict_contains(dict1, key):\n    '''\n    Write a function to check if a key is in a dictionary\n    '''\n    if my_dict(dict1):\n        return key in dict1\n    else:\n        return False\ndef my_dict_len(dict1):\n    '''\n    Write a function to return the length of a dictionary\n    '''\n    if my_dict(dict1):\n        return len(dict1)\n    else:\n        return False\ndef my_dict_copy_key(dict1):\n    '''\n    Write a function to copy a dictionary with keys\n    '''\n    if my_dict(dict1):\n        return dict1.keys()\n    else:\n        return False\ndef my_dict_copy_value(dict1):\n    '''\n    Write a function to copy a dictionary with values\n    '''\n    if my_dict(dict1):\n        return dict1.values()\n    else:\n        return False\ndef my_dict_copy_items(dict1):\n    '''\n    Write a function to copy a dictionary with items\n    '''\n    if my_dict(dict1):\n        return dict1.items()\n    else:\n        return False\ndef my_dict_copy_items_all(dict1):\n    '''\n    Write a function to copy a dictionary with items\n    '''\n    if my_dict(dict1):\n        return dict1.items()\n    else:\n        return False\ndef my_dict_copy_items_key(dict1):\n    '''\n    Write a function to copy a dictionary with items\n    '''\n    if my_dict(dict1):\n        return dict1.items()\n    else:\n        return False\ndef my_dict_copy_items_value(dict1):\n    '''\n    Write a function to copy a dictionary with items\n    '''\n    if my_dict(dict1):\n        return dict1.items()\n    else:\n        return False\ndef my_dict_sort_keys_items(dict1):\n    '''\n    Write a function to sort a dictionary with keys and items\n    '''\n    if my_dict(dict1):\n        return sorted(dict1.items())\n    else:\n        return False\ndef my_dict_sort_keys_values(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Dictionary is empty')\n    else:\n        print('Dictionary is not empty')\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0 for i in range(num)]\n    catalan[0] = 1\n    for i in range(1,num):\n        for j in range(i,0,-1):\n            catalan[i] += catalan[j-1] * catalan[i-j]\n    return catalan[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return (1/2)**(2*num) * (2*num+1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 0\n    if num == 1:\n        return 1\n    return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    catalan = [1]\n    \n    if num < 1:\n        return catalan[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (catalan_number(num-1) * num) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n    \n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # init\n    catalan_list = [1]\n    i = 1\n    while i <= num:\n        i += 1\n        catalan_list.append(0)\n        for j in range(i):\n            catalan_list[i] += catalan_list[j]*catalan_list[i-j-1]\n    return catalan_list[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, num):\n        catalan.append(0)\n    for i in range(1, num):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return _catalan_number_recursive(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return (2*num - 1) / (num + 1) * catalan_number(num - 1) + catalan_number(num)\n    \nprint(catalan_number(int(input('Enter nth Catalan number: '))))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    find_adverb_regex = re.compile(r'(\\S+)(ly)$')\n    adverb_match = find_adverb_regex.search(text)\n    if adverb_match:\n        print(\"The adverb found is: %s\\n It's position is: %s\" % (adverb_match.group(2), adverb_match.span()))\n    else:\n        print(\"There's no adverb ending with ly\")\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    matches = re.findall(r'ad[ly]?$',text)\n    if len(matches) > 0:\n        return matches[0]\n    else:\n        return \"\"\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    str1 = re.compile(r'[\\w]*ly$',re.IGNORECASE)\n    str2 = re.findall(str1,text)\n    if len(str2) > 0:\n        print \"the first adverb ending with ly is : \",str2\n    else:\n        print \"there is no adverb ending with ly\"\n    \ndef find_numbers(text):\n    '''\n    Write a function to find all the numbers that have a decimal and print them.\n    '''\n    str1 = re.compile(r'([0-9]*\\.?[0-9]*)')\n    str2 = re.findall(str1,text)\n    if len(str2) > 0:\n        print \"the number having decimal is : \",str2\n    else:\n        print \"there is no number having decimal\"\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_positions = []\n    for word in re.findall(r'\\w+ly', text):\n        ly_positions.append(text.index(word))\n    return ly_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = []\n    reg = re.compile(r\"(.*?)(ly)$\",re.DOTALL)\n    matches = reg.findall(text)\n    for match in matches:\n        positions.append(match[1])\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pos = re.search(r'ly$', text)\n    if ly_pos is not None:\n        return ly_pos.start(), ly_pos.end()\n    else:\n        return None, None\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pos = []\n    s = re.findall(r'ly',text)\n    if s:\n        ly_pos = [i for i in range(len(text)) if text.startswith('ly',i)]\n    return ly_pos\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if text == \"\":\n        return \"Not found\"\n    else:\n        pattern = re.compile(r'(?<=[^aeiou][^aeiou])ly$')\n        m = pattern.search(text)\n        if m:\n            return \"Found: {}\".format(m.group())\n        else:\n            return \"Not found\"\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    text = re.sub('[^A-Za-z0-9 ]+', '', text)\n    print(text)\n    print(text[-3:])\n    return text[-3:]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'(.*ly)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with s and its positions in a given string.\n    '''\n    result = re.findall(r'(.*s)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_numbers(text):\n    '''\n    Write a function to find the first number ending with one or more digits and its positions in a given string.\n    '''\n    result = re.findall(r'(.*\\d)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adjective ending with a, an, or atr or its positions in a given string.\n    '''\n    result = re.findall(r'(.*[a,an,atr])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_verbs(text):\n    '''\n    Write a function to find the first verb ending with ie and its positions in a given string.\n    '''\n    result = re.findall(r'(.*ie)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_prepositions(text):\n    '''\n    Write a function to find the first preposition ending with to or its positions in a given string.\n    '''\n    result = re.findall(r'(.*to)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_dates(text):\n    '''\n    Write a function to find the first dates ending with a, a, b, c, d, e, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, y, z, or its positions in a given string.\n    '''\n    result = re.findall(r'(.*[a,b,c,d,e,f,g,h,j,k,l,m,n,p,q,r,s,t,v,w,x,y,z])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_letter_cases(text):\n    '''\n    Write a function to find the first letter case of a word ending with l, i, or j, and its positions in a given string.\n    '''\n    result = re.findall(r'(.*[l,i,j])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_company_names(text):\n    '''\n    Write a function to find the first company name ending with t, c, or l, and its positions in a given string.\n    '''\n    result = re.findall(r'(.*[t,c,l])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_titles(text):\n    '''\n    Write a function to find the first title ending with s, p, t, m, f, or g, and its positions in a given string.\n    '''\n    result = re.findall(r'(.*[s,p,t,m,f,g])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_containers(text):\n    '''\n    Write a function to find the first container ending with r or c, and its positions in a given string.\n    '''\n    result = re.findall(r'(.*[r,c])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_noun_phrases(text):\n    '''\n    Write a function to find the first noun phrase ending with noun, nouns, n, or n-s, and its positions in a given string.\n    '''\n    result = re.findall(r'(.*[noun,nouns,n,n-s])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_adverbs_in_sentences(text):\n    '''\n    Write a function to find the first adverb ending with ly in a given string.\n    '''\n    result = re.findall(r'(.*ly)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_nouns_in_sentences(text):\n    '''\n    Write a function to find the first noun ending with s in a given string.\n    '''\n    result = re.findall(r'(.*s)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_numbers_in_sentences(text):\n    '''\n    Write a function to find the first number ending with one or more digits in a given string.\n    '''\n    result = re.findall(r'(.*\\d)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_adjectives_in_sentences(text):\n    '''\n    Write a function to find the first adjective ending with a, an, or atr in a given string.\n    '''\n    result = re.findall(r'(.*[a,an,atr])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_verbs_in_sentences(text):\n    '''\n    Write a function to find the first verb ending with ie in a given string.\n    '''\n    result = re.findall(r'(.*ie)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_prepositions_in_sentences(text):\n    '''\n    Write a function to find the first preposition ending with to in a given string.\n    '''\n    result = re.findall(r'(.*to)\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_dates_in_sentences(text):\n    '''\n    Write a function to find the first dates ending with a, a, b, c, d, e, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, y, z, or its positions in a given string.\n    '''\n    result = re.findall(r'(.*[a,b,c,d,e,f,g,h,j,k,l,m,n,p,q,r,s,t,v,w,x,y,z])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_letter_cases_in_sentences(text):\n    '''\n    Write a function to find the first letter case of a word ending with l, i, or j, and its positions in a given string.\n    '''\n    result = re.findall(r'(.*[l,i,j])\\Z',text)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return ''\ndef find_company_names_in_sentences(text):\n    '''\n    Write a function to find the first company name ending with t, c, or l, and its positions in a given string.\n    '"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap,items[i])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_cost=[]\n    for i in range(len(items)):\n        items_cost.append([items[i][0],items[i][1],items[i][2]])\n    #print items_cost\n    return sorted(items_cost,key=lambda x:x[2],reverse=True)[0:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    output = []\n    for item in items:\n        output.append(item)\n        if len(output) == n:\n            return output\n    return output\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap\ndef find_length(s):\n    '''\n    Write a function called find_length that takes a string s and returns the length of the string.\n    '''\n    return len(s)\ndef find_longest(s1,s2):\n    '''\n    Write a function called find_longest that takes two strings s1 and s2 and returns the length of the longest string.\n    '''\n    if len(s1)>len(s2):\n        return s1\n    else:\n        return s2\ndef find_longest_length(s):\n    '''\n    Write a function called find_longest_length that takes a string s and returns the length of the longest substring.\n    '''\n    start=0\n    end=0\n    max_length=0\n    for i in range(len(s)):\n        if s[i]==s[end]:\n            end+=1\n            if end-start>max_length:\n                max_length=end-start\n        else:\n            start=i\n            end=i\n    return max_length\ndef string_to_list(s):\n    '''\n    Write a function called string_to_list that takes a string s and returns a list of each letter in the string.\n    '''\n    return list(s)\ndef string_to_list_2(s):\n    '''\n    Write a function called string_to_list that takes a string s and returns a list of each letter in the string.\n    '''\n    return s\ndef word_count(s):\n    '''\n    Write a function called word_count that takes a string s and returns a list of each word in the string,\n    in lowercase, and counts the number of times each word appears.\n    '''\n    return s.lower().split()\ndef word_count(s):\n    '''\n    Write a function called word_count that takes a string s and returns a list of each word in the string,\n    in lowercase, and counts the number of times each word appears.\n    '''\n    return len(s.split())\ndef sort_words_by_length(words):\n    '''\n    Write a function called sort_words_by_length that takes a list of words and returns a list of the same words but in alphabetical order.\n    '''\n    return sorted(words)\ndef sort_words_by_length(words):\n    '''\n    Write a function called sort_words_by_length that takes a list of words and returns a list of the same words but in alphabetical order.\n    '''\n    return sorted(words,key=len)\ndef sort_words_by_length(words):\n    '''\n    Write a function called sort_words_by_length that takes a list of words and returns a list of the same words but in alphabetical order.\n    '''\n    return sorted(words,key=len)\ndef multiply_by_five(numbers):\n    '''\n    Write a function called multiply_by_five that takes a list of numbers and returns a list of each number times 5.\n    '''\n    return [n*5 for n in numbers]\ndef is_palindrome(s):\n    '''\n    Write a function called is_palindrome that takes a string s and returns True if the string is a palindrome,\n    and False otherwise. A palindrome is a string that's the same forwards as backwards.\n    '''\n    if s[::-1]==s:\n        return True\n    else:\n        return False\ndef count_characters_in_string(s):\n    '''\n    Write a function called count_characters_in_string that takes a string s and returns a dictionary that counts the number of times each letter in the alphabet is used.\n    '''\n    return {letter:s.count(letter) for letter in s}\ndef count_characters_in_string(s):\n    '''\n    Write a function called count_characters_in_string that takes a string s and returns a dictionary that counts the number of times each letter in the alphabet is used.\n    '''\n    return {letter:s.count(letter) for letter in s}\ndef is_anagram(s1,s2):\n    '''\n    Write a function called is_anagram that takes two strings s1 and s2 and returns True if s1 and s2 are anagrams.\n    '''\n    return sorted(s1)==sorted(s2)\ndef is_anagram(s1,s2):\n    '''\n    Write a function called is_anagram that takes two strings s1 and s2 and returns True if s1 and s2 are anagrams.\n    '''\n    return sorted(s1)==sorted(s2)\ndef count_anagrams(s):\n    '''\n    Write a function called count_anagrams that takes a string s and returns a dictionary that counts the number of times each anagram of s is used.\n    '''\n    anagrams=[]\n    for word in s.split():\n        anagram=''\n        for letter in word:\n            anagram+=letter\n        anagrams.append(anagram)\n    return {anagram:anagrams.count(anagram) for anagram in anagrams}\ndef count_anagrams(s):\n    '''\n    Write a function called count_anagrams that takes a string s and returns a dictionary that counts the number of times each anagram of s is used.\n    '''\n    anagrams=[]\n    for word in s.split():\n        anagram=''\n        for letter in word:\n            anagram+=letter\n        anagrams.append(anagram)\n    return {anagram:anagrams.count(anagram) for anagram in anagrams}\ndef find_anagrams(s):\n    '''\n    Write a function called find_anagrams that takes a string s and returns a list of all the anagrams of s.\n    '''\n    anagrams=[]\n    for word in s.split():\n        anagram=''\n        for letter in word:\n            anagram+=letter\n        anagrams.append(anagram)\n    return anagrams\ndef find_anagrams(s):\n    '''\n    Write a function called find_anagrams that takes a string s and returns a list of all the anagrams of s.\n    '''\n    anagrams=[]\n    for word in s.split():\n        anagram=''\n        for letter in word:\n            anagram+=letter\n        anagrams.append(anagram)\n    return list(set(anagrams))\ndef is_anagram(s1,s2):\n    '''\n    Write a function called is_anagram that takes two strings s1 and s2 and returns True if s1 and s2 are anagrams.\n    '''\n    if len(s1)!=len(s2):\n        return False\n    else:\n        return sorted(s1)==sorted(s2)\ndef is_anagram(s1,s2):\n    '''\n    Write a function called is_anagram that takes two strings s1 and s2 and returns True if s1 and s2 are anagrams.\n    '''\n    if len(s1)!=len(s2):\n        return False\n    else:\n        return sorted(s1)==sorted(s2)\ndef count_anagrams(s):\n    '''\n    Write a function called count_anagrams that takes a string s and returns a dictionary that counts the number of times each anagram of s is used.\n    '''\n    anagrams=[]\n    for word in s.split():\n        anagram=''\n        for letter in word:\n            anagram+=letter\n        anagrams.append(anagram)\n    return {anagram:anagrams.count(anagram) for anagram in anagrams}\ndef count_anagrams(s):\n    '''\n    Write a function called count_anagrams that takes a string s and returns a dictionary that counts the number of times each anagram of s is used.\n    '''\n    anagrams=[]\n    for word in s.split():\n        anagram=''\n        for letter in word:\n            anagram+=letter\n    "
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    cost_heap=[]\n    for item,cost in items:\n        heapq.heappush(cost_heap,(-cost,item))\n    return [heapq.heappop(cost_heap)[1] for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,item)\n    for i in range(n-1):\n        heapq.heappop(heap)\n    return heap\ndef cheap_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,-item)\n    for i in range(n-1):\n        heapq.heappop(heap)\n    return heap\ndef full_combinations(items):\n    '''\n    Write a function that takes a list of items and finds all of the possible full combinations of those items.\n    '''\n    if not items:\n        return []\n    first_item = items[0]\n    rest_items = items[1:]\n    full_combos = [first_item]\n    for comb in full_combinations(rest_items):\n        full_combos.append(comb+[first_item])\n    return full_combos\ndef remove_duplicates(items):\n    '''\n    Write a function that takes a list of items and returns a new list of items without duplicates.\n    '''\n    if not items:\n        return []\n    for i in range(len(items)-1):\n        if items[i]==items[i+1]:\n            items.remove(items[i])\n    return items\ndef count_duplicates(items):\n    '''\n    Write a function that takes a list of items and returns a new list with the duplicates removed.\n    '''\n    if not items:\n        return []\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item]=1\n        else:\n            d[item]+=1\n    return d\ndef count_duplicates_2(items):\n    '''\n    Write a function that takes a list of items and returns a new list with the duplicates removed.\n    '''\n    if not items:\n        return []\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item]=1\n        else:\n            d[item]+=1\n    return d\ndef max_duplicates(items):\n    '''\n    Write a function that takes a list of items and returns a new list with the duplicates removed and with the highest values first.\n    '''\n    if not items:\n        return []\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item]=1\n        else:\n            d[item]+=1\n    return sorted(d.keys(),key=lambda x:d[x],reverse=True)\ndef unique_items(items):\n    '''\n    Write a function that takes a list of items and returns a new list with all duplicate items removed.\n    '''\n    if not items:\n        return []\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item]=1\n        else:\n            d[item]+=1\n    return d\ndef frequent_items(items,limit):\n    '''\n    Write a function that takes a list of items and returns a new list with all but the most frequent items removed.\n    '''\n    if not items:\n        return []\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item]=1\n        else:\n            d[item]+=1\n    return heapq.nlargest(limit,d,key=lambda x:d[x])\ndef two_lists(items1,items2):\n    '''\n    Write a function that takes two lists and returns True if the first list contains all of the elements of the second list, and False if not.\n    '''\n    if not items1 or not items2:\n        return False\n    for item in items1:\n        if item not in items2:\n            return False\n    return True\ndef most_frequent(items):\n    '''\n    Write a function that takes a list of items and returns a new list with the most frequent items first.\n    '''\n    if not items:\n        return []\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item]=1\n        else:\n            d[item]+=1\n    return sorted(d.keys(),key=lambda x:d[x],reverse=True)\ndef smallest_n(items,n):\n    '''\n    Write a function that takes a list of items and returns a new list with the smallest items first.\n    '''\n    if not items:\n        return []\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item]=1\n        else:\n            d[item]+=1\n    return heapq.nsmallest(n,d,key=lambda x:d[x])\ndef largest_n(items,n):\n    '''\n    Write a function that takes a list of items and returns a new list with the largest items first.\n    '''\n    if not items:\n        return []\n    d = {}\n    for item in items:\n        if item not in d:\n            d[item]=1\n        else:\n            d[item]+=1\n    return heapq.nlargest(n,d,key=lambda x:d[x])\ndef copy_list(items):\n    '''\n    Write a function that takes a list of items and returns a new list that is a copy of the original list.\n    '''\n    if not items:\n        return []\n    return items[:]\ndef longest_increasing_subsequence(items):\n    '''\n    Write a function that takes a list of numbers and returns the length of the longest increasing subsequence in that list.\n    '''\n    if not items:\n        return 0\n    d = {}\n    for i in range(len(items)):\n        d[i]=0\n    for item in items:\n        for i in range(len(items)):\n            if item<=items[i] and d[i]+1>d[item]:\n                d[item]=d[i]+1\n    return max(d.values())\ndef longest_decreasing_subsequence(items):\n    '''\n    Write a function that takes a list of numbers and returns the length of the longest decreasing subsequence in that list.\n    '''\n    if not items:\n        return 0\n    d = {}\n    for i in range(len(items)):\n        d[i]=0\n    for item in items:\n        for i in range(len(items)):\n            if item>=items[i] and d[i]+1>d[item]:\n                d[item]=d[i]+1\n    return max(d.values())\ndef longest_increasing_subsequence_2(items):\n    '''\n    Write a function that takes a list of numbers and returns the length of the longest increasing subsequence in that list.\n    '''\n    if not items:\n        return 0\n    d = {}\n    for item in items:\n        d[item]=1\n        for i in range(len(items)):\n            if item<=items[i] and d[i]+1>d[item]:\n                d[item]=d[i]+1\n    return max(d.values())\ndef longest_decreasing_subsequence_2(items):\n    '''\n    Write a function that takes a list of numbers and returns the length of the longest decreasing subsequence in that list.\n    '''\n    if not items:\n        return 0\n    d = {}\n    for item in items:\n        d[item]=1\n        for i in range(len(items)):\n            if item>=items[i] and d[i]+1>d[item]:\n                d[item]=d[i]+1\n    return max(d.values())\ndef longest_increasing_subsequence_3(items):\n    '''\n    Write a function that takes a list of numbers and returns the length of the longest increasing subsequence in that list.\n    '''\n    if not items:\n        return 0\n    d = {}\n    for item in items:\n        d[item]=1\n        for i in range(len(items)):\n            if item<=items[i]:\n                d[item]=d[i]+1\n    return max(d.values())\ndef longest_decreasing"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    list_of_expensive_items = []\n    list_of_expensive_items.extend(items)\n    heapq.heapify(list_of_expensive_items)\n    list_of_expensive_items = heapq.nsmallest(n,list_of_expensive_items)\n    return list_of_expensive_items\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    temp_list = []\n    for i in range(0,n):\n        temp_list.append(items[i])\n    return temp_list\ndef sort_by_price(items):\n    '''\n    Write a function to sort a list of items by their price and return that list.\n    '''\n    return sorted(items,key=lambda items:items[1])\ndef nth_smallest_price(items,n):\n    '''\n    Write a function to find the nth smallest price in a list of items.\n    '''\n    temp_list = []\n    for i in range(0,n):\n        temp_list.append(items[i])\n    return temp_list\ndef nth_highest_price(items,n):\n    '''\n    Write a function to find the nth highest price in a list of items.\n    '''\n    temp_list = []\n    for i in range(0,n):\n        temp_list.append(items[i])\n    return temp_list\ndef nth_smallest_index(items,n):\n    '''\n    Write a function to find the nth smallest price in a list of items.\n    '''\n    temp_list = []\n    for i in range(0,n):\n        temp_list.append(items[i])\n    return temp_list\ndef nth_highest_index(items,n):\n    '''\n    Write a function to find the nth highest price in a list of items.\n    '''\n    temp_list = []\n    for i in range(0,n):\n        temp_list.append(items[i])\n    return temp_list\ndef kth_largest(items,k):\n    '''\n    Write a function to find the kth largest element in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]<items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_largest_index(items,k):\n    '''\n    Write a function to find the kth largest element in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]<items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_largest_index_list(items,k):\n    '''\n    Write a function to find the kth largest element in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]<items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap\ndef kth_smallest(items,k):\n    '''\n    Write a function to find the kth smallest element in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]>items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_smallest_index(items,k):\n    '''\n    Write a function to find the kth smallest element in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]>items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_smallest_index_list(items,k):\n    '''\n    Write a function to find the kth smallest element in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]>items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap\ndef kth_smallest_item(items,k):\n    '''\n    Write a function to find the kth smallest item in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]>items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_smallest_index_item(items,k):\n    '''\n    Write a function to find the kth smallest item in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]>items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_largest_item(items,k):\n    '''\n    Write a function to find the kth largest item in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]<items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_largest_index_item(items,k):\n    '''\n    Write a function to find the kth largest item in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]<items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_largest_item_index(items,k):\n    '''\n    Write a function to find the kth largest item in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]<items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_smallest_item_index(items,k):\n    '''\n    Write a function to find the kth smallest item in a list of items.\n    '''\n    heap = []\n    for i in range(0,k):\n        heap.append(items[i])\n    heapq.heapify(heap)\n    for i in range(k,len(items)):\n        if heap[0]>items[i]:\n            heapq.heapreplace(heap,items[i])\n    return heap[0]\ndef kth_smallest_item_index_list(items,k):\n    '''\n    Write a function to find the kth smallest item in a list of items.\n    '''\n    heap = []"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nlargest = n\n    \n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items[i])\n    \n    for i in range(n,len(items)):\n        if items[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,items[i])\n    \n    return heap\n    \ndef add_heap(heap,item):\n    '''\n    Write a function to add a new item to a priority queue.\n    '''\n    heapq.heappush(heap,item)\n    \ndef most_expensive_item(heap):\n    '''\n    Write a function to find the most expensive item in a given dataset.\n    '''\n    return heap[0]\n    \ndef most_expensive_items(heap,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nlargest = n\n    \n    if len(heap) == n:\n        return heap\n    \n    for i in range(n,len(heap)):\n        if heap[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,heap[i])\n            \n    return heap\n    \ndef remove_heap(heap,item):\n    '''\n    Write a function to remove an item from a priority queue.\n    '''\n    heap.remove(item)\n    \ndef remove_most_expensive_item(heap):\n    '''\n    Write a function to remove the most expensive item in a given dataset.\n    '''\n    heapq.heappop(heap)\n    \ndef get_n_largest_items(heap,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nlargest = n\n    \n    if len(heap) == n:\n        return heap\n    \n    for i in range(n,len(heap)):\n        if heap[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,heap[i])\n            \n    return heap\n    \ndef get_n_smallest_items(heap,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nsmallest = n\n    \n    if len(heap) == n:\n        return heap\n    \n    for i in range(n,len(heap)):\n        if heap[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,heap[i])\n            \n    return heap\n    \ndef get_n_smallest_items_with_descending_order(heap,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nsmallest = n\n    \n    if len(heap) == n:\n        return heap\n    \n    for i in range(n,len(heap)):\n        if heap[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,heap[i])\n            \n    return heap\n    \ndef median(list):\n    '''\n    Write a function to find the median value of a given dataset.\n    '''\n    if len(list) == 0:\n        return False\n    elif len(list)%2 == 0:\n        return (list[int(len(list)/2)] + list[int(len(list)/2 - 1)])/2\n    else:\n        return list[int(len(list)/2)]\n    \ndef median_of_medians(list):\n    '''\n    Write a function to find the median of a given dataset.\n    '''\n    if len(list) == 0:\n        return False\n    elif len(list)%5 == 0:\n        list1 = list[:len(list)/5]\n        list2 = list[len(list)/5:2*len(list)/5]\n        list3 = list[2*len(list)/5:3*len(list)/5]\n        list4 = list[3*len(list)/5:]\n        list1.sort()\n        list2.sort()\n        list3.sort()\n        list4.sort()\n        \n        return median(list1)\n    else:\n        list1 = list[:len(list)/5]\n        list2 = list[len(list)/5:2*len(list)/5]\n        list3 = list[2*len(list)/5:3*len(list)/5]\n        list4 = list[3*len(list)/5:]\n        list1.sort()\n        list2.sort()\n        list3.sort()\n        list4.sort()\n        \n        return median(list1)\n        \ndef get_n_highest_elements(list,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nlargest = n\n    \n    if len(list) == n:\n        return list\n    \n    for i in range(n,len(list)):\n        if list[i] > list[0]:\n            list.remove(list[i])\n            list.append(list[i])\n            \n    return list\n    \ndef get_n_lowest_elements(list,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nsmallest = n\n    \n    if len(list) == n:\n        return list\n    \n    for i in range(n,len(list)):\n        if list[i] < list[0]:\n            list.remove(list[i])\n            list.append(list[i])\n            \n    return list\n    \ndef get_n_smallest_elements_with_descending_order(list,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nsmallest = n\n    \n    if len(list) == n:\n        return list\n    \n    for i in range(n,len(list)):\n        if list[i] < list[0]:\n            list.remove(list[i])\n            list.append(list[i])\n            \n    return list\n    \ndef get_n_largest_elements(list,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nlargest = n\n    \n    if len(list) == n:\n        return list\n    \n    for i in range(n,len(list)):\n        if list[i] > list[0]:\n            list.remove(list[i])\n            list.append(list[i])\n            \n    return list\n    \ndef get_n_smallest_elements(list,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nsmallest = n\n    \n    if len(list) == n:\n        return list\n    \n    for i in range(n,len(list)):\n        if list[i] < list[0]:\n            list.remove(list[i])\n            list.append(list[i])\n            \n    return list\n    \ndef get_n_smallest_elements_with_descending_order(list,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nsmallest = n\n    \n    if len(list) == n:\n        return list\n    \n    for i in range(n,len(list)):\n        if list[i] < list[0]:\n            list.remove(list[i])\n            list.append(list[i])\n            \n    return list\n    \ndef get_n_largest_elements_with_descending_order(list,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nlargest = n\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print \"List is too short!\"\n        return l\n    else:\n        return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split a list into n slices, and add the first part of the list to the end of the last slice\n    return l[0:n] + l[n:len(l)]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l)] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l[:]\n    arr = arr[n:]\n    arr.append(l[:n])\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 1:\n        # if n is 1, then we just return the list l as it is\n        return l\n    elif n == len(l):\n        # if n is the last element of the list l, then we return the original list l\n        return l\n    else:\n        # if n is not 1 or the last element of the list l, we return the list l split at the nth element.\n        # this is done recursively on the part of l that we already know is part of the split list.\n        l1 = l[:n]\n        l2 = l[n:]\n        return l1 + split_Arr(l2, n-1)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    for i in listx:\n        listx[i] = tuple(listx[i])\n    return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # list_to_tuple([1,2,3]) --> (1, 2, 3)\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef sum_tuple(tuplex):\n    '''\n    Write a function to sum all the items in a tuple.\n    '''\n    return sum(tuplex)\n    \ndef max_tuple(tuplex):\n    '''\n    Write a function to find the max value in a tuple.\n    '''\n    return max(tuplex)\n    \ndef min_tuple(tuplex):\n    '''\n    Write a function to find the min value in a tuple.\n    '''\n    return min(tuplex)\n    \ndef is_empty_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is empty.\n    '''\n    return tuplex == ()\n    \ndef is_valid_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is valid.\n    '''\n    if type(tuplex)!= tuple:\n        return False\n    else:\n        return True\n    \ndef is_valid_tuple_val(tuplex, val):\n    '''\n    Write a function to check if a tuple has a certain value.\n    '''\n    if tuplex == ():\n        return False\n    elif val in tuplex:\n        return True\n    else:\n        return False\n        \ndef is_valid_tuple_index(tuplex, index):\n    '''\n    Write a function to check if a tuple has a certain index.\n    '''\n    if tuplex == ():\n        return False\n    elif index < len(tuplex):\n        return True\n    else:\n        return False\n    \ndef is_valid_tuple_len(tuplex, length):\n    '''\n    Write a function to check if a tuple has a certain length.\n    '''\n    if tuplex == ():\n        return False\n    elif len(tuplex) == length:\n        return True\n    else:\n        return False\n    \ndef check_tuple_item(tuplex, index, val):\n    '''\n    Write a function to check if a tuple has a certain item.\n    '''\n    if tuplex == ():\n        return False\n    elif val in tuplex[index]:\n        return True\n    else:\n        return False\n        \ndef check_tuple_items(tuplex, item_list):\n    '''\n    Write a function to check if a tuple has a certain item.\n    '''\n    if tuplex == ():\n        return False\n    for item in item_list:\n        if item in tuplex:\n            return True\n    return False\n    \ndef swap_tuple(tuplex):\n    '''\n    Write a function to swap two tuples.\n    '''\n    return tuplex[1], tuplex[0]\n    \ndef sort_tuple(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuple(sorted(tuplex))\n    \ndef sort_tuple_item(tuplex, index):\n    '''\n    Write a function to sort a tuple in a certain index.\n    '''\n    return tuple(sorted(tuplex, key=lambda item: item[index]))\n    \ndef is_sorted_tuple(tuplex):\n    '''\n    Write a function to check if a tuple is sorted.\n    '''\n    return tuplex == tuple(sorted(tuplex))\n    \ndef is_sorted_tuple_item(tuplex, index):\n    '''\n    Write a function to check if a tuple is sorted in a certain index.\n    '''\n    return tuplex == tuple(sorted(tuplex, key=lambda item: item[index]))\n    \ndef is_sorted_tuple_reverse(tuplex):\n    '''\n    Write a function to check if a tuple is sorted in reverse.\n    '''\n    return tuplex == tuple(sorted(tuplex, reverse=True))\n    \ndef is_sorted_tuple_item_reverse(tuplex, index):\n    '''\n    Write a function to check if a tuple is sorted in reverse in a certain index.\n    '''\n    return tuplex == tuple(sorted(tuplex, key=lambda item: item[index], reverse=True))\n    \ndef sort_tuple_index(tuplex, index):\n    '''\n    Write a function to sort a tuple in a certain index.\n    '''\n    return tuple(sorted(tuplex, key=lambda item: item[index]))\n    \ndef swap_tuple_index(tuplex, index_a, index_b):\n    '''\n    Write a function to swap two items in a tuple in a certain index.\n    '''\n    return tuple(tuplex[:index_a] + (tuplex[index_b],) + tuplex[index_a+1:index_b] + (tuplex[index_a],) + tuplex[index_b+1:])\n    \ndef remove_item_in_tuple(tuplex, index):\n    '''\n    Write a function to remove a certain item in a tuple.\n    '''\n    return tuple(tuplex[:index] + tuplex[index+1:])\n    \ndef remove_item_in_tuple_item(tuplex, index_a, index_b):\n    '''\n    Write a function to remove a certain item in a tuple in a certain index.\n    '''\n    return tuple(tuplex[:index_a] + tuplex[index_a+1:index_b] + tuplex[index_b+1:])\n    \ndef remove_item_in_tuple_slice(tuplex, start, end):\n    '''\n    Write a function to remove a certain slice in a tuple.\n    '''\n    return tuple(tuplex[:start] + tuplex[end:])\n    \ndef remove_item_in_tuple_slice_reverse(tuplex, start, end):\n    '''\n    Write a function to remove a certain slice in a tuple in a certain index.\n    '''\n    return tuple(tuplex[:end] + tuplex[start:])\n    \ndef remove_item_in_tuple_slice_reverse_item(tuplex, start, end):\n    '''\n    Write a function to remove a certain slice in a tuple in a certain index.\n    '''\n    return tuple(tuplex[:end] + tuplex[start:])\n    \ndef reverse_tuple(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuple(reversed(tuplex))\n    \ndef join_tuple(tuplex):\n    '''\n    Write a function to join two tuples.\n    '''\n    return tuplex + tuplex\n    \ndef join_tuple_index(tuplex, index_a, index_b):\n    '''\n    Write a function to join two tuples in a certain index.\n    '''\n    return tuplex[:index_a] + tuplex[index_b:]\n    \ndef join_tuple_reverse(tuplex):\n    '''\n    Write a function to join two tuples in reverse.\n    '''\n    return tuplex + tuplex\n    \ndef join_tuple_item_index(tuplex, index_a, index_b):\n    '''\n    Write a function to join two tuples in a certain index.\n    '''\n    return tuplex[:index_a] + tuplex[index_b:]\n    \ndef join_tuple_item_reverse(tuplex, index_a, index_b):\n    '''\n    Write a function to join two tuples in a certain index.\n    '''\n    return tuplex[:index_a] + tuplex[index_b:]\n    \ndef join_tuple_reverse_index(tuplex, index):\n    '''\n    Write a function to join two tuples in a certain index.\n    '''\n    return tuplex + tuplex[index:]\n    \ndef join_tuple_reverse_item(tuplex, index_a, index_b):\n    '''\n    Write a function to join two tuples in a certain index.\n    '''\n    return tuplex[:index_a] + tuplex[index_b:]\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple = tuple(listx)\n    return tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \ndef demo_big_diff():\n    print(big_diff([1,2,3,4,5]))\n    print(big_diff([5,3,2,4,1]))\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    res = abs(max(nums) - min(nums))\n    return res\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s = max(nums)\n    l = min(nums)\n    return s - l\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \n    \ndef vowel_count(string):\n    '''\n    Write a python function to count the vowel in a given string.\n    '''\n    return string.count(\"a\") + string.count(\"e\") + string.count(\"i\") + string.count(\"o\") + string.count(\"u\")\n    \ndef add_numbers(string):\n    '''\n    Write a python function to add all the numbers in a given string.\n    '''\n    return sum(int(x) for x in string if x.isdigit())\n    \ndef leap_year(year):\n    '''\n    Write a python function to find whether a given year is a leap year or not.\n    '''\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return string == string[::-1]\n    \ndef find_factors(n):\n    '''\n    Write a python function to find all the factors of a given number.\n    '''\n    return [x for x in range(1, n+1) if n % x == 0]\n    \ndef find_fibonacci(n):\n    '''\n    Write a python function to find the nth term of Fibonacci series.\n    '''\n    if n < 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return find_fibonacci(n-1) + find_fibonacci(n-2)\n    \ndef palindromic_permutations(string):\n    '''\n    Write a python function to find all the palindromic permutations of a given string.\n    '''\n    from itertools import permutations\n    return [''.join(x) for x in permutations(string) if x == x[::-1]]\n    \ndef count_vowels(string):\n    '''\n    Write a python function to count the vowels in a given string.\n    '''\n    return len([x for x in string.lower() if x in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n    \ndef find_anagram(string1, string2):\n    '''\n    Write a python function to find the anagram of a given two strings.\n    '''\n    from collections import Counter\n    return Counter(string2) == Counter(string1)\n    \ndef find_anagram_2(string1, string2):\n    '''\n    Write a python function to find the anagram of a given two strings.\n    '''\n    from collections import Counter\n    from itertools import permutations\n    all_permutations = [''.join(x) for x in permutations(string2)]\n    return string1 in all_permutations\n    \ndef find_anagram_3(string1, string2):\n    '''\n    Write a python function to find the anagram of a given two strings.\n    '''\n    from collections import Counter\n    from itertools import permutations\n    all_permutations = [''.join(x) for x in permutations(string2)]\n    all_strings = [x for x in Counter(string1).items()]\n    return sum([True for x in all_permutations if Counter(x) == all_strings])\n    \ndef is_pangram(string):\n    '''\n    Write a python function to check whether a given string is a pangram or not.\n    '''\n    from string import ascii_lowercase as alpha\n    return len(set(string.lower()) - set(alpha)) == 0\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x * y, range(1, n+1))\n    \ndef find_power(base, exp):\n    '''\n    Write a python function to find the power of a given base and exponent.\n    '''\n    return base ** exp\n    \ndef find_power_2(base, exp):\n    '''\n    Write a python function to find the power of a given base and exponent.\n    '''\n    from math import pow\n    return pow(base, exp)\n    \ndef factorial_recursive(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n    \ndef factorial_iterative(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n    \ndef sum_of_digits_recursive(n):\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits_recursive(n//10)\n    \ndef sum_of_digits_iterative(n):\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n    \ndef reverse(string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return string[::-1]\n    \ndef recursive_fibonacci(n):\n    '''\n    Write a python function to find the nth term of Fibonacci series.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return recursive_fibonacci(n-1) + recursive_fibonacci(n-2)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth term of Fibonacci series.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n    \ndef recursive_reverse(string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    if len(string) == 1:\n        return string\n    else:\n        return string[-1] + recursive_reverse(string[:-1])\n    \ndef recursive_is_palindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(string) == 1:\n        return True\n    elif string[0] == string[-1]:\n        return recursive_is_palindrome(string[1:-1])\n    else:\n        return False\n    \ndef recursive_factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * recursive_factorial(n-1)\n    \ndef recursive_factorial_iterative(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        total = 1\n        while n > 1:\n            total *= n\n            n -= 1\n        return total\n    \ndef recursive_factorial_recursive(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * recursive_factorial_recursive(n-1)\n    \ndef recursive_factorial_optimized(n):\n    '''\n    Write a python function to find the factorial of a give"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = 0\n    small = 0\n    for x in nums:\n        if x > big:\n            big = x\n        if x < small:\n            small = x\n    return big - small\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def is_perfect_square(n):\n        root = n ** 0.5\n        return root == int(root)\n    return [i for i in range(a, b) if is_perfect_square(i)]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b + 1):\n        perfect_squares.append(i**2)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    if b - a <= 3:\n        if a**2 == b:\n            result.append(a)\n        return result\n    else:\n        for x in range(a, b+1):\n            if x**2 == x:\n                result.append(x)\n        return result\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b):\n        if i * i < b:\n            result.append(i * i)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for x in range(a, b + 1):\n        if x ** 0.5 == int(x ** 0.5):\n            result.append(x ** 2)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a, b = sorted([a, b])\n    perfect_squares = []\n    x = a\n    while x <= b:\n        y = a\n        while y <= b:\n            if y*y == x:\n                perfect_squares.append([x, y])\n            y += 1\n        x += 1\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sum = 0\n    if (a**.5).is_integer() and (b**.5).is_integer():\n        for x in range(a, b+1):\n            if x**.5 == int(x**.5):\n                sum += x**2\n        return sum\n    else:\n        return None\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def sqrt(n):\n        return int(n**0.5)\n    return [x*x for x in range(sqrt(a), sqrt(b)+1) if a <= x**2 <= b]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(int(a**0.5),int(b**0.5))]\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    t=x**2+y**2\n    return x/cmath.sqrt(t),y/cmath.sqrt(t)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Theta and r are the polar coordinates\n    #Theta is measured from the x-axis clockwise\n    #r is measured from the center of the circle\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=0\n    b=0\n    #a = a\n    #b = b\n    if type(x)==str or type(x)==float:\n        a = x\n        b = y\n    else:\n        a = x[0]\n        b = x[1]\n    #a = x\n    #b = y\n    return (a,b)\ndef cmath_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a = x\n    b = y\n    return cmath.polar(complex(a,b))\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x2 = x*x\n    y2 = y*y\n    x3 = x2 + y2\n    return x3, x2\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x2 = x*x\n    x3 = x2 + y*y\n    return x3, sqrt(x3)\ndef polar_add(x,y):\n    '''\n    Write a function to add polar coordinates (in a tuple)\n    '''\n    x3, x2 = polar_rect(x[0],x[1])\n    y3, y2 = polar_rect(y[0],y[1])\n    x4 = x3 + y3\n    x5 = x2 + y2\n    return x4, x5\ndef rect_add(x,y):\n    '''\n    Write a function to add rectangular coordinates (in a tuple)\n    '''\n    x3 = x[0] + y[0]\n    x4 = x[1] + y[1]\n    return x3, x4\ndef polar_sub(x,y):\n    '''\n    Write a function to subtract polar coordinates (in a tuple)\n    '''\n    x3, x2 = polar_rect(x[0],x[1])\n    y3, y2 = polar_rect(y[0],y[1])\n    x4 = x3 - y3\n    x5 = x2 - y2\n    return x4, x5\ndef rect_sub(x,y):\n    '''\n    Write a function to subtract rectangular coordinates (in a tuple)\n    '''\n    x3 = x[0] - y[0]\n    x4 = x[1] - y[1]\n    return x3, x4\ndef polar_mul(x,y):\n    '''\n    Write a function to multiply polar coordinates (in a tuple)\n    '''\n    x3, x2 = polar_rect(x[0],x[1])\n    y3, y2 = polar_rect(y[0],y[1])\n    x4 = x3 * y3\n    x5 = x2 * y2\n    return x4, x5\ndef rect_mul(x,y):\n    '''\n    Write a function to multiply rectangular coordinates (in a tuple)\n    '''\n    x3 = x[0] * y[0]\n    x4 = x[1] * y[1]\n    return x3, x4\ndef polar_div(x,y):\n    '''\n    Write a function to divide polar coordinates (in a tuple)\n    '''\n    x3, x2 = polar_rect(x[0],x[1])\n    y3, y2 = polar_rect(y[0],y[1])\n    x4 = x3 / y3\n    x5 = x2 / y2\n    return x4, x5\ndef rect_div(x,y):\n    '''\n    Write a function to divide rectangular coordinates (in a tuple)\n    '''\n    x3 = x[0] / y[0]\n    x4 = x[1] / y[1]\n    return x3, x4\ndef rect_neg(x):\n    '''\n    Write a function to negate a rectangular coordinates (in a tuple)\n    '''\n    x3 = -x[0]\n    x4 = -x[1]\n    return x3, x4\ndef polar_neg(x):\n    '''\n    Write a function to negate a polar coordinates (in a tuple)\n    '''\n    x3 = -x[0]\n    x4 = -x[1]\n    return x3, x4\ndef polar_eq(x,y):\n    '''\n    Write a function to compare polar coordinates (in a tuple)\n    '''\n    x3, x2 = polar_rect(x[0],x[1])\n    y3, y2 = polar_rect(y[0],y[1])\n    if x3 == y3 and x2 == y2:\n        return True\n    else:\n        return False\ndef rect_eq(x,y):\n    '''\n    Write a function to compare rectangular coordinates (in a tuple)\n    '''\n    x3 = x[0] == y[0]\n    x4 = x[1] == y[1]\n    return x3 and x4\ndef rect_pow(x,y):\n    '''\n    Write a function to raise rectangular coordinates to a power\n    '''\n    x3 = x[0] ** y[0]\n    x4 = x[1] ** y[1]\n    return x3, x4\ndef polar_pow(x,y):\n    '''\n    Write a function to raise polar coordinates to a power\n    '''\n    x3 = x[0] ** y[0]\n    x4 = x[1] ** y[1]\n    return x3, x4\ndef rect_pow(x,y):\n    '''\n    Write a function to raise rectangular coordinates to a power\n    '''\n    x3 = x[0] ** y[0]\n    x4 = x[1] ** y[1]\n    return x3, x4\ndef rect_t(x,y):\n    '''\n    Write a function to transpose a rectangular coordinates (in a tuple)\n    '''\n    x3 = x[1]\n    x4 = y[0]\n    return x3, x4\ndef polar_t(x,y):\n    '''\n    Write a function to transpose a polar coordinates (in a tuple)\n    '''\n    x3 = x[1]\n    x4 = y[0]\n    return x3, x4\ndef rect_x(x,y):\n    '''\n    Write a function to return the first element of a rectangular coordinates (in a tuple)\n    '''\n    return x[0]\ndef polar_x(x,y):\n    '''\n    Write a function to return the first element of a polar coordinates (in a tuple)\n    '''\n    return x[0]\ndef rect_y(x,y):\n    '''\n    Write a function to return the second element of a rectangular coordinates (in a tuple)\n    '''\n    return x[1]\ndef polar_y(x,y):\n    '''\n    Write a function to return the second element of a polar coordinates (in a tuple)\n    '''\n    return x[1]\ndef rect_abs(x,y):\n    '''\n    Write a function to return the absolute value of a rectangular coordinates (in a tuple)\n    '''\n    x3 = abs(x[0])\n    x4 = abs(x[1])\n    return x3, x4\ndef polar_abs(x,y):\n    '''\n    Write a function to return the absolute value of a polar coordinates (in a tuple)\n    '''\n    x3 = abs(x[0])\n    x4 = abs(x[1])\n    return x3, x4\ndef rect_l(x,y):\n    '''\n    Write a function to return the length of a rectangular coordinates (in a tuple)\n    '''\n    x3 = sqrt(x[0]*x[0] + x[1]*x[1])\n    x4 = sqrt(y[0]*y[0] + y[1]*y[1])\n    return x3, x4\ndef polar_l(x,y):\n    '''\n    Write a function to return the length of a polar coordinates (in a tuple)\n    '''\n    x3 = sqrt(x[0]*x[0] + x[1]*x[1])\n    x4 = sqrt(y[0]*y[0] + y[1]*y[1])\n    return x3, x4\ndef rect_p(x,y):\n    '''\n    Write a function to return the perimeter of a rectangular coordinates (in a tuple)\n    '''\n    x3 = 2*x[0] + 2*x[1]\n    x4 = 2*y[0] + 2*y[1]\n    return x3, x4\ndef polar_p(x,y):\n    '''\n    Write a function to return the perimeter of a polar coordinates (in a tuple)\n    '''\n    x3 = 2*x[0] + "
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect=complex(x,y)\n    rect_x=int(rect.real)\n    rect_y=int(rect.imag)\n    return rect_x,rect_y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    polar=complex(x,y)\n    polar_x=int(polar.real)\n    polar_y=int(polar.imag)\n    return polar_x,polar_y\ndef inverse_polar(polar):\n    '''\n    Write a function to convert polar coordinates to inverse polar coordinates.\n    '''\n    inverse_polar=cmath.sqrt(polar)\n    inverse_polar_x=int(inverse_polar.real)\n    inverse_polar_y=int(inverse_polar.imag)\n    return inverse_polar_x,inverse_polar_y\ndef inverse_rect(rect):\n    '''\n    Write a function to convert rectangular coordinates to inverse rectangular coordinates.\n    '''\n    inverse_rect=complex(rect[0],rect[1])\n    inverse_rect_x=int(inverse_rect.real)\n    inverse_rect_y=int(inverse_rect.imag)\n    return inverse_rect_x,inverse_rect_y\ndef polar_triangle(x,y):\n    '''\n    Write a function to convert polar coordinates to triangular coordinates.\n    '''\n    triangle=complex(x,y)\n    triangle_x=int(triangle.real)\n    triangle_y=int(triangle.imag)\n    return triangle_x,triangle_y\ndef rect_triangle(x,y):\n    '''\n    Write a function to convert rectangular coordinates to triangular coordinates.\n    '''\n    triangle=complex(x,y)\n    triangle_x=int(triangle.real)\n    triangle_y=int(triangle.imag)\n    return triangle_x,triangle_y\ndef polar_circle(r):\n    '''\n    Write a function to convert polar coordinates to circular coordinates.\n    '''\n    circle=cmath.sqrt(r)\n    circle_x=int(circle.real)\n    circle_y=int(circle.imag)\n    return circle_x,circle_y\ndef rect_circle(r):\n    '''\n    Write a function to convert rectangular coordinates to circular coordinates.\n    '''\n    circle=cmath.sqrt(r)\n    circle_x=int(circle.real)\n    circle_y=int(circle.imag)\n    return circle_x,circle_y\ndef polar_square(r):\n    '''\n    Write a function to convert polar coordinates to square coordinates.\n    '''\n    square=cmath.sqrt(r)\n    square_x=int(square.real)\n    square_y=int(square.imag)\n    return square_x,square_y\ndef rect_square(r):\n    '''\n    Write a function to convert rectangular coordinates to square coordinates.\n    '''\n    square=cmath.sqrt(r)\n    square_x=int(square.real)\n    square_y=int(square.imag)\n    return square_x,square_y\ndef polar_rect_3d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect=complex(x,y,z)\n    rect_x=int(rect.real)\n    rect_y=int(rect.imag)\n    return rect_x,rect_y\ndef rect_polar_3d(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    polar=complex(x,y,z)\n    polar_x=int(polar.real)\n    polar_y=int(polar.imag)\n    return polar_x,polar_y\ndef inverse_polar(polar):\n    '''\n    Write a function to convert polar coordinates to inverse polar coordinates.\n    '''\n    inverse_polar=cmath.sqrt(polar)\n    inverse_polar_x=int(inverse_polar.real)\n    inverse_polar_y=int(inverse_polar.imag)\n    return inverse_polar_x,inverse_polar_y\ndef inverse_rect_3d(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to inverse rectangular coordinates.\n    '''\n    inverse_rect=complex(x,y,z)\n    inverse_rect_x=int(inverse_rect.real)\n    inverse_rect_y=int(inverse_rect.imag)\n    return inverse_rect_x,inverse_rect_y\ndef polar_triangle_3d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to triangular coordinates.\n    '''\n    triangle=complex(x,y,z)\n    triangle_x=int(triangle.real)\n    triangle_y=int(triangle.imag)\n    return triangle_x,triangle_y\ndef rect_triangle_3d(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to triangular coordinates.\n    '''\n    triangle=complex(x,y,z)\n    triangle_x=int(triangle.real)\n    triangle_y=int(triangle.imag)\n    return triangle_x,triangle_y\ndef polar_circle_3d(r):\n    '''\n    Write a function to convert polar coordinates to circular coordinates.\n    '''\n    circle=cmath.sqrt(r)\n    circle_x=int(circle.real)\n    circle_y=int(circle.imag)\n    return circle_x,circle_y\ndef rect_circle_3d(r):\n    '''\n    Write a function to convert rectangular coordinates to circular coordinates.\n    '''\n    circle=cmath.sqrt(r)\n    circle_x=int(circle.real)\n    circle_y=int(circle.imag)\n    return circle_x,circle_y\ndef polar_square_3d(r):\n    '''\n    Write a function to convert polar coordinates to square coordinates.\n    '''\n    square=cmath.sqrt(r)\n    square_x=int(square.real)\n    square_y=int(square.imag)\n    return square_x,square_y\ndef rect_square_3d(r):\n    '''\n    Write a function to convert rectangular coordinates to square coordinates.\n    '''\n    square=cmath.sqrt(r)\n    square_x=int(square.real)\n    square_y=int(square.imag)\n    return square_x,square_y\ndef quadrant_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to quadrant coordinates.\n    '''\n    quadrant=complex(x,y)\n    quadrant_x=int(quadrant.real)\n    quadrant_y=int(quadrant.imag)\n    return quadrant_x,quadrant_y\ndef quadrant_polar(r,phi):\n    '''\n    Write a function to convert polar coordinates to quadrant coordinates.\n    '''\n    quadrant=cmath.sqrt(r)\n    quadrant_x=int(quadrant.real)\n    quadrant_y=int(quadrant.imag)\n    return quadrant_x,quadrant_y\ndef quadrant_rect_3d(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to quadrant coordinates.\n    '''\n    quadrant=complex(x,y,z)\n    quadrant_x=int(quadrant.real)\n    quadrant_y=int(quadrant.imag)\n    return quadrant_x,quadrant_y\ndef quadrant_polar_3d(r,phi):\n    '''\n    Write a function to convert polar coordinates to quadrant coordinates.\n    '''\n    quadrant=cmath.sqrt(r)\n    quadrant_x=int(quadrant.real)\n    quadrant_y=int(quadrant.imag)\n    return quadrant_x,quadran"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef polar_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef polar_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r):\n    a=r[0]**2+r[1]**2\n    t=(-r[1]*math.cos(r[0])/a,r[0]*math.sin(r[0])/a)\n    return t\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=cmath.rect(x,cmath.phase(y))\n    return (a.real,a.imag)\ndef rect_t_to_r(t):\n    return t[0]**2+t[1]**2\ndef rect_r_to_t(r)"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rect = int(round(x*(1-y)))\n    y_rect = int(round(y*(1+x)))\n    return x_rect,y_rect\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef polar_rect2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef polar_rect3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar10(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar11(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar12(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar13(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar14(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar15(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar16(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar17(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar18(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar19(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar20(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar21(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar22(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar23(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar24(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar25(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar26(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar27(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar28(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar29(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect_polar30(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    m=x**2+y**2\n    n=cmath.sqrt(m)\n    return n,0\ndef rect"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef polar_to_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef rect_to_polar_c(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef test_rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef test_rect_to_polar_c(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef find_sine_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef find_cos_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef find_tan_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef find_sine_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef find_cos_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef find_tan_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef create_sine_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef create_cos_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef create_tan_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef create_sine_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef create_cos_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef create_tan_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_polar(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_polar_c(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef rect_to_mod_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef rect_to_mod_polar_c(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef mod_to_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_to_rect_c(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_to_polar(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_to_polar_c(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef rect_to_mod_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef rect_to_mod_polar_c(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef polar_to_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef rect_to_polar_c(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef test_rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef test_rect_to_polar_c(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef find_sine_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef find_cos_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef find_tan_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef find_sine_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef find_cos_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef find_tan_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef create_sine_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef create_cos_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef create_tan_rect(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef create_sine_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef create_cos_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef create_tan_polar(r, theta, z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_polar(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_polar_c(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef rect_to_mod_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef rect_to_mod_polar_c(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\ndef mod_to_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_to_rect_c(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\ndef mod_to_polar(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangula"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    listLen = len(newList)\n    newList[0], newList[listLen - 1] = newList[listLen - 1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList)<= 1:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # newList = [11,2,3,4,5,6]\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    # print(newList)\n    # newList = [2,3,4,5,6,11]\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    # print(newList)\n    # newList = [4,5,6,11,2,3]\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    # print(newList)\n    # newList = [11,2,3,4,5,6]\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    # print(newList)\n    # newList = [4,5,6,11,2,3]\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    # print(newList)\n    # newList = [11,2,3,4,5,6]\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    # print(newList)\n    newList = [11,2,3,4,5,6]\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    \ndef swap_List_2(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    \ndef insertion_sort(newList):\n    '''\n    Write a python function to sort a list by insertion sort.\n    '''\n    for i in range(1, len(newList)):\n        current = newList[i]\n        position = i\n        while position > 0 and newList[position - 1] > current:\n            newList[position] = newList[position - 1]\n            position = position - 1\n        newList[position] = current\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef move_List(newList):\n    '''\n    Write a python function to move the last element to the front of the list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\ndef reverse_List(newList):\n    '''\n    Write a python function to reverse the elements of a list.\n    '''\n    newList.reverse()\n    return newList\ndef insert_List(newList):\n    '''\n    Write a python function to insert the given element at the given index.\n    '''\n    newList.insert(2,'k')\n    return newList\ndef convert_List_int(newList):\n    '''\n    Write a python function to convert the elements of a list to integers.\n    '''\n    newList = map(int, newList)\n    return newList\ndef convert_List_str(newList):\n    '''\n    Write a python function to convert the elements of a list to strings.\n    '''\n    newList = map(str, newList)\n    return newList\ndef convert_List_float(newList):\n    '''\n    Write a python function to convert the elements of a list to floats.\n    '''\n    newList = map(float, newList)\n    return newList\ndef odd_List(newList):\n    '''\n    Write a python function to return the odd elements of a list.\n    '''\n    oddList = []\n    for i in newList:\n        if i%2!=0:\n            oddList.append(i)\n    return oddList\ndef odd_List_sorted(newList):\n    '''\n    Write a python function to return the odd elements of a list sorted in ascending order.\n    '''\n    oddList = []\n    for i in newList:\n        if i%2!=0:\n            oddList.append(i)\n    oddList.sort()\n    return oddList\ndef even_List(newList):\n    '''\n    Write a python function to return the even elements of a list.\n    '''\n    evenList = []\n    for i in newList:\n        if i%2==0:\n            evenList.append(i)\n    return evenList\ndef even_List_sorted(newList):\n    '''\n    Write a python function to return the even elements of a list sorted in ascending order.\n    '''\n    evenList = []\n    for i in newList:\n        if i%2==0:\n            evenList.append(i)\n    evenList.sort()\n    return evenList\ndef vowel_List(newList):\n    '''\n    Write a python function to return the vowels in a list.\n    '''\n    vowelList = []\n    for i in newList:\n        if i in 'aeiou':\n            vowelList.append(i)\n    return vowelList\ndef vowel_List_sorted(newList):\n    '''\n    Write a python function to return the vowels in a list sorted in ascending order.\n    '''\n    vowelList = []\n    for i in newList:\n        if i in 'aeiou':\n            vowelList.append(i)\n    vowelList.sort()\n    return vowelList\ndef cons_List(newList):\n    '''\n    Write a python function to return the consonants in a list.\n    '''\n    consList = []\n    for i in newList:\n        if i not in 'aeiou':\n            consList.append(i)\n    return consList\ndef cons_List_sorted(newList):\n    '''\n    Write a python function to return the consonants in a list sorted in ascending order.\n    '''\n    consList = []\n    for i in newList:\n        if i not in 'aeiou':\n            consList.append(i)\n    consList.sort()\n    return consList\ndef factorial_List(newList):\n    '''\n    Write a python function to calculate the factorial of each element of a list.\n    '''\n    factList = []\n    for i in newList:\n        factList.append(math.factorial(i))\n    return factList\ndef palindrome_List(newList):\n    '''\n    Write a python function to return the elements of a list are palindrome or not.\n    '''\n    palList = []\n    for i in newList:\n        if i == i[::-1]:\n            palList.append(i)\n    return palList\ndef palindrome_List_sorted(newList):\n    '''\n    Write a python function to return the elements of a list are palindrome or not in ascending order.\n    '''\n    palList = []\n    for i in newList:\n        if i == i[::-1]:\n            palList.append(i)\n    palList.sort()\n    return palList\ndef reverse_String(newList):\n    '''\n    Write a python function to reverse the elements of a string.\n    '''\n    newList = newList[::-1]\n    return newList\ndef unique_List(newList):\n    '''\n    Write a python function to return the unique elements of a list.\n    '''\n    uniqueList = []\n    for i in newList:\n        if i not in uniqueList:\n            uniqueList.append(i)\n    return uniqueList\ndef unique_List_sorted(newList):\n    '''\n    Write a python function to return the unique elements of a list in ascending order.\n    '''\n    uniqueList = []\n    for i in newList:\n        if i not in uniqueList:\n            uniqueList.append(i)\n    uniqueList.sort()\n    return uniqueList\ndef sort_List(newList):\n    '''\n    Write a python function to return the elements of a list sorted in ascending order.\n    '''\n    newList.sort()\n    return newList\ndef sort_List_sorted(newList):\n    '''\n    Write a python function to return the elements of a list in ascending order.\n    '''\n    newList.sort()\n    return newList\ndef f_List(newList):\n    '''\n    Write a python function to return the elements of a list as a list of strings.\n    '''\n    fList = []\n    for i in newList:\n        fList.append(str(i))\n    return fList\ndef sum_List(newList):\n    '''\n    Write a python function to return the sum of all the elements of a list.\n    '''\n    sumList = 0\n    for i in newList:\n        sumList = sumList + i\n    return sumList\ndef avg_List(newList):\n    '''\n    Write a python function to return the average of all the elements of a list.\n    '''\n    avgList = sum_List(newList) / len(newList)\n    return avgList\ndef index_List(newList):\n    '''\n    Write a python function to return the index of a given element of a list.\n    '''\n    indexList = []\n    for i in newList:\n        indexList.append(newList.index(i))\n    return indexList\ndef index_List_sorted(newList):\n    '''\n    Write a python function to return the index of a given element of a list in ascending order.\n    '''\n    indexList = []\n    for i in newList:\n        indexList.append(newList.index(i))\n    indexList.sort()\n    return indexList\ndef median_List(newList):\n    '''\n    Write a python function to return the median of all the elements of a list.\n    '''\n    medianList = []\n    for i in newList:\n        medianList.append(newList.index(i))\n    medianList.sort()\n    if len(medianList)%2!= 0:\n        median = (medianList[int((len(medianList)-1)/2)] + medianList[int((len(medianList)-1)/2)+1])/2\n    else:\n        median = (medianList[int(len(medianList)/2-1)] + medianList[int(len(medianList)/2)])/2\n    return median\ndef mode_List(newList):\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList[0], newList[-1] = newList[-1], newList[0]\n    newList[:] = newList[-1:] + newList[:-1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return [newList[-1],newList[0]]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    listLength = len(newList)\n    listLength = listLength - 1\n    temp = newList[0]\n    newList[0] = newList[listLength]\n    newList[listLength] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # Your Code Here\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b=1\n    for i in range(1,k+1):\n        b=b*n\n        n=n-1\n    b=b/(k+1)\n    return b\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n:\n        return 0\n    if k==0:\n        return 1\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n<0:\n        return 0\n    return n*factorial(n-1)\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    t=n\n    rev=0\n    while n>0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if t==rev:\n        return True\n    else:\n        return False\ndef is_palindrome1(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    t=n\n    rev=0\n    while n>0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if t==rev:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    if n<=0:\n        return False\n    else:\n        s=0\n        for i in range(1,n):\n            if n%i==0:\n                s=s+i\n        if s==n:\n            return True\n        else:\n            return False\ndef is_perfect1(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            sum=sum+i\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_perfect2(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            sum=sum+i\n        i=i+1\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_perfect3(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    if n<0:\n        return False\n    else:\n        s=0\n        for i in range(1,n):\n            if n%i==0:\n                s=s+i\n        if s==n:\n            return True\n        else:\n            return False\ndef is_perfect4(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s=s+i\n    if s==n:\n        return True\n    else:\n        return False\ndef is_perfect5(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        if n%i==0:\n            sum=sum+i\n        i=i+1\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_perfect6(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        if n%i==0:\n            sum=sum+i\n        i=i+1\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_perfect7(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            sum=sum+i\n        i=i+1\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_perfect8(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            sum=sum+i\n        i=i+1\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_perfect9(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            sum=sum+i\n        i=i+1\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_perfect10(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s=s+i\n    if s==n:\n        return True\n    else:\n        return False\ndef is_perfect11(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            s=s+i\n        i=i+1\n    if s==n:\n        return True\n    else:\n        return False\ndef is_perfect12(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s=s+i\n    if s==n:\n        return True\n    else:\n        return False\ndef is_perfect13(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            s=s+i\n        i=i+1\n    if s==n:\n        return True\n    else:\n        return False\ndef is_perfect14(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            s=s+i\n        i=i+1\n    if s==n:\n        return True\n    else:\n        return False\ndef is_perfect15(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            s=s+i\n        i=i+1\n    if s==n:\n        return True\n    else:\n        return False\ndef is_perfect16(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            s=s+i\n        i=i+1\n    if s==n:\n        return True\n    else:\n        return False\ndef is_perfect17(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            s=s+i\n        i=i+1\n    if s=="
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coefficient = [0 for i in range(k+1)]\n    coefficient[0] = 1\n    for i in range(1,n+1):\n        for j in range(min(i,k)+1):\n            if j == 0 or j == i:\n                coefficient[j] = 1\n            else:\n                coefficient[j] = coefficient[j] + coefficient[j-1]\n    return coefficient[k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (factorial(n)/(factorial(k)*factorial(n-k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    for i in range(1,k+1):\n        c = c * (n - i + 1)/i\n    return c\n    \ndef binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    for i in range(1,k+1):\n        c = c * (n - i + 1)/i\n    return c\ndef comb(n,x):\n    '''\n    Write a python function to find the combinatorial coefficient of a number in a range.\n    '''\n    num = binomial_Coeff(n,x)\n    den = binomial_Coeff(n,n-x)\n    return num/den\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int((math.factorial(n))/((math.factorial(k))*(math.factorial(n-k))))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int((factorial(n))/(factorial(k)*factorial(n-k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    for i in range(min(k, n - k)):\n        c = c * (n - i) / float(i + 1)\n    return c\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in range(k+1)] for x in range(n+1)] \n    for i in range(0,n+1): \n        for j in range(0,min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in xrange(min(k, n-k)): \n        result = result * (n - i) / float(i + 1) \n    return result \n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    l=len(ip)\n    if l==0:\n        return ip\n    elif l==1:\n        if ip=='0':\n            return ip\n        else:\n            return ip\n    else:\n        if ip[0]=='0':\n            return removezero_ip(ip[1:])\n        else:\n            return ip\n    \ndef remove_double(string):\n    '''\n    Remove adjacent duplicate characters from a given string\n    '''\n    new_string=''\n    for i in string:\n        if i not in new_string:\n            new_string+=i\n    return new_string\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    nums = ip.split('.')\n    return '.'.join([str(int(num)) for num in nums])\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip.startswith('0')):\n        return ip[1:]\n    else:\n        return ip\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    if(port.startswith('0')):\n        return port[1:]\n    else:\n        return port\ndef get_dic(dic):\n    '''\n    Write a function to remove non-alphanumeric character from a dictionary\n    '''\n    for i in dic:\n        dic[i]=re.sub(r'[^a-zA-Z0-9]+', '', dic[i])\n    return dic\ndef clean_dic(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n    return dic\ndef get_dic2(dic):\n    '''\n    Write a function to remove all leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n    return dic\ndef get_dic3(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n    return dic\ndef get_dic4(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n    return dic\ndef get_dic5(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n        dic[i]=dic[i].strip('_')\n    return dic\ndef get_dic6(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n        dic[i]=dic[i].strip('_')\n        dic[i]=dic[i].strip('|')\n    return dic\ndef get_dic7(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n        dic[i]=dic[i].strip('_')\n        dic[i]=dic[i].strip('|')\n        dic[i]=dic[i].strip('/')\n    return dic\ndef get_dic8(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n        dic[i]=dic[i].strip('_')\n        dic[i]=dic[i].strip('|')\n        dic[i]=dic[i].strip('/')\n        dic[i]=dic[i].strip('<')\n        dic[i]=dic[i].strip('>')\n    return dic\ndef get_dic9(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n        dic[i]=dic[i].strip('_')\n        dic[i]=dic[i].strip('|')\n        dic[i]=dic[i].strip('/')\n        dic[i]=dic[i].strip('<')\n        dic[i]=dic[i].strip('>')\n        dic[i]=dic[i].strip('%')\n    return dic\ndef get_dic10(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n        dic[i]=dic[i].strip('_')\n        dic[i]=dic[i].strip('|')\n        dic[i]=dic[i].strip('/')\n        dic[i]=dic[i].strip('<')\n        dic[i]=dic[i].strip('>')\n        dic[i]=dic[i].strip('%')\n        dic[i]=dic[i].strip('$')\n    return dic\ndef get_dic11(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n        dic[i]=dic[i].strip('_')\n        dic[i]=dic[i].strip('|')\n        dic[i]=dic[i].strip('/')\n        dic[i]=dic[i].strip('<')\n        dic[i]=dic[i].strip('>')\n        dic[i]=dic[i].strip('%')\n        dic[i]=dic[i].strip('$')\n        dic[i]=dic[i].strip('&')\n    return dic\ndef get_dic12(dic):\n    '''\n    Write a function to remove leading and trailing whitespaces from a dictionary\n    '''\n    for i in dic:\n        dic[i]=dic[i].strip()\n        dic[i]=dic[i].strip(' ')\n        dic[i]=dic[i].strip('\"')\n        dic[i]=dic[i].strip('-')\n        dic[i]=dic[i].strip('_')\n        dic[i]=dic[i].strip('|')\n        dic[i]=dic[i].strip('/')\n        dic[i]=dic[i].strip('<')\n        dic[i]=dic[i].strip('>')\n        dic[i]=dic[i].strip('%')\n        dic[i]=dic[i].strip('$')\n        dic[i]=dic[i].stri"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # \\d is same as [0-9]\n    # \\. is same as [.]\n    # \\d* means any number of zero or more digits\n    # \\d+ means one or more digits\n    # [0-9] means one or more digits\n    return re.sub('\\.0*', '.', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    p = re.compile('(\\d{1,3}\\.){3}\\d{1,3}')\n    if re.match(p, ip):\n        return p.sub('\\g<1>', ip)\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip1 = list(ip)\n    ip2 = []\n    for i in range(len(ip1)):\n        if ip1[i]!= \".\":\n            ip2.append(ip1[i])\n    return \".\".join(ip2)\ndef removezero_ips(ip):\n    '''\n    Write a function to remove leading zeroes from all the ips in a list.\n    '''\n    result = []\n    for ip_element in ip:\n        ip1 = list(ip_element)\n        ip2 = []\n        for i in range(len(ip1)):\n            if ip1[i]!= \".\":\n                ip2.append(ip1[i])\n        result.append(\".\".join(ip2))\n    return result\ndef ip_to_dec(ip):\n    '''\n    Write a function that takes in a dotted-quad IP address and returns the numerical value of the IP address.\n    '''\n    ip1 = ip.split(\".\")\n    dec_value = 0\n    for i in range(len(ip1)):\n        dec_value += int(ip1[i]) * pow(256, len(ip1)-1-i)\n    return dec_value\ndef dec_to_ip(dec_value):\n    '''\n    Write a function that takes in a numerical IP address and returns the corresponding dotted-quad IP address.\n    '''\n    ip1 = []\n    while dec_value > 0:\n        ip1.append(str(dec_value % 256))\n        dec_value /= 256\n    return \".\".join(ip1[::-1])\ndef ip_to_hex(ip):\n    '''\n    Write a function that takes in a dotted-quad IP address and returns the numerical value of the IP address in hexadecimal.\n    '''\n    ip1 = ip.split(\".\")\n    hex_value = hex(ip_to_dec(ip))[2:]\n    return hex_value\ndef hex_to_ip(hex_value):\n    '''\n    Write a function that takes in a hexadecimal IP address and returns the corresponding dotted-quad IP address.\n    '''\n    ip1 = []\n    while len(hex_value) % 2 == 0:\n        ip1.append(chr(int(hex_value[:2], 16)))\n        hex_value = hex_value[2:]\n    ip1.append(chr(int(hex_value[:2], 16)))\n    ip1.reverse()\n    return \".\".join(ip1)\ndef ip_to_octal(ip):\n    '''\n    Write a function that takes in a dotted-quad IP address and returns the numerical value of the IP address in octal.\n    '''\n    ip1 = ip.split(\".\")\n    octal_value = oct(ip_to_dec(ip))[2:]\n    return octal_value\ndef octal_to_ip(octal_value):\n    '''\n    Write a function that takes in a octal IP address and returns the corresponding dotted-quad IP address.\n    '''\n    ip1 = []\n    while len(octal_value) > 0:\n        ip1.append(str(octal_value[:3]))\n        octal_value = octal_value[3:]\n    ip1.reverse()\n    return \".\".join(ip1)\ndef ip_to_binary(ip):\n    '''\n    Write a function that takes in a dotted-quad IP address and returns the numerical value of the IP address in binary.\n    '''\n    ip1 = ip.split(\".\")\n    binary_value = bin(ip_to_dec(ip))[2:]\n    return binary_value\ndef binary_to_ip(binary_value):\n    '''\n    Write a function that takes in a binary IP address and returns the corresponding dotted-quad IP address.\n    '''\n    ip1 = []\n    while len(binary_value) > 0:\n        ip1.append(str(binary_value[:8]))\n        binary_value = binary_value[8:]\n    ip1.reverse()\n    return \".\".join(ip1)\ndef ip_to_packed(ip):\n    '''\n    Write a function that takes in a dotted-quad IP address and returns a packed string that is equivalent to the input IP address.\n    '''\n    ip1 = ip.split(\".\")\n    packed_value = \"\"\n    for i in range(len(ip1)):\n        packed_value += (str(len(ip1[i]))+\" \")\n    return packed_value\ndef packed_to_ip(packed_value):\n    '''\n    Write a function that takes in a packed IP address and returns the corresponding dotted-quad IP address.\n    '''\n    ip1 = []\n    start_index = 0\n    while start_index < len(packed_value):\n        ip_length = int(packed_value[start_index:start_index+2], 10)\n        ip1.append(packed_value[start_index+2:start_index+2+ip_length])\n        start_index += 2+ip_length\n    ip1.reverse()\n    return \".\".join(ip1)\ndef ip_to_reverse_packed(ip):\n    '''\n    Write a function that takes in a dotted-quad IP address and returns the packed string that is equivalent to the input IP address in reverse byte order.\n    '''\n    ip1 = ip.split(\".\")\n    packed_value = \"\"\n    for i in range(len(ip1)):\n        packed_value += (str(len(ip1[i]))+\" \")\n    packed_value = packed_value[:-1]\n    reverse_packed_value = packed_value[::-1]\n    return reverse_packed_value\ndef reverse_packed_to_ip(reverse_packed_value):\n    '''\n    Write a function that takes in a packed IP address in reverse byte order and returns the corresponding dotted-quad IP address.\n    '''\n    ip1 = []\n    start_index = 0\n    while start_index < len(reverse_packed_value):\n        ip_length = int(reverse_packed_value[start_index:start_index+2], 10)\n        ip1.append(reverse_packed_value[start_index+2:start_index+2+ip_length])\n        start_index += 2+ip_length\n    ip1.reverse()\n    return \".\".join(ip1)\ndef ip_to_compressed(ip):\n    '''\n    Write a function that takes in a dotted-quad IP address and returns the compressed string that is equivalent to the input IP address.\n    '''\n    ip1 = ip.split(\".\")\n    compressed_value = \"\"\n    for i in range(len(ip1)):\n        if ip1[i] == \"0\":\n            continue\n        if i == 0:\n            compressed_value += ip1[i]\n            continue\n        compressed_value += (ip1[i][0]+str(len(ip1[i])-1))\n    return compressed_value\ndef compressed_to_ip(compressed_value):\n    '''\n    Write a function that takes in a compressed IP address and returns the corresponding dotted-quad IP address.\n    '''\n    ip1 = []\n    start_index = 0\n    while start_index < len(compressed_value):\n        if start_index == len(compressed_value)-1:\n            ip1.append(compressed_value[start_index])\n            break\n        ip_length = int(compressed_value[start_index:start_index+2], 10)\n        ip1.append(compressed_value[start_index+2:start_index+2+ip_length])\n        start_index += 2+ip_length\n    ip1.reverse()\n    return \".\".join(ip1)\ndef ip_to_bracketed(ip):\n    '''\n    Write a function that takes in a dotted-quad IP address and returns the string equivalent to the input IP address enclosed in square brackets.\n    '''\n    ip1 = ip.split(\".\")\n    bracketed_value = \"[\"\n    for i in range(len(ip1)):\n        bracketed_value += ip1[i]\n        if i < len(ip1)-1:\n            bracketed_value += \".\"\n    bracketed_value += \"]\"\n    return bracketed_value\ndef brackete"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    temp = ip.split('.')\n    temp = [int(i) for i in temp]\n    s = [str(i) for i in temp]\n    res = ''.join(s)\n    return res\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip = [x for x in ip if x!= '0']\n    return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    remove = re.sub(r'\\.(0{3})',r'\\1',ip)\n    return remove\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    print \"even = \", even\n    print \"odd = \", odd\n    print \"difference = \", abs(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1[0] % 2 == 0:\n        return list1[1] - list1[0]\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return 0\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i % 2 == 0:\n            list2.append(i)\n    if len(list2) == 0:\n        return None\n    return list2[0] - list2[-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0]\n    elif len(list1) > 1:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    even = list1[0]\n    odd = list1[1]\n    \n    if even%2 == 0:\n        even_diff = even - odd\n    elif even%2!= 0:\n        even_diff = odd - even\n    \n    return even_diff\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_num = list1[i]\n        else:\n            odd_num = list1[i]\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    elif list1[0] % 2 == 0:\n        return diff_even_odd(list1[1:])\n    else:\n        return list1[0] - diff_even_odd(list1[1:])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return (even_list[0] - odd_list[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 1:\n        raise ValueError(\"Empty list\")\n    if len(list1) < 2:\n        raise ValueError(\"List should have at least 2 elements\")\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    if len(str2)!=n : \n        return -1\n    bitmap1 = [0]*n\n    bitmap2 = [0]*n\n    for i in range(n) : \n        if str1[i]=='0' : \n            bitmap1[i] = 1\n        else :\n            bitmap2[i] = 1\n    #print bitmap1,bitmap2\n    count = 0\n    for i in range(n) : \n        if bitmap1[i]!=bitmap2[i] : \n            count += 1\n            ind = i\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i = 0\n    n1 = len(str1)\n    n2 = len(str2)\n    res = 0\n    while i<n1:\n        if str1[i]=='0' and str2[i]=='1':\n            res+=1\n            str2=str2[:i]+'0'+str2[i+1:]\n        elif str1[i]=='1' and str2[i]=='0':\n            res+=1\n            str1=str1[:i]+'1'+str1[i+1:]\n        i+=1\n    return res\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    a = 0\n    b = 0\n    c = 0\n    for i in range(0,len(str1)) :\n        if str1[i] == str2[i] :\n            continue\n        else :\n            if str1[i] == '0' :\n                a += 1\n            else :\n                b += 1\n    return min(a,b)\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    length = len(str1)\n    if length!= len(str2): \n        return -1\n    count = 0\n    for i in range(length) :\n        if str1[i]!= str2[i] : \n            str1,str2 = str2,str1\n            count += 1\n    return count\ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    length = len(str1)\n    if length!= len(str2): \n        return -1\n    count = 0\n    for i in range(length) :\n        if str1[i]!= str2[i] : \n            str1,str2 = str2,str1\n            count += 1\n    return count\ndef check_Palindrome(str1) :\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    length = len(str1)\n    if length == 0 : \n        return 1\n    elif length == 1 : \n        return 1\n    elif str1[0] == str1[-1] : \n        return check_Palindrome(str1[1:-1])\n    else :\n        return 0\ndef check_Perfect_Number(n) : \n    '''\n    Write a python function to check whether a number is a perfect number or not.\n    '''\n    sum = 1\n    for i in range(1,n) : \n        if n%i == 0 : \n            sum += i\n    if sum == n : \n        return 1\n    else : \n        return 0\ndef check_Permutation(str1,str2) : \n    '''\n    Write a python function to check whether two strings are permutations or not.\n    '''\n    if len(str1)!= len(str2) : \n        return 0\n    else : \n        list1 = list(str1)\n        list2 = list(str2)\n        list1.sort()\n        list2.sort()\n        if list1 == list2 : \n            return 1\n        else :\n            return 0\ndef count_Digits(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    while n : \n        n //= 10\n        count += 1\n    return count\ndef reverse_Digits(n) : \n    '''\n    Write a python function to reverse a number.\n    '''\n    if n == 0 : \n        return 0\n    else : \n        return reverse_Digits(n//10) * 10 + n%10\ndef smallest_Palindrome(n) : \n    '''\n    Write a python function to find the smallest palindrome greater than or equal to a given integer.\n    '''\n    if n == 1 : \n        return 9\n    elif n == 2 : \n        return 11\n    elif n == 3 : \n        return 111\n    else : \n        n += 1\n        while n % 10 == 0 : \n            n //= 10\n        n += 1\n        while n % 10 == 9 : \n            n += 1\n        return n\ndef count_Digits_in_Interval(l,h) : \n    '''\n    Write a python function to count the number of digits in a range.\n    '''\n    count = 0\n    for i in range(l,h+1) : \n        while i : \n            i //= 10\n            count += 1\n    return count\ndef is_Permutation(str1,str2) : \n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    if len(str1)!= len(str2) : \n        return 0\n    else : \n        list1 = list(str1)\n        list2 = list(str2)\n        list1.sort()\n        list2.sort()\n        if list1 == list2 : \n            return 1\n        else : \n            return 0\ndef is_Same_or_Not(str1,str2) : \n    '''\n    Write a python function to check whether two strings are same or not.\n    '''\n    if len(str1)!= len(str2) : \n        return 0\n    else : \n        for i in range(len(str1)) : \n            if str1[i]!= str2[i] : \n                return 0\n        return 1\ndef rotate_Arr(arr,d) : \n    '''\n    Write a python function to rotate an array by d elements.\n    '''\n    if len(arr) == 0 : \n        return 0\n    elif len(arr) == 1 : \n        return arr\n    elif d == 0 : \n        return arr\n    else : \n        d = d%len(arr)\n        if d == 0 : \n            return arr\n        else : \n            return arr[d:] + arr[:d]\ndef is_Diagonal(arr) : \n    '''\n    Write a python function to check whether an array is diagonal or not.\n    '''\n    for i in range(len(arr)) : \n        if i + arr[i] < len(arr) : \n            return 0\n    return 1\ndef is_Pattern(str1,str2) : \n    '''\n    Write a python function to check whether two strings are patterns of each other or not.\n    '''\n    if len(str1)!= len(str2) : \n        return 0\n    else : \n        list1 = list(str1)\n        list2 = list(str2)\n        list1.sort()\n        list2.sort()\n        if list1 == list2 : \n            return 1\n        else : \n            return 0\ndef is_Valid_Number(n) : \n    '''\n    Write a python function to check whether a number is valid or not.\n    '''\n    sum = 0\n    for i in range(1,n) : \n        if n%i == 0 : \n            sum += i\n    if sum == n : \n        return 1\n    else : \n        return 0\ndef max_Swaps(arr) : \n    '''\n    Write a python function to find maximum number of swaps required to sort an array.\n    '''\n    length = len(arr)\n    if length == 0 : \n        return 0\n    elif length == 1 : \n        return 0\n    else : \n        swaps = 0\n        for i in range(length) : \n            if arr[i]!= i + 1 : \n                swap = 0\n                for j in range(length) : \n                    if arr[j] == i + 1 : \n                        arr[j],arr[swap] = arr[swap],arr[j]\n                        swaps += 1\n                        swap += 1\n        return swaps\ndef is_Valid_Number2(n) : \n    '''\n    Write a python function to check whether a number is valid or not.\n    '''\n    sum = 0\n    for i in range(1,n) : \n        if n%i == 0 : \n            sum += i\n    if sum == n : \n        return 1\n    else : \n        return 0\ndef minimum_Swaps(arr) : \n    '''\n    Write a python function to find minimum number of swaps required to sort an array.\n    '''\n    length = len(arr)\n    if length == 0 : \n        return 0\n    elif length == 1 : \n        return 0\n    else : \n        swaps = 0\n        for i in range(length) : \n            if arr[i]!= i + 1 : \n                swap = 0\n                for j in range(length) : \n                    if arr[j] == i + 1 : \n                        arr[j],arr[swap] = arr[swap],arr[j]\n                        swaps += 1\n                        swap += 1\n        return swaps\ndef valid_string(str) : \n    '''\n    Write a python function to check whether a string is valid or not.\n    '''\n    length = len(str)\n    if length == 0 : \n        return "
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2 : \n        return 0\n    else : \n        s1 = len(str1)\n        s2 = len(str2)\n        i = 0\n        while i < s1 and i < s2 :\n            if str1[i]!= str2[i] :\n                break\n            i = i + 1\n        return s1 - i\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return -1\n    if str1 == str2 : \n        return 0\n    count = 0\n    for i in range(0,len(str1)) : \n        if str1[i]!= str2[i] : \n            for j in range(0,len(str1)) : \n                if str1[j]!= str2[i] : \n                    str2 = str2[0:j]+str2[j+1:len(str2)]+str2[j]\n                    count = count+1\n                    break\n    return count\n    \ndef reverse(n): \n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while n > 0 : \n        rev = rev*10 + n%10\n        n = n//10\n    return rev\ndef isPalindrome(n): \n    '''\n    Write a python function to check whether a number is a palindrome.\n    '''\n    if n<0: \n        return False\n    else: \n        rev = reverse(n)\n        if n == rev: \n            return True\n        else: \n            return False\ndef max_Power(a,b):\n    '''\n    Write a python function to find the maximum power of a number with respect to b.\n    '''\n    m = 1\n    while a**m <= b : \n        m = m+1\n    return m-1\ndef isPerfect(n) : \n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    i = 2\n    while i <= n/2 : \n        if n % i == 0 : \n            return False\n        i = i+1\n    return True\ndef count_divisors(n):\n    '''\n    Write a python function to find count of divisors of a number.\n    '''\n    i = 2\n    count = 0\n    while i <= n/2 :\n        if n % i == 0 :\n            count = count+1\n        i = i+1\n    return count\ndef largest_Prime(n): \n    '''\n    Write a python function to find the largest prime number smaller than n.\n    '''\n    i = 2\n    while i <= n/2 : \n        if n % i == 0 : \n            return i\n        i = i+1\n    return n\ndef nth_root(x,n): \n    '''\n    Write a python function to find nth root of a number\n    '''\n    return x**(1/n)\ndef is_Power(a,b) : \n    '''\n    Write a python function to check whether a number is a power of b or not.\n    '''\n    if a == 1 : \n        return True\n    elif a == b : \n        return True\n    elif a < b : \n        return False\n    elif a % b == 0 : \n        return is_Power(a/b,b)\n    else : \n        return False\ndef is_Power_of_Ten(a) : \n    '''\n    Write a python function to check whether a given number is a power of 10 or not.\n    '''\n    return is_Power(a,10)\ndef nth_power(x,n): \n    '''\n    Write a python function to find nth power of a number\n    '''\n    i = 1\n    while i < n : \n        x = x*x\n        i = i+1\n    return x\ndef is_Power_of_Two(n): \n    '''\n    Write a python function to check whether a number is a power of 2 or not.\n    '''\n    if n == 1 : \n        return True\n    elif n == 2 : \n        return True\n    elif n == 4 : \n        return True\n    elif n == 8 : \n        return True\n    elif n == 16 : \n        return True\n    elif n == 32 : \n        return True\n    elif n == 64 : \n        return True\n    elif n == 128 : \n        return True\n    elif n == 256 : \n        return True\n    else : \n        return False\ndef sum_of_Digits(n): \n    '''\n    Write a python function to calculate the sum of digits of a number.\n    '''\n    sum = 0\n    while n!= 0 : \n        sum = sum + n % 10\n        n = n//10\n    return sum\ndef is_power_of_4(n) : \n    '''\n    Write a python function to check whether a number is a power of 4 or not.\n    '''\n    if n == 4 : \n        return True\n    elif n % 4 == 0 : \n        return is_power_of_4(n/4)\n    else : \n        return False\ndef is_power_of_2(n) : \n    '''\n    Write a python function to check whether a number is a power of 2 or not.\n    '''\n    if n == 2 : \n        return True\n    elif n % 2 == 0 : \n        return is_power_of_2(n/2)\n    else : \n        return False\ndef sum_of_digits_of_Power(n): \n    '''\n    Write a python function to calculate the sum of digits of a power of 2.\n    '''\n    if is_power_of_2(n): \n        sum = 0\n        while n!= 0 : \n            sum = sum + n % 10\n            n = n//10\n        return sum\n    else : \n        return -1\ndef is_perfect(n): \n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    sum = sum_of_Digits(n)\n    if sum_of_Digits(n) == n : \n        return True\n    else : \n        return False\ndef sum_of_Digits_of_Power_of_Ten(n): \n    '''\n    Write a python function to calculate the sum of digits of a power of 10.\n    '''\n    if is_power_of_Ten(n) : \n        sum = 0\n        while n!= 0 : \n            sum = sum + n % 10\n            n = n//10\n        return sum\n    else : \n        return -1\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n == 1 : \n        return False\n    elif n == 2 : \n        return True\n    elif n > 2 and n % 2 == 0 : \n        return False\n    else : \n        i = 3\n        while i <= n : \n            if n % i == 0 : \n                return False\n            i = i+2\n    return True\ndef is_perfect_square(n) : \n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    if n == 1 : \n        return True\n    elif n < 1 : \n        return False\n    else : \n        a = n**(0.5)\n        if a - floor(a) == 0 : \n            return True\n        else : \n            return False\ndef count_Divisors(n): \n    '''\n    Write a python function to find count of divisors of a number.\n    '''\n    count = 0\n    i = 2\n    while i <= n/2 : \n        if n % i == 0 :\n            count = count + 1\n        i = i+1\n    return count\ndef perfect_square(n): \n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    if is_perfect_square(n) : \n        return True\n    else : \n        return False\ndef count_Divisors_of_Power_of_Ten(n): \n    '''\n    Write a python function to find count of divisors of a number.\n    '''\n    count = 0\n    i = 1\n    while i <= n : \n        if is_Power_of_Ten(i) : \n            count = count + "
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : return -1\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            j = i + 1\n            while j < len(str1) and str1[j]!= str2[i] : \n                j += 1\n            str2 = str2[:i]+str2[j]+str2[i+1:j]+str2[i]+str2[j+1:]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2 :\n        return 0\n    else :\n        str1_list = list(str1)\n        str2_list = list(str2)\n        count = 0\n        for i in range(len(str1_list)) :\n            if str1_list[i]!= str2_list[i] :\n                str1_list[i],str2_list[i] = str2_list[i],str1_list[i]\n                count = count + 1\n        return count\n        \n        \nprint min_Swaps(\"100\",\"0001\")"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!=str2[i]:\n            count = count + 1\n            str1 = str1[:i] + '1' + str1[i+1:]\n            str2 = str2[:i] + '1' + str2[i+1:]\n    return count\n    \ndef closest(N,K) : \n    '''\n    Write a python program to find the closest value to given number within the given range\n    '''\n    lst = []\n    for i in range(N,K) : \n        lst.append(abs(K-i))\n    print(lst)\n    print(min(lst))\n    \ndef bubblesort(arr) : \n    '''\n    Write a python program to sort the array using bubblesort algorithm\n    '''\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j]>arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    if len(str1)!=len(str2) : \n        return -1\n    \n    if str1==str2 : \n        return 0\n    \n    n=len(str1)\n    m=len(str2)\n    \n    # let's see the pattern \n    # 00010111 \n    # 01101101\n    # 11000110\n    # 01100110\n    # 00111000\n    # 01001001\n    # 11110101\n    \n    a=list(str1)\n    b=list(str2)\n    \n    # we can find each bit by counting on its first 1 \n    # a[0] is the first bit of 01000101 \n    # a[1] is the second bit of 01000101\n    # a[2] is the third bit of 01000101\n    # a[3] is the forth bit of 01000101\n    # a[4] is the fifth bit of 01000101\n    \n    c=[]\n    \n    for i in range(n) : \n        if a[i]=='1' : \n            c.append(i)\n    \n    d=[]\n    for i in range(n) : \n        if b[i]=='1' : \n            d.append(i)\n    \n    # we can find every pair of corresponding bits as well \n    # this is done using list comprehension \n    # let's say a[i] is 1 and a[j] is 0 \n    # then it will give [(i,j)] \n    # i.e. (1,0) (2,1) (3,2) etc \n    \n    e=[[i,j] for i in c for j in d]\n    \n    # since we have all the pairs we can find the sum of all the pairs \n    # and finally the number of pairs \n    \n    x=0\n    for i in e : \n        if i[0]>i[1] : \n            x+=1\n    \n    return x\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n    \ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    size = sys.getsizeof(list_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n    \ndef tuple_sum(tuple_list):\n    '''\n    Write a function that returns the sum of all the elements of the given tuple.\n    '''\n    sum = 0\n    for item in tuple_list:\n        sum += item\n    return sum\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for item in tuple_list:\n        tuple_size += sys.getsizeof(item)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    return tuple_size\n    \ndef compare_tuples(tuple1, tuple2):\n    '''\n    Write a function to compare two tuples.\n    '''\n    if tuple1 == tuple2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes=0\n    for i in range(0,len(tuple_list)):\n        size_in_bytes+=(sys.getsizeof(tuple_list[i]))\n    return size_in_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size \n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return merge(arr1, arr2)[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    n1, n2 = len(arr1), len(arr2)\n    \n    if k > n1 + n2:\n        raise ValueError('k is greater than the sum of the two arrays')\n    \n    i, j = 0, 0\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    if i == n1:\n        return arr2[j + k - 1]\n    else:\n        return arr1[i + k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while(i < len(arr1) and j < len(arr2)):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n        if i+j == k:\n            return arr1[i]\n        elif i+j > k:\n            return arr2[j-1]\n        else:\n            return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_pointer = 0\n    arr2_pointer = 0\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_index = 0\n    arr2_index = 0\n    result = None\n    while arr1_index < len(arr1) and arr2_index < len(arr2):\n        if arr1[arr1_index] < arr2[arr2_index]:\n            arr1_index += 1\n        elif arr1[arr1_index] > arr2[arr2_index]:\n            arr2_index += 1\n        else:\n            arr1_index += 1\n            arr2_index += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    arr1_cur = 0\n    arr2_cur = 0\n    \n    while arr1_cur < arr1_len and arr2_cur < arr2_len:\n        if arr1[arr1_cur] < arr2[arr2_cur]:\n            if k == arr1_cur + arr1_len:\n                return arr1[arr1_cur]\n            else:\n                arr1_cur += 1\n                k -= 1\n        elif arr1[arr1_cur] > arr2[arr2_cur]:\n            if k == arr2_cur + arr2_len:\n                return arr2[arr2_cur]\n            else:\n                arr2_cur += 1\n                k -= 1\n        else:\n            arr1_cur += 1\n            arr2_cur += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_i, arr2_i = 0, 0\n    while True:\n        if arr1_i == len(arr1):\n            return arr2[k - arr2_i]\n        if arr2_i == len(arr2):\n            return arr1[k - arr1_i]\n        if k == arr1_i + arr2_i:\n            return arr1[arr1_i]\n        elif k < arr1_i + arr2_i:\n            arr1_i = arr1_i + arr2_i + 1\n            continue\n        else:\n            arr2_i = arr2_i + 1\n            continue\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the number of elements in arr1\n    m = len(arr1)\n    # find the number of elements in arr2\n    n = len(arr2)\n    # get the total number of elements in the array\n    t = m + n\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        return None\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k <= 0:\n        return None\n    if k > len(arr1) + len(arr2):\n        return None\n    if k <= len(arr1):\n        return find_kth(arr1[k-1:], arr2, k-len(arr1)-1)\n    return find_kth(arr1, arr2[k-len(arr1)-1:], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    if arr1_len > arr2_len:\n        return find_kth(arr2, arr1, k)\n    if arr1_len == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid = (arr1_len + arr2_len) / 2\n    if arr1[mid-1] > arr2[mid]:\n        return find_kth(arr1, arr2[mid:], k)\n    else:\n        return find_kth(arr1[mid:], arr2, k-mid)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # return True if number is equal to sum of its digits raised to the power of length of number\n    return True if (number == sum([int(digit)**len(str(number)) for digit in str(number)])) else False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return True if number == total else False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    length = len(num)\n    result = 0\n    for i in num:\n        result += int(i)**length\n    if result == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # get the sum of the cube of each digit\n    sum_of_digits = 0\n    number_string = str(number)\n    for digit in number_string:\n        sum_of_digits += int(digit)**3\n    \n    # check if the sum is equal to the number itself\n    if sum_of_digits == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    original_number = number\n    sum_of_digits = 0\n    while number > 0:\n        digit = number % 10\n        sum_of_digits += digit ** 3\n        number //= 10\n    if sum_of_digits == original_number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    length = len(str(number))\n    for i in str(number):\n        sum = sum + int(i)**length\n    if sum == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    digits = len(str(number))\n    for digit in str(number):\n        result = result + int(digit) ** digits\n    return result == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    result = 0\n    while(temp > 0):\n        digit = temp % 10\n        result = result + digit ** 3\n        temp = temp // 10\n    return result == number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # sum = 0\n    # average = 0\n    # for x in range(1, number + 1):\n    #     sum = sum + x\n    #     average = sum / number\n    # return (sum, average)\n    return sum(range(1, number + 1)) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        return None\n    sum = 0\n    for n in range(1, number + 1):\n        sum = sum + n\n    avg = sum / number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        result += i\n    result = result / number\n    return result\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        total += i\n    return total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return number + sum_average(number - 1)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(number+1):\n        s = s + i\n    avg = s/number\n    return s, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    for x in range(number):\n        result = result + x\n    return result / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    i = 0\n    while i < number:\n        total += i\n        i += 1\n    print 'Sum of first'+ str(number) +'natural numbers is'+ str(total) + ', Average is'+ str(total/number)\n    \ndef sum_average_recursion(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return number + sum_average_recursion(number-1)\n        \ndef get_factorial(number):\n    '''\n    Write a function to find factorial of a number.\n    '''\n    if number == 0:\n        return 1\n    else:\n        return number * get_factorial(number-1)\n        \ndef factorial_recursion(number):\n    '''\n    Write a function to find factorial of a number.\n    '''\n    if number == 0:\n        return 1\n    else:\n        return number * factorial_recursion(number-1)\n        \ndef is_palindrome(number):\n    '''\n    Write a function to check whether a number is palindrome.\n    '''\n    if number == 0:\n        return 1\n    elif number % 10 == 0:\n        return 0\n    else:\n        return (number % 10) == (number / 10)\n        \ndef reverse_number(number):\n    '''\n    Write a function to reverse a number.\n    '''\n    return 0\n    \ndef remove_leading_zeros(number):\n    '''\n    Write a function to remove leading zeros in a number.\n    '''\n    if number == 0:\n        return 1\n    else:\n        return remove_leading_zeros(number / 10) * 10 + number % 10\n        \ndef is_even_number(number):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    if number == 0:\n        return 1\n    else:\n        if number % 2 == 0:\n            return 1\n        else:\n            return 0\n        \ndef is_prime_number(number):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if number == 0 or number == 1:\n        return 0\n    else:\n        if number == 2:\n            return 1\n        else:\n            return is_prime_number(number - 1)\n            \ndef factorial_iterative(number):\n    '''\n    Write a function to find factorial of a number.\n    '''\n    if number == 0:\n        return 1\n    else:\n        result = 1\n        while number > 1:\n            result *= number\n            number -= 1\n        return result\n        \ndef sum_of_digits(number):\n    '''\n    Write a function to find sum of digits of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return (number % 10) + sum_of_digits(number / 10)\n        \ndef sum_of_digits_recursion(number):\n    '''\n    Write a function to find sum of digits of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return (number % 10) + sum_of_digits_recursion(number / 10)\n        \ndef fibonacci(number):\n    '''\n    Write a function to find nth number of fibonacci series.\n    '''\n    if number == 0 or number == 1:\n        return number\n    else:\n        return fibonacci(number-1) + fibonacci(number-2)\n        \ndef fibonacci_iterative(number):\n    '''\n    Write a function to find nth number of fibonacci series.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        fib_0 = 0\n        fib_1 = 1\n        for i in xrange(number-1):\n            fib_0, fib_1 = fib_1, fib_0 + fib_1\n        return fib_1\n        \ndef fibonacci_recursion(number):\n    '''\n    Write a function to find nth number of fibonacci series.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return fibonacci_recursion(number-1) + fibonacci_recursion(number-2)\n        \ndef is_power_of_two(number):\n    '''\n    Write a function to check whether a number is power of 2.\n    '''\n    if number == 0:\n        return 0\n    else:\n        if number & (number - 1) == 0:\n            return 1\n        else:\n            return 0\n        \ndef power_of_two(number):\n    '''\n    Write a function to check whether a number is power of 2.\n    '''\n    if number == 0:\n        return 1\n    else:\n        if number & (number - 1) == 0:\n            return 1\n        else:\n            return power_of_two(number - 1)\n        \ndef is_power_of_three(number):\n    '''\n    Write a function to check whether a number is power of 3.\n    '''\n    if number == 0:\n        return 0\n    else:\n        if number % 3 == 0:\n            return 1\n        else:\n            return is_power_of_three(number / 3)\n        \ndef power_of_three(number):\n    '''\n    Write a function to check whether a number is power of 3.\n    '''\n    if number == 0:\n        return 1\n    else:\n        if number % 3 == 0:\n            return 1\n        else:\n            return power_of_three(number / 3)\n        \ndef reverse_number_iterative(number):\n    '''\n    Write a function to reverse a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        reversed_number = 0\n        while number > 0:\n            reversed_number = (reversed_number * 10) + number % 10\n            number /= 10\n        return reversed_number\n        \ndef reverse_number_recursive(number):\n    '''\n    Write a function to reverse a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return (number % 10) * (10 ** (len(str(number)) - 1)) + reverse_number_recursive(number / 10)\n        \ndef is_substring_iterative(string, substring):\n    '''\n    Write a function to check whether a string is substring of another string.\n    '''\n    if string == '':\n        return 0\n    elif substring == '':\n        return 1\n    else:\n        if string[0] == substring[0]:\n            return is_substring_iterative(string[1:], substring[1:])\n        else:\n            return 0\n        \ndef is_substring_recursive(string, substring):\n    '''\n    Write a function to check whether a string is substring of another string.\n    '''\n    if string == '':\n        return 0\n    elif substring == '':\n        return 1\n    else:\n        if string[0] == substring[0]:\n            return is_substring_recursive(string[1:], substring[1:])\n        else:\n            return 0\n            \ndef is_substring_of_another_string_iterative(string1, string2):\n    '''\n    Write a function to check whether a string is substring of another string.\n    '''\n    if string1 == '':\n        return 1\n    elif string2 == '':\n        return 0\n    else:\n        if string2[0] == string1[0]:\n            return is_substring_of_another_string_iterative(string1[1:], string2[1:])\n        else:\n            return 0\n        \ndef is_substring_of_another_string_recursive(string1, string2):\n    '''\n    Write a function to check whether a string is substring of another string.\n    '''\n    if string1 == '':\n        return 1\n    elif string2 == ''"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    if n < 0:\n        print \"Please provide positive value\"\n    else:\n        sum = 0\n        for i in range(1, n + 1):\n            sum += i\n        average = float(sum) / n\n        return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    if number > 0:\n        for i in range(1, number + 1):\n            result += i\n        return result / number\n    else:\n        return None\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n & 1) == 0 : \n        return True\n    else : \n        return False\n    \ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n == 0 : \n        return 1\n    else : \n        return n*factorial(n-1)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if (n % 2)!= 0 : \n        return True\n    else : \n        return False\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if (n % 2) == 0 : \n        return False\n    i = 3\n    while (i * i <= n) : \n        if (n % i) == 0 : \n            return False\n        i = i + 2\n    return True\ndef is_Armstrong(n) : \n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    n1 = n\n    sum = 0\n    while (n1 > 0) : \n        sum = sum + (n1 % 10) ** 3\n        n1 = n1 // 10\n    if (sum == n) : \n        return True\n    else : \n        return False\ndef is_Pandigital(n) : \n    '''\n    Write a python function to check whether the given number is pandigital or not.\n    '''\n    if (len(str(n))) == 9 : \n        s = str(n)\n        if (s[0] == '0') : \n            return False\n        for i in range (1, 10) : \n            if (s.find(str(i)) == -1) : \n                return False\n        return True\n    else : \n        return False\ndef is_Pentagonal(n) : \n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Hexagonal(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Heptagonal(n) : \n    '''\n    Write a python function to check whether the given number is heptagonal or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Octagonal(n) : \n    '''\n    Write a python function to check whether the given number is octagonal or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Cube(n) : \n    '''\n    Write a python function to check whether the given number is cube or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Cubed(n) : \n    '''\n    Write a python function to check whether the given number is cubed or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Square(n) : \n    '''\n    Write a python function to check whether the given number is square or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is fibonacci or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_SemiPrime(n) : \n    '''\n    Write a python function to check whether the given number is semi prime or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return False\n        else : \n            return True\n    else : \n        return False\ndef is_NonPrime(n) : \n    '''\n    Write a python function to check whether the given number is non prime or not.\n    '''\n    if (is_Prime(n)) : \n        return False\n    else : \n        return True\ndef is_Strongly_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is strongly fibonacci or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_LeapYear(n) : \n    '''\n    Write a python function to check whether the given year is leap year or not.\n    '''\n    if (n % 4) == 0 : \n        if (n % 100) == 0 : \n            if (n % 400) == 0 : \n                return True\n            else : \n                return False\n        else : \n            return True\n    else : \n        return False\ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum = 0\n    for i in range (1, n) : \n        if (n % i) == 0 : \n            sum = sum + i\n    if (sum == n) : \n        return True\n    else : \n        return False\ndef is_Amicable(n) : \n    '''\n    Write a python function to check whether the given numbers are amicable pair or not.\n    '''\n    sum = 0\n    for i in range (1, n) : \n        if (n % i) == 0 : \n            sum = sum + i\n    if (sum == n) : \n        sum1 = 0\n        for i in range (1, n) : \n            if (n % i) == 0 : \n                sum1 = sum1 + i\n        if (sum1 == n) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Simple(n) : \n    '''\n    Write a python function to check whether the given number is simple or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return True\n        else : \n            return False\n    else : \n        return False\ndef is_Composite(n) : \n    '''\n    Write a python function to check whether the given number is composite or not.\n    '''\n    if (is_Prime(n)) : \n        if (n == (1 + (1 + 8 * n) ** 0.5)) : \n            return False\n        else : \n            return True\n    else : \n        return True\ndef is_Triangular(n) : \n    '''\n    Write a python function to check whether the given number is triangular or not.\n    '''\n    for i in range ("
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2) == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # pass \n    return (n % 2 == 0)\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for letter in str1:\n        if letter in d:\n            return letter\n        d[letter] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    new_str = str1.lower()\n    new_str = new_str.replace(' ','')\n    dict = {}\n    for i in range(len(new_str)):\n        if new_str[i] in dict:\n            return new_str[i]\n        dict[new_str[i]] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    new_str = str1\n    for i in range(len(str1)):\n        if str1[i] in new_str[i+1:]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n    return False\nprint first_repeated_char('geeksforgeeks')\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char = {}\n    for c in str1:\n        if c not in char:\n            char[c] = 0\n        char[c] += 1\n    for c in str1:\n        if char[c] > 1:\n            return c\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if c not in d:\n            d[c] = 1\n        else:\n            return c\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char)>1:\n            return char\n            break\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if i!= j and str1[i] == str1[j]:\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:] and str1[i] not in str1[:i]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(3, n) if i**0.5 == int(i**0.5)]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic_numbers = [1]\n    for i in range(2, n+1):\n        if i == sum(2**k for k in range(1, len(str(i)))):\n            ludic_numbers.append(i)\n    return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [0] * n\n    ludic_numbers[0] = 1\n    for i in range(1, n):\n        ludic_numbers[i] = ludic_numbers[i-1] + ludic_numbers[i-2]\n    return ludic_numbers[n-1]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    nums = []\n    i = 1\n    while i <= n:\n        if i == int(math.sqrt(i)) ** 2:\n            nums.append(i)\n        i += 1\n    return nums\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return []\n    lucids = []\n    for i in range(2, n):\n        lucid = i\n        while i*i <= n:\n            if i*i == n:\n                lucids.append(lucid)\n                break\n            i *= 2\n        else:\n            break\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in xrange(1,n+1):\n        num = str(i)\n        for j in xrange(len(num)):\n            if num[j]!= '9':\n                num = num[:j] + '9' + num[j+1:]\n                break\n        if i == int(num):\n            lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 3]\n    \n    l = [1, 2, 3]\n    \n    while True:\n        l = [a + b for a in l for b in l]\n        if len(l) == n:\n            return l\n        elif len(l) > n:\n            return l[:n]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1,n+1):\n        lucids.append(i*i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    n = int(n)\n    m = n - 1\n    l = []\n    for i in xrange(n, -1, -1):\n        if m % i == 0:\n            l.append(i)\n            m /= i\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n    s = range(1, n+1)\n    ludics = []\n    for i in s:\n        if str(i) == str(i)[::-1]:\n            ludics.append(i)\n            s.remove(i)\n    return ludics\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    ans = []\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] =='':\n            ans.append(s[i + 1:])\n            i -= 1\n        i -= 1\n    ans.append(s)\n    return''.join(ans)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Here we reverse the string.\n    # The idea is to find the last space and reverse the characters till the space\n    # Then reverse the characters till the space till the end of the string\n    # To find the last space we do a reverse of the characters till the last space\n    # then reverse the characters from the last space to the end of the string\n    # the reverse of the string will contain all the characters.\n    reverse_string = s[::-1]\n    \n    # Here we will reverse the characters till the last space\n    reverse_string = reverse_string.split(' ')\n    reverse_string =''.join(reverse_string)\n    \n    # Here we will reverse the characters from the last space to the end of the string\n    reverse_string = reverse_string[::-1]\n    \n    return reverse_string\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s == '':\n        return ''\n    # Use a stack for reversing the string.\n    stack = []\n    # We use a while loop here to iterate the list of characters.\n    # While the character is not a space, we add it to the stack.\n    # Then we read the next character. If it is a space, we pop the\n    # elements from the stack and add them to the result list until we\n    # find a space.\n    # If the character is not a space, we add it to the result list.\n    # We also add a space to the result list to seperate each word.\n    for c in s:\n        if c!='':\n            stack.append(c)\n        else:\n            while len(stack)!= 0:\n                res.append(stack.pop())\n            res.append(' ')\n    # After we finish the loop, we add the last character to the stack.\n    # Then we read the next character. If it is a space, we pop the\n    # elements from the stack and add them to the result list until we\n    # find a space.\n    # If the character is not a space, we add it to the result list.\n    # We also add a space to the result list to seperate each word.\n    while len(stack)!= 0:\n        res.append(stack.pop())\n    return ''.join(res)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    l.reverse()\n    return''.join(l)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Approach 1:\n    # s_split = s.split(' ')\n    # s_split.reverse()\n    # s_string =''.join(s_split)\n    # print(s_string)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse_s = ''\n    for word in s.split():\n        reverse_s += word[::-1] +''\n    return reverse_s[:-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(num) + 1), 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num < 2:\n        return False\n    elif num % 2 == 0:\n        return False\n    for n in range(3, num, 2):\n        if num % n == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # if the number is 2 or 3, then it is prime\n    if num == 2 or num == 3:\n        return True\n    # if the number is divisible by any number except 2 and 3, then it is not prime\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    # if the number is not divisible by any number, then it is prime\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # We know 1 is not a prime number\n    if num == 1:\n        return False\n    # We know that every number greater than 1 is a prime number\n    elif num > 1:\n        for x in range(2, num):\n            if num % x == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    else:\n        for i in xrange(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * (180/math.pi)\ndef to_sexagesimal(longitude):\n    '''\n    Write a function to convert degrees to sexagesimal form.\n    '''\n    h=longitude/15\n    m=(longitude-h*15)/1\n    s=longitude-h*15-m*1\n    return(h,m,s)\ndef to_degrees(h,m,s):\n    '''\n    Write a function to convert sexagesimal to degrees.\n    '''\n    return(h*15+m*1+s*0.25)\ndef gps_to_dd(longitude,latitude):\n    '''\n    Write a function to convert GPS to Decimal degrees.\n    '''\n    a = 6378137.0\n    b = 6356752.3142\n    longitude = radian_degree(longitude)\n    latitude = radian_degree(latitude)\n    dd_latitude = math.atan( math.tan(latitude)/math.cos(longitude))\n    dd_longitude = math.atan(math.tan(longitude)/math.cos(latitude))\n    dd_longitude = (degree_radian(dd_longitude))\n    dd_latitude = (degree_radian(dd_latitude))\n    dd_longitude = abs(dd_longitude)\n    dd_latitude = abs(dd_latitude)\n    dd_longitude = dd_longitude * (180/math.pi)\n    dd_latitude = dd_latitude * (180/math.pi)\n    return(dd_longitude,dd_latitude)\ndef dd_to_gps(longitude,latitude):\n    '''\n    Write a function to convert Decimal degrees to GPS.\n    '''\n    a = 6378137.0\n    b = 6356752.3142\n    dd_longitude = longitude*(math.pi/180)\n    dd_latitude = latitude*(math.pi/180)\n    cos_latitude = math.cos(dd_latitude)\n    cos_longitude = math.cos(dd_longitude)\n    latitude = math.asin(math.sin(dd_latitude)*math.cos(b/a))\n    longitude = math.atan(math.tan(dd_longitude)/math.cos(latitude))\n    longitude = (degree_radian(longitude))\n    latitude = (degree_radian(latitude))\n    longitude = abs(longitude)\n    latitude = abs(latitude)\n    longitude = longitude * (180/math.pi)\n    latitude = latitude * (180/math.pi)\n    return(longitude,latitude)\ndef distance_formula(lon1,lat1,lon2,lat2):\n    '''\n    Write a function to calculate the distance in meters between two points\n    based on the Haversine formula.\n    '''\n    a = 6378137.0\n    b = 6356752.3142\n    p = math.pi/180\n    lon1 = radian_degree(lon1)\n    lon2 = radian_degree(lon2)\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    angle = (lon2-lon1)\n    angle = (angle * p)\n    d_longitude = math.sin(angle/2)\n    d_longitude = (a*d_longitude)\n    cos_lat1 = math.cos(lat1*p)\n    cos_lat2 = math.cos(lat2*p)\n    cos_angle = math.cos(angle)\n    cos_lat2 = math.cos(lat2*p)\n    d_latitude = math.sin(lat1*p)*math.sin(lat2*p)\n    d_latitude = cos_lat1*cos_lat2*d_latitude\n    d_latitude = (2 * a * math.asin(math.sqrt(d_latitude)))\n    d_distance = (d_longitude**2 + d_latitude**2)**(0.5)\n    return(d_distance)\ndef haversine_formula(lon1,lat1,lon2,lat2):\n    '''\n    Write a function to calculate the distance in meters between two points\n    based on the Haversine formula.\n    '''\n    a = 6378137.0\n    b = 6356752.3142\n    p = math.pi/180\n    lon1 = radian_degree(lon1)\n    lon2 = radian_degree(lon2)\n    lat1 = radian_degree(lat1)\n    lat2 = radian_degree(lat2)\n    angle = (lon2-lon1)\n    angle = (angle * p)\n    d_longitude = math.sin(angle/2)\n    d_longitude = (a*d_longitude)\n    cos_lat1 = math.cos(lat1*p)\n    cos_lat2 = math.cos(lat2*p)\n    cos_angle = math.cos(angle)\n    cos_lat2 = math.cos(lat2*p)\n    d_latitude = math.sin(lat1*p)*math.sin(lat2*p)\n    d_latitude = (cos_lat1*cos_lat2*d_latitude)\n    d_latitude = (2 * a * math.asin(math.sqrt(d_latitude)))\n    d_distance = (d_longitude**2 + d_latitude**2)**(0.5)\n    return(d_distance)\ndef wind_speed_formula(wind_speed):\n    '''\n    Write a function to calculate wind speed using the formula.\n    '''\n    return(wind_speed*1.15078)\ndef wind_speed_to_mph(wind_speed):\n    '''\n    Write a function to calculate wind speed in miles per hour using the formula.\n    '''\n    return(wind_speed_formula(wind_speed) * 2.23694)\ndef wind_speed_to_kmh(wind_speed):\n    '''\n    Write a function to calculate wind speed in kilometers per hour using the formula.\n    '''\n    return(wind_speed_formula(wind_speed) * 3.6)\ndef wind_speed_to_knots(wind_speed):\n    '''\n    Write a function to calculate wind speed in knots using the formula.\n    '''\n    return(wind_speed_formula(wind_speed) * 1.94384)\ndef wind_speed_to_mps(wind_speed):\n    '''\n    Write a function to calculate wind speed in meters per second using the formula.\n    '''\n    return(wind_speed_formula(wind_speed) * 0.51444)\ndef wind_speed_to_kph(wind_speed):\n    '''\n    Write a function to calculate wind speed in kilometers per hour using the formula.\n    '''\n    return(wind_speed_formula(wind_speed) * 3.6)\ndef wind_direction_formula(direction):\n    '''\n    Write a function to calculate wind direction using the formula.\n    '''\n    return(direction*(360/16))\ndef wind_direction_to_degrees(direction):\n    '''\n    Write a function to calculate wind direction in degrees using the formula.\n    '''\n    return(wind_direction_formula(direction))\ndef wind_direction_to_degrees_cardinal(direction):\n    '''\n    Write a function to calculate wind direction in degrees using the formula.\n    '''\n    return(wind_direction_formula(direction))\ndef wind_direction_to_cardinal(direction):\n    '''\n    Write a function to calculate wind direction in cardinal directions using the formula.\n    '''\n    return(wind_direction_to_degrees(direction))\ndef wind_direction_to_cardinal_cardinal(direction):\n    '''\n    Write a function to calculate wind direction in cardinal directions using the formula.\n    '''\n    return(wind_direction_to_degrees_cardinal(direction))\ndef wind_speed_to_meters_per_second(wind_speed):\n    '''\n    Writ"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_radian(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians*180/math.pi\ndef acos(x):\n    '''\n    Write a function to compute the arc cosine of a number, x.\n    '''\n    return math.acos(x)\ndef atan(x):\n    '''\n    Write a function to compute the arc tangent of a number, x.\n    '''\n    return math.atan(x)\ndef euler_to_quaternion(roll, pitch, yaw):\n    '''\n    Convert euler roll, pitch, yaw to a quaternion.\n    '''\n    roll = radian_degree(roll)\n    pitch = radian_degree(pitch)\n    yaw = radian_degree(yaw)\n    (x,y,z) = euler_to_axis(roll, pitch, yaw)\n    w = math.sqrt(1.0+x*x+y*y+z*z)\n    q = [x/w,y/w,z/w,w]\n    return q\ndef euler_to_axis(roll, pitch, yaw):\n    '''\n    Convert euler roll, pitch, yaw to a 3d vector.\n    '''\n    roll = radian_degree(roll)\n    pitch = radian_degree(pitch)\n    yaw = radian_degree(yaw)\n    x = math.cos(roll)*math.sin(pitch)*math.sin(yaw) + math.sin(roll)*math.cos(pitch)*math.cos(yaw)\n    y = math.cos(roll)*math.sin(pitch)*math.cos(yaw) - math.sin(roll)*math.sin(pitch)*math.sin(yaw)\n    z = math.sin(roll)*math.sin(pitch)*math.sin(yaw) + math.cos(roll)*math.sin(pitch)*math.cos(yaw)\n    return (x,y,z)\ndef axis_to_euler(x, y, z):\n    '''\n    Convert a 3d vector to euler roll, pitch, yaw.\n    '''\n    x = float(x)\n    y = float(y)\n    z = float(z)\n    if x == 1 or x == -1:\n        roll = 0\n        pitch = math.pi/2\n    else:\n        roll = math.atan(y/x)\n        pitch = math.atan(z/math.sqrt(x*x+y*y))\n    return (roll, pitch, 0)\ndef quaternion_to_euler(q):\n    '''\n    Convert a quaternion to euler roll, pitch, yaw.\n    '''\n    w = q[3]\n    x = q[0]\n    y = q[1]\n    z = q[2]\n    roll = math.atan2(2*(w*x + y*z),1-2*(x*x + y*y))\n    pitch = math.asin(2*(w*y - x*z))\n    yaw = math.atan2(2*(w*z + x*y),1-2*(y*y + z*z))\n    return (roll, pitch, yaw)\ndef quaternion_to_euler_degree(q):\n    '''\n    Convert a quaternion to euler roll, pitch, yaw.\n    '''\n    w = q[3]\n    x = q[0]\n    y = q[1]\n    z = q[2]\n    roll = math.atan2(2*(w*x + y*z),1-2*(x*x + y*y))\n    pitch = math.asin(2*(w*y - x*z))\n    yaw = math.atan2(2*(w*z + x*y),1-2*(y*y + z*z))\n    return (roll, pitch, yaw)\ndef quaternion_to_euler_degree_sin_cos(q):\n    '''\n    Convert a quaternion to euler roll, pitch, yaw.\n    '''\n    w = q[3]\n    x = q[0]\n    y = q[1]\n    z = q[2]\n    roll = math.atan2(2*(w*x + y*z),1-2*(x*x + y*y))\n    pitch = math.asin(2*(w*y - x*z))\n    yaw = math.atan2(2*(w*z + x*y),1-2*(y*y + z*z))\n    return (roll, pitch, yaw)\ndef axis_to_quaternion(x, y, z):\n    '''\n    Convert a 3d vector to a quaternion.\n    '''\n    x = float(x)\n    y = float(y)\n    z = float(z)\n    w = math.sqrt(x*x+y*y+z*z)\n    return [x/w,y/w,z/w,w]\ndef vector_to_quaternion(v):\n    '''\n    Convert a 3d vector to a quaternion.\n    '''\n    v = [float(x) for x in v]\n    v = [v[0]/math.sqrt(v[0]**2+v[1]**2+v[2]**2), v[1]/math.sqrt(v[0]**2+v[1]**2+v[2]**2), v[2]/math.sqrt(v[0]**2+v[1]**2+v[2]**2)]\n    w = math.sqrt(1.0+v[0]*v[0]+v[1]*v[1]+v[2]*v[2])\n    v = [v[0]/w, v[1]/w, v[2]/w]\n    return v\ndef quaternion_to_vector(q):\n    '''\n    Convert a quaternion to a 3d vector.\n    '''\n    w = q[3]\n    x = q[0]\n    y = q[1]\n    z = q[2]\n    v = [x*w, y*w, z*w]\n    return v\ndef quaternion_to_axis_degree(q):\n    '''\n    Convert a quaternion to euler roll, pitch, yaw.\n    '''\n    w = q[3]\n    x = q[0]\n    y = q[1]\n    z = q[2]\n    roll = math.atan2(2*(w*x + y*z),1-2*(x*x + y*y))\n    pitch = math.asin(2*(w*y - x*z))\n    yaw = math.atan2(2*(w*z + x*y),1-2*(y*y + z*z))\n    return (roll, pitch, yaw)\ndef quaternion_to_axis(q):\n    '''\n    Convert a quaternion to euler roll, pitch, yaw.\n    '''\n    w = q[3]\n    x = q[0]\n    y = q[1]\n    z = q[2]\n    roll = math.atan2(2*(w*x + y*z),1-2*(x*x + y*y))\n    pitch = math.asin(2*(w*y - x*z))\n    yaw = math.atan2(2*(w*z + x*y),1-2*(y*y + z*z))\n    return (roll, pitch, yaw)\ndef quaternion_to_euler_sin_cos(q):\n    '''\n    Convert a quaternion to euler roll, pitch, yaw.\n    '''\n    w = q[3]\n    x = q[0]\n    y = q[1]\n    z = q[2]\n    roll = math.atan2(2*(w*x + y*z),1-2*(x*x + y*"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180.0\ndef sin_degree(degree):\n    '''\n    Write a function to convert degrees to sin value.\n    '''\n    return math.sin(radian_degree(degree))\ndef cos_degree(degree):\n    '''\n    Write a function to convert degrees to cos value.\n    '''\n    return math.cos(radian_degree(degree))\ndef tan_degree(degree):\n    '''\n    Write a function to convert degrees to tan value.\n    '''\n    return math.tan(radian_degree(degree))\ndef arcsin_degree(degree):\n    '''\n    Write a function to convert degrees to arcsin value.\n    '''\n    return math.asin(sin_degree(degree))\ndef arccos_degree(degree):\n    '''\n    Write a function to convert degrees to arccos value.\n    '''\n    return math.acos(cos_degree(degree))\ndef arctan_degree(degree):\n    '''\n    Write a function to convert degrees to arctan value.\n    '''\n    return math.atan(tan_degree(degree))\ndef normalize(degree):\n    '''\n    Write a function to convert a degree value to an angle value.\n    '''\n    return degree\ndef rotate(angle, degree, center):\n    '''\n    Write a function to rotate a point about a point.\n    '''\n    cos_theta = cos_degree(angle)\n    sin_theta = sin_degree(angle)\n    x = center[0] - cos_theta*(center[0] - degree[0]) - sin_theta*(degree[1] - center[1])\n    y = center[1] + sin_theta*(center[0] - degree[0]) + cos_theta*(degree[1] - center[1])\n    return [x, y]\ndef quadratic_polynomial(a, b, c):\n    '''\n    Write a function to calculate the coefficients of a quadratic polynomial.\n    '''\n    return [a, b, c]\ndef quadratic_equation(a, b, c):\n    '''\n    Write a function to calculate the roots of a quadratic polynomial.\n    '''\n    discriminant = b*b - 4.0*a*c\n    if discriminant < 0:\n        return []\n    elif discriminant == 0:\n        return [-b/(2.0*a)]\n    else:\n        return [(-b + math.sqrt(discriminant))/(2.0*a), (-b - math.sqrt(discriminant))/(2.0*a)]\ndef linear_polynomial(a, b):\n    '''\n    Write a function to calculate the coefficients of a linear polynomial.\n    '''\n    return [a, b]\ndef linear_equation(a, b):\n    '''\n    Write a function to calculate the roots of a linear polynomial.\n    '''\n    if a == 0:\n        return [-b/a]\n    else:\n        return []\ndef f(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x\ndef g(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x\ndef g2(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x\ndef g3(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x\ndef g4(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x\ndef g5(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x\ndef g6(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x\ndef g7(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x\ndef g8(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x\ndef g9(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x\ndef g10(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x*x\ndef g11(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x*x*x\ndef g12(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x*x*x\ndef g13(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x*x*x\ndef g14(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x*x*x*x\ndef g15(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x*x*x*x*x\ndef g16(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x*x*x*x*x\ndef g17(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x*x*x*x*x*x*x*x*x*x*x\ndef g18(x):\n    '''\n    Write a function to calculate the value of the polynomial with the coefficients given by the quadratic_polynomial and linear_polynomial functions.\n    '''\n    return x*x*x"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef get_rectangle_sides(side):\n    '''\n    Write a function to compute the sides of a right angled triangle.\n    '''\n    return 2*side\ndef get_triangle_sides(side1,side2,hypotenuse):\n    '''\n    Write a function to compute the sides of a right angled triangle.\n    '''\n    return [side1,side2,hypotenuse]\ndef get_pythagorean_triple(side1,side2,hypotenuse):\n    '''\n    Write a function to compute the sides of a right angled triangle.\n    '''\n    return [side1,side2,hypotenuse]\ndef get_cubic_root(side):\n    '''\n    Write a function to compute the cubic root of a number.\n    '''\n    return side**(1/3)\ndef get_cubic_value(a,b,c):\n    '''\n    Write a function to compute the cubic value of a number.\n    '''\n    return a**3+3*b**2+3*c\ndef get_cubic_value_root(a,b,c):\n    '''\n    Write a function to compute the cubic value of a number.\n    '''\n    return a**(1/3)\ndef get_cube_volume(side):\n    '''\n    Write a function to compute the volume of a cube.\n    '''\n    return side**3\ndef get_square_volume(side):\n    '''\n    Write a function to compute the volume of a cube.\n    '''\n    return side**2\ndef get_cylinder_volume(radius,height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    return math.pi*(radius**2)*height\ndef get_sphere_volume(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(radius**3)\ndef get_sphere_mass(mass):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return mass*4/3*math.pi\ndef get_pyramid_volume(side,height):\n    '''\n    Write a function to compute the volume of a pyramid.\n    '''\n    return (side**2)*height\ndef get_triangle_area(side1,side2):\n    '''\n    Write a function to compute the area of a right angled triangle.\n    '''\n    return (side1*side2)/2\ndef get_triangle_area_perimeter(side1,side2):\n    '''\n    Write a function to compute the area of a right angled triangle.\n    '''\n    return (side1+side2)*2\ndef get_triangle_perimeter(side1,side2):\n    '''\n    Write a function to compute the area of a right angled triangle.\n    '''\n    return side1+side2\ndef get_octagon_area(side):\n    '''\n    Write a function to compute the area of an octagon.\n    '''\n    return side**2/2\ndef get_octagon_perimeter(side):\n    '''\n    Write a function to compute the perimeter of an octagon.\n    '''\n    return 8*side\ndef get_hexagon_area(side):\n    '''\n    Write a function to compute the area of a hexagon.\n    '''\n    return 3*(side**2)/2\ndef get_hexagon_perimeter(side):\n    '''\n    Write a function to compute the perimeter of a hexagon.\n    '''\n    return 6*side\ndef get_octagon_moment(side,moment):\n    '''\n    Write a function to compute the moment of inertia of an octagon.\n    '''\n    return (3*(side**2))/2*moment\ndef get_triangle_moment(side1,side2,moment):\n    '''\n    Write a function to compute the moment of inertia of a right angled triangle.\n    '''\n    return (side1*side2)/2*moment\ndef get_cubic_moment(side,moment):\n    '''\n    Write a function to compute the moment of inertia of a cubic.\n    '''\n    return side*moment\ndef get_cubic_mass(side,mass):\n    '''\n    Write a function to compute the mass of a cubic.\n    '''\n    return mass*side\ndef get_cubic_volume(side):\n    '''\n    Write a function to compute the volume of a cube.\n    '''\n    return side**3\ndef get_square_mass(side,mass):\n    '''\n    Write a function to compute the mass of a square.\n    '''\n    return mass*side\ndef get_square_volume(side):\n    '''\n    Write a function to compute the volume of a square.\n    '''\n    return side**2\ndef get_square_moment(side,moment):\n    '''\n    Write a function to compute the moment of inertia of a square.\n    '''\n    return side**2*moment\ndef get_pentagon_area(side):\n    '''\n    Write a function to compute the area of a pentagon.\n    '''\n    return (5*(side**2))/2\ndef get_pentagon_perimeter(side):\n    '''\n    Write a function to compute the perimeter of a pentagon.\n    '''\n    return 5*side\ndef get_hexagon_area(side):\n    '''\n    Write a function to compute the area of a hexagon.\n    '''\n    return 3*(side**2)/2\ndef get_hexagon_perimeter(side):\n    '''\n    Write a function to compute the perimeter of a hexagon.\n    '''\n    return 6*side\ndef get_octagon_area(side):\n    '''\n    Write a function to compute the area of an octagon.\n    '''\n    return 7*(side**2)/4\ndef get_octagon_perimeter(side):\n    '''\n    Write a function to compute the perimeter of an octagon.\n    '''\n    return 8*side\ndef get_triangle_slant(side1,side2):\n    '''\n    Write a function to compute the slant of a right angled triangle.\n    '''\n    return math.fabs(side1-side2)/side1\ndef get_triangle_angle(side1,side2):\n    '''\n    Write a function to compute the angle of a right angled triangle.\n    '''\n    return math.acos((side1**2+side2**2-side1*side2)/(2*side1*side2))\ndef get_circle_area(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return math.pi*(radius**2)\ndef get_circle_circumference(radius):\n    '''\n    Write a function to compute the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef get_circle_circumference_2(radius):\n    '''\n    Write a function to compute the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef get_circle_moment_of_inertia(radius,moment):\n    '''\n    Write a function to compute the moment of inertia of a circle.\n    '''\n    return moment*(math.pi*(radius**2))\ndef get_rectangle_area(side1,side2):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    return side1*side2\ndef get_rectangle_perimeter(side1,side2):\n    '''\n    Write a function to compute the perimeter of a rectangle.\n    '''\n    return 2*side1+2*side2\ndef get_triangle_area(side1,side2):\n    '''\n    Write a function to compute the area of a right angled triangle.\n    '''\n    return (side1*side2)/2\ndef get_triangle_area_perimeter(side"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree/180)*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * (180 / math.pi)\ndef degree_to_semi_circular_degree(degree):\n    '''\n    Write a function to convert degrees to semi-circular degree.\n    '''\n    return degree * (180 / (2 * math.pi))\ndef semi_circular_degree_to_degree(circular_degree):\n    '''\n    Write a function to convert semi-circular degree to degree.\n    '''\n    return circular_degree * (2 * math.pi / 180)\ndef distance(point1, point2):\n    '''\n    Write a function to calculate distance between point1 and point2.\n    '''\n    return math.sqrt(\n        (point1[0] - point2[0]) ** 2 +\n        (point1[1] - point2[1]) ** 2\n    )\ndef calculate_cos(point1, point2):\n    '''\n    Write a function to calculate cosine value of point1 and point2.\n    '''\n    return (point1[0] - point2[0]) / distance(point1, point2)\ndef calculate_sin(point1, point2):\n    '''\n    Write a function to calculate sine value of point1 and point2.\n    '''\n    return (point1[1] - point2[1]) / distance(point1, point2)\ndef calculate_tan(point1, point2):\n    '''\n    Write a function to calculate tangent value of point1 and point2.\n    '''\n    return calculate_sin(point1, point2) / calculate_cos(point1, point2)\ndef calculate_angle(point1, point2):\n    '''\n    Write a function to calculate angle in radian.\n    '''\n    return math.atan2(\n        point1[1] - point2[1],\n        point1[0] - point2[0]\n    )\ndef calculate_semi_circular_angle(point1, point2):\n    '''\n    Write a function to calculate semi-circular angle.\n    '''\n    return math.acos(calculate_cos(point1, point2))\ndef calculate_circular_angle(point1, point2):\n    '''\n    Write a function to calculate circular angle.\n    '''\n    return math.pi - calculate_semi_circular_angle(point1, point2)\ndef calculate_sector_angle(point1, point2):\n    '''\n    Write a function to calculate sector angle.\n    '''\n    return calculate_circular_angle(point1, point2) * 180 / math.pi\ndef calculate_semicircular_angle(point1, point2):\n    '''\n    Write a function to calculate semicircular angle.\n    '''\n    return calculate_circular_angle(point1, point2) * 180 / (2 * math.pi)\ndef get_distance_of_semicircular_angle(semicircular_angle):\n    '''\n    Write a function to calculate semicircular angle.\n    '''\n    return semicircular_angle * (2 * math.pi / 180)\ndef get_circular_angle_of_semicircular_angle(semicircular_angle):\n    '''\n    Write a function to calculate semicircular angle.\n    '''\n    return semicircular_angle * (180 / (2 * math.pi))\ndef get_semicircular_angle_of_circular_angle(circular_angle):\n    '''\n    Write a function to calculate semicircular angle.\n    '''\n    return circular_angle * (180 / math.pi)\ndef get_circular_angle_of_sector_angle(sector_angle):\n    '''\n    Write a function to calculate circular angle.\n    '''\n    return sector_angle * (180 / math.pi)\ndef get_circular_angle_of_semicircular_angle(semicircular_angle):\n    '''\n    Write a function to calculate semicircular angle.\n    '''\n    return semicircular_angle * (180 / (2 * math.pi))\ndef calculate_theta_of_point(point):\n    '''\n    Write a function to calculate theta in radian.\n    '''\n    return radian_degree(\n        get_circular_angle_of_semicircular_angle(\n            get_semicircular_angle_of_circular_angle(\n                get_circular_angle_of_sector_angle(\n                    get_circular_angle_of_semicircular_angle(\n                        get_distance_of_semicircular_angle(\n                            get_semicircular_angle_of_circular_angle(\n                                get_circular_angle_of_sector_angle(\n                                    get_circular_angle_of_semicircular_angle(\n                                        get_circular_angle_of_sector_angle(\n                                            get_distance_of_semicircular_angle(\n                                                get_semicircular_angle_of_circular_angle(\n                                                    get_circular_angle_of_sector_angle(\n                                                        get_circular_angle_of_semicircular_angle(\n                                                            get_distance_of_semicircular_angle(\n                                                                get_circular_angle_of_sector_angle(\n                                                                    get_circular_angle_of_semicircular_angle(\n                                                                        get_distance_of_semicircular_angle(\n                                                                            get_circular_angle_of_sector_angle(\n                                                                                get_distance_of_semicircular_angle(\n                                                                                    get_circular_angle_of_sector_angle(\n                                                                                        get_distance_of_semicircular_angle(\n                                                                                            get_circular_angle_of_sector_angle(\n                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                        get_circular_angle_of_sector_angle(\n                                                                                                                                                                            get_circular_angle_of_sector_angle(\n                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                        get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                            get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                get_circular_angle_of_sector_angle(\n                                                                                                                                                                                                                    get_circular_angle_of_sector_angle("
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = list(re.finditer(pattern, text))\n    return matches\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return (text, pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    if pattern is None or text is None:\n        return None\n    \n    # create a regular expression object from the pattern\n    regex = re.compile(pattern)\n    \n    # compile the regex\n    regex_obj = regex.search(text)\n    \n    # get the matched text, start index and end index\n    matched_text = regex_obj.group()\n    start_index = regex_obj.start()\n    end_index = regex_obj.end()\n    \n    return matched_text, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.search(pattern, text)\n    if matches:\n        return matches.group(), matches.start(), matches.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    return (result.group(), result.start(), result.end())\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return (None, None, None)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if re.search(pattern, text) is None:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    return m.group(), m.start(), m.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    start_pos = -1\n    end_pos = -1\n    \n    pattern_len = len(pattern)\n    \n    for match in re.finditer(pattern, text):\n        start_pos = match.start()\n        end_pos = match.end()\n        \n    return text[start_pos:end_pos], start_pos, end_pos\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <=0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((n + 1) * n) // 2\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    s = 0\n    for k in range(n): \n        s += 1 / factorial(k)\n    return s\n    \n    \ndef bell_Number_exhaustion(n): \n    '''\n    Write a python function to find nth bell number using exhaust method.\n    '''\n    s = 0\n    for k in range(n): \n        s += 1 / (k + 1)\n    return s\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int(round(math.exp(1)*(math.factorial(n))))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #Base Case\n    if n == 0:\n        return 0\n    #If n is 1, return 1\n    elif n == 1:\n        return 1\n    else:\n        #Return n * (n - 1) * bell_Number(n-1)\n        return n * bell_Number(n - 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n-1)*n\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int((((1+math.sqrt(5))**n-(1-math.sqrt(5))**n)/(2**n*math.sqrt(5))))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    B = [0] * (n+1) \n    B[0] = 1\n    for i in range(1, n+1): \n        for j in range(i, 0, -1): \n            B[j] += B[j-1] \n    return B[n] \n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def factorial(n): \n        if n == 1:\n            return 1 \n        else:\n            return n*factorial(n-1) \n    return int(round(factorial(n)/((factorial(n-1)*factorial(n-2)))))\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1[L]=''\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Make sure L is in the bounds of the list.\n    if L < 0 or L >= len(list1):\n        return \"Invalid Input: kth element not in the bounds of the list.\"\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for element in list1:\n        if element!= L:\n            list2.append(element)\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if list1 == []:\n        return []\n    if L == 1:\n        return list1[1:]\n    if L == -1:\n        return list1[:-1]\n    k = 1\n    while k < L:\n        list1 = list1[1:]\n        k += 1\n    return list1\n    \n    \ndef remove_first_n_last_elements(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the first L elements and the last L elements removed.\n    '''\n    if list1 == []:\n        return []\n    if L == 1:\n        return list1[1:]\n    if L == -1:\n        return list1[:-1]\n    list1 = list1[1:]\n    list1 = list1[:-1]\n    return list1\n    \n    \ndef insert_element(list1, value):\n    '''\n    Write a python function which takes a list and returns a list with the value inserted at the given index.\n    '''\n    if list1 == []:\n        return []\n    index = 0\n    if value < list1[0]:\n        list1.insert(0, value)\n        return list1\n    if value > list1[len(list1) - 1]:\n        list1.append(value)\n        return list1\n    while index < len(list1):\n        if value < list1[index]:\n            list1.insert(index, value)\n            return list1\n        index += 1\n    list1.append(value)\n    return list1\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    del list1[L-1]\n    return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for row in test_list:\n        max_list.append(row[N])\n    return max(max_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    row = len(test_list)\n    col = len(test_list[0])\n    current_col = 0\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    new_list = []\n    for l in test_list:\n        new_list.append(l[N-1])\n    return max(new_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        ans.append(max(test_list[i][N]))\n    return max(ans)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = [float('-inf')] * len(test_list[0])\n    for row in test_list:\n        for i in xrange(len(row)):\n            if row[i] > max_col[i]:\n                max_col[i] = row[i]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = None\n    for row in test_list:\n        if max_val is None or row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for row in test_list:\n        max_list.append(row[N-1])\n    return max(max_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_so_far = max(test_list[N])\n    for row in test_list:\n        max_so_far = max(max_so_far, row[N])\n    return max_so_far\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = []\n    for sublist in test_list:\n        result.append(sublist[N-1])\n    return max(result)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return 0\n    max_value = -1\n    for line in test_list:\n        if len(line) <= N:\n            continue\n        max_value = max(max_value, line[N])\n    return max_value\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    newlist = []\n    for i in lst:\n        newlist.append(i[0])\n        newlist.append(i[1])\n    return newlist\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return [lst1,lst2]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return [lst1,lst2]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for l in lst:\n        result.append([l[0],l[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = [lst[i][0] for i in range(len(lst))]\n    lst2 = [lst[i][1] for i in range(len(lst))]\n    return [lst1, lst2]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    result = [lst[i][0] for i in range(len(lst))]\n    result2 = [lst[i][1] for i in range(len(lst))]\n    \n    return [result, result2]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    m = lst[0][0]\n    n = lst[0][1]\n    lst[0][0] = m\n    lst[0][1] = n\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final_lst = []\n    for i in lst:\n        final_lst.append([i[0],i[1]])\n    return final_lst\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for index, value in enumerate(test_list):\n        if index == 0:\n            result.append(value)\n        else:\n            result.append(value + result[index - 1])\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return reduce(lambda a,b: a+b, test_list)\n    \n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(0, len(test_list)):\n        temp = sum(test_list[:i+1])\n        cum_sum.append(temp)\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    for i in range(len(test_list)):\n        cumulative_sum_list.append(sum(test_list[:i + 1]))\n    return cumulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return None\n    sorted_list = sorted(test_list)\n    for i in range(1, len(sorted_list)):\n        sorted_list[i] += sorted_list[i-1]\n    return sorted_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_of_list = [0]\n    for val in test_list:\n        sum_of_list.append(sum_of_list[-1] + val)\n    return sum_of_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    cum_sum_list = []\n    for value in test_list:\n        cum_sum += value\n        cum_sum_list.append(cum_sum)\n    return cum_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_list = []\n    for val in test_list:\n        cum_sum = 0\n        for elem in test_list:\n            cum_sum += elem\n        cummulative_list.append(cum_sum)\n    return cummulative_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for element in test_list:\n        total = total + element\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [float(sum(i))/len(i) for i in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # this one is shorter\n    # average = [sum(x) / len(x) for x in zip(*nums)]\n    # print average\n    # return average\n    # the above is better, but I don't think I need to do it this way\n    # the above one works, but I need to write the for-loop and the sum()\n    # above one is a more readable way of doing it.\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[0])/len(nums[0]), sum(nums[1])/len(nums[1]), sum(nums[2])/len(nums[2])]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg_list.append(float(sum(nums[i])) / len(nums[i]))\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums)/len(nums) for nums in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_of_averages = []\n    for sub_tuple in nums:\n        average = sum(sub_tuple) / len(sub_tuple)\n        list_of_averages.append(average)\n    return list_of_averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(i[0]+i[1])/2 for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for item in nums:\n        new_list.append(sum(item)/len(item))\n    return new_list\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # this is from user 42\n    # we only care about the first element of each tuple\n    # use zip function to get tuple of tuples\n    \n    # this is a bit tricky\n    # take the first element of each tuple, \n    # then extract the first element of both tuples\n    # then do the modulo\n    # then zip the new tuple back together to the original length\n    \n    return zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda i, j: i % j, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    try:\n        if len(test_tup1)!= len(test_tup2):\n            return \"Tuples must be the same length\"\n        else:\n            mod_tup = tuple()\n            for i in range(len(test_tup1)):\n                mod_tup += (test_tup1[i] % test_tup2[i],)\n            return mod_tup\n    except TypeError:\n        return \"Tuples must be the same length\"\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(0, len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        print('ERROR: There is a problem with the input tuples. They are not the same length')\n    else:\n        new_list = []\n        for i in range(len(test_tup1)):\n            new_list.append(test_tup1[i] % test_tup2[i])\n        return tuple(new_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print 'Tuple lengths do not match'\n        return\n    for i in range(len(test_tup1)):\n        print test_tup1[i] % test_tup2[i]\n    return\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # first example\n    # if len(test_tup1)!= len(test_tup2):\n    #     return None\n    # else:\n    #     for i in range(len(test_tup1)):\n    #         test_tup1[i] = test_tup1[i] % test_tup2[i]\n    # return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_list = [t1%t2 for t1,t2 in zip(test_tup1, test_tup2)]\n    return tuple(modulo_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(0, len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    #steps is the number of steps required to reach d, 0\n    #d is the final destination, 0,0\n    #first, we have to reach the destination\n    if (d[0] == 0 and d[1] == 0):\n        return 0\n    #if d has already reached its destination, we are done\n    if (d[0] == steps[-1][0] and d[1] == steps[-1][1]):\n        return 1\n    #Otherwise, we can reach the destination through a jump\n    return min_Jumps(steps, [steps[-1][0], steps[-1][1] - 1]) + min_Jumps(steps, [steps[-1][0] - 1, steps[-1][1]]) + min_Jumps(steps, [steps[-1][0] - 1, steps[-1][1] - 1])\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    if d == 1: return steps\n    if d == 2: return steps\n    jumps = [0] * d\n    jumps[0], jumps[1] = steps, steps\n    for i in xrange(2, d):\n        jumps[i] = min(steps, steps - i + 1) + min(jumps[i-1], jumps[i-2])\n    return jumps[-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    j = 0\n    for i in range(0, n):\n        if steps[i] <= d:\n            if steps[i] > j:\n                j = steps[i]\n        else:\n            break\n    return j\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def isValid(x, y):\n        if x >= 0 and x < len(steps) and y >= 0 and y < len(steps[0]) and steps[x][y] == 1:\n            return True\n        return False\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #helper function\n    def is_valid(x, y, arr, j):\n        return (x < len(arr) and x >= 0) and (y < len(arr[x]) and y >= 0) and arr[x][y] == 1 and (x, y) not in j\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0 or d == steps:\n        return 0\n    if d > steps:\n        return -1\n    if d == steps-1:\n        return 1\n    return min_Jumps(steps, d+1) + min_Jumps(steps, d+2) + min_Jumps(steps, d+3)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return d\n    if steps == 2:\n        return (d - 1) + min_Jumps(1, d - 1)\n    min_step = float('inf')\n    for i in range(steps - 1):\n        min_step = min(min_step, 1 + min_Jumps(steps - 1 - i, d - 1))\n    return min_step\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 1\n    if d > steps:\n        return 0\n    if d == steps:\n        return 1\n    if d > steps/2:\n        return min_Jumps(steps, d - steps) + min_Jumps(steps, d - steps + steps)\n    else:\n        return min_Jumps(steps, d + steps) + min_Jumps(steps, d - steps)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_index = len(steps) - 1\n    jumps = 0\n    while steps[max_index] >= 0:\n        if steps[max_index] == d:\n            return jumps + 1\n        if steps[max_index] < d:\n            return -1\n        steps[max_index] -= 1\n        max_index -= 1\n        jumps += 1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from collections import deque\n    if d < 0: return 0\n    if d == 0: return steps\n    \n    queue = deque()\n    queue.append([0,0,steps])\n    visited = set()\n    visited.add((0,0))\n    while queue:\n        x,y,steps = queue.popleft()\n        if x==d and y==0: return steps\n        for i, j in [(x+1,y), (x,y+1)]:\n            if (i,j) not in visited:\n                visited.add((i,j))\n                queue.append([i,j,steps+1])\n    return 0\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res=[]\n    if len(nums1)<=len(nums2):\n        for i in range(len(nums1)):\n            res.append(nums1[i]/nums2[i])\n    else:\n        for i in range(len(nums2)):\n            res.append(nums1[i]/nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Your Code Here\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in xrange(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    from numpy import array\n    nums1 = array(nums1)\n    nums2 = array(nums2)\n    return nums1/nums2\n    \ndef merge_and_sort(lists):\n    '''\n    Write a function to merge and sort the list of lists.\n    '''\n    from numpy import array\n    lists = array(lists)\n    return lists.sort()\n    \ndef flatten_list(listoflists):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    from numpy import array\n    listoflists = array(listoflists)\n    return listoflists.flatten()\n    \ndef merge_sort(arr):\n    '''\n    Write a function to sort a list in merge sort.\n    '''\n    def merge(list1, list2):\n        '''\n        Write a function to merge two lists.\n        '''\n        res = []\n        while list1 and list2:\n            if list1[0] < list2[0]:\n                res.append(list1.pop(0))\n            else:\n                res.append(list2.pop(0))\n        if list1:\n            res.extend(list1)\n        elif list2:\n            res.extend(list2)\n        return res\n    def merge_sort_helper(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) / 2\n        return merge(merge_sort_helper(arr[:mid]), merge_sort_helper(arr[mid:]))\n    return merge_sort_helper(arr)\n    \ndef min_max(nums):\n    '''\n    Write a function to find the max and min values in a list.\n    '''\n    from numpy import array\n    nums = array(nums)\n    return (min(nums), max(nums))\n    \ndef max_value_index(listofvalues):\n    '''\n    Write a function to find the index of the max value in a list of values.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return (listofvalues == max(listofvalues)).nonzero()[0][0]\n    \ndef get_nth_item(listofvalues, n):\n    '''\n    Write a function to get the nth item in a list of values.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[n]\n    \ndef sort_by_value(listofvalues, target):\n    '''\n    Write a function to sort a list of values.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    listofvalues = listofvalues[listofvalues.argsort()]\n    return listofvalues[0]\n    \ndef get_all_values_of_type(listofvalues, target):\n    '''\n    Write a function to get all the values in a list that are a specific type.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues == target]\n    \ndef reverse_in_place(listofvalues):\n    '''\n    Write a function to reverse a list in place.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    listofvalues[:] = listofvalues[::-1]\n    return listofvalues\n    \ndef get_all_odd_items(listofvalues):\n    '''\n    Write a function to get all the odd items in a list.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues % 2 == 1]\n    \ndef get_all_items_greater_than(listofvalues, target):\n    '''\n    Write a function to get all the items in a list greater than a specific value.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues > target]\n    \ndef get_all_items_less_than(listofvalues, target):\n    '''\n    Write a function to get all the items in a list less than a specific value.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues < target]\n    \ndef get_all_items_between(listofvalues, low, high):\n    '''\n    Write a function to get all the items in a list between two values.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[(listofvalues > low) & (listofvalues < high)]\n    \ndef get_all_items_greater_than_or_equal_to(listofvalues, target):\n    '''\n    Write a function to get all the items in a list greater than or equal to a specific value.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues >= target]\n    \ndef get_all_items_less_than_or_equal_to(listofvalues, target):\n    '''\n    Write a function to get all the items in a list less than or equal to a specific value.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues <= target]\n    \ndef get_all_items_greater_than_and_less_than(listofvalues, low, high):\n    '''\n    Write a function to get all the items in a list between two values.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[(listofvalues > low) & (listofvalues < high)]\n    \ndef get_all_items_greater_than_and_equal_to(listofvalues, target):\n    '''\n    Write a function to get all the items in a list greater than or equal to a specific value.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues >= target]\n    \ndef get_all_items_less_than_and_equal_to(listofvalues, target):\n    '''\n    Write a function to get all the items in a list less than or equal to a specific value.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues <= target]\n    \ndef get_all_items_between_and_equal(listofvalues, low, high):\n    '''\n    Write a function to get all the items in a list between two values.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[(listofvalues > low) & (listofvalues <= high)]\n    \ndef get_all_items_not_between(listofvalues, low, high):\n    '''\n    Write a function to get all the items in a list not between two values.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[(listofvalues > low) & (listofvalues < high)]\n    \ndef get_all_items_not_greater_than(listofvalues, target):\n    '''\n    Write a function to get all the items in a list not greater than a specific value.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues < target]\n    \ndef get_all_items_not_less_than(listofvalues, target):\n    '''\n    Write a function to get all the items in a list not less than a specific value.\n    '''\n    from numpy import array\n    listofvalues = array(listofvalues)\n    return listofvalues[listofvalues > target]\n    \ndef get_all_items_not_greater_than_or_equal_to(listofvalues, target):\n    '''\n    Write a function to get all the items in a list not greater than or equal to a specific value."
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2)\n    return [a/b for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def divide(nums1,nums2):\n        l = []\n        for i in range(len(nums1)):\n            l.append(nums1[i]/nums2[i])\n        return l\n    return divide(nums1,nums2)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    non_nums = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n        else:\n            non_nums.append(i)\n    ans = non_nums + nums\n    return ''.join(ans)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return None\n    test_str = list(test_str)\n    num_pos = []\n    for i, ch in enumerate(test_str):\n        if ch.isdigit():\n            num_pos.append(i)\n    for num in num_pos:\n        test_str[num], test_str[-1] = test_str[-1], test_str[num]\n    return ''.join(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [x for x in test_str if x.isnumeric()]\n    num_list.sort(reverse=True)\n    for x in num_list:\n        test_str = test_str.replace(x, \"\", 1)\n    return test_str + \"\".join(num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    from re import sub\n    return sub('[^0-9]+', '', test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    for i in range(len(test_str)):\n        if test_str[i] in '0123456789':\n            num_str += test_str[i]\n    result_str = test_str\n    for i in range(len(test_str) - len(num_str)):\n        result_str = result_str.replace(num_str[i], '', 1)\n    return result_str + num_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return re.sub('[^0-9]+', '', test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = [x for x in test_str]\n    # print(str_list)\n    for i in range(len(str_list)):\n        if not str_list[i].isdigit():\n            str_list[i], str_list[len(str_list) - 1] = str_list[len(str_list) - 1], str_list[i]\n    # print(str_list)\n    return ''.join(str_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            test_str = test_str[:i]+test_str[i+1:]+str(test_str[i])\n            i -= 1\n        i += 1\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # get all the numbers\n    num_list = re.findall('[0-9]', test_str)\n    # get all the alphabets\n    alpha_list = re.findall('[a-zA-Z]', test_str)\n    # concatinate the numbers and alphabets\n    new_str = ''.join(alpha_list + num_list)\n    # return the new string\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_map = {'0':'',\n    '1':'one',\n    '2':'two',\n    '3':'three',\n    '4':'four',\n    '5':'five',\n    '6':'six',\n    '7':'seven',\n    '8':'eight',\n    '9':'nine'\n    }\n    s = test_str.lower()\n    s = s.replace('1','one').replace('2','two').replace('3','three').replace('4','four').replace('5','five').replace('6','six').replace('7','seven').replace('8','eight').replace('9','nine')\n    return s\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    L = len(a)\n    if L <= 1:\n        return L\n    f = [[False for j in range(L)] for i in range(L)]\n    for i in range(L):\n        for j in range(i):\n            if a[i] % a[j] == 0 and f[i][j] == True:\n                f[i][j] = False\n            elif a[i] % a[j] == 0 and f[i][j] == False:\n                f[i][j] = True\n    maxsize = 1\n    for i in range(L):\n        for j in range(i):\n            if f[i][j] == True:\n                size = 2\n                k = j\n                while k < i:\n                    if f[i][k] == True:\n                        size += 1\n                        k += 1\n                    else:\n                        break\n                if size > maxsize:\n                    maxsize = size\n    return maxsize\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    a = sorted(a)\n    n = len(a)\n    cnt = [0]*n\n    cnt[-1] = 1\n    div = a[-1]/a[-2]\n    for i in range(n-2,-1,-1):\n        if a[i]/div>a[i+1]:\n            cnt[i] = 1\n        else:\n            cnt[i] = cnt[i+1]+1\n            div = a[i]/a[i+cnt[i+1]]\n    return sum(cnt)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset = [0]*len(a)\n    subset[0] = a[0]\n    for i in range(1,len(a)):\n        if a[i]%2==0:\n            subset[i] = subset[i-1] + a[i]\n        else:\n            subset[i] = subset[i-1]\n    return max(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = set()\n    for num in a:\n        if num % 2 == 0:\n            s.add(num)\n    return len(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for l in range(2,n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if l==2:\n                dp[i][j] = max(a[i],a[j])\n            else:\n                dp[i][j] = max(dp[i+1][j],dp[i][j-1]+a[j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    if len(a) == 0:\n        return 0\n    \n    a = sorted(a, reverse=True)\n    #print a\n    \n    n = len(a)\n    res = 0\n    for i in xrange(n):\n        for j in xrange(i, n):\n            if a[i] % a[j] == 0:\n                res += 1\n    \n    return res\n    \ndef smallest_subset(a):\n    '''\n    Write a function to find the size of the smallest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    if len(a) == 0:\n        return 0\n    \n    a = sorted(a)\n    #print a\n    \n    n = len(a)\n    res = 0\n    for i in xrange(n):\n        for j in xrange(i, n):\n            if a[i] % a[j] == 0:\n                res += 1\n    \n    return res\n    \ndef has_duplicates(a):\n    '''\n    Write a function that returns True if any element appears more than once in a list, and False otherwise.\n    '''\n    \n    s = set()\n    for elem in a:\n        if elem in s:\n            return True\n        else:\n            s.add(elem)\n    return False\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = {}\n    for i in range(len(a)):\n        if a[i] in result:\n            result[a[i]] += 1\n        else:\n            result[a[i]] = 1\n    max_count = 0\n    for i in result:\n        if result[i] > max_count:\n            max_count = result[i]\n    return max_count\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def lsubsets(a, idx, size, seen):\n        # base case\n        if idx == len(a):\n            return size\n        if size >= len(a):\n            return 0\n        if a[idx]%size == 0:\n            # seen all the numbers\n            return size\n        for i in xrange(1, size+1):\n            if not seen[i]:\n                seen[i] = True\n                subsize = lsubsets(a, idx+1, size-i, seen)\n                if subsize > size:\n                    subsize = size\n                seen[i] = False\n                if subsize > size:\n                    return size\n                size = subsize\n        return size\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    ans = 0\n    if n == 0:\n        return ans\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return len(a)\n    if len(a) == 2:\n        if a[0] % a[1] == 0:\n            return len(a)\n        else:\n            return len(a) - 1\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] % a[0]!= 0:\n            if a[i] % a[i - 1] == 0:\n                return i\n    return len(a)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        return (arr1[n/2]+arr2[n/2])/2\n    else:\n        return arr1[n/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    def get_median_pair(arr1, arr2, n):\n        '''\n        Function to find the median of two sorted lists of same size.\n        '''\n        \n        if n % 2 == 0:\n            return (arr1[n // 2] + arr2[n // 2]) / 2.0\n        else:\n            return arr1[n // 2]\n            \n    \n    def binary_search(arr, item, l, r):\n        '''\n        Binary search for an item in the arr.\n        '''\n        \n        if l > r:\n            return False\n        \n        mid = (l + r) / 2\n        \n        if arr[mid] == item:\n            return True\n        elif arr[mid] < item:\n            return binary_search(arr, item, mid + 1, r)\n        else:\n            return binary_search(arr, item, l, mid - 1)\n        \n    \n    med = 0\n    \n    if n % 2 == 0:\n        med = get_median_pair(arr1, arr2, n / 2)\n    else:\n        if arr2[(n - 1) / 2] < arr1[(n - 1) / 2]:\n            med = arr2[(n - 1) / 2]\n        else:\n            med = arr1[(n - 1) / 2]\n    \n    if n % 2 == 0:\n        if binary_search(arr1, med, 0, n / 2 - 1) and binary_search(arr2, med, 0, n / 2 - 1):\n            return med\n        else:\n            return get_median_pair(arr1, arr2, n / 2)\n    else:\n        if binary_search(arr1, med, 0, n / 2):\n            return med\n        else:\n            return get_median_pair(arr1, arr2, n / 2 + 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # n = len(arr1)\n    # if n == 0:\n    #     return arr2[n/2]\n    # if n == 1:\n    #     return (arr1[0] + arr2[0])/2.0\n    if n == 1:\n        return (arr1[0] + arr2[0])/2.0\n    else:\n        if n % 2 == 0:\n            return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2))/2.0\n        else:\n            return get_median(arr1, arr2, (n-1)/2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # assume arr1, arr2 are sorted arrays\n    if n%2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2.0\n    else:\n        return arr1[n//2]\n    \n    "
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        return get_median_last_element(arr1, arr2, n)\n    else:\n        return (get_median_last_element(arr1, arr2, n/2) + get_median_last_element(arr1, arr2, (n/2) + 1)) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1 = sorted(arr1)\n    print(arr1)\n    if len(arr1) % 2 == 0:\n        print(arr1[(len(arr1)//2) - 1] + arr1[(len(arr1)//2)])\n        return (arr1[(len(arr1)//2) - 1] + arr1[(len(arr1)//2)]) / 2\n    else:\n        print(arr1[len(arr1)//2])\n        return arr1[len(arr1)//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return (arr1[n//2] + arr2[n//2])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        return sorted([arr1[n // 2], arr2[n // 2]])[1]\n    else:\n        return (sorted([arr1[n // 2], arr2[n // 2]])[0] + sorted([arr1[n // 2 - 1], arr2[n // 2]])[0]) / 2.0\n    return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        return get_median(arr1, arr2, n-1)\n    else:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2)) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n % 2 == 0):\n        return (float(arr1[n // 2] + arr2[n // 2]) / 2)\n    else:\n        return arr1[n // 2]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) < 1:\n        return None\n    if len(nums) == 1:\n        return nums[0]**n\n    return nums[0]*nth_nums(nums[1:],n)\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ans=[]\n    for i in range(len(nums)):\n        ans.append(nums[i]**n)\n    return ans\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    powers = []\n    for num in nums:\n        powers.append(num**n)\n    return powers\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(n):\n        for num in nums:\n            num **= n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nth_nums = []\n    for i in nums:\n        nth_nums.append(i**n)\n    return nth_nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n    \ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    return string.lower()\n    \n    \ndef is_title(string):\n    '''\n    Write a python function to convert a given string to title case.\n    '''\n    return string.title()\n    \n    \ndef is_alphabetic(string):\n    '''\n    Write a python function to convert a given string to alphabetic case.\n    '''\n    return string.isalpha()\n    \n    \ndef is_digit(string):\n    '''\n    Write a python function to convert a given string to numeric case.\n    '''\n    return string.isdigit()\n    \n    \ndef is_space(string):\n    '''\n    Write a python function to convert a given string to space case.\n    '''\n    return string.isspace()\n    \n    \ndef is_alphanumeric(string):\n    '''\n    Write a python function to convert a given string to alphanumeric case.\n    '''\n    return string.isalnum()\n    \n    \ndef is_html(string):\n    '''\n    Write a python function to convert a given string to html case.\n    '''\n    return string.isalpha()\n    \n    \ndef is_punctuation(string):\n    '''\n    Write a python function to convert a given string to punctuation case.\n    '''\n    return string.punctuation\n    \n    \ndef is_eol(string):\n    '''\n    Write a python function to convert a given string to end of line case.\n    '''\n    return string.endswith('\\n')\n    \n    \ndef is_white_space(string):\n    '''\n    Write a python function to convert a given string to white space case.\n    '''\n    return string.isspace()\n    \n    \ndef is_white_space_and_space(string):\n    '''\n    Write a python function to convert a given string to white space and space case.\n    '''\n    return string.isspace() and string.isspace()\n    \n    \ndef is_white_space_and_non_space(string):\n    '''\n    Write a python function to convert a given string to white space and non space case.\n    '''\n    return string.isspace() and not string.isspace()\n    \n    \ndef is_not_empty(string):\n    '''\n    Write a python function to convert a given string to not empty case.\n    '''\n    return string and string!= ''\n    \n    \ndef is_empty(string):\n    '''\n    Write a python function to convert a given string to empty case.\n    '''\n    return not string\n    \n    \ndef is_numeric(string):\n    '''\n    Write a python function to convert a given string to numeric case.\n    '''\n    return string.isdigit()\n    \n    \ndef is_latin(string):\n    '''\n    Write a python function to convert a given string to latin case.\n    '''\n    return string.isalpha()\n    \n    \ndef is_latin_lower(string):\n    '''\n    Write a python function to convert a given string to latin lower case.\n    '''\n    return string.lower().isalpha()\n    \n    \ndef is_latin_upper(string):\n    '''\n    Write a python function to convert a given string to latin upper case.\n    '''\n    return string.upper().isalpha()\n    \n    \ndef is_latin_title(string):\n    '''\n    Write a python function to convert a given string to latin title case.\n    '''\n    return string.title().isalpha()\n    \n    \ndef is_latin_capitalize(string):\n    '''\n    Write a python function to convert a given string to latin capitalize case.\n    '''\n    return string.capitalize().isalpha()\n    \n    \ndef is_latin_strip(string):\n    '''\n    Write a python function to convert a given string to latin strip case.\n    '''\n    return string.strip().isalpha()\n    \n    \ndef is_latin_trim(string):\n    '''\n    Write a python function to convert a given string to latin trim case.\n    '''\n    return string.strip().isalpha()\n    \n    \ndef is_latin_start_with(string, chars):\n    '''\n    Write a python function to convert a given string to latin start with case.\n    '''\n    return string.startswith(chars)\n    \n    \ndef is_latin_end_with(string, chars):\n    '''\n    Write a python function to convert a given string to latin end with case.\n    '''\n    return string.endswith(chars)\n    \n    \ndef is_latin_contains(string, chars):\n    '''\n    Write a python function to convert a given string to latin contains case.\n    '''\n    return chars in string\n    \n    \ndef is_latin_not_contains(string, chars):\n    '''\n    Write a python function to convert a given string to latin not contains case.\n    '''\n    return not string.find(chars) == -1\n    \n    \ndef is_latin_similar(string, chars):\n    '''\n    Write a python function to convert a given string to latin similar case.\n    '''\n    return string.lower().find(chars.lower())!= -1\n    \n    \ndef is_latin_similar_ignore_case(string, chars):\n    '''\n    Write a python function to convert a given string to latin similar case ignore case.\n    '''\n    return string.lower().find(chars.lower())!= -1\n    \n    \ndef is_latin_similar_ignore_case_and_space(string, chars):\n    '''\n    Write a python function to convert a given string to latin similar case ignore space and space case.\n    '''\n    return string.lower().find(chars.lower())!= -1 and string.lower().find(' ')!= -1\n    \n    \ndef is_latin_similar_ignore_case_and_space_and_space(string, chars):\n    '''\n    Write a python function to convert a given string to latin similar case ignore space and space case.\n    '''\n    return string.lower().find(chars.lower())!= -1 and string.lower().find(' ')!= -1\n    \n    \ndef is_latin_not_similar(string, chars):\n    '''\n    Write a python function to convert a given string to latin not similar case.\n    '''\n    return not string.lower().find(chars.lower()) == -1\n    \n    \ndef is_latin_not_similar_ignore_case(string, chars):\n    '''\n    Write a python function to convert a given string to latin not similar case ignore case.\n    '''\n    return not string.lower().find(chars.lower()) == -1\n    \n    \ndef is_latin_not_similar_ignore_case_and_space(string, chars):\n    '''\n    Write a python function to convert a given string to latin not similar case ignore space and space case.\n    '''\n    return not string.lower().find(chars.lower()) == -1 and string.lower().find(' ')!= -1\n    \n    \ndef is_latin_not_similar_ignore_case_and_space_and_space(string, chars):\n    '''\n    Write a python function to convert a given string to latin not similar case ignore space and space case.\n    '''\n    return not string.lower().find(chars.lower()) == -1 and string.lower().find(' ')!= -1\n    \n    \ndef is_latin_not_similar_ignore_case_and_space_and_space_and_space(string, chars):\n    '''\n    Write a python function to convert a given string to latin not similar case ignore space and space case.\n    '''\n    return not string.lower().find(chars.lower()) == -1 and string.lower().find(' ')!= -1\n    \n    \ndef is_latin_not_similar_ignore_case_and_space_and_space_and_space_and_space"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\ndef remove_spaces(string):\n    '''\n    Write a python function to remove all the spaces in a string.\n    '''\n    return string.replace(' ','')\ndef split_string(string):\n    '''\n    Write a python function to split a string into list of words.\n    '''\n    return string.split()\ndef remove_duplicate_words(string):\n    '''\n    Write a python function to remove all the duplicated words in a string.\n    '''\n    return''.join(set(string.split()))\ndef char_frequency(string):\n    '''\n    Write a python function to count the frequency of each character in a string.\n    '''\n    freq = {}\n    for i in string:\n        freq[i] = string.count(i)\n    return freq\ndef count_vowels(string):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    return sum([1 for i in string if i in vowels])\ndef count_consonants(string):\n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    return sum([1 for i in string if i in consonants])\ndef is_prime(num):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\ndef is_palindrome(string):\n    '''\n    Write a python function to check if a given string is palindrome.\n    '''\n    return string == string[::-1]\ndef find_missing_char(string):\n    '''\n    Write a python function to find the missing character in a string.\n    '''\n    for i,j in zip(string,string[::-1]):\n        if i!= j:\n            return j\n    return\ndef count_digits(string):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    return sum([1 for i in string if i.isdigit()])\ndef count_alphabets(string):\n    '''\n    Write a python function to count the number of alphabets in a string.\n    '''\n    return sum([1 for i in string if i.isalpha()])\ndef count_special_characters(string):\n    '''\n    Write a python function to count the number of special characters in a string.\n    '''\n    return sum([1 for i in string if not i.isalnum()])\ndef replace_special_characters(string):\n    '''\n    Write a python function to replace the special characters in a string.\n    '''\n    return string.replace('@','a')\ndef sort_string_by_length(string):\n    '''\n    Write a python function to sort the string by length.\n    '''\n    return sorted(string,key=len)\ndef count_repeat(string):\n    '''\n    Write a python function to find the count of all the repeating characters in a string.\n    '''\n    freq = {}\n    for i in string:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\ndef check_if_permutation(string1, string2):\n    '''\n    Write a python function to check if two given strings are permutations of each other.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        string1 = sorted(string1)\n        string2 = sorted(string2)\n        return string1 == string2\ndef check_for_balanced_brackets(string):\n    '''\n    Write a python function to check if a string is balanced.\n    '''\n    if len(string) % 2!= 0:\n        return False\n    else:\n        freq = {}\n        for i in string:\n            if i not in freq:\n                freq[i] = 1\n            else:\n                freq[i] += 1\n        for key,value in freq.iteritems():\n            if value % 2!= 0:\n                return False\n        return True\ndef check_for_probable_password(string):\n    '''\n    Write a python function to check if a string is a probable password or not.\n    '''\n    freq = {}\n    for i in string:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    if'' in string:\n        return False\n    if '*' in string:\n        return False\n    if len(string) < 6 or len(string) > 10:\n        return False\n    if len(freq) < 2:\n        return False\n    for i,j in freq.iteritems():\n        if j > 1:\n            return False\n    return True\ndef find_word_concatenation(string):\n    '''\n    Write a python function to check if a string is a concatenation of two words.\n    '''\n    for i in range(1,len(string)):\n        if len(string) % i!= 0:\n            return False\n    return True\ndef rotate_string_left(string,num):\n    '''\n    Write a python function to rotate a string to the left by num.\n    '''\n    return ''.join(string[num:] + string[:num])\ndef reverse_string(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return ''.join(string[::-1])\ndef is_rotated_palindrome(string):\n    '''\n    Write a python function to check if a string is a rotated palindrome.\n    '''\n    return string == rotate_string_left(string,len(string) / 2)\ndef check_string_rotation(string1,string2):\n    '''\n    Write a python function to check if a string is a rotation of another string.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    elif len(string1) % 2!= 0:\n        return False\n    else:\n        return string1 == rotate_string_left(string2,len(string1) / 2)\ndef insert_string_at_nth_position(string,val,n):\n    '''\n    Write a python function to insert a string at nth position in the given string.\n    '''\n    string = string[:n] + val + string[n:]\n    return string\ndef reverse_string_in_place(string):\n    '''\n    Write a python function to reverse the characters in a string in place.\n    '''\n    string[:] = string[::-1]\n    return string\ndef merge_two_strings(string1,string2):\n    '''\n    Write a python function to merge two strings.\n    '''\n    if len(string1) > len(string2):\n        return string2 + string1[len(string1)-len(string2):]\n    else:\n        return string1 + string2[len(string2)-len(string1):]\ndef count_and_replace(string):\n    '''\n    Write a python function to count and replace characters in a string.\n    '''\n    freq = {}\n    for i in string:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    for key,value in freq.iteritems():\n        if value == 1:\n            string = string.replace(key,'')\n    return string\ndef prime_factors(num):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if num < 2:\n        return None\n    elif num == 2:\n        return [2]\n    elif num % 2 == 0:\n        return [2] + prime_factors(num/2)"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return string\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for letter in string:\n        if not letter.isupper():\n            return False\n    return True\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if(len(string) == 0):\n        return False\n    if(string[0].isupper()):\n        return True\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    try:\n        if string[0].isupper():\n            return True\n    except:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    length = len(newList)\n    temp = newList[0]\n    newList[0] = newList[length - 1]\n    newList[length - 1] = temp\n    return newList\n    \ndef remove_duplicates(newList):\n    '''\n    Write a python function to remove duplicates from a list\n    '''\n    newList = list(set(newList))\n    return newList\n    \ndef isPalindrome(newList):\n    '''\n    Write a python function to check if a given list is a palindrome or not.\n    '''\n    return newList == newList[::-1]\n    \ndef isListPalindrome(newList):\n    '''\n    Write a python function to check if a given list is a palindrome or not.\n    '''\n    newList.sort()\n    return newList == newList[::-1]\n    \ndef isListPalindrome2(newList):\n    '''\n    Write a python function to check if a given list is a palindrome or not.\n    '''\n    # newList.sort()\n    length = len(newList)\n    for i in range(0, length/2):\n        if newList[i]!= newList[length - i -1]:\n            return False\n    return True\n    \ndef find_duplicates(newList):\n    '''\n    Write a python function to find duplicates in a list\n    '''\n    duplicates = []\n    length = len(newList)\n    for i in range(0, length):\n        if newList[i] in newList[:i]:\n            if newList[i] not in duplicates:\n                duplicates.append(newList[i])\n    return duplicates\n    \ndef factorial(num):\n    '''\n    Write a python function to calculate the factorial of a given number\n    '''\n    if num == 0:\n        return 1\n    return num * factorial(num - 1)\n    \ndef find_max(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(0, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_max2(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_max3(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(0, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_max4(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_max5(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(0, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_max6(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_max7(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_max8(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_max9(newList):\n    '''\n    Write a python function to find the max element in a list\n    '''\n    maxValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] > maxValue:\n            maxValue = newList[i]\n    return maxValue\n    \ndef find_min(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(0, len(newList)):\n        if newList[i] < minValue:\n            minValue = newList[i]\n    return minValue\n    \ndef find_min2(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(0, len(newList)):\n        if newList[i] < minValue:\n            minValue = newList[i]\n    return minValue\n    \ndef find_min3(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] < minValue:\n            minValue = newList[i]\n    return minValue\n    \ndef find_min4(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(0, len(newList)):\n        if newList[i] < minValue:\n            minValue = newList[i]\n    return minValue\n    \ndef find_min5(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] < minValue:\n            minValue = newList[i]\n    return minValue\n    \ndef find_min6(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] < minValue:\n            minValue = newList[i]\n    return minValue\n    \ndef find_min7(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] < minValue:\n            minValue = newList[i]\n    return minValue\n    \ndef find_min8(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(1, len(newList)):\n        if newList[i] < minValue:\n            minValue = newList[i]\n    return minValue\n    \ndef find_min9(newList):\n    '''\n    Write a python function to find the min element in a list\n    '''\n    minValue = newList[0]\n    for i in range(1"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #Check if the list is empty or of length 1\n    if len(newList)==0:\n        print(\"The new list is empty.\")\n    elif len(newList)==1:\n        print(\"The new list has length 1.\")\n    else:\n        temp=newList[0]\n        newList[0]=newList[-1]\n        newList[-1]=temp\n        print(\"The new list after swapping:\", newList)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = len(newList)\n    first = newList[0]\n    last = newList[l-1]\n    newList[0] = last\n    newList[l-1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    newList[0],newList[length-1] = newList[length-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    length = len(newList)\n    newList[length-1] = newList[0]\n    newList[0] = newList[length-1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #print list \n    size = len(newList) \n    \n    first = newList[0]\n    last = newList[size-1]\n    newList[0] = last\n    newList[size-1] = first\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*(math.pi*r**2)/4\n    \ndef rect_area(a,b) :\n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a square with a given length and width.\n    '''\n    return a*b\n    \ndef hex_area(r) :\n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a square with a given length and width.\n    '''\n    return math.sqrt(3)*r**2/2\n    \ndef rhombus_area(r) :\n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a square with a given length and width.\n    '''\n    return r**2\n    \ndef pentagon_area(r) :\n    '''\n    Write a python function to find the area of the largest pentagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef hexagon_area(r) :\n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef octagon_area(r) :\n    '''\n    Write a python function to find the area of the largest octagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(2*math.sqrt(2))\n    \ndef rectangle_area(a,b) :\n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a square with a given length and width.\n    '''\n    return a*b\n    \ndef octagon_area(r) :\n    '''\n    Write a python function to find the area of the largest octagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(2*math.sqrt(2))\n    \ndef rectangle_area(a,b) :\n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a square with a given length and width.\n    '''\n    return a*b\n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given length and width.\n    '''\n    return math.pi*r**2\n    \ndef rectangle_area(a,b) :\n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a square with a given length and width.\n    '''\n    return a*b\n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef rhombus_area(r) :\n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(math.sqrt(2))\n    \ndef pentagon_area(r) :\n    '''\n    Write a python function to find the area of the largest pentagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(math.sqrt(2)*3/2)\n    \ndef hexagon_area(r) :\n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(math.sqrt(2)*3/2)\n    \ndef hexagon_area(r) :\n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef octagon_area(r) :\n    '''\n    Write a python function to find the area of the largest octagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(2*math.sqrt(2))\n    \ndef hexagon_area(r) :\n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef octagon_area(r) :\n    '''\n    Write a python function to find the area of the largest octagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(2*math.sqrt(2))\n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given length and width.\n    '''\n    return math.pi*r**2\n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given length and width.\n    '''\n    return math.pi*r**2\n    \ndef hexagon_area(r) :\n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef rhombus_area(r) :\n    '''\n    Write a python function to find the area of the largest rhombus that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(math.sqrt(2))\n    \ndef pentagon_area(r) :\n    '''\n    Write a python function to find the area of the largest pentagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(math.sqrt(2)*3/2)\n    \ndef octagon_area(r) :\n    '''\n    Write a python function to find the area of the largest octagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(2*math.sqrt(2))\n    \ndef rectangle_area(a,b) :\n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a square with a given length and width.\n    '''\n    return a*b\n    \ndef octagon_area(r) :\n    '''\n    Write a python function to find the area of the largest octagon that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(2*math.sqrt(2))\n    \ndef rectangle_area(a,b) :\n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a square with a given length and width.\n    '''\n    return a*b\n    \ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a square with a given length and width.\n    '''\n    return r**2*(3*math.sqrt(2)/2)\n    \ndef rhombus_area(r) :\n    '''\n    Write a python function to find the area of the largest r"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    import math\n    \n    print (math.pi * r**2) / 4\n    \ntriangle_area(1)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def A(x):\n        return (x * x * math.pi / 4) - (x * math.sqrt(3)) / 2\n    return A(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    return pi*r**2/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2 * 3**2 * 1/4)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    return (3*pi*r)/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return math.sqrt(math.pi * r * r)\n    \nprint(triangle_area(1.2))\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)*math.pi/4.0\n    \ndef triangle_perimeter(a,b,c) :  \n    '''\n    Write a python function to find the perimeter of the triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return a+b+c\n    \ndef circle_area(r) :  \n    '''\n    Write a python function to find the area of the circle that is inscribed in a semicircle with a given radius.\n    '''\n    return math.pi*r**2\n    \ndef circle_circumference(r) :  \n    '''\n    Write a python function to find the circumference of the circle that is inscribed in a semicircle with a given radius.\n    '''\n    return 2*math.pi*r\n    \ndef circle_circumference_by_length(r) :  \n    '''\n    Write a python function to find the circumference of the circle that is inscribed in a semicircle with a given radius by using the radius directly.\n    '''\n    return 2*r\n    \ndef circle_circumference_by_area(r) :  \n    '''\n    Write a python function to find the circumference of the circle that is inscribed in a semicircle with a given radius by using the radius directly.\n    '''\n    return math.pi*r**2\n    \ndef circle_circumference_by_perimeter(a,b,c) :  \n    '''\n    Write a python function to find the circumference of the circle that is inscribed in a semicircle with a given radius by using the radius directly.\n    '''\n    return 2*(a+b+c)\n    \ndef circle_perimeter(r) :  \n    '''\n    Write a python function to find the perimeter of the circle that is inscribed in a semicircle with a given radius.\n    '''\n    return 2*math.pi*r\n    \ndef circle_perimeter_by_length(r) :  \n    '''\n    Write a python function to find the perimeter of the circle that is inscribed in a semicircle with a given radius by using the radius directly.\n    '''\n    return 2*r\n    \ndef circle_perimeter_by_area(a,b,c) :  \n    '''\n    Write a python function to find the perimeter of the circle that is inscribed in a semicircle with a given radius by using the radius directly.\n    '''\n    return 2*(a+b+c)\n    \ndef rectangle_area(a,b) :  \n    '''\n    Write a python function to find the area of the rectangle that is inscribed in a square with a given side length.\n    '''\n    return a*b\n    \ndef rectangle_perimeter(a,b) :  \n    '''\n    Write a python function to find the perimeter of the rectangle that is inscribed in a square with a given side length.\n    '''\n    return 2*(a+b)\n    \ndef rectangle_perimeter_by_length(a,b) :  \n    '''\n    Write a python function to find the perimeter of the rectangle that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return 2*a\n    \ndef rectangle_perimeter_by_area(a,b) :  \n    '''\n    Write a python function to find the perimeter of the rectangle that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return 2*b\n    \ndef rectangle_perimeter_by_perimeter(a,b) :  \n    '''\n    Write a python function to find the perimeter of the rectangle that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return 2*(a+b)\n    \ndef triangle_area(a,b,c) :  \n    '''\n    Write a python function to find the area of the triangle that is inscribed in a square with a given side length.\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef triangle_perimeter(a,b,c) :  \n    '''\n    Write a python function to find the perimeter of the triangle that is inscribed in a square with a given side length.\n    '''\n    return a+b+c\n    \ndef triangle_perimeter_by_length(a,b,c) :  \n    '''\n    Write a python function to find the perimeter of the triangle that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return a+b+c\n    \ndef triangle_perimeter_by_area(a,b,c) :  \n    '''\n    Write a python function to find the perimeter of the triangle that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    s = (a+b+c)/2\n    return 2*s\n    \ndef triangle_perimeter_by_perimeter(a,b,c) :  \n    '''\n    Write a python function to find the perimeter of the triangle that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return a+b+c\n    \ndef hexagon_perimeter(a,b,c,d) :  \n    '''\n    Write a python function to find the perimeter of the hexagon that is inscribed in a square with a given side length.\n    '''\n    return a+b+c+d\n    \ndef hexagon_perimeter_by_length(a,b,c,d) :  \n    '''\n    Write a python function to find the perimeter of the hexagon that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return a+b+c+d\n    \ndef hexagon_perimeter_by_area(a,b,c,d) :  \n    '''\n    Write a python function to find the perimeter of the hexagon that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    s = (a+b+c+d)/2\n    return s*(s-a)*(s-b)*(s-c)*(s-d)**0.5\n    \ndef hexagon_perimeter_by_perimeter(a,b,c,d) :  \n    '''\n    Write a python function to find the perimeter of the hexagon that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return a+b+c+d\n    \ndef octagon_perimeter(a,b,c,d,e) :  \n    '''\n    Write a python function to find the perimeter of the octagon that is inscribed in a square with a given side length.\n    '''\n    return a+b+c+d+e\n    \ndef octagon_perimeter_by_length(a,b,c,d,e) :  \n    '''\n    Write a python function to find the perimeter of the octagon that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return a+b+c+d+e\n    \ndef octagon_perimeter_by_area(a,b,c,d,e) :  \n    '''\n    Write a python function to find the perimeter of the octagon that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    s = (a+b+c+d+e)/2\n    return s*(s-a)*(s-b)*(s-c)*(s-d)*(s-e)**0.5\n    \ndef octagon_perimeter_by_perimeter(a,b,c,d,e) :  \n    '''\n    Write a python function to find the perimeter of the octagon that is inscribed in a square with a given side length by using the side length directly.\n    '''\n    return a+b+c+d+e\n    \ndef is_rectangle(a,b,c,d) :  \n    '''\n    Write a python function to check if a rectangle is able to be inscribed in a square with a given side length.\n    '''\n    return a==b and c==d\n    \ndef is_triangle(a,b,c) :  \n    '''\n    Write a python function to chec"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = r*r\n    b = r*r*r\n    c = a*b*2*r/4\n    if c > 0 :\n        return (math.pi*r*r)/4\n    elif c == 0 :\n        return \"The triangle cannot be inscribed in a semicircle.\"\n    else :\n        return \"The area cannot be found.\"\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if array is None:\n        return\n    if len(array) == 0:\n        return\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return\n    if start == end:\n        if array[start]!= start+1:\n            return start+1\n        else:\n            return find_First_Missing(array,start+1,end)\n    if array[start]!= start+1:\n        return start+1\n    return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return array[mid]\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start>end:\n        return None\n    else:\n        return find_First_Missing_Recursive(array,start,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end==None):\n        end = len(array)\n    if(end<start):\n        return None\n    if(end==start):\n        if(array[start]==start):\n            return start+1\n        else:\n            return start\n    if(array[start]==start):\n        return find_First_Missing(array,start+1,end)\n    else:\n        return start\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return None\n    if start==end:\n        if array[start]!=start+1:\n            return start+1\n        else:\n            return find_First_Missing(array,start+1,end)\n    else:\n        mid=(start+end)/2\n        if array[mid]==mid+1:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end-start<2:\n        if array[start]!=start:\n            return start\n        else:\n            return array[start]+1\n    mid=(start+end)/2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return None\n    if start == end:\n        return start\n    mid = int((start+end)/2)\n    if array[mid] - array[start] == -1:\n        return array[start]\n    elif array[mid] - array[start] == 1:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid,end)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    string = string.replace(\" \",\"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    list_string = list(string)\n    for i in range(len(list_string)):\n        if list_string[i] =='':\n            list_string[i] = '%20'\n    return ''.join(list_string)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    s = list(string)\n    for i in range(0,len(s)):\n        if s[i] =='':\n            s[i] = '%20'\n    return ''.join(s)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = [item for item in list if item % 2 == 0]\n    return list_even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if list==[]:\n        return []\n    elif len(list)==1:\n        return [list[0]]\n    else:\n        if list[0]%2==0:\n            return [list[0]] + Split(list[1:])\n        else:\n            return Split(list[1:])\n    \ndef test_Split():\n    '''\n    Test Split function\n    '''\n    assert Split([1,2,3]) == [1,2,3]\n    assert Split([2,4,6]) == [2]\n    assert Split([]) == []\n    assert Split([2,4,6,8]) == [2,4,6,8]\n    \nif __name__ == '__main__':\n    print(Split([1,2,3,4]))\n    print(Split([2,4,6,8]))\n    print(Split([]))\n    print(Split([2,4,6,8]))\n    test_Split()\n    \n'''\nOutput:\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even = []\n    \n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1=[]\n    list2=[]\n    for i in list:\n        if i%2==0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    print list1\n    print list2\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print (\"Even Numbers in the list are\")\n    for i in list: \n        if i % 2 == 0: \n            print i\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i % 2 == 0:\n            even_num.append(i)\n    return even_num\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n    \n    "
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for x in list:\n        if x%2 == 0:\n            even.append(x)\n    return even\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) < 2:\n        return\n    if ele[0] == 1:\n        adj = [(ele[0], ele[1] + 1), (ele[0] + 1, ele[1] + 1)]\n        adj.extend(adjac(adj[0], sub))\n        adj.extend(adjac(adj[1], sub))\n        return adj\n    if ele[0] == 8:\n        adj = [(ele[0], ele[1] - 1), (ele[0] - 1, ele[1] - 1)]\n        adj.extend(adjac(adj[0], sub))\n        adj.extend(adjac(adj[1], sub))\n        return adj\n    if ele[0] == 0:\n        adj = [(ele[0], ele[1] + 1), (ele[0] + 1, ele[1] + 1), (ele[0] + 1, ele[1]), (ele[0] + 1, ele[1] - 1)]\n        adj.extend(adjac(adj[0], sub))\n        adj.extend(adjac(adj[1], sub))\n        adj.extend(adjac(adj[2], sub))\n        adj.extend(adjac(adj[3], sub))\n        return adj\n    if ele[0] == 7:\n        adj = [(ele[0], ele[1] - 1), (ele[0] - 1, ele[1] - 1), (ele[0] - 1, ele[1]), (ele[0] - 1, ele[1] + 1)]\n        adj.extend(adjac(adj[0], sub))\n        adj.extend(adjac(adj[1], sub))\n        adj.extend(adjac(adj[2], sub))\n        adj.extend(adjac(adj[3], sub))\n        return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        sub = [ele]\n    else:\n        sub.append(ele)\n    if ele[0] < 0 or ele[0] > 2 or ele[1] < 0 or ele[1] > 2:\n        return sub\n    else:\n        return adjac( (ele[0] + 1, ele[1]), sub) + adjac( (ele[0], ele[1] + 1), sub) + adjac( (ele[0] - 1, ele[1]), sub) + adjac( (ele[0], ele[1] - 1), sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Add more code here\n    if ele not in sub:\n        sub.append(ele)\n    else:\n        return\n    if ele[0] > 0:\n        adjac( (ele[0] - 1, ele[1]), sub)\n    if ele[1] > 0:\n        adjac( (ele[0], ele[1] - 1), sub)\n    if ele[0] < 3:\n        adjac( (ele[0] + 1, ele[1]), sub)\n    if ele[1] < 3:\n        adjac( (ele[0], ele[1] + 1), sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    p = []\n    p.append((x,y+1))\n    p.append((x,y-1))\n    p.append((x+1,y))\n    p.append((x-1,y))\n    return p\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        if ele[0] > 0:\n            adjac((ele[0], ele[1]+1), sub)\n        if ele[0] < 3:\n            adjac((ele[0]+1, ele[1]), sub)\n        if ele[1] > 0:\n            adjac((ele[0], ele[1]-1), sub)\n        if ele[1] < 3:\n            adjac((ele[0], ele[1]+1), sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = [(ele[0], ele[1] - 1), (ele[0], ele[1] + 1), (ele[0] - 1, ele[1]), (ele[0] + 1, ele[1])]\n    return adjacent\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele)!= tuple:\n        return\n    if len(ele) == 1:\n        sub.append(ele[0])\n    elif len(ele) == 2:\n        sub.extend([ele[0], ele[1]])\n    else:\n        return\n    return adjac(ele[0], sub)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y,z = ele\n    return [(x-1,y,z),(x+1,y,z),(x,y-1,z),(x,y+1,z),(x,y,z-1),(x,y,z+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 1:\n        return sub\n    for x in ele:\n        sub.append(x-1)\n        sub.append(x+1)\n        sub.append(x)\n        sub.append(x-1)\n        sub.append(x-1)\n    return adjac(sub, ele)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text is None:\n        return None\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_') if isinstance(text, str) else text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ','_')\n    new_text = new_text.replace('_','')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    result = ''\n    \n    for letter in text:\n        if letter.isspace():\n            result += '_'\n        else:\n            result += letter\n    \n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n    \ndef replace_commas(text):\n    '''\n    Write a function to replace commas with a colon and vice versa in a given string.\n    '''\n    return text.replace(',', ':').replace(':',',')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join(['_' if c==''else c for c in text])\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in xrange(0,len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # approach 2\n    # return [x for x in num_list if x!= 0] + [0] * num_list.count(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    for i in range(len(num_list) - len(new_list)):\n        new_list.append(0)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n    for zero in zeroes:\n        num_list.remove(zero)\n    num_list.extend(zeroes)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in xrange(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    for i in num_list:\n        if i!= 0:\n            zero_list.append(i)\n    for i in range(len(zero_list), len(num_list)):\n        zero_list.append(0)\n    return zero_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Using Python list comprehension\n    #return [num for num in num_list if num!= 0] + [0] * num_list.count(0)\n    \n    # Same thing as above, using the built-in extend method\n    num_list.extend([0] * num_list.count(0))\n    \n    return num_list\n    \n    \ndef is_palindrome(text):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return text == text[::-1]\n    \ndef is_palindrome_list(text_list):\n    '''\n    Write a python function to check if the given list is a palindrome.\n    '''\n    for i in range(len(text_list) / 2):\n        if text_list[i]!= text_list[-1 - i]:\n            return False\n            \n    return True\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n            count += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in xrange(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            num_list.pop()\n    return num_list\n    \ndef min_max(num_list):\n    '''\n    Write a python function to find the minimum and maximum number in a given list.\n    '''\n    num_min = num_list[0]\n    num_max = num_list[0]\n    for i in xrange(len(num_list)):\n        if num_list[i] < num_min:\n            num_min = num_list[i]\n        if num_list[i] > num_max:\n            num_max = num_list[i]\n    return num_min, num_max\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(len(arr)) : \n        for j in range(i+1,len(arr)) : \n            sum = sum ^ (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            total = total + arr[i] ^ arr[j]\n    return total \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return (sum([arr[i]^arr[j] for i in range(n) for j in range(i+1,n)]))\n    "
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0 \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            res += arr[i] ^ arr[j]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                continue\n            else:\n                res += arr[i] ^ arr[j]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    def pair_xor(arr,n) :\n        '''\n        Find the xor of all pairs in the given list.\n        '''\n        res = 0 \n        for i in range(n) :\n            for j in range(i+1,n) :\n                res = res ^ arr[i] ^ arr[j]\n        return res\n    return pair_xor(arr,n)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if arr == []:\n        return 0\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            result = result + arr[i] ^ arr[j]\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            sum += arr[i] ^ arr[j] \n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in xrange(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    '''\n    heapq.heapify(iterable)\n    for i in range(len(iterable)-1,-1,-1):\n        print(iterable)\n        hq.heappop(iterable)\n    '''\n    hq.heapify(iterable)\n    print(iterable)\n    for i in range(len(iterable)-1,-1,-1):\n        print(iterable)\n        hq.heappop(iterable)\n    print(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #create a heap\n    heap=[]\n    for item in iterable:\n        hq.heappush(heap,item)\n    #sort the heap\n    res=[]\n    while heap:\n        res.append(hq.heappop(heap))\n    return res\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    res=[]\n    hq.heapify(iterable)\n    while iterable:\n        res.append(hq.heappop(iterable))\n    return res\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in xrange(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h,val)\n    return [hq.heappop(h) for i in range(len(h))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for elem in iterable:\n        hq.heappush(h, elem)\n    return [hq.heappop(h) for i in range(len(h))]\n    "
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for v in iterable:\n        hq.heappush(h,v)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    elif sale_amount > actual_cost:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print \"No profit and no loss\"\n    elif actual_cost > sale_amount:\n        print \"Loss\"\n    elif actual_cost < sale_amount:\n        print \"Profit\"\n    else:\n        print \"Something went wrong\"\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost <= sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost == 0)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return noprofit_noloss(sale_amount - actual_cost, sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    elif actual_cost>sale_amount:\n        return False\n    else:\n        for i in range(1,int(actual_cost/sale_amount)+1):\n            if actual_cost>=sale_amount*i:\n                return True\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==0 or sale_amount==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost==sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    if actual_cost > sale_amount:\n        return False\n    return False\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215 * t + (35.75 * v**0.16)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * v**0.16) + (0.3965 * t * v**0.16)\n    return int(round(wci))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t * 1.8 + 32\n    v = v * 0.44704\n    wci = 13.12 + 0.6215 * t + (13.75 * t - 112.15) * v ** 0.16 + 0.3965 * t * v ** 0.16\n    wci = round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=13.12 + (0.6215*t) - (11.37*v**0.16) + (0.3965*t*v**0.16)\n    return round(wci)\ndef fahrenheit_to_celsius(fahrenheit):\n    '''\n    Write a function to convert an integer temperature in Fahrenheit to an integer temperature in Celsius.\n    '''\n    return (fahrenheit-32)*5.0/9.0\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Write a function to convert an integer temperature in Celsius to an integer temperature in Fahrenheit.\n    '''\n    return (celsius*9.0/5.0) + 32.0\ndef test_wind_chill():\n    '''\n    Write a function to test the wind_chill() function defined above.\n    '''\n    assert wind_chill(0,0) == 32.0\n    assert wind_chill(100,0) == 32.0\n    assert wind_chill(100,10) == 32.0\n    assert wind_chill(0,10) == 32.0\n    assert wind_chill(0,50) == 21.0\n    assert wind_chill(100,50) == 36.0\n    assert wind_chill(300,100) == 85.0\n    assert wind_chill(0,100) == 50.0\n    assert wind_chill(100,100) == 37.0\n    assert wind_chill(100,300) == 159.0\n    assert wind_chill(0,300) == 0\n    assert wind_chill(100,273) == 78.0\n    assert wind_chill(100,275) == 79.0\n    assert wind_chill(100,281) == 79.0\n    assert wind_chill(100,283) == 79.0\n    assert wind_chill(100,289) == 79.0\n    assert wind_chill(100,290) == 79.0\n    assert wind_chill(100,293) == 79.0\n    assert wind_chill(100,295) == 79.0\n    assert wind_chill(100,296) == 79.0\n    assert wind_chill(100,297) == 79.0\n    assert wind_chill(100,298) == 79.0\n    assert wind_chill(100,299) == 79.0\n    assert wind_chill(100,300) == 79.0\n    assert wind_chill(100,301) == 79.0\n    assert wind_chill(100,302) == 79.0\n    assert wind_chill(100,303) == 79.0\n    assert wind_chill(100,304) == 79.0\n    assert wind_chill(100,305) == 79.0\n    assert wind_chill(100,306) == 79.0\n    assert wind_chill(100,307) == 79.0\n    assert wind_chill(100,308) == 79.0\n    assert wind_chill(100,309) == 79.0\n    assert wind_chill(100,310) == 79.0\n    assert wind_chill(100,311) == 79.0\n    assert wind_chill(100,312) == 79.0\n    assert wind_chill(100,313) == 79.0\n    assert wind_chill(100,314) == 79.0\n    assert wind_chill(100,315) == 79.0\n    assert wind_chill(100,316) == 79.0\n    assert wind_chill(100,317) == 79.0\n    assert wind_chill(100,318) == 79.0\n    assert wind_chill(100,319) == 79.0\n    assert wind_chill(100,320) == 79.0\n    assert wind_chill(100,321) == 79.0\n    assert wind_chill(100,322) == 79.0\n    assert wind_chill(100,323) == 79.0\n    assert wind_chill(100,324) == 79.0\n    assert wind_chill(100,325) == 79.0\n    assert wind_chill(100,326) == 79.0\n    assert wind_chill(100,327) == 79.0\n    assert wind_chill(100,328) == 79.0\n    assert wind_chill(100,329) == 79.0\n    assert wind_chill(100,330) == 79.0\n    assert wind_chill(100,331) == 79.0\n    assert wind_chill(100,332) == 79.0\n    assert wind_chill(100,333) == 79.0\n    assert wind_chill(100,334) == 79.0\n    assert wind_chill(100,335) == 79.0\n    assert wind_chill(100,336) == 79.0\n    assert wind_chill(100,337) == 79.0\n    assert wind_chill(100,338) == 79.0\n    assert wind_chill(100,339) == 79.0\n    assert wind_chill(100,340) == 79.0\n    assert wind_chill(100,341) == 79.0\n    assert wind_chill(100,342) == 79.0\n    assert wind_chill(100,343) == 79.0\n    assert wind_chill(100,344) == 79.0\n    assert wind_chill(100,345) == 79.0\n    assert wind_chill(100,346) == 79.0\n    assert wind_chill(100,347) == 79.0\n    assert wind_chill(100,348) == 79.0\n    assert wind_chill(100,349) == 79.0\n    assert wind_chill(100,350) == 79.0\n    assert wind_chill(100,351) == 79.0\n    assert wind_chill(100,352) == 79.0\n    assert wind_chill(100,353) == 79.0\n    assert wind_chill(100,354) == 79.0\n    assert wind_chill(100,355) == 79.0\n    assert wind_chill(100,356) == 79.0\n    assert wind_chill(100,357) == 79.0\n    assert wind_chill(100,358) == 79.0\n    assert wind_chill(100,359) == 79.0\n    assert wind_chill(100,360) == 79.0\n    assert wind_chill(100,361) == 79.0\n    assert wind_chill(100,362) == 79.0\n    assert wind_chill(100,363) == 79.0\n    assert wind_chill(100,364) == 79.0\n    assert wind_chill(100,365) == 79.0\n    assert wind_chill(100,366) == 79.0\n    assert wind_chill(100,367) == 79.0\n    assert wind_chill(100,368) == 79.0\n    assert wind_chill(100,369) == 79.0\n    assert wind_chill(100,370) == 79.0\n    assert wind_chill(100,371) == 79.0\n    assert wind_chill(100,372) == 79.0\n    assert wind_chill(100,373) == 79.0\n    assert wind_chill(100,374) == 79.0\n    assert wind_chill(100,375) == 79.0\n    assert wind_chill(100,376) == 79.0\n    assert wind_chill(100,377) == 79.0\n    assert wind_chill(100,378) == 79.0\n    assert wind_chill(100,379) == 79.0\n    assert wind_chill(100,380) == 79.0\n    assert wind_chill(100,381) == 79.0\n    assert wind_chill(100,382) == 79.0\n    assert wind_chill(100,383) == 79.0\n    assert wind_chill(100,384) == 79.0\n    assert wind_chill(100,385) == 79.0\n    assert wind_chill(100,386) == 79.0\n    assert wind_chill(100,387) == 79.0\n    assert wind_chill(100,388) == 7"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215 * t + (35.75 * math.pow(v, 0.16)) + ((0.4275 * t) * (v ** 0.16))\n    return round(a)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    #Wind chill is given by the following formula\n    #C=(13.12 + (0.6215*t) - (11.37*v) + (0.3965*(t**2)))/7.5\n    # where C is the wind chill index and t is the temperature in degrees Celsius.\n    #The wind chill index ranges from -37.2 to 37.2 and is dependent on t and v.\n    #\n    #Tested values:\n    #\n    #Wind chill index: 23.9\n    #Temperature: 15\n    #Velocity: 3.2\n    #\n    #Wind chill index: 26.7\n    #Temperature: 19\n    #Velocity: 5.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 22\n    #Velocity: 8.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 25\n    #Velocity: 10.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 28\n    #Velocity: 13.4\n    #\n    #Wind chill index: 26.7\n    #Temperature: 30\n    #Velocity: 17.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 31\n    #Velocity: 19.8\n    #\n    #Wind chill index: 26.7\n    #Temperature: 33\n    #Velocity: 22.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 35\n    #Velocity: 24.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 37\n    #Velocity: 26.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 39\n    #Velocity: 28.8\n    #\n    #Wind chill index: 26.7\n    #Temperature: 41\n    #Velocity: 31.4\n    #\n    #Wind chill index: 26.7\n    #Temperature: 43\n    #Velocity: 33.1\n    #\n    #Wind chill index: 26.7\n    #Temperature: 45\n    #Velocity: 35.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 47\n    #Velocity: 38.2\n    #\n    #Wind chill index: 26.7\n    #Temperature: 49\n    #Velocity: 40.9\n    #\n    #Wind chill index: 26.7\n    #Temperature: 51\n    #Velocity: 43.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 53\n    #Velocity: 44.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 55\n    #Velocity: 46.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 57\n    #Velocity: 48.1\n    #\n    #Wind chill index: 26.7\n    #Temperature: 59\n    #Velocity: 51.9\n    #\n    #Wind chill index: 26.7\n    #Temperature: 61\n    #Velocity: 53.6\n    #\n    #Wind chill index: 26.7\n    #Temperature: 63\n    #Velocity: 55.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 65\n    #Velocity: 57.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 67\n    #Velocity: 59.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 69\n    #Velocity: 61.9\n    #\n    #Wind chill index: 26.7\n    #Temperature: 71\n    #Velocity: 63.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 73\n    #Velocity: 65.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 75\n    #Velocity: 67.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 77\n    #Velocity: 69.1\n    #\n    #Wind chill index: 26.7\n    #Temperature: 79\n    #Velocity: 71.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 81\n    #Velocity: 73.8\n    #\n    #Wind chill index: 26.7\n    #Temperature: 83\n    #Velocity: 75.6\n    #\n    #Wind chill index: 26.7\n    #Temperature: 85\n    #Velocity: 77.1\n    #\n    #Wind chill index: 26.7\n    #Temperature: 87\n    #Velocity: 79.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 89\n    #Velocity: 81.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 91\n    #Velocity: 83.1\n    #\n    #Wind chill index: 26.7\n    #Temperature: 93\n    #Velocity: 85.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 95\n    #Velocity: 87.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 97\n    #Velocity: 89.8\n    #\n    #Wind chill index: 26.7\n    #Temperature: 99\n    #Velocity: 91.6\n    #\n    #Wind chill index: 26.7\n    #Temperature: 101\n    #Velocity: 93.2\n    #\n    #Wind chill index: 26.7\n    #Temperature: 103\n    #Velocity: 85.8\n    #\n    #Wind chill index: 26.7\n    #Temperature: 105\n    #Velocity: 87.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 107\n    #Velocity: 89.4\n    #\n    #Wind chill index: 26.7\n    #Temperature: 109\n    #Velocity: 91.1\n    #\n    #Wind chill index: 26.7\n    #Temperature: 111\n    #Velocity: 93.4\n    #\n    #Wind chill index: 26.7\n    #Temperature: 113\n    #Velocity: 95.2\n    #\n    #Wind chill index: 26.7\n    #Temperature: 115\n    #Velocity: 97.8\n    #\n    #Wind chill index: 26.7\n    #Temperature: 117\n    #Velocity: 99.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 119\n    #Velocity: 101.2\n    #\n    #Wind chill index: 26.7\n    #Temperature: 121\n    #Velocity: 103.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 123\n    #Velocity: 105.6\n    #\n    #Wind chill index: 26.7\n    #Temperature: 125\n    #Velocity: 107.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 127\n    #Velocity: 109.3\n    #\n    #Wind chill index: 26.7\n    #Temperature: 129\n    #Velocity: 111.8\n    #\n    #Wind chill index: 26.7\n    #Temperature: 131\n    #Velocity: 113.6\n    #\n    #Wind chill index: 26.7\n    #Temperature: 133\n    #Velocity: 115.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 135\n    #Velocity: 117.2\n    #\n    #Wind chill index: 26.7\n    #Temperature: 137\n    #Velocity: 119.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 139\n    #Velocity: 121.5\n    #\n    #Wind chill index: 26.7\n    #Temperature: 141\n    #Velocity: 123.2\n    #\n    #Wind chill index: 26.7\n    #Temperature: 143\n    #Velocity: 125.7\n    #\n    #Wind chill index: 26.7\n    #Temperature: 145\n    #Velocity: 127.4\n    #\n    #Wind chill index: 26.7\n    #Temperature: 147\n    #Velocity: 129.1\n    #\n    #Wind chill index: 26.7\n    #Temperature: 149\n    #Velocity: 131.4\n    #\n    #Wind chill index: 26.7\n    #Temperature: 151\n    #Velocity: 133.1\n    #\n    #Wind chill index: 26"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215 * t + (35.75 * math.pow(v,0.16))\n    return math.ceil(a)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    v = float(v)\n    t = float(t)\n    wci = 13.12 + 0.6215 * t + (13.75 * v**0.16) - (5.42 * t**0.16) + (0.4275 * v**0.16 * t**0.16)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return int(35.74 + 0.6215 * t + (35.75 * v ** 0.16) - (0.4275 * t) * (v ** 0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0].islower() == True:\n            sample_names.remove(name)\n    sum_length = sum(len(x) for x in sample_names)\n    return sum_length\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    l = [re.sub(r'[a-z]+', '', i) for i in sample_names]\n    return sum(len(i) for i in l)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper() == False)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(n) for n in sample_names if n[0].isupper())\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # your code goes here\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names\n    nam_len = sum([len(name) for name in names if name[0].islower()])\n    print(nam_len)\n    return nam_len\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #First we should count how many names are actually uppercase\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += 1\n    #Then we should count how many names are actually lowercase\n    count_lower = 0\n    for name in sample_names:\n        if name[0].islower():\n            count_lower += 1\n    #Finally we should sum up the total number of names\n    return count + count_lower\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names[0]\n    return sum(len(i) for i in sample_names if i[0].isupper())\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if not name.startswith('a'))\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    res = 0\n    for i in range(len(sample_names)):\n        if sample_names[i][0].isupper() == False:\n            res += len(sample_names[i])\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = items.replace(\"(\", \"\").replace(\")\", \"\")\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removes all the parenthesis\n    regex = re.compile(r'\\(.+?\\)')\n    match = regex.findall(items)\n    for i in match:\n        items = items.replace(i, '')\n    # Removes all the whitespace\n    items = items.replace(\" \", \"\")\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    r = ''.join(items)\n    return re.sub(r'\\(([^)]+)\\)', '', r)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    r = r\"\\((.*)\\)\"\n    s = items.replace('(','')\n    s = s.replace(')','')\n    t = re.findall(r, s)\n    for item in t:\n        s = s.replace(item, '')\n    return s\ndef remove_square_brackets(items):\n    '''\n    Write a function to remove the square brackets and what is inbetween them from a string.\n    '''\n    r = r\"\\[[^]]*\\]\"\n    s = items.replace('[','')\n    s = s.replace(']','')\n    t = re.findall(r, s)\n    for item in t:\n        s = s.replace(item, '')\n    return s\ndef remove_comma(items):\n    '''\n    Write a function to remove the comma and what is inbetween them from a string.\n    '''\n    r = r\"\\,\"\n    s = items.replace(',','')\n    t = re.findall(r, s)\n    for item in t:\n        s = s.replace(item, '')\n    return s\ndef change_all(items):\n    '''\n    Write a function to replace all spaces with a single space and to capitalize all the letters of the first and last word of a sentence.\n    '''\n    items = items.replace(' ', '')\n    items = items.title()\n    return items\ndef remove_space(items):\n    '''\n    Write a function to remove the spaces from a sentence.\n    '''\n    items = items.strip()\n    return items\ndef replace_space(items):\n    '''\n    Write a function to replace all the spaces with the character '%20' in a sentence.\n    '''\n    items = items.replace(' ', '%20')\n    return items\ndef replace_space_s(items):\n    '''\n    Write a function to replace all the spaces with the character '%20' in a sentence.\n    '''\n    items = items.replace(' ', '%20')\n    return items\ndef replace_space_l(items):\n    '''\n    Write a function to replace all the spaces with the character '%20' in a sentence.\n    '''\n    items = items.replace(' ', '%20')\n    return items\ndef change_case(items):\n    '''\n    Write a function to change the case of a string.\n    '''\n    items = items.swapcase()\n    return items\ndef remove_word(items):\n    '''\n    Write a function to remove a word from a string.\n    '''\n    s = items.split()\n    items = s.pop()\n    return items\ndef remove_word_s(items):\n    '''\n    Write a function to remove a word from a string.\n    '''\n    s = items.split()\n    items = s.pop()\n    return items\ndef remove_word_l(items):\n    '''\n    Write a function to remove a word from a string.\n    '''\n    s = items.split()\n    items = s.pop()\n    return items\ndef remove_character(items, a):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    items = items.replace(a,'')\n    return items\ndef remove_character_s(items, a):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    items = items.replace(a,'')\n    return items\ndef remove_character_l(items, a):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    items = items.replace(a,'')\n    return items\ndef replace_character(items, a, b):\n    '''\n    Write a function to replace a character from a string.\n    '''\n    items = items.replace(a,b)\n    return items\ndef replace_character_s(items, a, b):\n    '''\n    Write a function to replace a character from a string.\n    '''\n    items = items.replace(a,b)\n    return items\ndef replace_character_l(items, a, b):\n    '''\n    Write a function to replace a character from a string.\n    '''\n    items = items.replace(a,b)\n    return items\ndef remove_lower(items):\n    '''\n    Write a function to remove all the lower case letters from a sentence.\n    '''\n    s = items.lower()\n    items = s\n    return items\ndef remove_lower_s(items):\n    '''\n    Write a function to remove all the lower case letters from a sentence.\n    '''\n    s = items.lower()\n    items = s\n    return items\ndef remove_lower_l(items):\n    '''\n    Write a function to remove all the lower case letters from a sentence.\n    '''\n    s = items.lower()\n    items = s\n    return items\ndef remove_upper(items):\n    '''\n    Write a function to remove all the upper case letters from a sentence.\n    '''\n    s = items.upper()\n    items = s\n    return items\ndef remove_upper_s(items):\n    '''\n    Write a function to remove all the upper case letters from a sentence.\n    '''\n    s = items.upper()\n    items = s\n    return items\ndef remove_upper_l(items):\n    '''\n    Write a function to remove all the upper case letters from a sentence.\n    '''\n    s = items.upper()\n    items = s\n    return items\ndef convert_string(items):\n    '''\n    Write a function to convert a string to a list of characters.\n    '''\n    s = list(items)\n    items = s\n    return items\ndef convert_string_s(items):\n    '''\n    Write a function to convert a string to a list of characters.\n    '''\n    s = list(items)\n    items = s\n    return items\ndef convert_string_l(items):\n    '''\n    Write a function to convert a string to a list of characters.\n    '''\n    s = list(items)\n    items = s\n    return items\ndef remove_number(items):\n    '''\n    Write a function to remove all the numbers from a sentence.\n    '''\n    items = re.sub(r'[\\d]', '', items)\n    return items\ndef remove_number_s(items):\n    '''\n    Write a function to remove all the numbers from a sentence.\n    '''\n    items = re.sub(r'[\\d]', '', items)\n    return items\ndef remove_number_l(items):\n    '''\n    Write a function to remove all the numbers from a sentence.\n    '''\n    items = re.sub(r'[\\d]', '', items)\n    return items\ndef remove_letter(items):\n    '''\n    Write a function to remove all the letters from a sentence.\n    '''\n    items = re.sub(r'[\\w]', '', items)\n    return items\ndef remove_letter_s(items):\n    '''\n    Write a function to remove all the letters from a sentence.\n    '''\n    items = re.sub(r'[\\w]', '', items)\n    return items\ndef remove_letter_l(items):\n    '''\n    Write a function to remove all the letters from a sentence.\n    '''\n    items = re.sub(r'[\\w]', '', items)\n    return items\ndef remove_char(items, a):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    items = items.replace(a,'')\n    return items\ndef remove_char_s(items, a):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    items = items.replace(a,'')\n    return items\ndef remove_char_l(items, a):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    items = items.replace(a,'')\n    return items\ndef replace_char(items, a, b):\n    '''\n    Write a function to replace a character from a string.\n    '''\n    items = items.replace(a,b)\n    return items\ndef replace_cha"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in items:\n        new_items.append(i.split('(')[0].strip())\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    final_str = []\n    for item in items:\n        final_str.append(re.sub(\"\\([^)]*\\)\", \"\", item))\n    return final_str\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','')\n    items = items.replace(')','')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 1:\n        return items[0]\n    else:\n        return items[0][1:-1]\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items[0] == '(' and items[-1] == ')':\n        items = items[1:-1]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_string = ''\n    for i in items:\n        if i!= '(' and i!= ')':\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_nonagonal(n):\n        if n == 0:\n            return 0\n        return int(n**0.5+0.5)**2-n\n    return is_nonagonal(n)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    a = 1\n    for i in range(2, n+1):\n        a += i\n        b = i - 1\n        while b > 0:\n            a += b\n            b -= 2\n    return True if a == n else False\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: return 1\n    res = 2\n    prev = 1\n    while n > 1:\n        res = prev + res\n        prev = res\n        n -= 1\n    return res\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return sum(range(1,n+1))**2 == (2*n+1)**2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return sum(range(1, n))**2 + sum(range(1, n))**2 - 2*n*sum(range(1, n)) - n**2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n        if i % 3 == 1:\n            total += 1\n    return total\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n + 1):\n        if i * (3 * i - 1) == 2 * n * (n + 1):\n            return i\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 4 == 0:\n        return False\n    if n % 4 == 1:\n        return True\n    if n % 4 == 2:\n        return False\n    if n % 4 == 3:\n        return True\n    return False\n    \ndef is_right_triangle(n):\n    '''\n    Write a function that returns True if the given side length is right-triangular\n    and False otherwise.\n    '''\n    return n == int(math.sqrt(n * (n + 1)))\n    \ndef get_digit(n, d):\n    '''\n    Write a function that takes a nonnegative integer n and a digit d,\n    and returns the sum of the digit d in n.\n    '''\n    return int(str(n)[d])\n    \ndef is_palindrome(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    n = str(n)\n    if n == n[::-1]:\n        return True\n    return False\n    \ndef is_consecutive(n):\n    '''\n    Write a function that takes a positive integer n and returns\n    True if n is consecutive and False if it is not consecutive.\n    '''\n    return n - 1 == int(str(n)[1:])\n    \ndef num_to_base(n, b):\n    '''\n    Write a function to convert a nonnegative integer n to its base b\n    (e.g. if n = 3, b = 4, return \"11\").\n    '''\n    if n == 0:\n        return '0'\n    \n    digits = []\n    while n:\n        digits.append(str(n % b))\n        n //= b\n    \n    return ''.join(digits[::-1])\n    \ndef base_to_num(n, b):\n    '''\n    Write a function that takes two arguments, a string n and an integer b,\n    and returns the number in base b from n.\n    '''\n    num = 0\n    for i in range(len(n)):\n        num += int(n[i]) * (b ** (len(n) - 1 - i))\n    return num\n    \ndef is_sum_of_squares(n):\n    '''\n    Write a function to determine if a number is the sum of the squares of its digits.\n    '''\n    sq_num = str(n ** 2)\n    if n == int(sq_num):\n        return True\n    return False\n    \ndef add_digits(n):\n    '''\n    Write a function that takes a nonnegative integer n and returns\n    the sum of the digits of n.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef nth_digit(n, d):\n    '''\n    Write a function that takes a nonnegative integer n and a digit d\n    and returns the dth digit of n.\n    '''\n    return int(str(n)[d])\n    \ndef is_palindrome_perm(n):\n    '''\n    Write a function to determine if a number is a palindrome permutation.\n    '''\n    str_n = str(n)\n    if len(str_n) % 2 == 1:\n        return False\n    \n    first = 0\n    second = len(str_n) - 1\n    while second > first:\n        if str_n[first]!= str_n[second]:\n            return False\n        first += 1\n        second -= 1\n        \n    return True\n    \ndef increment_char(s):\n    '''\n    Write a function that takes a string of length one and returns\n    a string of length one that is the one-character shorter\n    version of the original string.\n    '''\n    return s[1:] + s[0]\n    \ndef is_inc_dec(s):\n    '''\n    Write a function that takes a string s and returns True if the\n    letters in s form an increasing sequence and False otherwise.\n    '''\n    for i in range(len(s) - 1):\n        if s[i] > s[i+1]:\n            return False\n    return True\n    \ndef is_factor(n, f):\n    '''\n    Write a function that takes two arguments, a number n and a number f,\n    and returns True if f is a factor of n and False otherwise.\n    '''\n    if n % f == 0:\n        return True\n    return False\n    \ndef is_divisible(n, f):\n    '''\n    Write a function that takes two arguments, a number n and a number f,\n    and returns True if n is divisible by f and False otherwise.\n    '''\n    return n % f == 0\n    \ndef is_divisible_by(n, f):\n    '''\n    Write a function that takes two arguments, a number n and a number f,\n    and returns True if n is divisible by f or False otherwise.\n    '''\n    return n % f == 0\n    \ndef is_divisible_by_except(n, f):\n    '''\n    Write a function that takes two arguments, a number n and a number f,\n    and returns True if n is divisible by f except for the last digit\n    of n (i.e. the last digit of n should not be divisible by f).\n    '''\n    return n % f == 0\n    \ndef mod(n, f):\n    '''\n    Write a function that takes two arguments, a number n and a number f,\n    and returns the remainder of n divided by f.\n    '''\n    return n % f\n    \ndef count_matching_digits(s, t):\n    '''\n    Write a function that takes two strings s and t and returns the number of\n    characters in s that are the same as the corresponding character in t.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            count += 1\n    return count\n    \ndef is_pandigital(n, d):\n    '''\n    Write a function that takes a nonnegative integer n and a digit d\n    and returns True if n contains the digit d and False otherwise.\n    '''\n    str_n = str(n)\n    if len(str_n) < d:\n        return False\n    \n    if str_n[d] == '0':\n        return False\n    \n    for i in range(1, d):\n        if str_n[i] == str_n[d]:\n            return False\n    \n    return True\n    \ndef is_abecedarian(s):\n    '''\n    Write a function that takes a string s and returns True if the letters\n    in s form an abecedarian order and False otherwise.\n    '''\n    for i in range(len(s) - 1):\n        if s[i] > s[i+1]:\n            return False\n    return True\n    \ndef is_dwarf(n):\n    '''\n    Write a function that takes a nonnegative integer n and returns\n    True if n is a perfect square and False otherwise.\n    '''\n    return int(math.sqrt(n)) * int(math.sqrt(n)) == n\n    \ndef is_square(n):\n    '''\n    Write a function that takes a positive integer n and returns\n    True if n is a perfect square and False otherwise.\n    '''\n    return int(math.sqrt(n)) * int(math.sqrt(n)) == n\n    \ndef is_pythagorean_triplet(a, b, c):\n    '''\n    Write a function that takes three nonnegative integers a, b, and c\n    and returns True if a, b, and c can be used to form a pythagorean\n    triplet, that is, a^2 + b^2 = c^2 and False otherwise.\n    '''\n    if a ** 2 + b ** 2 == c ** 2:\n        return True\n    return False\n    \ndef has_double(n):\n    '''\n    Write a function that takes a nonnegative integer n and returns\n    True if n contains two identical digits and False otherwise.\n    '''\n    return n % 100 == n // 100\n    \ndef is_power(n, b):\n    '''\n    Write a function that takes two arguments, a nonnegative integer n\n    and a positive integer b, and returns True if n is a power o"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.match('[^a-z]z', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    else:\n        for i in re.findall(r'\\bz\\w*',text):\n            if i[0]!= 'z' or i[-1]!= 'z':\n                return False\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{1,2}\\b',text)\ndef text_match_wordz_middle_2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{2}\\b',text)\ndef text_match_wordz_middle_3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{3}\\b',text)\ndef text_match_wordz_middle_4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{4}\\b',text)\ndef text_match_wordz_middle_5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{5}\\b',text)\ndef text_match_wordz_middle_6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{6}\\b',text)\ndef text_match_wordz_middle_7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{7}\\b',text)\ndef text_match_wordz_middle_8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{8}\\b',text)\ndef text_match_wordz_middle_9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{9}\\b',text)\ndef text_match_wordz_middle_10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{10}\\b',text)\ndef text_match_wordz_middle_11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{11}\\b',text)\ndef text_match_wordz_middle_12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{12}\\b',text)\ndef text_match_wordz_middle_13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{13}\\b',text)\ndef text_match_wordz_middle_14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{14}\\b',text)\ndef text_match_wordz_middle_15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{15}\\b',text)\ndef text_match_wordz_middle_16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{16}\\b',text)\ndef text_match_wordz_middle_17(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{17}\\b',text)\ndef text_match_wordz_middle_18(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{18}\\b',text)\ndef text_match_wordz_middle_19(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{19}\\b',text)\ndef text_match_wordz_middle_20(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{20}\\b',text)\ndef text_match_wordz_middle_21(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{21}\\b',text)\ndef text_match_wordz_middle_22(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{22}\\b',text)\ndef text_match_wordz_middle_23(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{23}\\b',text)\ndef text_match_wordz_middle_24(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{24}\\b',text)\ndef text_match_wordz_middle_25(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{25}\\b',text)\ndef text_match_wordz_middle_26(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{26}\\b',text)\ndef text_match_wordz_middle_27(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{27}\\b',text)\ndef text_match_wordz_middle_28(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{28}\\b',text)\ndef text_match_wordz_middle_29(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{29}\\b',text)\ndef text_match_wordz_middle_30(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{30}\\b',text)\ndef text_match_wordz_middle_31(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\bz{31}\\b',text"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match('^z', text):\n        return False\n    if re.match('z$', text):\n        return False\n    if re.search('z', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = text.split()\n    result = ''\n    for w in word:\n        if 'z' not in w[1:-1]:\n            result += w +''\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z',text):\n        return True\n    elif re.search('z',text[1:-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    for index, word in enumerate(text.split()):\n        if word == 'z' and index!= 0 and index!= len(text.split())-1:\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search('z',text))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    try:\n        z_start = text.index('z')\n    except ValueError:\n        return 'no z'\n    z_end = text.index('z', z_start + 1)\n    if z_end == len(text) - 1:\n        return 'no z'\n    if z_start == 0:\n        return 'no z'\n    if z_end == len(text) - 1:\n        return 'no z'\n    if z_end < z_start:\n        return 'no z'\n    if z_start < z_end:\n        return 'z'\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    a = list(input)\n    a.reverse()\n    return a\n    \ndef reverse_Array_From_K(input, k): \n    '''\n    Write a python function to reverse an array from a given position.\n    '''\n    a = list(input)\n    a.reverse()\n    return a\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    a = []\n    for i in range(k):\n        a.append(input[i])\n    for j in range(k,len(input)):\n        a.append(input[j])\n    return a\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 1:\n        return input\n    else:\n        return input[k-1::-1] + reverse_Array_Upto_K(input, k-1)\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = input[0:k]\n    temp.reverse()\n    final_list = temp + input[k:]\n    return final_list\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_Upto_K_Helper(input, start, end):\n        if start >= end:\n            return\n        else:\n            input[start], input[end] = input[end], input[start]\n            reverse_Array_Upto_K_Helper(input, start + 1, end - 1)\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    for i in range(k,0,-1):\n        result.append(input[i])\n    return result\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = list(input[k:])\n    result.reverse()\n    return result + input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input=list(input)\n    input_length = len(input)\n    start_index = 0\n    end_index = input_length - 1\n    while start_index <= end_index:\n        input[start_index],input[end_index] = input[end_index], input[start_index]\n        start_index += 1\n        end_index -= 1\n    return \"\".join(input[:k])\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < len(input):\n        return input[len(input)-k:len(input)]\n    else:\n        return input\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0] + 1, test_tup[1])\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple([test_tup[i] + test_dict[i] for i in range(len(test_tup))])\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_tup += j,\n        else:\n            new_tup += i,\n    for key in test_dict:\n        new_tup += test_dict[key],\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.iteritems():\n        test_tup += (value,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    for key in test_dict:\n        test_tup.append(test_dict[key])\n    return tuple(test_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_dict.values()) + test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        new_tup = new_tup + (item,)\n    for key in test_dict:\n        new_tup = new_tup + (test_dict[key],)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize a queue, this will be used to store cell information.\n    q = Queue()\n    q.put((0,0))\n    # Total cost is initially set to 0.\n    totalCost = 0\n    # Number of cells visited is initially set to 1.\n    numCells = 1\n    # Total average is initially set to 0.\n    totalAvg = 0\n    # while the queue is not empty\n    while not q.empty():\n        # Pop the front element.\n        currentCell = q.get()\n        # Get the cost of the current cell.\n        currentCost = cost[currentCell[0]][currentCell[1]]\n        # Get the number of cells visited.\n        numCells += 1\n        # Update total cost\n        totalCost += currentCost\n        # Get the current average.\n        totalAvg = float(totalCost)/numCells\n        # Now add all adjacent cells to the queue.\n        # Check if the current cell is NOT on the rightmost column.\n        if currentCell[1] < (len(cost[0]) - 1):\n            # Add the cell on the right to the queue.\n            q.put((currentCell[0], currentCell[1] + 1))\n        # Check if the current cell is NOT on the bottommost row.\n        if currentCell[0] < (len(cost) - 1):\n            # Add the cell below to the queue.\n            q.put((currentCell[0] + 1, currentCell[1]))\n    return totalAvg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    max_sum = float('-inf')\n    for i in xrange(rows):\n        for j in xrange(cols):\n            if i == 0 and j == 0:\n                max_sum = max(max_sum, cost[i][j])\n            elif i == 0:\n                max_sum = max(max_sum, cost[i][j] + max_sum)\n            elif j == 0:\n                max_sum = max(max_sum, cost[i][j] + max_sum)\n            else:\n                max_sum = max(max_sum, cost[i][j] + max_sum - cost[i][j-1])\n    return max_sum\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # traverse each row\n    for row in range(len(cost)):\n        # traverse each column\n        for column in range(row+1):\n            # store the max of current row and column\n            cost[row][column] += max(cost[row-1][column], cost[row][column-1])\n    return cost[len(cost)-1][len(cost)-1]//(len(cost)**2)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n    for L in range(2, N+1):\n        for i in range(N):\n            j = i + L-1\n            if j >= N:\n                break\n            for k in range(i, j):\n                dp[i][j] = max(dp[i][j], cost[i][k] + cost[k+1][j] + dp[i][k] + dp[k+1][j])\n    return dp[0][N-1]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    cost = [[-1 for i in xrange(n)] for j in xrange(n)]\n    # cost = [[-1 for i in xrange(n)] for j in xrange(n)]\n    return maxAverageOfPathHelper(cost, 0, 0, n-1, n-1)\n    # return maxAverageOfPathHelper(cost, 0, 0, n-1, n-1)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    if m == 1 and n == 1:\n        return cost[0][0]\n    elif m == 1 or n == 1:\n        return max(cost[0])\n    else:\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            dp[i][0] = cost[i][0] + dp[i-1][0]\n        for j in range(n):\n            dp[0][j] = cost[0][j] + dp[0][j-1]\n        for i in range(1,m):\n            for j in range(1,n):\n                dp[i][j] = cost[i][j] + max(dp[i-1][j],dp[i][j-1])\n        return dp[m-1][n-1]/float(m*n)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    global i, j, costMatrix, finalCost\n    if len(costMatrix) == 0:\n        return 0\n    maxAvg = 0\n    for i in range(len(costMatrix)):\n        for j in range(len(costMatrix[0])):\n            if i == 0 and j == 0:\n                costMatrix[i][j] = costMatrix[i][j]\n            elif i == 0:\n                costMatrix[i][j] += costMatrix[i][j-1]\n            elif j == 0:\n                costMatrix[i][j] += costMatrix[i-1][j]\n            else:\n                costMatrix[i][j] += max(costMatrix[i-1][j], costMatrix[i][j-1])\n            if i == len(costMatrix)-1 and j == len(costMatrix[0])-1:\n                finalCost = costMatrix[i][j]\n            maxAvg = max(maxAvg, costMatrix[i][j])\n    return maxAvg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost: return 0\n    rows, cols = len(cost), len(cost[0])\n    max_sum = float('-inf')\n    def helper(r, c, s):\n        if r == rows - 1 and c == cols - 1:\n            return s\n        if r < rows and c < cols:\n            return max(helper(r+1, c, s), helper(r, c+1, s+cost[r][c]))\n        elif r < rows:\n            return helper(r+1, c, s)\n        elif c < cols:\n            return helper(r, c+1, s)\n        else:\n            return float('inf')\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    directions = [[0,1],[1,0]]\n    def checkValid(mat,r,c):\n        if r < 0 or c < 0 or r >= rows or c >= cols:\n            return False\n        return True\n    def maxAverage(r,c,mat,maxAverage,dir):\n        maxAverage = max(maxAverage,sum(mat[r][c:c+3])/3)\n        for d in directions:\n            nr = r + d[0]\n            nc = c + d[1]\n            if checkValid(mat,nr,nc) and mat[nr][nc] == mat[r][c]+cost[nr][nc]:\n                maxAverage = max(maxAverage, maxAverageOfPath(mat,nr,nc,maxAverage,dir))\n        return maxAverage\n    maxAverage = maxAverageOfPath(cost,0,0,0,directions)\n    return maxAverage\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    list_of_students = []\n    for student,data in students.iteritems():\n        if data[0]>h and data[1]>w:\n            list_of_students.append(student)\n    return list_of_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students.keys():\n        if students[i][0] > h and students[i][1] > w:\n            print i\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [stu for stu in students if (stu[1][0] > h and stu[1][1] > w)]\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name : (height,weight) for name,(height,weight) in students.items() if height > h and weight > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student, value in students.items():\n        height, weight = value\n        if height > h and weight > w:\n            new_students[student] = value\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered[student] = students[student]\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = {}\n    for s in students.keys():\n        if s == 'h':\n            continue\n        if students[s][0] < h and students[s][1] < w:\n            out[s] = students[s]\n    return out\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student,(height,weight) in students.iteritems():\n        if height > h and weight > w:\n            result[student] = (height,weight)\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {x:y for x,y in students.items() if y[0] > h and y[1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {x:y for x,y in students.items() if y[0] > h and y[1] > w}\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if nums1 is None or len(nums1) == 0:\n        return 0\n    if nums2 is None or len(nums2) == 0:\n        return 0\n    \n    if len(nums1)!= len(nums2):\n        return 0\n    \n    dic = {}\n    for i in xrange(len(nums1)):\n        dic[nums1[i]] = i\n    \n    count = 0\n    for i in xrange(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # count the occurence of each elements\n    elements_dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in elements_dict:\n            elements_dict[nums1[i]] = 1\n        else:\n            elements_dict[nums1[i]] += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    from collections import Counter\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i, j in zip(nums1, nums2):\n        if i == j:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums1)):\n            if i!=j and nums1[i] == nums1[j]:\n                counter += 1\n    return counter\ndef find_triplet(arr,target):\n    '''\n    Given an array of distinct integers and a target sum, find all triplets in the array whose sum is equal to the target.\n    '''\n    arr.sort()\n    triplets = []\n    for i in range(len(arr)-2):\n        j = i + 1\n        k = len(arr)-1\n        while j < k:\n            total = arr[i] + arr[j] + arr[k]\n            if total == target:\n                triplets.append([arr[i],arr[j],arr[k]])\n                j += 1\n                k -= 1\n            elif total > target:\n                k -= 1\n            else:\n                j += 1\n    return triplets\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if (eq(nums1[i], nums2[j])):\n                count += 1\n                # print count\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    return int(str(base) * power)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(x)**power for x in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # The base and power values must be integers\n    base = int(base)\n    power = int(power)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(n)**power for n in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit) ** power for digit in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    total = 0\n    num = base\n    while num > 0:\n        digit = num % 10\n        total += digit ** power\n        num /= 10\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    res = 0\n    if power == 0:\n        return 1\n    while power > 0:\n        res += power % 10\n        power = power // 10\n    return res\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def base_sum(num):\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num /= 10\n        return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if not (isinstance(base, int) and isinstance(power, int) and power >= 0):\n        raise ValueError\n    if power == 0:\n        return 1\n    return sum([int(digit)**power for digit in str(base)])"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(c)**power for c in str(base)])\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 == None:\n        return None\n    # Create a regex pattern to select the values between the quotation marks.\n    pattern = re.compile(r'\"[^\"]*\"')\n    # Match the pattern to the given text.\n    match = pattern.findall(text1)\n    # Return the list of matched values.\n    return match\ndef extract_email(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text == None:\n        return None\n    # Create a regex pattern to select the values between the quotation marks.\n    pattern = re.compile(r'[^@]+@[^@]+\\.[^@]+')\n    # Match the pattern to the given text.\n    match = pattern.findall(text)\n    # Return the list of matched values.\n    return match\ndef get_emails(emails):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if emails == None:\n        return None\n    # Create a regex pattern to select the values between the quotation marks.\n    pattern = re.compile(r'[^@]+@[^@]+\\.[^@]+')\n    # Match the pattern to the given text.\n    match = pattern.findall(emails)\n    # Return the list of matched values.\n    return match\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    quotation_str = re.findall(r'\\\"(.+?)\\\"',text)\n    if quotation_str:\n        quotation_str = [quotation_str[0]]\n    return quotation_str\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotes = re.findall('\"([^\"]*)\"',text1)\n    return quotes\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\\"(.*)\\\"',text1)\n    print(result)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = \"lalalalalalala lalalala lalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalalal\n    new_list = re.findall('\\\"[^\"]*\\\"', text1)\n    return new_list\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\\r','').replace('\\n','')\n    d1 = {}\n    l = text1.split('\"')\n    if len(l) < 3:\n        return {}\n    else:\n        for j in range(1, len(l)):\n            d1[l[j][1:]] = l[0][1:]\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    extracted_values = re.findall(r'\\\"([^\\\"]*)\\\"', text1)\n    return extracted_values\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    \n    text1 = text1.replace(u\"\\\"\",\"\")\n    text1 = text1.replace(u\"\u201c\",\"\")\n    text1 = text1.replace(u\"\u201d\",\"\")\n    text1 = text1.replace(u\"\\\"\",\"\")\n    text1 = text1.replace(u\"\\t\",\"\")\n    text1 = text1.replace(u\"\\n\",\"\")\n    text1 = text1.replace(u\"\\r\",\"\")\n    text1 = text1.strip()\n    \n    \n    return text1\ndef get_value_1(line):\n    '''\n    Extracts the values between the first pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_2(line):\n    '''\n    Extracts the values between the second pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_3(line):\n    '''\n    Extracts the values between the third pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_4(line):\n    '''\n    Extracts the values between the forth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_5(line):\n    '''\n    Extracts the values between the fifth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_6(line):\n    '''\n    Extracts the values between the sixth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_7(line):\n    '''\n    Extracts the values between the seventh pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_8(line):\n    '''\n    Extracts the values between the eighth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_9(line):\n    '''\n    Extracts the values between the ninth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_10(line):\n    '''\n    Extracts the values between the tenth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_11(line):\n    '''\n    Extracts the values between the eleventh pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_12(line):\n    '''\n    Extracts the values between the twelfth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_13(line):\n    '''\n    Extracts the values between the thirteenth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_14(line):\n    '''\n    Extracts the values between the fourteenth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_15(line):\n    '''\n    Extracts the values between the fifteenth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_16(line):\n    '''\n    Extracts the values between the sixteenth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_17(line):\n    '''\n    Extracts the values between the seventeenth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_18(line):\n    '''\n    Extracts the values between the eighteenth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_19(line):\n    '''\n    Extracts the values between the nineteenth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_20(line):\n    '''\n    Extracts the values between the twentieth pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_21(line):\n    '''\n    Extracts the values between the eleventhteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_22(line):\n    '''\n    Extracts the values between the twelfthteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_23(line):\n    '''\n    Extracts the values between the thirteenthteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_24(line):\n    '''\n    Extracts the values between the fourteenthteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_25(line):\n    '''\n    Extracts the values between the fifteenthteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_26(line):\n    '''\n    Extracts the values between the sixteenthteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_27(line):\n    '''\n    Extracts the values between the seventeenthteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_28(line):\n    '''\n    Extracts the values between the eighteenthteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_29(line):\n    '''\n    Extracts the values between the nineteenthteen pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_30(line):\n    '''\n    Extracts the values between the thirty pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_31(line):\n    '''\n    Extracts the values between the thirtyone pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_32(line):\n    '''\n    Extracts the values between the thirtytwo pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_33(line):\n    '''\n    Extracts the values between the thirtythree pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_34(line):\n    '''\n    Extracts the values between the thirtyfour pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_35(line):\n    '''\n    Extracts the values between the thirtyfive pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_36(line):\n    '''\n    Extracts the values between the thirtysix pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_37(line):\n    '''\n    Extracts the values between the thirtyseven pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_38(line):\n    '''\n    Extracts the values between the thirtyeight pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_39(line):\n    '''\n    Extracts the values between the thirtynine pair of quotation marks of the given line.\n    '''\n    return extract_quotation(line)\ndef get_value_40(line)"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    result = pattern.findall(text1)\n    print (result)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    find_quotation = re.findall(\"\\\"(.*?)\\\"\", text1)\n    return find_quotation\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mul = []\n    for i in range(len(test_tup)-1):\n        mul.append(test_tup[i] * test_tup[i+1])\n    return tuple(mul)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = []\n    for i in range(len(test_tup)):\n        if i == 0:\n            output.append(test_tup[i])\n        else:\n            output.append(test_tup[i] * test_tup[i-1])\n    return output\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    out = ()\n    for i in range(len(test_tup) - 1):\n        out += (test_tup[i] * test_tup[i+1],)\n    return out\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 1:\n        return (1,)\n    else:\n        multiply_elements((1,) + test_tup[1:])\n        return (test_tup[0]*test_tup[1],) + multiply_elements(test_tup[1:])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if type(test_tup)!= type(()):\n        return \"Must be a tuple of numbers\"\n    else:\n        if len(test_tup) == 1:\n            return (test_tup[0],)\n        else:\n            return (test_tup[0],) + multiply_elements(test_tup[1:])\n    \n    \ndef merge_tuples(test_tup_1, test_tup_2):\n    '''\n    Write a function that takes as input two tuples of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i+t_{i+1} if t_i < t_{i+1} and t_i+t_{i+1} if t_i > t_{i+1}.\n    '''\n    if type(test_tup_1)!= type(()) or type(test_tup_2)!= type(()):\n        return \"Must be a tuple of numbers\"\n    else:\n        if len(test_tup_1) == 1:\n            if len(test_tup_2) == 1:\n                return (test_tup_1[0], test_tup_2[0])\n            else:\n                return (test_tup_1[0],) + merge_tuples(test_tup_1, test_tup_2[1:])\n        else:\n            if len(test_tup_2) == 1:\n                return (test_tup_1[0],) + merge_tuples(test_tup_1[1:], test_tup_2[0])\n            else:\n                return (test_tup_1[0],) + merge_tuples(test_tup_1[1:], test_tup_2[1:])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = len(test_tup)\n    result_list = [1]\n    for x in range(l):\n        result_list.append(test_tup[x] * result_list[x])\n    return tuple(result_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if not test_tup:\n        return tuple()\n    return tuple([x*y for x,y in zip(test_tup[0:len(test_tup)-1],test_tup[1:len(test_tup)])])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i * j for i, j in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the elements of the tuple\n    for i in range(len(test_tup)):\n        #multiply the current element with the element after it\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    #return the new tuple\n    return new_tup\n    \ndef make_anonymous_tuple(lst):\n    '''\n    Write a function that takes a list of strings and returns a tuple of tuples, where each tuple is formed by each string in the list.\n    '''\n    #check that the list is not empty\n    if len(lst) == 0:\n        raise ValueError('The list can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the list\n    for s in lst:\n        #create a tuple with the current string\n        new_tup += (s,)\n    #return the new tuple\n    return new_tup\n    \ndef make_anonymous_tuple_using_enumerate(lst):\n    '''\n    Write a function that takes a list of strings and returns a tuple of tuples, where each tuple is formed by each string in the list.\n    '''\n    #check that the list is not empty\n    if len(lst) == 0:\n        raise ValueError('The list can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the list\n    for i,s in enumerate(lst):\n        #create a tuple with the current string\n        new_tup += (s,)\n    #return the new tuple\n    return new_tup\n    \ndef get_anonymous_tuple_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of strings and returns a tuple of tuples, where each tuple is formed by the first and last elements of each string in the tuple.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the elements of the tuple\n    for t in test_tup:\n        #create a tuple with the first and last elements of the current tuple\n        new_tup += (t[0], t[-1])\n    #return the new tuple\n    return new_tup\n    \ndef make_alternating_tuple(lst):\n    '''\n    Write a function that takes a list of strings and returns a tuple of tuples, where each tuple is formed by each string in the list, except the first and last elements of each string, and the second and third elements of each tuple, and so on.\n    '''\n    #check that the list is not empty\n    if len(lst) == 0:\n        raise ValueError('The list can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the list\n    for s in lst:\n        #create a tuple with the current string\n        new_tup += (s[1:-1],)\n    #return the new tuple\n    return new_tup\n    \ndef find_the_third_element(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns the third element of the tuple.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #return the third element of the tuple\n    return test_tup[2]\n    \ndef find_the_middle_element(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns the middle element of the tuple.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #return the middle element of the tuple\n    return test_tup[(len(test_tup)-1)/2]\n    \ndef find_the_middle_element_using_index(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns the middle element of the tuple.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #return the middle element of the tuple\n    return test_tup[len(test_tup)/2]\n    \ndef get_anonymous_tuple_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple of tuples, where each tuple is formed by the first and last elements of each string in the tuple.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the elements of the tuple\n    for t in test_tup:\n        #create a tuple with the first and last elements of the current tuple\n        new_tup += (t[0], t[-1])\n    #return the new tuple\n    return new_tup\n    \ndef get_anonymous_tuple_elements_using_index(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple of tuples, where each tuple is formed by the first and last elements of each string in the tuple.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the elements of the tuple\n    for i in range(len(test_tup)):\n        #create a tuple with the first and last elements of the current tuple\n        new_tup += (test_tup[i][0], test_tup[i][-1])\n    #return the new tuple\n    return new_tup\n    \ndef get_anonymous_tuple_elements_using_slice(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple of tuples, where each tuple is formed by the first and last elements of each string in the tuple.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the elements of the tuple\n    for t in test_tup:\n        #create a tuple with the first and last elements of the current tuple\n        new_tup += (t[0:2], t[-2:])\n    #return the new tuple\n    return new_tup\n    \ndef get_anonymous_tuple_elements_using_slice_with_step(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple of tuples, where each tuple is formed by the first and last elements of each string in the tuple.\n    '''\n    #check that the tuple is not empty\n    if len(test_tup) == 0:\n        raise ValueError('The tuple can not be empty')\n    #create a new tuple\n    new_tup = tuple()\n    #iterate over the elements of the tuple\n    for t in test_tup:\n        #create a tuple with the first and last elements of the current tuple\n        new_tup += (t[0::2], t[1::2])\n    #return the new tuple\n    return new_tup\n    \ndef get_anonymous_tuple_elements_using_range(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple of tuples, where each tuple is formed b"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return new_tup\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return 'Input lists must have same length'\n    else:\n        new_lst = []\n        for i in range(len(lst1)):\n            new_lst.append(lst1[i] + lst2[i])\n        return new_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==0 or len(lst2)==0:\n        return lst1+lst2\n    return lst1[0]+lst2[0]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Both lists must be of equal size.\")\n        return None\n    else:\n        return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = [a+b for a,b in zip(lst1,lst2)]\n    return lst3\ndef tuple_to_list(lst):\n    '''\n    Write a function takes as input a list of tuples (a_1,b_1,...,a_n,b_n) and returns a list of lists (a_1,a_2,...,a_n),(b_1,b_2,...,b_n)\n    '''\n    lst4 = [x[1:] for x in lst]\n    return lst4\ndef list_to_tuple(lst):\n    '''\n    Write a function takes as input a list of lists (a_1,a_2,...,a_n),(b_1,b_2,...,b_n) and returns a list of tuples (a_1,b_1,...,a_n,b_n)\n    '''\n    lst5 = [[x] for x in lst]\n    return lst5\ndef find_count(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns the number of times (a_i,b_i) occurs in [a_1,...,a_n], [b_1,...,b_n]\n    '''\n    lst3 = []\n    for i in lst1:\n        count = 0\n        for j in lst2:\n            if i == j:\n                count += 1\n        lst3.append(count)\n    return lst3\ndef max_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the maximum of (a_i,b_i) from each pair of (a_i,b_i) from [a_1,...,a_n], [b_1,...,b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(max(lst1[i],lst2[i]))\n    return lst3\ndef min_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the minimum of (a_i,b_i) from each pair of (a_i,b_i) from [a_1,...,a_n], [b_1,...,b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(min(lst1[i],lst2[i]))\n    return lst3\ndef max_min_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the maximum and minimum of (a_i,b_i) from each pair of (a_i,b_i) from [a_1,...,a_n], [b_1,...,b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append([max(lst1[i],lst2[i]),min(lst1[i],lst2[i])])\n    return lst3\ndef sort_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the elements of [a_1,...,a_n] sorted in increasing order according to the order of [b_1,...,b_n]\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append([lst1[i],lst2[i]])\n    lst3.sort()\n    return [x[0] for x in lst3]\ndef sort_list_decreasing(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the elements of [a_1,...,a_n] sorted in decreasing order according to the order of [b_1,...,b_n]\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append([lst1[i],lst2[i]])\n    lst3.sort()\n    lst3.reverse()\n    return [x[0] for x in lst3]\ndef sort_list_2d(lst1,lst2):\n    '''\n    Write a function takes as input two 2-dimensional lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the elements of [a_1,...,a_n] sorted in increasing order according to the order of [b_1,...,b_n]\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append([lst1[i],lst2[i]])\n    lst3.sort()\n    return [x[0] for x in lst3]\ndef sort_list_2d_decreasing(lst1,lst2):\n    '''\n    Write a function takes as input two 2-dimensional lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the elements of [a_1,...,a_n] sorted in decreasing order according to the order of [b_1,...,b_n]\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append([lst1[i],lst2[i]])\n    lst3.sort()\n    lst3.reverse()\n    return [x[0] for x in lst3]\ndef remove_list_element(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the elements of [a_1,...,a_n] without the elements of [b_1,...,b_n]\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            lst3.append(lst1[i])\n    return lst3\ndef remove_list_element_2d(lst1,lst2):\n    '''\n    Write a function takes as input two 2-dimensional lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the elements of [a_1,...,a_n] without the elements of [b_1,...,b_n]\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            lst3.append(lst1[i])\n    return lst3\ndef remove_list_element_2d_decreasing(lst1,lst2):\n    '''\n    Write a function takes as input two 2-dimensional lists [a_1,...,a_n], [b_1,...,b_n] and returns a list containing the elements of [a_1,...,a_n] without the elements of [b_1,...,b_n]\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            lst3.append(lst1[i])\n    lst3.sort()\n    lst3.reverse()\n    return ls"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return -1\n    else:\n        return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1 == []:\n        return lst2\n    elif lst2 == []:\n        return lst1\n    else:\n        return [lst1[0] + lst2[0]] + sum_list(lst1[1:],lst2[1:])\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a_i+b_i for a_i,b_i in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i]+=lst2[i]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        l = list(g)\n        l.append(k)\n        result.append(l)\n    return [x[0] for x in result]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consecutive_dups = []\n    prev_num = None\n    for num in nums:\n        if prev_num == num:\n            if num not in consecutive_dups:\n                consecutive_dups.append(num)\n        else:\n            prev_num = num\n    return consecutive_dups\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # first, find all unique numbers\n    uniques = set()\n    unique = True\n    for num in nums:\n        if num in uniques:\n            unique = False\n            break\n        uniques.add(num)\n    if not unique:\n        return len(nums)\n    # if unique, then we are going to delete things\n    i = 0\n    while i < len(nums):\n        num = nums[i]\n        if num not in uniques:\n            i += 1\n        else:\n            del nums[i]\n            # we are deleting so just keep the last unique number\n            nums.append(num)\n    return len(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for i,x in enumerate(nums):\n        if i == 0:\n            res.append(x)\n            continue\n        if nums[i-1] == x:\n            continue\n        else:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    try:\n        for k,g in groupby(enumerate(nums), lambda x: x[0] - x[1]):\n            res = [j for i,j in g]\n            res.append(max(res)+1)\n            yield res\n    except ValueError:\n        pass\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.append(k)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    seen = set()\n    seen.add(nums[0])\n    result = []\n    for i in range(1, len(nums)):\n        if nums[i] not in seen:\n            result.append(nums[i])\n            seen.add(nums[i])\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #iterate through list, get index of consecutive duplicates and delete them\n    # (2, 2) 2,3,4,5,5,5,5,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(enumerate(nums), lambda x: x[0] - x[1]):\n        lst = [j for i, j in g]\n        yield lst[0]\n        if len(lst) > 1:\n            yield lst[1]\n            \n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2) * math.sin(math.pi * h/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = math.pi*(r**2)\n    b = math.pi*((r**2)+(h**2))\n    c = math.pi*(r**2)\n    d = math.pi*((r**2)+(h**2))\n    return a + b + c + d\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print r*r*math.pi/4\n    print r*h\n    return r*r*math.pi/4 + r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #return (3.1415*r**2 + 3.1415*r*h - 3.1415*h**2)\n    return 3.1415*r**2 + 3.1415*r*h\ndef lateralsurface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given radius r and the height h.\n    '''\n    #return (3.1415*r**2 + 3.1415*r*h - 3.1415*h**2) + 3.1415*r*h\n    return 3.1415*r**2 + 3.1415*r*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #return (3.1415*r**2 + 3.1415*r*h - 3.1415*h**2) + 3.1415*r*h\n    return 3.1415*r**2 + 3.1415*r*h\ndef lateralsurface_trigon(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and the height h.\n    '''\n    #return (3.1415*r**2 + 3.1415*r*h - 3.1415*h**2) + 3.1415*r*h\n    return 3.1415*r**2 + 3.1415*r*h\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    #return 3.1415*r**2\n    return 3.1415*r**2\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given side lengths a, b, and height h.\n    '''\n    #return (3.1415*(a**2) + 3.1415*(a*b) + 3.1415*h*(a+b))\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*h*(a+b)\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given side lengths a, b.\n    '''\n    #return (3.1415*(a**2) + 3.1415*(a*b))\n    return 3.1415*(a**2) + 3.1415*(a*b)\ndef lateralsurface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given semi-major axis a and semi-minor axis b.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b)\n    return 3.1415*(a**2) + 3.1415*(a*b)\ndef lateralsurface_parabola(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a parabola given the coefficients a, b, and c.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2\ndef lateralsurface_hyperbola(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a hyperbola given the coefficients a, b, and c.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2\ndef lateralsurface_gaussian(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a gaussian given the coefficients a, b, c, and d.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\ndef lateralsurface_torus(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a torus given the coefficients a, b, c, and d.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\ndef lateralsurface_hexagon(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a hexagon given the coefficients a, b, c, and d.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\ndef lateralsurface_hexahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given the coefficients a, b, c, and d.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\ndef lateralsurface_octahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of an octahedron given the coefficients a, b, c, and d.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\ndef lateralsurface_dodecaedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given the coefficients a, b, c, and d.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\ndef lateralsurface_icosahedron(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of an icosahedron given the coefficients a, b, c, and d.\n    '''\n    #return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\n    return 3.1415*(a**2) + 3.1415*(a*b) + 3.1415*c*b**2 + 3.1415*d*b**4\ndef lateralsurfac"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi*r**2\n    B = math.pi*r*math.sqrt(r**2 + h**2)\n    C = math.pi*r*math.sqrt(r**2 + h**2)\n    D = math.pi*r*math.sqrt(r**2 + h**2)\n    return A - B + C - D\ndef lateralsurface_ellipsoid(a,b,c):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given a, b and c.\n    '''\n    A = math.pi*a**2\n    B = math.pi*a*b\n    C = math.pi*a*c\n    D = math.pi*a*c\n    E = math.pi*a*b\n    F = math.pi*a*b\n    G = math.pi*a*c\n    H = math.pi*a*c\n    I = math.pi*a*b\n    J = math.pi*a*b\n    K = math.pi*a*c\n    L = math.pi*a*c\n    return A - E - F + G - H - I + J + K - L\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    A = 4*math.pi*r**2\n    return A\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    B = math.pi*r**2*h\n    C = math.pi*r**2\n    D = math.pi*r**2\n    E = math.pi*r**2\n    F = math.pi*r**2\n    G = math.pi*r**2\n    H = math.pi*r**2\n    I = math.pi*r**2\n    J = math.pi*r**2\n    K = math.pi*r**2\n    L = math.pi*r**2\n    return B - E - F + G - H - I + J + K - L\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid given a, b and c.\n    '''\n    A = 4*math.pi*a*b*c\n    B = 4*math.pi*a**3\n    C = 4*math.pi*a**2*b\n    D = 4*math.pi*a**2*c\n    E = 4*math.pi*a**2*b\n    F = 4*math.pi*a**2*b\n    G = 4*math.pi*a**2*c\n    H = 4*math.pi*a**2*c\n    I = 4*math.pi*a**2*b\n    J = 4*math.pi*a**2*b\n    K = 4*math.pi*a**2*c\n    L = 4*math.pi*a**2*c\n    return A - E - F + G - H - I + J + K - L\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    A = 4*math.pi*r**3\n    return A\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder given radius r and height h.\n    '''\n    B = math.pi*r**2*2\n    C = math.pi*r**2\n    D = math.pi*r**2\n    E = math.pi*r**2\n    F = math.pi*r**2\n    G = math.pi*r**2\n    H = math.pi*r**2\n    I = math.pi*r**2\n    J = math.pi*r**2\n    K = math.pi*r**2\n    L = math.pi*r**2\n    return B - E - F + G - H - I + J + K - L\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the area of an ellipsoid given a, b and c.\n    '''\n    A = 4*math.pi*a*b*c\n    B = 4*math.pi*a**3\n    C = 4*math.pi*a**2*b\n    D = 4*math.pi*a**2*c\n    E = 4*math.pi*a**2*b\n    F = 4*math.pi*a**2*b\n    G = 4*math.pi*a**2*c\n    H = 4*math.pi*a**2*c\n    I = 4*math.pi*a**2*b\n    J = 4*math.pi*a**2*b\n    K = 4*math.pi*a**2*c\n    L = 4*math.pi*a**2*c\n    return A - E - F + G - H - I + J + K - L\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere given radius r.\n    '''\n    A = 4*math.pi*r**2\n    return A\ndef weight_lbm_to_kg(lbm):\n    '''\n    Write a function to convert pounds to kilograms.\n    '''\n    return lbm*0.453592\ndef weight_kg_to_lbm(kg):\n    '''\n    Write a function to convert kilograms to pounds.\n    '''\n    return kg/0.453592\ndef velocity_ms_to_kmph(ms):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    return ms*0.62137119\ndef velocity_kmph_to_ms(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    return kmph*3.6\ndef acceleration_ms_to_kmph(ms):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    return ms*3.6\ndef acceleration_kmph_to_ms(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    return kmph*0.62137119\ndef constant_acceleration_ms_to_kmph(ms):\n    '''\n    Write a function to convert constant acceleration to miles per hour.\n    '''\n    return ms*3.6\ndef constant_acceleration_kmph_to_ms(kmph):\n    '''\n    Write a function to convert constant acceleration to miles per hour.\n    '''\n    return kmph*0.62137119\ndef driving_distance_ms_to_kmph(ms):\n    '''\n    Write a function to convert driving distance to miles per hour.\n    '''\n    return ms/3.6\ndef driving_distance_kmph_to_ms(kmph):\n    '''\n    Write a function to convert driving distance to miles per hour.\n    '''\n    return kmph*3.6\ndef driving_time_ms_to_kmph(ms):\n    '''\n    Write a function to convert driving time to miles per hour.\n    '''\n    return ms/3.6\ndef driving_time_kmph_to_ms(kmph):\n    '''\n    Write a function to convert driving time to miles per hour.\n    '''\n    return kmph*3.6\ndef acceleration_time_ms_to_kmph(ms):\n    '''\n    Write a function to convert acceleration time to miles per hour.\n    '''\n    return ms/3.6\ndef acceleration_time_kmph_to_ms(kmph):\n    '''\n    Write a function to convert acceleration time to miles per hour.\n    '''\n    return kmph*3.6\ndef distance_time_ms_to_kmph(ms):\n    '''\n    Write a function to convert distance time to miles per hour.\n    '''\n    return ms/3.6\ndef distance_time_kmph_to_ms(kmph):"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area=math.pi*(r**2)+(math.pi*h)*(r+(math.sqrt((r**2)+(h**2))))\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # formula from the book for a right circular cone\n    return math.pi * (r ** 2) * math.sin(math.pi * h / r)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r == 0:\n        return math.pi*(h**2)\n    else:\n        return (math.pi*(r**2))+((r**2)*math.acos(h/r))\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi * (r**2) * (1/3) + (math.pi * (r**2) * (1/3) * (1/2))) * h\n    return s\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    s = (math.pi * (r**2)) * (4/3)\n    return s\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    s = (2 * math.pi * (r**2)) + (math.pi * (r**2) * h)\n    return s\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    s = (4 * math.pi * (r**2))\n    return s\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi * (r**2) * (1/3)) + (math.pi * (r**2) * (1/3) * (1/2)) + (math.pi * (r**2) * (1/3) * h)\n    return s\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and height h.\n    '''\n    s = (2 * math.pi * (r**2)) + (math.pi * (r**2) * h)\n    return s\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    v = (4/3) * math.pi * (r**3)\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * h\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) + (1/3) * math.pi * (r**3) * h\n    return v\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and a sphere given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * (1/3) + (1/3) * math.pi * (r**3) * (1/3) * (1/2) + (1/3) * math.pi * (r**3) * (1/3) * h\n    return v\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a sphere given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) + (1/3) * math.pi * (r**3) * h\n    return v\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a cone given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) + (1/3) * math.pi * (r**3) * h + (1/3) * math.pi * (r**3) * (1/3)\n    return v\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and a cylinder given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * (1/3) + (1/3) * math.pi * (r**3) * h\n    return v\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and a sphere given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * (1/3) + (1/3) * math.pi * (r**3) * (1/3) * (1/2) + (1/3) * math.pi * (r**3) * (1/3) * h\n    return v\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a cone given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * (1/3) + (1/3) * math.pi * (r**3) * h\n    return v\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and a sphere given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * (1/3) + (1/3) * math.pi * (r**3) * (1/3) * (1/2) + (1/3) * math.pi * (r**3) * (1/3) * h\n    return v\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and a cylinder given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * (1/3) + (1/3) * math.pi * (r**3) * h\n    return v\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere and a cone given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * (1/3) + (1/3) * math.pi * (r**3) * (1/3) * (1/2) + (1/3) * math.pi * (r**3) * (1/3) * h\n    return v\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and a cylinder given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) + (1/3) * math.pi * (r**3) * h\n    return v\ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    v = (4/3) * math.pi * (r**3)\n    return v\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere and a cone given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) * (1/3) + (1/3) * math.pi * (r**3) * (1/3) * (1/2) + (1/3) * math.pi * (r**3) * (1/3) * h\n    return v\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and a cylinder given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) + (1/3) * math.pi * (r**3) * h\n    return v\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a sphere given radius r and height h.\n    '''\n    v = (1/3) * math.pi * (r**3) + (1/3) * math.pi "
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfacearea = math.pi*r**2 + math.pi*r*(r+h)\n    return surfacearea\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    # Method 1\n    if type(text) == str:\n        text = text.replace(\" \",\":\").replace(\",\",\":\").replace(\".\",\":\")\n    else:\n        text = text.replace(\" \",\":\").replace(\",\",\":\").replace(\".\",\":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.lower()\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[,.]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if text:\n        text = re.sub(r'[^\\w ]','', text)\n        text = re.sub(r'\\s+', ':', text)\n        text = re.sub(r'[,.]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    patt = re.compile(r'([\\s,\\.])+')\n    s = patt.sub(':',text)\n    patt = re.compile(r'([a-z0-9]+@[a-z0-9]+\\.[a-z]+)+')\n    s = patt.sub(':',s)\n    return s\n    \ndef text_to_2d_list(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    patt = re.compile(r'([\\s,\\.])+')\n    s = patt.sub(':',text)\n    patt = re.compile(r'([a-z0-9]+@[a-z0-9]+\\.[a-z]+)+')\n    s = patt.sub(':',s)\n    \n    t = []\n    for i in s.split(':'):\n        t.append([j for j in i.split(':')])\n    return t\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if text:\n        return re.sub(r'[.,\\s]+',':',text)\n    else:\n        return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'([\\s]+|[,]+|[.]+)', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if not text:\n        return ''\n    text = text.lower().replace(' ', ':').replace(',', ':').replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    char_dict = {' ':':',', ',':'.','.':' '}\n    for c in char_dict:\n        text = text.replace(c, char_dict[c])\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(\"[,.]\",\":\", text)\n    return new_text\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if A[mid] < x:\n            start = mid + 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    assert A, \"Empty array!\"\n    first_occurrence = len(A)\n    low = 0\n    high = len(A)-1\n    while low<=high:\n        mid = (low+high)//2\n        if A[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = binary_search(A, x)\n    if index == -1:\n        return -1\n    return index\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start, end = 0, len(A)-1\n    while start <= end:\n        mid = (start+end)/2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A == None or len(A) == 0:\n        return None\n    index = -1\n    begin = 0\n    end = len(A)-1\n    while begin <= end:\n        middle = begin + (end-begin)//2\n        if x == A[middle]:\n            index = middle\n            end = middle - 1\n        elif x < A[middle]:\n            end = middle - 1\n        else:\n            begin = middle + 1\n    return index\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A)\n    while low < high:\n        mid = (high + low) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid\n        else:\n            high = mid\n    return high\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = len(A)\n    left, right = 0, l - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l < r:\n        m = (l + r) // 2\n        if x > A[m]:\n            l = m + 1\n        elif x < A[m]:\n            r = m - 1\n        else:\n            l = r = m\n    return l\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_first_occurrence_recursive(A, x, start, end):\n        if start > end:\n            return None\n        elif A[(start+end)//2] == x:\n            return (start+end)//2\n        elif A[(start+end)//2] < x:\n            return find_first_occurrence_recursive(A, x, (start+end)//2+1, end)\n        else:\n            return find_first_occurrence_recursive(A, x, start, (start+end)//2)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    global subarr\n    subarr = []\n    return sum_of_prod(arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([reduce(lambda x,y:x*y, arr[i:j+1]) for i in range(len(arr)) for j in range(i,len(arr))])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # corner case, when list length is 1\n    if len(arr) == 1:\n        return arr[0]\n    prod_list = []\n    for i in range(len(arr)):\n        prod_list.append(arr[i])\n        for j in range(i+1, len(arr)):\n            prod_list.append(arr[i]*arr[j])\n    return sum(prod_list)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    prod = [1 for i in range(len(arr))]\n    for i in range(1,len(arr)):\n        prod[i] = prod[i-1]*arr[i-1]\n    s = prod[0]\n    for i in range(len(prod)-2,-1,-1):\n        s += prod[i]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    dp = [arr[0]]\n    for i in xrange(1,len(arr)):\n        dp.append(dp[i-1]*arr[i])\n    res = [0]*(len(arr)+1)\n    for i in xrange(len(arr)):\n        for j in xrange(i,len(arr)):\n            res[i+j] += dp[j]\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr.insert(0,1)\n    newarr = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            newarr.append(arr[i]*arr[j])\n    return sum(newarr)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #get the length of arr\n    n = len(arr)\n    #create an empty array\n    subarray = []\n    #create a subarray of size 2\n    subarray.append([arr[0],arr[1]])\n    #create a subarray of size 3\n    subarray.append([arr[0]*arr[1],arr[0]*arr[1],arr[1]])\n    #create a subarray of size 4\n    subarray.append([arr[0]*arr[1]*arr[2],arr[0]*arr[1]*arr[2],arr[0]*arr[1],arr[1]*arr[2]])\n    #create a subarray of size 5\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3],arr[0]*arr[1]*arr[2]*arr[3],arr[0]*arr[1]*arr[2],arr[0]*arr[1],arr[1]*arr[2]*arr[3]])\n    #create a subarray of size 6\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3]*arr[4],arr[0]*arr[1]*arr[2]*arr[3]*arr[4],arr[0]*arr[1]*arr[2]*arr[3],arr[0]*arr[1]*arr[2]*arr[3],arr[0]*arr[1]*arr[2]*arr[3],arr[0]*arr[1]*arr[2]])\n    #create a subarray of size 7\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5],arr[0]*arr[1]*arr[2]*arr[3]*arr[4],arr[0]*arr[1]*arr[2]*arr[3]*arr[4],arr[0]*arr[1]*arr[2]*arr[3]*arr[4],arr[0]*arr[1]*arr[2]*arr[3]])\n    #create a subarray of size 8\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]])\n    #create a subarray of size 9\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]])\n    #create a subarray of size 10\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]])\n    #create a subarray of size 11\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]])\n    #create a subarray of size 12\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]])\n    #create a subarray of size 13\n    subarray.append([arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11],arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11],arr[0]*arr[1]*arr"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in xrange(1<<n):\n        for j in xrange(n):\n            if i & (1<<j):\n                result += arr[j] * arr[j+1] * arr[j+2] * arr[j+3]\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return -1\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod*arr[i]\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            res = res + prod/arr[j-i]\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    s = 0\n    for i in range(0, l):\n        for j in range(i, l):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            if prod > 0:\n                s += prod\n    return s\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x5555555555555555) | ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) | ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) | ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) | ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) | ((n & 0xFFFF0000FFFF0000) >> 16)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Note: | is the bitwise operator for checking the bit of a number\n    return (n & 0x5555555555555555) | ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n & 1) + (n >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = n & 0x5555555555555555\n    b = n & 0x3333333333333333\n    c = n & 0x0f0f0f0f0f0f0f0f\n    d = (a << 1) | (a >> 31)\n    e = (b << 1) | (b >> 31)\n    f = (c << 1) | (c >> 31)\n    g = (d << 1) | (d >> 31)\n    h = (e << 1) | (e >> 31)\n    i = (f << 1) | (f >> 31)\n    j = (g << 1) | (g >> 31)\n    k = (h << 1) | (h >> 31)\n    l = (i << 1) | (i >> 31)\n    m = (j << 1) | (j >> 31)\n    n = (k << 1) | (k >> 31)\n    o = (l << 1) | (l >> 31)\n    p = (m << 1) | (m >> 31)\n    return n | p\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_list = [x for x in range(1, n+1)]\n    bit_list[0] = 0\n    bit_list[-1] = 0\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bin_n = bin(n)\n    first_half, middle_half = bin_n[:len(bin_n)//2], bin_n[len(bin_n)//2:]\n    middle_half = middle_half[:-1] + str((int(middle_half[-1]) ^ 1))\n    return (int(first_half) + int(middle_half, 2))\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n==0:\n        return 1\n    elif n&1==0:\n        return set_middle_bits(n>>1)^1\n    else:\n        return set_middle_bits((n-1)>>1)^1\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (2 ** (len(bin(n)) - 3) - 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    elif n & 1 == 1:\n        return n+1\n    else:\n        return n-1\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    if n & 1 == 1:\n        return n+1\n    return n-1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a) or a[pos]!= x:\n        return pos\n    return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #if x < a[0]:\n    #    return 0\n    #if x > a[-1]:\n    #    return len(a)\n    #if x == a[0]:\n    #    return 0\n    #if x == a[-1]:\n    #    return len(a)\n    #if x > a[0] and x < a[1]:\n    #    return 1\n    #for i in range(1, len(a)):\n    #    if a[i] > x:\n    #        return i\n    #return len(a)\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i==0:\n        return 0\n    elif a[i-1]<=x:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] < x:\n        return 0\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.insert(bisect.bisect_left(a, x), x)\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if x > a[i-1] else i-1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    \n    # if x is greater than the last element, return the last element index + 1\n    if x > a[-1]:\n        return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a)-1\n    while lo <= hi:\n        mid = (hi+lo)//2\n        if a[mid] == x:\n            return mid\n        if a[mid] < x:\n            lo = mid+1\n        else:\n            hi = mid-1\n    return lo\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) \nstring = \"lakshman\"\nprint check_str(string)\nstring = \"mukul\"\nprint check_str(string)"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try:\n        return re.search(regex,string).group()\n    except:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print 'Valid'\n    else:\n        print 'Invalid'\ncheck_str(string)\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\ndef check_str_2(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using re.match()\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\ndef check_str_3(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using re.match()\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print(re.match(regex, string))\n    \ncheck_str(\"hello\""
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        print('String starts with a vowel')\n    else:\n        print('String does not start with a vowel')\n        \n        \n    \ncheck_str('a')\ncheck_str('q')\ncheck_str('e')\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 / n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(1-pow(pow(1-pow(pow(1-pow(pow(1-pow(pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-pow(1-po"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/n) * (1 + geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (n - 1) * n\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def n_minus_1(n):\n        if n == 0:\n            return 1\n        else:\n            return n * n_minus_1(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 + (1 / n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    x = int('1' + '0'*(n-1))\n    n = int(str(x) + str(x+1))\n    return n\ndef check_triangular_number(n):\n    '''\n    Write a python function to check if the number is triangular number or not. https://www.geeksforgeeks.org/check-if-a-number-is-triangular-number-or-not/\n    '''\n    n = abs(n)\n    n = int(math.ceil(math.sqrt(n)))\n    if n*(n+1) == 2*n*(n+1)/2:\n        return True\n    return False\ndef find_triangular_number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/find-triangular-number-with-n-digits/\n    '''\n    n = int(math.ceil(math.sqrt(n)))\n    return n*(n+1)//2\ndef find_euler_triangular_number():\n    '''\n    Write a python function to find the euler triangular number. https://www.geeksforgeeks.org/euler-trienlmal-number/\n    '''\n    n = 1\n    while True:\n        n = n+1\n        if check_triangular_number(n):\n            break\n    return n\ndef find_largest_triangular_number(n):\n    '''\n    Write a python function to find the largest triangular number with n digits. https://www.geeksforgeeks.org/largest-triangular-number-with-n-digits/\n    '''\n    x = find_Index(n)\n    n = find_triangular_number(x)\n    return n\ndef find_digit_sum(n):\n    '''\n    Write a python function to find the digit sum of a triangular number. https://www.geeksforgeeks.org/find-digit-sum-of-a-triangular-number/\n    '''\n    s = 0\n    while n:\n        s += n%10\n        n //= 10\n    return s\ndef find_triangle_number_with_digit_sum_equal_to(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to n. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to/\n    '''\n    x = int('1' + '0'*(n-1))\n    n = int(str(x) + str(x+1))\n    while True:\n        if find_digit_sum(n) == n:\n            break\n        n += 1\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_lowest_index(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the index of the lowest triangular number with n digits. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to-lowest-index/\n    '''\n    x = find_Index(n)\n    n = find_triangular_number_with_digit_sum_equal_to(x)\n    return n\ndef find_largest_triangle_number_with_digit_sum_equal_to(n):\n    '''\n    Write a python function to find the largest triangular number with the digit sum equal to n. https://www.geeksforgeeks.org/largest-triangle-number-with-digit-sum-equal-to/\n    '''\n    x = find_Index(n)\n    n = find_triangle_number_with_digit_sum_equal_to(x)\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_n_digits(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the n digits. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to-n-digits/\n    '''\n    x = find_Index(n)\n    n = find_triangle_number_with_digit_sum_equal_to(x)\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_n_digits_lowest_index(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the n digits and the index of the lowest triangular number with n digits. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to-n-digits-and-lowest-index/\n    '''\n    x = find_Index(n)\n    n = find_triangle_number_with_digit_sum_equal_to_lowest_index(x)\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_n_digits_lowest_index_high(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the n digits and the index of the lowest triangular number with n digits higher. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to-n-digits-and-lowest-index-high/\n    '''\n    x = find_Index(n)\n    n = find_triangle_number_with_digit_sum_equal_to_lowest_index(x)\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_n_digits_lowest_index_low(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the n digits and the index of the lowest triangular number with n digits higher. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to-n-digits-and-lowest-index-low/\n    '''\n    x = find_Index(n)\n    n = find_triangle_number_with_digit_sum_equal_to_lowest_index(x)\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_n_digits_high(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the n digits and the index of the highest triangular number with n digits. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to-n-digits-high/\n    '''\n    x = find_Index(n)\n    n = find_triangle_number_with_digit_sum_equal_to(x)\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_n_digits_high_index(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the n digits and the index of the highest triangular number with n digits. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to-n-digits-high-index/\n    '''\n    x = find_Index(n)\n    n = find_triangle_number_with_digit_sum_equal_to(x)\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_n_digits_low(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the n digits and the index of the lowest triangular number with n digits. https://www.geeksforgeeks.org/triangle-number-with-digit-sum-equal-to-n-digits-low/\n    '''\n    x = find_Index(n)\n    n = find_triangle_number_with_digit_sum_equal_to(x)\n    return n\ndef find_triangle_number_with_digit_sum_equal_to_n_digits_low_index(n):\n    '''\n    Write a python function to find the triangle number with the digit sum equal to the n digits and the index of the lowest triangular numbe"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # the indexes of triangular numbers\n    tri_num = [1]\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 1\n    i = 0\n    while(index < n):\n        i += 1\n        index = i * (i + 1) / 2\n    return i\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    N = int(math.pow(10,n))\n    return int(math.pow(10,n-1)-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # conversion to number\n    n = int(n)\n    index = 0\n    while True:\n        index = index + 1\n        num = convert_to_number(index)\n        if num == n:\n            break\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n_1 = n - 1\n    n_2 = int(math.sqrt(n * 2))\n    index = -1\n    for i in range(n_1, n_2, -1):\n        if int(i * (i + 1) / 2) == n:\n            index = i\n            break\n        elif int(i * (i + 1) / 2) > n:\n            index = i - 1\n            break\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr=[0 for i in range(n)]\n    arr[0]=1\n    for i in range(1,n):\n        arr[i]=(arr[i-1]*(n-i))//i\n    return arr\ndef get_digits(n):\n    '''\n    Write a python function to get the digits of a number. https://www.geeksforgeeks.org/find-the-number-of-digits-of-a-number/\n    '''\n    if n==0:\n        return 1\n    else:\n        return int(math.floor(math.log10(n)))+1\ndef tris(n):\n    '''\n    Write a python function to find the triangular numbers. https://www.geeksforgeeks.org/find-the-numbers-of-triangular-numbers/\n    '''\n    i=0\n    while find_Index(i)[n-1]<=n:\n        i+=1\n    return i-1\ndef is_triangular(n):\n    '''\n    Write a python function to check if a number is triangular or not. https://www.geeksforgeeks.org/check-if-a-number-is-a-triangular-number/\n    '''\n    return n>0 and tris(int(n))==n\ndef is_square(n):\n    '''\n    Write a python function to check if a number is square or not. https://www.geeksforgeeks.org/check-if-a-number-is-a-perfect-square-number/\n    '''\n    return n>0 and int(math.sqrt(n))**2==n\ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect or not. https://www.geeksforgeeks.org/perfect-number-and-the-perfect-squares/\n    '''\n    if n<0:\n        return False\n    sum=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            sum+=i\n            if i**2!=n:\n                sum+=int(n/i)\n    return sum==n\ndef is_cyclic(n):\n    '''\n    Write a python function to check if a number is cyclic or not. https://www.geeksforgeeks.org/cyclic-number-or-not/\n    '''\n    return n>0 and (int(math.sqrt(n))**2==n)\ndef is_lucky(n):\n    '''\n    Write a python function to check if a number is lucky or not. https://www.geeksforgeeks.org/lucky-number-or-not/\n    '''\n    return n>0 and is_perfect(n)\ndef is_amicable(n):\n    '''\n    Write a python function to check if a number is amicable or not. https://www.geeksforgeeks.org/amicable-numbers/\n    '''\n    return n>0 and is_perfect(n) and (int(math.sqrt(n))**2!=n)\ndef is_pan_digit(n):\n    '''\n    Write a python function to check if a number is pan number or not. https://www.geeksforgeeks.org/pan-digit-number/\n    '''\n    return n>0 and is_perfect(n)\ndef is_roof_digit(n):\n    '''\n    Write a python function to check if a number is roof number or not. https://www.geeksforgeeks.org/roof-digit-number/\n    '''\n    return n>0 and is_perfect(n)\ndef is_hexa(n):\n    '''\n    Write a python function to check if a number is hexa number or not. https://www.geeksforgeeks.org/hexa-number/\n    '''\n    return n>0 and is_perfect(n) and int(math.sqrt(n))**2==n\ndef is_octa(n):\n    '''\n    Write a python function to check if a number is octa number or not. https://www.geeksforgeeks.org/octa-number/\n    '''\n    return n>0 and is_perfect(n) and int(math.sqrt(n))**2!=n\ndef is_oct_digit(n):\n    '''\n    Write a python function to check if a number is octal digit or not. https://www.geeksforgeeks.org/octal-digit-number/\n    '''\n    return n>0 and is_perfect(n) and int(math.sqrt(n))**2==n\ndef is_octal(n):\n    '''\n    Write a python function to check if a number is octal or not. https://www.geeksforgeeks.org/octal-number/\n    '''\n    return n>0 and is_perfect(n) and is_octa(n)\ndef is_hexa_digit(n):\n    '''\n    Write a python function to check if a number is hexal digit or not. https://www.geeksforgeeks.org/hexa-digit-number/\n    '''\n    return n>0 and is_perfect(n) and is_hexa(n)\ndef is_hexa_digit_1(n):\n    '''\n    Write a python function to check if a number is hexal digit or not. https://www.geeksforgeeks.org/hexa-digit-number-1/\n    '''\n    return n>0 and is_perfect(n) and is_octa(n)\ndef is_oct_digit_1(n):\n    '''\n    Write a python function to check if a number is octal digit or not. https://www.geeksforgeeks.org/octal-digit-number-1/\n    '''\n    return n>0 and is_perfect(n) and is_octa(n)\ndef is_octal_digit_1(n):\n    '''\n    Write a python function to check if a number is octal digit or not. https://www.geeksforgeeks.org/octal-digit-number-1/\n    '''\n    return n>0 and is_perfect(n) and is_octa(n)\ndef is_roman_numeral(n):\n    '''\n    Write a python function to check if a number is roman numeral or not. https://www.geeksforgeeks.org/is-a-number-roman-number/\n    '''\n    return n>0 and is_perfect(n) and (int(math.sqrt(n))**2==n)\ndef is_roman(n):\n    '''\n    Write a python function to check if a number is roman or not. https://www.geeksforgeeks.org/is-a-number-roman-number/\n    '''\n    return n>0 and is_perfect(n) and (int(math.sqrt(n))**2!=n)\ndef is_armstrong(n):\n    '''\n    Write a python function to check if a number is armstrong number or not. https://www.geeksforgeeks.org/armstrong-number-or-not/\n    '''\n    return n>0 and is_perfect(n) and is_square(n)\ndef is_fizz(n):\n    '''\n    Write a python function to check if a number is fizz number or not. https://www.geeksforgeeks.org/fizz-number-or-not/\n    '''\n    return n>0 and is_perfect(n) and is_square(n)\ndef is_fizz_1(n):\n    '''\n    Write a python function to check if a number is fizz number or not. https://www.geeksforgeeks.org/fizz-number-or-not-1/\n    '''\n    return n>0 and is_perfect(n) and is_square(n)\ndef is_fizz_2(n):\n    '''\n    Write a python function to check if a number is fizz number or not. https://www.geeksforgeeks.org/fizz-number-or-not-2/\n    '''\n    return n>0 and is_perfect(n) and is_squar"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    index = -1\n    smallest_triangular_number = n*(n+1) / 2\n    for i in range(1,n+1): \n        triangular_number = i*(i+1) / 2\n        if triangular_number == smallest_triangular_number:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    Given a number N, find the index of the smallest triangular number with N digits. A triangular number is a number which is the sum of its natural numbers. \n    N is an integer within the range [1, 14].\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    n = n-1\n    index = n*(n+1)/2\n    return index\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n    \ndef dict_to_tuple(dictionary):\n    '''\n    Write a function to convert the given dictionary to a key-value tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-adjacent-pair-tuple/\n    '''\n    test_tup = []\n    for key, value in dictionary.items():\n        test_tup.append(key)\n        test_tup.append(value)\n    return tuple(test_tup)\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for index,value in enumerate(test_tup):\n        if index == 0:\n            dict_tup[value] = value\n        else:\n            dict_tup[value] = test_tup[index-1]\n    return dict_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0,len(test_tup),2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # result_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    result_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    print(result_dict)\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    test_dict[test_tup[0]] = test_tup[1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    ret_dict = {}\n    for i in range(0, len(test_tup) - 1):\n        ret_dict[test_tup[i]] = test_tup[i+1]\n    return ret_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    return dict((key,value) for key,value in zip(test_tup[::2], test_tup[1::2]))\n    \n    \n    \ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a key-value tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-key-value-pairs/\n    '''\n    \n    return tuple(zip(test_dict.keys(), test_dict.values()))\n    \n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    assert(len(test_tup) > 1)\n    new_dict = {}\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            new_dict[test_tup[i]] = None\n        else:\n            new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!=s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #code here\n    for i in s :\n        if i!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = []\n    for i in s:\n        if i not in l:\n            l.append(i)\n    if len(l) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    if len(set(l)) == 1 :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1 = s\n    for i in s :\n        if (i!= s[0]) :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    flag = True\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            flag = False\n    if flag == True :\n        print(\"All the characters are same\")\n    else :\n        print(\"All the characters are different\")\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        for j in range(len(s) - i - 1):\n            if s[j]!= s[j + 1 + i]:\n                return 0\n    return 1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = list(s)\n    return len(set(chars)) == 1\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/4) * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/4 * math.sqrt(3) * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return side**3\ndef area_cylinder(radius, height):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    return 2 * math.pi * radius**2 + 2 * math.pi * radius * height\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4 * math.pi * radius**2\ndef area_dodecahedron(side):\n    '''\n    Write a function to calculate the area of a dodecahedron.\n    '''\n    return 10 * (3 **.5) * side ** 2\ndef area_cone(radius, height):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    return math.pi * radius**2 + (2 * math.pi * radius * height)\ndef area_hexahedron(side):\n    '''\n    Write a function to calculate the area of a hexahedron.\n    '''\n    return 6 * side**2\ndef area_parallelepiped(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a parallelepiped.\n    '''\n    return 2 * (side1 * side2 + side1 * side3 + side2 * side3)\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5 * side1 * side2 + 0.5 * side2 * side3 + 0.5 * side1 * side3\ndef area_trapezium(base1, base2, height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return 0.5 * (base1 + base2) * height\ndef area_ellipse(radius1, radius2):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    return math.pi * (radius1**2 - radius2**2)\ndef area_rectangle(length, breadth):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return length * breadth\ndef area_parallelogram(base1, base2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return 0.5 * base1 * base2\ndef area_trapezium(base1, base2, height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return 0.5 * (base1 + base2) * height\ndef area_rhombus(base, height):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return 0.5 * base * height\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius**2\ndef area_cube_by_edge(edge):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return 6 * edge ** 2\ndef area_dodecahedron_by_edge(edge):\n    '''\n    Write a function to calculate the area of a dodecahedron.\n    '''\n    return 10 * edge**2\ndef area_hexahedron_by_edge(edge):\n    '''\n    Write a function to calculate the area of a hexahedron.\n    '''\n    return 12 * edge ** 2\ndef area_triangle_by_edge(edge):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5 * edge ** 2\ndef area_octahedron_by_edge(edge):\n    '''\n    Write a function to calculate the area of a octahedron.\n    '''\n    return 8 * edge ** 2\ndef area_decagon_by_edge(edge):\n    '''\n    Write a function to calculate the area of a decagon.\n    '''\n    return 4 * edge ** 2\ndef area_hexagon_by_edge(edge):\n    '''\n    Write a function to calculate the area of a hexagon.\n    '''\n    return edge ** 2\ndef area_octagon_by_edge(edge):\n    '''\n    Write a function to calculate the area of a octagon.\n    '''\n    return 2 * edge ** 2\ndef area_tetrahedron_by_edge(edge):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    return 4 * edge ** 2\ndef area_pyradi(edge):\n    '''\n    Write a function to calculate the area of a pyradi.\n    '''\n    return edge ** 2\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    return 4 * math.sqrt(2) * side ** 2\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return side ** 3\ndef area_cylinder(radius, height):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    return 2 * math.pi * radius**2 + 2 * math.pi * radius * height\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4 * math.pi * radius**2\ndef area_dodecahedron(side):\n    '''\n    Write a function to calculate the area of a dodecahedron.\n    '''\n    return 10 * (3 **.5) * side ** 2\ndef area_cone(radius, height):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    return math.pi * radius**2 + (2 * math.pi * radius * height)\ndef area_hexahedron(side):\n    '''\n    Write a function to calculate the area of a hexahedron.\n    '''\n    return 6 * side**2\ndef area_parallelepiped(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a parallelepiped.\n    '''\n    return 2 * (side1 * side2 + side1 * side3 + side2 * side3)\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5 * side1 * side2 + 0.5 * side2 * side3 + 0.5 * side1 * side3\ndef area_trapezium(base1, base2, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5 * (base1 + base2) * height\ndef area_ellipse(radius1, radius2):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    return math.pi * (radius1**2 - radius2**2)\ndef area_rectangle(length, breadth):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return length * breadth\ndef area_parallelogram(base1, base2):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5 * base1 * base2\ndef area_trapezium(base1, base2, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5 * (base1 + base2) * height\ndef area_rhombus(base, height):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return 0.5 * base * height\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius**2\ndef area_cube_by_edge(edg"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3/4)*math.sqrt(6*(side**2))\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #A tetrahedron is a regular cube with four equal sides and four equal angles.\n    #The function is:\n    #1/4*sqrt(2)*(s1*s2*s3)\n    return (1/4)*math.sqrt(2)*(side*side*side)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3.0)*side**2) / 4.0\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*math.sqrt(3)/4)*math.pow(side,2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Function to calclate the area of a tetrahedron\n    # PYTHON: <function area_tetrahedron(side)>\n    # REF: https://en.wikipedia.org/wiki/Tetrahedron\n    return (math.sqrt(3)/4) * (side ** 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    assert isinstance(side,int) and side > 0\n    return math.sqrt(3)/4.0 * side ** 2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(math.sqrt(3)/4))*(side**2)\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m > n:\n        m = m % n\n    temp = [list[n-1]]\n    for i in range(n-2, m-1, -1):\n        temp.append(list[i])\n    temp.append(list[m])\n    return temp\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # This function rotates the list to the right\n    # by swapping the last m elements with the\n    # first m elements\n    n = len(list)\n    i = m\n    j = n - m\n    while i < j:\n        list[i], list[j] = list[j], list[i]\n        i = i + 1\n        j = j - 1\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # this solution is not working, because when we rotate, the original list is not reflected to the new list\n    # which is really weird.\n    # so, the idea is to just use a extra array of size l, and append values to it to keep the original list intact\n    # there are a couple ways to do this, but the above is the easiest way to do it\n    # for the above idea, you would have to do the following\n    # l = len(list)\n    # for i in range(m):\n    #     temp = list[l-1]\n    #     for j in range(l-1,0,-1):\n    #         list[j] = list[j-1]\n    #     list[0] = temp\n    #return list\n    # a better way to do this would be to use a temporary array, but that would have to be a lot of code\n    # you would do this, but then the array would have to be a new array that is allocated in memory\n    # so, there would be a lot of code\n    # so, the above is actually faster and more memory efficient than the solution below\n    l = len(list)\n    temp = [0]*l\n    for i in range(m):\n        temp[i] = list[l-1]\n        for j in range(l-1,0,-1):\n            list[j] = list[j-1]\n        list[0] = temp[i]\n    return list\n    # i think the above is faster, but it's the same as the above, and memory efficient\n    # so, it would be a bit of a question if you want to know which one is better\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[m:] + list[:m]\n    return temp\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if None in test_tup:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # test_tup = (\"A\",\"B\",\"C\")\n    if any(i is None for i in test_tup):\n        print(test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for each in test_tup:\n        if each is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if None == item:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    def helper(num, divisor):\n        return num % divisor == 0\n    res = list(filter(lambda x: helper(x, startnum), range(startnum, endnum + 1)))\n    return res\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    range_list = [i for i in range(startnum, endnum+1)]\n    results = list(filter(lambda x: all(x%y == 0 for y in list(map(int, str(x)))), range_list))\n    return results\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: (x%10!=0 and startnum%x ==0 and endnum%x == 0),range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum+1) if all(i%int(digit) == 0 for digit in str(i))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return_list = []\n    for i in range(startnum, endnum+1):\n        for j in range(2, len(str(i))):\n            if i % int(str(i)[0])!= 0:\n                break\n            elif j == len(str(i))-1:\n                return_list.append(i)\n                break\n    return return_list\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum):\n        num_str = str(num)\n        for char in num_str:\n            if num % int(char)!= 0:\n                break\n        else:\n            divisible_numbers.append(num)\n    return divisible_numbers\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_digits = []\n    for i in range(startnum, endnum + 1):\n        if all(i % j == 0 for j in [int(d) for d in str(i)]):\n            divisible_by_digits.append(i)\n    return divisible_by_digits\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    for num in range(startnum, endnum + 1):\n        divisble = True\n        for i in str(num):\n            if num % int(i)!= 0:\n                divisble = False\n        if divisble:\n            print(num)\n    return num\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if all([x%y == 0 for y in range(10)])]\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)\ndef lab08():\n    print 'Lab08'\n    print 'Question 1'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 2'\n    print 'Labs 10-14'\n    print 'Question 3'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 4'\n    print 'Labs 10-14'\n    print 'Question 5'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 6'\n    print 'Labs 10-14'\n    print 'Question 7'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 8'\n    print 'Labs 10-14'\n    print 'Question 9'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 10'\n    print 'Labs 10-14'\n    print 'Question 11'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 12'\n    print 'Labs 10-14'\n    print 'Question 13'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 14'\n    print 'Labs 10-14'\n    print 'Question 15'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 16'\n    print 'Labs 10-14'\n    print 'Question 17'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 18'\n    print 'Labs 10-14'\n    print 'Question 19'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 20'\n    print 'Labs 10-14'\n    print 'Question 21'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 22'\n    print 'Labs 10-14'\n    print 'Question 23'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 24'\n    print 'Labs 10-14'\n    print 'Question 25'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 26'\n    print 'Labs 10-14'\n    print 'Question 27'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 28'\n    print 'Labs 10-14'\n    print 'Question 29'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 30'\n    print 'Labs 10-14'\n    print 'Question 31'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 32'\n    print 'Labs 10-14'\n    print 'Question 33'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 34'\n    print 'Labs 10-14'\n    print 'Question 35'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 36'\n    print 'Labs 10-14'\n    print 'Question 37'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 38'\n    print 'Labs 10-14'\n    print 'Question 39'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 40'\n    print 'Labs 10-14'\n    print 'Question 41'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 42'\n    print 'Labs 10-14'\n    print 'Question 43'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 44'\n    print 'Labs 10-14'\n    print 'Question 45'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 46'\n    print 'Labs 10-14'\n    print 'Question 47'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 48'\n    print 'Labs 10-14'\n    print 'Question 49'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the sector = ',sector_area(r,a)\n    print 'Question 50'\n    print 'Labs 10-14'\n    print 'Question 51'\n    r=float(raw_input('Enter the radius: '))\n    a=float(raw_input('Enter the angle in degrees: '))\n    print 'Area of the secto"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle=math.radians(a)\n    area=(math.pi*(r**2))/4\n    if angle>360:\n        return None\n    else:\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (3.14*r*r)/360*(360-a)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*a/180\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*(math.sin(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # r is radius, a is angle\n    a = math.radians(a)\n    if a > 360:\n        return None\n    return math.pi*r**2*(1-(math.cos(a))**2)\n    \ndef trap_area(m,b):\n    '''\n    Write a function to find area of a triangle. The function takes base and height as inputs. Function should return None if either height is None or base is None.\n    '''\n    # m is base, b is height\n    if m is None or b is None:\n        return None\n    return (m*b)/2\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*(1-math.cos(math.radians(a)))\ndef get_results(min_time, min_time2, max_time, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the name of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_price(min_time, max_time, min_time2, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the price of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_price2(min_time, max_time, min_time2, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the price of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_price3(min_time, max_time, min_time2, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the price of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_price4(min_time, max_time, min_time2, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the price of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_rating(min_time, max_time, min_time2, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the rating of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_rating2(min_time, max_time, min_time2, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the rating of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_rating3(min_time, max_time, min_time2, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the rating of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_rating4(min_time, max_time, min_time2, max_time2):\n    '''\n    The function takes in the minimum and maximum time for the two restaurants that are considered for a restaurant which is going to be the one with minimum time. It also takes in the maximum and maximum time for the other restaurant which is going to be the one with maximum time. The function should return the rating of the restaurant which has minimum time with maximum time.\n    '''\n    min_time=float(min_time)\n    max_time=float(max_time)\n    min_time2=float(min_time2)\n    max_time2=float(max_time2)\n    if min_time2 > min_time:\n        return None\n    elif max_time2 < max_time:\n        return None\n    else:\n        return min_time2 if max_time2 < max_time else max_time2\ndef get_rating5(min_time, ma"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # if angle is greater than 360 degrees, return None\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(a/360)\ndef equal_area(r1,r2):\n    '''\n    Write a function to find area of an equal-area circle. The function takes two radii as inputs. Function should return None if the radii are different.\n    '''\n    #if the radii are not equal, return None\n    if r1!=r2:\n        return None\n    else:\n        return math.pi*r1**2\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return (math.pi*r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return ''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    x, y, z = len(X), len(Y), len(Z)\n    m, n, o = x+1, y+1, z+1\n    T = [[[0 for i in range(o)] for j in range(n)] for k in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            for k in range(1, o):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    T[i][j][k] = T[i-1][j-1][k-1] + 1\n                else:\n                    T[i][j][k] = max(T[i][j][k-1], T[i-1][j][k], T[i][j-1][k])\n    return T[m-1][n-1][o-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n    L = [[[0 for i in range(m + 1)] for i in range(n + 1)] for i in range(p + 1)] \n    for i in range(1, p + 1): \n        for j in range(1, n + 1): \n            for k in range(1, m + 1): \n                if Z[i - 1] == Y[j - 1] and Z[i - 1] == X[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    return L[p][n][m] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    LCS = [[[0 for i in range(p+1)] for j in range(n+1)] for k in range(m+1)]\n    max_len = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n                max_len = max(max_len, LCS[i][j][k])\n    return max_len\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = X + \"-\"\n    Y = Y + \"-\"\n    Z = Z + \"-\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[None]*(o+1) for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    '''\n    lcs_of_three(\"abc\",\"acb\",\"bac\") --> 3\n    lcs_of_three(\"abcd\",\"bacd\",\"bcad\") --> 4\n    lcs_of_three(\"abd\",\"cdab\",\"caba\") --> 2\n    lcs_of_three(\"A\",\"A\",\"A\") --> 1\n    '''\n    # table[i][j] will be storing the length of LCS of X[0...i-1] and Y[0...j-1] \n    table = [[0 for i in range(len(Y) + 1)] for j in range(len(X) + 1)] \n    result = 0 # length of LCS of X[0...m-1] and Y[0...n-1] will be stored in this variable \n    # Following steps build LCS recursively and return the last element of LCS \n    for i in range(len(X)): \n        for j in range(len(Y)): \n            if X[i] == Y[j]: \n                table[i+1][j+1] = table[i][j] + 1\n                if table[i+1][j+1] > result: \n                    result = table[i+1][j+1] \n            else: \n                table[i+1][j+1] = 0\n    return result \n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    split_list = re.findall(r'[A-Z][^A-Z]*', str1)\n    for item in split_list:\n        if item[0].isupper():\n            str1 = str1.replace(item, item +'')\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    return re.sub('([A-Z][a-z]+)', r' \\1 ', str1)\n    \n    \n    \n    "
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # re.sub(r'^[A-Z][a-z]*', r' \\1', str1)\n    return re.sub(r'([A-Z][a-z]+)', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(^[A-Z])', r'\\1 ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)\\s',' \\g<1> ',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if not str1:\n        return \"Empty String\"\n    str1 = re.sub(r'([A-Z])',r' \\1',str1)\n    str1 = re.sub(r'([a-z])',r' \\1',str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word = re.findall('[A-Z][a-z]*', str1)\n    new_string = ''\n    for i in word:\n        new_string += i +''\n    return new_string\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('(?<=[a-z])[A-Z](?=[a-z]|$)','', str1)\ndef pattern_match(str1):\n    '''\n    Given a string, return the index of the first character which repeats itself.\n    If there is no repeating character, return -1.\n    '''\n    repeat = ''\n    for i in range(len(str1)):\n        if str1[i]!= str1[i-1]:\n            repeat = str1[i]\n            break\n    if repeat == '':\n        return -1\n    else:\n        return str1.index(repeat)\ndef next_permutation(str1):\n    '''\n    Given a string with just the characters 'a' through 'z' (lowercase and uppercase),\n    return the next greater permutation of the string, in which all letters are sorted in\n    ascending order.\n    '''\n    ind = len(str1)-1\n    while ind > 0:\n        if str1[ind-1] < str1[ind]:\n            break\n        ind -= 1\n    if ind == 0:\n        return ''.join(sorted(str1))\n    else:\n        for i in range(ind+1, len(str1)):\n            if str1[i] > str1[ind-1]:\n                str1[ind-1], str1[i] = str1[i], str1[ind-1]\n                break\n    temp = sorted(str1[ind:])\n    for i in range(len(temp)):\n        str1[ind+i] = temp[i]\n    return ''.join(str1)\ndef pivot_sort(str1):\n    '''\n    Given a string, sort the string's characters based on their frequency of occurrence.\n    '''\n    char_freq = {}\n    for i in range(len(str1)):\n        if str1[i] not in char_freq:\n            char_freq[str1[i]] = 1\n        else:\n            char_freq[str1[i]] += 1\n    char_freq_list = sorted(char_freq.items(), key=lambda x: x[1], reverse=True)\n    output_str = ''\n    for char, freq in char_freq_list:\n        for i in range(freq):\n            output_str += char\n    return output_str\ndef spiral_order(matrix):\n    '''\n    Given a matrix of integers, return the spiral order traversal of its elements.\n    '''\n    num_rows = len(matrix)\n    if num_rows == 0:\n        return []\n    num_cols = len(matrix[0])\n    row, col = 0, 0\n    visited = [[False for i in range(num_cols)] for j in range(num_rows)]\n    res = []\n    while True:\n        if row < 0 or row >= num_rows or col < 0 or col >= num_cols:\n            break\n        if visited[row][col]:\n            if row == num_rows-1 and col == num_cols-1:\n                break\n            if row == num_rows-1:\n                row -= 1\n                continue\n            if col == num_cols-1:\n                col -= 1\n                continue\n            else:\n                row += 1\n                col -= 1\n                continue\n        visited[row][col] = True\n        res.append(matrix[row][col])\n        if row < num_rows-1:\n            row += 1\n        elif row == num_rows-1 and col < num_cols-1:\n            row -= 1\n            col += 1\n        elif row == num_rows-1 and col == num_cols-1:\n            break\n        else:\n            row -= 1\n            col += 1\n    return res\ndef reverse_bits(num):\n    '''\n    For a given non-negative integer, return the integer with its bits in reverse order.\n    '''\n    res = 0\n    for i in range(32):\n        if (num >> i) & 1:\n            res += (1 << 31 - i)\n    return res\ndef array_diff(a, b):\n    '''\n    Given two arrays of numbers, return a new array consisting of the elements in the first array that are not\n    in the second array.\n    '''\n    diff = []\n    for i in range(len(a)):\n        if a[i] not in b:\n            diff.append(a[i])\n    return diff\ndef find_rotate_ind(arr, target):\n    '''\n    Given a sorted array and a target number, return the index of the number if the number is in the array,\n    or the index where it would be if it were inserted in order.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low + high)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\ndef binary_search(arr, target):\n    '''\n    Given a sorted array and a target number, return the index of the number if the number is in the array,\n    or the index where it would be if it were inserted in order.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low + high)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\ndef sorted_squares(arr):\n    '''\n    Given a list of sorted numbers, return a list of the squares of those numbers.\n    '''\n    res = []\n    for num in arr:\n        res.append(num*num)\n    return res\ndef subarray_max(nums):\n    '''\n    Given an array of integers, find the maximum sum of any contiguous subarray of the array.\n    '''\n    res = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        if curr_sum < 0:\n            curr_sum = nums[i]\n        else:\n            curr_sum += nums[i]\n        res = max(res, curr_sum)\n    return res\ndef matrix_rotate(matrix):\n    '''\n    Given an image represented by a 2-D array, rotate the image by 90 degrees (clockwise).\n    '''\n    num_rows = len(matrix)\n    if num_rows == 0:\n        return matrix\n    num_cols = len(matrix[0])\n    temp = []\n    for i in range(num_rows):\n        temp.append([])\n        for j in range(num_cols):\n            temp[i].append(matrix[j][num_rows-1-i])\n    return temp\ndef search_matrix(matrix, target):\n    '''\n    Write an efficient algorithm that searches for a value in an m x n matrix.\n    This matrix has the following properties:\n    Integers in each row are sorted from left to right.\n    The first integer of each row is greater than the last integer of the previous row.\n    '''\n    row = 0\n    col = len(matrix[0])-1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False\ndef diagonal_difference(arr):\n    '''\n    Given a square matrix, calculate the absolute difference between the sums of its diagonals.\n    '''\n    diag1 = 0\n    diag2 = 0\n    for i in range(len(arr)):\n        diag1 += arr[i][i]\n        diag2 += arr[i][len(arr[0])-1-i]\n    return abs(diag1 - diag2)\ndef search_matrix(matrix, target):\n    '''\n    Write an efficient algorithm that searches for a value in an m x n matrix.\n    This matrix has th"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    match=re.findall(r'[A-Z][a-z]*',str1)\n    str2=''\n    for i in range(len(match)):\n        if(i==0):\n            str2+=match[i]\n        else:\n            str2+=' '+match[i]\n    return str2\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return [str(num) for num in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from collections import defaultdict\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) == 0:\n        return nums_str\n    nums_int = [int(num) for num in nums_str]\n    return sorted(nums_int)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    l = list()\n    for num in nums_str:\n        l.append(int(num))\n    l.sort()\n    return l\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(n) for n in x.split()])\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    nums_str = [str(i) for i in nums]\n    return ''.join(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [float(i) for i in nums_str]\n    nums.sort()\n    return [str(i) for i in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if nums_str == []:\n        return []\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def is_number(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [s for s in nums_str if s.isdigit()]\n    nums = [int(s) for s in nums_str]\n    nums.sort()\n    return [str(num) for num in nums]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return list(test_list).append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print test_list\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) < len(test_tup):\n        for i in range(len(test_tup) - len(test_list)):\n            test_list.append(0)\n    test_list = list(test_list)\n    for i in range(len(test_tup)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return tuple(test_list)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if arr[i] is greater than the child or parent, return False\n    if arr[i] > arr[i*2] or arr[i] > arr[i*2+1]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i//2\n    left = i*2 + 1\n    right = i*2 + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[0]:\n        return False\n    if arr[0] < arr[i] < arr[1]:\n        return check_min_heap_helper(arr, 2)\n    if arr[1] < arr[i] < arr[2]:\n        return check_min_heap_helper(arr, 3)\n    if arr[2] < arr[i] < arr[3]:\n        return check_min_heap_helper(arr, 4)\n    if arr[3] < arr[i] < arr[4]:\n        return check_min_heap_helper(arr, 5)\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) <= 1:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_node = (2 * i) + 1\n    right_node = (2 * i) + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_i = 2 * i + 1\n    right_i = 2 * i + 2\n    if left_i < len(arr) and arr[left_i] < arr[i]:\n        return False\n    if right_i < len(arr) and arr[right_i] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] >= arr[i/2]:\n        return False\n    return check_min_heap_helper(arr, i/2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = (i - 1) / 2\n    if arr[i] < arr[parent]:\n        return False\n    left = (2 * i) + 1\n    right = (2 * i) + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    m = 1\n    n_max = 1000000\n    n_fac = [1]\n    n_fac_last = [1, 1]\n    while len(n_fac) <= n_max:\n        n_fac.append(0)\n    while len(n_fac_last) < n_max:\n        n_fac_last.append(n_fac_last[-1])\n    for i in range(n_max):\n        n_fac[i] = (n_fac_last[i] * m) % n_fac_last[i - 1]\n        if n_fac[i] == 0:\n            m = m + n_fac_last[i - 1]\n            n_fac[i] = m % n_fac_last[i - 1]\n    return n_fac[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # We have to use the gmpy library because it is faster than gmpy2\n    from gmpy2 import mpz\n    \n    # Get the jacobsthal of n\n    j = mpz(1)\n    for i in range(n):\n        j = (j**2) - 2*j + 1\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # I think that this is a bit tricky to understand here, but when you see this solution it \n    # is actually quite simple to understand\n    # https://www.youtube.com/watch?v=h9Zeqw-Q8S4&t=10s\n    # and you can get it to work with the sum of the last n jacobsthal numbers\n    # https://www.youtube.com/watch?v=h9Zeqw-Q8S4&t=10s\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    n_1 = jacobsthal_num(n-1)\n    n_2 = jacobsthal_num(n-2)\n    return n_1 + n_2\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = []\n    l.append(0)\n    l.append(1)\n    l.append(1)\n    for i in xrange(3, n+1):\n        l.append((l[i-2] + 2*l[i-1]) % 1000000)\n    return l[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n if n == 1 or n == 2 else jacobsthal_num(n-1) + jacobsthal_num(n-2) \n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 2\n    elif n == 3: return 4\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    f1 = 0\n    f2 = 1\n    if n < 0:\n        return None\n    if n == 0:\n        return f1\n    elif n == 1:\n        return f2\n    else:\n        for i in range(2, n+1):\n            f1, f2 = f2, f1 + f2\n    return f2\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # The jacobsthal number of 0 is 0\n    if n == 0: \n        return 0\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    print \"Minimum K (test case):\",\n    print test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = [('G', 4), ('F', 4), ('F', 3), ('E', 4), ('C', 3), ('E', 2), ('D', 4)]\n    res = min_k(test_list, 3)\n    assert(res == [('D', 4), ('C', 3), ('E', 2)])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # getting length of test list\n    n = len(test_list)\n    # initializing min_k\n    min_k = test_list[0]\n    # iterating through the range upto K\n    for i in range(0, K):\n        # comparing the min_k with each tuple from the tuple list\n        if test_list[i][1] < min_k[1]:\n            # if the min_k is more than the tuple from the tuple list\n            # then swapping the tuple from the tuple list with the min_k\n            min_k = test_list[i]\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0 or len(test_list) < K:\n        return None\n    #  return min(test_list, key=lambda x: x[1])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp_list = sorted(test_list, key = lambda x: x[K]) #sort the list on the Kth element\n    minimum_k = temp_list[0] #find the min K records\n    for i in range(1, len(temp_list)): #iterate through the sorted list and find the smallest Kth value\n        if minimum_k[K] > temp_list[i][K]:\n            minimum_k = temp_list[i]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # n = len(test_list)\n    # return [min(test_list[i:i+K]) for i in range(0, n, K)]\n    # return [min(test_list[i:i+K]) for i in range(0, n, K)]\n    return sorted(test_list)[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return None\n    return sorted(test_list)[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if test_list:\n        if K > len(test_list):\n            K = len(test_list)\n        key_list = []\n        for i in range(K):\n            key_list.append(test_list[i][1])\n        return key_list\n    else:\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(min(test_list, key=lambda x:x[i]))\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # a list of tuples\n    test_list = [(2, 'a'), (1, 'b'), (4, 'c'), (3, 'd'), (4, 'e'), (2, 'f'), (2, 'g'), (1, 'h'), (4, 'i'), (1, 'j'), (5, 'k'), (2, 'l'), (4,'m'), (2, 'n'), (3, 'o'), (2, 'p'), (3, 'q'), (1, 'r'), (3,'s'), (1, 't'), (3, 'u'), (2, 'v'), (4, 'w'), (2, 'x'), (4, 'y'), (2, 'z'), (4, '1'), (2, '2'), (4, '3'), (2, '4'), (3, '5'), (2, '6'), (4, '7'), (2, '8'), (3, '9'), (2, '0')]\n    \n    # sort the list on the basis of second item of each tuple\n    sorted_list = sorted(test_list, key = lambda x: x[1])\n    \n    # store all the minimum elements in a set\n    min_records = set()\n    \n    # iterate over the sorted list\n    for i in range(len(sorted_list)):\n        # add the first element of the tuple\n        min_records.add(sorted_list[i][0])\n        # check if we have already found the minimum number of records\n        if len(min_records) == K:\n            # return the minimum records\n            return min_records\n    \n    # return the minimum records\n    return min_records\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    return [l for l in l1 if l in l2 and l in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    ret_list = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                for k in l3:\n                    if i == k:\n                        ret_list.append(i)\n    return ret_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(0, len(l1)):\n        for j in range(0, len(l2)):\n            for k in range(0, len(l3)):\n                if i == j == k:\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    "
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize a list\n    common = []\n    # loop through each element\n    for i in range(0, len(l1)):\n        # loop through each element\n        for j in range(0, len(l2)):\n            # loop through each element\n            for k in range(0, len(l3)):\n                # check if all three lists have the same index\n                if i == j and j == k and i == k:\n                    # check if the element is common\n                    if l1[i] == l2[j] == l3[k]:\n                        # add the element to the list\n                        common.append(l1[i])\n    # return the list\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def find_common_elements(l1, l2, l3):\n        common_elements = []\n        if l1 is not l2 and l1 is not l3 and l2 is not l3:\n            return None\n        for index in range(len(l1)):\n            if l1[index] == l2[index] == l3[index]:\n                common_elements.append(l1[index])\n        return common_elements\n    l1_list = find_common_elements(l1, l2, l3)\n    l2_list = find_common_elements(l1, l2, l3)\n    l3_list = find_common_elements(l1, l2, l3)\n    list = [l1_list, l2_list, l3_list]\n    return list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    from itertools import chain\n    return list(set(chain(*zip(l1, l2, l3))))\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min = second_min = None\n    for x in numbers:\n        if min is None or x < min:\n            min, second_min = x, min\n        elif second_min is None or x < second_min:\n            second_min = x\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)<2:\n        return\n    else:\n        first = second = float('inf')\n        for i in numbers:\n            if i < first:\n                second = first\n                first = i\n            elif i < second and i!= first:\n                second = i\n        return second\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not isinstance(numbers, list):\n        raise ValueError\n    if len(numbers) < 2:\n        raise ValueError\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    # You can use a min() function here.\n    # \n    # For example,\n    # \n    # >>> second_smallest([1, 2, -1, -2])\n    # -1\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2])\n    # -2\n    # \n    # >>> second_smallest([3, 2, 1])\n    # 1\n    \n    # The min() function returns the first smallest element in the list.\n    # The second_smallest() function returns the second smallest element in the list.\n    # \n    # For the min() function, a tie breaks between two items. For example, if a tie breaks between two items,\n    # you would choose the first item.\n    # \n    # In the second_smallest() function, you should not return the min() function's first result.\n    # \n    # For example,\n    # \n    # >>> second_smallest([1, 2, -1, -2])\n    # -1\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2])\n    # -2\n    # \n    # >>> second_smallest([3, 2, 1])\n    # 1\n    \n    # Use a list comprehension to produce a list of the second smallest numbers in the original list.\n    # \n    # The second_smallest() function will have two input parameters: numbers (a list of numbers), and\n    # return value a number\n    # \n    # For example,\n    # \n    # >>> second_smallest([1, 2, -1, -2])\n    # -1\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2])\n    # -2\n    # \n    # >>> second_smallest([3, 2, 1])\n    # 1\n    \n    # \n    # >>> second_smallest([1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([-3, -2, -1])\n    # -1\n    # \n    # >>> second_smallest([-1, -2, -3])\n    # -1\n    # \n    # >>> second_smallest([0, -1, -2])\n    # 0\n    \n    # Use a list comprehension to produce a list of the second smallest numbers in the original list.\n    # \n    # The second_smallest() function will have two input parameters: numbers (a list of numbers), and\n    # return value a number\n    # \n    # For example,\n    # \n    # >>> second_smallest([1, 2, -1, -2])\n    # -1\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2])\n    # -2\n    # \n    # >>> second_smallest([3, 2, 1])\n    # 1\n    \n    # \n    # >>> second_smallest([1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([-3, -2, -1])\n    # -1\n    # \n    # >>> second_smallest([-1, -2, -3])\n    # -1\n    # \n    # >>> second_smallest([0, -1, -2])\n    # 0\n    \n    # Use a list comprehension to produce a list of the second smallest numbers in the original list.\n    # \n    # The second_smallest() function will have two input parameters: numbers (a list of numbers), and\n    # return value a number\n    # \n    # For example,\n    # \n    # >>> second_smallest([1, 2, -1, -2])\n    # -1\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2])\n    # -2\n    # \n    # >>> second_smallest([3, 2, 1])\n    # 1\n    \n    # \n    # >>> second_smallest([1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([-3, -2, -1])\n    # -1\n    # \n    # >>> second_smallest([-1, -2, -3])\n    # -1\n    # \n    # >>> second_smallest([0, -1, -2])\n    # 0\n    \n    # Use a list comprehension to produce a list of the second smallest numbers in the original list.\n    # \n    # The second_smallest() function will have two input parameters: numbers (a list of numbers), and\n    # return value a number\n    # \n    # For example,\n    # \n    # >>> second_smallest([1, 2, -1, -2])\n    # -1\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2])\n    # -2\n    # \n    # >>> second_smallest([3, 2, 1])\n    # 1\n    \n    # \n    # >>> second_smallest([1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([-3, -2, -1])\n    # -1\n    # \n    # >>> second_smallest([-1, -2, -3])\n    # -1\n    # \n    # >>> second_smallest([0, -1, -2])\n    # 0\n    \n    # Use a list comprehension to produce a list of the second smallest numbers in the original list.\n    # \n    # The second_smallest() function will have two input parameters: numbers (a list of numbers), and\n    # return value a number\n    # \n    # For example,\n    # \n    # >>> second_smallest([1, 2, -1, -2])\n    # -1\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2])\n    # -2\n    # \n    # >>> second_smallest([3, 2, 1])\n    # 1\n    \n    # \n    # >>> second_smallest([1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([-3, -2, -1])\n    # -1\n    # \n    # >>> second_smallest([-1, -2, -3])\n    # -1\n    # \n    # >>> second_smallest([0, -1, -2])\n    # 0\n    \n    # Use a list comprehension to produce a list of the second smallest numbers in the original list.\n    # \n    # The second_smallest() function will have two input parameters: numbers (a list of numbers), and\n    # return value a number\n    # \n    # For example,\n    # \n    # >>> second_smallest([1, 2, -1, -2])\n    # -1\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2])\n    # -2\n    # \n    # >>> second_smallest([3, 2, 1])\n    # 1\n    \n    # \n    # >>> second_smallest([1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([0, 1, 2, -1, -2, 3])\n    # -2\n    # \n    # >>> second_smallest([-3, -2, -1])\n    # -1\n    # \n    # >>> second_smallest(["
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not isinstance(numbers, list):\n        raise ValueError('Argument must be a list')\n    if len(numbers) <= 1:\n        return None\n    # sort the list\n    sorted_numbers = sorted(numbers)\n    # return the second smallest number\n    return sorted_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two numbers')\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    smallest = None\n    second = None\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second = smallest\n            smallest = num\n        elif second is None or num < second:\n            second = num\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers is None or len(numbers) == 0:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not isinstance(numbers, list) or len(numbers) < 2:\n        return None\n    if numbers == []:\n        return None\n    min_num = numbers[0]\n    second_min_num = numbers[1]\n    for n in numbers[2:]:\n        if n < min_num:\n            second_min_num = min_num\n            min_num = n\n        elif second_min_num < n < min_num:\n            second_min_num = n\n    return second_min_num\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    if result:\n        print(result.group())\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_zero_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_one_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab+', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_n_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_zero_or_one_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab+', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_n_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab+', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_zero_or_more_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_one_or_more_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab+', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_n_or_more_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab{1,}', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_zero_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_zero_or_more_or_one_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_one_or_more_or_one_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_n_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_n_or_more_or_one_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_zero_or_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_zero_or_one_or_more_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_one_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_one_or_more_or_zero_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab*|a', text)\n    print(match.group())\n    return match.group()\n    \ndef text_match_n_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match('a[a-z]+b', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # print(re.findall('a[b]+',text))\n    return True if re.findall('a[b]+',text) else False\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    # print(re.findall('a[b]?',text))\n    return True if re.findall('a[b]?',text) else False\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    # print(re.findall('a[b]*?',text))\n    return True if re.findall('a[b]*?',text) else False\ndef text_match_one_or_more_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_choice(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one of several 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    # print(re.findall('a[b]?',text))\n    return True if re.findall('a[b]?',text) else False\ndef text_match_choice_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one of several 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    # print(re.findall('a[b]*?',text))\n    return True if re.findall('a[b]*?',text) else False\ndef text_match_choice_or(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one of several 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    # print(re.findall('a[b]+',text))\n    return True if re.findall('a[b]+',text) else False\ndef text_match_group_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    # print(re.findall('a[b]*',text))\n    return True if re.findall('a[b]*',text) else False\ndef text_match_group_or(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_group_or_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    # print(re.findall('a[b]*?',text))\n    return True if re.findall('a[b]*?',text) else False\ndef text_match_group_or_plus_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_group_plus_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    # print(re.findall('a[b]*?',text))\n    return True if re.findall('a[b]*?',text) else False\ndef text_match_group_plus_plus_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_plus_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_plus_plus_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_plus_plus_plus_plus(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    # print(re.findall('a[b]+?',text))\n    return True if re.findall('a[b]+?',text) else False\ndef text_match_optional_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one '"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    pattern.search(text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(\"ab+\", text):\n        return True\n    else:\n        return False\n    \n    # test\n    print text_match_zero_one(\"abbbbb\")\n    print text_match_zero_one(\"aab\")\n    print text_match_zero_one(\"abc\")\n    print text_match_zero_one(\"abbbbbb\")\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_plus_b = re.compile(r'a+b')\n    match = a_plus_b.search(text)\n    if match:\n        print(\"A followed by 0 or more b's.\")\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b$', text)\n    \n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b', text)\n    \n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b+', text)\n    \n    \ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b', text)\n    \n    \ndef text_match_one_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b+', text)\n    \n    \ndef text_match_zero_or_one_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_one_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_one_or_more_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_one_or_more_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_one_or_more_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_more_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_one_or_more_or_more_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a+b*', text)\n    \n    \ndef text_match_zero_or_more_or_more_or_more_or_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or mor"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        print 'Match found', match.group()\n    else:\n        print 'No match found'\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(.*?)b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match is not none\")\n        print(\"Match is : {}\".format(match.group(1)))\n    else:\n        print(\"Match is none\")\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for item in test_list:\n        if item[::-1] in test_list:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    l = len(test_list)\n    count = 0\n    for i in range(l):\n        for j in range(l):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len(test_list) * (len(test_list)-1) / 2\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Write your code here\n    # set1 = set()\n    # set2 = set()\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         set1.add(test_list[i][::-1] + test_list[j][::-1])\n    #         set2.add(test_list[j][::-1] + test_list[i][::-1])\n    # return len(set1) + len(set2)\n    return sum(test_list[i][::-1] + test_list[j][::-1] in test_list for i in range(len(test_list)) for j in range(i+1, len(test_list)))\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    #for i in range(0, len(test_list)):\n    #    for j in range(i, len(test_list)):\n    #        if test_list[i] == test_list[j][::-1]:\n    #            result = result + 1\n    #return result\n    return sum(test_list[i] == test_list[i][::-1] for i in range(len(test_list)))\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = []\n    for test_string in test_list:\n        reverse_list.append(test_string[::-1])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for word1, word2 in zip(test_list, test_list[::-1]):\n        if word1 == word2:\n            count += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                if list1[i] == list1[j]:\n                    list1[i] = tuple(list1[i])\n                    list1[j] = tuple(list1[j])\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for x in list1:\n        if type(x) == list:\n            tup = tuple(x)\n            if dict1.get(tup) == None:\n                dict1[tup] = 1\n            else:\n                dict1[tup] += 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # first we need to create a dictionary where key is the sublist and value is the number of occurencies in the list\n    count_dict = {}\n    for i in list1:\n        if tuple(i) in count_dict:\n            count_dict[tuple(i)] += 1\n        else:\n            count_dict[tuple(i)] = 1\n    # now we need to convert the sublists to tuples so that we can count them\n    tuple_list = [tuple(i) for i in list1]\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # put your code here\n    result = {}\n    for item in list1:\n        if item not in result:\n            result[item] = list1.count(item)\n    return result\n    \ndef intersection(list1, list2):\n    '''\n    Write a function to count intersection of 2 lists. The function should return a dictionary where every key is an item in the first list and the value of the key is the number of its occurencies in the second list.\n    '''\n    # put your code here\n    result = {}\n    for item in list1:\n        if item in list2:\n            result[item] = list1.count(item)\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for l in list1:\n        if type(l) == list:\n            l = tuple(l)\n            if l not in dic:\n                dic[l] = 1\n            else:\n                dic[l] += 1\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    output_dict = {}\n    for item in list1:\n        tup = tuple(item)\n        if tup in output_dict:\n            output_dict[tup] += 1\n        else:\n            output_dict[tup] = 1\n    return output_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_of_lists = {}\n    for i in list1:\n        # if i in dict_of_lists:\n        #     dict_of_lists[i] += 1\n        # else:\n        #     dict_of_lists[i] = 1\n        dict_of_lists[tuple(i)] = list1.count(i)\n    print(dict_of_lists)\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tuples = []\n    for each in list1:\n        tuples.append(tuple(each))\n    list_dict = {}\n    for each in tuples:\n        list_dict[each] = tuples.count(each)\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for i in list1:\n        l = tuple(i)\n        if l in dic:\n            dic[l] += 1\n        else:\n            dic[l] = 1\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tups = []\n    count = 0\n    for x in list1:\n        if x not in tups:\n            tups.append(tuple(x))\n            count += 1\n    return count, tups\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = [int(num[i:i+2]) for i in range(0, len(num), 2)]\n    for i in num_list:\n        if i < 0 or i >= 10:\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 1:\n        if num[0] == '-' and num[1]!= '.':\n            return False\n        if num[0] == '+':\n            num = num[1:]\n        if num[-1] == '.':\n            num = num[:-1]\n        if len(num) > 1 and num[-1] == '0':\n            return False\n        return is_decimal(num)\n    else:\n        if num == '0':\n            return True\n        if num == '.':\n            return True\n        if len(num) == 1:\n            if num in '0123456789':\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return re.match(\"^[-+]?([0-9]*\\.[0-9]*)$\", num) is not None\n    \ndef is_frac(num):\n    '''\n    Write a function to check whether a given string is a fraction with a precision of 2.\n    '''\n    if not is_decimal(num):\n        return False\n    num, part = num.split('.')\n    return len(part) <= 2\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = num[:-1]\n    a = num[-1]\n    if (a == '.'):\n        if (n.isdigit()):\n            return True\n        else:\n            return False\n    else:\n        if (n.isdigit()):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num:\n        return num.isdigit() and float(num) == round(float(num), 2)\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # return num == int(num)\n    return float(num) == int(float(num))\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    num = str(num)\n    p = 0\n    for i in num:\n        p += 1\n        if i == '.':\n            break\n    if p == len(num):\n        return False\n    for j in num[p:]:\n        if j == '.':\n            continue\n        else:\n            return False\n    return True\n    \n    \nprint is_decimal(13.25)\nprint is_decimal(13.26)\nprint is_decimal(13.78)\nprint is_decimal(13.79)\nprint is_decimal(13.9)\nprint is_decimal(0.8)\nprint is_decimal(0.9)\nprint is_decimal(0.91)\nprint is_decimal(0.92)\nprint is_decimal(0.93)\nprint is_decimal(0.94)\nprint is_decimal(0.95)\nprint is_decimal(0.96)\nprint is_decimal(0.97)\nprint is_decimal(0.98)\nprint is_decimal(0.99)\nprint is_decimal(1)\nprint is_decimal(1.1)\nprint is_decimal(1.2)\nprint is_decimal(1.3)\nprint is_decimal(1.4)\nprint is_decimal(1.5)\nprint is_decimal(1.6)\nprint is_decimal(1.7)\nprint is_decimal(1.8)\nprint is_decimal(1.9)\nprint is_decimal(2)\nprint is_decimal(2.1)\nprint is_decimal(2.2)\nprint is_decimal(2.3)\nprint is_decimal(2.4)\nprint is_decimal(2.5)\nprint is_decimal(2.6)\nprint is_decimal(2.7)\nprint is_decimal(2.8)\nprint is_decimal(2.9)\nprint is_decimal(3)\nprint is_decimal(3.1)\nprint is_decimal(3.2)\nprint is_decimal(3.3)\nprint is_decimal(3.4)\nprint is_decimal(3.5)\nprint is_decimal(3.6)\nprint is_decimal(3.7)\nprint is_decimal(3.8)\nprint is_decimal(3.9)\nprint is_decimal(4)\nprint is_decimal(4.1)\nprint is_decimal(4.2)\nprint is_decimal(4.3)\nprint is_decimal(4.4)\nprint is_decimal(4.5)\nprint is_decimal(4.6)\nprint is_decimal(4.7)\nprint is_decimal(4.8)\nprint is_decimal(4.9)\nprint is_decimal(5)\nprint is_decimal(5.1)\nprint is_decimal(5.2)\nprint is_decimal(5.3)\nprint is_decimal(5.4)\nprint is_decimal(5.5)\nprint is_decimal(5.6)\nprint is_decimal(5.7)\nprint is_decimal(5.8)\nprint is_decimal(5.9)\nprint is_decimal(6)\nprint is_decimal(6.1)\nprint is_decimal(6.2)\nprint is_decimal(6.3)\nprint is_decimal(6.4)\nprint is_decimal(6.5)\nprint is_decimal(6.6)\nprint is_decimal(6.7)\nprint is_decimal(6.8)\nprint is_decimal(6.9)\nprint is_decimal(7)\nprint is_decimal(7.1)\nprint is_decimal(7.2)\nprint is_decimal(7.3)\nprint is_decimal(7.4)\nprint is_decimal(7.5)\nprint is_decimal(7.6)\nprint is_decimal(7.7)\nprint is_decimal(7.8)\nprint is_decimal(7.9)\nprint is_decimal(8)\nprint is_decimal(8.1)\nprint is_decimal(8.2)\nprint is_decimal(8.3)\nprint is_decimal(8.4)\nprint is_decimal(8.5)\nprint is_decimal(8.6)\nprint is_decimal(8.7)\nprint is_decimal(8.8)\nprint is_decimal(8.9)\nprint is_decimal(9)\nprint is_decimal(9.1)\nprint is_decimal(9.2)\nprint is_decimal(9.3)\nprint is_decimal(9.4)\nprint is_decimal(9.5)\nprint is_decimal(9.6)\nprint is_decimal(9.7)\nprint is_decimal(9.8)\nprint is_decimal(9.9)\nprint is_decimal(10)\nprint is_decimal(10.1)\nprint is_decimal(10.2)\nprint is_decimal(10.3)\nprint is_decimal(10.4)\nprint is_decimal(10.5)\nprint is_decimal(10.6)\nprint is_decimal(10.7)\nprint is_decimal(10.8)\nprint is_decimal(10.9)\nprint is_decimal(11)\nprint is_decimal(11.1)\nprint is_decimal(11.2)\nprint is_decimal(11.3)\nprint is_decimal(11.4)\nprint is_decimal(11.5)\nprint is_decimal(11.6)\nprint is_decimal(11.7)\nprint is_decimal(11.8)\nprint is_decimal(11.9)\nprint is_decimal(12)\nprint is_decimal(12.1)\nprint is_decimal(12.2)\nprint is_decimal(12.3)\nprint is_decimal(12.4)\nprint is_decimal(12.5)\nprint is_decimal(12.6)\nprint is_decimal(12.7)\nprint is_decimal(12.8)\nprint is_decimal(12.9)\nprint is_decimal(13)\nprint is_decimal(13.1)\nprint is_decimal(13.2)\nprint is_decimal(13.3)\nprint is_decimal(13.4)\nprint is_decimal(13.5)\nprint is_decimal(13.6)\nprint is_decimal(13.7)\nprint is_decimal(13.8)\nprint is_decimal(13.9)\nprint is_decimal(14)\nprint is_decimal(14.1)\nprint is_decimal(14.2)\nprint is_decimal(14.3)\nprint is_decimal(14.4)\nprint is_decimal(14.5)\nprint is_decimal(14.6)\nprint is_decimal(14.7)\nprint is_decimal(14.8)\nprint is_decimal(14.9)\nprint is_decimal(15)\nprint is_decimal(15.1)\nprint is_decimal(15.2)\nprint is_decimal(15.3)\nprint is_decimal(15.4)\nprint is_decimal(15.5)\nprint is_decimal(15.6)\nprint is_decimal(15.7)\nprint is_decimal(15.8)\nprint is_decimal(15.9)\nprint is_decimal(16)\nprint is_decimal(16.1)\nprint is_decimal(16.2)\nprint is_decimal(16.3)\nprint is_decimal(16.4)\nprint is_decimal(16.5)\nprint is_decimal(16.6)\nprint is_decimal(16.7)\nprint is_decimal(16.8)\nprint is_decimal(16.9)\nprint is_decimal(17)\nprint is_decimal(17."
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num) == str:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i = 1\n    while i <= len(arr):\n        if arr.count(i) > 1:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    hash_table = {}\n    for i in range(len(arr)):\n        if arr[i] not in hash_table:\n            hash_table[arr[i]] = 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return True\n    if arr[0] == arr[1]:\n        return unique_Element(arr[1:])\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    if len(unique) == 1:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_list = set(arr)\n    if len(set_list) == 1:\n        return set_list\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i] == arr[j]):\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(1,len(arr)):\n        if(arr[i]==arr[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return 30\n    elif monthnum3 == 2:\n        return 29\n    elif monthnum3 == 3:\n        return 31\n    elif monthnum3 == 4:\n        return 30\n    elif monthnum3 == 5:\n        return 31\n    elif monthnum3 == 6:\n        return 30\n    elif monthnum3 == 7:\n        return 31\n    elif monthnum3 == 8:\n        return 31\n    elif monthnum3 == 9:\n        return 30\n    elif monthnum3 == 10:\n        return 31\n    elif monthnum3 == 11:\n        return 30\n    elif monthnum3 == 12:\n        return 31\n    else:\n        return None\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        print('Given month number is February, and it has 29 days')\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print('Given month number is February, and it has 30 days')\n    else:\n        print('Given month number is February, and it has 31 days')\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 12:\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 2:\n            if (year3 == 4 or year3 == 6 or year3 == 9 or year3 == 11):\n                if day3 >= 1 and day3 <= 29:\n                    return True\n                else:\n                    return False\n            elif year3 % 4 == 0 and year3 % 100 == 0 and year3 % 400 == 0:\n                if day3 >= 1 and day3 <= 29:\n                    return True\n                else:\n                    return False\n            else:\n                if day3 >= 1 and day3 <= 28:\n                    return True\n                else:\n                    return False\n        elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            if day3 >= 1 and day3 <= 31:\n                return True\n            else:\n                return False\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            if day3 >= 1 and day3 <= 30:\n                return True\n            else:\n                return False\n        else:\n            if day3 >= 1 and day3 <= 29:\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) not in [1,2,3,4,5,6,7,8,9,10,11,12]:\n        print 'Month must be a number between 1 and 12'\n        sys.exit()\n    else:\n        if int(monthnum3) not in [1,3,5,7,8,10,12]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array\n    arr.sort()\n    \n    # Keep track of min and max elements\n    min_elem = float('inf')\n    max_elem = float('-inf')\n    \n    for i in range(n):\n        min_elem = min(arr[i], min_elem)\n        max_elem = max(arr[i], max_elem)\n    \n    # Store the minimum difference\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return 0\n    arr.sort()\n    diff = arr[1]-arr[0]\n    i = 2\n    while i<n:\n        if arr[i]-arr[i-1]<diff:\n            diff = arr[i]-arr[i-1]\n        i += 1\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0 or n == 1:\n        return -1\n    elif n == 2:\n        return abs(arr[0] - arr[1])\n    else:\n        a = arr[0]\n        b = arr[1]\n        c = arr[2]\n        #x,y,z\n        if b - a < c - b:\n            b,a = a,b\n        if c - b < a - c:\n            a,b = b,a\n        if b - a < c - b:\n            b,a = a,b\n        if a - c < b - a:\n            a,c = c,a\n        if c - a < b - c:\n            a,c = c,a\n        if a - b < c - a:\n            a,b = b,a\n        return min(c - b, b - a, c - a)\n    \ndef find_min_diff_bits(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array using binary search. https://www.geeksforgeeks.org/find-minimum-difference-pair-array/\n    '''\n    if n == 0 or n == 1:\n        return -1\n    elif n == 2:\n        return abs(arr[0] - arr[1])\n    else:\n        a = arr[0]\n        b = arr[1]\n        c = arr[2]\n        #x,y,z\n        if b - a < c - b:\n            b,a = a,b\n        if c - b < a - c:\n            a,b = b,a\n        if b - a < c - b:\n            b,a = a,b\n        if a - c < b - a:\n            a,c = c,a\n        if c - a < b - c:\n            a,c = c,a\n        if a - b < c - a:\n            a,b = b,a\n        diff = 0\n        while diff!= c - b:\n            mid = (a + b) / 2\n            if mid == c:\n                return 0\n            elif mid < c:\n                a = mid\n                b = c\n            else:\n                b = mid\n                a = c\n            diff = c - b\n        return a - c\n    \ndef find_min_diff_with_sorting(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array using sorting. https://www.geeksforgeeks.org/find-minimum-difference-pair-array/\n    '''\n    if n == 0 or n == 1:\n        return -1\n    elif n == 2:\n        return abs(arr[0] - arr[1])\n    else:\n        arr.sort()\n        diff = arr[n-1] - arr[0]\n        for i in xrange(n - 2):\n            diff = min(diff, arr[i+1] - arr[i])\n        return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    minimum = 9999999999\n    for i in range(n-1): \n        if (arr[i+1]-arr[i]) < minimum: \n            minimum = arr[i+1] - arr[i] \n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0]\n    for i in range(n):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, abs(arr[i]-arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    for i in range(n-1):\n        diff = arr[i+1]-arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    arr.sort()\n    res = arr[-1] - arr[0]\n    for i in range(n-1):\n        res = min(res,arr[i+1] - arr[i])\n    return res\n    \ndef two_sum(arr, x):\n    '''\n    Write a python function to find the sum of two numbers in an array, such that the sum is equal to a given value. https://www.geeksforgeeks.org/sum-of-two-numbers-from-an-array/\n    '''\n    arr.sort()\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i] + arr[j] == x:\n            return True\n        elif arr[i] + arr[j] < x:\n            i += 1\n        else:\n            j -= 1\n    return False\n    \ndef longest_substring(arr,k):\n    '''\n    Write a python function to find the longest substring with at most k distinct characters. https://www.geeksforgeeks.org/longest-substring-with-at-most-k-distinct-characters/\n    '''\n    n = len(arr)\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    i = 0\n    j = 1\n    res = [arr[0],1]\n    while j < n:\n        if arr[j] not in d or d[arr[j]] < i:\n            res = [arr[i],j-i] if j-i > res[1] else res\n            i = j\n        j += 1\n    return res\n    \ndef count_decreasing_elements(arr):\n    '''\n    Write a python function to count the number of elements in an array that are less than or equal to their preceding element. https://www.geeksforgeeks.org/count-elements-less-than-or-equal-to-their-preceding-element/\n    '''\n    n = len(arr)\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    res = 0\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            res += (n-i-1)\n    return res\n    \ndef longest_palindrome(arr):\n    '''\n    Write a python function to find the length of the longest palindrome subsequnce in a given array. https://www.geeksforgeeks.org/longest-palindrome-subsequence-in-an-array/\n    '''\n    n = len(arr)\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    res = 1\n    start = 0\n    for i in range(n):\n        if i-res >= start:\n            end = i+res\n            if arr[i-res] == arr[i+res]:\n                res += 2\n            else:\n                break\n    return res\n    \ndef permutations(arr, r):\n    '''\n    Write a python function to compute all the permutations of a given string. https://www.geeksforgeeks.org/python-program-to-find-permutations-of-a-string/\n    '''\n    return perm(arr, r, 0)\ndef perm(arr, r, index):\n    if index == r:\n        print arr\n        return\n    for i in range(index, len(arr)):\n        arr[i], arr[index] = arr[index], arr[i]\n        perm(arr, r, index+1)\n        arr[i], arr[index] = arr[index], arr[i]\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #if arr is empty\n    if n == 0:\n        return float('inf')\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = 9999999999\n    \n    for i in range(0, n-1): \n        if (arr[i + 1] - arr[i]) < min_diff: \n            min_diff = arr[i + 1] - arr[i] \n            \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = sys.maxsize\n    for i in range(0,n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    #Initialize counter to 0\n    ctr = 0\n    \n    for i in range(len(str)):\n        if str[i].isdigit():\n            ctr += 1\n    \n    return ctr\n    \n    \nprint number_ctr('Python')\nprint number_ctr('GPA')\nprint number_ctr('Python2')\nprint number_ctr('Python2.0')\nprint number_ctr('Python2.1')\nprint number_ctr('Python3.1')\nprint number_ctr('Python3.2')\nprint number_ctr('Python3.3')\nprint number_ctr('Python3.4')\nprint number_ctr('Python3.5')\nprint number_ctr('Python3.6')\nprint number_ctr('Python3.7')\nprint number_ctr('Python3.8')\nprint number_ctr('Python3.9')\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n    "
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - str.count(' ')\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    i = 0\n    for i in str:\n        if i.isdigit():\n            i += 1\n        else:\n            pass\n    return i\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isdigit():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # Method 1\n    # str = str.replace(' ','')\n    # return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = [] \n    for i in range(1,n+1):\n        if i%2 == 0: \n            polite.append(i) \n    return polite[n-1] \ndef nth_polite_number(n):\n    if n == 1:\n        return 1\n    polite = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            polite.append(i)\n    return polite[n-1]\ndef reverse_number(n):\n    if n < 10:\n        return str(n)\n    rev_num = 0\n    while(n!= 0):\n        last_digit = n%10\n        rev_num = rev_num*10 + last_digit\n        n = n/10\n    return rev_num\ndef reverse_number_using_stack(n):\n    stack = []\n    while n:\n        stack.append(n%10)\n        n/=10\n    res = 0\n    for i in range(len(stack)):\n        res = res*10 + stack[i]\n    return res\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef all_prime_below(n):\n    list_of_primes = [2]\n    for i in range(3, n+1, 2):\n        if is_prime(i):\n            list_of_primes.append(i)\n    return list_of_primes\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i, j, k = 0, 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\ndef binary_search(arr, val):\n    l = 0\n    h = len(arr)\n    while l<=h:\n        mid = (l+h)//2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            l = mid + 1\n        else:\n            h = mid - 1\n    return -1\ndef find_count_of_continous_ones(arr):\n    max_ones = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            count += 1\n        else:\n            max_ones = max(max_ones, count)\n            count = 0\n    return max(max_ones, count)\ndef find_count_of_continous_ones_from_behind(arr):\n    max_ones = 0\n    count = 0\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == 1:\n            count += 1\n        else:\n            max_ones = max(max_ones, count)\n            count = 0\n    return max_ones\ndef min_count_to_make_bit_flip(n):\n    count = 0\n    while n!= 1:\n        if n%2 == 1:\n            n = n//2 + 1\n        else:\n            n = n//2\n        count += 1\n    return count\ndef count_rotations(str):\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 0\n    for i in range(len(str)-1):\n        if str[i]!= str[len(str)-1-i]:\n            return i\n    return len(str)\ndef count_rotations_using_dictionaries(str):\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        return 0 if str[0]!= str[1] else 1\n    left_dict = {}\n    right_dict = {}\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            continue\n        elif str[i] in left_dict:\n            left_dict[str[i]] += 1\n        else:\n            left_dict[str[i]] = 1\n        if str[len(str)-1-i] == str[len(str)-1-i-1]:\n            continue\n        elif str[len(str)-1-i] in right_dict:\n            right_dict[str[len(str)-1-i]] += 1\n        else:\n            right_dict[str[len(str)-1-i]] = 1\n    if len(left_dict) > 1:\n        return min(left_dict[left_dict.keys()[0]] + right_dict[right_dict.keys()[0]], 1)\n    else:\n        return 0\ndef count_rotations_without_changing_alphabet(str):\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        return 0 if str[0]!= str[1] else 1\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            return i\n    return len(str)\ndef kth_occurrence_of_string(str, n):\n    if len(str) == 0:\n        return -1\n    if len(str) == 1:\n        return 0\n    for i in range(len(str)-n+1):\n        if str[i:i+n] == str[i+n-1:i:-1]:\n            return i\n    return -1\ndef find_pivot(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1] and arr[i] < arr[i-1]:\n            return i\n    return -1\ndef next_permutation(arr):\n    n = len(arr)\n    if n == 1:\n        return arr\n    pivot = find_pivot(arr)\n    if pivot == -1:\n        arr.reverse()\n        return arr\n    for i in range(pivot+1, n):\n        if arr[i] > arr[pivot]:\n            arr[i], arr[pivot] = arr[pivot], arr[i]\n            break\n    arr[:pivot+1] = arr[:pivot+1][::-1]\n    return arr\ndef find_all_permutations(arr):\n    n = len(arr)\n    if n == 1:\n        return [arr]\n    res = []\n    for i in range(n):\n        new_perm = arr[:i] + arr[i+1:]\n        for perm in find_all_permutations(new_perm):\n            res.append(arr[i:i+1] + perm)\n    return res\ndef find_pythagorean_triplet(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            a = arr[i]\n            b = arr[j]\n            if a*a + b*b == arr[-1]*arr[-1]:\n                return [a, b, math.sqrt(a*a + b*b)]\n    return None\ndef maximum_continous_ones(arr):\n    max_ones = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            count += 1\n        els"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_list = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            polite_list.append(1)\n        else:\n            polite_list.append(0)\n    return polite_list\ndef is_polite2(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return [int(i%2) for i in range(1,n+1)]\ndef add_polite(list1,list2):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return [int(i%2) + int(j%2) for i,j in zip(list1,list2)]\ndef add_polite3(list1,list2):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return [int(i%2) + int(j%2) for i,j in zip(list1,list2) if i%2!= j%2]\ndef is_sorted(list1):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return [int(i%2) == int(j%2) for i,j in zip(list1,list1[1:])]\ndef is_pandigital(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital2(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital3(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital4(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital5(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital6(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital7(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital8(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital9(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital10(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital11(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital12(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital13(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital14(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital15(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital16(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '123456789'\n    return [int(i) for i in str(n) if i in s] == [1,2,3,4,5,6,7,8,9]\ndef is_pandigital17(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = '1234"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n %2 == 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a=6\n    b=1\n    m=5\n    if n<=1:\n        return True\n    for i in range(2,n):\n        if (a+b)%m==0:\n            a=6\n            b=1\n            m=5\n        else:\n            a=a**2+6\n            b=b**2+1\n            m=m+2\n    return (a+b)%m==1\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1 or n==2: \n        return 1\n    if n==3: \n        return 2\n    else:\n        return 2*(3*n-2) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite(n): \n        # Initialize the number of polite numbers \n        # with n = 1 \n        polite = 1\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (n + 2) % 3 == 0\ndef maximum_sum(a, b):\n    return a + b\ndef nth_polite_number(n):\n    a = 0\n    b = 1\n    for _ in xrange(n - 1):\n        a, b = b, max(b + a, b)\n    return b\ndef add_two_ints(a, b):\n    return a + b\ndef remove_vowels(s):\n    vowels = \"aeiou\"\n    return ''.join([c for c in s if c not in vowels])\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    return x\ndef get_num_leap_years(y1, y2):\n    '''\n    Given year1 and year2, return the number of leap years between them (including year1 and year2).\n    '''\n    return (y2 - y1)\ndef get_num_divisible(x, y):\n    '''\n    Given two integers x and y, return the number of integers between x and y (including x and y) that are divisible by y.\n    '''\n    return ((y + x) / y) * y\ndef is_palindrome(x):\n    if x < 0:\n        return False\n    else:\n        if str(x) == str(x)[::-1]:\n            return True\n        else:\n            return False\ndef is_anagram(x, y):\n    x = str(x)\n    y = str(y)\n    return sorted(x) == sorted(y)\ndef is_inclusive_range(x, y, z):\n    if x <= y and x <= z:\n        return True\n    elif y <= x and y <= z:\n        return True\n    elif z <= x and z <= y:\n        return True\n    else:\n        return False\ndef reverse_string(x):\n    x = str(x)\n    return x[::-1]\ndef roman_to_int(x):\n    '''\n    Given a string in Roman numeral format, return the corresponding integer.\n    '''\n    m = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    if len(x) == 1:\n        return m[x[0]]\n    else:\n        i = len(x) - 1\n        a = m[x[i]]\n        if i > 0:\n            if m[x[i - 1]] < m[x[i]]:\n                a = -a\n        return a + roman_to_int(x[:i - 1])\ndef c2f(x):\n    return (x * 1.8) + 32\ndef f2c(x):\n    return (x - 32) / 1.8\ndef get_modular_exponent(x, y):\n    '''\n    x and y are nonnegative ints\n    x and y are in the range [0, 2^32 - 1]\n    x^y is a nonnegative int\n    return int\n    '''\n    bit_length = 32\n    mask = (1 << bit_length) - 1\n    x = x & mask\n    y = y & mask\n    count = 0\n    while y > 0:\n        if y & 1 == 1:\n            x = (x * x) % 1000000007\n            count += 1\n        y >>= 1\n    return x, count\ndef check_power_of_two(n):\n    return (n & (n - 1) == 0) and n!= 0\ndef test_power_of_two():\n    for i in range(100):\n        if not check_power_of_two(i):\n            print \"Failed for\", i\n            return\n    print \"Passed\"\ndef bfs(graph, start):\n    queue = [start]\n    visited = set([start])\n    while len(queue) > 0:\n        n = queue.pop(0)\n        print n,\n        for i in graph[n]:\n            if i not in visited:\n                queue.append(i)\n                visited.add(i)\ndef bfs_paths(graph, start, goal):\n    queue = [(start, [start])]\n    visited = set([start])\n    while len(queue) > 0:\n        (vertex, path) = queue.pop(0)\n        for i in graph[vertex]:\n            if i == goal:\n                yield path + [i]\n            elif i not in visited:\n                visited.add(i)\n                queue.append((i, path + [i]))\ndef bellman_ford(graph, start):\n    dist = {}\n    pred = {}\n    n = len(graph)\n    for i in xrange(n):\n        dist[i] = float('inf')\n    dist[start] = 0\n    pred[start] = None\n    for i in xrange(n - 1):\n        for v in graph:\n            for u, w in graph[v]:\n                if dist[v] + w < dist[u]:\n                    dist[u] = dist[v] + w\n                    pred[u] = v\n    for v in graph:\n        for u, w in graph[v]:\n            if dist[v] + w < dist[u]:\n                return False\n    return True\ndef matrix_multiply(A, B):\n    '''\n    Multiply two matrices A and B.\n    A and B must be two dimensional matrices of the same dimension.\n    '''\n    return [[sum([A[i][k] * B[k][j] for k in range(len(A))]) for j in range(len(B[0]))] for i in range(len(A))]\ndef find_best_sum_of_n_numbers(n, numbers):\n    return max([sum(numbers[i:n]) for i in xrange(len(numbers) - n + 1)])\ndef find_best_n_sum_of_n_numbers(n, numbers):\n    return max([sum(numbers[i:n]) for i in xrange(len(numbers) - n + 1)])\ndef print_number_of_divisors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return len(factors)\ndef find_divisor_sum(n):\n    div = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div += i\n    return div\ndef find_all_primes_between(x, y):\n    primes = []\n    for i in range(x, y + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef get_prime_factors(x):\n    factors = []\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            factors.append(i)\n            factors.append(x / i)\n    return factors\ndef find_prime_factors(n):\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_divisor, 2):\n        if n % i == 0:\n            return False\n    return True\ndef count_primes(n):\n    prime_count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            prime_count += 1\n    return prime_count\ndef get_next_prime(n):\n    while True:\n        n += 1\n        if is_prime(n):\n            return n\ndef is_perfect_square(n):\n    return int(math.sqrt(n)) ** 2 == n\ndef get_perfect"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_inner(x, n):\n        if n == 1:\n            return True\n        if n == 2:\n            return x % 2 == 0\n        return is_polite(x, n - 1) and (n % 2 == 0 or x % n == 0)\n    \n    num = 1\n    while not is_polite_inner(num, n):\n        num += 1\n    return num\ndef binary_search(x, array):\n    '''\n    Return true if x is in array\n    '''\n    n = len(array)\n    left = 0\n    right = n - 1\n    mid = (left + right) / 2\n    while left <= right:\n        if array[mid] == x:\n            return True\n        if array[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n        mid = (left + right) / 2\n    return False\ndef distance(p1, p2):\n    '''\n    Return the distance between two points.\n    '''\n    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\ndef longest_common_prefix(s):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    if len(s) == 0:\n        return \"\"\n    result = s[0]\n    for i in range(1, len(s)):\n        while not s[i].startswith(result):\n            result = result[0:len(result) - 1]\n            if len(result) == 0:\n                return \"\"\n    return result\ndef longest_common_prefix_recursive(s):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s[0]\n    else:\n        return longest_common_prefix(s[1:])\ndef is_palindrome(x):\n    '''\n    Write a function that checks if a number is a palindrome.\n    '''\n    if x < 0:\n        return False\n    x_str = str(x)\n    if x_str == x_str[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_recursive(x):\n    '''\n    Write a function that checks if a number is a palindrome.\n    '''\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 10 == 0:\n        return is_palindrome_recursive(x // 10)\n    if x % 10!= 0:\n        return is_palindrome_recursive(x // 10) and (x % 10 == x // 10 % 10)\ndef get_palidromes(n):\n    '''\n    Write a function that returns the number of the first n palidromes.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    count = 0\n    limit = n / 2\n    i = 1\n    while i <= limit:\n        count += get_palidromes(i) * get_palidromes(n - i)\n        i += 1\n    return count\ndef get_palidromes_recursive(n):\n    '''\n    Write a function that returns the number of the first n palidromes.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    return get_palidromes_recursive(n - 1) + get_palidromes_recursive(n - 2)\ndef count_inversions(a):\n    '''\n    Write a function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] > a[j]:\n                inversions += 1\n    return inversions\ndef count_inversions_recursive(a):\n    '''\n    Write a function to count inversions in an array.\n    '''\n    inversions = 0\n    if len(a) < 2:\n        return 0\n    mid = len(a) / 2\n    inversions += count_inversions(a[:mid])\n    inversions += count_inversions(a[mid:])\n    return inversions\ndef find_min_max(arr):\n    '''\n    Write a function to find the minimum and maximum value in an array.\n    '''\n    if len(arr) == 0:\n        return (0, 0)\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return (min_val, max_val)\ndef find_min_max_recursive(arr):\n    '''\n    Write a function to find the minimum and maximum value in an array.\n    '''\n    if len(arr) == 0:\n        return (0, 0)\n    if len(arr) == 1:\n        return (arr[0], arr[0])\n    if len(arr) == 2:\n        return (arr[0], arr[1])\n    mid = len(arr) / 2\n    min_left, max_left = find_min_max_recursive(arr[:mid])\n    min_right, max_right = find_min_max_recursive(arr[mid:])\n    return (min(min_left, min_right), max(max_left, max_right))\ndef longest_consec_ones(arr, k):\n    '''\n    Write a function to find the longest arr[i] - arr[i + k] == k consecutive 1's.\n    '''\n    if len(arr) < k:\n        return 0\n    if k == 1:\n        for i in range(len(arr) - 1):\n            if arr[i] == 1 and arr[i + 1] == 1:\n                return i - 1\n        return len(arr) - 1\n    if arr[0] == 1:\n        for i in range(1, len(arr)):\n            if arr[i]!= 1:\n                return i - 1\n        return len(arr) - 1\n    longest = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] == 1:\n            count = 1\n            while i + count < len(arr) and arr[i + count] == 1:\n                count += 1\n            if count >= k:\n                longest = max(longest, count)\n        i += 1\n    return longest\ndef longest_consec_ones_recursive(arr, k):\n    '''\n    Write a function to find the longest arr[i] - arr[i + k] == k consecutive 1's.\n    '''\n    if len(arr) < k:\n        return 0\n    if k == 1:\n        for i in range(len(arr) - 1):\n            if arr[i] == 1 and arr[i + 1] == 1:\n                return i - 1\n        return len(arr) - 1\n    if arr[0] == 1:\n        for i in range(1, len(arr)):\n            if arr[i]!= 1:\n                return i - 1\n        return len(arr) - 1\n    return max(longest_consec_ones_recursive(arr[1:], k), longest_consec_ones_recursive(arr[1:], k) + 1)\ndef find_rotation_point(arr):\n    '''\n    Write a function to find the point where the array becomes the longest\n    sub-array. If there are more than one, return the first one.\n    '''\n    if len(arr) < 2:\n        return 0\n    if arr["
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # step 1: calculate all prime numbers in range of 1 to n\n    prime = []\n    for i in range(2, n+1):\n        if i not in prime:\n            prime.append(i)\n        j = 2\n        while j <= math.sqrt(i):\n            if i % j == 0:\n                break\n            j += 1\n        if j > math.sqrt(i):\n            prime.append(i)\n    # print(prime)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,92"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append(l1[i]+1, l1[i+1])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return [(l1[0],l1[0])]\n    else:\n        return [ (l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out = []\n    for i, e1 in enumerate(l1):\n        for j, e2 in enumerate(l1[i + 1:]):\n            out.append((e1, e2))\n    return out\n    \ndef min_bst_depth(node):\n    if node is None:\n        return 0\n    left = min_bst_depth(node.left)\n    right = min_bst_depth(node.right)\n    return 1 + min(left, right)\n    \ndef min_bst_depth_recursive(node):\n    if node is None:\n        return 0\n    left = min_bst_depth_recursive(node.left)\n    right = min_bst_depth_recursive(node.right)\n    return 1 + min(left, right)\n    \ndef min_bst_depth_recursive_2(node, depth):\n    if node is None:\n        return depth\n    left = min_bst_depth_recursive_2(node.left, depth + 1)\n    right = min_bst_depth_recursive_2(node.right, depth + 1)\n    return min(left, right)\n    \ndef min_bst_depth_recursive_3(node):\n    def helper(node, depth):\n        if node is None:\n            return depth\n        left = helper(node.left, depth + 1)\n        right = helper(node.right, depth + 1)\n        return min(left, right)\n    return helper(node, 0)\n    \ndef min_bst_depth_recursive_4(node):\n    def helper(node, depth):\n        if node is None:\n            return depth\n        left = helper(node.left, depth + 1)\n        right = helper(node.right, depth + 1)\n        return min(left, right)\n    return helper(node, 0)\n    \ndef min_bst_depth_recursive_5(node, depth):\n    if node is None:\n        return depth\n    left = min_bst_depth_recursive_5(node.left, depth + 1)\n    right = min_bst_depth_recursive_5(node.right, depth + 1)\n    return min(left, right)\n    \ndef min_bst_depth_recursive_6(node, depth):\n    if node is None:\n        return depth\n    left = min_bst_depth_recursive_6(node.left, depth + 1)\n    right = min_bst_depth_recursive_6(node.right, depth + 1)\n    return min(left, right)\n    \ndef is_bst_bfs(node):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    if node is None:\n        return True\n    queue = [node]\n    while len(queue) > 0:\n        node = queue.pop(0)\n        if node.left and node.left.val > node.val:\n            return False\n        if node.right and node.right.val < node.val:\n            return False\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n    return True\n    \ndef is_bst_dfs(node):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    if node is None:\n        return True\n    if node.left and node.left.val > node.val:\n        return False\n    if node.right and node.right.val < node.val:\n        return False\n    return is_bst_dfs(node.left) and is_bst_dfs(node.right)\n    \ndef is_bst_recursive(node, min_val, max_val):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    if node is None:\n        return True\n    if node.val > max_val or node.val < min_val:\n        return False\n    if node.left and node.left.val > node.val:\n        return False\n    if node.right and node.right.val < node.val:\n        return False\n    return is_bst_recursive(node.left, min_val, node.val) and is_bst_recursive(node.right, node.val, max_val)\n    \ndef is_bst_recursive_2(node, min_val, max_val):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    if node is None:\n        return True\n    if node.val > max_val or node.val < min_val:\n        return False\n    return is_bst_recursive_2(node.left, min_val, node.val) and is_bst_recursive_2(node.right, node.val, max_val)\n    \ndef is_bst_recursive_3(node, min_val, max_val):\n    def helper(node, min_val, max_val):\n        if node is None:\n            return True\n        if node.val > max_val or node.val < min_val:\n            return False\n        return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n    return helper(node, min_val, max_val)\n    \ndef is_bst_recursive_4(node, min_val, max_val):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    def helper(node, min_val, max_val):\n        if node is None:\n            return True\n        if node.val > max_val or node.val < min_val:\n            return False\n        return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n    return helper(node, min_val, max_val)\n    \ndef is_bst_recursive_5(node, min_val, max_val):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    def helper(node, min_val, max_val):\n        if node is None:\n            return True\n        if node.val > max_val or node.val < min_val:\n            return False\n        return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n    return helper(node, min_val, max_val)\n    \ndef is_bst_recursive_6(node, min_val, max_val):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    def helper(node, min_val, max_val):\n        if node is None:\n            return True\n        if node.val > max_val or node.val < min_val:\n            return False\n        return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n    return helper(node, min_val, max_val)\n    \ndef is_bst_recursive_7(node):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    def helper(node, min_val, max_val):\n        if node is None:\n            return True\n        if node.val > max_val or node.val < min_val:\n            return False\n        return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n    return helper(node, -float('inf'), float('inf'))\n    \ndef is_bst_recursive_8(node, min_val, max_val):\n    '''\n    Given a binary tree, check whether it is a binary search tree (BST).\n    '''\n    def helper(node, min_val, max_val):\n        if node is None:\n            return True\n        if node.val > max_val or node.val < min_val:\n            return False\n    "
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        pairs.append([l1[i], l1[i + 1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    l2 = l1[:]\n    l2.sort()\n    for i in range(len(l2)-1):\n        if l2[i]+1 == l2[i+1]:\n            result.append([l2[i], l2[i+1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    for i in xrange(len(l1)):\n        if i < len(l1)-1:\n            res.append((l1[i], l1[i+1]))\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if l1 == []:\n        return []\n    else:\n        return [[l1[0], l1[1]]] + pair_wise(l1[1:])\n    "
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in xrange(len(arr)-1):\n        for j in xrange(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # arr = list(set(arr))\n    # arr.sort()\n    print(arr)\n    cache = {}\n    for item in arr:\n        if item in cache:\n            cache[item] += 1\n        else:\n            cache[item] = 1\n    print(cache)\n    pairs = 0\n    for item in cache:\n        if sum - item in cache:\n            if sum - item == item:\n                pairs += cache[item]\n            else:\n                pairs += cache[item] * cache[sum - item]\n    print(pairs)\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                result += 1\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    m = {}\n    for i in arr:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    count = 0\n    for i in m:\n        if sum-i in m:\n            count += m[i] * m[sum-i]\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return arr.count(sum)\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff2(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff3(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff4(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff5(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff6(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff7(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff8(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff9(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff10(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff11(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff12(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff13(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff14(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff15(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff16(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff17(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff18(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff19(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff20(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff21(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff22(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff23(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff24(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff25(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff26(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff27(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff28(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff29(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff30(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff31(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff32(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff33(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\n    \ndef Diff34(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\ndef SortString(li):\n    '''\n    Write a python function to sort a list of string.\n    '''\n    li.sort()\n    return li\ndef Swap(li):\n    '''\n    Write a python function to swap the elements of a list.\n    '''\n    x = li[0]\n    li[0] = li[1]\n    li[1] = x\n    return li\ndef Append(li,item):\n    '''\n    Write a python function to append an item to a list.\n    '''\n    li.append(item)\n    return li\ndef Remove(li,item):\n    '''\n    Write a python function to remove a item from a list.\n    '''\n    li.remove(item)\n    return li\ndef Reverse(li):\n    '''\n    Write a python function to reverse a list.\n    '''\n    li.reverse()\n    return li\ndef Insert(li,index,item):\n    '''\n    Write a python function to insert an item to a list.\n    '''\n    li.insert(index,item)\n    return li\ndef Index(li,item):\n    '''\n    Write a python function to return the index of a given item in a list.\n    '''\n    return li.index(item)\ndef Count(li,item):\n    '''\n    Write a python function to return the count of a given item in a list.\n    '''\n    return li.count(item)\ndef RemoveAt(li,index):\n    '''\n    Write a python function to remove a given item at a given index.\n    '''\n    li.pop(index)\n    return li\ndef Plus(li):\n    '''\n    Write a python function to add all the items in a list.\n    '''\n    li = sum(li)\n    return li\ndef Slice(li,index):\n    '''\n    Write a python function to return a slice of a list.\n    '''\n    return li[index:]\ndef Max(li):\n    '''\n    Write a python function to return the maximum value in a list.\n    '''\n    return max(li)\ndef Min(li):\n    '''\n    Write a python function to return the minimum value in a list.\n    '''\n    return min(li)\ndef Tuple(li):\n    '''\n    Write a python function to return a tuple from a list.\n    '''\n    return tuple(li)\ndef Length(li):\n    '''\n    Write a python function to return the length of a list.\n    '''\n    return len(li)\ndef Map(li,func):\n    '''\n    Write a python function to map a function to all the items of a list.\n    '''\n    return map(func,li)\ndef Filter(li,func):\n    '''\n    Write a python function to filter a list by a given function.\n    '''\n    return filter(func,li)\ndef Reduce(li,func):\n    '''\n    Write a python function to reduce a list by a given function.\n    '''\n    return reduce(func,li)\ndef Reject(li,func):\n    '''\n    Write a python function to remove items in a list by a given function.\n    '''\n    return list(filterfalse(func,li))\ndef Order(li):\n    '''\n    Write a python function to sort a list of strings.\n    '''\n    return sorted(li)\ndef IndexOf(li,item):\n    '''\n    Write a python function to return the index of a given item in a list.\n    '''\n    return li.index(item)\ndef AppendIf(li,item):\n    '''\n    Write a python function to append an item to a list only if the item is not already in the list.\n    '''\n    if item not in li:\n        li.append(item)\n    return li\ndef PrependIf(li,item):\n    '''\n    Write a python function to prepend an item to a list only if the item is not already in the list.\n    '''\n    if item not in li:\n        li.insert(0,item)\n    return li\ndef PrependIfNot(li,item):\n    '''\n    Write a python function to prepend an item to a list only if the item is not already in the list.\n    '''\n    if item not in li:\n        li.insert(0,item)\n    return li\ndef Extend(li,li2):\n    '''\n    Write a python function to extend a list with another list.\n    '''\n    li.extend(li2)\n    return li\ndef Concat(li,li2):\n    '''\n    Write a python function to concatenate two lists.\n    '''\n    li.extend(li2)\n    return li\ndef ReverseString(li):\n    '''\n    Write a python function to reverse a string.\n    '''\n    li = \"\".join(li)\n    li = li[::-1]\n    return li\ndef Set(li):\n    '''\n    Write a python function to convert a list to a set.\n    '''\n    return set(li)\ndef Round(li,num):\n    '''\n    Write a python function to round a list.\n    '''\n    li = [round(num,3) for num in li]\n    return li\ndef Slice(li,start,stop):\n    '''\n    Write a python function to return a slice of a list.\n    '''\n    return li[start:stop]\ndef Join(li,sep):\n    '''\n    Write a python function to join a list with a separator.\n    '''\n    return sep.join(li)\ndef Sublist(li,start,stop):\n    '''\n    Write a python function to return a sublist of a list.\n    '''\n    return li[start:stop]\ndef AddToList(li,num):\n    '''\n    Write a python function to add a number to a list.\n    '''\n    li.append(num)\n    return li\ndef RemoveFromList(li,num):\n    '''\n    Write a python function to remove a number from a list.\n    '''\n    li.remove(num)\n    return li\ndef MakeList(item,n):\n    '''\n    Write a python function to make a list of a given number of items.\n    '''\n    li = []\n    for i in range(n):\n        li.append(item)\n    return li\ndef MaxInList(li):\n    '''\n    Write a python function to return the maximum value of a list.\n    '''\n    return max(li)\ndef MinInList(li):\n    '''\n    Write a python function to return the minimum value of a list.\n    '''\n    return min(li)\ndef LengthInList(li):\n    '''\n    Write a python function to return the length of a list.\n    '''\n    return len(li)\ndef ReverseInList(li):\n    '''\n    Write a python function to reverse a list.\n    '''\n    li.reverse()\n    return li\ndef MinInList(li):\n    '''\n    Write a python function to return the minimum value of a list.\n    '''\n    return min(li)\ndef MaxInList(li):\n    '''\n    Write a python function to return the maximum value of a list.\n    '''\n    return max(li)\ndef Sum(li):\n    '''\n    Write a python function to return the sum of a list.\n    '''\n    return sum(li)\ndef SortInList(li):\n    '''\n    Write a python function to sort a list.\n    '''\n    li = sorted(li)\n    return li\ndef RemoveFromList(li,num):\n    '''\n    Write a python function to remove a number from a list.\n    '''\n    li.remove(num)\n    return li\ndef RemoveDuplicates(li):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    li = list(set(li))\n    return li\ndef RemoveAllDuplicates(li):\n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    li = list(set(li))\n    return li\ndef Mean(li):\n    '''\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\ndef main():\n    li1 = [1,2,3,4,5,6]\n    li2 = [1,2,3,4,5,6]\n    print(Diff(li1,li2))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1 : \n        return 0\n    else : \n        return 4*pow(n,4) - odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # base case\n    if n == 1 : \n        return 0\n    if n == 2 :\n        return 1\n    else : \n        return (n-2) + odd_num_sum(n-2)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return ((1+(2*n+1)*n)*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x ** 4 for x in range(1, n, 2) if x % 2)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i*i*i*i)\n    return total\n    \nprint(odd_num_sum(20))"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    res = n * (n + 1) * (2 * n + 1) / 6\n    return res\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum += i**4\n    return sum\nprint odd_num_sum(5)"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n < 1) :\n        return 0\n    else :\n        return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n) : \n        s += i**4 \n    return s\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '':\n        return True\n    stack = []\n    for i in range(0,len(exp)):\n        if exp[i] == '(' or exp[i] == '[' or exp[i] == '{':\n            stack.append(exp[i])\n        if exp[i] == ')' or exp[i] == ']' or exp[i] == '}':\n            if stack[-1] == '(' and exp[i] == ')':\n                stack.pop()\n            elif stack[-1] == '[' and exp[i] == ']':\n                stack.pop()\n            elif stack[-1] == '{' and exp[i] == '}':\n                stack.pop()\n            else:\n                stack.append(exp[i])\n    if stack == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            if i == ')':\n                if stack.pop()!= '(':\n                    return False\n            if i == '}':\n                if stack.pop()!= '{':\n                    return False\n            if i == ']':\n                if stack.pop()!= '[':\n                    return False\n    if stack:\n        return False\n    else:\n        return True\ndef balanced_parentheses(string):\n    stack = []\n    for s in string:\n        if s in ['(', '{', '[']:\n            stack.append(s)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and s!= ')') or (top == '{' and s!= '}') or (top == '[' and s!= ']'):\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in '(':\n            stack.append(i)\n        elif i in ')':\n            if len(stack) == 0:\n                return False\n            else:\n                if stack.pop()!= '(':\n                    return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_recur(exp, start, end, stack):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if start == end:\n        return stack == []\n    if start > end:\n        return False\n    c = exp[start]\n    if c in ['(', '{', '[']:\n        stack.append(c)\n    else:\n        if not stack:\n            return False\n        if c == ')' and stack.pop()!= '(':\n            return False\n        if c == '}' and stack.pop()!= '{':\n            return False\n        if c == ']' and stack.pop()!= '[':\n            return False\n    return check_expression_recur(exp, start+1, end, stack)\ndef check_expression_stack(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_deque(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_iter(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_re(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_bracket(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    bracket_stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            bracket_stack.append(char)\n        else:\n            if not bracket_stack:\n                return False\n            c = bracket_stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if bracket_stack:\n        return False\n    return True\ndef check_expression_stack(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_deque(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_iter(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_re(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in [\"(\",\"{\",\"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            c = stack.pop()\n            if c == \"(\" and char!= \")\":\n                return False\n            elif c == \"{\" and char!= \"}\":\n                return False\n            elif c == \"[\" and char!= \"]\":\n                return False\n    if stack:\n        return False\n    return True\ndef check_expression_bracket(exp):"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in {'{', '}', '(', ')'}:\n            if char == '{' and stack and stack[-1] == '{':\n                stack.pop()\n            elif char == '}' and stack and stack[-1] == '}':\n                stack.pop()\n            elif char == '(' and stack and stack[-1] == '(':\n                stack.pop()\n            elif char == ')' and stack and stack[-1] == ')':\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\ndef is_valid_parenthese(s):\n    '''\n    Given a string containing braces, write a function to check if the braces are balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    mapping = {'{': '}', '(': ')', '[': ']'}\n    for char in s:\n        if char in {'{', '(', '['}:\n            stack.append(char)\n        elif char in {'}', ')', ']'}:\n            if not stack:\n                return False\n            elif mapping[stack.pop()]!= char:\n                return False\n    return True if not stack else False\ndef maximum_of_three(a, b, c):\n    '''\n    Given three integers, find the maximum of them. https://www.geeksforgeeks.org/maximum-of-three-numbers/\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef get_digits(num):\n    '''\n    Write a function to convert a number to digits list. https://www.geeksforgeeks.org/convert-a-number-to-digits-list/\n    '''\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num //= 10\n    return digits\ndef find_nth_fibonacci_number(n):\n    '''\n    Write a function to find the nth Fibonacci number. https://www.geeksforgeeks.org/nth-fibonacci-number/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    first, second = 0, 1\n    for i in range(1, n):\n        first, second = second, first + second\n    return second\ndef find_the_second_largest_number_in_array(numbers):\n    '''\n    Write a function to find the second largest number in an unsorted array. https://www.geeksforgeeks.org/second-largest-number-unsorted-array/\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return max(numbers)\n    elif len(numbers) > 2:\n        numbers.sort()\n        return numbers[-2]\ndef find_the_second_largest_number_in_array_using_min_max_function(numbers):\n    '''\n    Write a function to find the second largest number in an unsorted array. https://www.geeksforgeeks.org/second-largest-number-unsorted-array/\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return max(numbers)\n    elif len(numbers) > 2:\n        return max(numbers)\n    else:\n        return None\ndef insert_delete_getRandom_number(arr):\n    '''\n    Write a function to insert a new element into a sorted array and delete the element if it is in the array. https://www.geeksforgeeks.org/insert-a-number-into-a-sorted-array/\n    '''\n    # arr = [1, 2, 5, 6, 7, 8, 10]\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    arr.append(10)\n    arr.sort()\n    # print(arr)\n    arr.remove(10)\n    arr.insert(3, 7)\n    # print(arr)\n    return arr\ndef find_n_th_smallest_number(arr, n):\n    '''\n    Write a function to find the nth smallest number in an unsorted array. https://www.geeksforgeeks.org/nth-smallest-number-unsorted-array/\n    '''\n    arr.sort()\n    return arr[n - 1]\ndef find_the_smallest_number_in_the_list(numbers):\n    '''\n    Write a function to find the smallest number in an unsorted array. https://www.geeksforgeeks.org/find-smallest-number-unsorted-array/\n    '''\n    return min(numbers)\ndef find_the_smallest_number_in_the_list_using_min_max_function(numbers):\n    '''\n    Write a function to find the smallest number in an unsorted array. https://www.geeksforgeeks.org/find-smallest-number-unsorted-array/\n    '''\n    return max(numbers)\ndef get_subarray_sum_minimum(arr):\n    '''\n    Write a function to find the subarray with minimum sum. https://www.geeksforgeeks.org/find-subarray-with-minimum-sum/\n    '''\n    current_sum = 0\n    min_sum = arr[0] + arr[1]\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if min_sum > current_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\ndef get_subarray_with_maximum_product(arr):\n    '''\n    Write a function to find the subarray with maximum product. https://www.geeksforgeeks.org/find-subarray-with-maximum-product-in-an-array/\n    '''\n    current_product = arr[0] * arr[1]\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = 0\n        if current_product > max_product:\n            max_product = current_product\n    return max_product\ndef rotate_matrix(mat):\n    '''\n    Write a function to rotate a matrix 90 degree clockwise. https://www.geeksforgeeks.org/rotate-matrix-by-90-degree/\n    '''\n    n = len(mat)\n    for layer in range(n // 2):\n        first = layer\n        last = n - 1 - layer\n        for i in range(first, last):\n            # save top\n            top = mat[layer][i]\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for s in exp:\n        if s in '({[':\n            stack.append(s)\n        elif s == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            stack.pop()\n        elif s == '}':\n            if not stack or stack[-1]!= '{':\n                return False\n            stack.pop()\n        elif s == ']':\n            if not stack or stack[-1]!= '[':\n                return False\n            stack.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    paren_stack = deque()\n    for i in exp:\n        if i == '(':\n            paren_stack.append(i)\n        elif i == ')':\n            if not paren_stack:\n                return False\n            paren_stack.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    bracket_map = {'}':'{', ')':'(', ']':'['}\n    stack = []\n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or bracket_map[char]!= stack.pop():\n                return False\n        else:\n            return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    print exp\n    q = deque()\n    for i in exp:\n        if i == '(':\n            q.append(i)\n        elif i == ')':\n            if len(q) == 0:\n                return False\n            else:\n                q.pop()\n    if len(q) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ch in exp:\n        if ch == '(' or ch == '[' or ch == '{':\n            stack.append(ch)\n        elif ch == ')' or ch == ']' or ch == '}':\n            if stack == []:\n                return False\n            else:\n                current = stack.pop()\n                if (current == '(' and ch == ')') or (current == '[' and ch == ']') or (current == '{' and ch == '}'):\n                    continue\n                else:\n                    return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([s for s in test_str.split() if len(s)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split()\n    new_str = \"\"\n    for i in range(0, len(str_list)):\n        if len(str_list[i])!= K:\n            new_str = new_str + \" \" + str_list[i]\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split(' ')\n    word_dict = {}\n    for word in str_list:\n        if len(word) == K:\n            if word not in word_dict.keys():\n                word_dict[word] = 1\n    return''.join(word_dict.keys())\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    for word in test_str.split(' '):\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == \"\":\n        return \"\"\n    list_str = test_str.split()\n    list_len = [len(i) for i in list_str]\n    max_len = max(list_len)\n    for i in range(len(list_str)):\n        if len(list_str[i]) == max_len:\n            list_str[i] = \"\"\n    return \" \".join(list_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    ans = ''\n    length = len(test_str)\n    for i in range(length):\n        if test_str[i] =='':\n            continue\n        else:\n            temp = ''\n            for j in range(K):\n                if i+j >= length:\n                    break\n                else:\n                    temp += test_str[i+j]\n            ans += temp\n            ans +=''\n    return ans[:-1]\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = test_str.split(' ')\n    print new_str\n    return''.join(new_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for i in range(len(test_str)):\n        if i+K <= len(test_str):\n            res.append(test_str[i:i+K])\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_len = len(test_str)\n    if str_len <= K:\n        return test_str\n    \n    elif K == 1:\n        return \"\".join(test_str.split())\n    \n    else:\n        word_list = test_str.split()\n        return \" \".join(filter(lambda x: len(x) == K, word_list))\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i=0\n    j=0\n    m=len(text)\n    n=len(pattern)\n    k=0\n    p=0\n    count=0\n    while i<m:\n        if pattern[k]==text[i]:\n            k+=1\n            i+=1\n        elif pattern[k]!=text[i]:\n            p=i\n            break\n        else:\n            i+=1\n    if k==n:\n        return p-k+1,p\n    else:\n        return None\n        \n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(\"pattern: \", pattern)\n    print(\"text: \", text)\n    s=len(pattern)\n    w=len(text)\n    for i in range(0,w-s+1):\n        s_idx=i\n        e_idx=i+s\n        if pattern==text[s_idx:e_idx]:\n            print(\"idx: \", i)\n            return True\n    return False\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern,text):\n        return re.search(pattern,text).group()\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # words = re.findall('\\w+',text)\n    # for word in words:\n    #     if word == pattern:\n    #         print \"pattern found: \", word\n    #         print \"occurance: \",text.count(word)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=0\n    pos=[]\n    for i in range(0,len(text)):\n        if text[i:].startswith(pattern):\n            occurance+=1\n            pos.append(i)\n    return (occurance,pos)\n    \ndef get_key(val,my_dict):\n    for key, value in my_dict.items():\n        if val == value:\n            return key\n    return \"key doesn't exist\"\n    \ndef merge_dicts(dict_list):\n    '''\n    Write a function to merge two dictionaries into one.\n    '''\n    merged={}\n    for dict in dict_list:\n        merged.update(dict)\n    return merged\n    \ndef find_most_common(lst):\n    '''\n    Write a function to find the most common element in a list\n    '''\n    count_dict = {}\n    for item in lst:\n        count_dict.setdefault(item,0)\n        count_dict[item] += 1\n    max_item = \"\"\n    max_count = 0\n    for k,v in count_dict.iteritems():\n        if v > max_count:\n            max_count = v\n            max_item = k\n    return max_item\n    \ndef filter_strings(strings,filter_string):\n    '''\n    Write a function to filter the strings that contain the given filter_string from the list of strings.\n    '''\n    filtered_strings=[]\n    for string in strings:\n        if filter_string in string:\n            filtered_strings.append(string)\n    return filtered_strings\n    \ndef remove_duplicates(lst):\n    '''\n    Write a function to remove the duplicates from the list.\n    '''\n    return list(set(lst))\n    \ndef str_to_bool(string):\n    '''\n    Write a function to convert the string to boolean\n    '''\n    if string=='True':\n        return True\n    return False\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if num < 1:\n        return False\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n    \ndef get_largest_prime_factor(num):\n    '''\n    Write a function to return the largest prime factor of a number.\n    '''\n    largest_prime=0\n    i=2\n    while num>1:\n        while num%i==0 and i<num:\n            largest_prime=i\n            num/=i\n        i+=1\n    return largest_prime\n    \ndef get_smallest_prime_factor(num):\n    '''\n    Write a function to return the smallest prime factor of a number.\n    '''\n    i=2\n    while num>1:\n        if num%i==0:\n            num/=i\n            return i\n        i+=1\n    return num\n    \ndef get_perfect_number(num):\n    '''\n    Write a function to check if a number is perfect. A number is perfect if the sum of divisors is equal to the number.\n    '''\n    total=0\n    for i in range(1,num):\n        if num%i==0:\n            total+=i\n    return total==num\n    \ndef get_perfect_squares(num):\n    '''\n    Write a function to get the perfect square numbers up to a given number\n    '''\n    perfect_squares=[]\n    i=1\n    while i*i<=num:\n        if i*i==num:\n            perfect_squares.append(i*i)\n        i+=1\n    return perfect_squares\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string==string[::-1]\n    \ndef get_alphabetical_position(char):\n    '''\n    Write a function to get the alphabetical position of a character.\n    '''\n    #return chr(ord('a')+ord(char)-ord('a'))\n    return ord(char)-ord('a')\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate a matrix (2-D array) by 90 degrees.\n    '''\n    new_matrix=[]\n    for i in range(len(matrix)-1,-1,-1):\n        new_matrix.append(matrix[i])\n    return new_matrix\n    \ndef rotate_string(string,num):\n    '''\n    Write a function to rotate a string by an integer number of characters.\n    '''\n    if num>len(string):\n        num=num%len(string)\n    return string[-num:]+string[:-num]\n    \ndef get_nth_row_pascal_triangle(n):\n    '''\n    Write a function to get the nth row of Pascal\u2019s triangle.\n    '''\n    if n==0:\n        return [1]\n    elif n==1:\n        return [1,1]\n    else:\n        new_row=[0]*(n+1)\n        new_row[0]=1\n        new_row[-1]=1\n        for i in range(1,n-1):\n            new_row[i]=prev_row[i]+prev_row[i-1]\n            prev_row=new_row\n        return new_row\n    \ndef get_nth_row_of_pascals_triangle_string(n,separator=' '):\n    '''\n    Write a function to get the nth row of Pascal\u2019s triangle in string format.\n    '''\n    row=get_nth_row_pascal_triangle(n)\n    return separator.join(str(row[i]) for i in range(len(row)))\n    \ndef print_binary(number):\n    '''\n    Write a function to print a binary number in groups of four\n    '''\n    binary_number=bin(number)[2:]\n    for i in range(0,len(binary_number),4):\n        print(binary_number[i:i+4],end=\" \")\n    print()\n    \ndef print_binary_without_trailing_spaces(number):\n    '''\n    Write a function to print a binary number in groups of four\n    '''\n    binary_number=bin(number)[2:]\n    for i in range(0,len(binary_number),4):\n        print(binary_number[i:i+4],end=\"\")\n    print()\n    \ndef get_rotated_list(lst,num):\n    '''\n    Write a function to get the list of integers rotated by an integer number of positions.\n    '''\n    rotated_list=[]\n    for i in range(num):\n        rotated_list.append(lst.pop(0))\n    return rotated_list+lst\n    \ndef get_sum_of_numbers_in_list(lst):\n    '''\n    Write a function to get the sum of all the numbers in a list.\n    '''\n    return sum(lst)\n    \ndef get_sum_of_numbers_in_string(string):\n    '''\n    Write a function to get the sum of all the numbers in a string.\n    '''\n    return sum(int(s) for s in re.findall('\\d+',string))\n    \ndef get_max_occurred_char(string):\n    '''\n    Write a function to get the max occurred char in a string.\n    '''\n    char_dict={}\n    for char in string:\n        char_dict.setdefault(char,0)\n        char_dict[char]+=1\n    max_char=''\n    max_count=0\n    for char,count in char_dict.iteritems():\n        if count>max_count:\n            max_count=count\n            max_char=char\n    return max_char\n    \ndef remove_duplicates_from_sorted_list(lst):"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        index = text.index(pattern)\n        return index,index+len(pattern)\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    res = []\n    s_pos = 0\n    while s_pos < len(text):\n        s_pos = find_substring(text,pattern,s_pos)\n        if s_pos is not None:\n            res.append(s_pos)\n    return res\ndef find_substring(text,pattern,pos):\n    if pos < len(text):\n        if text[pos:pos+len(pattern)] == pattern:\n            return pos\n        else:\n            return find_substring(text,pattern,pos+1)\n    else:\n        return None\ndef test_occurance_substring():\n    assert occurance_substring('test','t') == [0,1,2]\n    assert occurance_substring('test','te') == [0,1]\n    assert occurance_substring('','') == []\n    assert occurance_substring('test','tt') == None\n    assert occurance_substring('test','st') == [1]\n    assert occurance_substring('test','ts') == [2]\n    assert occurance_substring('test','tt') == [0,1,2]\n    assert occurance_substring('test','tt',0) == [0,1,2]\n    assert occurance_substring('test','tt',1) == [0,1,2]\n    assert occurance_substring('test','tt',2) == [0,1,2]\n    assert occurance_substring('test','tt',3) == None\n    assert occurance_substring('test','te',3) == [0,1]\n    assert occurance_substring('test','te',5) == None\n    assert occurance_substring('test','te',4) == [0,1]\n    assert occurance_substring('test','te',0) == [0,1]\n    assert occurance_substring('test','te',2) == [0,1]\n    assert occurance_substring('test','te',4) == [0,1]\n    assert occurance_substring('test','te',5) == [0,1]\n    assert occurance_substring('test','te',6) == [0,1]\n    assert occurance_substring('test','te',7) == [0,1]\n    assert occurance_substring('test','te',8) == [0,1]\n    assert occurance_substring('test','te',9) == [0,1]\n    assert occurance_substring('test','te',10) == [0,1]\n    assert occurance_substring('test','te',11) == [0,1]\n    assert occurance_substring('test','te',12) == [0,1]\n    assert occurance_substring('test','te',13) == [0,1]\n    assert occurance_substring('test','te',14) == [0,1]\n    assert occurance_substring('test','te',15) == [0,1]\n    assert occurance_substring('test','te',16) == [0,1]\n    assert occurance_substring('test','te',17) == [0,1]\n    assert occurance_substring('test','te',18) == [0,1]\n    assert occurance_substring('test','te',19) == [0,1]\n    assert occurance_substring('test','te',20) == [0,1]\n    assert occurance_substring('test','te',21) == [0,1]\n    assert occurance_substring('test','te',22) == [0,1]\n    assert occurance_substring('test','te',23) == [0,1]\n    assert occurance_substring('test','te',24) == [0,1]\n    assert occurance_substring('test','te',25) == [0,1]\n    assert occurance_substring('test','te',26) == [0,1]\n    assert occurance_substring('test','te',27) == [0,1]\n    assert occurance_substring('test','te',28) == [0,1]\n    assert occurance_substring('test','te',29) == [0,1]\n    assert occurance_substring('test','te',30) == [0,1]\n    assert occurance_substring('test','te',31) == [0,1]\n    assert occurance_substring('test','te',32) == [0,1]\n    assert occurance_substring('test','te',33) == [0,1]\n    assert occurance_substring('test','te',34) == [0,1]\n    assert occurance_substring('test','te',35) == [0,1]\n    assert occurance_substring('test','te',36) == [0,1]\n    assert occurance_substring('test','te',37) == [0,1]\n    assert occurance_substring('test','te',38) == [0,1]\n    assert occurance_substring('test','te',39) == [0,1]\n    assert occurance_substring('test','te',40) == [0,1]\n    assert occurance_substring('test','te',41) == [0,1]\n    assert occurance_substring('test','te',42) == [0,1]\n    assert occurance_substring('test','te',43) == [0,1]\n    assert occurance_substring('test','te',44) == [0,1]\n    assert occurance_substring('test','te',45) == [0,1]\n    assert occurance_substring('test','te',46) == [0,1]\n    assert occurance_substring('test','te',47) == [0,1]\n    assert occurance_substring('test','te',48) == [0,1]\n    assert occurance_substring('test','te',49) == [0,1]\n    assert occurance_substring('test','te',50) == [0,1]\n    assert occurance_substring('test','te',51) == [0,1]\n    assert occurance_substring('test','te',52) == [0,1]\n    assert occurance_substring('test','te',53) == [0,1]\n    assert occurance_substring('test','te',54) == [0,1]\n    assert occurance_substring('test','te',55) == [0,1]\n    assert occurance_substring('test','te',56) == [0,1]\n    assert occurance_substring('test','te',57) == [0,1]\n    assert occurance_substring('test','te',58) == [0,1]\n    assert occurance_substring('test','te',59) == [0,1]\n    assert occurance_substring('test','te',60) == [0,1]\n    assert occurance_substring('test','te',61) == [0,1]\n    assert occurance_substring('test','te',62) == [0,1]\n    assert occurance_substring('test','te',63) == [0,1]\n    assert occurance_substring('test','te',64) == [0,1]\n    assert occurance_substring('test','te',65) == [0,1]\n    assert occurance_substring('test','te',66) == [0,1]\n    assert occurance_substring('test','te',67) == [0,1]\n    assert occurance_substring('test','te',68) == [0,1]\n    assert occurance_substring('test','te',69) == [0,1]\n    assert occurance_substring('test','te',70) == [0,1]\n    assert occurance_substring('test','te',71) == [0,1]\n    assert occurance_substring('test','te',72) == [0,1]\n    assert occurance_substring('test','te',73) == [0,1]\n    assert occurance_substring('test','te',74) == [0,1]\n    assert occurance_substring('test','te',75) == [0,1]\n    assert occurance_substring('test','te',76"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    str1 = pattern\n    str2 = text\n    index = 0\n    occurance = 0\n    while index < len(str2):\n        if str2[index:len(str1)+index] == str1:\n            occurance += 1\n            index += len(str1)\n        else:\n            index += 1\n    if occurance > 0:\n        return (occurance,index-len(str1))\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #look for pattern in text\n    #output = {\"occurance\":occurance, \"position\":position}\n    #return output\n    if pattern == '':\n        return None\n    if len(pattern) > len(text):\n        return None\n    occurance = 0\n    position = 0\n    while position < len(text):\n        if pattern == text[position:position + len(pattern)]:\n            occurance += 1\n            position += len(pattern)\n        else:\n            position += 1\n    return {\"occurance\":occurance, \"position\":position}\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.search(pattern, text)\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n    \ndef min_max_list(nums):\n    '''\n    Write a python function to find the minimum and maximum values of a list.\n    '''\n    minimum = nums[0]\n    maximum = nums[0]\n    for i in nums:\n        if i < minimum:\n            minimum = i\n        elif i > maximum:\n            maximum = i\n    return minimum, maximum\n    \ndef if_list(nums):\n    '''\n    Write a python function to check whether every element of a given list is in another list.\n    '''\n    numbers_1 = set(nums)\n    numbers_2 = set(['1', '2', '3'])\n    if numbers_1.issubset(numbers_2):\n        return True\n    return False\n    \ndef min_max_list_2(nums):\n    '''\n    Write a python function to find the minimum and maximum values of a list.\n    '''\n    return min(nums), max(nums)\n    \ndef check_list(nums):\n    '''\n    Write a python function to check if a given list is sorted or not.\n    '''\n    for i in range(0, len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n    \ndef linear_search(nums, target):\n    '''\n    Write a python function to perform linear search on a list.\n    '''\n    for i in range(len(nums)):\n        if target == nums[i]:\n            return i\n    return -1\n    \ndef two_sum(nums, target):\n    '''\n    Write a python function to find if a given list has a sum of two elements equal to a given target number.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n    \ndef three_sum(nums):\n    '''\n    Write a python function to find if a given list has a sum of three elements equal to zero.\n    '''\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False\n    \ndef check_duplicate(nums):\n    '''\n    Write a python function to check if a given list contains duplicates.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                return True\n    return False\n    \ndef find_duplicate(nums):\n    '''\n    Write a python function to find a duplicate number in a list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            return nums[i]\n    return -1\n    \ndef four_sum(nums, target):\n    '''\n    Write a python function to find four numbers in a list whose sum is equal to a given target number.\n    '''\n    for i in range(len(nums)-3):\n        for j in range(i+1, len(nums)-2):\n            for k in range(j+1, len(nums)-1):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return nums[i], nums[j], nums[k], nums[l]\n    return -1\n    \ndef rotate_image(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    rotated_matrix = []\n    for i in range(len(matrix[0])):\n        rotated_matrix.append([])\n        for j in range(len(matrix)):\n            rotated_matrix[i].append(matrix[len(matrix)-j-1][i])\n    return rotated_matrix\n    \ndef rotate_image_2(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    rotated_matrix = []\n    for i in range(len(matrix[0])):\n        rotated_matrix.append([])\n        for j in range(len(matrix)):\n            rotated_matrix[i].append(matrix[len(matrix)-j-1][i])\n    return rotated_matrix\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    rotated_matrix = []\n    for i in range(len(matrix[0])):\n        rotated_matrix.append([])\n        for j in range(len(matrix)):\n            rotated_matrix[i].append(matrix[j][len(matrix)-i-1])\n    return rotated_matrix\n    \ndef check_symmetry(matrix):\n    '''\n    Write a python function to check if a given matrix is a symmetric matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(i, len(matrix[0])):\n            if matrix[i][j]!= matrix[j][i]:\n                return False\n    return True\n    \ndef rotate_matrix_2(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    rotated_matrix = []\n    for i in range(len(matrix[0])):\n        rotated_matrix.append([])\n        for j in range(len(matrix)):\n            rotated_matrix[i].append(matrix[j][len(matrix[0])-i-1])\n    return rotated_matrix\n    \ndef rotate_matrix_3(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    rotated_matrix = []\n    for i in range(len(matrix[0])):\n        rotated_matrix.append([])\n        for j in range(len(matrix)):\n            rotated_matrix[i].append(matrix[j][i])\n    return rotated_matrix\n    \ndef rotate_matrix_4(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    rotated_matrix = []\n    for i in range(len(matrix[0])):\n        rotated_matrix.append([])\n        for j in range(len(matrix)):\n            rotated_matrix[i].append(matrix[i][len(matrix)-j-1])\n    return rotated_matrix\n    \ndef rotate_matrix_5(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    rotated_matrix = []\n    for i in range(len(matrix[0])):\n        rotated_matrix.append([])\n        for j in range(len(matrix)):\n            rotated_matrix[i].append(matrix[j][i])\n    return rotated_matrix\n    \ndef max_subarray(nums):\n    '''\n    Write a python function to find the maximum contiguous sum of a list.\n    '''\n    global_max = nums[0]\n    local_max "
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    list_length = len(nums)\n    i = 0\n    while i < list_length:\n        if nums[i] % 2!= 0:\n            return False\n        i = i + 2\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if not i%2:\n            continue\n        if nums[i]%2:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if(nums[i]%2!=0):\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums:\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 1:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) <= 1:\n        return True\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \ndef test_odd_position():\n    assert odd_position([2, 5, 1, 3, 4, 8]) == True\n    assert odd_position([1, 3, 2, 4]) == False\n    assert odd_position([5, 1, 4, 7, 3, 2]) == True\n    assert odd_position([2, 4, 6, 8, 10, 11, 4]) == True\n    assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n    assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\n    assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == True\n    assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == False\n    assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == True\n    assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == False\n    assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == False\n    \n    \ndef min_max_average(nums):\n    '''\n    Write a python function to find the minimum, maximum and average of given list of numbers.\n    '''\n    if len(nums) == 0:\n        return (0, 0, 0)\n    if len(nums) == 1:\n        return (nums[0], nums[0], nums[0])\n    max_n = nums[0]\n    min_n = nums[0]\n    total = 0\n    for n in nums:\n        total += n\n        if n > max_n:\n            max_n = n\n        if n < min_n:\n            min_n = n\n    return (min_n, max_n, total / len(nums))\n    \ndef test_min_max_average():\n    assert min_max_average([1, 2, 3, 4, 5]) == (1, 5, 3)\n    assert min_max_average([-1, -2, -3, -4, -5]) == (-5, -1, -3)\n    assert min_max_average([]) == (0, 0, 0)\n    assert min_max_average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 10, 5)\n    assert min_max_average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == (1, 50, 25)\n    assert min_max_average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == (1, 100, 75)\n    \ndef almost_sorted(nums):\n    '''\n    Write a python function to check whether given list is almost sorted or not.\n    '''\n    if len(nums) < 2:\n        return True\n    for i in range(0, len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\n    \ndef test_almost_sorted():\n    assert almost_sorted([0, 1, 2, 3, 4, 5]) == True\n    assert almost_sorted([3, 2, 4, 1]) == False\n    assert almost_sorted([1, 4, 2, 3, 5]) == False\n    assert almost_sorted([1, 4, 2, 3, 5, 6, 7, 8, 9, 10]) == False\n    assert almost_sorted([1, 4, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == True\n    assert almost_sorted([1, 4, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == True\n    assert almost_sorted([1, 4, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return nums[::2] == [i for i in range(len(nums)) if i%2]\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiouAEIOU':\n            if test_str[i+1] in 'aeiouAEIOU':\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str == '':\n        return 0\n    else:\n        return test_str[-1] in ['a', 'e', 'i', 'o', 'u'] and count_vowels(test_str[:-1])\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            vowels += 1\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    # if test_str[0] in vowels:\n    #     return 1\n    # if test_str[1] in vowels:\n    #     return 1 + count_vowels(test_str[1:])\n    # if test_str[2] in vowels:\n    #     return 1 + count_vowels(test_str[2:])\n    # else:\n    #     return 0\n    # return count_vowels(test_str[2:])\n    return sum(test_str[i-1] in vowels for i in range(1, len(test_str)))\n    \n    #return 1 if test_str[0] in vowels else 0\n    # if test_str[0] in vowels:\n    #     return 1 + count_vowels(test_str[1:])\n    # elif test_str[1] in vowels:\n    #     return 1 + count_vowels(test_str[2:])\n    # else:\n    #     return 0\n    # return count_vowels(test_str[2:])\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u' or test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u' or test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                count = count + 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    n = len(test_str)\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in range(0,n-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if not test_str:\n        return 0\n    vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            if i < len(test_str) - 1:\n                if test_str[i + 1] in 'aeiouAEIOU':\n                    vowels += 1\n            elif i == len(test_str) - 1:\n                vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou':\n            if test_str[i+1] in 'aeiou':\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for ele in arr: \n        if ele not in arr[1:]: \n            sum = sum + ele\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr[0:len(arr)-1]:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr)==0:\n        return None\n    elif len(arr)==1:\n        return arr[0]\n    else:\n        return arr[0] + find_sum(arr[1:])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #arr = [11,11,12,13,13,14,15,15]\n    sum = 0\n    for i in arr:\n        if i not in arr[1:]:\n            sum += i\n    return sum\n    \n    \ndef test_find_sum():\n    '''\n    test_find_sum()\n    '''\n    assert find_sum([11,11,12,13,13,14,15,15]) == 15\n    assert find_sum([13,14,14,13,14,15,15,15]) == 17\n    assert find_sum([11,13,14,15,15]) == 17\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for num in arr: \n        s += num\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n    \ndef find_number_of_clashes(arr):\n    '''\n    Write a python function to find the number of times a given number occurs in a given list.\n    '''\n    return arr.count(arr[0])\n    \ndef find_max_occurrence(arr):\n    '''\n    Write a python function to find the max number of times an element occurs in a given list.\n    '''\n    return max([arr.count(x) for x in set(arr)])\n    \ndef find_number_of_digits(n):\n    '''\n    Write a python function to find the number of digits in a given number.\n    '''\n    return len(str(n))\n    \ndef find_number_of_months(day,month,year):\n    '''\n    Write a python function to find the number of months in a given date.\n    '''\n    return (year//4)+((year%4==0) and (month<=2))\n    \ndef find_factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    fact=1\n    if n<0:\n        return \"Factorial does not exist for negative number\"\n    elif n==0 or n==1:\n        return 1\n    else:\n        while n>1:\n            fact=fact*n\n            n-=1\n        return fact\n    \ndef find_fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number\n    '''\n    if n<0:\n        return \"Fibonacci does not exist for negative number\"\n    elif n==0 or n==1:\n        return n\n    else:\n        return find_fibonacci(n-1)+find_fibonacci(n-2)\n    \ndef find_trailing_zeros(n):\n    '''\n    Write a python function to find the number of trailing zeros in a given number.\n    '''\n    count=0\n    while n>0:\n        n//=5\n        count+=n\n    return count\n    \ndef find_digit_sum(n):\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    return sum([int(x) for x in str(n)])\n    \ndef find_number_of_primes(n):\n    '''\n    Write a python function to find the number of primes of a given number.\n    '''\n    if n<3:\n        return 0\n    else:\n        return n//2 - find_number_of_primes(n//2)\n    \ndef find_largest_prime_factor(n):\n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    if n<1:\n        return -1\n    elif n==1:\n        return n\n    else:\n        for i in range(n+1,1,-1):\n            if n%i==0 and find_number_of_primes(i)>=2:\n                return i\n        return -1\n    \ndef find_power_of_two(n):\n    '''\n    Write a python function to find the power of two of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return find_power_of_two(n>>1)<<1\n    \ndef find_largest_power_of_two(n):\n    '''\n    Write a python function to find the largest power of two of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return find_largest_power_of_two(n>>1)<<1\n    \ndef find_largest_power_of_three(n):\n    '''\n    Write a python function to find the largest power of three of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return find_largest_power_of_three(n>>2)<<2\n    \ndef find_power_of_three(n):\n    '''\n    Write a python function to find the power of three of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*find_power_of_three(n>>1)\n    \ndef find_largest_power_of_four(n):\n    '''\n    Write a python function to find the largest power of four of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return find_largest_power_of_four(n>>2)<<2\n    \ndef find_power_of_five(n):\n    '''\n    Write a python function to find the power of five of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*find_power_of_five(n>>1)\n    \ndef find_smallest_power_of_two(n):\n    '''\n    Write a python function to find the smallest power of two of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n&1 and find_smallest_power_of_two(n>>1)<<1) or find_smallest_power_of_two(n>>1)\n    \ndef find_smallest_power_of_three(n):\n    '''\n    Write a python function to find the smallest power of three of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n&3 and find_smallest_power_of_three(n>>2)<<2) or find_smallest_power_of_three(n>>2)\n    \ndef find_smallest_power_of_five(n):\n    '''\n    Write a python function to find the smallest power of five of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n&5 and find_smallest_power_of_five(n>>4)<<4) or find_smallest_power_of_five(n>>4)\n    \ndef find_smallest_power_of_eight(n):\n    '''\n    Write a python function to find the smallest power of eight of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n&7 and find_smallest_power_of_eight(n>>6)<<6) or find_smallest_power_of_eight(n>>6)\n    \ndef find_smallest_power_of_ten(n):\n    '''\n    Write a python function to find the smallest power of ten of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n&31 and find_smallest_power_of_ten(n>>5)<<5) or find_smallest_power_of_ten(n>>5)\n    \ndef find_smallest_power_of_thousand(n):\n    '''\n    Write a python function to find the smallest power of thousand of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n&1597 and find_smallest_power_of_thousand(n>>8)<<8) or find_smallest_power_of_thousand(n>>8)\n    \ndef find_smallest_power_of_two_or_three(n):\n    '''\n    Write a python function to find the smallest power of two or three of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n&7 and find_smallest_power_of_two_or_three(n>>3)<<3) or find_smallest_power_of_two_or_three(n>>3)\n    \ndef find_smallest_power_of_four_or_five(n):\n    '''\n    Write a python function to find the smallest power of four or five of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n&3 and find_smallest_power_of_four_or_five(n>>2)<"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # your code here\n    if len(list1) == 0:\n        return []\n    \n    result = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i]!= list1[i - 1]:\n            result.append(list1[i])\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    d={}\n    for k,g in groupby(enumerate(list1),lambda i:i[0]-i[1]):\n        d[k]=[list1[j] for i,j in g]\n    for i,j in d.items():\n        j.sort()\n        print(i,j)\nlist1=[1,1,1,1,1,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    i = 0\n    for k,g in groupby(list1):\n        pack.append(list(g))\n    print pack\n    return pack\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #print(list1)\n    i = 0\n    j = 1\n    sorted_list = []\n    while i < len(list1):\n        sublist = []\n        sublist.append(list1[i])\n        while j < len(list1) and list1[j] == list1[i]:\n            sublist.append(list1[j])\n            j += 1\n        sorted_list.append(sublist)\n        i = j\n    return sorted_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = [int(i) for i in list1]\n    newlist = []\n    for k, g in groupby(enumerate(list1), lambda x:x[0] - x[1]):\n        newlist.append(map(itemgetter(1), g))\n    return newlist\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #return [(k, g) for k, g in groupby(list1)]\n    return [list(g) for k, g in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_of_sublists = []\n    list_of_sublists.append([list1[0]])\n    for item in list1[1:]:\n        if item == list1[-1]:\n            list_of_sublists[-1].append(item)\n        elif item!= list1[list1.index(item)-1]:\n            list_of_sublists.append([item])\n    return list_of_sublists\ndef pack_consecutive_duplicates2(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_of_sublists = []\n    list_of_sublists.append([list1[0]])\n    for item in list1[1:]:\n        if item == list1[-1]:\n            list_of_sublists[-1].append(item)\n        elif item == list1[list1.index(item)-1]:\n            list_of_sublists[-1].append(item)\n        else:\n            list_of_sublists.append([item])\n    return list_of_sublists\ndef pack_consecutive_duplicates3(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_of_sublists = []\n    list_of_sublists.append([list1[0]])\n    for item in list1[1:]:\n        if item == list1[-1]:\n            list_of_sublists[-1].append(item)\n        elif item == list1[list1.index(item)-1]:\n            list_of_sublists[-1].append(item)\n        else:\n            list_of_sublists.append([item])\n    return list_of_sublists\ndef pack_consecutive_duplicates4(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_of_sublists = []\n    list_of_sublists.append([list1[0]])\n    for item in list1[1:]:\n        if item == list1[-1]:\n            list_of_sublists[-1].append(item)\n        elif item == list1[list1.index(item)-1]:\n            list_of_sublists[-1].append(item)\n        else:\n            list_of_sublists.append([item])\n    return list_of_sublists\ndef pack_consecutive_duplicates5(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_of_sublists = []\n    list_of_sublists.append([list1[0]])\n    for item in list1[1:]:\n        if item == list1[-1]:\n            list_of_sublists[-1].append(item)\n        elif item == list1[list1.index(item)-1]:\n            list_of_sublists[-1].append(item)\n        else:\n            list_of_sublists.append([item])\n    return list_of_sublists\ndef count_list_items(list1):\n    '''\n    Write a function to count the number of items in a given list.\n    '''\n    return len(list1)\ndef is_sorted(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted2(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted3(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted4(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted5(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted6(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted7(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted8(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted9(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted10(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted11(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted12(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted13(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted14(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted15(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted16(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted17(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted18(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\ndef is_sorted19(list1):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\nde"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    return [list(map(lambda x: x[0],group)) for key,group in groups if key]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for i,j in groupby(list1):\n        sublist.append(list(j))\n    return sublist\ndef sort_list(list1):\n    '''\n    Write a function to sort a given list of elements.\n    The function should return the list of elements sorted in ascending order.\n    '''\n    return sorted(list1)\ndef add_element(list1,element):\n    '''\n    Write a function to add an element to a given list.\n    The function should return the list with the element added to it.\n    '''\n    return list1+[element]\ndef filter_list(list1,func):\n    '''\n    Write a function to filter a given list of elements.\n    The function should return the list with the elements for which the function returns true.\n    '''\n    return [i for i in list1 if func(i)]\ndef sort_and_filter(list1,func):\n    '''\n    Write a function to sort a given list of elements and filter a given list of elements.\n    The function should return the list with the elements for which the function returns true.\n    '''\n    return filter_list(list1,func) + sort_list(list1)\ndef count_occurence(list1,func):\n    '''\n    Write a function to count the number of times an element appears in a given list of elements.\n    '''\n    return len(filter_list(list1,func))\ndef sort_and_count(list1,func):\n    '''\n    Write a function to sort a given list of elements and count the number of times an element appears in a given list of elements.\n    The function should return the list with the elements for which the function returns true.\n    '''\n    return count_occurence(list1,func) + sort_list(list1)\ndef max_and_min(list1):\n    '''\n    Write a function to find the maximum and minimum values in a given list of elements.\n    The function should return the maximum and minimum values in a list of elements.\n    '''\n    return max(list1),min(list1)\ndef max_and_min_and_sort(list1):\n    '''\n    Write a function to find the maximum and minimum values in a given list of elements and sort the list of elements.\n    The function should return the maximum and minimum values in a list of elements.\n    '''\n    return sorted(list1)[0],sorted(list1)[-1]\ndef min_and_sort(list1):\n    '''\n    Write a function to find the minimum values in a given list of elements and sort the list of elements.\n    The function should return the minimum values in a list of elements.\n    '''\n    return sorted(list1)[0]\ndef first_and_last(list1):\n    '''\n    Write a function to find the first and last values in a given list of elements.\n    The function should return the first and last values in a list of elements.\n    '''\n    return list1[0],list1[-1]\ndef first_and_last_and_sort(list1):\n    '''\n    Write a function to find the first and last values in a given list of elements and sort the list of elements.\n    The function should return the first and last values in a list of elements.\n    '''\n    return sorted(list1)[0],sorted(list1)[-1]\ndef first_and_last_and_sort_and_reverse(list1):\n    '''\n    Write a function to find the first and last values in a given list of elements and sort the list of elements.\n    The function should return the first and last values in a list of elements.\n    '''\n    return sorted(list1)[0],sorted(list1)[-1]\ndef reverse_and_sort(list1):\n    '''\n    Write a function to reverse and sort a given list of elements.\n    The function should return the list with the elements in descending order.\n    '''\n    return sorted(list1)[::-1]\ndef distinct_values(list1):\n    '''\n    Write a function to remove duplicates from a given list.\n    The function should return the list with duplicate values removed.\n    '''\n    return list(set(list1))\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a given list.\n    The function should return the list with duplicate values removed.\n    '''\n    return list(set(list1))\ndef shuffle_list(list1):\n    '''\n    Write a function to shuffle a given list of elements.\n    The function should return the shuffled list of elements.\n    '''\n    import random\n    return random.sample(list1,len(list1))\ndef filter_between_range(list1,func,min_val,max_val):\n    '''\n    Write a function to filter a given list of elements by a given min and max value.\n    The function should return the list with the elements for which the function returns true.\n    '''\n    return [i for i in list1 if func(i) and min_val <= i <= max_val]\ndef filter_by_values(list1,func):\n    '''\n    Write a function to filter a given list of elements by a given values.\n    The function should return the list with the elements for which the function returns true.\n    '''\n    return [i for i in list1 if func(i)]\ndef filter_by_values_and_sort(list1,func):\n    '''\n    Write a function to filter a given list of elements by a given values and sort the filtered list of elements.\n    The function should return the list with the elements for which the function returns true.\n    '''\n    return sorted(filter_by_values(list1,func))\ndef find_maximum_and_minimum_element(list1,func):\n    '''\n    Write a function to find the maximum and minimum values in a given list of elements.\n    The function should return the maximum and minimum values in a list of elements.\n    '''\n    return max(filter_by_values(list1,func)),min(filter_by_values(list1,func))\ndef find_maximum_and_minimum_element_and_sort(list1,func):\n    '''\n    Write a function to find the maximum and minimum values in a given list of elements and sort the filtered list of elements.\n    The function should return the maximum and minimum values in a list of elements.\n    '''\n    return sorted(filter_by_values(list1,func))[0],sorted(filter_by_values(list1,func))[-1]\ndef find_maximum_and_minimum_element_and_sort_and_reverse(list1,func):\n    '''\n    Write a function to find the maximum and minimum values in a given list of elements and sort the filtered list of elements.\n    The function should return the maximum and minimum values in a list of elements.\n    '''\n    return sorted(filter_by_values(list1,func))[0],sorted(filter_by_values(list1,func))[-1]\ndef find_maximum_and_minimum_element_and_sort_and_reverse(list1,func):\n    '''\n    Write a function to find the maximum and minimum values in a given list of elements and sort the filtered list of elements.\n    The function should return the maximum and minimum values in a list of elements.\n    '''\n    return sorted(filter_by_values(list1,func))[0],sorted(filter_by_values(list1,func))[-1]\ndef count_occurence_and_sort(list1,func):\n    '''\n    Write a function to count the number of times an element appears in a given list of elements.\n    The function should return the count of occurrences in a list of elements.\n    '''\n    return len(filter_by_values(list1,func))\ndef find_maximum_and_minimum_element_and_sort_and_count(list1,func):\n    '''\n    Write a function to find the maximum and minimum values in a given list of elements and sort the filtered list of elements.\n    The function should return the maximum and minimum values in a list of elements.\n    '''\n    return len(filter_by_values(list1,func)) + sorted(filter_by_values(list1,func))[0],sorted(filter_by_values(list1,fun"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1)]\ndef bucket_sort(arr):\n    \"\"\"\n    Given an array arr of integers, rearrange elements of the array using the bucket\n    sort algorithm. Each element of the array should be rearranged to its bucket.\n    \"\"\"\n    buckets = [[] for _ in range(max(arr)+1)]\n    for num in arr:\n        buckets[num].append(num)\n    for i in range(len(buckets)):\n        buckets[i] = sorted(buckets[i])\n    return [item for sublist in buckets for item in sublist]\ndef reverse_complement(seq):\n    '''\n    Given a DNA sequence, return the reverse complement.\n    '''\n    seq = seq.upper()\n    seq = seq.replace('A','1')\n    seq = seq.replace('C','2')\n    seq = seq.replace('G','3')\n    seq = seq.replace('T','4')\n    seq = seq[::-1]\n    seq = seq.replace('1','A')\n    seq = seq.replace('2','C')\n    seq = seq.replace('3','G')\n    seq = seq.replace('4','T')\n    return seq\ndef reverse_complement_2(seq):\n    '''\n    Given a DNA sequence, return the reverse complement.\n    '''\n    seq = seq.upper()\n    reverse_complement = ''\n    for i in seq:\n        if i == 'A':\n            reverse_complement += 'T'\n        elif i == 'C':\n            reverse_complement += 'G'\n        elif i == 'G':\n            reverse_complement += 'C'\n        elif i == 'T':\n            reverse_complement += 'A'\n        else:\n            reverse_complement += i\n    return reverse_complement\ndef complement(seq):\n    '''\n    Given a DNA sequence, return the complementary sequence.\n    '''\n    seq = seq.upper()\n    complementary_sequence = ''\n    for i in seq:\n        if i == 'A':\n            complementary_sequence += 'T'\n        elif i == 'C':\n            complementary_sequence += 'G'\n        elif i == 'G':\n            complementary_sequence += 'C'\n        elif i == 'T':\n            complementary_sequence += 'A'\n        else:\n            complementary_sequence += i\n    return complementary_sequence\ndef complement_2(seq):\n    '''\n    Given a DNA sequence, return the complementary sequence.\n    '''\n    seq = seq.upper()\n    complementary_sequence = ''\n    for i in seq:\n        if i == 'A':\n            complementary_sequence += 'T'\n        elif i == 'C':\n            complementary_sequence += 'G'\n        elif i == 'G':\n            complementary_sequence += 'C'\n        elif i == 'T':\n            complementary_sequence += 'A'\n        else:\n            complementary_sequence += i\n    return complementary_sequence\ndef hamming_distance(str1, str2):\n    '''\n    Given two strings, compute and return the Hamming distance between the strings.\n    '''\n    hamming_distance = 0\n    for i, j in zip(str1, str2):\n        if i!= j:\n            hamming_distance += 1\n    return hamming_distance\ndef hamming_distance_2(str1, str2):\n    '''\n    Given two strings, compute and return the Hamming distance between the strings.\n    '''\n    hamming_distance = 0\n    for i, j in zip(str1, str2):\n        if i!= j:\n            hamming_distance += 1\n    return hamming_distance\ndef edit_distance(str1, str2):\n    '''\n    Given two strings, compute and return the edit distance between the strings.\n    '''\n    if len(str1) > len(str2):\n        str1, str2 = str2, str1\n    distances = range(len(str1) + 1)\n    for index2, char2 in enumerate(str2):\n        new_distances = [index2 + 1]\n        for index1, char1 in enumerate(str1):\n            if char1 == char2:\n                new_distances.append(distances[index1])\n            else:\n                new_distances.append(1 + min((distances[index1],\n                distances[index1+1], new_distances[-1])))\n        distances = new_distances\n    return distances[-1]\ndef edit_distance_2(str1, str2):\n    '''\n    Given two strings, compute and return the edit distance between the strings.\n    '''\n    if len(str1) > len(str2):\n        str1, str2 = str2, str1\n    distances = range(len(str1) + 1)\n    for index2, char2 in enumerate(str2):\n        new_distances = [index2 + 1]\n        for index1, char1 in enumerate(str1):\n            if char1 == char2:\n                new_distances.append(distances[index1])\n            else:\n                new_distances.append(1 + min((distances[index1],\n                distances[index1+1], new_distances[-1])))\n        distances = new_distances\n    return distances[-1]\ndef longest_common_substring(str1, str2):\n    '''\n    Given two strings, compute and return the length of the longest common substring.\n    '''\n    lengths = [[0 for j in range(len(str2)+1)] for i in range(len(str1)+1)]\n    longest, x_longest = 0, 0\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lengths[x][y] = lengths[x-1][y-1] + 1\n                if lengths[x][y] > longest:\n                    longest = lengths[x][y]\n                    x_longest = x\n            else:\n                lengths[x][y] = 0\n    return (longest, str1[x_longest-longest: x_longest])\ndef longest_common_substring_2(str1, str2):\n    '''\n    Given two strings, compute and return the length of the longest common substring.\n    '''\n    lengths = [[0 for j in range(len(str2)+1)] for i in range(len(str1)+1)]\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                lengths[x][y] = lengths[x-1][y-1] + 1\n            else:\n                lengths[x][y] = 0\n    return max(lengths[-1])\ndef knapsack_with_reps(values, weights, capacity):\n    '''\n    Given a set of items with positive and integral values and weights,\n    determine the maximum value of value that can be put into a knapsack with a\n    given capacity.\n    '''\n    cache = [[-1 for _ in range(capacity+1)] for _ in range(len(weights)+1)]\n    def knapsack(capacity, index):\n        if cache[index][capacity]!= -1:\n            return cache[index][capacity]\n        if index == 0 or capacity == 0:\n            cache[index][capacity] = 0\n        elif weights[index-1] > capacity:\n            cache[index][capacity] = knapsack(capacity, index-1)\n        else:\n            cache[index][capacity] = max(\n                knapsack(capacity, index-1),\n                values[index-1] + knapsack(capacity - weights[index-1], index-1)\n            )\n        return cache[index][capacity]\n    return knapsack(capacity, len(values))\ndef knapsack_with_reps_2(values, weights, capacity):\n    '''\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        dict1[tuple(list1[i])] = list1.count(list1[i])\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(list1):list1.count(list1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d={}\n    for i in list1:\n        if tuple(i) not in d:\n            d[tuple(i)] = 1\n        else:\n            d[tuple(i)] += 1\n    return d\nprint(unique_sublists([1,2,3,[4,5,6,7,8,9]]))\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in dict:\n            dict[sublist] = dict[sublist] + 1\n        else:\n            dict[sublist] = 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for elem in list1:\n        if isinstance(elem, list):\n            tuple_elem = tuple(elem)\n            dict1[tuple_elem] = dict1.setdefault(tuple_elem, 0) + 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in list1:\n        t = tuple(i)\n        if t not in dict.keys():\n            dict[t] = 1\n        else:\n            dict[t] += 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #this is a very good idea to use it as a dictionary\n    #dictionary comprehension\n    d = {tuple(list1):0 for i in list1}\n    for item in list1:\n        d[tuple(item)] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d={}\n    for i in range(len(list1)):\n        list2 = []\n        for j in range(len(list1)):\n            if i!= j:\n                list2.append(list1[j])\n        d[tuple(list2)] = list1.count(list1[i])\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if sublist in dict1:\n            dict1[sublist] += 1\n        else:\n            dict1[sublist] = 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def unique_sublists(list1):\n        count = {}\n        for i in range(len(list1)):\n            temp = []\n            for j in range(i, len(list1)):\n                temp.append(list1[j])\n                t = tuple(temp)\n                if t not in count:\n                    count[t] = 1\n                else:\n                    count[t] += 1\n        return count\n    \n    print unique_sublists([[1,2,3], [3,4,5], [3,4,5]])\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in test_list:\n        for j in test_list:\n            if i[0] + j[0] == i[1] and i!= j:\n                print(i, j)\n                \n                \nclass Queue():\n    def __init__(self):\n        self.list = []\n        \n    def isEmpty(self):\n        return len(self.list) == 0\n        \n    def enqueue(self, item):\n        self.list.append(item)\n        \n    def dequeue(self):\n        if self.isEmpty():\n            return False\n        return self.list.pop(0)\n        \n    def peek(self):\n        return self.list[0]\n        \n    def size(self):\n        return len(self.list)\n        \n    def printqueue(self):\n        for item in self.list:\n            print(item)\n            \n    def __str__(self):\n        return str(self.list)\n        \n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # list of tuples of sums for each combination of input\n    list_of_combinations = []\n    # iterate through the list and see if the sum of each tuple is already present in the list or not\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                # if sum is already present then add tuple combination to the list\n                list_of_combinations.append(tuple(sorted((test_list[i], test_list[j]))))\n    # print the list of tuples\n    print list_of_combinations\n    # print the list of tuples in sorted order\n    print sorted(list_of_combinations)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination_list = list(combinations(test_list, 2))\n    print(combination_list)\n    \n    #combination_list = list(combinations(test_list, 2))\n    #print(combination_list)\n    \ndef find_combinations_mul(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination_list = list(combinations(test_list, 2))\n    print(combination_list)\n    \ndef find_combinations_mul2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination_list = list(combinations(test_list, 3))\n    print(combination_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for n in range(1,len(test_list)):\n        for comb in combinations(test_list, n):\n            s = sum(comb)\n            combs.append(s)\n    combs = set(combs)\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    '''\n    return [comb for i in range(len(test_list)) for comb in combinations(test_list, i+1) if sum(comb) == 50]\n    '''\n    return combinations(test_list, 2)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_of_tuples = []\n    # Convert the list to tuples to make it easier for sets to be used.\n    for i in test_list:\n        list_of_tuples.append(tuple(i))\n    # Convert to a set to remove any duplicates.\n    list_of_tuples = set(list_of_tuples)\n    # Sort the tuples so that each combination is unique.\n    list_of_tuples = list(list_of_tuples)\n    list_of_tuples.sort()\n    \n    # List to store the possible combinations.\n    possible_combinations = []\n    # Loop through the list of tuples.\n    for i in range(len(list_of_tuples)):\n        # Get the first number in the tuple.\n        first_number = list_of_tuples[i][0]\n        # Get the second number in the tuple.\n        second_number = list_of_tuples[i][1]\n        # Get the third number in the tuple.\n        third_number = list_of_tuples[i][2]\n        # Get the sum of the three numbers.\n        sum_of_three = first_number + second_number + third_number\n        # Get the sum of two numbers and the third number.\n        sum_of_two = second_number + third_number\n        # Get the sum of the three numbers.\n        sum_of_one = first_number + third_number\n        # Check if the sum of two numbers and the third number is in the list.\n        if sum_of_two in list_of_tuples and sum_of_three in list_of_tuples:\n            # Add the combination of sum of two numbers and the third number to the possible combinations.\n            possible_combinations.append((first_number,second_number,third_number))\n        # Check if the sum of three numbers is in the list.\n        elif sum_of_three in list_of_tuples:\n            # Add the combination of sum of three numbers to the possible combinations.\n            possible_combinations.append((first_number,second_number,third_number))\n        # Check if the sum of two numbers is in the list.\n        elif sum_of_two in list_of_tuples:\n            # Add the combination of sum of two numbers to the possible combinations.\n            possible_combinations.append((first_number,second_number,third_number))\n        # Check if the sum of the first number and the third number is in the list.\n        elif sum_of_one in list_of_tuples:\n            # Add the combination of the sum of the first number and the third number to the possible combinations.\n            possible_combinations.append((first_number,second_number,third_number))\n    # Convert the possible combinations to a list to be returned.\n    possible_combinations = list(possible_combinations)\n    return possible_combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in xrange(1, len(test_list)+1):\n        combinations_list.extend(combinations(test_list,i))\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        sum_list.append(sum(test_list[i]))\n    sum_list = list(set(sum_list))\n    sum_list.sort()\n    c_list = []\n    for i in range(len(sum_list)):\n        c_list.append([])\n    for i in range(len(test_list)):\n        for j in range(len(sum_list)):\n            if(sum_list[j] > test_list[i][0]):\n                c_list[j].append(test_list[i])\n                break\n            if(sum_list[j] == test_list[i][0]):\n                c_list[j].append(test_list[i])\n                break\n    for i in range(len(sum_list)):\n        c_list[i].sort()\n    return c_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = set()\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list,i):\n            total = sum(j)\n            if (total in test_list) and (total!= sum(j)):\n                results.add(tuple(sorted(list(j))))\n    return results\n    \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sum"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = [tuple(x) for x in test_list]\n    comb = combinations(tuple_list,2)\n    comb_list = []\n    for each in comb:\n        comb_list.append(sum(each))\n    print(comb_list)\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    result = True\n    cnt = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            cnt = cnt + 1\n    if cnt % 2 == 0:\n        result = True\n    else:\n        result = False\n    return result \ndef primes(n) : \n    '''\n    Write a python function to check whether a given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    result = True\n    if n < 2:\n        result = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = False\n            break\n    return result \ndef find_divisors(n) : \n    '''\n    Write a python function to find all the divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    result = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result.append(i)\n    result.append(n)\n    return result \ndef perfect_number(n) : \n    '''\n    Write a python function to check whether a given number is perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    result = True\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    if sum == n:\n        result = True\n    else:\n        result = False\n    return result \ndef perfect_number_2(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_3(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            print i \n    return result \ndef perfect_number_4(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_5(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_6(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_7(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_8(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_9(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_10(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_11(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_12(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_13(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_14(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if perfect_number(i) == True:\n            result.append(i)\n    return result \ndef perfect_number_15(n) : \n    '''\n    Write a python function to find all the perfect number up to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    result = []\n    for i in range("
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(int(n / i))\n    return len(divisors)\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            divisors +=1\n    if divisors % 2 == 0 :\n        return True\n    else :\n        return False\ndef test_count_divisors() :\n    assert count_divisors(1) == True\n    assert count_divisors(2) == True\n    assert count_divisors(3) == True\n    assert count_divisors(4) == False\n    assert count_divisors(5) == True\n    assert count_divisors(6) == False\n    assert count_divisors(7) == True\n    assert count_divisors(8) == True\n    assert count_divisors(9) == True\n    assert count_divisors(10) == False\ndef are_prime(n):\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    for i in range(5,math.ceil(math.sqrt(n))):\n        if n%i == 0:\n            return False\n    return True\ndef test_are_prime() :\n    assert are_prime(2) == True\n    assert are_prime(3) == True\n    assert are_prime(4) == False\n    assert are_prime(6) == True\n    assert are_prime(8) == False\n    assert are_prime(9) == True\n    assert are_prime(10) == False\ndef primes(n):\n    '''\n    Write a python function to find all the primes in a range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    for i in range(2,n):\n        if are_prime(i) == True :\n            print(i)\ndef test_primes() :\n    assert primes(1) == None\n    assert primes(2) == None\n    assert primes(3) == 2\n    assert primes(4) == 3\n    assert primes(5) == 5\n    assert primes(6) == 7\n    assert primes(8) == 11\n    assert primes(9) == 13\n    assert primes(10) == 17\n    assert primes(100) == 97\ndef is_vowel(c):\n    '''\n    Write a python function to check whether a character is a vowel or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' :\n        return True\n    return False\ndef test_is_vowel() :\n    assert is_vowel('a') == True\n    assert is_vowel('b') == False\n    assert is_vowel('c') == True\n    assert is_vowel('d') == False\n    assert is_vowel('e') == True\n    assert is_vowel('f') == False\n    assert is_vowel('g') == False\n    assert is_vowel('h') == False\n    assert is_vowel('i') == True\n    assert is_vowel('j') == False\n    assert is_vowel('k') == False\n    assert is_vowel('l') == True\n    assert is_vowel('m') == False\n    assert is_vowel('n') == False\n    assert is_vowel('o') == True\n    assert is_vowel('p') == False\n    assert is_vowel('q') == False\n    assert is_vowel('r') == True\n    assert is_vowel('s') == True\n    assert is_vowel('t') == False\n    assert is_vowel('u') == True\n    assert is_vowel('v') == False\n    assert is_vowel('w') == False\n    assert is_vowel('x') == False\n    assert is_vowel('y') == False\n    assert is_vowel('z') == False\ndef is_consonant(c):\n    '''\n    Write a python function to check whether a character is a consonant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if c == 'b' or c == 'c' or c == 'd' or c == 'f' or c == 'g' or c == 'h' or c == 'j' or c == 'k' or c == 'l' or c =='m' or c == 'n' or c == 'p' or c == 'q' or c == 'r' or c =='s' or c == 't' or c == 'v' or c == 'w' or c == 'x' or c == 'y' or c == 'z':\n        return True\n    return False\ndef test_is_consonant() :\n    assert is_consonant('a') == False\n    assert is_consonant('b') == True\n    assert is_consonant('c') == True\n    assert is_consonant('d') == True\n    assert is_consonant('e') == False\n    assert is_consonant('f') == True\n    assert is_consonant('g') == True\n    assert is_consonant('h') == True\n    assert is_consonant('i') == False\n    assert is_consonant('j') == False\n    assert is_consonant('k') == False\n    assert is_consonant('l') == True\n    assert is_consonant('m') == True\n    assert is_consonant('n') == True\n    assert is_consonant('o') == False\n    assert is_consonant('p') == True\n    assert is_consonant('q') == True\n    assert is_consonant('r') == True\n    assert is_consonant('s') == True\n    assert is_consonant('t') == True\n    assert is_consonant('u') == False\n    assert is_consonant('v') == False\n    assert is_consonant('w') == False\n    assert is_consonant('x') == False\n    assert is_consonant('y') == False\n    assert is_consonant('z') == False\ndef is_numeric(c):\n    '''\n    Write a python function to check whether a character is a numeric or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9' :\n        return True\n    return False\ndef test_is_numeric() :\n    assert is_numeric('a') == False\n    assert is_numeric('b') == False\n    assert is_numeric('c') == True\n    assert is_numeric('d') == False\n    assert is_numeric('e') == True\n    assert is_numeric('f') == False\n    assert is_numeric('g') == True\n    assert is_numeric('h') == True\n    assert is_numeric('i') == True\n    assert is_numeric('j') == False\n    assert is_numeric('k') == False\n    assert is_numeric('l') == True\n    assert is_numeric('m') == True\n    assert is_numeric('n') == True\n    assert is_numeric('o') == False\n    assert is_numeric('p') == True\n    assert is_numeric('q') == True\n    assert i"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0: \n        return -1\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            count += 1\n    return count\n    \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_sum = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            divisor_sum += i\n    if divisor_sum % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, math.ceil(math.sqrt(n))) : \n        if n%i == 0 :\n            divisors += 2\n    if divisors%2 == 0 : \n        return \"even\"\n    else :\n        return \"odd\"\n    \ndef next_number(num) : \n    '''\n    Write a python function to calculate the next number from the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    return num+1\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if (n / i) == i:\n                count += 1\n            else:\n                count += 2\n    return count\ndef is_pentagonal(n) : \n    '''\n    Write a python function to check whether a number is pentagonal number or not https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    return (((1 + math.sqrt(1 + 24*n)) / 6)) == math.floor(math.sqrt(1 + 24*n))\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # divisors = 0\n    # for i in range(1, n + 1) : \n    #     if (n % i == 0) :\n    #         divisors += 1\n    #     if (i == n / i) : \n    #         divisors -= 1\n    # return divisors % 2 == 0\n    return n % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) :\n        return 1\n    divisors = 1\n    for i in range(2,n) :\n        if n%i == 0 :\n            divisors += 1\n    return divisors\ndef find_divisors(n) : \n    '''\n    Write a python function to find the list of divisors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if (n == 1) :\n        return 1\n    divisors = [1]\n    for i in range(2,int(math.sqrt(n)+1)) :\n        if n%i == 0 :\n            divisors.append(i)\n            divisors.append(int(n/i))\n    divisors.sort()\n    divisors = list(set(divisors))\n    divisors.remove(1)\n    divisors.remove(n)\n    return divisors\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    total = 0\n    current = 0\n    count = 1\n    for i in xrange(len(arr)):\n        total += arr[i]\n        if (i + 1) % 2 == 0:\n            current += arr[i]\n        if i >= 2 and (i + 1) % 2 == 1:\n            if count == 1:\n                total += arr[i - 1]\n                current += arr[i - 1]\n            else:\n                total += (arr[i - 1] - arr[i - 2])\n                current += arr[i - 1] - arr[i - 2]\n            count = 0\n        if i >= 3 and (i + 1) % 2 == 0 and count == 0:\n            total += arr[i - 1] - arr[i - 2]\n            current += arr[i - 1] - arr[i - 2]\n            count = 1\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2 == 1:\n                total_sum += sum(arr[i:j+1])\n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # base case\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    def sum_of_odd_length_subarrays(arr):\n        '''\n        Given an array of integers, return the sum of all odd-length subarrays.\n        '''\n        arr_sum = 0\n        for i in range(0, len(arr)):\n            for j in range(i, len(arr), 2):\n                arr_sum += sum(arr[i:j])\n        return arr_sum\n    \n    return sum_of_odd_length_subarrays(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(len(arr[i:j+1]) % 2 == 1):\n                sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    result = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    m = len(arr)\n    ans = 0\n    for i in range(m):\n        if (i+1) % 2 == 1:\n            ans += sum(arr[i:])\n    return ans\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) % 2 == 0:\n        return 0\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = sum(arr)\n    res = s\n    for i in range(len(arr)):\n        s = s - arr[i]\n        s = s + arr[i]\n        res = res + s\n    return res\n    \ndef find_sum(arr):\n    '''\n    Write a python function to find the sum of all subarrays whose elements can be added upto a given value. https://www.geeksforgeeks.org/sum-of-subarrays-with-given-sum/\n    '''\n    s = 0\n    res = 0\n    for i in range(len(arr)):\n        s = s + arr[i]\n        res = res + s\n    return res\n    \ndef find_max_consecutive_ones(arr):\n    '''\n    Write a python function to find the maximum consecutive ones in an array. https://www.geeksforgeeks.org/maximum-number-of-consecutive-ones/\n    '''\n    count = 1\n    res = 0\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1] == 1:\n            count = count + 1\n        else:\n            res = max(count,res)\n            count = 1\n    res = max(count,res)\n    return res\n    \ndef longest_consecutive_ones(arr):\n    '''\n    Write a python function to find the length of the longest consecutive ones in an array. https://www.geeksforgeeks.org/longest-consecutive-ones-in-an-array/\n    '''\n    n = len(arr)\n    count = 1\n    res = 1\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            count = count + 1\n            if count > res:\n                res = count\n        else:\n            count = 1\n    return res\n    \ndef find_rotation_point(arr):\n    '''\n    Write a python function to find the index of the point at which the array is rotated. https://www.geeksforgeeks.org/find-the-point-at-which-the-array-is-rotated/\n    '''\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = (start + end)//2\n        if (mid == 0 and arr[mid] > arr[mid+1]) or (mid == len(arr) - 1 and arr[mid] < arr[mid-1]):\n            return mid\n        elif arr[mid] < arr[mid-1]:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\n    \ndef find_rotation_point_2(arr):\n    '''\n    Write a python function to find the index of the point at which the array is rotated. https://www.geeksforgeeks.org/find-the-point-at-which-the-array-is-rotated/\n    '''\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] > arr[mid+1]:\n            return mid\n        elif arr[mid] < arr[mid-1]:\n            return mid - 1\n        else:\n            if arr[mid] > arr[0]:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return -1\n    \ndef find_rotation_point_3(arr):\n    '''\n    Write a python function to find the index of the point at which the array is rotated. https://www.geeksforgeeks.org/find-the-point-at-which-the-array-is-rotated/\n    '''\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = (start + end)//2\n        if mid < len(arr) - 1 and arr[mid] > arr[mid+1]:\n            return mid\n        elif mid > 0 and arr[mid] < arr[mid-1]:\n            return mid - 1\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \ndef find_rotation_point_4(arr):\n    '''\n    Write a python function to find the index of the point at which the array is rotated. https://www.geeksforgeeks.org/find-the-point-at-which-the-array-is-rotated/\n    '''\n    if len(arr) <= 1:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if mid < len(arr) - 1 and arr[mid] > arr[mid+1]:\n            return mid\n        elif mid > 0 and arr[mid] < arr[mid-1]:\n            return mid - 1\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \ndef find_rotation_point_5(arr):\n    '''\n    Write a python function to find the index of the point at which the array is rotated. https://www.geeksforgeeks.org/find-the-point-at-which-the-array-is-rotated/\n    '''\n    if len(arr) <= 1:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if mid < len(arr) - 1 and arr[mid] > arr[mid+1]:\n            return mid\n        elif mid > 0 and arr[mid] < arr[mid-1]:\n            return mid - 1\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \ndef find_rotation_point_6(arr):\n    '''\n    Write a python function to find the index of the point at which the array is rotated. https://www.geeksforgeeks.org/find-the-point-at-which-the-array-is-rotated/\n    '''\n    if len(arr) <= 1:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if mid < len(arr) - 1 and arr[mid] > arr[mid+1]:\n            return mid\n        elif mid > 0 and arr[mid] < arr[mid-1]:\n            return mid - 1\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \ndef find_rotation_point_7(arr):\n    '''\n    Write a python function to find the index of the point at which the array is rotated. https://www.geeksforgeeks.org/find-the-point-at-which-the-array-is-rotated/\n    '''\n    if len(arr) <= 1:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if mid < len(arr) - 1 and arr[mid] > arr[mid+1]:\n            return mid\n        elif mid > 0 and arr[mid] < arr[mid-1]:\n            return mid - 1\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \ndef find_rotation_point_8(arr):\n    '''\n    Write a python function to find the index of the point at which the array is rotated. https://www.geeksforgeeks.org/find-the-point-at-which-the-array-is-rotated/\n    '''\n    if len(arr) <= 1:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if mid < len(arr) - 1 and arr[mid] > ar"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        curr_sum = arr[i]\n        for j in range(i+1,len(arr)):\n            curr_sum += arr[j]\n            if curr_sum % 2!= 0:\n                total_sum += curr_sum\n    return total_sum\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (g - b) / delta % 6\n    elif c_max == g:\n        h = (b - r) / delta + 2\n    elif c_max == b:\n        h = (r - g) / delta + 4\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta / c_max\n    v = c_max\n    return [h, s, v]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def get_rgb_value(val, v_max=255):\n        return v_max if val > v_max else val\n    \n    r, g, b = get_rgb_value(r), get_rgb_value(g), get_rgb_value(b)\n    v = max(r, g, b)\n    \n    d = v - min(r, g, b)\n    if d == 0:\n        h = 0\n    elif r == v:\n        h = (g - b) / d\n    elif g == v:\n        h = 2 + (b - r) / d\n    else:\n        h = 4 + (r - g) / d\n    \n    h = get_rgb_value(h)\n    \n    return [h, s, v]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0.0:\n        h = 0\n    elif c_max == r:\n        h = (g - b) / delta\n    elif c_max == g:\n        h = 2.0 + (b - r) / delta\n    else:\n        h = 4.0 + (r - g) / delta\n    h *= 60.0\n    if h < 0.0:\n        h += 360.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb = [r,g,b]\n    h,s,v = colorsys.rgb_to_hsv(r,g,b)\n    return [h,s,v]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Intialize r, g, b values\n    r, g, b = r/255.0, g/255.0, b/255.0\n    # h\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax-cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g-b)/diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b-r)/diff) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r-g)/diff) + 240) % 360\n    # If r == g == b, set h to 0\n    if cmax == 0:\n        h = 0\n    # s\n    if diff == 0:\n        s = 0\n    else:\n        s = (diff/cmax) * 100\n    # v\n    v = cmax*100\n    return [int(h), int(s), int(v)]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax-cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g-b)/delta\n    elif cmax == g:\n        h = 2 + (b-r)/delta\n    else:\n        h = 4 + (r-g)/delta\n    h = h/6\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta/cmax\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_normalized = [r/255.0,g/255.0,b/255.0]\n    hsv_normalized = [0,0,0]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (g - b) / delta % 6\n    elif c_max == g:\n        h = (b - r) / delta + 2\n    elif c_max == b:\n        h = (r - g) / delta + 4\n    h = h * 60\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta / c_max\n    v = c_max\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return (list1[0] * list1[-1])\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 1\n    odd_num = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_num = even_num * num\n        else:\n            odd_num = odd_num * num\n    print(\"The product of the first even and odd number is \" + str(even_num * odd_num))\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # print(list1)\n    num = 1\n    for i in list1:\n        if i%2 == 0:\n            num *= i\n        else:\n            num *= i\n    print(num)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #list1 = [1,2,3,4,5]\n    list1.sort()\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product = product * num\n        else:\n            product = product / num\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if not list1:\n        return None\n    even_product = 1\n    odd_product = 1\n    for number in list1:\n        if number % 2 == 0:\n            even_product *= number\n        else:\n            odd_product *= number\n    return even_product, odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return reduce(lambda x,y:x*y, [num for num in list1 if num%2 == 0])*reduce(lambda x,y:x*y, [num for num in list1 if num%2!= 0])\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if not isinstance(list1, list):\n        print(\"Enter only list\")\n    else:\n        even_product = 1\n        odd_product = 1\n        for i in list1:\n            if i % 2 == 0:\n                even_product *= i\n            else:\n                odd_product *= i\n        return (even_product, odd_product)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product = even_product * num\n        else:\n            odd_product = odd_product * num\n    return even_product * odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    mul_e=1\n    mul_o=1\n    for item in list1:\n        if item % 2 == 0:\n            mul_e *= item\n        else:\n            mul_o *= item\n    return mul_e, mul_o\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #Time: O(n)\n    #Space: O(1)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str)\n    return tuple(int(x) for x in test_tuple)\n    \nprint(tuple_str_int('(1, 2, 3)'))"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str)\n    return tuple(map(int, test_tuple))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for i in range(0,len(str_list)):\n        int_list.append(int(str_list[i]))\n    return tuple(int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    l = [int(x) for x in test_str[1:-1].split(',')]\n    return tuple(l)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int,test_str.split('-')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    num_list = list(test_str)\n    num_list = [int(x) for x in num_list]\n    return tuple(num_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    num_of_strings = len(test_str)\n    num_of_numbers = len(test_str) / 3\n    numbers = []\n    for x in range(0, num_of_numbers):\n        numbers.append(int(test_str[3 * x:3 * (x + 1)]))\n    return tuple(numbers)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    string = test_str.split(',')\n    num_list = [int(i) for i in string]\n    return tuple(num_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if len(test_str) == 0:\n        return 0\n    str_list = test_str.split(')')\n    tuple_list = []\n    for str in str_list:\n        int_list = []\n        for s in str:\n            if s!= '(':\n                int_list.append(s)\n        if len(int_list) == 0:\n            tuple_list.append(0)\n        else:\n            tuple_list.append(int(''.join(int_list)))\n    return tuple(tuple_list)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    i = len(a)-1\n    while a[i] < x:\n        i -= 1\n    a[i+1] = x\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return -1\n    low, high = 0, len(a)-1\n    while low<=high:\n        mid = low + (high - low) // 2\n        if a[mid] == x:\n            return mid\n        if a[mid] < x:\n            low = mid+1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if a[i] == x:\n        return i\n    if a[i] > x:\n        return i\n    if i == 0:\n        return 0\n    return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = 0\n    while i < len(a) and a[i] < x:\n        i += 1\n    return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = len(a) - 1\n    while i >= 0 and a[i] > x:\n        i -= 1\n    return i\ndef binary_search(a, x):\n    '''\n    Write a function to search a value in a sorted array with duplicates.\n    Return the index of the first occurrence of the target or return -1 if target is not in array.\n    '''\n    i = 0\n    while i < len(a) and a[i]!= x:\n        i += 1\n    if i < len(a):\n        return i\n    else:\n        return -1\ndef interval_intersect(a, b):\n    '''\n    Write a function to determine if two intervals overlap.\n    '''\n    if a[1] < b[0] or b[1] < a[0]:\n        return False\n    else:\n        return True\ndef k_interval_maximum(k, intervals):\n    '''\n    Find the maximum value among k intervals of an array.\n    Input: An array of k intervals in the format [(a_1, b_1), (a_2, b_2),..., (a_k, b_k)]\n    Output: The maximum value among the k intervals.\n    '''\n    intervals = sorted(intervals, key = lambda x: x[1])\n    cumulative_max = [0]\n    for a, b in intervals:\n        cumulative_max.append(max(cumulative_max[-1], a))\n    return cumulative_max[-1]\ndef optimal_binary_search(a, x):\n    '''\n    Write a function to find the optimal interval of the two elements in a sorted array.\n    The intervals are represented by tuples of the form (start, end).\n    '''\n    n = len(a)\n    i = bisect.bisect_right(a, x)\n    if i == 0 or i == n:\n        return -1\n    else:\n        return (i - 1, i)\ndef max_subarray_quadratic(a):\n    '''\n    Find the maximum contiguous subarray of a list of positive integers.\n    A subarray is a contiguous part of an array.\n    '''\n    n = len(a)\n    curr_sum = max_sum = a[0]\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\ndef max_subarray_linear(a):\n    '''\n    Find the maximum contiguous subarray of a list of positive integers.\n    A subarray is a contiguous part of an array.\n    '''\n    n = len(a)\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\ndef max_subarray_divide_and_conquer(a, lo, hi):\n    '''\n    Find the maximum contiguous subarray of a list of positive integers.\n    A subarray is a contiguous part of an array.\n    '''\n    if lo >= hi:\n        return 0\n    elif lo == hi - 1:\n        return a[lo]\n    else:\n        mid = (lo + hi) / 2\n        left_sum = max_subarray_divide_and_conquer(a, lo, mid)\n        right_sum = max_subarray_divide_and_conquer(a, mid, hi)\n        cross_sum = max_cross_subarray_divide_and_conquer(a, lo, mid, hi)\n        return max(left_sum, right_sum, cross_sum)\ndef max_cross_subarray_divide_and_conquer(a, lo, mid, hi):\n    '''\n    Find the maximum contiguous subarray of a list of positive integers.\n    A subarray is a contiguous part of an array.\n    '''\n    left_sum = right_sum = 0\n    left_curr, right_curr = mid, mid + 1\n    left_sum = a[left_curr]\n    right_sum = a[right_curr]\n    curr_sum = left_sum + right_sum\n    max_sum = curr_sum\n    for i in range(lo, mid):\n        curr_sum += a[i] - a[left_curr]\n        left_curr = left_insertion(a, a[i])\n        left_sum += a[left_curr]\n        max_sum = max(max_sum, curr_sum)\n    for i in range(mid, hi):\n        curr_sum += a[i] - a[right_curr]\n        right_curr = right_insertion(a, a[i])\n        right_sum += a[right_curr]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\ndef max_subarray_dynamic(a):\n    '''\n    Find the maximum contiguous subarray of a list of positive integers.\n    A subarray is a contiguous part of an array.\n    '''\n    n = len(a)\n    max_sum = a[0]\n    curr_sum = a[0]\n    start = end = 0\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i - (i - end)\n            end = i\n    return max_sum, start, end\ndef max_subarray_divide_and_conquer_wrapper(a, lo, hi):\n    '''\n    Find the maximum contiguous subarray of a list of positive integers.\n    A subarray is a contiguous part of an array.\n    '''\n    if lo >= hi:\n        return 0, -1, -1\n    elif lo == hi - 1:\n        return a[lo], lo, hi\n    else:\n        mid = (lo + hi) / 2\n        left_sum, left_lo, left_hi = max_subarray_divide_and_conquer_wrapper(a, lo, mid)\n        right_sum, right_lo, right_hi = max_subarray_divide_and_conquer_wrapper(a, mid, hi)\n        cross_sum, cross_lo, cross_hi = max_cross_subarray_divide_and_conquer_wrapper(a, lo, mid, hi)\n        if left_sum >= right_sum and left_sum >= cross_sum:\n            return left_sum, left_lo, left_hi\n        elif right_sum >= left_sum and right_sum >= cross_sum:\n            return right_sum, right_lo, right_hi\n        else:\n            return cross_sum, cross_lo, cross_hi\ndef max_cross_subarray_divide_and_conquer_wrapper(a, lo, mid, hi):\n    '''\n    Find the maximum contiguous subarray of a list of positive integers.\n    A subarray is a contiguous part of an array.\n    '''\n    left_sum = right_sum = 0\n    left_curr, right_curr = mid, mid + 1\n    left_sum = a[left_curr]\n    right_sum = a[right_curr]\n    curr_sum = left_sum + right_sum\n    max_sum = curr_sum\n    for i in range(lo, mid):\n        curr_sum += a[i] - a[left_curr]\n        left_curr = left_insertion(a, a[i])\n        left_sum += a[left_curr]\n        max_sum = max(max_sum, curr_sum)\n    for i in range(mid, hi):\n        curr_sum += a["
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi-lo)//2\n        if x < a[mid]:\n            hi = mid\n        elif x > a[mid]:\n            lo = mid+1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    def bisect_right(a, x):\n        lo = 0\n        hi = len(a)\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if x > a[mid]:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    if l == 0:\n        return 0\n    if a[l - 1] < x:\n        return l\n    else:\n        return bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = len(a)\n    while i > 0:\n        if a[i] < x:\n            a[i] = x\n            return\n        i -= 1\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a(.)b{3}a\"\n    return bool(re.match(pattern, text))\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'(?=(a){3}b)'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a{3}b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a{2}b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a{1}b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_one_or_other(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_two(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a[1-9]|b\")\n    if pattern.search(text):\n        return \"match found\"\n    else:\n        return \"match not found\"\ndef text_match_neigbor_twenty"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('ab{3}', text)\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    return re.search('ab{2}', text)\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab{1}', text)\ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero 'b'.\n    '''\n    return re.search('ab{0}', text)\ndef text_match_non_capturing(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return re.search('ab?', text)\ndef text_match_non_capturing_text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    return r"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab'\n    result = re.search(pattern, text)\n    return result is not None\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('ab{3}', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_2(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_4(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_5(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_6(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_7(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_8(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_9(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_10(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_11(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_12(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_13(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_14(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_15(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_16(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_17(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_18(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_19(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_20(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_21(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_22(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.search('^ab{3,}$', text)\n    if matches:\n        print(matches.group())\n    else:\n        print('No matches found!')\ndef text_match_no_newline_23(text):\n    '''\n    Write a function that matches a string that has an a followe"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b\\w{3}')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print 'No match'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match('[a]+[b]+',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_three_1(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_2(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_3(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_4(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_5(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_6(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_7(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_8(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_9(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_10(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_11(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_12(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_13(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_14(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_15(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_16(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_17(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_18(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_19(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_20(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}', re.DOTALL)\n    match = pattern.match(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef text_match_three_21(text):\n    ''"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Method 1\n    # lst_str = ''\n    # for each_str in test_list:\n    #     lst_str = lst_str + each_str\n    # return tuple(lst_str) + test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list[:]\n    new_list.append(test_str)\n    return new_list\n    \ndef is_prime(n):\n    '''\n    Write a function that takes a non-negative integer as a parameter\n    and returns True if the integer is prime and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef get_prime_factors(n):\n    '''\n    Write a function that takes a non-negative integer as a parameter\n    and returns a list with all of the prime factors of the integer\n    in ascending order.\n    '''\n    factors = []\n    if n == 0:\n        return factors\n    if is_prime(n):\n        factors.append(n)\n        return factors\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                if n // i!= i:\n                    factors.append(n//i)\n        return factors\n        \ndef are_reversed(word1, word2):\n    '''\n    Write a function to check if two strings are reverse of each other.\n    '''\n    if word1 == word2[::-1]:\n        return True\n    else:\n        return False\n        \ndef are_permutations(word1, word2):\n    '''\n    Write a function that takes two strings as parameters and returns\n    True if the strings are permutations of each other and False otherwise.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                if word1.count(word1[i])!= word2.count(word2[i]):\n                    return False\n    return True\n    \ndef are_permutations_2(word1, word2):\n    '''\n    Write a function that takes two strings as parameters and returns\n    True if the strings are permutations of each other and False otherwise.\n    '''\n    return sorted(word1) == sorted(word2)\n    \ndef find_anagram(word1, word2):\n    '''\n    Write a function that takes two strings as parameters and returns\n    True if the strings are anagrams of each other and False otherwise.\n    '''\n    if word1 == word2:\n        return True\n    else:\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                if word1.count(word1[i])!= word2.count(word2[i]):\n                    return False\n    return True\n    \ndef find_anagram_2(word1, word2):\n    '''\n    Write a function that takes two strings as parameters and returns\n    True if the strings are anagrams of each other and False otherwise.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        letters = []\n        for letter in word1:\n            if letter in letters:\n                return False\n            else:\n                letters.append(letter)\n        for letter in word2:\n            if letter in letters:\n                return False\n            else:\n                letters.append(letter)\n    return True\n    \ndef get_combinations(s, k):\n    '''\n    Write a function that takes a string and a non-negative integer as parameters\n    and returns a list of all possible k length strings that can be made from\n    the string.\n    '''\n    if k == 0:\n        return [[]]\n    elif k > 0:\n        first_part = get_combinations(s, k - 1)\n        second_part = []\n        for i in range(len(first_part)):\n            second_part.append(new_tuple(first_part[i], s[0]))\n        return first_part + second_part\n    \ndef get_permutations(s):\n    '''\n    Write a function that takes a string as parameter and returns a list of all\n    possible permutations of the string.\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        first_part = get_permutations(s[1:])\n        second_part = []\n        for i in range(len(first_part)):\n            second_part.append(new_tuple(first_part[i], s[0]))\n        return first_part + second_part\n    \ndef get_palindrome_permutations(s):\n    '''\n    Write a function that takes a string as parameter and returns a list of all\n    possible permutations of the string that is a palindrome.\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        first_part = get_palindrome_permutations(s[1:])\n        second_part = []\n        for i in range(len(first_part)):\n            if are_reversed(first_part[i], s[0]):\n                second_part.append(new_tuple(first_part[i], s[0]))\n        return first_part + second_part\n    \ndef get_letter_count(s):\n    '''\n    Write a function that takes a string as parameter and returns a dictionary\n    with the keys being the letters of the string and the values being the number\n    of times that letter is in the string.\n    '''\n    count = {}\n    for letter in s:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    return count\n    \ndef is_isogram(s):\n    '''\n    Write a function that takes a string as parameter and returns True if the\n    string is an isogram and False otherwise. An isogram is a word that is\n    made up of letters that are each used once.\n    '''\n    count = get_letter_count(s)\n    for key in count:\n        if count[key] > 1:\n            return False\n    return True\n    \ndef get_all_combinations(s, k):\n    '''\n    Write a function that takes a string and a non-negative integer as parameters\n    and returns a list of all possible k length strings that can be made from\n    the string.\n    '''\n    if k == 0:\n        return [[]]\n    elif k > 0:\n        first_part = get_all_combinations(s, k - 1)\n        second_part = []\n        for i in range(len(first_part)):\n            second_part.append(new_tuple(first_part[i], s[0]))\n        return first_part + second_part\n    \ndef get_all_permutations(s):\n    '''\n    Write a function that takes a string as parameter and returns a list of all\n    possible permutations of the string.\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        first_part = get_all_permutations(s[1:])\n        second_part = []\n        for i in range(len(first_part)):\n            second_part.append(new_tuple(first_part[i], s[0]))\n        return first_part + second_part\n    \ndef get_all_palindrome_permutations(s):\n    '''\n    Write a function that takes a string as parameter and returns a list of all\n    possible permutations of the string that is a palindrome.\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        first_part = get_all_palindrome_permutations(s[1:])\n        second_part = []\n        for i in range(len(first_part)):\n            if are_palindrome(first_part[i]):\n                second_part.append(new_tuple(first_part[i], s[0]))\n        return first_part + second_part\n    \ndef are_palindrome(s):\n    '''\n    Write a function that takes a string as parameter and returns True if the\n    string is a palindrome an"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    index = test_list.index(test_str)\n    return test_list[index:] + test_list[:index]\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    a, b = test_str.split(',')\n    a = int(a)\n    b = int(b)\n    new_list = []\n    for i in test_list:\n        new_list.append(i * a)\n    new_list.append(b)\n    return tuple(new_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # your code here\n    return test_list + tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    temp = test_str.split(',')\n    for i in temp:\n        test_list.append(int(i))\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for item in test_list:\n        if item!= test_str:\n            new_list.append(item)\n    new_list.append(test_str)\n    new_tuple = tuple(new_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_str_list = test_str.split(',')\n    new_tuple = tuple(test_list)\n    new_tuple = new_tuple[:4] + tuple(test_str_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    return tuple(test_list), tuple(test_str)\n    \n    \ndef new_dict(test_list, test_str):\n    '''\n    Write a function to create a new dictionary from the given string and list.\n    '''\n    \n    return dict(zip(test_list, test_str)), dict(zip(test_str, test_list))\n    \n    \ndef new_set(test_list, test_str):\n    '''\n    Write a function to create a new set from the given string and list.\n    '''\n    \n    return set(test_list), set(test_str)\n    \n    \ndef new_bool(test_list, test_str):\n    '''\n    Write a function to create a new bool from the given string and list.\n    '''\n    \n    return bool(test_list), bool(test_str)\n    \n    \ndef main():\n    '''\n    Create all the new data types needed for the assignment\n    '''\n    \n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    test_str = 'abcdefghij'\n    \n    new_tuple = new_tuple(test_list, test_str)\n    print(new_tuple)\n    \n    new_dict = new_dict(test_list, test_str)\n    print(new_dict)\n    \n    new_set = new_set(test_list, test_str)\n    print(new_set)\n    \n    new_bool = new_bool(test_list, test_str)\n    print(new_bool)\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    output = True\n    for i in range(0,len(nums),2):\n        if nums[i] % 2!= 0:\n            output = False\n            break\n    return output\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if(nums[i]%2!=0):\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    assert isinstance(nums, list)\n    \n    for idx, elem in enumerate(nums):\n        if (idx + 1) % 2 == 0 and elem % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if type(nums) is not list:\n        return False\n    elif len(nums) is 0:\n        return True\n    elif len(nums) is 1:\n        return True\n    else:\n        for i in range(len(nums)):\n            if (i+1) % 2 == 0 and (nums[i] % 2!= 0):\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return sum(nums[0::2])==sum(nums[1::2])\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2==1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([nums[i]%2==0 for i in range(0, len(nums), 2)])\n    \ndef almost_equal(num1, num2):\n    '''\n    Write a python function to check if two numbers are almost equal or not.\n    '''\n    return abs(num1-num2)<=1e-7\n    \ndef check_word(string, word):\n    '''\n    Write a python function to check if a word is a part of a given string.\n    '''\n    return string.find(word)>=0\n    \ndef is_anagram(string1, string2):\n    '''\n    Write a python function to check if two strings are anagram of each other.\n    '''\n    return sorted(string1)==sorted(string2)\n    \ndef check_string(string1, string2):\n    '''\n    Write a python function to check if a string is permutation of another string.\n    '''\n    return sorted(string1)==sorted(string2)\n    \ndef find_anagram(string1, string2):\n    '''\n    Write a python function to find anagram of two strings.\n    '''\n    return sorted(string1)==sorted(string2)\n    \ndef find_longest_common_prefix(string1, string2):\n    '''\n    Write a python function to find the longest common prefix of two strings.\n    '''\n    return ''.join(sorted(string1)[:sorted(string1).index(sorted(string2)[0])])\n    \ndef find_maximum_common_substring(string1, string2):\n    '''\n    Write a python function to find the longest common substring of two strings.\n    '''\n    return ''.join(max(zip(string1, string2), key=len))\n    \ndef count_longest_common_prefix(string1, string2):\n    '''\n    Write a python function to count the longest common prefix of two strings.\n    '''\n    return len(find_longest_common_prefix(string1, string2))\n    \ndef count_common_letters(string1, string2):\n    '''\n    Write a python function to count the number of common letters between two strings.\n    '''\n    return len(find_longest_common_prefix(string1, string2))\n    \ndef convert_to_number(nums):\n    '''\n    Write a python function to convert a given string to number.\n    '''\n    return int(''.join([str(nums[i]) for i in range(len(nums))]))\n    \ndef swap_string(string1, string2):\n    '''\n    Write a python function to swap two consecutive characters in a string.\n    '''\n    return string2[:2] + string1[2:] + string2[:2] + string1[:2]\n    \ndef reverse_string(string1):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return string1[::-1]\n    \ndef is_palindrome(string1):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    return string1==string1[::-1]\n    \ndef is_anagram_of_palindrome(string1, string2):\n    '''\n    Write a python function to check if a string is an anagram of a palindrome.\n    '''\n    return sorted(string1)==sorted(string2)\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef fibonacci_number(n):\n    '''\n    Write a python function to compute the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci_number(n-1)+fibonacci_number(n-2)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \ndef has_digit(string1, digit):\n    '''\n    Write a python function to check whether a given string contains the given digit.\n    '''\n    return digit in [string1[i] for i in range(len(string1))]\n    \ndef same_frequency(num1, num2):\n    '''\n    Write a python function to check if two numbers have the same frequency of digits.\n    '''\n    return sorted(str(num1))==sorted(str(num2))\n    \ndef is_permutation(num1, num2):\n    '''\n    Write a python function to check if two numbers are permutations of each other.\n    '''\n    return sorted(str(num1))==sorted(str(num2))\n    \ndef find_missing_number(nums):\n    '''\n    Write a python function to find a missing number in a given list of integers.\n    '''\n    return (len(nums)*(len(nums)+1))/2-sum(nums)\n    \ndef palindrome_permutation(string1):\n    '''\n    Write a python function to check if a string is a permutation of a palindrome.\n    '''\n    return sorted(string1)==sorted(string1)[::-1]\n    \ndef is_anagram_of_pallindrome(string1, string2):\n    '''\n    Write a python function to check if a string is an anagram of a palindrome.\n    '''\n    return sorted(string1)==sorted(string2)\n    \ndef is_prime(num1):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if num1<=1:\n        return False\n    elif num1==2:\n        return True\n    elif num1%2==0:\n        return False\n    else:\n        return all(num1%i for i in range(3, int(num1**0.5+1), 2))\n    \ndef is_perfect_square(num1):\n    '''\n    Write a python function to check if a given number is a perfect square or not.\n    '''\n    if num1<0:\n        return False\n    else:\n        return num1**0.5==int(num1**0.5)\n    \ndef is_armstrong(num1):\n    '''\n    Write a python function to check if a given number is an armstrong number or not.\n    '''\n    sum=0\n    num=num1\n    while num>0:\n        sum+=num%10**(len(str(num)))\n        num/=10\n    return num1==sum\n    \ndef is_prime_power(num1):\n    '''\n    Write a python function to check if a given number is prime power or not.\n    '''\n    for i in range(2, int(num1**0.5)+1):\n        if num1%i==0:\n            return False\n    return True\n    \ndef is_perfect_power(num1):\n    '''\n    Write a python function to check if a given number is a perfect power or not.\n    '''\n    for i in range(2, int(num1**0.5)+1):\n        if num1%i==0:\n            return num1/i==i\n    return num1==i\n    \ndef prime_factors(num1):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    factors=[]\n    for i in range(2, int(num1**0.5)+1):\n        if num1%i==0:\n            while num1%i==0:\n                num1/=i\n                factors.append(i)\n    return factors\n    \ndef is_perfect(num1):\n    '''\n    Write a python function to check if a given number is perfec"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for x in test_tup:\n            if isinstance(x, tuple):\n                remove_nested(x)\n            else:\n                res.append(x)\n    else:\n        res.append(test_tup)\n    return tuple(res)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple([remove_nested(x) for x in test_tup])\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    return tuple(i for i in test_tup if i!= ())\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return tuple([])\n    else:\n        return tuple([v for v in test_tup if not isinstance(v, tuple)])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [(n) for n in test_tup if not isinstance(n, tuple)]\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    (a, b, c) = test_tup\n    return (a, c)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    i = 0\n    while i < len(test_tup):\n        if type(test_tup[i]) == tuple:\n            del test_tup[i]\n        else:\n            i += 1\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        return tuple([x for x in test_tup if type(x)!= tuple])\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    result_tup = []\n    \n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            result_tup.append(remove_nested(tup))\n        else:\n            result_tup.append(tup)\n    \n    return tuple(result_tup)\n    \n    \nassert remove_nested((1, (2, 3), (4, (5, 6)))) == (1, (2, 3), (4, (5, 6)))\nassert remove_nested((1, (2, 3), (4, (5, 6)))) == (1, (2, 3))\nassert remove_nested((1, (2, 3), (4, (5, 6)))) == (1,)\nassert remove_nested((1, (2, 3), (4, (5, 6)))) == (1, (2, 3), (4, (5, 6)))\nassert remove_nested((1, (2, 3), (4, (5, 6)), (6, (7, 8), (9, (10, 11), (12, (13, 14))))) == (1, (2, 3), (4, (5, 6)), (6, (7, 8), (9, (10, 11), (12, (13, 14)))))\nassert remove_nested((1, (2, 3), (4, (5, 6)), (6, (7, 8), (9, (10, 11), (12, (13, 14)))))) == (1, (2, 3), (4, (5, 6)), (6, (7, 8), (9, (10, 11), (12, (13, 14))))\nassert remove_nested(((1, 2, 3), (4, 5), (6, (7, 8), (9, (10, 11), (12, (13, 14))))) == ((1, 2, 3), (4, 5), (6, (7, 8), (9, (10, 11), (12, (13, 14)))))\nassert remove_nested(((1, 2, 3), (4, 5), (6, (7, 8), (9, (10, 11), (12, (13, 14)))))) == ((1, 2, 3), (4, 5), (6, (7, 8), (9, (10, 11), (12, (13, 14)))))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    list_tup = [element for element in test_tup if type(element)!= tuple]\n    return list_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i,list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []: \n        return 0\n    else: \n        return 1 + count_list(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    if input_list == []:\n        return 0\n    else:\n        return 1 + count_list(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_list = 0\n    if type(input_list) == int:\n        number_of_list = input_list\n    else:\n        number_of_list = len(input_list)\n    return number_of_list\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for list in input_list:\n        if isinstance(list, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if isinstance(input_list,list):\n        return 1 + count_list(input_list[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = start + (end-start)/2\n        if arr[mid] == x:\n            end = mid - 1\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x) if x in arr else None\n    \ndef search(arr,x):\n    '''\n    Write a python function to search an element in a sorted array.\n    '''\n    # Check if array is empty\n    if len(arr) == 0:\n        return -1\n    \n    # Traverse array to find element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    return len(arr)-bisect.bisect_right(arr,x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr = sorted(arr)\n    return arr.index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) < 1:\n        return -1\n    else:\n        l = len(arr)-1\n        while l >= 0:\n            if arr[l] == x:\n                return l\n            else:\n                l -= 1\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    return len(arr)-bisect.bisect(arr,-x)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    size = len(arr)\n    if size == 0:\n        return -1\n    if arr[size-1] == x:\n        return size-1\n    l = 0\n    r = size-1\n    while l<=r:\n        mid = (l+r)/2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid]<x:\n            l = mid+1\n        else:\n            r = mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    elif len(arr)==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return -1\n    else:\n        if arr[len(arr)-1]>=x:\n            return len(arr)-1\n        elif arr[len(arr)-1]<x:\n            return last(arr[:len(arr)-1],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    small=0\n    big=n-1\n    while small<big:\n        mid=(small+big)/2\n        if x==arr[mid]:\n            small=mid\n        elif x<arr[mid]:\n            big=mid-1\n        else:\n            small=mid+1\n    if small==big:\n        if arr[small]==x:\n            return small\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-1\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb18(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb19(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb20(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb21(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb22(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    Use negative lookbehind to not match the letter a\n    '''\n    pattern = r'(?<!a)a.*b'\n    if re.search(pattern, text):\n        return True\n    return False\ndef text_starta_endb23(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in '"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    result = re.search(pattern, text)\n    if result:\n        return True\n    return False\n    \ndef text_starta_endb_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    return False\n    \ndef text_starta_endb_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return True\n    return False\n    \ndef text_starta_endb_nocase_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    return False\n    \ndef text_starta_endb_regex_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    return False\n    \ndef text_starta_endb_regex_pos(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex_pos(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex_pos_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex_pos_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex_pos_regex_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex_pos_regex_pos(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex_pos_regex_pos_nocase(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b', re.IGNORECASE)\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    return False\n    \ndef text_starta_endb_regex_pos_regex_pos_regex_pos_regex_pos_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in '"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.match(text):\n        return 'Found a match'\n    else:\n        return 'Not matched'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(^a.+b$)'\n    if re.search(pattern, text):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab*')\n    if re.search(pattern, text):\n        return 'found a match!'\n    else:\n        return 'not matched!'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(\"^.+a.*b$\", text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r'a\\w*b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # text = re.match(r'[a-z]+b',text)\n    # if text:\n    #     print(text.group())\n    # else:\n    #     print(\"Nothing found\")\n    return re.search(r'[a-z]+b',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]b')\n    result = pattern.search(text)\n    return result\n    \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a$')\n    result = pattern.search(text)\n    return result\n    \ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=b)a')\n    result = pattern.search(text)\n    return result\n    \ndef text_endb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_starb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=b)a')\n    result = pattern.search(text)\n    return result\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]b')\n    result = pattern.search(text)\n    return result\n    \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a$')\n    result = pattern.search(text)\n    return result\n    \ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=b)a')\n    result = pattern.search(text)\n    return result\n    \ndef text_endb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_starb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=b)a')\n    result = pattern.search(text)\n    return result\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]b')\n    result = pattern.search(text)\n    return result\n    \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a$')\n    result = pattern.search(text)\n    return result\n    \ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=b)a')\n    result = pattern.search(text)\n    return result\n    \ndef text_endb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_starb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=b)a')\n    result = pattern.search(text)\n    return result\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]b')\n    result = pattern.search(text)\n    return result\n    \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a$')\n    result = pattern.search(text)\n    return result\n    \ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=b)a')\n    result = pattern.search(text)\n    return result\n    \ndef text_endb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_starb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=b)a')\n    result = pattern.search(text)\n    return result\n    \ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]b')\n    result = pattern.search(text)\n    return result\n    \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)b$')\n    result = pattern.search(text)\n    return result\n    \ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    ''"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for i in dict.values():\n        s += i\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # return sum(dict.values())\n    return reduce(lambda a,b:a+b, dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for k in dict.keys():\n        s += dict[k]\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if len(dict)==0:\n        return 0\n    if len(dict)==1:\n        return dict.values()[0]\n    else:\n        return dict.values()[0] + return_sum(dict.values()[1:])\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum += dict[x]\n    return sum\n    \ndef return_max(dict):\n    '''\n    Write function to find the max of all values in the given dictionary.\n    '''\n    max = 0\n    for x in dict:\n        if x > max:\n            max = x\n    return max\n    \ndef return_max_index(dict):\n    '''\n    Write function to find the max value in the given dictionary and the index of this value.\n    '''\n    max = 0\n    max_index = 0\n    for x in dict:\n        if x > max:\n            max = x\n            max_index = x\n    return max_index\n    \ndef return_value(dict, value):\n    '''\n    Write function to find the value of a key from the given dictionary.\n    '''\n    return value\n    \ndef return_value_index(dict, value):\n    '''\n    Write function to find the index of a value from the given dictionary.\n    '''\n    index = 0\n    for x in dict:\n        if x == value:\n            return index\n        index += 1\n    \ndef return_item(dict, index):\n    '''\n    Write function to find the value and the key of the item with the given index.\n    '''\n    return dict[index]\n    \ndef return_item_index(dict, index):\n    '''\n    Write function to find the index and the value of the item with the given index.\n    '''\n    return index, dict[index]\n    \ndef return_all_keys(dict):\n    '''\n    Write function to find all keys from the given dictionary.\n    '''\n    keys = []\n    for x in dict:\n        keys.append(x)\n    return keys\n    \ndef return_all_values(dict):\n    '''\n    Write function to find all values from the given dictionary.\n    '''\n    values = []\n    for x in dict:\n        values.append(dict[x])\n    return values\n    \ndef return_all_items(dict):\n    '''\n    Write function to find all items from the given dictionary.\n    '''\n    items = []\n    for x in dict:\n        items.append((x, dict[x]))\n    return items\n    \ndef return_list_of_keys(dict):\n    '''\n    Write function to find all the keys from the given dictionary and put it into a list.\n    '''\n    list = []\n    for x in dict:\n        list.append(x)\n    return list\n    \ndef return_list_of_values(dict):\n    '''\n    Write function to find all the values from the given dictionary and put it into a list.\n    '''\n    list = []\n    for x in dict:\n        list.append(dict[x])\n    return list\n    \ndef return_list_of_items(dict):\n    '''\n    Write function to find all the items from the given dictionary and put it into a list.\n    '''\n    list = []\n    for x in dict:\n        list.append((x, dict[x]))\n    return list\n    \ndef print_list(list):\n    '''\n    Write function to print the given list in an elegant manner.\n    '''\n    print \"    \"\n    for x in list:\n        print x,\n    print \"\"\n    \ndef make_table(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_value(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_value_and_keys(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_value_and_index_and_values(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_value_and_index_and_items(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_value_and_index_and_items_and_values(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_value_and_index_and_items_and_values_and_keys(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_index_and_values_and_items(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_index_and_values_and_items_and_values(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_index_and_values_and_items_and_values_and_keys(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\"\n    \ndef make_table_with_index_and_values_and_items_and_values_and_items(dict, index):\n    '''\n    Write function to print the given dictionary in a neat table.\n    '''\n    print \"    \"\n    for x in range(index):\n        print \"---\",\n    print \"\"\n    for x in dict:\n        print x,\n        for y in range(index):\n            print \"---\",\n        print dict[x],\n    print \"\""
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = n\n    r = n\n    if n % 2 == 0:\n        l += 1\n    if n + 1 % 2 == 0:\n        r -= 1\n    return l + r\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if type(n)!= int:\n        return \"Enter an integer\"\n    if n < 1:\n        return \"Enter a positive integer\"\n    else:\n        sum = 0\n        for i in range(n+1):\n            if i % 2!= 0:\n                sum += i\n        return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n==0 or n==1:\n        return n\n    return n+sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    while n > 0:\n        s += n\n        n -= 2\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2!= 0:\n        return n\n    else:\n        return n + sum_odd(n + 2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    assert type(n)==int,'enter a positive integer'\n    assert n>=0,'enter a positive integer'\n    return (n*(n+1))/2\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n < 0:\n        return \"Sorry, natural numbers only!\"\n    for i in range(1,n,2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(l,r,2))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(l, r): \n        if i % 2 == 1: \n            s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr == []:\n        return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0\n    for i in arr:\n        res += i\n    return res\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Write your code here\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in arr:\n        sum +=i\n    return sum\n    \n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # sum = 0\n    # for x in arr:\n    #     sum += x\n    # return sum\n    return reduce(lambda x,y:x+y, arr)\n    "
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    summation = 0\n    for i in range(len(arr)):\n        summation += arr[i]\n    return summation\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d|n>>(32-d)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    s = 0\n    for i in range(d):\n        s <<= 1\n        s += n & 1\n        n >>= 1\n    return s\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Move the bits to the left until we reach the first 1\n    # eg.\n    #  0 -> 0001\n    #  1 -> 0010\n    #  2 -> 0100\n    #  3 -> 1000\n    #  4 -> 0101\n    #  5 -> 0110\n    #  6 -> 1100\n    #  7 -> 1101\n    #  8 -> 1110\n    #  9 -> 1111\n    #  10 -> 1010\n    #  11 -> 1011\n    #  12 -> 1100\n    #  13 -> 1101\n    #  14 -> 1110\n    #  15 -> 1111\n    #  16 -> 0100\n    #  17 -> 0101\n    #  18 -> 0110\n    #  19 -> 1000\n    #  20 -> 0101\n    #  21 -> 0110\n    #  22 -> 1100\n    #  23 -> 1101\n    #  24 -> 1110\n    #  25 -> 1111\n    #  26 -> 0100\n    #  27 -> 0101\n    #  28 -> 0110\n    #  29 -> 1000\n    #  30 -> 0101\n    #  31 -> 0110\n    #  32 -> 1100\n    #  33 -> 1101\n    #  34 -> 1110\n    #  35 -> 1111\n    #  36 -> 1010\n    #  37 -> 1011\n    #  38 -> 1010\n    #  39 -> 1011\n    #  40 -> 1010\n    #  41 -> 1011\n    #  42 -> 1010\n    #  43 -> 1011\n    #  44 -> 1010\n    #  45 -> 1011\n    #  46 -> 1010\n    #  47 -> 1011\n    #  48 -> 1010\n    #  49 -> 1011\n    #  50 -> 1010\n    #  51 -> 1011\n    #  52 -> 1010\n    #  53 -> 1011\n    #  54 -> 1010\n    #  55 -> 1011\n    #  56 -> 1010\n    #  57 -> 1011\n    #  58 -> 1010\n    #  59 -> 1011\n    #  60 -> 1010\n    #  61 -> 1011\n    #  62 -> 1010\n    #  63 -> 1011\n    #  64 -> 1010\n    #  65 -> 1011\n    #  66 -> 1010\n    #  67 -> 1011\n    #  68 -> 1010\n    #  69 -> 1011\n    #  70 -> 1010\n    #  71 -> 1011\n    #  72 -> 1010\n    #  73 -> 1011\n    #  74 -> 1010\n    #  75 -> 1011\n    #  76 -> 1010\n    #  77 -> 1011\n    #  78 -> 1010\n    #  79 -> 1011\n    #  80 -> 1010\n    #  81 -> 1011\n    #  82 -> 1010\n    #  83 -> 1011\n    #  84 -> 1010\n    #  85 -> 1011\n    #  86 -> 1010\n    #  87 -> 1011\n    #  88 -> 1010\n    #  89 -> 1011\n    #  90 -> 1010\n    #  91 -> 1011\n    #  92 -> 1010\n    #  93 -> 1011\n    #  94 -> 1010\n    #  95 -> 1011\n    #  96 -> 1010\n    #  97 -> 1011\n    #  98 -> 1010\n    #  99 -> 1011\n    #  100 -> 1010\n    #  101 -> 1011\n    #  102 -> 1010\n    #  103 -> 1011\n    #  104 -> 1010\n    #  105 -> 1011\n    #  106 -> 1010\n    #  107 -> 1011\n    #  108 -> 1010\n    #  109 -> 1011\n    #  110 -> 1010\n    #  111 -> 1011\n    #  112 -> 1010\n    #  113 -> 1011\n    #  114 -> 1010\n    #  115 -> 1011\n    #  116 -> 1010\n    #  117 -> 1011\n    #  118 -> 1010\n    #  119 -> 1011\n    #  120 -> 1010\n    #  121 -> 1011\n    #  122 -> 1010\n    #  123 -> 1011\n    #  124 -> 1010\n    #  125 -> 1011\n    #  126 -> 1010\n    #  127 -> 1011\n    #  128 -> 1010\n    #  129 -> 1011\n    #  130 -> 1010\n    #  131 -> 1011\n    #  132 -> 1010\n    #  133 -> 1011\n    #  134 -> 1010\n    #  135 -> 1011\n    #  136 -> 1010\n    #  137 -> 1011\n    #  138 -> 1010\n    #  139 -> 1011\n    #  140 -> 1010\n    #  141 -> 1011\n    #  142 -> 1010\n    #  143 -> 1011\n    #  144 -> 1010\n    #  145 -> 1011\n    #  146 -> 1010\n    #  147 -> 1011\n    #  148 -> 1010\n    #  149 -> 1011\n    #  150 -> 1010\n    #  151 -> 1011\n    #  152 -> 1010\n    #  153 -> 1011\n    #  154 -> 1010\n    #  155 -> 1011\n    #  156 -> 1010\n    #  157 -> 1011\n    #  158 -> 1010\n    #  159 -> 1011\n    #  160 -> 1010\n    #  161 -> 1011\n    #  162 -> 1010\n    #  163 -> 1011\n    #  164 -> 1010\n    #  165 -> 1011\n    #  166 -> 1010\n    #  167 -> 1011\n    #  168 -> 1010\n    #  169 -> 1011\n    #  170 -> 1010\n    #  171 -> 1011\n    #  172 -> 1010\n    #  173 -> 1011\n    #  174 -> 1010\n    #  175 -> 1011\n    #  176 -> 1010\n    #  177 -> 1011\n    #  178 -> 1010\n    #  179 -> 1011\n    #  180 -> 1010\n    #  181 -> 1011\n    #  182 -> 1010\n    #  183 -> 1011\n    #  184 -> 1010\n    #  185 -> 1011\n    #  186 -> 1010\n    #  187 -> 1011\n    #  188 -> 1010\n    #  189 -> 1011\n    #  190 -> 1010\n    #  191 -> 1011\n    #  192 -> 1010\n    #  193 -> 1011\n    #  194 -> 1010\n    #  195 -> 1011\n    #  196 -> 1010\n    #  197 -> 1011\n    #  198 -> 1010\n    #  199 -> 1011\n    #  200 -> 1010\n    #  201 -> 1011\n    #  202 -> 1010\n    #  203 -> 1011\n    #  204 -> 1010\n    #  205 -> 1011\n    #  206 -> 1010\n    #  207 -> 1011\n    #  208 -> 1010\n    #  209 -> 1011\n    #  210 -> 1010\n    #  211 -> 1011\n    #  212 -> 1010\n    #  213 -> 1011\n    #  214 -> 1010\n    #  215 -> 1011\n    #  216 -> 1010\n    #  217 -> 1011\n    #  218 -> 1010\n    #  219 -> 1011\n    #  220 -> 1010\n    #  221 -> 1011\n    #  222 -> 1010\n    #  223 -> 1011\n    #  224 -> 1010\n    #  225 -> 1011\n    #  226 -> 1010\n    #  227 -> 1011\n    #  228 -> 1010\n    #  229 -> 1011\n    #  230 -> 1010\n    #  231 -> 1011\n    #  232 -> 1010\n    #  233 -> 1011\n    #  234 -> 1010\n    #  235 -> 1011\n    #  236 -> 1010\n    #  237 -> 1011\n    #  238 -> 1010\n    #  239 -> 1011\n    #  240 -> 1010\n    #  241 -> 1011\n    #  242 -> 1010\n    #  243 -> 1011\n    #  244 -> 1010\n    #  245 -> 1011\n    #  246 -> 1010\n    #  247 -> 1011\n    #  248 -"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #print n,d\n    mask = 1<<d;\n    return n & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d=d%32\n    n=(n << d)|(n >> (32-d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n & (1 << d):\n        n = n ^ (1 << d)\n    if (n & (1 << (32 - d))):\n        n = n ^ (1 << (32 - d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | ((n & 0xffffffff) >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d))) & 0xffffffff\n    \ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n>>d)|(n<<(32-d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp = bin(n)[2:].zfill(32)\n    temp = temp[-d:] + temp[:-d]\n    return int(temp,2)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if not text:\n        return text\n    new_text = re.sub('\\s', '', text)\n    return new_text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(r'\\s+', re.IGNORECASE)\n    text = re.sub(pattern, '', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','',text)\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces in a string.\n    '''\n    return re.sub(r'\\s+','',text)\ndef remove_all_newline_chars(text):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return re.sub(r'\\n','',text)\ndef remove_all_newline_chars_in_list(list_of_text):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [re.sub(r'\\n','',txt) for txt in list_of_text]\ndef remove_all_newline_chars_in_list_of_list(list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[re.sub(r'\\n','',txt) for txt in lst] for lst in list_of_list]\ndef remove_newline_chars_in_list(list_of_text):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [re.sub(r'\\n','',txt) for txt in list_of_text]\ndef remove_newline_chars_in_list_of_list(list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[re.sub(r'\\n','',txt) for txt in lst] for lst in list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list(list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[re.sub(r'\\n','',txt) for txt in lst] for lst in lst] for lst in list_of_list_of_list]\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','',text)\ndef remove_whitespaces_in_list(list_of_text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return [re.sub(r'\\s+','',txt) for txt in list_of_text]\ndef remove_whitespaces_in_list_of_list(list_of_list):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return [[re.sub(r'\\s+','',txt) for txt in lst] for lst in list_of_list]\ndef remove_whitespaces_in_list_of_list_of_list(list_of_list_of_list):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return [[[re.sub(r'\\s+','',txt) for txt in lst] for lst in lst] for lst in list_of_list_of_list]\ndef remove_whitespaces_in_list_of_list_of_list_of_list(list_of_list_of_list_of_list):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return [[[[re.sub(r'\\s+','',txt) for txt in lst] for lst in lst] for lst in lst] for lst in list_of_list_of_list_of_list]\ndef remove_newline_chars_in_list_of_list(list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[re.sub(r'\\n','',txt) for txt in lst] for lst in list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list(list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[re.sub(r'\\n','',txt) for txt in lst] for lst in lst] for lst in list_of_list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list_of_list(list_of_list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[[re.sub(r'\\n','',txt) for txt in lst] for lst in lst] for lst in lst] for lst in list_of_list_of_list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list_of_list(list_of_list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[[[re.sub(r'\\n','',txt) for txt in lst] for lst in lst] for lst in lst] for lst in lst] for lst in list_of_list_of_list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list_of_list_of_list(list_of_list_of_list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[[[[re.sub(r'\\n','',txt) for txt in lst] for lst in lst] for lst in lst] for lst in lst] for lst in lst] for lst in list_of_list_of_list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list_of_list_of_list(list_of_list_of_list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[[[[re.sub(r'\\n','',txt) for txt in lst] for lst in lst] for lst in lst] for lst in lst] for lst in lst] for lst in list_of_list_of_list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list_of_list_of_list(list_of_list_of_list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[[[[re.sub(r'\\n','',txt) for txt in lst] for lst in lst] for lst in lst] for lst in lst] for lst in lst] for lst in list_of_list_of_list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list_of_list_of_list(list_of_list_of_list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[[[[re.sub(r'\\n','',txt) for txt in lst] for lst in lst] for lst in lst] for lst in lst] for lst in lst] for lst in list_of_list_of_list_of_list]\ndef remove_newline_chars_in_list_of_list_of_list_of_list_of_list(list_of_list_of_list_of_list_of_list):\n    '''\n    Write a function to remove all new line characters from a string.\n    '''\n    return [[[[[[re.sub(r'\\n','',txt) for txt in ls"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in x,y,z:\n        if i==i:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert (x == y == z), \"All 3 arguments must be equal\"\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x==y and y==z) or (x==z and z==y):\n        return 3\n    elif x==y or y==z or z==x:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal=0\n    for i in range(3):\n        if x==y:\n            if y==z:\n                equal=equal+1\n            else:\n                pass\n        else:\n            pass\n    return equal\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    # x is the reference element\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            # find the element before the reference element\n            # to which arr[i] is to be shifted\n            j = i - 1\n            while j >= 0 and arr[j]!= i + 1:\n                j -= 1\n            # if arr[j] is the reference element, shift the element at arr[i] to the right\n            if arr[j] == i + 1:\n                arr[j], arr[i] = arr[i], arr[j]\n                count += 1\n            # otherwise, swap the element at arr[i] with the element at arr[j]\n            else:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    count=0\n    length = len(arr)\n    \n    for i in range(0,length):\n        if arr[i]<arr[i+1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    for i in range(n):\n        if arr[i] <= arr[(i + 1) % n]:\n            continue\n        for j in range(n):\n            if arr[(i + 1) % n] < arr[j] <= arr[i]:\n                return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    size = len(arr)\n    if size == 0:\n        return 0\n    arr_idx = 0\n    last_idx = size - 1\n    while arr_idx <= last_idx:\n        if arr[arr_idx] > arr[last_idx]:\n            arr_idx += 1\n        else:\n            last_idx -= 1\n    return arr_idx\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr) - 1\n    count = 0\n    while start <= end:\n        if arr[start] > arr[end]:\n            count += 1\n            temp = arr[start]\n            arr[start] = arr[end]\n            arr[end] = temp\n            end -= 1\n        else:\n            start += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    \n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 : return True\n    if n < 0 : return False\n    # print(n)\n    x = n\n    y = (x + 1) // 2\n    while y * y <= x :\n        # print(y)\n        if y * y == x : return True\n        y = (y + 1) // 2\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (int(math.sqrt(n)) * int(math.sqrt(n)) == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check for negative numbers\n    if (n < 0) :\n        return -1\n    # Check for perfect square\n    if (n == 0 or n == 1) :\n        return 1\n    # Check for perfect square upto a certain precision\n    temp = 1\n    while temp * temp <= n :\n        temp = temp * 2\n    if temp * temp == n :\n        return 1\n    else :\n        return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    if n == 0 or n == 1 :\n        return True\n    if n == 2 :\n        return False\n    if n % 2 == 0 :\n        return is_perfect_square(n//2)\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0) :\n        return True\n    x = n\n    y = (x + 1) // 2\n    while y * y > x :\n        x = y\n        y = (x + 1) // 2\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(n**(0.5))**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == sqrt(n)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # If the number can be divided by 2 without a remainder, then\n    # it is a perfect square\n    if (n == 0) :\n        return True\n    if (n < 0) :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n ** 0.5 == int(n ** 0.5))\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(math.sqrt(n))\n    return (root*root == n)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    for num in arr:\n        product *= num\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (1 in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x*y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda a,b: a*b, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1: return True\n    else:\n        prod = 1\n        for i in arr: prod *= i\n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x,y: x*y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    from functools import reduce\n    return reduce(lambda x,y: x*y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x,y: x*y,arr)%2 == 0\n    \ndef main():\n    arr = []\n    n = int(raw_input('Enter number of elements: '))\n    for i in range(n):\n        arr.append(int(raw_input('Enter element: ')))\n    if is_product_even(arr):\n        print 'Product is even'\n    else:\n        print 'Product is odd'\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    for x in arr:\n        product *= x\n    \n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr_product = 1\n    for i in arr:\n        arr_product *= i\n    return arr_product%2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [max(list, key=lambda x: sum(x)) for list in lists]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    if len(lists) == 1:\n        return lists[0]\n    else:\n        first = lists[0]\n        max_first = max(first)\n        n_lists = len(lists)\n        if n_lists == 2:\n            second = lists[1]\n            max_second = max(second)\n            if max_first + max_second > max_first + max_second:\n                return [first, second]\n            else:\n                return [max_first + max_second, max_second]\n        else:\n            result = []\n            for element in first:\n                if element + max_first > max_first:\n                    result.append(element + max_first)\n                else:\n                    result.append(max_first)\n            for i in range(1, n_lists):\n                current_list = lists[i]\n                current_result = []\n                for element in current_list:\n                    if element + max_second > max_second:\n                        current_result.append(element + max_second)\n                    else:\n                        current_result.append(max_second)\n                result = [max(current_result, result)]\n                max_second = max(current_result)\n            return result\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # This solution first sorts the lists by length, then the number of zeros.\n    # Then it finds the max sum of zero lists.\n    # If multiple zero lists have the same max sum, then the result is\n    # the list with the longest zero list.\n    \n    def zero_sum(lists):\n        sum = 0\n        for l in lists:\n            sum += sum(l)\n        return sum\n    \n    def zeros_in_list(lists):\n        zeros = 0\n        for l in lists:\n            zeros += len(l) - len(l.remove(0))\n        return zeros\n    \n    def max_sum_zero_list(lists):\n        max_sum = 0\n        max_l = None\n        for l in lists:\n            if len(l) == 0:\n                continue\n            if zero_sum(l) > max_sum:\n                max_sum = zero_sum(l)\n                max_l = l\n        return max_l\n    \n    sort_by_len = sorted(lists, key=len, reverse=True)\n    max_zero_list = max_sum_zero_list(sort_by_len)\n    if max_zero_list is None:\n        return []\n    if len(max_zero_list) == 1:\n        return max_zero_list\n    max_len = len(max_zero_list[0])\n    index = 0\n    while index < len(max_zero_list) - 1 and len(max_zero_list[index]) == max_len:\n        index += 1\n    if index == len(max_zero_list) - 1:\n        return max_zero_list\n    return max_zero_list[:index + 1]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sum(lists, 0)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        sum_list = sum(list)\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def sum_list(a_list):\n        '''\n        Write a function that returns the sum of a list.\n        '''\n        if len(a_list)==1:\n            return a_list[0]\n        else:\n            return a_list[0] + sum_list(a_list[1:])\n    return max(lists, key=sum_list)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    temp = []\n    for sublist in lists:\n        temp.append(sum(sublist))\n    return lists[temp.index(max(temp))]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    max_sum = 0\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum_list = l\n            max_sum = sum(l)\n    return max_sum_list\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    curr_len = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    temp = 0\n    for i in range(len(test_str)):\n        if ord(test_str[i]) >= 65 and ord(test_str[i]) <= 90:\n            temp += 1\n        else:\n            temp = 0\n        result = max(result, temp)\n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count, count = 0, 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    max_run_idx = -1\n    for i in range(len(test_str)):\n        if test_str[i] >= 'A':\n            curr_run = 1\n            j = i\n            while j < len(test_str) and test_str[j] >= 'A':\n                curr_run += 1\n                j += 1\n            if curr_run > max_run:\n                max_run = curr_run\n                max_run_idx = i\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        curr_run = 1\n        if i!= len(test_str) - 1:\n            if test_str[i] == test_str[i+1]:\n                curr_run += 1\n        max_run = max(max_run, curr_run)\n    return max_run\n    \nprint max_run_uppercase('AAAAABBBBCCCC')"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    temp = []\n    for i in test_str:\n        if i.isupper():\n            temp.append(i)\n    temp = \"\".join(temp)\n    return max(temp)\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) < 2:\n        return len(test_str)\n    else:\n        last_upper = test_str[0]\n        max_run = 1\n        for i in range(1, len(test_str)):\n            if last_upper == test_str[i]:\n                max_run += 1\n            else:\n                last_upper = test_str[i]\n                if max_run > len(test_str) - i:\n                    break\n                else:\n                    max_run = 1\n        return len(test_str) - i\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    length = len(test_str)\n    if length == 0:\n        return 0\n    max_run = 1\n    run = 1\n    previous = test_str[0]\n    for i in range(1, length):\n        if test_str[i] == previous:\n            run += 1\n        else:\n            if run > max_run:\n                max_run = run\n            run = 1\n            previous = test_str[i]\n    if run > max_run:\n        max_run = run\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    numbers = []\n    for i in nums:\n        if i % 2!= 0:\n            numbers.append(i)\n            break\n    if numbers:\n        return numbers[0]\n    else:\n        return False\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if (num%2) == 1:\n            odd_nums.append(num)\n            break\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup)!= K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup)!= K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    (a, b, c) = test_tup\n    if K == a:\n        return True\n    elif K == b:\n        return True\n    elif K == c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0]==K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0]==K or test_tup[1]==K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    def get_K_hash(tup):\n        return hash(tup) % K\n    \n    res = [get_K_hash(tup) for tup in test_tup]\n    return len(set(res)) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        # print test_tup\n        test_tup[K]\n    except:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    num_ok = 0\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            num_ok += 1\n    return num_ok == len(test_tup1)\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = test_tup1.split(',')\n    test_tup2 = test_tup2.split(',')\n    for i in range(len(test_tup1)):\n        if int(test_tup1[i]) > int(test_tup2[i]):\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for index in range(len(test_tup1)):\n        if test_tup1[index] > test_tup2[index]:\n            print '\\nTest tup1:', test_tup1\n            print 'Test tup2:', test_tup2\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup2 < test_tup1\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print 'Input tuple lengths do not match'\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                print 'Tuple 1 is not smaller than tuple 2'\n                return False\n            else:\n                pass\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in xrange(0, len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n"
    }
]